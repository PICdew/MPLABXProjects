

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Nov 10 22:47:35 2015

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F27J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    98                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    99                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   100                           	dabs	1,0xD00,48,_BDT
   101                           	dabs	1,0xD38,8,_CtrlTrfData
   102                           	dabs	1,0xD30,8,_SetupPkt
   103  0000                     
   104                           	psect	idataBANK0
   105  013360                     __pidataBANK0:
   106                           	opt stack 0
   107                           
   108                           ;initializer for I2C_LCD_SetCursor@F8672
   109  013360  00                 	db	0
   110  013361  40                 	db	64
   111                           
   112                           ;initializer for ISR@cnt_t1
   113  013362  02                 	db	2
   114                           
   115                           ;initializer for epoch_to_caltime@month_cache
   116  013363  01                 	db	1
   117                           
   118                           ;initializer for sleep_loop@prev_power_sw
   119  013364  01                 	db	1
   120                           
   121                           	psect	mediumconst
   122  00FE5A                     __pmediumconst:
   123                           	opt stack 0
   124  00FE5A  00                 	db	0
   125  00FE5B                     _USB_SD_Ptr:
   126                           	opt stack 0
   127  00FE5B  3C                 	db	low _sd000
   128  00FE5C  FF                 	db	high _sd000
   129  00FE5D  A6                 	db	low _sd001
   130  00FE5E  FE                 	db	high _sd001
   131  00FE5F  DA                 	db	low _sd002
   132  00FE60  FE                 	db	high _sd002
   133  00FE61                     __end_of_USB_SD_Ptr:
   134                           	opt stack 0
   135  00FE61                     _USB_CD_Ptr:
   136                           	opt stack 0
   137  00FE61  63                 	db	low _configDescriptor1
   138  00FE62  FE                 	db	high _configDescriptor1
   139  00FE63                     __end_of_USB_CD_Ptr:
   140                           	opt stack 0
   141  00FE63                     _configDescriptor1:
   142                           	opt stack 0
   143  00FE63  09                 	db	9
   144  00FE64  02                 	db	2
   145  00FE65  43                 	db	67
   146  00FE66  00                 	db	0
   147  00FE67  02                 	db	2
   148  00FE68  01                 	db	1
   149  00FE69  00                 	db	0
   150  00FE6A  C0                 	db	192
   151  00FE6B  32                 	db	50
   152  00FE6C  09                 	db	9
   153  00FE6D  04                 	db	4
   154  00FE6E  00                 	db	0
   155  00FE6F  00                 	db	0
   156  00FE70  01                 	db	1
   157  00FE71  02                 	db	2
   158  00FE72  02                 	db	2
   159  00FE73  01                 	db	1
   160  00FE74  00                 	db	0
   161  00FE75  05                 	db	5
   162  00FE76  24                 	db	36
   163  00FE77  00                 	db	0
   164  00FE78  10                 	db	16
   165  00FE79  01                 	db	1
   166  00FE7A  04                 	db	4
   167  00FE7B  24                 	db	36
   168  00FE7C  02                 	db	2
   169  00FE7D  02                 	db	2
   170  00FE7E  05                 	db	5
   171  00FE7F  24                 	db	36
   172  00FE80  06                 	db	6
   173  00FE81  00                 	db	0
   174  00FE82  01                 	db	1
   175  00FE83  05                 	db	5
   176  00FE84  24                 	db	36
   177  00FE85  01                 	db	1
   178  00FE86  00                 	db	0
   179  00FE87  01                 	db	1
   180  00FE88  07                 	db	7
   181  00FE89  05                 	db	5
   182  00FE8A  81                 	db	129
   183  00FE8B  03                 	db	3
   184  00FE8C  08                 	db	8
   185  00FE8D  00                 	db	0
   186  00FE8E  02                 	db	2
   187  00FE8F  09                 	db	9
   188  00FE90  04                 	db	4
   189  00FE91  01                 	db	1
   190  00FE92  00                 	db	0
   191  00FE93  02                 	db	2
   192  00FE94  0A                 	db	10
   193  00FE95  00                 	db	0
   194  00FE96  00                 	db	0
   195  00FE97  00                 	db	0
   196  00FE98  07                 	db	7
   197  00FE99  05                 	db	5
   198  00FE9A  02                 	db	2
   199  00FE9B  02                 	db	2
   200  00FE9C  40                 	db	64
   201  00FE9D  00                 	db	0
   202  00FE9E  00                 	db	0
   203  00FE9F  07                 	db	7
   204  00FEA0  05                 	db	5
   205  00FEA1  82                 	db	130
   206  00FEA2  02                 	db	2
   207  00FEA3  40                 	db	64
   208  00FEA4  00                 	db	0
   209  00FEA5  00                 	db	0
   210  00FEA6                     __end_of_configDescriptor1:
   211                           	opt stack 0
   212  00FEA6                     _sd001:
   213                           	opt stack 0
   214  00FEA6  34                 	db	52
   215  00FEA7  03                 	db	3
   216  00FEA8  004D               	dw	77
   217  00FEAA  0069               	dw	105
   218  00FEAC  0063               	dw	99
   219  00FEAE  0072               	dw	114
   220  00FEB0  006F               	dw	111
   221  00FEB2  0063               	dw	99
   222  00FEB4  0068               	dw	104
   223  00FEB6  0069               	dw	105
   224  00FEB8  0070               	dw	112
   225  00FEBA  0020               	dw	32
   226  00FEBC  0054               	dw	84
   227  00FEBE  0065               	dw	101
   228  00FEC0  0063               	dw	99
   229  00FEC2  0068               	dw	104
   230  00FEC4  006E               	dw	110
   231  00FEC6  006F               	dw	111
   232  00FEC8  006C               	dw	108
   233  00FECA  006F               	dw	111
   234  00FECC  0067               	dw	103
   235  00FECE  0079               	dw	121
   236  00FED0  0020               	dw	32
   237  00FED2  0049               	dw	73
   238  00FED4  006E               	dw	110
   239  00FED6  0063               	dw	99
   240  00FED8  002E               	dw	46
   241  00FEDA                     __end_of_sd001:
   242                           	opt stack 0
   243  00FEDA                     _sd002:
   244                           	opt stack 0
   245  00FEDA  34                 	db	52
   246  00FEDB  03                 	db	3
   247  00FEDC  0043               	dw	67
   248  00FEDE  0044               	dw	68
   249  00FEE0  0043               	dw	67
   250  00FEE2  0020               	dw	32
   251  00FEE4  0052               	dw	82
   252  00FEE6  0053               	dw	83
   253  00FEE8  002D               	dw	45
   254  00FEEA  0032               	dw	50
   255  00FEEC  0033               	dw	51
   256  00FEEE  0032               	dw	50
   257  00FEF0  0020               	dw	32
   258  00FEF2  0045               	dw	69
   259  00FEF4  006D               	dw	109
   260  00FEF6  0075               	dw	117
   261  00FEF8  006C               	dw	108
   262  00FEFA  0061               	dw	97
   263  00FEFC  0074               	dw	116
   264  00FEFE  0069               	dw	105
   265  00FF00  006F               	dw	111
   266  00FF02  006E               	dw	110
   267  00FF04  0020               	dw	32
   268  00FF06  0044               	dw	68
   269  00FF08  0065               	dw	101
   270  00FF0A  006D               	dw	109
   271  00FF0C  006F               	dw	111
   272  00FF0E                     __end_of_sd002:
   273                           	opt stack 0
   274  00FF0E                     _weekday_3char:
   275                           	opt stack 0
   276  00FF0E  53                 	db	83
   277  00FF0F  55                 	db	85
   278  00FF10  4E                 	db	78
   279  00FF11  00                 	db	0
   280  00FF12  4D                 	db	77
   281  00FF13  4F                 	db	79
   282  00FF14  4E                 	db	78
   283  00FF15  00                 	db	0
   284  00FF16  54                 	db	84
   285  00FF17  55                 	db	85
   286  00FF18  45                 	db	69
   287  00FF19  00                 	db	0
   288  00FF1A  57                 	db	87
   289  00FF1B  45                 	db	69
   290  00FF1C  44                 	db	68
   291  00FF1D  00                 	db	0
   292  00FF1E  54                 	db	84
   293  00FF1F  48                 	db	72
   294  00FF20  55                 	db	85
   295  00FF21  00                 	db	0
   296  00FF22  46                 	db	70
   297  00FF23  52                 	db	82
   298  00FF24  49                 	db	73
   299  00FF25  00                 	db	0
   300  00FF26  53                 	db	83
   301  00FF27  41                 	db	65
   302  00FF28  54                 	db	84
   303  00FF29  00                 	db	0
   304  00FF2A                     __end_of_weekday_3char:
   305                           	opt stack 0
   306  00FF2A                     _device_dsc:
   307                           	opt stack 0
   308  00FF2A  12                 	db	18
   309  00FF2B  01                 	db	1
   310  00FF2C  0200               	dw	512
   311  00FF2E  02                 	db	2
   312  00FF2F  00                 	db	0
   313  00FF30  00                 	db	0
   314  00FF31  08                 	db	8
   315  00FF32  04D8               	dw	1240
   316  00FF34  000A               	dw	10
   317  00FF36  0100               	dw	256
   318  00FF38  01                 	db	1
   319  00FF39  02                 	db	2
   320  00FF3A  00                 	db	0
   321  00FF3B  01                 	db	1
   322  00FF3C                     __end_of_device_dsc:
   323                           	opt stack 0
   324  00FF3C                     _sd000:
   325                           	opt stack 0
   326  00FF3C  04                 	db	4
   327  00FF3D  03                 	db	3
   328  00FF3E  0409               	dw	1033
   329  00FF40                     __end_of_sd000:
   330                           	opt stack 0
   331  0000                     _ANCON0	set	3912
   332  0000                     _ANCON1	set	3913
   333  0000                     _PADCFG1bits	set	3900
   334  0000                     _RTCCAL	set	3902
   335  0000                     _RTCCFGbits	set	3903
   336  0000                     _RTCVALH	set	3899
   337  0000                     _RTCVALL	set	3898
   338  0000                     _T5CONbits	set	3874
   339  0000                     _UADDR	set	3896
   340  0000                     _UCFG	set	3897
   341  0000                     _UEIE	set	3895
   342  0000                     _UEP0bits	set	3878
   343  0000                     _UIE	set	3894
   344  0000                     _UIEbits	set	3894
   345  0000                     _UEP0	set	3878
   346  0000                     _UEP1	set	3879
   347  0000                     _ADRES	set	4035
   348  0000                     _ADCON0bits	set	4034
   349  0000                     _ADCON1bits	set	4033
   350  0000                     _BAUDCON1bits	set	3966
   351  0000                     _CTMUCONH	set	4019
   352  0000                     _CTMUCONHbits	set	4019
   353  0000                     _CTMUCONL	set	4018
   354  0000                     _CTMUCONLbits	set	4018
   355  0000                     _CTMUICON	set	4017
   356  0000                     _EECON2	set	4007
   357  0000                     _INTCON2bits	set	4081
   358  0000                     _INTCONbits	set	4082
   359  0000                     _IPR1bits	set	3999
   360  0000                     _IPR2bits	set	4002
   361  0000                     _IPR5bits	set	3993
   362  0000                     _OSCCONbits	set	4051
   363  0000                     _OSCTUNEbits	set	3995
   364  0000                     _PIE1bits	set	3997
   365  0000                     _PIE2bits	set	4000
   366  0000                     _PIE5bits	set	3985
   367  0000                     _PIR1bits	set	3998
   368  0000                     _PIR2bits	set	4001
   369  0000                     _PIR5bits	set	3992
   370  0000                     _PORTBbits	set	3969
   371  0000                     _RCONbits	set	4048
   372  0000                     _RCREG1	set	4015
   373  0000                     _RCSTA1bits	set	4012
   374  0000                     _SPBRG1	set	4016
   375  0000                     _SPBRGH1	set	3967
   376  0000                     _SSP1ADD	set	4040
   377  0000                     _SSP1BUF	set	4041
   378  0000                     _SSP1CON1	set	4038
   379  0000                     _SSP1CON2	set	4037
   380  0000                     _SSP1CON2bits	set	4037
   381  0000                     _SSP1STAT	set	4039
   382  0000                     _T0CONbits	set	4053
   383  0000                     _T1CONbits	set	4045
   384  0000                     _T3CONbits	set	3961
   385  0000                     _TMR1H	set	4047
   386  0000                     _TRISA	set	3986
   387  0000                     _TRISB	set	3987
   388  0000                     _TRISC	set	3988
   389  0000                     _TXREG1	set	4014
   390  0000                     _TXSTA1bits	set	4013
   391  0000                     _UCON	set	3941
   392  0000                     _UCONbits	set	3941
   393  0000                     _UEIR	set	3939
   394  0000                     _UIR	set	3938
   395  0000                     _UIRbits	set	3938
   396  0000                     _USTAT	set	3940
   397  0000                     _BCL1IF	set	32011
   398  0000                     _LATA5	set	31821
   399  0000                     _LATA6	set	31822
   400  0000                     _LATA7	set	31823
   401  0000                     _LATB2	set	31826
   402  0000                     _LATB6	set	31830
   403  0000                     _LATB7	set	31831
   404  0000                     _LATC2	set	31834
   405  0000                     _SSP1IF	set	31987
   406  00FF40                     STR_16:
   407  00FF40  49                 	db	73	;'I'
   408  00FF41  6E                 	db	110	;'n'
   409  00FF42  74                 	db	116	;'t'
   410  00FF43  65                 	db	101	;'e'
   411  00FF44  67                 	db	103	;'g'
   412  00FF45  72                 	db	114	;'r'
   413  00FF46  61                 	db	97	;'a'
   414  00FF47  74                 	db	116	;'t'
   415  00FF48  69                 	db	105	;'i'
   416  00FF49  6E                 	db	110	;'n'
   417  00FF4A  67                 	db	103	;'g'
   418  00FF4B  20                 	db	32
   419  00FF4C  52                 	db	82	;'R'
   420  00FF4D  65                 	db	101	;'e'
   421  00FF4E  73                 	db	115	;'s'
   422  00FF4F  65                 	db	101	;'e'
   423  00FF50  74                 	db	116	;'t'
   424  00FF51  65                 	db	101	;'e'
   425  00FF52  64                 	db	100	;'d'
   426  00FF53  00                 	db	0
   427  00FF54                     STR_15:
   428  00FF54  49                 	db	73	;'I'
   429  00FF55  6E                 	db	110	;'n'
   430  00FF56  74                 	db	116	;'t'
   431  00FF57  65                 	db	101	;'e'
   432  00FF58  67                 	db	103	;'g'
   433  00FF59  72                 	db	114	;'r'
   434  00FF5A  61                 	db	97	;'a'
   435  00FF5B  74                 	db	116	;'t'
   436  00FF5C  69                 	db	105	;'i'
   437  00FF5D  6E                 	db	110	;'n'
   438  00FF5E  67                 	db	103	;'g'
   439  00FF5F  20                 	db	32
   440  00FF60  52                 	db	82	;'R'
   441  00FF61  65                 	db	101	;'e'
   442  00FF62  73                 	db	115	;'s'
   443  00FF63  65                 	db	101	;'e'
   444  00FF64  74                 	db	116	;'t'
   445  00FF65  3F                 	db	63	;'?'
   446  00FF66  00                 	db	0
   447  00FF67                     STR_8:
   448  00FF67  43                 	db	67	;'C'
   449  00FF68  68                 	db	104	;'h'
   450  00FF69  61                 	db	97	;'a'
   451  00FF6A  72                 	db	114	;'r'
   452  00FF6B  67                 	db	103	;'g'
   453  00FF6C  65                 	db	101	;'e'
   454  00FF6D  20                 	db	32
   455  00FF6E  53                 	db	83	;'S'
   456  00FF6F  74                 	db	116	;'t'
   457  00FF70  61                 	db	97	;'a'
   458  00FF71  74                 	db	116	;'t'
   459  00FF72  69                 	db	105	;'i'
   460  00FF73  6F                 	db	111	;'o'
   461  00FF74  6E                 	db	110	;'n'
   462  00FF75  20                 	db	32
   463  00FF76  36                 	db	54	;'6'
   464  00FF77  00                 	db	0
   465  00FF78                     STR_17:
   466  00FF78  41                 	db	65	;'A'
   467  00FF79  6C                 	db	108	;'l'
   468  00FF7A  77                 	db	119	;'w'
   469  00FF7B  61                 	db	97	;'a'
   470  00FF7C  79                 	db	121	;'y'
   471  00FF7D  73                 	db	115	;'s'
   472  00FF7E  20                 	db	32
   473  00FF7F  43                 	db	67	;'C'
   474  00FF80  68                 	db	104	;'h'
   475  00FF81  61                 	db	97	;'a'
   476  00FF82  72                 	db	114	;'r'
   477  00FF83  67                 	db	103	;'g'
   478  00FF84  69                 	db	105	;'i'
   479  00FF85  6E                 	db	110	;'n'
   480  00FF86  67                 	db	103	;'g'
   481  00FF87  00                 	db	0
   482  00FF88                     STR_9:
   483  00FF88  4D                 	db	77	;'M'
   484  00FF89  61                 	db	97	;'a'
   485  00FF8A  64                 	db	100	;'d'
   486  00FF8B  65                 	db	101	;'e'
   487  00FF8C  20                 	db	32
   488  00FF8D  62                 	db	98	;'b'
   489  00FF8E  79                 	db	121	;'y'
   490  00FF8F  20                 	db	32
   491  00FF90  4B                 	db	75	;'K'
   492  00FF91  45                 	db	69	;'E'
   493  00FF92  52                 	db	82	;'R'
   494  00FF93  49                 	db	73	;'I'
   495  00FF94  00                 	db	0
   496  00FF95                     STR_18:
   497  00FF95  41                 	db	65	;'A'
   498  00FF96  75                 	db	117	;'u'
   499  00FF97  74                 	db	116	;'t'
   500  00FF98  6F                 	db	111	;'o'
   501  00FF99  20                 	db	32
   502  00FF9A  53                 	db	83	;'S'
   503  00FF9B  74                 	db	116	;'t'
   504  00FF9C  6F                 	db	111	;'o'
   505  00FF9D  70                 	db	112	;'p'
   506  00FF9E  20                 	db	32
   507  00FF9F  4F                 	db	79	;'O'
   508  00FFA0  4E                 	db	78	;'N'
   509  00FFA1  00                 	db	0
   510  00FFA2                     STR_5:
   511  00FFA2  43                 	db	67	;'C'
   512  00FFA3  45                 	db	69	;'E'
   513  00FFA4  4E                 	db	78	;'N'
   514  00FFA5  54                 	db	84	;'T'
   515  00FFA6  45                 	db	69	;'E'
   516  00FFA7  52                 	db	82	;'R'
   517  00FFA8  20                 	db	32
   518  00FFA9  50                 	db	80	;'P'
   519  00FFAA  4F                 	db	79	;'O'
   520  00FFAB  52                 	db	82	;'R'
   521  00FFAC  54                 	db	84	;'T'
   522  00FFAD  00                 	db	0
   523  00FFAE                     STR_4:
   524  00FFAE  43                 	db	67	;'C'
   525  00FFAF  65                 	db	101	;'e'
   526  00FFB0  6E                 	db	110	;'n'
   527  00FFB1  74                 	db	116	;'t'
   528  00FFB2  65                 	db	101	;'e'
   529  00FFB3  72                 	db	114	;'r'
   530  00FFB4  20                 	db	32
   531  00FFB5  50                 	db	80	;'P'
   532  00FFB6  6F                 	db	111	;'o'
   533  00FFB7  72                 	db	114	;'r'
   534  00FFB8  74                 	db	116	;'t'
   535  00FFB9  00                 	db	0
   536  00FFBA                     STR_7:
   537  00FFBA  52                 	db	82	;'R'
   538  00FFBB  49                 	db	73	;'I'
   539  00FFBC  47                 	db	71	;'G'
   540  00FFBD  48                 	db	72	;'H'
   541  00FFBE  54                 	db	84	;'T'
   542  00FFBF  20                 	db	32
   543  00FFC0  50                 	db	80	;'P'
   544  00FFC1  4F                 	db	79	;'O'
   545  00FFC2  52                 	db	82	;'R'
   546  00FFC3  54                 	db	84	;'T'
   547  00FFC4  00                 	db	0
   548  00FFC5                     STR_6:
   549  00FFC5  52                 	db	82	;'R'
   550  00FFC6  69                 	db	105	;'i'
   551  00FFC7  67                 	db	103	;'g'
   552  00FFC8  68                 	db	104	;'h'
   553  00FFC9  74                 	db	116	;'t'
   554  00FFCA  20                 	db	32
   555  00FFCB  50                 	db	80	;'P'
   556  00FFCC  6F                 	db	111	;'o'
   557  00FFCD  72                 	db	114	;'r'
   558  00FFCE  74                 	db	116	;'t'
   559  00FFCF  00                 	db	0
   560  00FFD0                     STR_3:
   561  00FFD0  4C                 	db	76	;'L'
   562  00FFD1  45                 	db	69	;'E'
   563  00FFD2  46                 	db	70	;'F'
   564  00FFD3  54                 	db	84	;'T'
   565  00FFD4  20                 	db	32
   566  00FFD5  50                 	db	80	;'P'
   567  00FFD6  4F                 	db	79	;'O'
   568  00FFD7  52                 	db	82	;'R'
   569  00FFD8  54                 	db	84	;'T'
   570  00FFD9  00                 	db	0
   571  00FFDA                     STR_2:
   572  00FFDA  4C                 	db	76	;'L'
   573  00FFDB  65                 	db	101	;'e'
   574  00FFDC  66                 	db	102	;'f'
   575  00FFDD  74                 	db	116	;'t'
   576  00FFDE  20                 	db	32
   577  00FFDF  50                 	db	80	;'P'
   578  00FFE0  6F                 	db	111	;'o'
   579  00FFE1  72                 	db	114	;'r'
   580  00FFE2  74                 	db	116	;'t'
   581  00FFE3  00                 	db	0
   582  00FFE4                     STR_20:
   583  00FFE4  53                 	db	83	;'S'
   584  00FFE5  4C                 	db	76	;'L'
   585  00FFE6  45                 	db	69	;'E'
   586  00FFE7  45                 	db	69	;'E'
   587  00FFE8  50                 	db	80	;'P'
   588  00FFE9  49                 	db	73	;'I'
   589  00FFEA  4E                 	db	78	;'N'
   590  00FFEB  47                 	db	71	;'G'
   591  00FFEC  00                 	db	0
   592  00FFED                     STR_10:
   593  00FFED  6D                 	db	109	;'m'
   594  00FFEE  41                 	db	65	;'A'
   595  00FFEF  68                 	db	104	;'h'
   596  00FFF0  00                 	db	0
   597  00FFF1                     STR_1:
   598  00FFF1  20                 	db	32
   599  00FFF2  20                 	db	32
   600  00FFF3  00                 	db	0
   601  00FFF4                     STR_11:
   602  00FFF4  64                 	db	100	;'d'
   603  00FFF5  20                 	db	32
   604  00FFF6  00                 	db	0
   605  00FFF7                     STR_12:
   606  00FFF7  68                 	db	104	;'h'
   607  00FFF8  20                 	db	32
   608  00FFF9  00                 	db	0
   609  00FFFA                     STR_13:
   610  00FFFA  6D                 	db	109	;'m'
   611  00FFFB  20                 	db	32
   612  00FFFC  00                 	db	0
   613  00FFFD                     STR_14:
   614  00FFFD  73                 	db	115	;'s'
   615  00FFFE  00                 	db	0
   616  0000                     
   617                           ; #config settings
   618  00FFFF  00                 	db	0	; dummy byte at the end
   619  0000                     
   620                           	psect	cinit
   621  012AAA                     __pcinit:
   622                           	opt stack 0
   623  012AAA                     start_initialization:
   624                           	opt stack 0
   625  012AAA                     __initialization:
   626                           	opt stack 0
   627                           
   628                           ; Clear objects allocated to BANK3 (128 bytes)
   629  012AAA  EE03  F000         	lfsr	0,__pbssBANK3
   630  012AAE  0E80               	movlw	128
   631  012AB0                     clear_0:
   632  012AB0  6AEE               	clrf	postinc0,c
   633  012AB2  06E8               	decf	wreg,f,c
   634  012AB4  E1FD               	bnz	clear_0
   635                           
   636                           ; Clear objects allocated to BANK2 (42 bytes)
   637  012AB6  EE02  F0C8         	lfsr	0,__pbssBANK2
   638  012ABA  0E2A               	movlw	42
   639  012ABC                     clear_1:
   640  012ABC  6AEE               	clrf	postinc0,c
   641  012ABE  06E8               	decf	wreg,f,c
   642  012AC0  E1FD               	bnz	clear_1
   643                           
   644                           ; Clear objects allocated to BANK1 (53 bytes)
   645  012AC2  EE01  F0C9         	lfsr	0,__pbssBANK1
   646  012AC6  0E35               	movlw	53
   647  012AC8                     clear_2:
   648  012AC8  6AEE               	clrf	postinc0,c
   649  012ACA  06E8               	decf	wreg,f,c
   650  012ACC  E1FD               	bnz	clear_2
   651                           
   652                           ; Clear objects allocated to BANK0 (115 bytes)
   653  012ACE  EE00  F060         	lfsr	0,__pbssBANK0
   654  012AD2  0E73               	movlw	115
   655  012AD4                     clear_3:
   656  012AD4  6AEE               	clrf	postinc0,c
   657  012AD6  06E8               	decf	wreg,f,c
   658  012AD8  E1FD               	bnz	clear_3
   659                           
   660                           ; Clear objects allocated to COMRAM (31 bytes)
   661  012ADA  EE00  F021         	lfsr	0,__pbssCOMRAM
   662  012ADE  0E1F               	movlw	31
   663  012AE0                     clear_4:
   664  012AE0  6AEE               	clrf	postinc0,c
   665  012AE2  06E8               	decf	wreg,f,c
   666  012AE4  E1FD               	bnz	clear_4
   667                           
   668                           ; Initialize objects allocated to BANK0 (5 bytes)
   669                           ; load TBLPTR registers with __pidataBANK0
   670  012AE6  0E60               	movlw	low __pidataBANK0
   671  012AE8  6EF6               	movwf	tblptrl,c
   672  012AEA  0E33               	movlw	high __pidataBANK0
   673  012AEC  6EF7               	movwf	tblptrh,c
   674  012AEE  0E01               	movlw	low (__pidataBANK0 shr (0+16))
   675  012AF0  6EF8               	movwf	tblptru,c
   676  012AF2  EE00  F0FB         	lfsr	0,__pdataBANK0
   677  012AF6  EE10 F005          	lfsr	1,5
   678  012AFA                     copy_data0:
   679  012AFA  0009               	tblrd		*+
   680  012AFC  CFF5 FFEE          	movff	tablat,postinc0
   681  012B00  50E5               	movf	postdec1,w,c
   682  012B02  50E1               	movf	fsr1l,w,c
   683  012B04  E1FA               	bnz	copy_data0
   684  012B06                     end_of_initialization:
   685                           	opt stack 0
   686  012B06                     __end_of__initialization:
   687                           	opt stack 0
   688  012B06  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   689  012B08  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   690  012B0A  0100               	movlb	0
   691  012B0C  EFDC  F089         	goto	_main	;jump to C main() function
   692                           tblptru	equ	0xFF8
   693                           tblptrh	equ	0xFF7
   694                           tblptrl	equ	0xFF6
   695                           tablat	equ	0xFF5
   696                           postinc0	equ	0xFEE
   697                           wreg	equ	0xFE8
   698                           postdec1	equ	0xFE5
   699                           fsr1l	equ	0xFE1
   700                           
   701                           	psect	bssCOMRAM
   702  000021                     __pbssCOMRAM:
   703                           	opt stack 0
   704  000021                     _inPipes:
   705                           	opt stack 0
   706  000021                     	ds	6
   707  000027                     _pBDTEntryIn:
   708                           	opt stack 0
   709  000027                     	ds	6
   710  00002D                     _CDCDataOutHandle:
   711                           	opt stack 0
   712  00002D                     	ds	2
   713  00002F                     _pBDTEntryEP0OutCurrent:
   714                           	opt stack 0
   715  00002F                     	ds	2
   716  000031                     _pBDTEntryEP0OutNext:
   717                           	opt stack 0
   718  000031                     	ds	2
   719  000033                     _USBDeferStatusStagePacket:
   720                           	opt stack 0
   721  000033                     	ds	1
   722  000034                     _USBDeviceState:
   723                           	opt stack 0
   724  000034                     	ds	1
   725  000035                     _USBStatusStageTimeoutCounter:
   726                           	opt stack 0
   727  000035                     	ds	1
   728  000036                     _cdc_rx_len:
   729                           	opt stack 0
   730  000036                     	ds	1
   731  000037                     _cdc_trf_state:
   732                           	opt stack 0
   733  000037                     	ds	1
   734  000038                     _cdc_tx_len:
   735                           	opt stack 0
   736  000038                     	ds	1
   737  000039                     _controlTransferState:
   738                           	opt stack 0
   739  000039                     	ds	1
   740  00003A                     _endpoint_number:
   741                           	opt stack 0
   742  00003A                     	ds	1
   743  00003B                     _print_port:
   744                           	opt stack 0
   745  00003B                     	ds	1
   746  00003C                     _shortPacketStatus:
   747                           	opt stack 0
   748  00003C                     	ds	1
   749  00003D                     _sleep_flag:
   750                           	opt stack 0
   751  00003D                     	ds	1
   752  00003E                     _USBActiveConfiguration:
   753                           	opt stack 0
   754  00003E                     	ds	1
   755  00003F                     _USTATcopy:
   756                           	opt stack 0
   757  00003F                     	ds	1
   758                           tblptru	equ	0xFF8
   759                           tblptrh	equ	0xFF7
   760                           tblptrl	equ	0xFF6
   761                           tablat	equ	0xFF5
   762                           postinc0	equ	0xFEE
   763                           wreg	equ	0xFE8
   764                           postdec1	equ	0xFE5
   765                           fsr1l	equ	0xFE1
   766                           
   767                           	psect	bssBANK0
   768  000060                     __pbssBANK0:
   769                           	opt stack 0
   770  000060                     _outPipes:
   771                           	opt stack 0
   772  000060                     	ds	9
   773  000069                     _I:
   774                           	opt stack 0
   775  000069                     	ds	6
   776  00006F                     _cut_cnt:
   777                           	opt stack 0
   778  00006F                     	ds	6
   779  000075                     _pBDTEntryOut:
   780                           	opt stack 0
   781  000075                     	ds	6
   782  00007B                     _auto_cut_ON:
   783                           	opt stack 0
   784  00007B                     	ds	3
   785  00007E                     _ep_data_in:
   786                           	opt stack 0
   787  00007E                     	ds	3
   788  000081                     _ep_data_out:
   789                           	opt stack 0
   790  000081                     	ds	3
   791  000084                     _out_flag:
   792                           	opt stack 0
   793  000084                     	ds	3
   794  000087                     _pCDCDst:
   795                           	opt stack 0
   796  000087                     	ds	3
   797  00008A                     _pCDCSrc:
   798                           	opt stack 0
   799  00008A                     	ds	3
   800  00008D                     lchika@cnt:
   801                           	opt stack 0
   802  00008D                     	ds	3
   803  000090                     lchika@cntf:
   804                           	opt stack 0
   805  000090                     	ds	3
   806  000093                     ISR@cnt_t0:
   807                           	opt stack 0
   808  000093                     	ds	2
   809  000095                     USBCBSendResume@delay_count:
   810                           	opt stack 0
   811  000095                     	ds	2
   812  000097                     _CDCDataInHandle:
   813                           	opt stack 0
   814  000097                     	ds	2
   815  000099                     _ctmu_value0:
   816                           	opt stack 0
   817  000099                     	ds	2
   818  00009B                     _ctmu_value1:
   819                           	opt stack 0
   820  00009B                     	ds	2
   821  00009D                     _ctmu_value2:
   822                           	opt stack 0
   823  00009D                     	ds	2
   824  00009F                     _ctmu_valuem:
   825                           	opt stack 0
   826  00009F                     	ds	2
   827  0000A1                     _pDst:
   828                           	opt stack 0
   829  0000A1                     	ds	2
   830  0000A3                     epoch_to_caltime@day_cache:
   831                           	opt stack 0
   832  0000A3                     	ds	2
   833  0000A5                     millis_timer@cnt:
   834                           	opt stack 0
   835  0000A5                     	ds	2
   836  0000A7                     RTCC_loop@prev_halfsec:
   837                           	opt stack 0
   838  0000A7                     	ds	1
   839  0000A8                     _BothEP0OutUOWNsSet:
   840                           	opt stack 0
   841  0000A8                     	ds	1
   842  0000A9                     _RemoteWakeup:
   843                           	opt stack 0
   844  0000A9                     	ds	1
   845  0000AA                     _USBBusIsSuspended:
   846                           	opt stack 0
   847  0000AA                     	ds	1
   848  0000AB                     _USBDeferINDataStagePackets:
   849                           	opt stack 0
   850  0000AB                     	ds	1
   851  0000AC                     _USBDeferOUTDataStagePackets:
   852                           	opt stack 0
   853  0000AC                     	ds	1
   854  0000AD                     _USBStatusStageEnabledFlag1:
   855                           	opt stack 0
   856  0000AD                     	ds	1
   857  0000AE                     _USBStatusStageEnabledFlag2:
   858                           	opt stack 0
   859  0000AE                     	ds	1
   860  0000AF                     _cdc_mem_type:
   861                           	opt stack 0
   862  0000AF                     	ds	1
   863  0000B0                     _colon:
   864                           	opt stack 0
   865  0000B0                     	ds	1
   866  0000B1                     _control_signal_bitmap:
   867                           	opt stack 0
   868  0000B1                     	ds	1
   869  0000B2                     _ctmu_flag:
   870                           	opt stack 0
   871  0000B2                     	ds	1
   872  0000B3                     _cut_time_flag:
   873                           	opt stack 0
   874  0000B3                     	ds	1
   875  0000B4                     _display_flag:
   876                           	opt stack 0
   877  0000B4                     	ds	1
   878  0000B5                     _edit_flag:
   879                           	opt stack 0
   880  0000B5                     	ds	1
   881  0000B6                     _halfsec:
   882                           	opt stack 0
   883  0000B6                     	ds	1
   884  0000B7                     _print_content:
   885                           	opt stack 0
   886  0000B7                     	ds	1
   887  0000B8                     _time_change_flag:
   888                           	opt stack 0
   889  0000B8                     	ds	1
   890  0000B9                     epoch_to_caltime@year_cache:
   891                           	opt stack 0
   892  0000B9                     	ds	1
   893  0000BA                     _ct0:
   894                           	opt stack 0
   895  0000BA                     	ds	4
   896  0000BE                     _ct1:
   897                           	opt stack 0
   898  0000BE                     	ds	4
   899  0000C2                     _ct2:
   900                           	opt stack 0
   901  0000C2                     	ds	4
   902  0000C6                     _ctm:
   903                           	opt stack 0
   904  0000C6                     	ds	4
   905  0000CA                     _epoch_now:
   906                           	opt stack 0
   907  0000CA                     	ds	4
   908  0000CE                     _delay_display:
   909                           	opt stack 0
   910  0000CE                     	ds	3
   911  0000D1                     _USBAlternateInterface:
   912                           	opt stack 0
   913  0000D1                     	ds	2
   914                           tblptru	equ	0xFF8
   915                           tblptrh	equ	0xFF7
   916                           tblptrl	equ	0xFF6
   917                           tablat	equ	0xFF5
   918                           postinc0	equ	0xFEE
   919                           wreg	equ	0xFE8
   920                           postdec1	equ	0xFE5
   921                           fsr1l	equ	0xFE1
   922                           
   923                           	psect	dataBANK0
   924  0000FB                     __pdataBANK0:
   925                           	opt stack 0
   926  0000FB                     I2C_LCD_SetCursor@F8672:
   927                           	opt stack 0
   928  0000FB                     	ds	2
   929  0000FD                     ISR@cnt_t1:
   930                           	opt stack 0
   931  0000FD                     	ds	1
   932  0000FE                     epoch_to_caltime@month_cache:
   933                           	opt stack 0
   934  0000FE                     	ds	1
   935  0000FF                     sleep_loop@prev_power_sw:
   936                           	opt stack 0
   937  0000FF                     	ds	1
   938                           tblptru	equ	0xFF8
   939                           tblptrh	equ	0xFF7
   940                           tblptrl	equ	0xFF6
   941                           tablat	equ	0xFF5
   942                           postinc0	equ	0xFEE
   943                           wreg	equ	0xFE8
   944                           postdec1	equ	0xFE5
   945                           fsr1l	equ	0xFE1
   946                           
   947                           	psect	bssBANK1
   948  0001C9                     __pbssBANK1:
   949                           	opt stack 0
   950  0001C9                     _S:
   951                           	opt stack 0
   952  0001C9                     	ds	12
   953  0001D5                     _charge_time:
   954                           	opt stack 0
   955  0001D5                     	ds	12
   956  0001E1                     _ms:
   957                           	opt stack 0
   958  0001E1                     	ds	4
   959  0001E5                     _d1:
   960                           	opt stack 0
   961  0001E5                     	ds	3
   962  0001E8                     _tx_buf:
   963                           	opt stack 0
   964  0001E8                     	ds	8
   965  0001F0                     _caltime_now:
   966                           	opt stack 0
   967  0001F0                     	ds	7
   968  0001F7                     _line_coding:
   969                           	opt stack 0
   970  0001F7                     	ds	7
   971                           tblptru	equ	0xFF8
   972                           tblptrh	equ	0xFF7
   973                           tblptrl	equ	0xFF6
   974                           tablat	equ	0xFF5
   975                           postinc0	equ	0xFEE
   976                           wreg	equ	0xFE8
   977                           postdec1	equ	0xFE5
   978                           fsr1l	equ	0xFE1
   979                           
   980                           	psect	bssBANK2
   981  0002C8                     __pbssBANK2:
   982                           	opt stack 0
   983  0002C8                     _s:
   984                           	opt stack 0
   985  0002C8                     	ds	12
   986  0002D4                     _cdc_notice:
   987                           	opt stack 0
   988  0002D4                     	ds	10
   989  0002DE                     _BaudRateGen:
   990                           	opt stack 0
   991  0002DE                     	ds	4
   992  0002E2                     _dummy_encapsulated_cmd_response:
   993                           	opt stack 0
   994  0002E2                     	ds	8
   995  0002EA                     _rx_buf:
   996                           	opt stack 0
   997  0002EA                     	ds	8
   998                           tblptru	equ	0xFF8
   999                           tblptrh	equ	0xFF7
  1000                           tblptrl	equ	0xFF6
  1001                           tablat	equ	0xFF5
  1002                           postinc0	equ	0xFEE
  1003                           wreg	equ	0xFE8
  1004                           postdec1	equ	0xFE5
  1005                           fsr1l	equ	0xFE1
  1006                           
  1007                           	psect	bssBANK3
  1008  000300                     __pbssBANK3:
  1009                           	opt stack 0
  1010  000300                     _cdc_data_rx:
  1011                           	opt stack 0
  1012  000300                     	ds	64
  1013  000340                     _cdc_data_tx:
  1014                           	opt stack 0
  1015  000340                     	ds	64
  1016                           tblptru	equ	0xFF8
  1017                           tblptrh	equ	0xFF7
  1018                           tblptrl	equ	0xFF6
  1019                           tablat	equ	0xFF5
  1020                           postinc0	equ	0xFEE
  1021                           wreg	equ	0xFE8
  1022                           postdec1	equ	0xFE5
  1023                           fsr1l	equ	0xFE1
  1024                           
  1025                           	psect	cstackBANK2
  1026  000200                     __pcstackBANK2:
  1027                           	opt stack 0
  1028  000200                     main_init@rxbuf:
  1029                           	opt stack 0
  1030                           
  1031                           ; 200 bytes @ 0x0
  1032  000200                     	ds	200
  1033                           tblptru	equ	0xFF8
  1034                           tblptrh	equ	0xFF7
  1035                           tblptrl	equ	0xFF6
  1036                           tablat	equ	0xFF5
  1037                           postinc0	equ	0xFEE
  1038                           wreg	equ	0xFE8
  1039                           postdec1	equ	0xFE5
  1040                           fsr1l	equ	0xFE1
  1041                           
  1042                           	psect	cstackBANK1
  1043  000100                     __pcstackBANK1:
  1044                           	opt stack 0
  1045  000100                     epoch_to_caltime@day_since_epoch:
  1046                           	opt stack 0
  1047  000100                     RTCC_from_RTCC@ct:
  1048                           	opt stack 0
  1049  000100                     display_dec@str:
  1050                           	opt stack 0
  1051  000100                     main_init@txbuf:
  1052                           	opt stack 0
  1053                           
  1054                           ; 200 bytes @ 0x0
  1055  000100                     	ds	2
  1056  000102                     epoch_to_caltime@day:
  1057                           	opt stack 0
  1058  000102                     RTCC_from_RTCC@ep:
  1059                           	opt stack 0
  1060                           
  1061                           ; 2 bytes @ 0x2
  1062  000102                     	ds	2
  1063  000104                     epoch_to_caltime@year:
  1064                           	opt stack 0
  1065  000104                     sleep_loop@i:
  1066                           	opt stack 0
  1067                           
  1068                           ; 1 bytes @ 0x4
  1069  000104                     	ds	1
  1070  000105                     epoch_to_caltime@month:
  1071                           	opt stack 0
  1072                           
  1073                           ; 1 bytes @ 0x5
  1074  000105                     	ds	1
  1075  000106                     epoch_to_caltime@num:
  1076                           	opt stack 0
  1077                           
  1078                           ; 4 bytes @ 0x6
  1079  000106                     	ds	4
  1080  00010A                     display_dec@dec:
  1081                           	opt stack 0
  1082  00010A                     RTCC_from_epoch@ct:
  1083                           	opt stack 0
  1084                           
  1085                           ; 2 bytes @ 0xA
  1086  00010A                     	ds	1
  1087  00010B                     display_time_1602@ct:
  1088                           	opt stack 0
  1089                           
  1090                           ; 2 bytes @ 0xB
  1091  00010B                     	ds	1
  1092  00010C                     RTCC_from_epoch@ep:
  1093                           	opt stack 0
  1094                           
  1095                           ; 2 bytes @ 0xC
  1096  00010C                     	ds	1
  1097  00010D                     display_time_1602@ep:
  1098                           	opt stack 0
  1099                           
  1100                           ; 2 bytes @ 0xD
  1101  00010D                     	ds	1
  1102  00010E                     RTCC_adjust_time_inc@ct:
  1103                           	opt stack 0
  1104  00010E                     RTCC_adjust_time_dec@ct:
  1105                           	opt stack 0
  1106                           
  1107                           ; 2 bytes @ 0xE
  1108  00010E                     	ds	1
  1109  00010F                     ??_display_time_1602:
  1110                           
  1111                           ; 0 bytes @ 0xF
  1112  00010F                     	ds	1
  1113  000110                     RTCC_adjust_time_inc@ep:
  1114                           	opt stack 0
  1115  000110                     RTCC_adjust_time_dec@ep:
  1116                           	opt stack 0
  1117  000110                     display_LCD@str:
  1118                           	opt stack 0
  1119                           
  1120                           ; 10 bytes @ 0x10
  1121  000110                     	ds	2
  1122  000112                     ??_RTCC_adjust_time_inc:
  1123  000112                     ??_RTCC_adjust_time_dec:
  1124                           
  1125                           ; 0 bytes @ 0x12
  1126  000112                     	ds	4
  1127  000116                     RTCC_adjust_time_inc@i_2077:
  1128                           	opt stack 0
  1129  000116                     RTCC_adjust_time_dec@i_2090:
  1130                           	opt stack 0
  1131                           
  1132                           ; 1 bytes @ 0x16
  1133  000116                     	ds	1
  1134  000117                     RTCC_adjust_time_inc@i:
  1135                           	opt stack 0
  1136  000117                     RTCC_adjust_time_dec@i:
  1137                           	opt stack 0
  1138                           
  1139                           ; 1 bytes @ 0x17
  1140  000117                     	ds	1
  1141  000118                     RTCC_adjust_time_button@mode:
  1142                           	opt stack 0
  1143                           
  1144                           ; 2 bytes @ 0x18
  1145  000118                     	ds	2
  1146  00011A                     RTCC_adjust_time_button@cnt_inc:
  1147                           	opt stack 0
  1148  00011A                     _display_LCD$5194:
  1149                           	opt stack 0
  1150                           
  1151                           ; 4 bytes @ 0x1A
  1152  00011A                     	ds	2
  1153  00011C                     RTCC_adjust_time_button@cnt_dec:
  1154                           	opt stack 0
  1155                           
  1156                           ; 2 bytes @ 0x1C
  1157  00011C                     	ds	172
  1158  0001C8                     main@i:
  1159                           	opt stack 0
  1160                           
  1161                           ; 1 bytes @ 0xC8
  1162  0001C8                     	ds	1
  1163                           tblptru	equ	0xFF8
  1164                           tblptrh	equ	0xFF7
  1165                           tblptrl	equ	0xFF6
  1166                           tablat	equ	0xFF5
  1167                           postinc0	equ	0xFEE
  1168                           wreg	equ	0xFE8
  1169                           postdec1	equ	0xFE5
  1170                           fsr1l	equ	0xFE1
  1171                           
  1172                           	psect	cstackBANK0
  1173  0000D3                     __pcstackBANK0:
  1174                           	opt stack 0
  1175  0000D3                     ??_timer1_init:
  1176  0000D3                     ?_ADC:
  1177                           	opt stack 0
  1178  0000D3                     ?_sw_flag_read:
  1179                           	opt stack 0
  1180  0000D3                     ?___awdiv:
  1181                           	opt stack 0
  1182  0000D3                     ?___awmod:
  1183                           	opt stack 0
  1184  0000D3                     ?___lwmod:
  1185                           	opt stack 0
  1186  0000D3                     ?___lldiv:
  1187                           	opt stack 0
  1188  0000D3                     timer0_init@prescaler:
  1189                           	opt stack 0
  1190  0000D3                     timer3_init@prescaler:
  1191                           	opt stack 0
  1192  0000D3                     I2C_IdleCheck@mask:
  1193                           	opt stack 0
  1194  0000D3                     x_to_d@hex:
  1195                           	opt stack 0
  1196  0000D3                     OUT@b:
  1197                           	opt stack 0
  1198  0000D3                     LED@b:
  1199                           	opt stack 0
  1200  0000D3                     ringbuf_init@rb:
  1201                           	opt stack 0
  1202  0000D3                     Delay_ms@ms:
  1203                           	opt stack 0
  1204  0000D3                     delay_set@d:
  1205                           	opt stack 0
  1206  0000D3                     sw_flag_read@bit_and:
  1207                           	opt stack 0
  1208  0000D3                     sw_flag_clear@bit_and:
  1209                           	opt stack 0
  1210  0000D3                     ___awdiv@dividend:
  1211                           	opt stack 0
  1212  0000D3                     ___awmod@dividend:
  1213                           	opt stack 0
  1214  0000D3                     ___lwmod@dividend:
  1215                           	opt stack 0
  1216  0000D3                     ___lldiv@dividend:
  1217                           	opt stack 0
  1218                           
  1219                           ; 4 bytes @ 0x0
  1220  0000D3                     	ds	1
  1221  0000D4                     timer1_init@prescaler:
  1222                           	opt stack 0
  1223  0000D4                     I2C_Start@rw:
  1224                           	opt stack 0
  1225  0000D4                     I2C_Send@data:
  1226                           	opt stack 0
  1227  0000D4                     RTCC_to_caltime@ct:
  1228                           	opt stack 0
  1229                           
  1230                           ; 2 bytes @ 0x1
  1231  0000D4                     	ds	1
  1232  0000D5                     ADC@ch:
  1233                           	opt stack 0
  1234  0000D5                     I2C_Start@adrs:
  1235                           	opt stack 0
  1236  0000D5                     ringbuf_init@internal_buf:
  1237                           	opt stack 0
  1238  0000D5                     delay_set@value:
  1239                           	opt stack 0
  1240  0000D5                     ___awdiv@divisor:
  1241                           	opt stack 0
  1242  0000D5                     ___awmod@divisor:
  1243                           	opt stack 0
  1244  0000D5                     ___lwmod@divisor:
  1245                           	opt stack 0
  1246                           
  1247                           ; 2 bytes @ 0x2
  1248  0000D5                     	ds	1
  1249  0000D6                     ?___wmul:
  1250                           	opt stack 0
  1251  0000D6                     I2C_LCD_Command@c:
  1252                           	opt stack 0
  1253  0000D6                     I2C_LCD_Putc@c:
  1254                           	opt stack 0
  1255  0000D6                     RTCC_to_caltime@dumy:
  1256                           	opt stack 0
  1257  0000D6                     I2C_LCD_Puts@s:
  1258                           	opt stack 0
  1259  0000D6                     ___wmul@multiplier:
  1260                           	opt stack 0
  1261                           
  1262                           ; 2 bytes @ 0x3
  1263  0000D6                     	ds	1
  1264  0000D7                     I2C_LCD_Command@ans:
  1265                           	opt stack 0
  1266  0000D7                     I2C_LCD_Putc@ans:
  1267                           	opt stack 0
  1268  0000D7                     port_loop@i:
  1269                           	opt stack 0
  1270  0000D7                     ___awdiv@counter:
  1271                           	opt stack 0
  1272  0000D7                     ___awmod@counter:
  1273                           	opt stack 0
  1274  0000D7                     ringbuf_init@bufsize:
  1275                           	opt stack 0
  1276  0000D7                     ___lldiv@divisor:
  1277                           	opt stack 0
  1278                           
  1279                           ; 4 bytes @ 0x4
  1280  0000D7                     	ds	1
  1281  0000D8                     ??_I2C_LCD_Clear:
  1282  0000D8                     ??_I2C_LCD_Puts:
  1283  0000D8                     I2C_LCD_SetCursor@row:
  1284                           	opt stack 0
  1285  0000D8                     ___awdiv@sign:
  1286                           	opt stack 0
  1287  0000D8                     ___awmod@sign:
  1288                           	opt stack 0
  1289  0000D8                     ___wmul@multiplicand:
  1290                           	opt stack 0
  1291                           
  1292                           ; 2 bytes @ 0x5
  1293  0000D8                     	ds	1
  1294  0000D9                     ??_month_length:
  1295  0000D9                     I2C_LCD_SetCursor@row_offsets:
  1296                           	opt stack 0
  1297  0000D9                     I2C_LCD_Puts@ans:
  1298                           	opt stack 0
  1299  0000D9                     ___awdiv@quotient:
  1300                           	opt stack 0
  1301                           
  1302                           ; 2 bytes @ 0x6
  1303  0000D9                     	ds	1
  1304  0000DA                     ___wmul@product:
  1305                           	opt stack 0
  1306                           
  1307                           ; 2 bytes @ 0x7
  1308  0000DA                     	ds	1
  1309  0000DB                     I2C_LCD_SetCursor@col:
  1310                           	opt stack 0
  1311  0000DB                     caltime_to_RTCC@ct:
  1312                           	opt stack 0
  1313  0000DB                     ___lldiv@quotient:
  1314                           	opt stack 0
  1315                           
  1316                           ; 4 bytes @ 0x8
  1317  0000DB                     	ds	1
  1318  0000DC                     ??_Auto_cut:
  1319                           
  1320                           ; 0 bytes @ 0x9
  1321  0000DC                     	ds	1
  1322  0000DD                     month_length@year:
  1323                           	opt stack 0
  1324                           
  1325                           ; 1 bytes @ 0xA
  1326  0000DD                     	ds	1
  1327  0000DE                     Auto_cut@i:
  1328                           	opt stack 0
  1329                           
  1330                           ; 1 bytes @ 0xB
  1331  0000DE                     	ds	1
  1332  0000DF                     ___lldiv@counter:
  1333                           	opt stack 0
  1334                           
  1335                           ; 1 bytes @ 0xC
  1336  0000DF                     	ds	1
  1337  0000E0                     ?_CTMU_read:
  1338                           	opt stack 0
  1339  0000E0                     ?___lmul:
  1340                           	opt stack 0
  1341  0000E0                     ?___llmod:
  1342                           	opt stack 0
  1343  0000E0                     ___lmul@multiplier:
  1344                           	opt stack 0
  1345  0000E0                     ___llmod@dividend:
  1346                           	opt stack 0
  1347                           
  1348                           ; 4 bytes @ 0xD
  1349  0000E0                     	ds	2
  1350  0000E2                     CTMU_read@ch:
  1351                           	opt stack 0
  1352                           
  1353                           ; 1 bytes @ 0xF
  1354  0000E2                     	ds	1
  1355  0000E3                     CTMU_read@sum:
  1356                           	opt stack 0
  1357                           
  1358                           ; 4 bytes @ 0x10
  1359  0000E3                     	ds	1
  1360  0000E4                     ___lmul@multiplicand:
  1361                           	opt stack 0
  1362  0000E4                     ___llmod@divisor:
  1363                           	opt stack 0
  1364                           
  1365                           ; 4 bytes @ 0x11
  1366  0000E4                     	ds	3
  1367  0000E7                     CTMU_read@i:
  1368                           	opt stack 0
  1369                           
  1370                           ; 1 bytes @ 0x14
  1371  0000E7                     	ds	1
  1372  0000E8                     ?___lwdiv:
  1373                           	opt stack 0
  1374  0000E8                     ___lwdiv@dividend:
  1375                           	opt stack 0
  1376  0000E8                     ___lmul@product:
  1377                           	opt stack 0
  1378                           
  1379                           ; 4 bytes @ 0x15
  1380  0000E8                     	ds	2
  1381  0000EA                     ___lwdiv@divisor:
  1382                           	opt stack 0
  1383                           
  1384                           ; 2 bytes @ 0x17
  1385  0000EA                     	ds	2
  1386  0000EC                     ?_get_quot_rem:
  1387                           	opt stack 0
  1388  0000EC                     ___lwdiv@counter:
  1389                           	opt stack 0
  1390  0000EC                     get_quot_rem@quot:
  1391                           	opt stack 0
  1392  0000EC                     caltime_to_epoch@ct:
  1393                           	opt stack 0
  1394                           
  1395                           ; 2 bytes @ 0x19
  1396  0000EC                     	ds	1
  1397  0000ED                     ___lwdiv@quotient:
  1398                           	opt stack 0
  1399                           
  1400                           ; 2 bytes @ 0x1A
  1401  0000ED                     	ds	1
  1402  0000EE                     get_quot_rem@div:
  1403                           	opt stack 0
  1404  0000EE                     caltime_to_epoch@ep:
  1405                           	opt stack 0
  1406                           
  1407                           ; 2 bytes @ 0x1B
  1408  0000EE                     	ds	1
  1409  0000EF                     button_timer_interrupt@bt:
  1410                           	opt stack 0
  1411  0000EF                     my_utoa@str:
  1412                           	opt stack 0
  1413                           
  1414                           ; 2 bytes @ 0x1C
  1415  0000EF                     	ds	1
  1416  0000F0                     ??_caltime_to_epoch:
  1417  0000F0                     get_quot_rem@num:
  1418                           	opt stack 0
  1419                           
  1420                           ; 4 bytes @ 0x1D
  1421  0000F0                     	ds	1
  1422  0000F1                     button_timer_interrupt@sw_value:
  1423                           	opt stack 0
  1424  0000F1                     my_utoa@value:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0x1E
  1428  0000F1                     	ds	1
  1429  0000F2                     
  1430                           ; 0 bytes @ 0x1F
  1431  0000F2                     	ds	1
  1432  0000F3                     my_utoa@digits:
  1433                           	opt stack 0
  1434                           
  1435                           ; 1 bytes @ 0x20
  1436  0000F3                     	ds	1
  1437  0000F4                     caltime_to_epoch@year:
  1438                           	opt stack 0
  1439  0000F4                     my_utoa@d:
  1440                           	opt stack 0
  1441  0000F4                     epoch_to_caltime@ct:
  1442                           	opt stack 0
  1443                           
  1444                           ; 2 bytes @ 0x21
  1445  0000F4                     	ds	1
  1446  0000F5                     caltime_to_epoch@month_1995:
  1447                           	opt stack 0
  1448  0000F5                     my_utoa@v:
  1449                           	opt stack 0
  1450                           
  1451                           ; 2 bytes @ 0x22
  1452  0000F5                     	ds	1
  1453  0000F6                     epoch_to_caltime@ep:
  1454                           	opt stack 0
  1455  0000F6                     caltime_to_epoch@epoch:
  1456                           	opt stack 0
  1457                           
  1458                           ; 4 bytes @ 0x23
  1459  0000F6                     	ds	1
  1460  0000F7                     display_dec@edit:
  1461                           	opt stack 0
  1462                           
  1463                           ; 1 bytes @ 0x24
  1464  0000F7                     	ds	1
  1465  0000F8                     ??_epoch_to_caltime:
  1466                           
  1467                           ; 0 bytes @ 0x25
  1468  0000F8                     	ds	2
  1469  0000FA                     caltime_to_epoch@month:
  1470                           	opt stack 0
  1471                           
  1472                           ; 1 bytes @ 0x27
  1473  0000FA                     	ds	1
  1474                           tblptru	equ	0xFF8
  1475                           tblptrh	equ	0xFF7
  1476                           tblptrl	equ	0xFF6
  1477                           tablat	equ	0xFF5
  1478                           postinc0	equ	0xFEE
  1479                           wreg	equ	0xFE8
  1480                           postdec1	equ	0xFE5
  1481                           fsr1l	equ	0xFE1
  1482                           
  1483                           	psect	cstackCOMRAM
  1484  000001                     __pcstackCOMRAM:
  1485                           	opt stack 0
  1486  000001                     ?_ringbuf_num:
  1487                           	opt stack 0
  1488  000001                     ?i2___awdiv:
  1489                           	opt stack 0
  1490  000001                     ?i2___lwdiv:
  1491                           	opt stack 0
  1492  000001                     ?i2___lldiv:
  1493                           	opt stack 0
  1494  000001                     i2LED@value:
  1495                           	opt stack 0
  1496  000001                     ringbuf_num@rb:
  1497                           	opt stack 0
  1498  000001                     delay_timer_interrupt@d:
  1499                           	opt stack 0
  1500  000001                     i2___awdiv@dividend:
  1501                           	opt stack 0
  1502  000001                     i2___lwdiv@dividend:
  1503                           	opt stack 0
  1504  000001                     i2___lldiv@dividend:
  1505                           	opt stack 0
  1506                           
  1507                           ; 4 bytes @ 0x0
  1508  000001                     	ds	1
  1509  000002                     i2LED@b:
  1510                           	opt stack 0
  1511                           
  1512                           ; 1 bytes @ 0x1
  1513  000002                     	ds	1
  1514  000003                     ??_ringbuf_num:
  1515  000003                     charge_time_count@i:
  1516                           	opt stack 0
  1517  000003                     i2___awdiv@divisor:
  1518                           	opt stack 0
  1519  000003                     i2___lwdiv@divisor:
  1520                           	opt stack 0
  1521                           
  1522                           ; 2 bytes @ 0x2
  1523  000003                     	ds	2
  1524  000005                     i2___awdiv@counter:
  1525                           	opt stack 0
  1526  000005                     i2___lwdiv@quotient:
  1527                           	opt stack 0
  1528  000005                     i2___lldiv@divisor:
  1529                           	opt stack 0
  1530                           
  1531                           ; 4 bytes @ 0x4
  1532  000005                     	ds	1
  1533  000006                     i2___awdiv@sign:
  1534                           	opt stack 0
  1535                           
  1536                           ; 1 bytes @ 0x5
  1537  000006                     	ds	1
  1538  000007                     i2___lwdiv@counter:
  1539                           	opt stack 0
  1540  000007                     i2___awdiv@quotient:
  1541                           	opt stack 0
  1542                           
  1543                           ; 2 bytes @ 0x6
  1544  000007                     	ds	2
  1545  000009                     ??_lchika:
  1546  000009                     ringbuf_put@rb:
  1547                           	opt stack 0
  1548  000009                     ringbuf_pop@rb:
  1549                           	opt stack 0
  1550  000009                     i2___lldiv@quotient:
  1551                           	opt stack 0
  1552                           
  1553                           ; 4 bytes @ 0x8
  1554  000009                     	ds	2
  1555  00000B                     ??_ringbuf_pop:
  1556  00000B                     ringbuf_put@asciicode:
  1557                           	opt stack 0
  1558                           
  1559                           ; 1 bytes @ 0xA
  1560  00000B                     	ds	1
  1561  00000C                     ??_ringbuf_put:
  1562  00000C                     lchika@i:
  1563                           	opt stack 0
  1564                           
  1565                           ; 1 bytes @ 0xB
  1566  00000C                     	ds	1
  1567  00000D                     i2___lldiv@counter:
  1568                           	opt stack 0
  1569                           
  1570                           ; 1 bytes @ 0xC
  1571  00000D                     	ds	1
  1572  00000E                     ??_integrating:
  1573                           
  1574                           ; 0 bytes @ 0xD
  1575  00000E                     	ds	1
  1576  00000F                     ringbuf_pop@ret:
  1577                           	opt stack 0
  1578                           
  1579                           ; 1 bytes @ 0xE
  1580  00000F                     	ds	1
  1581  000010                     UART_ISR@ascii:
  1582                           	opt stack 0
  1583  000010                     tx_send@asciicode:
  1584                           	opt stack 0
  1585  000010                     integrating@port:
  1586                           	opt stack 0
  1587                           
  1588                           ; 1 bytes @ 0xF
  1589  000010                     	ds	1
  1590  000011                     ??_ISR:
  1591                           
  1592                           ; 0 bytes @ 0x10
  1593  000011                     	ds	14
  1594  00001F                     ISR@ascii:
  1595                           	opt stack 0
  1596                           
  1597                           ; 1 bytes @ 0x1E
  1598  00001F                     	ds	1
  1599  000020                     ??_timer0_init:
  1600  000020                     ??_timer3_init:
  1601  000020                     ??_ADC:
  1602  000020                     ??_CTMU_read:
  1603  000020                     ??_Delay_ms:
  1604  000020                     ??_I2C_IdleCheck:
  1605  000020                     ??_x_to_d:
  1606  000020                     timer1_init@clock_select:
  1607                           	opt stack 0
  1608  000020                     ADC_init@p_ref:
  1609                           	opt stack 0
  1610  000020                     d_to_x@dec:
  1611                           	opt stack 0
  1612  000020                     month_length@month:
  1613                           	opt stack 0
  1614  000020                     OUT@value:
  1615                           	opt stack 0
  1616  000020                     IN@b:
  1617                           	opt stack 0
  1618  000020                     LED@value:
  1619                           	opt stack 0
  1620  000020                     sw_flag_read@port:
  1621                           	opt stack 0
  1622  000020                     sw_flag_clear@port:
  1623                           	opt stack 0
  1624  000020                     ___llmod@counter:
  1625                           	opt stack 0
  1626  000020                     ___lwmod@counter:
  1627                           	opt stack 0
  1628                           
  1629                           ; 1 bytes @ 0x1F
  1630  000020                     	ds	1
  1631  000021                     tblptru	equ	0xFF8
  1632                           tblptrh	equ	0xFF7
  1633                           tblptrl	equ	0xFF6
  1634                           tablat	equ	0xFF5
  1635                           postinc0	equ	0xFEE
  1636                           wreg	equ	0xFE8
  1637                           postdec1	equ	0xFE5
  1638                           fsr1l	equ	0xFE1
  1639                           
  1640                           ; 0 bytes @ 0x20
  1641 ;;
  1642 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1643 ;;
  1644 ;; *************** function _main *****************
  1645 ;; Defined at:
  1646 ;;		line 104 in file "main.c"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;		None
  1649 ;; Auto vars:     Size  Location     Type
  1650 ;;  i               1  200[BANK1 ] unsigned char 
  1651 ;; Return value:  Size  Location     Type
  1652 ;;                  2  774[None  ] int 
  1653 ;; Registers used:
  1654 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1655 ;; Tracked objects:
  1656 ;;		On entry : 0/0
  1657 ;;		On exit  : 0/0
  1658 ;;		Unchanged: 0/0
  1659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1661 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1663 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1664 ;;Total ram usage:        1 bytes
  1665 ;; Hardware stack levels required when called:   11
  1666 ;; This function calls:
  1667 ;;		_CTMU_read
  1668 ;;		_LED
  1669 ;;		_OUT
  1670 ;;		_RTCC_from_RTCC
  1671 ;;		_RTCC_from_epoch
  1672 ;;		_RTCC_loop
  1673 ;;		___lwdiv
  1674 ;;		_main_init
  1675 ;;		_normal_mode_loop
  1676 ;;		_sleep_loop
  1677 ;; This function is called by:
  1678 ;;		Startup code after reset
  1679 ;; This function uses a non-reentrant model
  1680 ;;
  1681                           
  1682                           	psect	text0
  1683  0113B8                     __ptext0:
  1684                           	opt stack 0
  1685  0113B8                     _main:
  1686                           	opt stack 20
  1687                           
  1688                           ;main.c: 105: main_init();
  1689                           
  1690                           ;incstack = 0
  1691  0113B8  EC5D  F092         	call	_main_init	;wreg free
  1692                           
  1693                           ;main.c: 106: INTCONbits.GIE = 1;
  1694  0113BC  8EF2               	bsf	intcon,7,c	;volatile
  1695                           
  1696                           ;main.c: 108: ctmu_value0 = 4 * CTMU_read(0) / 5;
  1697  0113BE  0E00               	movlw	0
  1698  0113C0  ECD7  F08F         	call	_CTMU_read
  1699  0113C4  0100               	movlb	0	; () banked
  1700  0113C6  90D8               	bcf	status,0,c
  1701  0113C8  37E0               	rlcf	?_CTMU_read& (0+255),f,b
  1702  0113CA  37E1               	rlcf	(?_CTMU_read+1)& (0+255),f,b
  1703  0113CC  0100               	movlb	0	; () banked
  1704  0113CE  90D8               	bcf	status,0,c
  1705  0113D0  37E0               	rlcf	?_CTMU_read& (0+255),f,b
  1706  0113D2  37E1               	rlcf	(?_CTMU_read+1)& (0+255),f,b
  1707  0113D4  C0E0  F0E8         	movff	?_CTMU_read,___lwdiv@dividend
  1708  0113D8  C0E1  F0E9         	movff	?_CTMU_read+1,___lwdiv@dividend+1
  1709  0113DC  0E00               	movlw	0
  1710  0113DE  0100               	movlb	0	; () banked
  1711  0113E0  6FEB               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1712  0113E2  0E05               	movlw	5
  1713  0113E4  6FEA               	movwf	___lwdiv@divisor& (0+255),b
  1714  0113E6  ECA4  F094         	call	___lwdiv	;wreg free
  1715  0113EA  C0E8  F099         	movff	?___lwdiv,_ctmu_value0
  1716  0113EE  C0E9  F09A         	movff	?___lwdiv+1,_ctmu_value0+1
  1717                           
  1718                           ;main.c: 109: ctmu_value1 = 4 * CTMU_read(1) / 5;
  1719  0113F2  0E01               	movlw	1
  1720  0113F4  ECD7  F08F         	call	_CTMU_read
  1721  0113F8  0100               	movlb	0	; () banked
  1722  0113FA  90D8               	bcf	status,0,c
  1723  0113FC  37E0               	rlcf	?_CTMU_read& (0+255),f,b
  1724  0113FE  37E1               	rlcf	(?_CTMU_read+1)& (0+255),f,b
  1725  011400  0100               	movlb	0	; () banked
  1726  011402  90D8               	bcf	status,0,c
  1727  011404  37E0               	rlcf	?_CTMU_read& (0+255),f,b
  1728  011406  37E1               	rlcf	(?_CTMU_read+1)& (0+255),f,b
  1729  011408  C0E0  F0E8         	movff	?_CTMU_read,___lwdiv@dividend
  1730  01140C  C0E1  F0E9         	movff	?_CTMU_read+1,___lwdiv@dividend+1
  1731  011410  0E00               	movlw	0
  1732  011412  0100               	movlb	0	; () banked
  1733  011414  6FEB               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1734  011416  0E05               	movlw	5
  1735  011418  6FEA               	movwf	___lwdiv@divisor& (0+255),b
  1736  01141A  ECA4  F094         	call	___lwdiv	;wreg free
  1737  01141E  C0E8  F09B         	movff	?___lwdiv,_ctmu_value1
  1738  011422  C0E9  F09C         	movff	?___lwdiv+1,_ctmu_value1+1
  1739                           
  1740                           ;main.c: 110: ctmu_value2 = 4 * CTMU_read(2) / 5;
  1741  011426  0E02               	movlw	2
  1742  011428  ECD7  F08F         	call	_CTMU_read
  1743  01142C  0100               	movlb	0	; () banked
  1744  01142E  90D8               	bcf	status,0,c
  1745  011430  37E0               	rlcf	?_CTMU_read& (0+255),f,b
  1746  011432  37E1               	rlcf	(?_CTMU_read+1)& (0+255),f,b
  1747  011434  0100               	movlb	0	; () banked
  1748  011436  90D8               	bcf	status,0,c
  1749  011438  37E0               	rlcf	?_CTMU_read& (0+255),f,b
  1750  01143A  37E1               	rlcf	(?_CTMU_read+1)& (0+255),f,b
  1751  01143C  C0E0  F0E8         	movff	?_CTMU_read,___lwdiv@dividend
  1752  011440  C0E1  F0E9         	movff	?_CTMU_read+1,___lwdiv@dividend+1
  1753  011444  0E00               	movlw	0
  1754  011446  0100               	movlb	0	; () banked
  1755  011448  6FEB               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1756  01144A  0E05               	movlw	5
  1757  01144C  6FEA               	movwf	___lwdiv@divisor& (0+255),b
  1758  01144E  ECA4  F094         	call	___lwdiv	;wreg free
  1759  011452  C0E8  F09D         	movff	?___lwdiv,_ctmu_value2
  1760  011456  C0E9  F09E         	movff	?___lwdiv+1,_ctmu_value2+1
  1761                           
  1762                           ;main.c: 111: ctmu_valuem = 4 * CTMU_read(3) / 5;
  1763  01145A  0E03               	movlw	3
  1764  01145C  ECD7  F08F         	call	_CTMU_read
  1765  011460  0100               	movlb	0	; () banked
  1766  011462  90D8               	bcf	status,0,c
  1767  011464  37E0               	rlcf	?_CTMU_read& (0+255),f,b
  1768  011466  37E1               	rlcf	(?_CTMU_read+1)& (0+255),f,b
  1769  011468  0100               	movlb	0	; () banked
  1770  01146A  90D8               	bcf	status,0,c
  1771  01146C  37E0               	rlcf	?_CTMU_read& (0+255),f,b
  1772  01146E  37E1               	rlcf	(?_CTMU_read+1)& (0+255),f,b
  1773  011470  C0E0  F0E8         	movff	?_CTMU_read,___lwdiv@dividend
  1774  011474  C0E1  F0E9         	movff	?_CTMU_read+1,___lwdiv@dividend+1
  1775  011478  0E00               	movlw	0
  1776  01147A  0100               	movlb	0	; () banked
  1777  01147C  6FEB               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1778  01147E  0E05               	movlw	5
  1779  011480  6FEA               	movwf	___lwdiv@divisor& (0+255),b
  1780  011482  ECA4  F094         	call	___lwdiv	;wreg free
  1781  011486  C0E8  F09F         	movff	?___lwdiv,_ctmu_valuem
  1782  01148A  C0E9  F0A0         	movff	?___lwdiv+1,_ctmu_valuem+1
  1783                           
  1784                           ;main.c: 113: RTCC_from_RTCC(&caltime_now, &epoch_now);
  1785  01148E  0EF0               	movlw	low _caltime_now
  1786  011490  0101               	movlb	1	; () banked
  1787  011492  6F00               	movwf	RTCC_from_RTCC@ct& (0+255),b
  1788  011494  0E01               	movlw	high _caltime_now
  1789  011496  0101               	movlb	1	; () banked
  1790  011498  6F01               	movwf	(RTCC_from_RTCC@ct+1)& (0+255),b
  1791  01149A  0ECA               	movlw	low _epoch_now
  1792  01149C  0101               	movlb	1	; () banked
  1793  01149E  6F02               	movwf	RTCC_from_RTCC@ep& (0+255),b
  1794  0114A0  0E00               	movlw	high _epoch_now
  1795  0114A2  0101               	movlb	1	; () banked
  1796  0114A4  6F03               	movwf	(RTCC_from_RTCC@ep+1)& (0+255),b
  1797  0114A6  EC29  F099         	call	_RTCC_from_RTCC	;wreg free
  1798                           
  1799                           ;main.c: 114: if (caltime_now.DD == 0) {
  1800  0114AA  0101               	movlb	1	; () banked
  1801  0114AC  51F4               	movf	(_caltime_now+4)& (0+255),w,b
  1802  0114AE  A4D8               	btfss	status,2,c
  1803  0114B0  D017               	goto	l9204
  1804                           
  1805                           ; BSR set to: 1
  1806                           ;main.c: 115: epoch_now = 0;
  1807  0114B2  0E00               	movlw	0
  1808  0114B4  0100               	movlb	0	; () banked
  1809  0114B6  6FCA               	movwf	_epoch_now& (0+255),b
  1810  0114B8  0E00               	movlw	0
  1811  0114BA  6FCB               	movwf	(_epoch_now+1)& (0+255),b
  1812  0114BC  0E00               	movlw	0
  1813  0114BE  6FCC               	movwf	(_epoch_now+2)& (0+255),b
  1814  0114C0  0E00               	movlw	0
  1815  0114C2  6FCD               	movwf	(_epoch_now+3)& (0+255),b
  1816                           
  1817                           ; BSR set to: 0
  1818                           ;main.c: 116: RTCC_from_epoch(&caltime_now, &epoch_now);
  1819  0114C4  0EF0               	movlw	low _caltime_now
  1820  0114C6  0101               	movlb	1	; () banked
  1821  0114C8  6F0A               	movwf	RTCC_from_epoch@ct& (0+255),b
  1822  0114CA  0E01               	movlw	high _caltime_now
  1823  0114CC  0101               	movlb	1	; () banked
  1824  0114CE  6F0B               	movwf	(RTCC_from_epoch@ct+1)& (0+255),b
  1825  0114D0  0ECA               	movlw	low _epoch_now
  1826  0114D2  0101               	movlb	1	; () banked
  1827  0114D4  6F0C               	movwf	RTCC_from_epoch@ep& (0+255),b
  1828  0114D6  0E00               	movlw	high _epoch_now
  1829  0114D8  0101               	movlb	1	; () banked
  1830  0114DA  6F0D               	movwf	(RTCC_from_epoch@ep+1)& (0+255),b
  1831  0114DC  EC18  F099         	call	_RTCC_from_epoch	;wreg free
  1832  0114E0                     l9204:
  1833                           
  1834                           ;main.c: 117: }
  1835                           ;main.c: 118: print_content = TIME;
  1836  0114E0  0E01               	movlw	1
  1837  0114E2  0100               	movlb	0	; () banked
  1838  0114E4  6FB7               	movwf	_print_content& (0+255),b
  1839                           
  1840                           ; BSR set to: 0
  1841                           ;main.c: 120: uint8_t i;
  1842                           ;main.c: 122: for (i = 0; i < 3; i++) {
  1843  0114E6  0E00               	movlw	0
  1844  0114E8  0101               	movlb	1	; () banked
  1845  0114EA  6FC8               	movwf	main@i& (0+255),b
  1846  0114EC                     l9208:
  1847                           
  1848                           ; BSR set to: 1
  1849  0114EC  0E02               	movlw	2
  1850  0114EE  0101               	movlb	1	; () banked
  1851  0114F0  65C8               	cpfsgt	main@i& (0+255),b
  1852  0114F2  D001               	goto	l9212
  1853  0114F4  D027               	goto	l9224
  1854  0114F6                     l9212:
  1855                           
  1856                           ; BSR set to: 1
  1857                           ;main.c: 123: OUT(i, 1);
  1858  0114F6  0E01               	movlw	1
  1859  0114F8  6E20               	movwf	OUT@value,c
  1860  0114FA  0101               	movlb	1	; () banked
  1861  0114FC  51C8               	movf	main@i& (0+255),w,b
  1862  0114FE  EC10  F096         	call	_OUT
  1863                           
  1864                           ;main.c: 124: LED(i, 1);
  1865  011502  0E01               	movlw	1
  1866  011504  6E20               	movwf	LED@value,c
  1867  011506  0101               	movlb	1	; () banked
  1868  011508  51C8               	movf	main@i& (0+255),w,b
  1869  01150A  EC9B  F097         	call	_LED
  1870                           
  1871                           ;main.c: 125: cut_cnt[i] = 0;
  1872  01150E  0101               	movlb	1	; () banked
  1873  011510  51C8               	movf	main@i& (0+255),w,b
  1874  011512  0D02               	mullw	2
  1875  011514  0E6F               	movlw	low _cut_cnt
  1876  011516  24F3               	addwf	prodl,w,c
  1877  011518  6ED9               	movwf	fsr2l,c
  1878  01151A  0E00               	movlw	high _cut_cnt
  1879  01151C  20F4               	addwfc	prodh,w,c
  1880  01151E  6EDA               	movwf	fsr2h,c
  1881  011520  0E00               	movlw	0
  1882  011522  6EDE               	movwf	postinc2,c
  1883  011524  0E00               	movlw	0
  1884  011526  6EDD               	movwf	postdec2,c
  1885                           
  1886                           ; BSR set to: 1
  1887                           ;main.c: 126: auto_cut_ON[i] = 1;
  1888  011528  0101               	movlb	1	; () banked
  1889  01152A  51C8               	movf	main@i& (0+255),w,b
  1890  01152C  0D01               	mullw	1
  1891  01152E  0E7B               	movlw	low _auto_cut_ON
  1892  011530  24F3               	addwf	prodl,w,c
  1893  011532  6ED9               	movwf	fsr2l,c
  1894  011534  0E00               	movlw	high _auto_cut_ON
  1895  011536  20F4               	addwfc	prodh,w,c
  1896  011538  6EDA               	movwf	fsr2h,c
  1897  01153A  0E01               	movlw	1
  1898  01153C  6EDF               	movwf	indf2,c
  1899                           
  1900                           ; BSR set to: 1
  1901  01153E  0101               	movlb	1	; () banked
  1902  011540  2BC8               	incf	main@i& (0+255),f,b
  1903  011542  D7D4               	goto	l9208
  1904  011544                     l9224:
  1905                           
  1906                           ;main.c: 130: if (!sleep_flag) {
  1907  011544  503D               	movf	_sleep_flag,w,c
  1908  011546  A4D8               	btfss	status,2,c
  1909  011548  D004               	goto	l9230
  1910                           
  1911                           ;main.c: 131: normal_mode_loop();
  1912  01154A  EC74  F08F         	call	_normal_mode_loop	;wreg free
  1913                           
  1914                           ;main.c: 132: RTCC_loop();
  1915  01154E  EC2F  F097         	call	_RTCC_loop	;wreg free
  1916  011552                     l9230:
  1917                           
  1918                           ;main.c: 133: }
  1919                           ;main.c: 134: sleep_loop();
  1920  011552  EC0E  F08F         	call	_sleep_loop	;wreg free
  1921  011556  D7F6               	goto	l9224
  1922  011558                     __end_of_main:
  1923                           	opt stack 0
  1924                           tblptru	equ	0xFF8
  1925                           tblptrh	equ	0xFF7
  1926                           tblptrl	equ	0xFF6
  1927                           tablat	equ	0xFF5
  1928                           prodh	equ	0xFF4
  1929                           prodl	equ	0xFF3
  1930                           intcon	equ	0xFF2
  1931                           postinc0	equ	0xFEE
  1932                           wreg	equ	0xFE8
  1933                           postdec1	equ	0xFE5
  1934                           fsr1l	equ	0xFE1
  1935                           indf2	equ	0xFDF
  1936                           postinc2	equ	0xFDE
  1937                           postdec2	equ	0xFDD
  1938                           fsr2h	equ	0xFDA
  1939                           fsr2l	equ	0xFD9
  1940                           status	equ	0xFD8
  1941                           
  1942 ;; *************** function _sleep_loop *****************
  1943 ;; Defined at:
  1944 ;;		line 390 in file "tasks.h"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;		None
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;  i               1    4[BANK1 ] unsigned char 
  1949 ;; Return value:  Size  Location     Type
  1950 ;;		None               void
  1951 ;; Registers used:
  1952 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1959 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1961 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1962 ;;Total ram usage:        1 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:    8
  1965 ;; This function calls:
  1966 ;;		_I2C_LCD_Clear
  1967 ;;		_I2C_LCD_Puts
  1968 ;;		_I2C_LCD_SetCursor
  1969 ;;		_LED
  1970 ;;		_OUT
  1971 ;;		_RTCC_from_RTCC
  1972 ;; This function is called by:
  1973 ;;		_main
  1974 ;; This function uses a non-reentrant model
  1975 ;;
  1976                           
  1977                           	psect	text1
  1978  011E1C                     __ptext1:
  1979                           	opt stack 0
  1980  011E1C                     _sleep_loop:
  1981                           	opt stack 22
  1982                           
  1983                           ;tasks.h: 391: static uint8_t prev_power_sw = 1;
  1984                           ;tasks.h: 392: if (PORTBbits.RB0 != prev_power_sw) {
  1985                           
  1986                           ;incstack = 0
  1987  011E1C  A081               	btfss	3969,0,c	;volatile
  1988  011E1E  D002               	goto	u9780
  1989  011E20  0E01               	movlw	1
  1990  011E22  D001               	goto	u9786
  1991  011E24                     u9780:
  1992  011E24  0E00               	movlw	0
  1993  011E26                     u9786:
  1994  011E26  0100               	movlb	0	; () banked
  1995  011E28  19FF               	xorwf	sleep_loop@prev_power_sw& (0+255),w,b
  1996  011E2A  B4D8               	btfsc	status,2,c
  1997  011E2C  D057               	goto	l9036
  1998                           
  1999                           ; BSR set to: 0
  2000                           ;tasks.h: 393: prev_power_sw = PORTBbits.RB0;
  2001  011E2E  0E00               	movlw	0
  2002  011E30  B081               	btfsc	3969,0,c	;volatile
  2003  011E32  0E01               	movlw	1
  2004  011E34  0100               	movlb	0	; () banked
  2005  011E36  6FFF               	movwf	sleep_loop@prev_power_sw& (0+255),b
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;tasks.h: 394: if (!PORTBbits.RB0) {
  2009  011E38  B081               	btfsc	3969,0,c	;volatile
  2010  011E3A  D039               	goto	l9026
  2011                           
  2012                           ; BSR set to: 0
  2013                           ;tasks.h: 395: sleep_flag = 1;
  2014  011E3C  0E01               	movlw	1
  2015  011E3E  6E3D               	movwf	_sleep_flag,c
  2016                           
  2017                           ; BSR set to: 0
  2018                           ;tasks.h: 396: INTCONbits.GIE = 0;
  2019  011E40  9EF2               	bcf	intcon,7,c	;volatile
  2020                           
  2021                           ;tasks.h: 397: for (uint8_t i = 0; i < 3; i++) {
  2022  011E42  0E00               	movlw	0
  2023  011E44  0101               	movlb	1	; () banked
  2024  011E46  6F04               	movwf	sleep_loop@i& (0+255),b
  2025  011E48                     l9004:
  2026                           
  2027                           ; BSR set to: 1
  2028  011E48  0E02               	movlw	2
  2029  011E4A  0101               	movlb	1	; () banked
  2030  011E4C  6504               	cpfsgt	sleep_loop@i& (0+255),b
  2031  011E4E  D001               	goto	l9008
  2032  011E50  D00F               	goto	l9016
  2033  011E52                     l9008:
  2034                           
  2035                           ; BSR set to: 1
  2036                           ;tasks.h: 398: OUT(i, 0);
  2037  011E52  0E00               	movlw	0
  2038  011E54  6E20               	movwf	OUT@value,c
  2039  011E56  0101               	movlb	1	; () banked
  2040  011E58  5104               	movf	sleep_loop@i& (0+255),w,b
  2041  011E5A  EC10  F096         	call	_OUT
  2042                           
  2043                           ;tasks.h: 399: LED(i, 0);
  2044  011E5E  0E00               	movlw	0
  2045  011E60  6E20               	movwf	LED@value,c
  2046  011E62  0101               	movlb	1	; () banked
  2047  011E64  5104               	movf	sleep_loop@i& (0+255),w,b
  2048  011E66  EC9B  F097         	call	_LED
  2049  011E6A  0101               	movlb	1	; () banked
  2050  011E6C  2B04               	incf	sleep_loop@i& (0+255),f,b
  2051  011E6E  D7EC               	goto	l9004
  2052  011E70                     l9016:
  2053                           
  2054                           ; BSR set to: 1
  2055                           ;tasks.h: 400: }
  2056                           ;tasks.h: 401: I2C_LCD_Clear();
  2057  011E70  EC66  F099         	call	_I2C_LCD_Clear	;wreg free
  2058                           
  2059                           ;tasks.h: 402: I2C_LCD_SetCursor(0, 0);
  2060  011E74  0E00               	movlw	0
  2061  011E76  0100               	movlb	0	; () banked
  2062  011E78  6FD8               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  2063  011E7A  0E00               	movlw	0
  2064  011E7C  EC78  F098         	call	_I2C_LCD_SetCursor
  2065                           
  2066                           ;tasks.h: 403: I2C_LCD_Puts("Charge Station 6");
  2067  011E80  0E67               	movlw	low STR_8
  2068  011E82  0100               	movlb	0	; () banked
  2069  011E84  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  2070  011E86  0EFF               	movlw	high STR_8
  2071  011E88  0100               	movlb	0	; () banked
  2072  011E8A  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  2073  011E8C  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  2074                           
  2075                           ;tasks.h: 404: I2C_LCD_SetCursor(0, 1);
  2076  011E90  0E01               	movlw	1
  2077  011E92  0100               	movlb	0	; () banked
  2078  011E94  6FD8               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  2079  011E96  0E00               	movlw	0
  2080  011E98  EC78  F098         	call	_I2C_LCD_SetCursor
  2081                           
  2082                           ;tasks.h: 405: I2C_LCD_Puts("SLEEPING");
  2083  011E9C  0EE4               	movlw	low STR_20
  2084  011E9E  0100               	movlb	0	; () banked
  2085  011EA0  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  2086  011EA2  0EFF               	movlw	high STR_20
  2087  011EA4  0100               	movlb	0	; () banked
  2088  011EA6  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  2089  011EA8  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  2090                           
  2091                           ;tasks.h: 406: } else {
  2092  011EAC  D017               	goto	l9036
  2093  011EAE                     l9026:
  2094                           
  2095                           ;tasks.h: 407: sleep_flag = 0;
  2096  011EAE  0E00               	movlw	0
  2097  011EB0  6E3D               	movwf	_sleep_flag,c
  2098                           
  2099                           ;tasks.h: 408: RTCC_from_RTCC(&caltime_now, &epoch_now);
  2100  011EB2  0EF0               	movlw	low _caltime_now
  2101  011EB4  0101               	movlb	1	; () banked
  2102  011EB6  6F00               	movwf	RTCC_from_RTCC@ct& (0+255),b
  2103  011EB8  0E01               	movlw	high _caltime_now
  2104  011EBA  0101               	movlb	1	; () banked
  2105  011EBC  6F01               	movwf	(RTCC_from_RTCC@ct+1)& (0+255),b
  2106  011EBE  0ECA               	movlw	low _epoch_now
  2107  011EC0  0101               	movlb	1	; () banked
  2108  011EC2  6F02               	movwf	RTCC_from_RTCC@ep& (0+255),b
  2109  011EC4  0E00               	movlw	high _epoch_now
  2110  011EC6  0101               	movlb	1	; () banked
  2111  011EC8  6F03               	movwf	(RTCC_from_RTCC@ep+1)& (0+255),b
  2112  011ECA  EC29  F099         	call	_RTCC_from_RTCC	;wreg free
  2113                           
  2114                           ;tasks.h: 409: print_content = TIME;
  2115  011ECE  0E01               	movlw	1
  2116  011ED0  0100               	movlb	0	; () banked
  2117  011ED2  6FB7               	movwf	_print_content& (0+255),b
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;tasks.h: 410: time_change_flag = 1;
  2121  011ED4  0E01               	movlw	1
  2122  011ED6  0100               	movlb	0	; () banked
  2123  011ED8  6FB8               	movwf	_time_change_flag& (0+255),b
  2124                           
  2125                           ; BSR set to: 0
  2126                           ;tasks.h: 411: INTCONbits.GIE = 1;
  2127  011EDA  8EF2               	bsf	intcon,7,c	;volatile
  2128  011EDC                     l9036:
  2129                           
  2130                           ;tasks.h: 412: }
  2131                           ;tasks.h: 413: }
  2132                           ;tasks.h: 414: if (sleep_flag) {
  2133  011EDC  503D               	movf	_sleep_flag,w,c
  2134  011EDE  B4D8               	btfsc	status,2,c
  2135  011EE0  0012               	return	
  2136  011EE2  0003               	sleep		;# 
  2137                           
  2138                           ;tasks.h: 416: __nop();
  2139  011EE4  F000               	nop	
  2140  011EE6  0012               	return	
  2141  011EE8                     __end_of_sleep_loop:
  2142                           	opt stack 0
  2143                           tblptru	equ	0xFF8
  2144                           tblptrh	equ	0xFF7
  2145                           tblptrl	equ	0xFF6
  2146                           tablat	equ	0xFF5
  2147                           prodh	equ	0xFF4
  2148                           prodl	equ	0xFF3
  2149                           intcon	equ	0xFF2
  2150                           postinc0	equ	0xFEE
  2151                           wreg	equ	0xFE8
  2152                           postdec1	equ	0xFE5
  2153                           fsr1l	equ	0xFE1
  2154                           indf2	equ	0xFDF
  2155                           postinc2	equ	0xFDE
  2156                           postdec2	equ	0xFDD
  2157                           fsr2h	equ	0xFDA
  2158                           fsr2l	equ	0xFD9
  2159                           status	equ	0xFD8
  2160                           
  2161 ;; *************** function _normal_mode_loop *****************
  2162 ;; Defined at:
  2163 ;;		line 347 in file "tasks.h"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;		None
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;		None
  2168 ;; Return value:  Size  Location     Type
  2169 ;;		None               void
  2170 ;; Registers used:
  2171 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2181 ;;Total ram usage:        0 bytes
  2182 ;; Hardware stack levels used:    1
  2183 ;; Hardware stack levels required when called:   10
  2184 ;; This function calls:
  2185 ;;		_Auto_cut
  2186 ;;		_RTCC_adjust_time_button
  2187 ;;		_ctmu_loop
  2188 ;;		_display_LCD
  2189 ;;		_port_loop
  2190 ;; This function is called by:
  2191 ;;		_main
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           	psect	text2
  2196  011EE8                     __ptext2:
  2197                           	opt stack 0
  2198  011EE8                     _normal_mode_loop:
  2199                           	opt stack 20
  2200                           
  2201                           ;tasks.h: 348: if (!edit_flag.flags) {
  2202                           
  2203                           ;incstack = 0
  2204  011EE8  0100               	movlb	0	; () banked
  2205  011EEA  51B5               	movf	_edit_flag& (0+255),w,b
  2206  011EEC  A4D8               	btfss	status,2,c
  2207  011EEE  D021               	goto	l8968
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;tasks.h: 349: port_loop();
  2211  011EF0  ECE7  F083         	call	_port_loop	;wreg free
  2212                           
  2213                           ;tasks.h: 350: if (ctm.flag.press) {
  2214  011EF4  0100               	movlb	0	; () banked
  2215  011EF6  A1C8               	btfss	(_ctm+2)& (0+255),0,b
  2216  011EF8  D01C               	goto	l8968
  2217                           
  2218                           ; BSR set to: 0
  2219                           ;tasks.h: 351: ctm.flag.press = 0;
  2220  011EFA  0100               	movlb	0	; () banked
  2221  011EFC  91C8               	bcf	(_ctm+2)& (0+255),0,b
  2222                           
  2223                           ;tasks.h: 352: switch (print_content) {
  2224  011EFE  D00A               	goto	l8966
  2225  011F00                     l8954:
  2226                           
  2227                           ; BSR set to: 0
  2228                           ;tasks.h: 354: print_content = INTEGRATING;
  2229  011F00  0E03               	movlw	3
  2230  011F02  D003               	goto	L3
  2231  011F04                     l8956:
  2232                           
  2233                           ; BSR set to: 0
  2234                           ;tasks.h: 357: print_content = CHARGE_TIME;
  2235  011F04  0E04               	movlw	4
  2236  011F06  D001               	goto	L3
  2237  011F08                     l8958:
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;tasks.h: 360: print_content = TIME;
  2241  011F08  0E01               	movlw	1
  2242  011F0A                     L3:
  2243  011F0A  0100               	movlb	0	; () banked
  2244  011F0C  6FB7               	movwf	_print_content& (0+255),b
  2245                           
  2246                           ;tasks.h: 364: break;
  2247  011F0E  D011               	goto	l8968
  2248  011F10                     l8962:
  2249                           
  2250                           ; BSR set to: 0
  2251                           ;tasks.h: 366: print_content = CURRENT;
  2252  011F10  0E02               	movlw	2
  2253  011F12  D7FB               	goto	L3
  2254  011F14                     l8966:
  2255                           
  2256                           ; BSR set to: 0
  2257  011F14  0100               	movlb	0	; () banked
  2258  011F16  51B7               	movf	_print_content& (0+255),w,b
  2259                           
  2260                           ; Switch size 1, requested type "space"
  2261                           ; Number of cases is 4, Range of values is 1 to 4
  2262                           ; switch strategies available:
  2263                           ; Name         Instructions Cycles
  2264                           ; simple_byte           13     7 (average)
  2265                           ;	Chosen strategy is simple_byte
  2266  011F18  0A01               	xorlw	1	; case 1
  2267  011F1A  B4D8               	btfsc	status,2,c
  2268  011F1C  D7F9               	goto	l8962
  2269  011F1E  0A03               	xorlw	3	; case 2
  2270  011F20  B4D8               	btfsc	status,2,c
  2271  011F22  D7EE               	goto	l8954
  2272  011F24  0A01               	xorlw	1	; case 3
  2273  011F26  B4D8               	btfsc	status,2,c
  2274  011F28  D7ED               	goto	l8956
  2275  011F2A  0A07               	xorlw	7	; case 4
  2276  011F2C  B4D8               	btfsc	status,2,c
  2277  011F2E  D7EC               	goto	l8958
  2278  011F30  D7EF               	goto	l8962
  2279  011F32                     l8968:
  2280                           
  2281                           ; BSR set to: 0
  2282                           ;tasks.h: 369: }
  2283                           ;tasks.h: 370: }
  2284                           ;tasks.h: 371: if (cut_time_flag) {
  2285  011F32  0100               	movlb	0	; () banked
  2286  011F34  51B3               	movf	_cut_time_flag& (0+255),w,b
  2287  011F36  B4D8               	btfsc	status,2,c
  2288  011F38  D005               	goto	l8974
  2289                           
  2290                           ; BSR set to: 0
  2291                           ;tasks.h: 372: cut_time_flag = 0;
  2292  011F3A  0E00               	movlw	0
  2293  011F3C  0100               	movlb	0	; () banked
  2294  011F3E  6FB3               	movwf	_cut_time_flag& (0+255),b
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;tasks.h: 373: Auto_cut();
  2298  011F40  EC66  F08C         	call	_Auto_cut	;wreg free
  2299  011F44                     l8974:
  2300                           
  2301                           ;tasks.h: 374: }
  2302                           ;tasks.h: 375: if (time_change_flag) {
  2303  011F44  0100               	movlb	0	; () banked
  2304  011F46  51B8               	movf	_time_change_flag& (0+255),w,b
  2305  011F48  B4D8               	btfsc	status,2,c
  2306  011F4A  D006               	goto	l8978
  2307                           
  2308                           ; BSR set to: 0
  2309                           ;tasks.h: 376: time_change_flag = 0;
  2310  011F4C  0E00               	movlw	0
  2311  011F4E  0100               	movlb	0	; () banked
  2312  011F50  6FB8               	movwf	_time_change_flag& (0+255),b
  2313                           
  2314                           ;tasks.h: 377: display_flag = 1;
  2315  011F52  0E01               	movlw	1
  2316  011F54  0100               	movlb	0	; () banked
  2317  011F56  6FB4               	movwf	_display_flag& (0+255),b
  2318  011F58                     l8978:
  2319                           
  2320                           ; BSR set to: 0
  2321                           ;tasks.h: 378: }
  2322                           ;tasks.h: 379: if (print_content == TIME)RTCC_adjust_time_button(&ctm, &ct0, &ct1);
  2323  011F58  0100               	movlb	0	; () banked
  2324  011F5A  05B7               	decf	_print_content& (0+255),w,b
  2325  011F5C  A4D8               	btfss	status,2,c
  2326  011F5E  D014               	goto	l8982
  2327                           
  2328                           ; BSR set to: 0
  2329  011F60  0EC6               	movlw	low _ctm
  2330  011F62  0101               	movlb	1	; () banked
  2331  011F64  6F18               	movwf	RTCC_adjust_time_button@mode& (0+255),b
  2332  011F66  0E00               	movlw	high _ctm
  2333  011F68  0101               	movlb	1	; () banked
  2334  011F6A  6F19               	movwf	(RTCC_adjust_time_button@mode+1)& (0+255),b
  2335  011F6C  0EBA               	movlw	low _ct0
  2336  011F6E  0101               	movlb	1	; () banked
  2337  011F70  6F1A               	movwf	RTCC_adjust_time_button@cnt_inc& (0+255),b
  2338  011F72  0E00               	movlw	high _ct0
  2339  011F74  0101               	movlb	1	; () banked
  2340  011F76  6F1B               	movwf	(RTCC_adjust_time_button@cnt_inc+1)& (0+255),b
  2341  011F78  0EBE               	movlw	low _ct1
  2342  011F7A  0101               	movlb	1	; () banked
  2343  011F7C  6F1C               	movwf	RTCC_adjust_time_button@cnt_dec& (0+255),b
  2344  011F7E  0E00               	movlw	high _ct1
  2345  011F80  0101               	movlb	1	; () banked
  2346  011F82  6F1D               	movwf	(RTCC_adjust_time_button@cnt_dec+1)& (0+255),b
  2347  011F84  EC53  F08B         	call	_RTCC_adjust_time_button	;wreg free
  2348  011F88                     l8982:
  2349                           
  2350                           ;tasks.h: 380: if (display_flag) {
  2351  011F88  0100               	movlb	0	; () banked
  2352  011F8A  51B4               	movf	_display_flag& (0+255),w,b
  2353  011F8C  B4D8               	btfsc	status,2,c
  2354  011F8E  D005               	goto	l8988
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;tasks.h: 381: display_flag = 0;
  2358  011F90  0E00               	movlw	0
  2359  011F92  0100               	movlb	0	; () banked
  2360  011F94  6FB4               	movwf	_display_flag& (0+255),b
  2361                           
  2362                           ; BSR set to: 0
  2363                           ;tasks.h: 382: display_LCD();
  2364  011F96  EC00  F080         	call	_display_LCD	;wreg free
  2365  011F9A                     l8988:
  2366                           
  2367                           ;tasks.h: 383: }
  2368                           ;tasks.h: 384: if (ctmu_flag) {
  2369  011F9A  0100               	movlb	0	; () banked
  2370  011F9C  51B2               	movf	_ctmu_flag& (0+255),w,b
  2371  011F9E  B4D8               	btfsc	status,2,c
  2372  011FA0  0012               	return	
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;tasks.h: 385: ctmu_flag = 0;
  2376  011FA2  0E00               	movlw	0
  2377  011FA4  0100               	movlb	0	; () banked
  2378  011FA6  6FB2               	movwf	_ctmu_flag& (0+255),b
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;tasks.h: 386: ctmu_loop();
  2382  011FA8  ECE5  F08B         	call	_ctmu_loop	;wreg free
  2383  011FAC  0012               	return	
  2384  011FAE                     __end_of_normal_mode_loop:
  2385                           	opt stack 0
  2386                           tblptru	equ	0xFF8
  2387                           tblptrh	equ	0xFF7
  2388                           tblptrl	equ	0xFF6
  2389                           tablat	equ	0xFF5
  2390                           prodh	equ	0xFF4
  2391                           prodl	equ	0xFF3
  2392                           intcon	equ	0xFF2
  2393                           postinc0	equ	0xFEE
  2394                           wreg	equ	0xFE8
  2395                           postdec1	equ	0xFE5
  2396                           fsr1l	equ	0xFE1
  2397                           indf2	equ	0xFDF
  2398                           postinc2	equ	0xFDE
  2399                           postdec2	equ	0xFDD
  2400                           fsr2h	equ	0xFDA
  2401                           fsr2l	equ	0xFD9
  2402                           status	equ	0xFD8
  2403                           
  2404 ;; *************** function _port_loop *****************
  2405 ;; Defined at:
  2406 ;;		line 286 in file "tasks.h"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;		None
  2409 ;; Auto vars:     Size  Location     Type
  2410 ;;  i               1    4[BANK0 ] unsigned char 
  2411 ;; Return value:  Size  Location     Type
  2412 ;;		None               void
  2413 ;; Registers used:
  2414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2415 ;; Tracked objects:
  2416 ;;		On entry : 0/0
  2417 ;;		On exit  : 0/0
  2418 ;;		Unchanged: 0/0
  2419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2423 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2424 ;;Total ram usage:        1 bytes
  2425 ;; Hardware stack levels used:    1
  2426 ;; Hardware stack levels required when called:    5
  2427 ;; This function calls:
  2428 ;;		_LED
  2429 ;;		_OUT
  2430 ;;		_delay_set
  2431 ;;		_sw_flag_clear
  2432 ;;		_sw_flag_read
  2433 ;; This function is called by:
  2434 ;;		_normal_mode_loop
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437                           
  2438                           	psect	text3
  2439  0107CE                     __ptext3:
  2440                           	opt stack 0
  2441  0107CE                     _port_loop:
  2442                           	opt stack 24
  2443                           
  2444                           ;tasks.h: 287: uint8_t i;
  2445                           ;tasks.h: 288: for (i = 0; i < 3; i++) {
  2446                           
  2447                           ;incstack = 0
  2448  0107CE  0E00               	movlw	0
  2449  0107D0  0100               	movlb	0	; () banked
  2450  0107D2  6FD7               	movwf	port_loop@i& (0+255),b
  2451  0107D4                     l8820:
  2452                           
  2453                           ; BSR set to: 0
  2454  0107D4  0E02               	movlw	2
  2455  0107D6  0100               	movlb	0	; () banked
  2456  0107D8  65D7               	cpfsgt	port_loop@i& (0+255),b
  2457  0107DA  D001               	goto	l8824
  2458  0107DC  D141               	goto	l8898
  2459  0107DE                     l8824:
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;tasks.h: 289: if (sw_flag_read(i, 0x0100)) {
  2463  0107DE  0E01               	movlw	1
  2464  0107E0  0100               	movlb	0	; () banked
  2465  0107E2  6FD4               	movwf	(sw_flag_read@bit_and+1)& (0+255),b
  2466  0107E4  0E00               	movlw	0
  2467  0107E6  6FD3               	movwf	sw_flag_read@bit_and& (0+255),b
  2468  0107E8  0100               	movlb	0	; () banked
  2469  0107EA  51D7               	movf	port_loop@i& (0+255),w,b
  2470  0107EC  EC1B  F095         	call	_sw_flag_read
  2471  0107F0  0100               	movlb	0	; () banked
  2472  0107F2  51D3               	movf	?_sw_flag_read& (0+255),w,b
  2473  0107F4  0100               	movlb	0	; () banked
  2474  0107F6  11D4               	iorwf	(?_sw_flag_read+1)& (0+255),w,b
  2475  0107F8  B4D8               	btfsc	status,2,c
  2476  0107FA  D02D               	goto	l8840
  2477                           
  2478                           ; BSR set to: 0
  2479                           ;tasks.h: 290: OUT(i, 1);
  2480  0107FC  0E01               	movlw	1
  2481  0107FE  6E20               	movwf	OUT@value,c
  2482  010800  0100               	movlb	0	; () banked
  2483  010802  51D7               	movf	port_loop@i& (0+255),w,b
  2484  010804  EC10  F096         	call	_OUT
  2485                           
  2486                           ;tasks.h: 291: LED(i, 1);
  2487  010808  0E01               	movlw	1
  2488  01080A  6E20               	movwf	LED@value,c
  2489  01080C  0100               	movlb	0	; () banked
  2490  01080E  51D7               	movf	port_loop@i& (0+255),w,b
  2491  010810  EC9B  F097         	call	_LED
  2492                           
  2493                           ;tasks.h: 292: cut_cnt[i] = 0;
  2494  010814  0100               	movlb	0	; () banked
  2495  010816  51D7               	movf	port_loop@i& (0+255),w,b
  2496  010818  0D02               	mullw	2
  2497  01081A  0E6F               	movlw	low _cut_cnt
  2498  01081C  24F3               	addwf	prodl,w,c
  2499  01081E  6ED9               	movwf	fsr2l,c
  2500  010820  0E00               	movlw	high _cut_cnt
  2501  010822  20F4               	addwfc	prodh,w,c
  2502  010824  6EDA               	movwf	fsr2h,c
  2503  010826  0E00               	movlw	0
  2504  010828  6EDE               	movwf	postinc2,c
  2505  01082A  0E00               	movlw	0
  2506  01082C  6EDD               	movwf	postdec2,c
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;tasks.h: 293: print_port = i;
  2510  01082E  C0D7  F03B         	movff	port_loop@i,_print_port
  2511                           
  2512                           ;tasks.h: 294: if (print_content == AUTO_STOP || print_content == ALWAYS_ON || print_con
      +                          tent == RESETED)print_content = CURRENT;
  2513  010832  0E08               	movlw	8
  2514  010834  0100               	movlb	0	; () banked
  2515  010836  19B7               	xorwf	_print_content& (0+255),w,b
  2516  010838  B4D8               	btfsc	status,2,c
  2517  01083A  D00A               	goto	l8838
  2518                           
  2519                           ; BSR set to: 0
  2520  01083C  0E07               	movlw	7
  2521  01083E  0100               	movlb	0	; () banked
  2522  010840  19B7               	xorwf	_print_content& (0+255),w,b
  2523  010842  B4D8               	btfsc	status,2,c
  2524  010844  D005               	goto	l8838
  2525                           
  2526                           ; BSR set to: 0
  2527  010846  0E06               	movlw	6
  2528  010848  0100               	movlb	0	; () banked
  2529  01084A  19B7               	xorwf	_print_content& (0+255),w,b
  2530  01084C  A4D8               	btfss	status,2,c
  2531  01084E  D003               	goto	l8840
  2532  010850                     l8838:
  2533                           
  2534                           ; BSR set to: 0
  2535  010850  0E02               	movlw	2
  2536  010852  0100               	movlb	0	; () banked
  2537  010854  6FB7               	movwf	_print_content& (0+255),b
  2538  010856                     l8840:
  2539                           
  2540                           ; BSR set to: 0
  2541                           ;tasks.h: 295: }
  2542                           ;tasks.h: 296: if (sw_flag_read(i, 0x0400)) {
  2543  010856  0E04               	movlw	4
  2544  010858  0100               	movlb	0	; () banked
  2545  01085A  6FD4               	movwf	(sw_flag_read@bit_and+1)& (0+255),b
  2546  01085C  0E00               	movlw	0
  2547  01085E  6FD3               	movwf	sw_flag_read@bit_and& (0+255),b
  2548  010860  0100               	movlb	0	; () banked
  2549  010862  51D7               	movf	port_loop@i& (0+255),w,b
  2550  010864  EC1B  F095         	call	_sw_flag_read
  2551  010868  0100               	movlb	0	; () banked
  2552  01086A  51D3               	movf	?_sw_flag_read& (0+255),w,b
  2553  01086C  0100               	movlb	0	; () banked
  2554  01086E  11D4               	iorwf	(?_sw_flag_read+1)& (0+255),w,b
  2555  010870  B4D8               	btfsc	status,2,c
  2556  010872  D00C               	goto	l8846
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;tasks.h: 297: sw_flag_clear(i, 0x0000);
  2560  010874  0E00               	movlw	0
  2561  010876  0100               	movlb	0	; () banked
  2562  010878  6FD4               	movwf	(sw_flag_clear@bit_and+1)& (0+255),b
  2563  01087A  0E00               	movlw	0
  2564  01087C  6FD3               	movwf	sw_flag_clear@bit_and& (0+255),b
  2565  01087E  0100               	movlb	0	; () banked
  2566  010880  51D7               	movf	port_loop@i& (0+255),w,b
  2567  010882  ECBB  F096         	call	_sw_flag_clear
  2568                           
  2569                           ;tasks.h: 298: print_content = RESET;
  2570  010886  0E05               	movlw	5
  2571  010888  0100               	movlb	0	; () banked
  2572  01088A  6FB7               	movwf	_print_content& (0+255),b
  2573  01088C                     l8846:
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;tasks.h: 299: }
  2577                           ;tasks.h: 300: if (sw_flag_read(i, 0x0004)) {
  2578  01088C  0E00               	movlw	0
  2579  01088E  0100               	movlb	0	; () banked
  2580  010890  6FD4               	movwf	(sw_flag_read@bit_and+1)& (0+255),b
  2581  010892  0E04               	movlw	4
  2582  010894  6FD3               	movwf	sw_flag_read@bit_and& (0+255),b
  2583  010896  0100               	movlb	0	; () banked
  2584  010898  51D7               	movf	port_loop@i& (0+255),w,b
  2585  01089A  EC1B  F095         	call	_sw_flag_read
  2586  01089E  0100               	movlb	0	; () banked
  2587  0108A0  51D3               	movf	?_sw_flag_read& (0+255),w,b
  2588  0108A2  0100               	movlb	0	; () banked
  2589  0108A4  11D4               	iorwf	(?_sw_flag_read+1)& (0+255),w,b
  2590  0108A6  B4D8               	btfsc	status,2,c
  2591  0108A8  D040               	goto	l8860
  2592                           
  2593                           ; BSR set to: 0
  2594                           ;tasks.h: 301: sw_flag_clear(i, 0x0000);
  2595  0108AA  0E00               	movlw	0
  2596  0108AC  0100               	movlb	0	; () banked
  2597  0108AE  6FD4               	movwf	(sw_flag_clear@bit_and+1)& (0+255),b
  2598  0108B0  0E00               	movlw	0
  2599  0108B2  6FD3               	movwf	sw_flag_clear@bit_and& (0+255),b
  2600  0108B4  0100               	movlb	0	; () banked
  2601  0108B6  51D7               	movf	port_loop@i& (0+255),w,b
  2602  0108B8  ECBB  F096         	call	_sw_flag_clear
  2603                           
  2604                           ;tasks.h: 302: print_content = RESETED;
  2605  0108BC  0E06               	movlw	6
  2606  0108BE  0100               	movlb	0	; () banked
  2607  0108C0  6FB7               	movwf	_print_content& (0+255),b
  2608                           
  2609                           ; BSR set to: 0
  2610                           ;tasks.h: 303: S[i] = 0;
  2611  0108C2  0100               	movlb	0	; () banked
  2612  0108C4  51D7               	movf	port_loop@i& (0+255),w,b
  2613  0108C6  0D04               	mullw	4
  2614  0108C8  0EC9               	movlw	low _S
  2615  0108CA  24F3               	addwf	prodl,w,c
  2616  0108CC  6ED9               	movwf	fsr2l,c
  2617  0108CE  0E01               	movlw	high _S
  2618  0108D0  20F4               	addwfc	prodh,w,c
  2619  0108D2  6EDA               	movwf	fsr2h,c
  2620  0108D4  6ADE               	clrf	postinc2,c
  2621  0108D6  6ADE               	clrf	postinc2,c
  2622  0108D8  6ADE               	clrf	postinc2,c
  2623  0108DA  6ADD               	clrf	postdec2,c
  2624                           
  2625                           ; BSR set to: 0
  2626                           ;tasks.h: 304: s[i] = 0;
  2627  0108DC  0100               	movlb	0	; () banked
  2628  0108DE  51D7               	movf	port_loop@i& (0+255),w,b
  2629  0108E0  0D04               	mullw	4
  2630  0108E2  0EC8               	movlw	low _s
  2631  0108E4  24F3               	addwf	prodl,w,c
  2632  0108E6  6ED9               	movwf	fsr2l,c
  2633  0108E8  0E02               	movlw	high _s
  2634  0108EA  20F4               	addwfc	prodh,w,c
  2635  0108EC  6EDA               	movwf	fsr2h,c
  2636  0108EE  6ADE               	clrf	postinc2,c
  2637  0108F0  6ADE               	clrf	postinc2,c
  2638  0108F2  6ADE               	clrf	postinc2,c
  2639  0108F4  6ADD               	clrf	postdec2,c
  2640                           
  2641                           ; BSR set to: 0
  2642                           ;tasks.h: 305: charge_time[i] = 0;
  2643  0108F6  0100               	movlb	0	; () banked
  2644  0108F8  51D7               	movf	port_loop@i& (0+255),w,b
  2645  0108FA  0D04               	mullw	4
  2646  0108FC  0ED5               	movlw	low _charge_time
  2647  0108FE  24F3               	addwf	prodl,w,c
  2648  010900  6ED9               	movwf	fsr2l,c
  2649  010902  0E01               	movlw	high _charge_time
  2650  010904  20F4               	addwfc	prodh,w,c
  2651  010906  6EDA               	movwf	fsr2h,c
  2652  010908  6ADE               	clrf	postinc2,c
  2653  01090A  6ADE               	clrf	postinc2,c
  2654  01090C  6ADE               	clrf	postinc2,c
  2655  01090E  6ADD               	clrf	postdec2,c
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;tasks.h: 306: delay_set(&delay_display, 64);
  2659  010910  0ECE               	movlw	low _delay_display
  2660  010912  0100               	movlb	0	; () banked
  2661  010914  6FD3               	movwf	delay_set@d& (0+255),b
  2662  010916  0E00               	movlw	high _delay_display
  2663  010918  0100               	movlb	0	; () banked
  2664  01091A  6FD4               	movwf	(delay_set@d+1)& (0+255),b
  2665  01091C  0E00               	movlw	0
  2666  01091E  0100               	movlb	0	; () banked
  2667  010920  6FD6               	movwf	(delay_set@value+1)& (0+255),b
  2668  010922  0E40               	movlw	64
  2669  010924  6FD5               	movwf	delay_set@value& (0+255),b
  2670  010926  ECF4  F098         	call	_delay_set	;wreg free
  2671  01092A                     l8860:
  2672                           
  2673                           ;tasks.h: 307: }
  2674                           ;tasks.h: 308: if (sw_flag_read(i, 0x0800)) {
  2675  01092A  0E08               	movlw	8
  2676  01092C  0100               	movlb	0	; () banked
  2677  01092E  6FD4               	movwf	(sw_flag_read@bit_and+1)& (0+255),b
  2678  010930  0E00               	movlw	0
  2679  010932  6FD3               	movwf	sw_flag_read@bit_and& (0+255),b
  2680  010934  0100               	movlb	0	; () banked
  2681  010936  51D7               	movf	port_loop@i& (0+255),w,b
  2682  010938  EC1B  F095         	call	_sw_flag_read
  2683  01093C  0100               	movlb	0	; () banked
  2684  01093E  51D3               	movf	?_sw_flag_read& (0+255),w,b
  2685  010940  0100               	movlb	0	; () banked
  2686  010942  11D4               	iorwf	(?_sw_flag_read+1)& (0+255),w,b
  2687  010944  B4D8               	btfsc	status,2,c
  2688  010946  D01A               	goto	l8870
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;tasks.h: 309: sw_flag_clear(i, 0x0000);
  2692  010948  0E00               	movlw	0
  2693  01094A  0100               	movlb	0	; () banked
  2694  01094C  6FD4               	movwf	(sw_flag_clear@bit_and+1)& (0+255),b
  2695  01094E  0E00               	movlw	0
  2696  010950  6FD3               	movwf	sw_flag_clear@bit_and& (0+255),b
  2697  010952  0100               	movlb	0	; () banked
  2698  010954  51D7               	movf	port_loop@i& (0+255),w,b
  2699  010956  ECBB  F096         	call	_sw_flag_clear
  2700                           
  2701                           ;tasks.h: 310: if (auto_cut_ON[i]) {
  2702  01095A  0100               	movlb	0	; () banked
  2703  01095C  51D7               	movf	port_loop@i& (0+255),w,b
  2704  01095E  0D01               	mullw	1
  2705  010960  0E7B               	movlw	low _auto_cut_ON
  2706  010962  24F3               	addwf	prodl,w,c
  2707  010964  6ED9               	movwf	fsr2l,c
  2708  010966  0E00               	movlw	high _auto_cut_ON
  2709  010968  20F4               	addwfc	prodh,w,c
  2710  01096A  6EDA               	movwf	fsr2h,c
  2711  01096C  50DF               	movf	indf2,w,c
  2712  01096E  B4D8               	btfsc	status,2,c
  2713  010970  D002               	goto	l8868
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;tasks.h: 311: print_content = AUTO_STOP;
  2717  010972  0E08               	movlw	8
  2718  010974  D001               	goto	L4
  2719  010976                     l8868:
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;tasks.h: 313: print_content = ALWAYS_ON;
  2723  010976  0E07               	movlw	7
  2724  010978                     L4:
  2725  010978  0100               	movlb	0	; () banked
  2726  01097A  6FB7               	movwf	_print_content& (0+255),b
  2727  01097C                     l8870:
  2728                           
  2729                           ; BSR set to: 0
  2730                           ;tasks.h: 314: }
  2731                           ;tasks.h: 315: }
  2732                           ;tasks.h: 316: if (sw_flag_read(i, 0x0008)) {
  2733  01097C  0E00               	movlw	0
  2734  01097E  0100               	movlb	0	; () banked
  2735  010980  6FD4               	movwf	(sw_flag_read@bit_and+1)& (0+255),b
  2736  010982  0E08               	movlw	8
  2737  010984  6FD3               	movwf	sw_flag_read@bit_and& (0+255),b
  2738  010986  0100               	movlb	0	; () banked
  2739  010988  51D7               	movf	port_loop@i& (0+255),w,b
  2740  01098A  EC1B  F095         	call	_sw_flag_read
  2741  01098E  0100               	movlb	0	; () banked
  2742  010990  51D3               	movf	?_sw_flag_read& (0+255),w,b
  2743  010992  0100               	movlb	0	; () banked
  2744  010994  11D4               	iorwf	(?_sw_flag_read+1)& (0+255),w,b
  2745  010996  B4D8               	btfsc	status,2,c
  2746  010998  D045               	goto	l8888
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;tasks.h: 317: sw_flag_clear(i, 0x0000);
  2750  01099A  0E00               	movlw	0
  2751  01099C  0100               	movlb	0	; () banked
  2752  01099E  6FD4               	movwf	(sw_flag_clear@bit_and+1)& (0+255),b
  2753  0109A0  0E00               	movlw	0
  2754  0109A2  6FD3               	movwf	sw_flag_clear@bit_and& (0+255),b
  2755  0109A4  0100               	movlb	0	; () banked
  2756  0109A6  51D7               	movf	port_loop@i& (0+255),w,b
  2757  0109A8  ECBB  F096         	call	_sw_flag_clear
  2758                           
  2759                           ;tasks.h: 318: if (auto_cut_ON[i]) {
  2760  0109AC  0100               	movlb	0	; () banked
  2761  0109AE  51D7               	movf	port_loop@i& (0+255),w,b
  2762  0109B0  0D01               	mullw	1
  2763  0109B2  0E7B               	movlw	low _auto_cut_ON
  2764  0109B4  24F3               	addwf	prodl,w,c
  2765  0109B6  6ED9               	movwf	fsr2l,c
  2766  0109B8  0E00               	movlw	high _auto_cut_ON
  2767  0109BA  20F4               	addwfc	prodh,w,c
  2768  0109BC  6EDA               	movwf	fsr2h,c
  2769  0109BE  50DF               	movf	indf2,w,c
  2770  0109C0  B4D8               	btfsc	status,2,c
  2771  0109C2  D015               	goto	l8882
  2772                           
  2773                           ; BSR set to: 0
  2774                           ;tasks.h: 319: auto_cut_ON[i] = 0;
  2775  0109C4  0100               	movlb	0	; () banked
  2776  0109C6  51D7               	movf	port_loop@i& (0+255),w,b
  2777  0109C8  0D01               	mullw	1
  2778  0109CA  0E7B               	movlw	low _auto_cut_ON
  2779  0109CC  24F3               	addwf	prodl,w,c
  2780  0109CE  6ED9               	movwf	fsr2l,c
  2781  0109D0  0E00               	movlw	high _auto_cut_ON
  2782  0109D2  20F4               	addwfc	prodh,w,c
  2783  0109D4  6EDA               	movwf	fsr2h,c
  2784  0109D6  0E00               	movlw	0
  2785  0109D8  6EDF               	movwf	indf2,c
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;tasks.h: 320: print_content = ALWAYS_ON;
  2789  0109DA  0E07               	movlw	7
  2790  0109DC  0100               	movlb	0	; () banked
  2791  0109DE  6FB7               	movwf	_print_content& (0+255),b
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;tasks.h: 321: OUT(i, 1);
  2795  0109E0  0E01               	movlw	1
  2796  0109E2  6E20               	movwf	OUT@value,c
  2797  0109E4  0100               	movlb	0	; () banked
  2798  0109E6  51D7               	movf	port_loop@i& (0+255),w,b
  2799  0109E8  EC10  F096         	call	_OUT
  2800                           
  2801                           ;tasks.h: 322: } else {
  2802  0109EC  D00E               	goto	l8886
  2803  0109EE                     l8882:
  2804                           
  2805                           ;tasks.h: 323: auto_cut_ON[i] = 1;
  2806  0109EE  0100               	movlb	0	; () banked
  2807  0109F0  51D7               	movf	port_loop@i& (0+255),w,b
  2808  0109F2  0D01               	mullw	1
  2809  0109F4  0E7B               	movlw	low _auto_cut_ON
  2810  0109F6  24F3               	addwf	prodl,w,c
  2811  0109F8  6ED9               	movwf	fsr2l,c
  2812  0109FA  0E00               	movlw	high _auto_cut_ON
  2813  0109FC  20F4               	addwfc	prodh,w,c
  2814  0109FE  6EDA               	movwf	fsr2h,c
  2815  010A00  0E01               	movlw	1
  2816  010A02  6EDF               	movwf	indf2,c
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;tasks.h: 324: print_content = AUTO_STOP;
  2820  010A04  0E08               	movlw	8
  2821  010A06  0100               	movlb	0	; () banked
  2822  010A08  6FB7               	movwf	_print_content& (0+255),b
  2823  010A0A                     l8886:
  2824                           
  2825                           ;tasks.h: 325: }
  2826                           ;tasks.h: 326: delay_set(&delay_display, 64);
  2827  010A0A  0ECE               	movlw	low _delay_display
  2828  010A0C  0100               	movlb	0	; () banked
  2829  010A0E  6FD3               	movwf	delay_set@d& (0+255),b
  2830  010A10  0E00               	movlw	high _delay_display
  2831  010A12  0100               	movlb	0	; () banked
  2832  010A14  6FD4               	movwf	(delay_set@d+1)& (0+255),b
  2833  010A16  0E00               	movlw	0
  2834  010A18  0100               	movlb	0	; () banked
  2835  010A1A  6FD6               	movwf	(delay_set@value+1)& (0+255),b
  2836  010A1C  0E40               	movlw	64
  2837  010A1E  6FD5               	movwf	delay_set@value& (0+255),b
  2838  010A20  ECF4  F098         	call	_delay_set	;wreg free
  2839  010A24                     l8888:
  2840                           
  2841                           ;tasks.h: 327: }
  2842                           ;tasks.h: 328: if (sw_flag_read(i, 0x1000)) {
  2843  010A24  0E10               	movlw	16
  2844  010A26  0100               	movlb	0	; () banked
  2845  010A28  6FD4               	movwf	(sw_flag_read@bit_and+1)& (0+255),b
  2846  010A2A  0E00               	movlw	0
  2847  010A2C  6FD3               	movwf	sw_flag_read@bit_and& (0+255),b
  2848  010A2E  0100               	movlb	0	; () banked
  2849  010A30  51D7               	movf	port_loop@i& (0+255),w,b
  2850  010A32  EC1B  F095         	call	_sw_flag_read
  2851  010A36  0100               	movlb	0	; () banked
  2852  010A38  51D3               	movf	?_sw_flag_read& (0+255),w,b
  2853  010A3A  0100               	movlb	0	; () banked
  2854  010A3C  11D4               	iorwf	(?_sw_flag_read+1)& (0+255),w,b
  2855  010A3E  B4D8               	btfsc	status,2,c
  2856  010A40  D00C               	goto	l8894
  2857                           
  2858                           ; BSR set to: 0
  2859                           ;tasks.h: 329: sw_flag_clear(i, 0x0000);
  2860  010A42  0E00               	movlw	0
  2861  010A44  0100               	movlb	0	; () banked
  2862  010A46  6FD4               	movwf	(sw_flag_clear@bit_and+1)& (0+255),b
  2863  010A48  0E00               	movlw	0
  2864  010A4A  6FD3               	movwf	sw_flag_clear@bit_and& (0+255),b
  2865  010A4C  0100               	movlb	0	; () banked
  2866  010A4E  51D7               	movf	port_loop@i& (0+255),w,b
  2867  010A50  ECBB  F096         	call	_sw_flag_clear
  2868                           
  2869                           ;tasks.h: 330: print_content = LOGO;
  2870  010A54  0E00               	movlw	0
  2871  010A56  0100               	movlb	0	; () banked
  2872  010A58  6FB7               	movwf	_print_content& (0+255),b
  2873  010A5A                     l8894:
  2874                           
  2875                           ; BSR set to: 0
  2876  010A5A  0100               	movlb	0	; () banked
  2877  010A5C  2BD7               	incf	port_loop@i& (0+255),f,b
  2878  010A5E  D6BA               	goto	l8820
  2879  010A60                     l8898:
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;tasks.h: 331: }
  2883                           ;tasks.h: 332: }
  2884                           ;tasks.h: 333: if (delay_display.flag) {
  2885  010A60  0100               	movlb	0	; () banked
  2886  010A62  51CE               	movf	_delay_display& (0+255),w,b
  2887  010A64  B4D8               	btfsc	status,2,c
  2888  010A66  0012               	return	
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;tasks.h: 334: delay_display.flag = 0;
  2892  010A68  0E00               	movlw	0
  2893  010A6A  0100               	movlb	0	; () banked
  2894  010A6C  6FCE               	movwf	_delay_display& (0+255),b
  2895                           
  2896                           ;tasks.h: 335: print_content = CURRENT;
  2897  010A6E  0E02               	movlw	2
  2898  010A70  0100               	movlb	0	; () banked
  2899  010A72  6FB7               	movwf	_print_content& (0+255),b
  2900                           
  2901                           ;tasks.h: 336: display_flag = 1;
  2902  010A74  0E01               	movlw	1
  2903  010A76  0100               	movlb	0	; () banked
  2904  010A78  6FB4               	movwf	_display_flag& (0+255),b
  2905  010A7A  0012               	return	
  2906  010A7C                     __end_of_port_loop:
  2907                           	opt stack 0
  2908                           tblptru	equ	0xFF8
  2909                           tblptrh	equ	0xFF7
  2910                           tblptrl	equ	0xFF6
  2911                           tablat	equ	0xFF5
  2912                           prodh	equ	0xFF4
  2913                           prodl	equ	0xFF3
  2914                           intcon	equ	0xFF2
  2915                           postinc0	equ	0xFEE
  2916                           wreg	equ	0xFE8
  2917                           postdec1	equ	0xFE5
  2918                           fsr1l	equ	0xFE1
  2919                           indf2	equ	0xFDF
  2920                           postinc2	equ	0xFDE
  2921                           postdec2	equ	0xFDD
  2922                           fsr2h	equ	0xFDA
  2923                           fsr2l	equ	0xFD9
  2924                           status	equ	0xFD8
  2925                           
  2926 ;; *************** function _sw_flag_read *****************
  2927 ;; Defined at:
  2928 ;;		line 90 in file "tasks.h"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;  port            1    wreg     unsigned char 
  2931 ;;  bit_and         2    0[BANK0 ] unsigned int 
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;  port            1   31[COMRAM] unsigned char 
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  2    0[BANK0 ] unsigned int 
  2936 ;; Registers used:
  2937 ;;		wreg, status,2, status,0
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2943 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2944 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2946 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2947 ;;Total ram usage:        3 bytes
  2948 ;; Hardware stack levels used:    1
  2949 ;; Hardware stack levels required when called:    4
  2950 ;; This function calls:
  2951 ;;		Nothing
  2952 ;; This function is called by:
  2953 ;;		_port_loop
  2954 ;; This function uses a non-reentrant model
  2955 ;;
  2956                           
  2957                           	psect	text4
  2958  012A36                     __ptext4:
  2959                           	opt stack 0
  2960  012A36                     _sw_flag_read:
  2961                           	opt stack 24
  2962                           
  2963                           ; BSR set to: 0
  2964                           ;incstack = 0
  2965                           ;sw_flag_read@port stored from wreg
  2966  012A36  6E20               	movwf	sw_flag_read@port,c
  2967                           
  2968                           ;tasks.h: 91: switch (port) {
  2969  012A38  D02D               	goto	l8494
  2970  012A3A                     l8476:
  2971                           
  2972                           ;tasks.h: 93: return (ct0.flags) & bit_and;
  2973  012A3A  0100               	movlb	0	; () banked
  2974  012A3C  51D3               	movf	sw_flag_read@bit_and& (0+255),w,b
  2975  012A3E  0100               	movlb	0	; () banked
  2976  012A40  15BC               	andwf	(_ct0+2)& (0+255),w,b
  2977  012A42  0100               	movlb	0	; () banked
  2978  012A44  6FD3               	movwf	?_sw_flag_read& (0+255),b
  2979  012A46  0100               	movlb	0	; () banked
  2980  012A48  51D4               	movf	(sw_flag_read@bit_and+1)& (0+255),w,b
  2981  012A4A  0100               	movlb	0	; () banked
  2982  012A4C  15BD               	andwf	(_ct0+3)& (0+255),w,b
  2983  012A4E  0100               	movlb	0	; () banked
  2984  012A50  6FD4               	movwf	(?_sw_flag_read+1)& (0+255),b
  2985                           
  2986                           ; BSR set to: 0
  2987  012A52  0012               	return	
  2988  012A54                     l8480:
  2989                           
  2990                           ;tasks.h: 95: return (ct1.flags) & bit_and;
  2991  012A54  0100               	movlb	0	; () banked
  2992  012A56  51D3               	movf	sw_flag_read@bit_and& (0+255),w,b
  2993  012A58  0100               	movlb	0	; () banked
  2994  012A5A  15C0               	andwf	(_ct1+2)& (0+255),w,b
  2995  012A5C  0100               	movlb	0	; () banked
  2996  012A5E  6FD3               	movwf	?_sw_flag_read& (0+255),b
  2997  012A60  0100               	movlb	0	; () banked
  2998  012A62  51D4               	movf	(sw_flag_read@bit_and+1)& (0+255),w,b
  2999  012A64  0100               	movlb	0	; () banked
  3000  012A66  15C1               	andwf	(_ct1+3)& (0+255),w,b
  3001  012A68  0100               	movlb	0	; () banked
  3002  012A6A  6FD4               	movwf	(?_sw_flag_read+1)& (0+255),b
  3003                           
  3004                           ; BSR set to: 0
  3005  012A6C  0012               	return	
  3006  012A6E                     l8484:
  3007                           
  3008                           ;tasks.h: 97: return (ct2.flags) & bit_and;
  3009  012A6E  0100               	movlb	0	; () banked
  3010  012A70  51D3               	movf	sw_flag_read@bit_and& (0+255),w,b
  3011  012A72  0100               	movlb	0	; () banked
  3012  012A74  15C4               	andwf	(_ct2+2)& (0+255),w,b
  3013  012A76  0100               	movlb	0	; () banked
  3014  012A78  6FD3               	movwf	?_sw_flag_read& (0+255),b
  3015  012A7A  0100               	movlb	0	; () banked
  3016  012A7C  51D4               	movf	(sw_flag_read@bit_and+1)& (0+255),w,b
  3017  012A7E  0100               	movlb	0	; () banked
  3018  012A80  15C5               	andwf	(_ct2+3)& (0+255),w,b
  3019  012A82  0100               	movlb	0	; () banked
  3020  012A84  6FD4               	movwf	(?_sw_flag_read+1)& (0+255),b
  3021                           
  3022                           ; BSR set to: 0
  3023  012A86  0012               	return	
  3024  012A88                     l8488:
  3025                           
  3026                           ;tasks.h: 99: return 0;
  3027  012A88  0E00               	movlw	0
  3028  012A8A  0100               	movlb	0	; () banked
  3029  012A8C  6FD4               	movwf	(?_sw_flag_read+1)& (0+255),b
  3030  012A8E  0E00               	movlw	0
  3031  012A90  6FD3               	movwf	?_sw_flag_read& (0+255),b
  3032                           
  3033                           ; BSR set to: 0
  3034                           ;tasks.h: 100: }
  3035                           
  3036                           ; BSR set to: 0
  3037  012A92  0012               	return	
  3038  012A94                     l8494:
  3039  012A94  5020               	movf	sw_flag_read@port,w,c
  3040                           
  3041                           ; Switch size 1, requested type "space"
  3042                           ; Number of cases is 3, Range of values is 0 to 2
  3043                           ; switch strategies available:
  3044                           ; Name         Instructions Cycles
  3045                           ; simple_byte           10     6 (average)
  3046                           ;	Chosen strategy is simple_byte
  3047  012A96  0A00               	xorlw	0	; case 0
  3048  012A98  B4D8               	btfsc	status,2,c
  3049  012A9A  D7CF               	goto	l8476
  3050  012A9C  0A01               	xorlw	1	; case 1
  3051  012A9E  B4D8               	btfsc	status,2,c
  3052  012AA0  D7D9               	goto	l8480
  3053  012AA2  0A03               	xorlw	3	; case 2
  3054  012AA4  B4D8               	btfsc	status,2,c
  3055  012AA6  D7E3               	goto	l8484
  3056  012AA8  D7EF               	goto	l8488
  3057  012AAA                     __end_of_sw_flag_read:
  3058                           	opt stack 0
  3059                           tblptru	equ	0xFF8
  3060                           tblptrh	equ	0xFF7
  3061                           tblptrl	equ	0xFF6
  3062                           tablat	equ	0xFF5
  3063                           prodh	equ	0xFF4
  3064                           prodl	equ	0xFF3
  3065                           intcon	equ	0xFF2
  3066                           postinc0	equ	0xFEE
  3067                           wreg	equ	0xFE8
  3068                           postdec1	equ	0xFE5
  3069                           fsr1l	equ	0xFE1
  3070                           indf2	equ	0xFDF
  3071                           postinc2	equ	0xFDE
  3072                           postdec2	equ	0xFDD
  3073                           fsr2h	equ	0xFDA
  3074                           fsr2l	equ	0xFD9
  3075                           status	equ	0xFD8
  3076                           
  3077 ;; *************** function _sw_flag_clear *****************
  3078 ;; Defined at:
  3079 ;;		line 103 in file "tasks.h"
  3080 ;; Parameters:    Size  Location     Type
  3081 ;;  port            1    wreg     unsigned char 
  3082 ;;  bit_and         2    0[BANK0 ] unsigned int 
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;  port            1   31[COMRAM] unsigned char 
  3085 ;; Return value:  Size  Location     Type
  3086 ;;		None               void
  3087 ;; Registers used:
  3088 ;;		wreg, status,2, status,0
  3089 ;; Tracked objects:
  3090 ;;		On entry : 0/0
  3091 ;;		On exit  : 0/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3094 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3095 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3097 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3098 ;;Total ram usage:        3 bytes
  3099 ;; Hardware stack levels used:    1
  3100 ;; Hardware stack levels required when called:    4
  3101 ;; This function calls:
  3102 ;;		Nothing
  3103 ;; This function is called by:
  3104 ;;		_port_loop
  3105 ;; This function uses a non-reentrant model
  3106 ;;
  3107                           
  3108                           	psect	text5
  3109  012D76                     __ptext5:
  3110                           	opt stack 0
  3111  012D76                     _sw_flag_clear:
  3112                           	opt stack 24
  3113                           
  3114                           ;incstack = 0
  3115                           ;sw_flag_clear@port stored from wreg
  3116  012D76  6E20               	movwf	sw_flag_clear@port,c
  3117                           
  3118                           ;tasks.h: 104: switch (port) {
  3119  012D78  D01B               	goto	l8506
  3120  012D7A                     l8498:
  3121                           
  3122                           ;tasks.h: 106: ct0.flags &= bit_and;
  3123  012D7A  0100               	movlb	0	; () banked
  3124  012D7C  51D3               	movf	sw_flag_clear@bit_and& (0+255),w,b
  3125  012D7E  0100               	movlb	0	; () banked
  3126  012D80  17BC               	andwf	(_ct0+2)& (0+255),f,b
  3127  012D82  0100               	movlb	0	; () banked
  3128  012D84  51D4               	movf	(sw_flag_clear@bit_and+1)& (0+255),w,b
  3129  012D86  0100               	movlb	0	; () banked
  3130  012D88  17BD               	andwf	(_ct0+3)& (0+255),f,b
  3131                           
  3132                           ;tasks.h: 107: break;
  3133  012D8A  0012               	return	
  3134  012D8C                     l8500:
  3135                           
  3136                           ;tasks.h: 109: ct1.flags &= bit_and;
  3137  012D8C  0100               	movlb	0	; () banked
  3138  012D8E  51D3               	movf	sw_flag_clear@bit_and& (0+255),w,b
  3139  012D90  0100               	movlb	0	; () banked
  3140  012D92  17C0               	andwf	(_ct1+2)& (0+255),f,b
  3141  012D94  0100               	movlb	0	; () banked
  3142  012D96  51D4               	movf	(sw_flag_clear@bit_and+1)& (0+255),w,b
  3143  012D98  0100               	movlb	0	; () banked
  3144  012D9A  17C1               	andwf	(_ct1+3)& (0+255),f,b
  3145                           
  3146                           ;tasks.h: 110: break;
  3147  012D9C  0012               	return	
  3148  012D9E                     l8502:
  3149                           
  3150                           ;tasks.h: 112: ct2.flags &= bit_and;
  3151  012D9E  0100               	movlb	0	; () banked
  3152  012DA0  51D3               	movf	sw_flag_clear@bit_and& (0+255),w,b
  3153  012DA2  0100               	movlb	0	; () banked
  3154  012DA4  17C4               	andwf	(_ct2+2)& (0+255),f,b
  3155  012DA6  0100               	movlb	0	; () banked
  3156  012DA8  51D4               	movf	(sw_flag_clear@bit_and+1)& (0+255),w,b
  3157  012DAA  0100               	movlb	0	; () banked
  3158  012DAC  17C5               	andwf	(_ct2+3)& (0+255),f,b
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;tasks.h: 114: }
  3162                           
  3163                           ;tasks.h: 113: break;
  3164  012DAE  0012               	return	
  3165  012DB0                     l8506:
  3166  012DB0  5020               	movf	sw_flag_clear@port,w,c
  3167                           
  3168                           ; Switch size 1, requested type "space"
  3169                           ; Number of cases is 3, Range of values is 0 to 2
  3170                           ; switch strategies available:
  3171                           ; Name         Instructions Cycles
  3172                           ; simple_byte           10     6 (average)
  3173                           ;	Chosen strategy is simple_byte
  3174  012DB2  0A00               	xorlw	0	; case 0
  3175  012DB4  B4D8               	btfsc	status,2,c
  3176  012DB6  D7E1               	goto	l8498
  3177  012DB8  0A01               	xorlw	1	; case 1
  3178  012DBA  B4D8               	btfsc	status,2,c
  3179  012DBC  D7E7               	goto	l8500
  3180  012DBE  0A03               	xorlw	3	; case 2
  3181  012DC0  A4D8               	btfss	status,2,c
  3182  012DC2  0012               	return	
  3183  012DC4  D7EC               	goto	l8502
  3184  012DC6                     __end_of_sw_flag_clear:
  3185                           	opt stack 0
  3186                           tblptru	equ	0xFF8
  3187                           tblptrh	equ	0xFF7
  3188                           tblptrl	equ	0xFF6
  3189                           tablat	equ	0xFF5
  3190                           prodh	equ	0xFF4
  3191                           prodl	equ	0xFF3
  3192                           intcon	equ	0xFF2
  3193                           postinc0	equ	0xFEE
  3194                           wreg	equ	0xFE8
  3195                           postdec1	equ	0xFE5
  3196                           fsr1l	equ	0xFE1
  3197                           indf2	equ	0xFDF
  3198                           postinc2	equ	0xFDE
  3199                           postdec2	equ	0xFDD
  3200                           fsr2h	equ	0xFDA
  3201                           fsr2l	equ	0xFD9
  3202                           status	equ	0xFD8
  3203                           
  3204 ;; *************** function _delay_set *****************
  3205 ;; Defined at:
  3206 ;;		line 349 in file "../My_header\My_header.h"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;  d               2    0[BANK0 ] PTR struct Delay
  3209 ;;		 -> delay_display(3), 
  3210 ;;  value           2    2[BANK0 ] unsigned int 
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;		None
  3213 ;; Return value:  Size  Location     Type
  3214 ;;		None               void
  3215 ;; Registers used:
  3216 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3217 ;; Tracked objects:
  3218 ;;		On entry : 0/0
  3219 ;;		On exit  : 0/0
  3220 ;;		Unchanged: 0/0
  3221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3222 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3225 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3226 ;;Total ram usage:        4 bytes
  3227 ;; Hardware stack levels used:    1
  3228 ;; Hardware stack levels required when called:    4
  3229 ;; This function calls:
  3230 ;;		Nothing
  3231 ;; This function is called by:
  3232 ;;		_port_loop
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236                           	psect	text6
  3237  0131E8                     __ptext6:
  3238                           	opt stack 0
  3239  0131E8                     _delay_set:
  3240                           	opt stack 24
  3241                           
  3242                           ;My_header\My_header.h: 350: d->cnt = value;
  3243                           
  3244                           ;incstack = 0
  3245  0131E8  0100               	movlb	0	; () banked
  3246  0131EA  EE20 F001          	lfsr	2,1
  3247  0131EE  51D3               	movf	delay_set@d& (0+255),w,b
  3248  0131F0  26D9               	addwf	fsr2l,f,c
  3249  0131F2  51D4               	movf	(delay_set@d+1)& (0+255),w,b
  3250  0131F4  22DA               	addwfc	fsr2h,f,c
  3251  0131F6  C0D5  FFDE         	movff	delay_set@value,postinc2
  3252  0131FA  C0D6  FFDD         	movff	delay_set@value+1,postdec2
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;My_header\My_header.h: 351: d->flag = 0;
  3256  0131FE  C0D3  FFD9         	movff	delay_set@d,fsr2l
  3257  013202  C0D4  FFDA         	movff	delay_set@d+1,fsr2h
  3258  013206  0E00               	movlw	0
  3259  013208  6EDF               	movwf	indf2,c
  3260                           
  3261                           ; BSR set to: 0
  3262  01320A  0012               	return		;funcret
  3263  01320C                     __end_of_delay_set:
  3264                           	opt stack 0
  3265                           tblptru	equ	0xFF8
  3266                           tblptrh	equ	0xFF7
  3267                           tblptrl	equ	0xFF6
  3268                           tablat	equ	0xFF5
  3269                           prodh	equ	0xFF4
  3270                           prodl	equ	0xFF3
  3271                           intcon	equ	0xFF2
  3272                           postinc0	equ	0xFEE
  3273                           wreg	equ	0xFE8
  3274                           postdec1	equ	0xFE5
  3275                           fsr1l	equ	0xFE1
  3276                           indf2	equ	0xFDF
  3277                           postinc2	equ	0xFDE
  3278                           postdec2	equ	0xFDD
  3279                           fsr2h	equ	0xFDA
  3280                           fsr2l	equ	0xFD9
  3281                           status	equ	0xFD8
  3282                           
  3283 ;; *************** function _LED *****************
  3284 ;; Defined at:
  3285 ;;		line 76 in file "tasks.h"
  3286 ;; Parameters:    Size  Location     Type
  3287 ;;  b               1    wreg     unsigned char 
  3288 ;;  value           1   31[COMRAM] unsigned char 
  3289 ;; Auto vars:     Size  Location     Type
  3290 ;;  b               1    0[BANK0 ] unsigned char 
  3291 ;; Return value:  Size  Location     Type
  3292 ;;		None               void
  3293 ;; Registers used:
  3294 ;;		wreg, status,2, status,0
  3295 ;; Tracked objects:
  3296 ;;		On entry : 0/0
  3297 ;;		On exit  : 0/0
  3298 ;;		Unchanged: 0/0
  3299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3300 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3301 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3303 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3304 ;;Total ram usage:        2 bytes
  3305 ;; Hardware stack levels used:    1
  3306 ;; Hardware stack levels required when called:    4
  3307 ;; This function calls:
  3308 ;;		Nothing
  3309 ;; This function is called by:
  3310 ;;		_port_loop
  3311 ;;		_sleep_loop
  3312 ;;		_main
  3313 ;; This function uses a non-reentrant model
  3314 ;;
  3315                           
  3316                           	psect	text7
  3317  012F36                     __ptext7:
  3318                           	opt stack 0
  3319  012F36                     _LED:
  3320                           	opt stack 25
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;incstack = 0
  3324                           ;LED@b stored from wreg
  3325  012F36  0100               	movlb	0	; () banked
  3326  012F38  6FD3               	movwf	LED@b& (0+255),b
  3327                           
  3328                           ;tasks.h: 77: switch (b) {
  3329  012F3A  D012               	goto	l8472
  3330  012F3C                     l621:
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;tasks.h: 79: LATB7 = value;
  3334  012F3C  A020               	btfss	LED@value,0,c
  3335  012F3E  D002               	goto	u9200
  3336  012F40  8E8A               	bsf	3978,7,c	;volatile
  3337  012F42  0012               	return	
  3338  012F44                     u9200:
  3339  012F44  9E8A               	bcf	3978,7,c	;volatile
  3340                           
  3341                           ;tasks.h: 80: break;
  3342  012F46  0012               	return	
  3343  012F48                     l623:
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;tasks.h: 82: LATB6 = value;
  3347  012F48  A020               	btfss	LED@value,0,c
  3348  012F4A  D002               	goto	u9220
  3349  012F4C  8C8A               	bsf	3978,6,c	;volatile
  3350  012F4E  0012               	return	
  3351  012F50                     u9220:
  3352  012F50  9C8A               	bcf	3978,6,c	;volatile
  3353                           
  3354                           ;tasks.h: 83: break;
  3355  012F52  0012               	return	
  3356  012F54                     l624:
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;tasks.h: 85: LATC2 = value;
  3360  012F54  A020               	btfss	LED@value,0,c
  3361  012F56  D002               	goto	u9240
  3362  012F58  848B               	bsf	3979,2,c	;volatile
  3363  012F5A  0012               	return	
  3364  012F5C                     u9240:
  3365  012F5C  948B               	bcf	3979,2,c	;volatile
  3366                           
  3367                           ;tasks.h: 87: }
  3368                           
  3369                           ;tasks.h: 86: break;
  3370  012F5E  0012               	return	
  3371  012F60                     l8472:
  3372  012F60  0100               	movlb	0	; () banked
  3373  012F62  51D3               	movf	LED@b& (0+255),w,b
  3374                           
  3375                           ; Switch size 1, requested type "space"
  3376                           ; Number of cases is 3, Range of values is 0 to 2
  3377                           ; switch strategies available:
  3378                           ; Name         Instructions Cycles
  3379                           ; simple_byte           10     6 (average)
  3380                           ;	Chosen strategy is simple_byte
  3381  012F64  0A00               	xorlw	0	; case 0
  3382  012F66  B4D8               	btfsc	status,2,c
  3383  012F68  D7E9               	goto	l621
  3384  012F6A  0A01               	xorlw	1	; case 1
  3385  012F6C  B4D8               	btfsc	status,2,c
  3386  012F6E  D7EC               	goto	l623
  3387  012F70  0A03               	xorlw	3	; case 2
  3388  012F72  A4D8               	btfss	status,2,c
  3389  012F74  0012               	return	
  3390  012F76  D7EE               	goto	l624
  3391  012F78                     __end_of_LED:
  3392                           	opt stack 0
  3393                           tblptru	equ	0xFF8
  3394                           tblptrh	equ	0xFF7
  3395                           tblptrl	equ	0xFF6
  3396                           tablat	equ	0xFF5
  3397                           prodh	equ	0xFF4
  3398                           prodl	equ	0xFF3
  3399                           intcon	equ	0xFF2
  3400                           postinc0	equ	0xFEE
  3401                           wreg	equ	0xFE8
  3402                           postdec1	equ	0xFE5
  3403                           fsr1l	equ	0xFE1
  3404                           indf2	equ	0xFDF
  3405                           postinc2	equ	0xFDE
  3406                           postdec2	equ	0xFDD
  3407                           fsr2h	equ	0xFDA
  3408                           fsr2l	equ	0xFD9
  3409                           status	equ	0xFD8
  3410                           
  3411 ;; *************** function _display_LCD *****************
  3412 ;; Defined at:
  3413 ;;		line 188 in file "tasks.h"
  3414 ;; Parameters:    Size  Location     Type
  3415 ;;		None
  3416 ;; Auto vars:     Size  Location     Type
  3417 ;;  str            10   16[BANK1 ] unsigned char [10]
  3418 ;; Return value:  Size  Location     Type
  3419 ;;		None               void
  3420 ;; Registers used:
  3421 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3422 ;; Tracked objects:
  3423 ;;		On entry : 0/0
  3424 ;;		On exit  : 0/0
  3425 ;;		Unchanged: 0/0
  3426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3428 ;;      Locals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3430 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3431 ;;Total ram usage:       14 bytes
  3432 ;; Hardware stack levels used:    1
  3433 ;; Hardware stack levels required when called:    9
  3434 ;; This function calls:
  3435 ;;		_I2C_LCD_Clear
  3436 ;;		_I2C_LCD_Putc
  3437 ;;		_I2C_LCD_Puts
  3438 ;;		_I2C_LCD_SetCursor
  3439 ;;		___lldiv
  3440 ;;		___llmod
  3441 ;;		___lwdiv
  3442 ;;		___lwmod
  3443 ;;		_display_port
  3444 ;;		_display_time_1602
  3445 ;;		_my_utoa
  3446 ;; This function is called by:
  3447 ;;		_normal_mode_loop
  3448 ;; This function uses a non-reentrant model
  3449 ;;
  3450                           
  3451                           	psect	text8
  3452  010000                     __ptext8:
  3453                           	opt stack 0
  3454  010000                     _display_LCD:
  3455                           	opt stack 20
  3456                           
  3457                           ;tasks.h: 189: I2C_LCD_Clear();
  3458                           
  3459                           ;incstack = 0
  3460  010000  EC66  F099         	call	_I2C_LCD_Clear	;wreg free
  3461                           
  3462                           ;tasks.h: 190: switch (print_content) {
  3463  010004  D262               	goto	l8816
  3464  010006                     l8726:
  3465                           
  3466                           ;tasks.h: 192: I2C_LCD_SetCursor(0, 0);
  3467  010006  0E00               	movlw	0
  3468  010008  0100               	movlb	0	; () banked
  3469  01000A  6FD8               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3470  01000C  0E00               	movlw	0
  3471  01000E  EC78  F098         	call	_I2C_LCD_SetCursor
  3472                           
  3473                           ;tasks.h: 193: I2C_LCD_Puts("Charge Station 6");
  3474  010012  0E67               	movlw	low STR_8
  3475  010014  0100               	movlb	0	; () banked
  3476  010016  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  3477  010018  0EFF               	movlw	high STR_8
  3478  01001A  0100               	movlb	0	; () banked
  3479  01001C  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3480  01001E  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  3481                           
  3482                           ;tasks.h: 194: I2C_LCD_SetCursor(0, 1);
  3483  010022  0E01               	movlw	1
  3484  010024  0100               	movlb	0	; () banked
  3485  010026  6FD8               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3486  010028  0E00               	movlw	0
  3487  01002A  EC78  F098         	call	_I2C_LCD_SetCursor
  3488                           
  3489                           ;tasks.h: 195: I2C_LCD_Puts("Made by KERI");
  3490  01002E  0E88               	movlw	low STR_9
  3491  010030  0100               	movlb	0	; () banked
  3492  010032  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  3493  010034  0EFF               	movlw	high STR_9
  3494  010036  0100               	movlb	0	; () banked
  3495  010038  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3496  01003A  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  3497                           
  3498                           ;tasks.h: 196: break;
  3499  01003E  0012               	return	
  3500  010040                     l8732:
  3501                           
  3502                           ;tasks.h: 198: display_time_1602(&caltime_now, &epoch_now);
  3503  010040  0EF0               	movlw	low _caltime_now
  3504  010042  0101               	movlb	1	; () banked
  3505  010044  6F0B               	movwf	display_time_1602@ct& (0+255),b
  3506  010046  0E01               	movlw	high _caltime_now
  3507  010048  0101               	movlb	1	; () banked
  3508  01004A  6F0C               	movwf	(display_time_1602@ct+1)& (0+255),b
  3509  01004C  0ECA               	movlw	low _epoch_now
  3510  01004E  0101               	movlb	1	; () banked
  3511  010050  6F0D               	movwf	display_time_1602@ep& (0+255),b
  3512  010052  0E00               	movlw	high _epoch_now
  3513  010054  0101               	movlb	1	; () banked
  3514  010056  6F0E               	movwf	(display_time_1602@ep+1)& (0+255),b
  3515  010058  ECAC  F08A         	call	_display_time_1602	;wreg free
  3516                           
  3517                           ;tasks.h: 199: break;
  3518  01005C  0012               	return	
  3519  01005E                     l8734:
  3520                           
  3521                           ;tasks.h: 201: display_port();
  3522  01005E  EC3D  F08E         	call	_display_port	;wreg free
  3523                           
  3524                           ;tasks.h: 202: I2C_LCD_SetCursor(0, 1);
  3525  010062  0E01               	movlw	1
  3526  010064  0100               	movlb	0	; () banked
  3527  010066  6FD8               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3528  010068  0E00               	movlw	0
  3529  01006A  EC78  F098         	call	_I2C_LCD_SetCursor
  3530                           
  3531                           ;tasks.h: 203: I2C_LCD_Putc((I[print_port] % 10000) / 1000 + '0');
  3532  01006E  0E27               	movlw	39
  3533  010070  0100               	movlb	0	; () banked
  3534  010072  6FD6               	movwf	(___lwmod@divisor+1)& (0+255),b
  3535  010074  0E10               	movlw	16
  3536  010076  6FD5               	movwf	___lwmod@divisor& (0+255),b
  3537  010078  503B               	movf	_print_port,w,c
  3538  01007A  0D02               	mullw	2
  3539  01007C  0E69               	movlw	low _I
  3540  01007E  24F3               	addwf	prodl,w,c
  3541  010080  6ED9               	movwf	fsr2l,c
  3542  010082  0E00               	movlw	high _I
  3543  010084  20F4               	addwfc	prodh,w,c
  3544  010086  6EDA               	movwf	fsr2h,c
  3545  010088  CFDE F0D3          	movff	postinc2,___lwmod@dividend
  3546  01008C  CFDD F0D4          	movff	postdec2,___lwmod@dividend+1
  3547  010090  EC88  F095         	call	___lwmod	;wreg free
  3548  010094  C0D3  F0E8         	movff	?___lwmod,___lwdiv@dividend
  3549  010098  C0D4  F0E9         	movff	?___lwmod+1,___lwdiv@dividend+1
  3550  01009C  0E03               	movlw	3
  3551  01009E  0100               	movlb	0	; () banked
  3552  0100A0  6FEB               	movwf	(___lwdiv@divisor+1)& (0+255),b
  3553  0100A2  0EE8               	movlw	232
  3554  0100A4  6FEA               	movwf	___lwdiv@divisor& (0+255),b
  3555  0100A6  ECA4  F094         	call	___lwdiv	;wreg free
  3556  0100AA  0100               	movlb	0	; () banked
  3557  0100AC  51E8               	movf	?___lwdiv& (0+255),w,b
  3558  0100AE  0F30               	addlw	48
  3559  0100B0  ECDB  F097         	call	_I2C_LCD_Putc
  3560                           
  3561                           ;tasks.h: 204: I2C_LCD_Putc('.');
  3562  0100B4  0E2E               	movlw	46
  3563  0100B6  ECDB  F097         	call	_I2C_LCD_Putc
  3564                           
  3565                           ;tasks.h: 205: I2C_LCD_Putc((I[print_port] % 1000) / 100 + '0');
  3566  0100BA  0E03               	movlw	3
  3567  0100BC  0100               	movlb	0	; () banked
  3568  0100BE  6FD6               	movwf	(___lwmod@divisor+1)& (0+255),b
  3569  0100C0  0EE8               	movlw	232
  3570  0100C2  6FD5               	movwf	___lwmod@divisor& (0+255),b
  3571  0100C4  503B               	movf	_print_port,w,c
  3572  0100C6  0D02               	mullw	2
  3573  0100C8  0E69               	movlw	low _I
  3574  0100CA  24F3               	addwf	prodl,w,c
  3575  0100CC  6ED9               	movwf	fsr2l,c
  3576  0100CE  0E00               	movlw	high _I
  3577  0100D0  20F4               	addwfc	prodh,w,c
  3578  0100D2  6EDA               	movwf	fsr2h,c
  3579  0100D4  CFDE F0D3          	movff	postinc2,___lwmod@dividend
  3580  0100D8  CFDD F0D4          	movff	postdec2,___lwmod@dividend+1
  3581  0100DC  EC88  F095         	call	___lwmod	;wreg free
  3582  0100E0  C0D3  F0E8         	movff	?___lwmod,___lwdiv@dividend
  3583  0100E4  C0D4  F0E9         	movff	?___lwmod+1,___lwdiv@dividend+1
  3584  0100E8  0E00               	movlw	0
  3585  0100EA  0100               	movlb	0	; () banked
  3586  0100EC  6FEB               	movwf	(___lwdiv@divisor+1)& (0+255),b
  3587  0100EE  0E64               	movlw	100
  3588  0100F0  6FEA               	movwf	___lwdiv@divisor& (0+255),b
  3589  0100F2  ECA4  F094         	call	___lwdiv	;wreg free
  3590  0100F6  0100               	movlb	0	; () banked
  3591  0100F8  51E8               	movf	?___lwdiv& (0+255),w,b
  3592  0100FA  0F30               	addlw	48
  3593  0100FC  ECDB  F097         	call	_I2C_LCD_Putc
  3594                           
  3595                           ;tasks.h: 206: I2C_LCD_Putc((I[print_port] % 100) / 10 + '0');
  3596  010100  0E00               	movlw	0
  3597  010102  0100               	movlb	0	; () banked
  3598  010104  6FD6               	movwf	(___lwmod@divisor+1)& (0+255),b
  3599  010106  0E64               	movlw	100
  3600  010108  6FD5               	movwf	___lwmod@divisor& (0+255),b
  3601  01010A  503B               	movf	_print_port,w,c
  3602  01010C  0D02               	mullw	2
  3603  01010E  0E69               	movlw	low _I
  3604  010110  24F3               	addwf	prodl,w,c
  3605  010112  6ED9               	movwf	fsr2l,c
  3606  010114  0E00               	movlw	high _I
  3607  010116  20F4               	addwfc	prodh,w,c
  3608  010118  6EDA               	movwf	fsr2h,c
  3609  01011A  CFDE F0D3          	movff	postinc2,___lwmod@dividend
  3610  01011E  CFDD F0D4          	movff	postdec2,___lwmod@dividend+1
  3611  010122  EC88  F095         	call	___lwmod	;wreg free
  3612  010126  C0D3  F0E8         	movff	?___lwmod,___lwdiv@dividend
  3613  01012A  C0D4  F0E9         	movff	?___lwmod+1,___lwdiv@dividend+1
  3614  01012E  0E00               	movlw	0
  3615  010130  0100               	movlb	0	; () banked
  3616  010132  6FEB               	movwf	(___lwdiv@divisor+1)& (0+255),b
  3617  010134  0E0A               	movlw	10
  3618  010136  6FEA               	movwf	___lwdiv@divisor& (0+255),b
  3619  010138  ECA4  F094         	call	___lwdiv	;wreg free
  3620  01013C  0100               	movlb	0	; () banked
  3621  01013E  51E8               	movf	?___lwdiv& (0+255),w,b
  3622  010140  0F30               	addlw	48
  3623  010142  ECDB  F097         	call	_I2C_LCD_Putc
  3624                           
  3625                           ;tasks.h: 207: I2C_LCD_Putc((I[print_port] % 10) / 1 + '0');
  3626  010146  503B               	movf	_print_port,w,c
  3627  010148  0D02               	mullw	2
  3628  01014A  0E69               	movlw	low _I
  3629  01014C  24F3               	addwf	prodl,w,c
  3630  01014E  6ED9               	movwf	fsr2l,c
  3631  010150  0E00               	movlw	high _I
  3632  010152  20F4               	addwfc	prodh,w,c
  3633  010154  6EDA               	movwf	fsr2h,c
  3634  010156  CFDE F0D3          	movff	postinc2,___lwmod@dividend
  3635  01015A  CFDD F0D4          	movff	postdec2,___lwmod@dividend+1
  3636  01015E  0E00               	movlw	0
  3637  010160  0100               	movlb	0	; () banked
  3638  010162  6FD6               	movwf	(___lwmod@divisor+1)& (0+255),b
  3639  010164  0E0A               	movlw	10
  3640  010166  6FD5               	movwf	___lwmod@divisor& (0+255),b
  3641  010168  EC88  F095         	call	___lwmod	;wreg free
  3642  01016C  0100               	movlb	0	; () banked
  3643  01016E  51D3               	movf	?___lwmod& (0+255),w,b
  3644  010170  0F30               	addlw	48
  3645  010172  ECDB  F097         	call	_I2C_LCD_Putc
  3646                           
  3647                           ;tasks.h: 208: I2C_LCD_Putc('A');
  3648  010176  0E41               	movlw	65
  3649  010178  ECDB  F097         	call	_I2C_LCD_Putc
  3650                           
  3651                           ;tasks.h: 209: break;
  3652  01017C  0012               	return	
  3653  01017E                     l8750:
  3654                           
  3655                           ;tasks.h: 211: display_port();
  3656  01017E  EC3D  F08E         	call	_display_port	;wreg free
  3657                           
  3658                           ;tasks.h: 212: I2C_LCD_SetCursor(0, 1);
  3659  010182  0E01               	movlw	1
  3660  010184  0100               	movlb	0	; () banked
  3661  010186  6FD8               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3662  010188  0E00               	movlw	0
  3663  01018A  EC78  F098         	call	_I2C_LCD_SetCursor
  3664                           
  3665                           ;tasks.h: 213: uint8_t str[10];
  3666                           ;tasks.h: 214: my_utoa(str, S[print_port], 5);
  3667  01018E  0E10               	movlw	low display_LCD@str
  3668  010190  0100               	movlb	0	; () banked
  3669  010192  6FEF               	movwf	my_utoa@str& (0+255),b
  3670  010194  0E01               	movlw	high display_LCD@str
  3671  010196  0100               	movlb	0	; () banked
  3672  010198  6FF0               	movwf	(my_utoa@str+1)& (0+255),b
  3673  01019A  503B               	movf	_print_port,w,c
  3674  01019C  0D04               	mullw	4
  3675  01019E  0EC9               	movlw	low _S
  3676  0101A0  24F3               	addwf	prodl,w,c
  3677  0101A2  6ED9               	movwf	fsr2l,c
  3678  0101A4  0E01               	movlw	high _S
  3679  0101A6  20F4               	addwfc	prodh,w,c
  3680  0101A8  6EDA               	movwf	fsr2h,c
  3681  0101AA  CFDE F0F1          	movff	postinc2,my_utoa@value
  3682  0101AE  CFDD F0F2          	movff	postdec2,my_utoa@value+1
  3683  0101B2  0E05               	movlw	5
  3684  0101B4  0100               	movlb	0	; () banked
  3685  0101B6  6FF3               	movwf	my_utoa@digits& (0+255),b
  3686  0101B8  ECDD  F093         	call	_my_utoa	;wreg free
  3687                           
  3688                           ;tasks.h: 215: I2C_LCD_Puts(str);
  3689  0101BC  0E10               	movlw	low display_LCD@str
  3690  0101BE  0100               	movlb	0	; () banked
  3691  0101C0  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  3692  0101C2  0E01               	movlw	high display_LCD@str
  3693  0101C4  0100               	movlb	0	; () banked
  3694  0101C6  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3695  0101C8  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  3696                           
  3697                           ;tasks.h: 216: I2C_LCD_Puts("mAh");
  3698  0101CC  0EED               	movlw	low STR_10
  3699  0101CE  0100               	movlb	0	; () banked
  3700  0101D0  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  3701  0101D2  0EFF               	movlw	high STR_10
  3702  0101D4  0100               	movlb	0	; () banked
  3703  0101D6  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3704  0101D8  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  3705                           
  3706                           ;tasks.h: 217: break;
  3707  0101DC  0012               	return	
  3708  0101DE                     l8760:
  3709                           
  3710                           ;tasks.h: 219: display_port();
  3711  0101DE  EC3D  F08E         	call	_display_port	;wreg free
  3712                           
  3713                           ;tasks.h: 220: uint8_t str[10];
  3714                           ;tasks.h: 221: I2C_LCD_SetCursor(0, 1);
  3715  0101E2  0E01               	movlw	1
  3716  0101E4  0100               	movlb	0	; () banked
  3717  0101E6  6FD8               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3718  0101E8  0E00               	movlw	0
  3719  0101EA  EC78  F098         	call	_I2C_LCD_SetCursor
  3720                           
  3721                           ;tasks.h: 222: my_utoa(str, charge_time[print_port] / 3600 / 24, 2);
  3722  0101EE  0E10               	movlw	16
  3723  0101F0  0100               	movlb	0	; () banked
  3724  0101F2  6FD7               	movwf	___lldiv@divisor& (0+255),b
  3725  0101F4  0E0E               	movlw	14
  3726  0101F6  6FD8               	movwf	(___lldiv@divisor+1)& (0+255),b
  3727  0101F8  0E00               	movlw	0
  3728  0101FA  6FD9               	movwf	(___lldiv@divisor+2)& (0+255),b
  3729  0101FC  0E00               	movlw	0
  3730  0101FE  6FDA               	movwf	(___lldiv@divisor+3)& (0+255),b
  3731  010200  503B               	movf	_print_port,w,c
  3732  010202  0D04               	mullw	4
  3733  010204  0ED5               	movlw	low _charge_time
  3734  010206  24F3               	addwf	prodl,w,c
  3735  010208  6ED9               	movwf	fsr2l,c
  3736  01020A  0E01               	movlw	high _charge_time
  3737  01020C  20F4               	addwfc	prodh,w,c
  3738  01020E  6EDA               	movwf	fsr2h,c
  3739  010210  CFDE F0D3          	movff	postinc2,___lldiv@dividend
  3740  010214  CFDE F0D4          	movff	postinc2,___lldiv@dividend+1
  3741  010218  CFDE F0D5          	movff	postinc2,___lldiv@dividend+2
  3742  01021C  CFDE F0D6          	movff	postinc2,___lldiv@dividend+3
  3743  010220  EC95  F090         	call	___lldiv	;wreg free
  3744  010224  C0D3  F11A         	movff	?___lldiv,_display_LCD$5194
  3745  010228  C0D4  F11B         	movff	?___lldiv+1,_display_LCD$5194+1
  3746  01022C  C0D5  F11C         	movff	?___lldiv+2,_display_LCD$5194+2
  3747  010230  C0D6  F11D         	movff	?___lldiv+3,_display_LCD$5194+3
  3748                           
  3749                           ;tasks.h: 222: my_utoa(str, charge_time[print_port] / 3600 / 24, 2);
  3750  010234  0E10               	movlw	low display_LCD@str
  3751  010236  0100               	movlb	0	; () banked
  3752  010238  6FEF               	movwf	my_utoa@str& (0+255),b
  3753  01023A  0E01               	movlw	high display_LCD@str
  3754  01023C  0100               	movlb	0	; () banked
  3755  01023E  6FF0               	movwf	(my_utoa@str+1)& (0+255),b
  3756  010240  C11A  F0D3         	movff	_display_LCD$5194,___lldiv@dividend
  3757  010244  C11B  F0D4         	movff	_display_LCD$5194+1,___lldiv@dividend+1
  3758  010248  C11C  F0D5         	movff	_display_LCD$5194+2,___lldiv@dividend+2
  3759  01024C  C11D  F0D6         	movff	_display_LCD$5194+3,___lldiv@dividend+3
  3760  010250  0E18               	movlw	24
  3761  010252  0100               	movlb	0	; () banked
  3762  010254  6FD7               	movwf	___lldiv@divisor& (0+255),b
  3763  010256  0E00               	movlw	0
  3764  010258  6FD8               	movwf	(___lldiv@divisor+1)& (0+255),b
  3765  01025A  0E00               	movlw	0
  3766  01025C  6FD9               	movwf	(___lldiv@divisor+2)& (0+255),b
  3767  01025E  0E00               	movlw	0
  3768  010260  6FDA               	movwf	(___lldiv@divisor+3)& (0+255),b
  3769  010262  EC95  F090         	call	___lldiv	;wreg free
  3770  010266  C0D3  F0F1         	movff	?___lldiv,my_utoa@value
  3771  01026A  C0D4  F0F2         	movff	?___lldiv+1,my_utoa@value+1
  3772  01026E  0E02               	movlw	2
  3773  010270  0100               	movlb	0	; () banked
  3774  010272  6FF3               	movwf	my_utoa@digits& (0+255),b
  3775  010274  ECDD  F093         	call	_my_utoa	;wreg free
  3776                           
  3777                           ;tasks.h: 223: I2C_LCD_Puts(str);
  3778  010278  0E10               	movlw	low display_LCD@str
  3779  01027A  0100               	movlb	0	; () banked
  3780  01027C  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  3781  01027E  0E01               	movlw	high display_LCD@str
  3782  010280  0100               	movlb	0	; () banked
  3783  010282  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3784  010284  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  3785                           
  3786                           ;tasks.h: 224: I2C_LCD_Puts("d ");
  3787  010288  0EF4               	movlw	low STR_11
  3788  01028A  0100               	movlb	0	; () banked
  3789  01028C  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  3790  01028E  0EFF               	movlw	high STR_11
  3791  010290  0100               	movlb	0	; () banked
  3792  010292  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3793  010294  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  3794                           
  3795                           ;tasks.h: 225: my_utoa(str, (charge_time[print_port] / 3600) % 24, 2);
  3796  010298  0E10               	movlw	low display_LCD@str
  3797  01029A  0100               	movlb	0	; () banked
  3798  01029C  6FEF               	movwf	my_utoa@str& (0+255),b
  3799  01029E  0E01               	movlw	high display_LCD@str
  3800  0102A0  0100               	movlb	0	; () banked
  3801  0102A2  6FF0               	movwf	(my_utoa@str+1)& (0+255),b
  3802  0102A4  0E10               	movlw	16
  3803  0102A6  0100               	movlb	0	; () banked
  3804  0102A8  6FD7               	movwf	___lldiv@divisor& (0+255),b
  3805  0102AA  0E0E               	movlw	14
  3806  0102AC  6FD8               	movwf	(___lldiv@divisor+1)& (0+255),b
  3807  0102AE  0E00               	movlw	0
  3808  0102B0  6FD9               	movwf	(___lldiv@divisor+2)& (0+255),b
  3809  0102B2  0E00               	movlw	0
  3810  0102B4  6FDA               	movwf	(___lldiv@divisor+3)& (0+255),b
  3811  0102B6  503B               	movf	_print_port,w,c
  3812  0102B8  0D04               	mullw	4
  3813  0102BA  0ED5               	movlw	low _charge_time
  3814  0102BC  24F3               	addwf	prodl,w,c
  3815  0102BE  6ED9               	movwf	fsr2l,c
  3816  0102C0  0E01               	movlw	high _charge_time
  3817  0102C2  20F4               	addwfc	prodh,w,c
  3818  0102C4  6EDA               	movwf	fsr2h,c
  3819  0102C6  CFDE F0D3          	movff	postinc2,___lldiv@dividend
  3820  0102CA  CFDE F0D4          	movff	postinc2,___lldiv@dividend+1
  3821  0102CE  CFDE F0D5          	movff	postinc2,___lldiv@dividend+2
  3822  0102D2  CFDE F0D6          	movff	postinc2,___lldiv@dividend+3
  3823  0102D6  EC95  F090         	call	___lldiv	;wreg free
  3824  0102DA  C0D3  F0E0         	movff	?___lldiv,___llmod@dividend
  3825  0102DE  C0D4  F0E1         	movff	?___lldiv+1,___llmod@dividend+1
  3826  0102E2  C0D5  F0E2         	movff	?___lldiv+2,___llmod@dividend+2
  3827  0102E6  C0D6  F0E3         	movff	?___lldiv+3,___llmod@dividend+3
  3828  0102EA  0E18               	movlw	24
  3829  0102EC  0100               	movlb	0	; () banked
  3830  0102EE  6FE4               	movwf	___llmod@divisor& (0+255),b
  3831  0102F0  0E00               	movlw	0
  3832  0102F2  6FE5               	movwf	(___llmod@divisor+1)& (0+255),b
  3833  0102F4  0E00               	movlw	0
  3834  0102F6  6FE6               	movwf	(___llmod@divisor+2)& (0+255),b
  3835  0102F8  0E00               	movlw	0
  3836  0102FA  6FE7               	movwf	(___llmod@divisor+3)& (0+255),b
  3837  0102FC  EC4C  F093         	call	___llmod	;wreg free
  3838  010300  C0E0  F0F1         	movff	?___llmod,my_utoa@value
  3839  010304  C0E1  F0F2         	movff	?___llmod+1,my_utoa@value+1
  3840  010308  0E02               	movlw	2
  3841  01030A  0100               	movlb	0	; () banked
  3842  01030C  6FF3               	movwf	my_utoa@digits& (0+255),b
  3843  01030E  ECDD  F093         	call	_my_utoa	;wreg free
  3844                           
  3845                           ;tasks.h: 226: I2C_LCD_Puts(str);
  3846  010312  0E10               	movlw	low display_LCD@str
  3847  010314  0100               	movlb	0	; () banked
  3848  010316  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  3849  010318  0E01               	movlw	high display_LCD@str
  3850  01031A  0100               	movlb	0	; () banked
  3851  01031C  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3852  01031E  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  3853                           
  3854                           ;tasks.h: 227: I2C_LCD_Puts("h ");
  3855  010322  0EF7               	movlw	low STR_12
  3856  010324  0100               	movlb	0	; () banked
  3857  010326  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  3858  010328  0EFF               	movlw	high STR_12
  3859  01032A  0100               	movlb	0	; () banked
  3860  01032C  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3861  01032E  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  3862                           
  3863                           ;tasks.h: 228: my_utoa(str, (charge_time[print_port] / 60) % 60, 2);
  3864  010332  0E10               	movlw	low display_LCD@str
  3865  010334  0100               	movlb	0	; () banked
  3866  010336  6FEF               	movwf	my_utoa@str& (0+255),b
  3867  010338  0E01               	movlw	high display_LCD@str
  3868  01033A  0100               	movlb	0	; () banked
  3869  01033C  6FF0               	movwf	(my_utoa@str+1)& (0+255),b
  3870  01033E  0E3C               	movlw	60
  3871  010340  0100               	movlb	0	; () banked
  3872  010342  6FD7               	movwf	___lldiv@divisor& (0+255),b
  3873  010344  0E00               	movlw	0
  3874  010346  6FD8               	movwf	(___lldiv@divisor+1)& (0+255),b
  3875  010348  0E00               	movlw	0
  3876  01034A  6FD9               	movwf	(___lldiv@divisor+2)& (0+255),b
  3877  01034C  0E00               	movlw	0
  3878  01034E  6FDA               	movwf	(___lldiv@divisor+3)& (0+255),b
  3879  010350  503B               	movf	_print_port,w,c
  3880  010352  0D04               	mullw	4
  3881  010354  0ED5               	movlw	low _charge_time
  3882  010356  24F3               	addwf	prodl,w,c
  3883  010358  6ED9               	movwf	fsr2l,c
  3884  01035A  0E01               	movlw	high _charge_time
  3885  01035C  20F4               	addwfc	prodh,w,c
  3886  01035E  6EDA               	movwf	fsr2h,c
  3887  010360  CFDE F0D3          	movff	postinc2,___lldiv@dividend
  3888  010364  CFDE F0D4          	movff	postinc2,___lldiv@dividend+1
  3889  010368  CFDE F0D5          	movff	postinc2,___lldiv@dividend+2
  3890  01036C  CFDE F0D6          	movff	postinc2,___lldiv@dividend+3
  3891  010370  EC95  F090         	call	___lldiv	;wreg free
  3892  010374  C0D3  F0E0         	movff	?___lldiv,___llmod@dividend
  3893  010378  C0D4  F0E1         	movff	?___lldiv+1,___llmod@dividend+1
  3894  01037C  C0D5  F0E2         	movff	?___lldiv+2,___llmod@dividend+2
  3895  010380  C0D6  F0E3         	movff	?___lldiv+3,___llmod@dividend+3
  3896  010384  0E3C               	movlw	60
  3897  010386  0100               	movlb	0	; () banked
  3898  010388  6FE4               	movwf	___llmod@divisor& (0+255),b
  3899  01038A  0E00               	movlw	0
  3900  01038C  6FE5               	movwf	(___llmod@divisor+1)& (0+255),b
  3901  01038E  0E00               	movlw	0
  3902  010390  6FE6               	movwf	(___llmod@divisor+2)& (0+255),b
  3903  010392  0E00               	movlw	0
  3904  010394  6FE7               	movwf	(___llmod@divisor+3)& (0+255),b
  3905  010396  EC4C  F093         	call	___llmod	;wreg free
  3906  01039A  C0E0  F0F1         	movff	?___llmod,my_utoa@value
  3907  01039E  C0E1  F0F2         	movff	?___llmod+1,my_utoa@value+1
  3908  0103A2  0E02               	movlw	2
  3909  0103A4  0100               	movlb	0	; () banked
  3910  0103A6  6FF3               	movwf	my_utoa@digits& (0+255),b
  3911  0103A8  ECDD  F093         	call	_my_utoa	;wreg free
  3912                           
  3913                           ;tasks.h: 229: I2C_LCD_Puts(str);
  3914  0103AC  0E10               	movlw	low display_LCD@str
  3915  0103AE  0100               	movlb	0	; () banked
  3916  0103B0  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  3917  0103B2  0E01               	movlw	high display_LCD@str
  3918  0103B4  0100               	movlb	0	; () banked
  3919  0103B6  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3920  0103B8  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  3921                           
  3922                           ;tasks.h: 230: I2C_LCD_Puts("m ");
  3923  0103BC  0EFA               	movlw	low STR_13
  3924  0103BE  0100               	movlb	0	; () banked
  3925  0103C0  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  3926  0103C2  0EFF               	movlw	high STR_13
  3927  0103C4  0100               	movlb	0	; () banked
  3928  0103C6  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3929  0103C8  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  3930                           
  3931                           ;tasks.h: 231: my_utoa(str, charge_time[print_port] % 60, 2);
  3932  0103CC  0E10               	movlw	low display_LCD@str
  3933  0103CE  0100               	movlb	0	; () banked
  3934  0103D0  6FEF               	movwf	my_utoa@str& (0+255),b
  3935  0103D2  0E01               	movlw	high display_LCD@str
  3936  0103D4  0100               	movlb	0	; () banked
  3937  0103D6  6FF0               	movwf	(my_utoa@str+1)& (0+255),b
  3938  0103D8  503B               	movf	_print_port,w,c
  3939  0103DA  0D04               	mullw	4
  3940  0103DC  0ED5               	movlw	low _charge_time
  3941  0103DE  24F3               	addwf	prodl,w,c
  3942  0103E0  6ED9               	movwf	fsr2l,c
  3943  0103E2  0E01               	movlw	high _charge_time
  3944  0103E4  20F4               	addwfc	prodh,w,c
  3945  0103E6  6EDA               	movwf	fsr2h,c
  3946  0103E8  CFDE F0E0          	movff	postinc2,___llmod@dividend
  3947  0103EC  CFDE F0E1          	movff	postinc2,___llmod@dividend+1
  3948  0103F0  CFDE F0E2          	movff	postinc2,___llmod@dividend+2
  3949  0103F4  CFDE F0E3          	movff	postinc2,___llmod@dividend+3
  3950  0103F8  0E3C               	movlw	60
  3951  0103FA  0100               	movlb	0	; () banked
  3952  0103FC  6FE4               	movwf	___llmod@divisor& (0+255),b
  3953  0103FE  0E00               	movlw	0
  3954  010400  6FE5               	movwf	(___llmod@divisor+1)& (0+255),b
  3955  010402  0E00               	movlw	0
  3956  010404  6FE6               	movwf	(___llmod@divisor+2)& (0+255),b
  3957  010406  0E00               	movlw	0
  3958  010408  6FE7               	movwf	(___llmod@divisor+3)& (0+255),b
  3959  01040A  EC4C  F093         	call	___llmod	;wreg free
  3960  01040E  C0E0  F0F1         	movff	?___llmod,my_utoa@value
  3961  010412  C0E1  F0F2         	movff	?___llmod+1,my_utoa@value+1
  3962  010416  0E02               	movlw	2
  3963  010418  0100               	movlb	0	; () banked
  3964  01041A  6FF3               	movwf	my_utoa@digits& (0+255),b
  3965  01041C  ECDD  F093         	call	_my_utoa	;wreg free
  3966                           
  3967                           ;tasks.h: 232: I2C_LCD_Puts(str);
  3968  010420  0E10               	movlw	low display_LCD@str
  3969  010422  0100               	movlb	0	; () banked
  3970  010424  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  3971  010426  0E01               	movlw	high display_LCD@str
  3972  010428  0100               	movlb	0	; () banked
  3973  01042A  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3974  01042C  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  3975                           
  3976                           ;tasks.h: 233: I2C_LCD_Puts("s");
  3977  010430  0EFD               	movlw	low STR_14
  3978  010432  0100               	movlb	0	; () banked
  3979  010434  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  3980  010436  0EFF               	movlw	high STR_14
  3981  010438  0100               	movlb	0	; () banked
  3982  01043A  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3983  01043C  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  3984                           
  3985                           ;tasks.h: 234: break;
  3986  010440  0012               	return	
  3987  010442                     l8790:
  3988                           
  3989                           ;tasks.h: 236: display_port();
  3990  010442  EC3D  F08E         	call	_display_port	;wreg free
  3991                           
  3992                           ;tasks.h: 237: I2C_LCD_SetCursor(0, 1);
  3993  010446  0E01               	movlw	1
  3994  010448  0100               	movlb	0	; () banked
  3995  01044A  6FD8               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3996  01044C  0E00               	movlw	0
  3997  01044E  EC78  F098         	call	_I2C_LCD_SetCursor
  3998                           
  3999                           ;tasks.h: 238: I2C_LCD_Puts("Integrating Reset?");
  4000  010452  0E54               	movlw	low STR_15
  4001  010454  0100               	movlb	0	; () banked
  4002  010456  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  4003  010458  0EFF               	movlw	high STR_15
  4004  01045A  0100               	movlb	0	; () banked
  4005  01045C  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  4006  01045E  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  4007                           
  4008                           ;tasks.h: 239: break;
  4009  010462  0012               	return	
  4010  010464                     l8796:
  4011                           
  4012                           ;tasks.h: 241: display_port();
  4013  010464  EC3D  F08E         	call	_display_port	;wreg free
  4014                           
  4015                           ;tasks.h: 242: I2C_LCD_SetCursor(0, 1);
  4016  010468  0E01               	movlw	1
  4017  01046A  0100               	movlb	0	; () banked
  4018  01046C  6FD8               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  4019  01046E  0E00               	movlw	0
  4020  010470  EC78  F098         	call	_I2C_LCD_SetCursor
  4021                           
  4022                           ;tasks.h: 243: I2C_LCD_Puts("Integrating Reseted");
  4023  010474  0E40               	movlw	low STR_16
  4024  010476  0100               	movlb	0	; () banked
  4025  010478  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  4026  01047A  0EFF               	movlw	high STR_16
  4027  01047C  0100               	movlb	0	; () banked
  4028  01047E  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  4029  010480  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  4030                           
  4031                           ;tasks.h: 244: break;
  4032  010484  0012               	return	
  4033  010486                     l8802:
  4034                           
  4035                           ;tasks.h: 246: display_port();
  4036  010486  EC3D  F08E         	call	_display_port	;wreg free
  4037                           
  4038                           ;tasks.h: 247: I2C_LCD_SetCursor(0, 1);
  4039  01048A  0E01               	movlw	1
  4040  01048C  0100               	movlb	0	; () banked
  4041  01048E  6FD8               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  4042  010490  0E00               	movlw	0
  4043  010492  EC78  F098         	call	_I2C_LCD_SetCursor
  4044                           
  4045                           ;tasks.h: 248: I2C_LCD_Puts("Always Charging");
  4046  010496  0E78               	movlw	low STR_17
  4047  010498  0100               	movlb	0	; () banked
  4048  01049A  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  4049  01049C  0EFF               	movlw	high STR_17
  4050  01049E  0100               	movlb	0	; () banked
  4051  0104A0  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  4052  0104A2  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  4053                           
  4054                           ;tasks.h: 249: break;
  4055  0104A6  0012               	return	
  4056  0104A8                     l8808:
  4057                           
  4058                           ;tasks.h: 251: display_port();
  4059  0104A8  EC3D  F08E         	call	_display_port	;wreg free
  4060                           
  4061                           ;tasks.h: 252: I2C_LCD_SetCursor(0, 1);
  4062  0104AC  0E01               	movlw	1
  4063  0104AE  0100               	movlb	0	; () banked
  4064  0104B0  6FD8               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  4065  0104B2  0E00               	movlw	0
  4066  0104B4  EC78  F098         	call	_I2C_LCD_SetCursor
  4067                           
  4068                           ;tasks.h: 253: I2C_LCD_Puts("Auto Stop ON");
  4069  0104B8  0E95               	movlw	low STR_18
  4070  0104BA  0100               	movlb	0	; () banked
  4071  0104BC  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  4072  0104BE  0EFF               	movlw	high STR_18
  4073  0104C0  0100               	movlb	0	; () banked
  4074  0104C2  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  4075  0104C4  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  4076                           
  4077                           ;tasks.h: 255: }
  4078                           
  4079                           ;tasks.h: 254: break;
  4080  0104C8  0012               	return	
  4081  0104CA                     l8816:
  4082  0104CA  0100               	movlb	0	; () banked
  4083  0104CC  51B7               	movf	_print_content& (0+255),w,b
  4084                           
  4085                           ; Switch size 1, requested type "space"
  4086                           ; Number of cases is 9, Range of values is 0 to 8
  4087                           ; switch strategies available:
  4088                           ; Name         Instructions Cycles
  4089                           ; simple_byte           28    15 (average)
  4090                           ;	Chosen strategy is simple_byte
  4091  0104CE  0A00               	xorlw	0	; case 0
  4092  0104D0  B4D8               	btfsc	status,2,c
  4093  0104D2  D599               	goto	l8726
  4094  0104D4  0A01               	xorlw	1	; case 1
  4095  0104D6  B4D8               	btfsc	status,2,c
  4096  0104D8  D5B3               	goto	l8732
  4097  0104DA  0A03               	xorlw	3	; case 2
  4098  0104DC  B4D8               	btfsc	status,2,c
  4099  0104DE  D5BF               	goto	l8734
  4100  0104E0  0A01               	xorlw	1	; case 3
  4101  0104E2  B4D8               	btfsc	status,2,c
  4102  0104E4  D64C               	goto	l8750
  4103  0104E6  0A07               	xorlw	7	; case 4
  4104  0104E8  B4D8               	btfsc	status,2,c
  4105  0104EA  D679               	goto	l8760
  4106  0104EC  0A01               	xorlw	1	; case 5
  4107  0104EE  B4D8               	btfsc	status,2,c
  4108  0104F0  D7A8               	goto	l8790
  4109  0104F2  0A03               	xorlw	3	; case 6
  4110  0104F4  B4D8               	btfsc	status,2,c
  4111  0104F6  D7B6               	goto	l8796
  4112  0104F8  0A01               	xorlw	1	; case 7
  4113  0104FA  B4D8               	btfsc	status,2,c
  4114  0104FC  D7C4               	goto	l8802
  4115  0104FE  0A0F               	xorlw	15	; case 8
  4116  010500  A4D8               	btfss	status,2,c
  4117  010502  0012               	return	
  4118  010504  D7D1               	goto	l8808
  4119  010506                     __end_of_display_LCD:
  4120                           	opt stack 0
  4121                           tblptru	equ	0xFF8
  4122                           tblptrh	equ	0xFF7
  4123                           tblptrl	equ	0xFF6
  4124                           tablat	equ	0xFF5
  4125                           prodh	equ	0xFF4
  4126                           prodl	equ	0xFF3
  4127                           intcon	equ	0xFF2
  4128                           postinc0	equ	0xFEE
  4129                           wreg	equ	0xFE8
  4130                           postdec1	equ	0xFE5
  4131                           fsr1l	equ	0xFE1
  4132                           indf2	equ	0xFDF
  4133                           postinc2	equ	0xFDE
  4134                           postdec2	equ	0xFDD
  4135                           fsr2h	equ	0xFDA
  4136                           fsr2l	equ	0xFD9
  4137                           status	equ	0xFD8
  4138                           
  4139 ;; *************** function _display_time_1602 *****************
  4140 ;; Defined at:
  4141 ;;		line 278 in file "../My_header\My_RTCC.h"
  4142 ;; Parameters:    Size  Location     Type
  4143 ;;  ct              2   11[BANK1 ] PTR struct .
  4144 ;;		 -> caltime_now(7), 
  4145 ;;  ep              2   13[BANK1 ] PTR unsigned long 
  4146 ;;		 -> epoch_now(4), 
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;		None
  4149 ;; Return value:  Size  Location     Type
  4150 ;;		None               void
  4151 ;; Registers used:
  4152 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4153 ;; Tracked objects:
  4154 ;;		On entry : 0/0
  4155 ;;		On exit  : 0/0
  4156 ;;		Unchanged: 0/0
  4157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4158 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4160 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4161 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4162 ;;Total ram usage:        5 bytes
  4163 ;; Hardware stack levels used:    1
  4164 ;; Hardware stack levels required when called:    8
  4165 ;; This function calls:
  4166 ;;		_I2C_LCD_Putc
  4167 ;;		_I2C_LCD_Puts
  4168 ;;		_I2C_LCD_SetCursor
  4169 ;;		_RTCC_from_RTCC
  4170 ;;		_display_dec
  4171 ;; This function is called by:
  4172 ;;		_display_LCD
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           	psect	text9
  4177  011558                     __ptext9:
  4178                           	opt stack 0
  4179  011558                     _display_time_1602:
  4180                           	opt stack 20
  4181                           
  4182                           ;My_header\My_RTCC.h: 279: RTCC_from_RTCC(ct, ep);
  4183                           
  4184                           ;incstack = 0
  4185  011558  C10B  F100         	movff	display_time_1602@ct,RTCC_from_RTCC@ct
  4186  01155C  C10C  F101         	movff	display_time_1602@ct+1,RTCC_from_RTCC@ct+1
  4187  011560  C10D  F102         	movff	display_time_1602@ep,RTCC_from_RTCC@ep
  4188  011564  C10E  F103         	movff	display_time_1602@ep+1,RTCC_from_RTCC@ep+1
  4189  011568  EC29  F099         	call	_RTCC_from_RTCC	;wreg free
  4190                           
  4191                           ;My_header\My_RTCC.h: 281: I2C_LCD_SetCursor(0, 0);
  4192  01156C  0E00               	movlw	0
  4193  01156E  0100               	movlb	0	; () banked
  4194  011570  6FD8               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  4195  011572  0E00               	movlw	0
  4196  011574  EC78  F098         	call	_I2C_LCD_SetCursor
  4197                           
  4198                           ;My_header\My_RTCC.h: 282: display_dec(20, edit_flag.flag.YY);
  4199  011578  0E00               	movlw	0
  4200  01157A  BBB5               	btfsc	_edit_flag& (0+255),5,b
  4201  01157C  0E01               	movlw	1
  4202  01157E  0100               	movlb	0	; () banked
  4203  011580  6FF7               	movwf	display_dec@edit& (0+255),b
  4204  011582  0E14               	movlw	20
  4205  011584  ECE4  F095         	call	_display_dec
  4206                           
  4207                           ;My_header\My_RTCC.h: 283: display_dec(ct->YY, edit_flag.flag.YY);
  4208  011588  0E00               	movlw	0
  4209  01158A  BBB5               	btfsc	_edit_flag& (0+255),5,b
  4210  01158C  0E01               	movlw	1
  4211  01158E  0100               	movlb	0	; () banked
  4212  011590  6FF7               	movwf	display_dec@edit& (0+255),b
  4213  011592  0101               	movlb	1	; () banked
  4214  011594  EE20 F006          	lfsr	2,6
  4215  011598  510B               	movf	display_time_1602@ct& (0+255),w,b
  4216  01159A  26D9               	addwf	fsr2l,f,c
  4217  01159C  510C               	movf	(display_time_1602@ct+1)& (0+255),w,b
  4218  01159E  22DA               	addwfc	fsr2h,f,c
  4219  0115A0  50DF               	movf	indf2,w,c
  4220  0115A2  ECE4  F095         	call	_display_dec
  4221                           
  4222                           ;My_header\My_RTCC.h: 284: I2C_LCD_Putc('/');
  4223  0115A6  0E2F               	movlw	47
  4224  0115A8  ECDB  F097         	call	_I2C_LCD_Putc
  4225                           
  4226                           ;My_header\My_RTCC.h: 285: display_dec(ct->MM, edit_flag.flag.MM);
  4227  0115AC  0E00               	movlw	0
  4228  0115AE  B9B5               	btfsc	_edit_flag& (0+255),4,b
  4229  0115B0  0E01               	movlw	1
  4230  0115B2  0100               	movlb	0	; () banked
  4231  0115B4  6FF7               	movwf	display_dec@edit& (0+255),b
  4232  0115B6  0101               	movlb	1	; () banked
  4233  0115B8  EE20 F005          	lfsr	2,5
  4234  0115BC  510B               	movf	display_time_1602@ct& (0+255),w,b
  4235  0115BE  26D9               	addwf	fsr2l,f,c
  4236  0115C0  510C               	movf	(display_time_1602@ct+1)& (0+255),w,b
  4237  0115C2  22DA               	addwfc	fsr2h,f,c
  4238  0115C4  50DF               	movf	indf2,w,c
  4239  0115C6  ECE4  F095         	call	_display_dec
  4240                           
  4241                           ;My_header\My_RTCC.h: 286: I2C_LCD_Putc('/');
  4242  0115CA  0E2F               	movlw	47
  4243  0115CC  ECDB  F097         	call	_I2C_LCD_Putc
  4244                           
  4245                           ;My_header\My_RTCC.h: 287: display_dec(ct->DD, edit_flag.flag.DD);
  4246  0115D0  0E00               	movlw	0
  4247  0115D2  B7B5               	btfsc	_edit_flag& (0+255),3,b
  4248  0115D4  0E01               	movlw	1
  4249  0115D6  0100               	movlb	0	; () banked
  4250  0115D8  6FF7               	movwf	display_dec@edit& (0+255),b
  4251  0115DA  0101               	movlb	1	; () banked
  4252  0115DC  EE20 F004          	lfsr	2,4
  4253  0115E0  510B               	movf	display_time_1602@ct& (0+255),w,b
  4254  0115E2  26D9               	addwf	fsr2l,f,c
  4255  0115E4  510C               	movf	(display_time_1602@ct+1)& (0+255),w,b
  4256  0115E6  22DA               	addwfc	fsr2h,f,c
  4257  0115E8  50DF               	movf	indf2,w,c
  4258  0115EA  ECE4  F095         	call	_display_dec
  4259                           
  4260                           ;My_header\My_RTCC.h: 288: I2C_LCD_Putc('(');
  4261  0115EE  0E28               	movlw	40
  4262  0115F0  ECDB  F097         	call	_I2C_LCD_Putc
  4263                           
  4264                           ;My_header\My_RTCC.h: 289: I2C_LCD_Puts(weekday_3char[ct->EE]);
  4265  0115F4  0101               	movlb	1	; () banked
  4266  0115F6  EE20 F003          	lfsr	2,3
  4267  0115FA  510B               	movf	display_time_1602@ct& (0+255),w,b
  4268  0115FC  26D9               	addwf	fsr2l,f,c
  4269  0115FE  510C               	movf	(display_time_1602@ct+1)& (0+255),w,b
  4270  011600  22DA               	addwfc	fsr2h,f,c
  4271  011602  50DF               	movf	indf2,w,c
  4272  011604  0101               	movlb	1	; () banked
  4273  011606  6F0F               	movwf	??_display_time_1602& (0+255),b
  4274  011608  0101               	movlb	1	; () banked
  4275  01160A  510F               	movf	??_display_time_1602& (0+255),w,b
  4276  01160C  0D04               	mullw	4
  4277  01160E  0E0E               	movlw	low _weekday_3char
  4278  011610  24F3               	addwf	prodl,w,c
  4279  011612  0100               	movlb	0	; () banked
  4280  011614  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  4281  011616  0EFF               	movlw	high _weekday_3char
  4282  011618  20F4               	addwfc	prodh,w,c
  4283  01161A  0100               	movlb	0	; () banked
  4284  01161C  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  4285  01161E  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  4286                           
  4287                           ;My_header\My_RTCC.h: 290: I2C_LCD_Putc(')');
  4288  011622  0E29               	movlw	41
  4289  011624  ECDB  F097         	call	_I2C_LCD_Putc
  4290                           
  4291                           ;My_header\My_RTCC.h: 291: I2C_LCD_SetCursor(8, 1);
  4292  011628  0E01               	movlw	1
  4293  01162A  0100               	movlb	0	; () banked
  4294  01162C  6FD8               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  4295  01162E  0E08               	movlw	8
  4296  011630  EC78  F098         	call	_I2C_LCD_SetCursor
  4297                           
  4298                           ;My_header\My_RTCC.h: 292: display_dec(ct->hh, edit_flag.flag.hh);
  4299  011634  0E00               	movlw	0
  4300  011636  B5B5               	btfsc	_edit_flag& (0+255),2,b
  4301  011638  0E01               	movlw	1
  4302  01163A  0100               	movlb	0	; () banked
  4303  01163C  6FF7               	movwf	display_dec@edit& (0+255),b
  4304  01163E  0101               	movlb	1	; () banked
  4305  011640  EE20 F002          	lfsr	2,2
  4306  011644  510B               	movf	display_time_1602@ct& (0+255),w,b
  4307  011646  26D9               	addwf	fsr2l,f,c
  4308  011648  510C               	movf	(display_time_1602@ct+1)& (0+255),w,b
  4309  01164A  22DA               	addwfc	fsr2h,f,c
  4310  01164C  50DF               	movf	indf2,w,c
  4311  01164E  ECE4  F095         	call	_display_dec
  4312                           
  4313                           ;My_header\My_RTCC.h: 293: if (colon) I2C_LCD_Putc(':');
  4314  011652  0100               	movlb	0	; () banked
  4315  011654  51B0               	movf	_colon& (0+255),w,b
  4316  011656  B4D8               	btfsc	status,2,c
  4317  011658  D004               	goto	l8310
  4318                           
  4319                           ; BSR set to: 0
  4320  01165A  0E3A               	movlw	58
  4321  01165C  ECDB  F097         	call	_I2C_LCD_Putc
  4322  011660  D003               	goto	l8312
  4323  011662                     l8310:
  4324                           
  4325                           ;My_header\My_RTCC.h: 294: else I2C_LCD_Putc(' ');
  4326  011662  0E20               	movlw	32
  4327  011664  ECDB  F097         	call	_I2C_LCD_Putc
  4328  011668                     l8312:
  4329                           
  4330                           ;My_header\My_RTCC.h: 295: display_dec(ct->mm, edit_flag.flag.mm);
  4331  011668  0E00               	movlw	0
  4332  01166A  B3B5               	btfsc	_edit_flag& (0+255),1,b
  4333  01166C  0E01               	movlw	1
  4334  01166E  0100               	movlb	0	; () banked
  4335  011670  6FF7               	movwf	display_dec@edit& (0+255),b
  4336  011672  0101               	movlb	1	; () banked
  4337  011674  EE20 F001          	lfsr	2,1
  4338  011678  510B               	movf	display_time_1602@ct& (0+255),w,b
  4339  01167A  26D9               	addwf	fsr2l,f,c
  4340  01167C  510C               	movf	(display_time_1602@ct+1)& (0+255),w,b
  4341  01167E  22DA               	addwfc	fsr2h,f,c
  4342  011680  50DF               	movf	indf2,w,c
  4343  011682  ECE4  F095         	call	_display_dec
  4344                           
  4345                           ;My_header\My_RTCC.h: 296: I2C_LCD_Putc('-');
  4346  011686  0E2D               	movlw	45
  4347  011688  ECDB  F097         	call	_I2C_LCD_Putc
  4348                           
  4349                           ;My_header\My_RTCC.h: 297: display_dec(ct->ss, edit_flag.flag.ss);
  4350  01168C  0E00               	movlw	0
  4351  01168E  B1B5               	btfsc	_edit_flag& (0+255),0,b
  4352  011690  0E01               	movlw	1
  4353  011692  0100               	movlb	0	; () banked
  4354  011694  6FF7               	movwf	display_dec@edit& (0+255),b
  4355  011696  C10B  FFD9         	movff	display_time_1602@ct,fsr2l
  4356  01169A  C10C  FFDA         	movff	display_time_1602@ct+1,fsr2h
  4357  01169E  50DF               	movf	indf2,w,c
  4358  0116A0  ECE4  F095         	call	_display_dec
  4359  0116A4  0012               	return		;funcret
  4360  0116A6                     __end_of_display_time_1602:
  4361                           	opt stack 0
  4362                           tblptru	equ	0xFF8
  4363                           tblptrh	equ	0xFF7
  4364                           tblptrl	equ	0xFF6
  4365                           tablat	equ	0xFF5
  4366                           prodh	equ	0xFF4
  4367                           prodl	equ	0xFF3
  4368                           intcon	equ	0xFF2
  4369                           postinc0	equ	0xFEE
  4370                           wreg	equ	0xFE8
  4371                           postdec1	equ	0xFE5
  4372                           fsr1l	equ	0xFE1
  4373                           indf2	equ	0xFDF
  4374                           postinc2	equ	0xFDE
  4375                           postdec2	equ	0xFDD
  4376                           fsr2h	equ	0xFDA
  4377                           fsr2l	equ	0xFD9
  4378                           status	equ	0xFD8
  4379                           
  4380 ;; *************** function _display_dec *****************
  4381 ;; Defined at:
  4382 ;;		line 251 in file "../My_header\My_RTCC.h"
  4383 ;; Parameters:    Size  Location     Type
  4384 ;;  dec             1    wreg     unsigned char 
  4385 ;;  edit            1   36[BANK0 ] unsigned char 
  4386 ;; Auto vars:     Size  Location     Type
  4387 ;;  dec             1   10[BANK1 ] unsigned char 
  4388 ;;  str            10    0[BANK1 ] unsigned char [10]
  4389 ;; Return value:  Size  Location     Type
  4390 ;;		None               void
  4391 ;; Registers used:
  4392 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4393 ;; Tracked objects:
  4394 ;;		On entry : 0/0
  4395 ;;		On exit  : 0/0
  4396 ;;		Unchanged: 0/0
  4397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4398 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4399 ;;      Locals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4401 ;;      Totals:         0       1      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4402 ;;Total ram usage:       12 bytes
  4403 ;; Hardware stack levels used:    1
  4404 ;; Hardware stack levels required when called:    7
  4405 ;; This function calls:
  4406 ;;		_I2C_LCD_Puts
  4407 ;;		_my_utoa
  4408 ;; This function is called by:
  4409 ;;		_display_time_1602
  4410 ;;		_display_time_0802
  4411 ;; This function uses a non-reentrant model
  4412 ;;
  4413                           
  4414                           	psect	text10
  4415  012BC8                     __ptext10:
  4416                           	opt stack 0
  4417  012BC8                     _display_dec:
  4418                           	opt stack 20
  4419                           
  4420                           ;incstack = 0
  4421                           ;display_dec@dec stored from wreg
  4422  012BC8  0101               	movlb	1	; () banked
  4423  012BCA  6F0A               	movwf	display_dec@dec& (0+255),b
  4424                           
  4425                           ;My_header\My_RTCC.h: 252: char str[10];
  4426                           ;My_header\My_RTCC.h: 253: my_utoa(str, dec, 2);
  4427  012BCC  0E00               	movlw	low display_dec@str
  4428  012BCE  0100               	movlb	0	; () banked
  4429  012BD0  6FEF               	movwf	my_utoa@str& (0+255),b
  4430  012BD2  0E01               	movlw	high display_dec@str
  4431  012BD4  0100               	movlb	0	; () banked
  4432  012BD6  6FF0               	movwf	(my_utoa@str+1)& (0+255),b
  4433  012BD8  C10A  F0F1         	movff	display_dec@dec,my_utoa@value
  4434  012BDC  0100               	movlb	0	; () banked
  4435  012BDE  6BF2               	clrf	(my_utoa@value+1)& (0+255),b
  4436  012BE0  0E02               	movlw	2
  4437  012BE2  0100               	movlb	0	; () banked
  4438  012BE4  6FF3               	movwf	my_utoa@digits& (0+255),b
  4439  012BE6  ECDD  F093         	call	_my_utoa	;wreg free
  4440                           
  4441                           ;My_header\My_RTCC.h: 254: if (edit && halfsec)I2C_LCD_Puts("  ");
  4442  012BEA  0100               	movlb	0	; () banked
  4443  012BEC  51F7               	movf	display_dec@edit& (0+255),w,b
  4444  012BEE  0100               	movlb	0	; () banked
  4445  012BF0  B4D8               	btfsc	status,2,c
  4446  012BF2  D00D               	goto	l8162
  4447                           
  4448                           ; BSR set to: 0
  4449  012BF4  0100               	movlb	0	; () banked
  4450  012BF6  51B6               	movf	_halfsec& (0+255),w,b
  4451  012BF8  B4D8               	btfsc	status,2,c
  4452  012BFA  D009               	goto	l8162
  4453                           
  4454                           ; BSR set to: 0
  4455  012BFC  0EF1               	movlw	low STR_1
  4456  012BFE  0100               	movlb	0	; () banked
  4457  012C00  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  4458  012C02  0EFF               	movlw	high STR_1
  4459  012C04  0100               	movlb	0	; () banked
  4460  012C06  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  4461  012C08  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  4462  012C0C  0012               	return	
  4463  012C0E                     l8162:
  4464                           
  4465                           ;My_header\My_RTCC.h: 255: else I2C_LCD_Puts(str);
  4466  012C0E  0E00               	movlw	low display_dec@str
  4467  012C10  0100               	movlb	0	; () banked
  4468  012C12  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  4469  012C14  0E01               	movlw	high display_dec@str
  4470  012C16  0100               	movlb	0	; () banked
  4471  012C18  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  4472  012C1A  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  4473  012C1E  0012               	return	
  4474  012C20                     __end_of_display_dec:
  4475                           	opt stack 0
  4476                           tblptru	equ	0xFF8
  4477                           tblptrh	equ	0xFF7
  4478                           tblptrl	equ	0xFF6
  4479                           tablat	equ	0xFF5
  4480                           prodh	equ	0xFF4
  4481                           prodl	equ	0xFF3
  4482                           intcon	equ	0xFF2
  4483                           postinc0	equ	0xFEE
  4484                           wreg	equ	0xFE8
  4485                           postdec1	equ	0xFE5
  4486                           fsr1l	equ	0xFE1
  4487                           indf2	equ	0xFDF
  4488                           postinc2	equ	0xFDE
  4489                           postdec2	equ	0xFDD
  4490                           fsr2h	equ	0xFDA
  4491                           fsr2l	equ	0xFD9
  4492                           status	equ	0xFD8
  4493                           
  4494 ;; *************** function _my_utoa *****************
  4495 ;; Defined at:
  4496 ;;		line 11 in file "../My_header\My_stdlib.h"
  4497 ;; Parameters:    Size  Location     Type
  4498 ;;  str             2   28[BANK0 ] PTR unsigned char 
  4499 ;;		 -> display_LCD@str(10), display_dec@str(10), 
  4500 ;;  value           2   30[BANK0 ] unsigned int 
  4501 ;;  digits          1   32[BANK0 ] unsigned char 
  4502 ;; Auto vars:     Size  Location     Type
  4503 ;;  v               2   34[BANK0 ] unsigned int 
  4504 ;;  d               1   33[BANK0 ] unsigned char 
  4505 ;; Return value:  Size  Location     Type
  4506 ;;		None               void
  4507 ;; Registers used:
  4508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4509 ;; Tracked objects:
  4510 ;;		On entry : 0/0
  4511 ;;		On exit  : 0/0
  4512 ;;		Unchanged: 0/0
  4513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4514 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4515 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4517 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4518 ;;Total ram usage:        8 bytes
  4519 ;; Hardware stack levels used:    1
  4520 ;; Hardware stack levels required when called:    5
  4521 ;; This function calls:
  4522 ;;		___lwdiv
  4523 ;;		___lwmod
  4524 ;; This function is called by:
  4525 ;;		_display_dec
  4526 ;;		_display_LCD
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           	psect	text11
  4531  0127BA                     __ptext11:
  4532                           	opt stack 0
  4533  0127BA                     _my_utoa:
  4534                           	opt stack 23
  4535                           
  4536                           ;My_header\My_stdlib.h: 12: uint16_t v;
  4537                           ;My_header\My_stdlib.h: 13: uint8_t d;
  4538                           ;My_header\My_stdlib.h: 14: while (digits--) {
  4539                           
  4540                           ;incstack = 0
  4541  0127BA  D036               	goto	l8130
  4542  0127BC                     l445:
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;My_header\My_stdlib.h: 15: v = value;
  4546  0127BC  C0F1  F0F5         	movff	my_utoa@value,my_utoa@v
  4547  0127C0  C0F2  F0F6         	movff	my_utoa@value+1,my_utoa@v+1
  4548                           
  4549                           ;My_header\My_stdlib.h: 16: d = digits;
  4550  0127C4  C0F3  F0F4         	movff	my_utoa@digits,my_utoa@d
  4551                           
  4552                           ;My_header\My_stdlib.h: 17: while (d--) {
  4553  0127C8  D00F               	goto	l8122
  4554  0127CA                     l8120:
  4555                           
  4556                           ; BSR set to: 0
  4557                           ;My_header\My_stdlib.h: 18: v /= 10;
  4558  0127CA  C0F5  F0E8         	movff	my_utoa@v,___lwdiv@dividend
  4559  0127CE  C0F6  F0E9         	movff	my_utoa@v+1,___lwdiv@dividend+1
  4560  0127D2  0E00               	movlw	0
  4561  0127D4  0100               	movlb	0	; () banked
  4562  0127D6  6FEB               	movwf	(___lwdiv@divisor+1)& (0+255),b
  4563  0127D8  0E0A               	movlw	10
  4564  0127DA  6FEA               	movwf	___lwdiv@divisor& (0+255),b
  4565  0127DC  ECA4  F094         	call	___lwdiv	;wreg free
  4566  0127E0  C0E8  F0F5         	movff	?___lwdiv,my_utoa@v
  4567  0127E4  C0E9  F0F6         	movff	?___lwdiv+1,my_utoa@v+1
  4568  0127E8                     l8122:
  4569  0127E8  0100               	movlb	0	; () banked
  4570  0127EA  07F4               	decf	my_utoa@d& (0+255),f,b
  4571  0127EC  0100               	movlb	0	; () banked
  4572  0127EE  29F4               	incf	my_utoa@d& (0+255),w,b
  4573  0127F0  A4D8               	btfss	status,2,c
  4574  0127F2  D7EB               	goto	l8120
  4575                           
  4576                           ; BSR set to: 0
  4577                           ;My_header\My_stdlib.h: 19: }
  4578                           ;My_header\My_stdlib.h: 20: v %= 10;
  4579                           
  4580                           ; BSR set to: 0
  4581  0127F4  C0F5  F0D3         	movff	my_utoa@v,___lwmod@dividend
  4582  0127F8  C0F6  F0D4         	movff	my_utoa@v+1,___lwmod@dividend+1
  4583  0127FC  0E00               	movlw	0
  4584  0127FE  0100               	movlb	0	; () banked
  4585  012800  6FD6               	movwf	(___lwmod@divisor+1)& (0+255),b
  4586  012802  0E0A               	movlw	10
  4587  012804  6FD5               	movwf	___lwmod@divisor& (0+255),b
  4588  012806  EC88  F095         	call	___lwmod	;wreg free
  4589  01280A  C0D3  F0F5         	movff	?___lwmod,my_utoa@v
  4590  01280E  C0D4  F0F6         	movff	?___lwmod+1,my_utoa@v+1
  4591                           
  4592                           ;My_header\My_stdlib.h: 21: *str++ = '0' + v;
  4593  012812  0100               	movlb	0	; () banked
  4594  012814  51F5               	movf	my_utoa@v& (0+255),w,b
  4595  012816  0F30               	addlw	48
  4596  012818  C0EF  FFD9         	movff	my_utoa@str,fsr2l
  4597  01281C  C0F0  FFDA         	movff	my_utoa@str+1,fsr2h
  4598  012820  6EDF               	movwf	indf2,c
  4599                           
  4600                           ; BSR set to: 0
  4601  012822  0100               	movlb	0	; () banked
  4602  012824  4BEF               	infsnz	my_utoa@str& (0+255),f,b
  4603  012826  2BF0               	incf	(my_utoa@str+1)& (0+255),f,b
  4604  012828                     l8130:
  4605  012828  0100               	movlb	0	; () banked
  4606  01282A  07F3               	decf	my_utoa@digits& (0+255),f,b
  4607  01282C  0100               	movlb	0	; () banked
  4608  01282E  29F3               	incf	my_utoa@digits& (0+255),w,b
  4609  012830  A4D8               	btfss	status,2,c
  4610  012832  D7C4               	goto	l445
  4611                           
  4612                           ; BSR set to: 0
  4613                           ;My_header\My_stdlib.h: 22: }
  4614                           ;My_header\My_stdlib.h: 23: *str = '\0';
  4615                           
  4616                           ; BSR set to: 0
  4617  012834  C0EF  FFD9         	movff	my_utoa@str,fsr2l
  4618  012838  C0F0  FFDA         	movff	my_utoa@str+1,fsr2h
  4619  01283C  0E00               	movlw	0
  4620  01283E  6EDF               	movwf	indf2,c
  4621                           
  4622                           ; BSR set to: 0
  4623  012840  0012               	return		;funcret
  4624  012842                     __end_of_my_utoa:
  4625                           	opt stack 0
  4626                           tblptru	equ	0xFF8
  4627                           tblptrh	equ	0xFF7
  4628                           tblptrl	equ	0xFF6
  4629                           tablat	equ	0xFF5
  4630                           prodh	equ	0xFF4
  4631                           prodl	equ	0xFF3
  4632                           intcon	equ	0xFF2
  4633                           postinc0	equ	0xFEE
  4634                           wreg	equ	0xFE8
  4635                           postdec1	equ	0xFE5
  4636                           fsr1l	equ	0xFE1
  4637                           indf2	equ	0xFDF
  4638                           postinc2	equ	0xFDE
  4639                           postdec2	equ	0xFDD
  4640                           fsr2h	equ	0xFDA
  4641                           fsr2l	equ	0xFD9
  4642                           status	equ	0xFD8
  4643                           
  4644 ;; *************** function ___lwmod *****************
  4645 ;; Defined at:
  4646 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  4647 ;; Parameters:    Size  Location     Type
  4648 ;;  dividend        2    0[BANK0 ] unsigned int 
  4649 ;;  divisor         2    2[BANK0 ] unsigned int 
  4650 ;; Auto vars:     Size  Location     Type
  4651 ;;  counter         1   31[COMRAM] unsigned char 
  4652 ;; Return value:  Size  Location     Type
  4653 ;;                  2    0[BANK0 ] unsigned int 
  4654 ;; Registers used:
  4655 ;;		wreg, status,2, status,0
  4656 ;; Tracked objects:
  4657 ;;		On entry : 0/0
  4658 ;;		On exit  : 0/0
  4659 ;;		Unchanged: 0/0
  4660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4661 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4662 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4664 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4665 ;;Total ram usage:        5 bytes
  4666 ;; Hardware stack levels used:    1
  4667 ;; Hardware stack levels required when called:    4
  4668 ;; This function calls:
  4669 ;;		Nothing
  4670 ;; This function is called by:
  4671 ;;		_my_utoa
  4672 ;;		_display_LCD
  4673 ;;		_ringbuf_put_num
  4674 ;;		_tx_sendn
  4675 ;; This function uses a non-reentrant model
  4676 ;;
  4677                           
  4678                           	psect	text12
  4679  012B10                     __ptext12:
  4680                           	opt stack 0
  4681  012B10                     ___lwmod:
  4682                           	opt stack 23
  4683                           
  4684                           ; BSR set to: 0
  4685                           ;incstack = 0
  4686  012B10  0100               	movlb	0	; () banked
  4687  012B12  51D5               	movf	___lwmod@divisor& (0+255),w,b
  4688  012B14  0100               	movlb	0	; () banked
  4689  012B16  11D6               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4690  012B18  B4D8               	btfsc	status,2,c
  4691  012B1A  D023               	goto	l1777
  4692                           
  4693                           ; BSR set to: 0
  4694  012B1C  0E01               	movlw	1
  4695  012B1E  6E20               	movwf	___lwmod@counter,c
  4696  012B20  D005               	goto	l7966
  4697  012B22                     l7964:
  4698                           
  4699                           ; BSR set to: 0
  4700  012B22  0100               	movlb	0	; () banked
  4701  012B24  90D8               	bcf	status,0,c
  4702  012B26  37D5               	rlcf	___lwmod@divisor& (0+255),f,b
  4703  012B28  37D6               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4704  012B2A  2A20               	incf	___lwmod@counter,f,c
  4705  012B2C                     l7966:
  4706                           
  4707                           ; BSR set to: 0
  4708  012B2C  0100               	movlb	0	; () banked
  4709  012B2E  AFD6               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4710  012B30  D7F8               	goto	l7964
  4711  012B32                     l7968:
  4712                           
  4713                           ; BSR set to: 0
  4714  012B32  0100               	movlb	0	; () banked
  4715  012B34  51D5               	movf	___lwmod@divisor& (0+255),w,b
  4716  012B36  0100               	movlb	0	; () banked
  4717  012B38  5DD3               	subwf	___lwmod@dividend& (0+255),w,b
  4718  012B3A  0100               	movlb	0	; () banked
  4719  012B3C  51D6               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4720  012B3E  0100               	movlb	0	; () banked
  4721  012B40  59D4               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4722  012B42  A0D8               	btfss	status,0,c
  4723  012B44  D008               	goto	l7972
  4724                           
  4725                           ; BSR set to: 0
  4726  012B46  0100               	movlb	0	; () banked
  4727  012B48  51D5               	movf	___lwmod@divisor& (0+255),w,b
  4728  012B4A  0100               	movlb	0	; () banked
  4729  012B4C  5FD3               	subwf	___lwmod@dividend& (0+255),f,b
  4730  012B4E  0100               	movlb	0	; () banked
  4731  012B50  51D6               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4732  012B52  0100               	movlb	0	; () banked
  4733  012B54  5BD4               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4734  012B56                     l7972:
  4735                           
  4736                           ; BSR set to: 0
  4737  012B56  0100               	movlb	0	; () banked
  4738  012B58  90D8               	bcf	status,0,c
  4739  012B5A  33D6               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4740  012B5C  33D5               	rrcf	___lwmod@divisor& (0+255),f,b
  4741                           
  4742                           ; BSR set to: 0
  4743  012B5E  2E20               	decfsz	___lwmod@counter,f,c
  4744  012B60  D7E8               	goto	l7968
  4745  012B62                     l1777:
  4746                           
  4747                           ; BSR set to: 0
  4748  012B62  C0D3  F0D3         	movff	___lwmod@dividend,?___lwmod
  4749  012B66  C0D4  F0D4         	movff	___lwmod@dividend+1,?___lwmod+1
  4750                           
  4751                           ; BSR set to: 0
  4752  012B6A  0012               	return		;funcret
  4753  012B6C                     __end_of___lwmod:
  4754                           	opt stack 0
  4755                           tblptru	equ	0xFF8
  4756                           tblptrh	equ	0xFF7
  4757                           tblptrl	equ	0xFF6
  4758                           tablat	equ	0xFF5
  4759                           prodh	equ	0xFF4
  4760                           prodl	equ	0xFF3
  4761                           intcon	equ	0xFF2
  4762                           postinc0	equ	0xFEE
  4763                           wreg	equ	0xFE8
  4764                           postdec1	equ	0xFE5
  4765                           fsr1l	equ	0xFE1
  4766                           indf2	equ	0xFDF
  4767                           postinc2	equ	0xFDE
  4768                           postdec2	equ	0xFDD
  4769                           fsr2h	equ	0xFDA
  4770                           fsr2l	equ	0xFD9
  4771                           status	equ	0xFD8
  4772                           
  4773 ;; *************** function _I2C_LCD_Putc *****************
  4774 ;; Defined at:
  4775 ;;		line 118 in file "../My_header\My_I2C.h"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;  c               1    wreg     unsigned char 
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;  c               1    3[BANK0 ] unsigned char 
  4780 ;;  ans             1    4[BANK0 ] unsigned char 
  4781 ;; Return value:  Size  Location     Type
  4782 ;;		None               void
  4783 ;; Registers used:
  4784 ;;		wreg, status,2, status,0, cstack
  4785 ;; Tracked objects:
  4786 ;;		On entry : 0/0
  4787 ;;		On exit  : 0/0
  4788 ;;		Unchanged: 0/0
  4789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4791 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4793 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4794 ;;Total ram usage:        2 bytes
  4795 ;; Hardware stack levels used:    1
  4796 ;; Hardware stack levels required when called:    6
  4797 ;; This function calls:
  4798 ;;		_I2C_Send
  4799 ;;		_I2C_Start
  4800 ;;		_I2C_Stop
  4801 ;; This function is called by:
  4802 ;;		_display_time_1602
  4803 ;;		_display_LCD
  4804 ;;		_display_time_0802
  4805 ;; This function uses a non-reentrant model
  4806 ;;
  4807                           
  4808                           	psect	text13
  4809  012FB6                     __ptext13:
  4810                           	opt stack 0
  4811  012FB6                     _I2C_LCD_Putc:
  4812                           	opt stack 21
  4813                           
  4814                           ; BSR set to: 0
  4815                           ;incstack = 0
  4816                           ;I2C_LCD_Putc@c stored from wreg
  4817  012FB6  0100               	movlb	0	; () banked
  4818  012FB8  6FD6               	movwf	I2C_LCD_Putc@c& (0+255),b
  4819                           
  4820                           ;My_header\My_I2C.h: 119: uint8_t ans;
  4821                           ;My_header\My_I2C.h: 121: ans = I2C_Start(0x3E, 0);
  4822  012FBA  0E00               	movlw	0
  4823  012FBC  0100               	movlb	0	; () banked
  4824  012FBE  6FD4               	movwf	I2C_Start@rw& (0+255),b
  4825  012FC0  0E3E               	movlw	62
  4826  012FC2  EC49  F098         	call	_I2C_Start
  4827  012FC6  0100               	movlb	0	; () banked
  4828  012FC8  6FD7               	movwf	I2C_LCD_Putc@ans& (0+255),b
  4829                           
  4830                           ; BSR set to: 0
  4831                           ;My_header\My_I2C.h: 122: if (ans == 0) {
  4832  012FCA  0100               	movlb	0	; () banked
  4833  012FCC  51D7               	movf	I2C_LCD_Putc@ans& (0+255),w,b
  4834  012FCE  0100               	movlb	0	; () banked
  4835  012FD0  A4D8               	btfss	status,2,c
  4836  012FD2  D007               	goto	l345
  4837                           
  4838                           ; BSR set to: 0
  4839                           ;My_header\My_I2C.h: 124: I2C_Send(0b11000000);
  4840  012FD4  0EC0               	movlw	192
  4841  012FD6  EC80  F099         	call	_I2C_Send
  4842                           
  4843                           ;My_header\My_I2C.h: 125: I2C_Send(c);
  4844  012FDA  0100               	movlb	0	; () banked
  4845  012FDC  51D6               	movf	I2C_LCD_Putc@c& (0+255),w,b
  4846  012FDE  EC80  F099         	call	_I2C_Send
  4847  012FE2                     l345:
  4848                           
  4849                           ;My_header\My_I2C.h: 126: }
  4850                           ;My_header\My_I2C.h: 127: I2C_Stop();
  4851  012FE2  ECAB  F099         	call	_I2C_Stop	;wreg free
  4852                           
  4853                           ;My_header\My_I2C.h: 128: _delay((unsigned long)((26)*(48000000/4000000.0)));
  4854  012FE6  0E68               	movlw	104
  4855  012FE8                     u10037:
  4856  012FE8  2EE8               	decfsz	wreg,f,c
  4857  012FEA  D7FE               	goto	u10037
  4858  012FEC  0012               	return		;funcret
  4859  012FEE                     __end_of_I2C_LCD_Putc:
  4860                           	opt stack 0
  4861                           tblptru	equ	0xFF8
  4862                           tblptrh	equ	0xFF7
  4863                           tblptrl	equ	0xFF6
  4864                           tablat	equ	0xFF5
  4865                           prodh	equ	0xFF4
  4866                           prodl	equ	0xFF3
  4867                           intcon	equ	0xFF2
  4868                           postinc0	equ	0xFEE
  4869                           wreg	equ	0xFE8
  4870                           postdec1	equ	0xFE5
  4871                           fsr1l	equ	0xFE1
  4872                           indf2	equ	0xFDF
  4873                           postinc2	equ	0xFDE
  4874                           postdec2	equ	0xFDD
  4875                           fsr2h	equ	0xFDA
  4876                           fsr2l	equ	0xFD9
  4877                           status	equ	0xFD8
  4878                           
  4879 ;; *************** function _display_port *****************
  4880 ;; Defined at:
  4881 ;;		line 170 in file "tasks.h"
  4882 ;; Parameters:    Size  Location     Type
  4883 ;;		None
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;		None
  4886 ;; Return value:  Size  Location     Type
  4887 ;;		None               void
  4888 ;; Registers used:
  4889 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4890 ;; Tracked objects:
  4891 ;;		On entry : 0/0
  4892 ;;		On exit  : 0/0
  4893 ;;		Unchanged: 0/0
  4894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4899 ;;Total ram usage:        0 bytes
  4900 ;; Hardware stack levels used:    1
  4901 ;; Hardware stack levels required when called:    8
  4902 ;; This function calls:
  4903 ;;		_I2C_LCD_Puts
  4904 ;;		_I2C_LCD_SetCursor
  4905 ;; This function is called by:
  4906 ;;		_display_LCD
  4907 ;; This function uses a non-reentrant model
  4908 ;;
  4909                           
  4910                           	psect	text14
  4911  011C7A                     __ptext14:
  4912                           	opt stack 0
  4913  011C7A                     _display_port:
  4914                           	opt stack 20
  4915                           
  4916                           ;tasks.h: 171: I2C_LCD_SetCursor(0, 0);
  4917                           
  4918                           ;incstack = 0
  4919  011C7A  0E00               	movlw	0
  4920  011C7C  0100               	movlb	0	; () banked
  4921  011C7E  6FD8               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  4922  011C80  0E00               	movlw	0
  4923  011C82  EC78  F098         	call	_I2C_LCD_SetCursor
  4924                           
  4925                           ;tasks.h: 172: switch (print_port) {
  4926  011C86  D057               	goto	l8530
  4927  011C88                     l8510:
  4928                           
  4929                           ;tasks.h: 174: if (auto_cut_ON[print_port]) I2C_LCD_Puts("Left Port");
  4930  011C88  503B               	movf	_print_port,w,c
  4931  011C8A  0D01               	mullw	1
  4932  011C8C  0E7B               	movlw	low _auto_cut_ON
  4933  011C8E  24F3               	addwf	prodl,w,c
  4934  011C90  6ED9               	movwf	fsr2l,c
  4935  011C92  0E00               	movlw	high _auto_cut_ON
  4936  011C94  20F4               	addwfc	prodh,w,c
  4937  011C96  6EDA               	movwf	fsr2h,c
  4938  011C98  50DF               	movf	indf2,w,c
  4939  011C9A  B4D8               	btfsc	status,2,c
  4940  011C9C  D009               	goto	l8514
  4941  011C9E  0EDA               	movlw	low STR_2
  4942  011CA0  0100               	movlb	0	; () banked
  4943  011CA2  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  4944  011CA4  0EFF               	movlw	high STR_2
  4945  011CA6  0100               	movlb	0	; () banked
  4946  011CA8  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  4947  011CAA  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  4948  011CAE  0012               	return	
  4949  011CB0                     l8514:
  4950                           
  4951                           ;tasks.h: 175: else I2C_LCD_Puts("LEFT PORT");
  4952  011CB0  0ED0               	movlw	low STR_3
  4953  011CB2  0100               	movlb	0	; () banked
  4954  011CB4  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  4955  011CB6  0EFF               	movlw	high STR_3
  4956  011CB8  0100               	movlb	0	; () banked
  4957  011CBA  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  4958  011CBC  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  4959                           
  4960                           ;tasks.h: 176: break;
  4961  011CC0  0012               	return	
  4962  011CC2                     l8516:
  4963                           
  4964                           ;tasks.h: 178: if (auto_cut_ON[print_port]) I2C_LCD_Puts("Center Port");
  4965  011CC2  503B               	movf	_print_port,w,c
  4966  011CC4  0D01               	mullw	1
  4967  011CC6  0E7B               	movlw	low _auto_cut_ON
  4968  011CC8  24F3               	addwf	prodl,w,c
  4969  011CCA  6ED9               	movwf	fsr2l,c
  4970  011CCC  0E00               	movlw	high _auto_cut_ON
  4971  011CCE  20F4               	addwfc	prodh,w,c
  4972  011CD0  6EDA               	movwf	fsr2h,c
  4973  011CD2  50DF               	movf	indf2,w,c
  4974  011CD4  B4D8               	btfsc	status,2,c
  4975  011CD6  D009               	goto	l8520
  4976  011CD8  0EAE               	movlw	low STR_4
  4977  011CDA  0100               	movlb	0	; () banked
  4978  011CDC  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  4979  011CDE  0EFF               	movlw	high STR_4
  4980  011CE0  0100               	movlb	0	; () banked
  4981  011CE2  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  4982  011CE4  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  4983  011CE8  0012               	return	
  4984  011CEA                     l8520:
  4985                           
  4986                           ;tasks.h: 179: else I2C_LCD_Puts("CENTER PORT");
  4987  011CEA  0EA2               	movlw	low STR_5
  4988  011CEC  0100               	movlb	0	; () banked
  4989  011CEE  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  4990  011CF0  0EFF               	movlw	high STR_5
  4991  011CF2  0100               	movlb	0	; () banked
  4992  011CF4  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  4993  011CF6  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  4994                           
  4995                           ;tasks.h: 180: break;
  4996  011CFA  0012               	return	
  4997  011CFC                     l8522:
  4998                           
  4999                           ;tasks.h: 182: if (auto_cut_ON[print_port]) I2C_LCD_Puts("Right Port");
  5000  011CFC  503B               	movf	_print_port,w,c
  5001  011CFE  0D01               	mullw	1
  5002  011D00  0E7B               	movlw	low _auto_cut_ON
  5003  011D02  24F3               	addwf	prodl,w,c
  5004  011D04  6ED9               	movwf	fsr2l,c
  5005  011D06  0E00               	movlw	high _auto_cut_ON
  5006  011D08  20F4               	addwfc	prodh,w,c
  5007  011D0A  6EDA               	movwf	fsr2h,c
  5008  011D0C  50DF               	movf	indf2,w,c
  5009  011D0E  B4D8               	btfsc	status,2,c
  5010  011D10  D009               	goto	l8526
  5011  011D12  0EC5               	movlw	low STR_6
  5012  011D14  0100               	movlb	0	; () banked
  5013  011D16  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  5014  011D18  0EFF               	movlw	high STR_6
  5015  011D1A  0100               	movlb	0	; () banked
  5016  011D1C  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  5017  011D1E  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  5018  011D22  0012               	return	
  5019  011D24                     l8526:
  5020                           
  5021                           ;tasks.h: 183: else I2C_LCD_Puts("RIGHT PORT");
  5022  011D24  0EBA               	movlw	low STR_7
  5023  011D26  0100               	movlb	0	; () banked
  5024  011D28  6FD6               	movwf	I2C_LCD_Puts@s& (0+255),b
  5025  011D2A  0EFF               	movlw	high STR_7
  5026  011D2C  0100               	movlb	0	; () banked
  5027  011D2E  6FD7               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  5028  011D30  EC96  F093         	call	_I2C_LCD_Puts	;wreg free
  5029                           
  5030                           ;tasks.h: 185: }
  5031                           
  5032                           ;tasks.h: 184: break;
  5033  011D34  0012               	return	
  5034  011D36                     l8530:
  5035  011D36  503B               	movf	_print_port,w,c
  5036                           
  5037                           ; Switch size 1, requested type "space"
  5038                           ; Number of cases is 3, Range of values is 0 to 2
  5039                           ; switch strategies available:
  5040                           ; Name         Instructions Cycles
  5041                           ; simple_byte           10     6 (average)
  5042                           ;	Chosen strategy is simple_byte
  5043  011D38  0A00               	xorlw	0	; case 0
  5044  011D3A  B4D8               	btfsc	status,2,c
  5045  011D3C  D7A5               	goto	l8510
  5046  011D3E  0A01               	xorlw	1	; case 1
  5047  011D40  B4D8               	btfsc	status,2,c
  5048  011D42  D7BF               	goto	l8516
  5049  011D44  0A03               	xorlw	3	; case 2
  5050  011D46  A4D8               	btfss	status,2,c
  5051  011D48  0012               	return	
  5052  011D4A  D7D8               	goto	l8522
  5053  011D4C                     __end_of_display_port:
  5054                           	opt stack 0
  5055                           tblptru	equ	0xFF8
  5056                           tblptrh	equ	0xFF7
  5057                           tblptrl	equ	0xFF6
  5058                           tablat	equ	0xFF5
  5059                           prodh	equ	0xFF4
  5060                           prodl	equ	0xFF3
  5061                           intcon	equ	0xFF2
  5062                           postinc0	equ	0xFEE
  5063                           wreg	equ	0xFE8
  5064                           postdec1	equ	0xFE5
  5065                           fsr1l	equ	0xFE1
  5066                           indf2	equ	0xFDF
  5067                           postinc2	equ	0xFDE
  5068                           postdec2	equ	0xFDD
  5069                           fsr2h	equ	0xFDA
  5070                           fsr2l	equ	0xFD9
  5071                           status	equ	0xFD8
  5072                           
  5073 ;; *************** function _I2C_LCD_SetCursor *****************
  5074 ;; Defined at:
  5075 ;;		line 112 in file "../My_header\My_I2C.h"
  5076 ;; Parameters:    Size  Location     Type
  5077 ;;  col             1    wreg     unsigned char 
  5078 ;;  row             1    5[BANK0 ] unsigned char 
  5079 ;; Auto vars:     Size  Location     Type
  5080 ;;  col             1    8[BANK0 ] unsigned char 
  5081 ;;  row_offsets     2    6[BANK0 ] unsigned char [2]
  5082 ;; Return value:  Size  Location     Type
  5083 ;;		None               void
  5084 ;; Registers used:
  5085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5086 ;; Tracked objects:
  5087 ;;		On entry : 0/0
  5088 ;;		On exit  : 0/0
  5089 ;;		Unchanged: 0/0
  5090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5091 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5092 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5094 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5095 ;;Total ram usage:        4 bytes
  5096 ;; Hardware stack levels used:    1
  5097 ;; Hardware stack levels required when called:    7
  5098 ;; This function calls:
  5099 ;;		_I2C_LCD_Command
  5100 ;; This function is called by:
  5101 ;;		_display_time_1602
  5102 ;;		_display_port
  5103 ;;		_display_LCD
  5104 ;;		_sleep_loop
  5105 ;;		_display_time_0802
  5106 ;; This function uses a non-reentrant model
  5107 ;;
  5108                           
  5109                           	psect	text15
  5110  0130F0                     __ptext15:
  5111                           	opt stack 0
  5112  0130F0                     _I2C_LCD_SetCursor:
  5113                           	opt stack 22
  5114                           
  5115                           ;incstack = 0
  5116                           ;I2C_LCD_SetCursor@col stored from wreg
  5117  0130F0  0100               	movlb	0	; () banked
  5118  0130F2  6FDB               	movwf	I2C_LCD_SetCursor@col& (0+255),b
  5119                           
  5120                           ;My_header\My_I2C.h: 113: uint8_t row_offsets[] = {0x00, 0x40};
  5121  0130F4  C0FB  F0D9         	movff	I2C_LCD_SetCursor@F8672,I2C_LCD_SetCursor@row_offsets
  5122  0130F8  C0FC  F0DA         	movff	I2C_LCD_SetCursor@F8672+1,I2C_LCD_SetCursor@row_offsets+1
  5123                           
  5124                           ;My_header\My_I2C.h: 115: I2C_LCD_Command(0x80 | (col + row_offsets[row]));
  5125  0130FC  0100               	movlb	0	; () banked
  5126  0130FE  51D8               	movf	I2C_LCD_SetCursor@row& (0+255),w,b
  5127  013100  0D01               	mullw	1
  5128  013102  0ED9               	movlw	low I2C_LCD_SetCursor@row_offsets
  5129  013104  24F3               	addwf	prodl,w,c
  5130  013106  6ED9               	movwf	fsr2l,c
  5131  013108  0E00               	movlw	high I2C_LCD_SetCursor@row_offsets
  5132  01310A  20F4               	addwfc	prodh,w,c
  5133  01310C  6EDA               	movwf	fsr2h,c
  5134  01310E  50DF               	movf	indf2,w,c
  5135  013110  0100               	movlb	0	; () banked
  5136  013112  25DB               	addwf	I2C_LCD_SetCursor@col& (0+255),w,b
  5137  013114  0980               	iorlw	128
  5138  013116  ECF7  F097         	call	_I2C_LCD_Command
  5139  01311A  0012               	return		;funcret
  5140  01311C                     __end_of_I2C_LCD_SetCursor:
  5141                           	opt stack 0
  5142                           tblptru	equ	0xFF8
  5143                           tblptrh	equ	0xFF7
  5144                           tblptrl	equ	0xFF6
  5145                           tablat	equ	0xFF5
  5146                           prodh	equ	0xFF4
  5147                           prodl	equ	0xFF3
  5148                           intcon	equ	0xFF2
  5149                           postinc0	equ	0xFEE
  5150                           wreg	equ	0xFE8
  5151                           postdec1	equ	0xFE5
  5152                           fsr1l	equ	0xFE1
  5153                           indf2	equ	0xFDF
  5154                           postinc2	equ	0xFDE
  5155                           postdec2	equ	0xFDD
  5156                           fsr2h	equ	0xFDA
  5157                           fsr2l	equ	0xFD9
  5158                           status	equ	0xFD8
  5159                           
  5160 ;; *************** function _I2C_LCD_Puts *****************
  5161 ;; Defined at:
  5162 ;;		line 131 in file "../My_header\My_I2C.h"
  5163 ;; Parameters:    Size  Location     Type
  5164 ;;  s               2    3[BANK0 ] PTR const unsigned char 
  5165 ;;		 -> STR_20(9), STR_19(17), STR_18(13), STR_17(16), 
  5166 ;;		 -> STR_16(20), STR_15(19), STR_14(2), STR_13(3), 
  5167 ;;		 -> STR_12(3), STR_11(3), STR_10(4), display_LCD@str(10), 
  5168 ;;		 -> STR_9(13), STR_8(17), STR_7(11), STR_6(11), 
  5169 ;;		 -> STR_5(12), STR_4(12), STR_3(10), STR_2(10), 
  5170 ;;		 -> weekday_3char(28), STR_1(3), display_dec@str(10), 
  5171 ;; Auto vars:     Size  Location     Type
  5172 ;;  ans             2    6[BANK0 ] int 
  5173 ;; Return value:  Size  Location     Type
  5174 ;;		None               void
  5175 ;; Registers used:
  5176 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5177 ;; Tracked objects:
  5178 ;;		On entry : 0/0
  5179 ;;		On exit  : 0/0
  5180 ;;		Unchanged: 0/0
  5181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5182 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5183 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5184 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5185 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5186 ;;Total ram usage:        5 bytes
  5187 ;; Hardware stack levels used:    1
  5188 ;; Hardware stack levels required when called:    6
  5189 ;; This function calls:
  5190 ;;		_I2C_Send
  5191 ;;		_I2C_Start
  5192 ;;		_I2C_Stop
  5193 ;; This function is called by:
  5194 ;;		_display_dec
  5195 ;;		_display_time_1602
  5196 ;;		_display_port
  5197 ;;		_display_LCD
  5198 ;;		_sleep_loop
  5199 ;;		_display_time_0802
  5200 ;; This function uses a non-reentrant model
  5201 ;;
  5202                           
  5203                           	psect	text16
  5204  01272C                     __ptext16:
  5205                           	opt stack 0
  5206  01272C                     _I2C_LCD_Puts:
  5207                           	opt stack 23
  5208                           
  5209                           ;My_header\My_I2C.h: 132: int ans;
  5210                           ;My_header\My_I2C.h: 134: ans = I2C_Start(0x3E, 0);
  5211                           
  5212                           ;incstack = 0
  5213  01272C  0E00               	movlw	0
  5214  01272E  0100               	movlb	0	; () banked
  5215  012730  6FD4               	movwf	I2C_Start@rw& (0+255),b
  5216  012732  0E3E               	movlw	62
  5217  012734  EC49  F098         	call	_I2C_Start
  5218  012738  0100               	movlb	0	; () banked
  5219  01273A  6FD8               	movwf	??_I2C_LCD_Puts& (0+255),b
  5220  01273C  0100               	movlb	0	; () banked
  5221  01273E  51D8               	movf	??_I2C_LCD_Puts& (0+255),w,b
  5222  012740  0100               	movlb	0	; () banked
  5223  012742  6FD9               	movwf	I2C_LCD_Puts@ans& (0+255),b
  5224  012744  6BDA               	clrf	(I2C_LCD_Puts@ans+1)& (0+255),b
  5225                           
  5226                           ; BSR set to: 0
  5227                           ;My_header\My_I2C.h: 135: if (ans == 0) {
  5228  012746  0100               	movlb	0	; () banked
  5229  012748  51D9               	movf	I2C_LCD_Puts@ans& (0+255),w,b
  5230  01274A  0100               	movlb	0	; () banked
  5231  01274C  11DA               	iorwf	(I2C_LCD_Puts@ans+1)& (0+255),w,b
  5232  01274E  A4D8               	btfss	status,2,c
  5233  012750  D031               	goto	l7998
  5234                           
  5235                           ; BSR set to: 0
  5236                           ;My_header\My_I2C.h: 136: I2C_Send(0b01000000);
  5237  012752  0E40               	movlw	64
  5238  012754  EC80  F099         	call	_I2C_Send
  5239                           
  5240                           ;My_header\My_I2C.h: 137: while (*s) {
  5241  012758  D019               	goto	l7996
  5242  01275A                     l7990:
  5243                           
  5244                           ;My_header\My_I2C.h: 138: I2C_Send(*s++);
  5245  01275A  C0D6  FFF6         	movff	I2C_LCD_Puts@s,tblptrl
  5246  01275E  C0D7  FFF7         	movff	I2C_LCD_Puts@s+1,tblptrh
  5247  012762  0E00               	movlw	low (__mediumconst shr (0+16))
  5248  012764  6EF8               	movwf	tblptru,c
  5249  012766  0E0E               	movlw	(high __ramtop+-1)
  5250  012768  64F7               	cpfsgt	tblptrh,c
  5251  01276A  D003               	bra	u8457
  5252  01276C  0008               	tblrd		*
  5253  01276E  50F5               	movf	tablat,w,c
  5254  012770  D005               	bra	u8450
  5255  012772                     u8457:
  5256  012772  CFF6 FFE9          	movff	tblptrl,fsr0l
  5257  012776  CFF7 FFEA          	movff	tblptrh,fsr0h
  5258  01277A  50EF               	movf	indf0,w,c
  5259  01277C                     u8450:
  5260  01277C  EC80  F099         	call	_I2C_Send
  5261  012780  0100               	movlb	0	; () banked
  5262  012782  4BD6               	infsnz	I2C_LCD_Puts@s& (0+255),f,b
  5263  012784  2BD7               	incf	(I2C_LCD_Puts@s+1)& (0+255),f,b
  5264                           
  5265                           ; BSR set to: 0
  5266                           ;My_header\My_I2C.h: 139: _delay((unsigned long)((26)*(48000000/4000000.0)));
  5267  012786  0E68               	movlw	104
  5268  012788                     u10047:
  5269  012788  2EE8               	decfsz	wreg,f,c
  5270  01278A  D7FE               	goto	u10047
  5271  01278C                     l7996:
  5272  01278C  C0D6  FFF6         	movff	I2C_LCD_Puts@s,tblptrl
  5273  012790  C0D7  FFF7         	movff	I2C_LCD_Puts@s+1,tblptrh
  5274  012794  0E00               	movlw	low (__mediumconst shr (0+16))
  5275  012796  6EF8               	movwf	tblptru,c
  5276  012798  0E0E               	movlw	(high __ramtop+-1)
  5277  01279A  64F7               	cpfsgt	tblptrh,c
  5278  01279C  D003               	bra	u8467
  5279  01279E  0008               	tblrd		*
  5280  0127A0  50F5               	movf	tablat,w,c
  5281  0127A2  D005               	bra	u8460
  5282  0127A4                     u8467:
  5283  0127A4  CFF6 FFE9          	movff	tblptrl,fsr0l
  5284  0127A8  CFF7 FFEA          	movff	tblptrh,fsr0h
  5285  0127AC  50EF               	movf	indf0,w,c
  5286  0127AE                     u8460:
  5287  0127AE  0900               	iorlw	0
  5288  0127B0  A4D8               	btfss	status,2,c
  5289  0127B2  D7D3               	goto	l7990
  5290  0127B4                     l7998:
  5291                           
  5292                           ;My_header\My_I2C.h: 140: }
  5293                           ;My_header\My_I2C.h: 141: }
  5294                           ;My_header\My_I2C.h: 142: I2C_Stop();
  5295  0127B4  ECAB  F099         	call	_I2C_Stop	;wreg free
  5296  0127B8  0012               	return		;funcret
  5297  0127BA                     __end_of_I2C_LCD_Puts:
  5298                           	opt stack 0
  5299                           tblptru	equ	0xFF8
  5300                           tblptrh	equ	0xFF7
  5301                           tblptrl	equ	0xFF6
  5302                           tablat	equ	0xFF5
  5303                           prodh	equ	0xFF4
  5304                           prodl	equ	0xFF3
  5305                           intcon	equ	0xFF2
  5306                           indf0	equ	0xFEF
  5307                           postinc0	equ	0xFEE
  5308                           fsr0h	equ	0xFEA
  5309                           fsr0l	equ	0xFE9
  5310                           wreg	equ	0xFE8
  5311                           postdec1	equ	0xFE5
  5312                           fsr1l	equ	0xFE1
  5313                           indf2	equ	0xFDF
  5314                           postinc2	equ	0xFDE
  5315                           postdec2	equ	0xFDD
  5316                           fsr2h	equ	0xFDA
  5317                           fsr2l	equ	0xFD9
  5318                           status	equ	0xFD8
  5319                           
  5320 ;; *************** function ___llmod *****************
  5321 ;; Defined at:
  5322 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\llmod.c"
  5323 ;; Parameters:    Size  Location     Type
  5324 ;;  dividend        4   13[BANK0 ] unsigned long 
  5325 ;;  divisor         4   17[BANK0 ] unsigned long 
  5326 ;; Auto vars:     Size  Location     Type
  5327 ;;  counter         1   31[COMRAM] unsigned char 
  5328 ;; Return value:  Size  Location     Type
  5329 ;;                  4   13[BANK0 ] unsigned long 
  5330 ;; Registers used:
  5331 ;;		wreg, status,2, status,0
  5332 ;; Tracked objects:
  5333 ;;		On entry : 0/0
  5334 ;;		On exit  : 0/0
  5335 ;;		Unchanged: 0/0
  5336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5337 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5338 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5340 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5341 ;;Total ram usage:        9 bytes
  5342 ;; Hardware stack levels used:    1
  5343 ;; Hardware stack levels required when called:    4
  5344 ;; This function calls:
  5345 ;;		Nothing
  5346 ;; This function is called by:
  5347 ;;		_display_LCD
  5348 ;;		_my_utoa32
  5349 ;; This function uses a non-reentrant model
  5350 ;;
  5351                           
  5352                           	psect	text17
  5353  012698                     __ptext17:
  5354                           	opt stack 0
  5355  012698                     ___llmod:
  5356                           	opt stack 24
  5357                           
  5358                           ;incstack = 0
  5359  012698  0100               	movlb	0	; () banked
  5360  01269A  51E4               	movf	___llmod@divisor& (0+255),w,b
  5361  01269C  0100               	movlb	0	; () banked
  5362  01269E  11E5               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  5363  0126A0  0100               	movlb	0	; () banked
  5364  0126A2  11E6               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  5365  0126A4  0100               	movlb	0	; () banked
  5366  0126A6  11E7               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  5367  0126A8  B4D8               	btfsc	status,2,c
  5368  0126AA  D037               	goto	l1724
  5369                           
  5370                           ; BSR set to: 0
  5371  0126AC  0E01               	movlw	1
  5372  0126AE  6E20               	movwf	___llmod@counter,c
  5373  0126B0  D007               	goto	l8544
  5374  0126B2                     l8542:
  5375                           
  5376                           ; BSR set to: 0
  5377  0126B2  0100               	movlb	0	; () banked
  5378  0126B4  90D8               	bcf	status,0,c
  5379  0126B6  37E4               	rlcf	___llmod@divisor& (0+255),f,b
  5380  0126B8  37E5               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  5381  0126BA  37E6               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  5382  0126BC  37E7               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  5383  0126BE  2A20               	incf	___llmod@counter,f,c
  5384  0126C0                     l8544:
  5385                           
  5386                           ; BSR set to: 0
  5387  0126C0  0100               	movlb	0	; () banked
  5388  0126C2  AFE7               	btfss	(___llmod@divisor+3)& (0+255),7,b
  5389  0126C4  D7F6               	goto	l8542
  5390  0126C6                     l8546:
  5391                           
  5392                           ; BSR set to: 0
  5393  0126C6  0100               	movlb	0	; () banked
  5394  0126C8  51E4               	movf	___llmod@divisor& (0+255),w,b
  5395  0126CA  0100               	movlb	0	; () banked
  5396  0126CC  5DE0               	subwf	___llmod@dividend& (0+255),w,b
  5397  0126CE  0100               	movlb	0	; () banked
  5398  0126D0  51E5               	movf	(___llmod@divisor+1)& (0+255),w,b
  5399  0126D2  0100               	movlb	0	; () banked
  5400  0126D4  59E1               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  5401  0126D6  0100               	movlb	0	; () banked
  5402  0126D8  51E6               	movf	(___llmod@divisor+2)& (0+255),w,b
  5403  0126DA  0100               	movlb	0	; () banked
  5404  0126DC  59E2               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  5405  0126DE  0100               	movlb	0	; () banked
  5406  0126E0  51E7               	movf	(___llmod@divisor+3)& (0+255),w,b
  5407  0126E2  0100               	movlb	0	; () banked
  5408  0126E4  59E3               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  5409  0126E6  A0D8               	btfss	status,0,c
  5410  0126E8  D010               	goto	l8550
  5411                           
  5412                           ; BSR set to: 0
  5413  0126EA  0100               	movlb	0	; () banked
  5414  0126EC  51E4               	movf	___llmod@divisor& (0+255),w,b
  5415  0126EE  0100               	movlb	0	; () banked
  5416  0126F0  5FE0               	subwf	___llmod@dividend& (0+255),f,b
  5417  0126F2  0100               	movlb	0	; () banked
  5418  0126F4  51E5               	movf	(___llmod@divisor+1)& (0+255),w,b
  5419  0126F6  0100               	movlb	0	; () banked
  5420  0126F8  5BE1               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  5421  0126FA  0100               	movlb	0	; () banked
  5422  0126FC  51E6               	movf	(___llmod@divisor+2)& (0+255),w,b
  5423  0126FE  0100               	movlb	0	; () banked
  5424  012700  5BE2               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  5425  012702  0100               	movlb	0	; () banked
  5426  012704  51E7               	movf	(___llmod@divisor+3)& (0+255),w,b
  5427  012706  0100               	movlb	0	; () banked
  5428  012708  5BE3               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  5429  01270A                     l8550:
  5430                           
  5431                           ; BSR set to: 0
  5432  01270A  0100               	movlb	0	; () banked
  5433  01270C  90D8               	bcf	status,0,c
  5434  01270E  33E7               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  5435  012710  33E6               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  5436  012712  33E5               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  5437  012714  33E4               	rrcf	___llmod@divisor& (0+255),f,b
  5438                           
  5439                           ; BSR set to: 0
  5440  012716  2E20               	decfsz	___llmod@counter,f,c
  5441  012718  D7D6               	goto	l8546
  5442  01271A                     l1724:
  5443                           
  5444                           ; BSR set to: 0
  5445  01271A  C0E0  F0E0         	movff	___llmod@dividend,?___llmod
  5446  01271E  C0E1  F0E1         	movff	___llmod@dividend+1,?___llmod+1
  5447  012722  C0E2  F0E2         	movff	___llmod@dividend+2,?___llmod+2
  5448  012726  C0E3  F0E3         	movff	___llmod@dividend+3,?___llmod+3
  5449                           
  5450                           ; BSR set to: 0
  5451  01272A  0012               	return		;funcret
  5452  01272C                     __end_of___llmod:
  5453                           	opt stack 0
  5454                           tblptru	equ	0xFF8
  5455                           tblptrh	equ	0xFF7
  5456                           tblptrl	equ	0xFF6
  5457                           tablat	equ	0xFF5
  5458                           prodh	equ	0xFF4
  5459                           prodl	equ	0xFF3
  5460                           intcon	equ	0xFF2
  5461                           indf0	equ	0xFEF
  5462                           postinc0	equ	0xFEE
  5463                           fsr0h	equ	0xFEA
  5464                           fsr0l	equ	0xFE9
  5465                           wreg	equ	0xFE8
  5466                           postdec1	equ	0xFE5
  5467                           fsr1l	equ	0xFE1
  5468                           indf2	equ	0xFDF
  5469                           postinc2	equ	0xFDE
  5470                           postdec2	equ	0xFDD
  5471                           fsr2h	equ	0xFDA
  5472                           fsr2l	equ	0xFD9
  5473                           status	equ	0xFD8
  5474                           
  5475 ;; *************** function _ctmu_loop *****************
  5476 ;; Defined at:
  5477 ;;		line 340 in file "tasks.h"
  5478 ;; Parameters:    Size  Location     Type
  5479 ;;		None
  5480 ;; Auto vars:     Size  Location     Type
  5481 ;;		None
  5482 ;; Return value:  Size  Location     Type
  5483 ;;		None               void
  5484 ;; Registers used:
  5485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5486 ;; Tracked objects:
  5487 ;;		On entry : 0/0
  5488 ;;		On exit  : 0/0
  5489 ;;		Unchanged: 0/0
  5490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5495 ;;Total ram usage:        0 bytes
  5496 ;; Hardware stack levels used:    1
  5497 ;; Hardware stack levels required when called:    6
  5498 ;; This function calls:
  5499 ;;		_CTMU_read
  5500 ;;		___lwdiv
  5501 ;;		_button_timer_interrupt
  5502 ;; This function is called by:
  5503 ;;		_normal_mode_loop
  5504 ;; This function uses a non-reentrant model
  5505 ;;
  5506                           
  5507                           	psect	text18
  5508  0117CA                     __ptext18:
  5509                           	opt stack 0
  5510  0117CA                     _ctmu_loop:
  5511                           	opt stack 23
  5512                           
  5513                           ;tasks.h: 341: button_timer_interrupt(&ct0, !(CTMU_read(0) / ctmu_value0));
  5514                           
  5515                           ; BSR set to: 0
  5516                           ;incstack = 0
  5517  0117CA  0EBA               	movlw	low _ct0
  5518  0117CC  0100               	movlb	0	; () banked
  5519  0117CE  6FEF               	movwf	button_timer_interrupt@bt& (0+255),b
  5520  0117D0  0E00               	movlw	high _ct0
  5521  0117D2  0100               	movlb	0	; () banked
  5522  0117D4  6FF0               	movwf	(button_timer_interrupt@bt+1)& (0+255),b
  5523  0117D6  0E00               	movlw	0
  5524  0117D8  ECD7  F08F         	call	_CTMU_read
  5525  0117DC  C0E0  F0E8         	movff	?_CTMU_read,___lwdiv@dividend
  5526  0117E0  C0E1  F0E9         	movff	?_CTMU_read+1,___lwdiv@dividend+1
  5527  0117E4  C099  F0EA         	movff	_ctmu_value0,___lwdiv@divisor
  5528  0117E8  C09A  F0EB         	movff	_ctmu_value0+1,___lwdiv@divisor+1
  5529  0117EC  ECA4  F094         	call	___lwdiv	;wreg free
  5530  0117F0  0100               	movlb	0	; () banked
  5531  0117F2  51E8               	movf	?___lwdiv& (0+255),w,b
  5532  0117F4  0100               	movlb	0	; () banked
  5533  0117F6  11E9               	iorwf	(?___lwdiv+1)& (0+255),w,b
  5534  0117F8  A4D8               	btfss	status,2,c
  5535  0117FA  D002               	goto	u9610
  5536  0117FC  0E01               	movlw	1
  5537  0117FE  D001               	goto	u9620
  5538  011800                     u9610:
  5539  011800  0E00               	movlw	0
  5540  011802                     u9620:
  5541  011802  0100               	movlb	0	; () banked
  5542  011804  6FF1               	movwf	button_timer_interrupt@sw_value& (0+255),b
  5543  011806  EC83  F082         	call	_button_timer_interrupt	;wreg free
  5544                           
  5545                           ;tasks.h: 342: button_timer_interrupt(&ct1, !(CTMU_read(1) / ctmu_value1));
  5546  01180A  0EBE               	movlw	low _ct1
  5547  01180C  0100               	movlb	0	; () banked
  5548  01180E  6FEF               	movwf	button_timer_interrupt@bt& (0+255),b
  5549  011810  0E00               	movlw	high _ct1
  5550  011812  0100               	movlb	0	; () banked
  5551  011814  6FF0               	movwf	(button_timer_interrupt@bt+1)& (0+255),b
  5552  011816  0E01               	movlw	1
  5553  011818  ECD7  F08F         	call	_CTMU_read
  5554  01181C  C0E0  F0E8         	movff	?_CTMU_read,___lwdiv@dividend
  5555  011820  C0E1  F0E9         	movff	?_CTMU_read+1,___lwdiv@dividend+1
  5556  011824  C09B  F0EA         	movff	_ctmu_value1,___lwdiv@divisor
  5557  011828  C09C  F0EB         	movff	_ctmu_value1+1,___lwdiv@divisor+1
  5558  01182C  ECA4  F094         	call	___lwdiv	;wreg free
  5559  011830  0100               	movlb	0	; () banked
  5560  011832  51E8               	movf	?___lwdiv& (0+255),w,b
  5561  011834  0100               	movlb	0	; () banked
  5562  011836  11E9               	iorwf	(?___lwdiv+1)& (0+255),w,b
  5563  011838  A4D8               	btfss	status,2,c
  5564  01183A  D002               	goto	u9630
  5565  01183C  0E01               	movlw	1
  5566  01183E  D001               	goto	u9640
  5567  011840                     u9630:
  5568  011840  0E00               	movlw	0
  5569  011842                     u9640:
  5570  011842  0100               	movlb	0	; () banked
  5571  011844  6FF1               	movwf	button_timer_interrupt@sw_value& (0+255),b
  5572  011846  EC83  F082         	call	_button_timer_interrupt	;wreg free
  5573                           
  5574                           ;tasks.h: 343: button_timer_interrupt(&ct2, !(CTMU_read(2) / ctmu_value2));
  5575  01184A  0EC2               	movlw	low _ct2
  5576  01184C  0100               	movlb	0	; () banked
  5577  01184E  6FEF               	movwf	button_timer_interrupt@bt& (0+255),b
  5578  011850  0E00               	movlw	high _ct2
  5579  011852  0100               	movlb	0	; () banked
  5580  011854  6FF0               	movwf	(button_timer_interrupt@bt+1)& (0+255),b
  5581  011856  0E02               	movlw	2
  5582  011858  ECD7  F08F         	call	_CTMU_read
  5583  01185C  C0E0  F0E8         	movff	?_CTMU_read,___lwdiv@dividend
  5584  011860  C0E1  F0E9         	movff	?_CTMU_read+1,___lwdiv@dividend+1
  5585  011864  C09D  F0EA         	movff	_ctmu_value2,___lwdiv@divisor
  5586  011868  C09E  F0EB         	movff	_ctmu_value2+1,___lwdiv@divisor+1
  5587  01186C  ECA4  F094         	call	___lwdiv	;wreg free
  5588  011870  0100               	movlb	0	; () banked
  5589  011872  51E8               	movf	?___lwdiv& (0+255),w,b
  5590  011874  0100               	movlb	0	; () banked
  5591  011876  11E9               	iorwf	(?___lwdiv+1)& (0+255),w,b
  5592  011878  A4D8               	btfss	status,2,c
  5593  01187A  D002               	goto	u9650
  5594  01187C  0E01               	movlw	1
  5595  01187E  D001               	goto	u9660
  5596  011880                     u9650:
  5597  011880  0E00               	movlw	0
  5598  011882                     u9660:
  5599  011882  0100               	movlb	0	; () banked
  5600  011884  6FF1               	movwf	button_timer_interrupt@sw_value& (0+255),b
  5601  011886  EC83  F082         	call	_button_timer_interrupt	;wreg free
  5602                           
  5603                           ;tasks.h: 344: button_timer_interrupt(&ctm, !(CTMU_read(3) / ctmu_valuem));
  5604  01188A  0EC6               	movlw	low _ctm
  5605  01188C  0100               	movlb	0	; () banked
  5606  01188E  6FEF               	movwf	button_timer_interrupt@bt& (0+255),b
  5607  011890  0E00               	movlw	high _ctm
  5608  011892  0100               	movlb	0	; () banked
  5609  011894  6FF0               	movwf	(button_timer_interrupt@bt+1)& (0+255),b
  5610  011896  0E03               	movlw	3
  5611  011898  ECD7  F08F         	call	_CTMU_read
  5612  01189C  C0E0  F0E8         	movff	?_CTMU_read,___lwdiv@dividend
  5613  0118A0  C0E1  F0E9         	movff	?_CTMU_read+1,___lwdiv@dividend+1
  5614  0118A4  C09F  F0EA         	movff	_ctmu_valuem,___lwdiv@divisor
  5615  0118A8  C0A0  F0EB         	movff	_ctmu_valuem+1,___lwdiv@divisor+1
  5616  0118AC  ECA4  F094         	call	___lwdiv	;wreg free
  5617  0118B0  0100               	movlb	0	; () banked
  5618  0118B2  51E8               	movf	?___lwdiv& (0+255),w,b
  5619  0118B4  0100               	movlb	0	; () banked
  5620  0118B6  11E9               	iorwf	(?___lwdiv+1)& (0+255),w,b
  5621  0118B8  A4D8               	btfss	status,2,c
  5622  0118BA  D002               	goto	u9670
  5623  0118BC  0E01               	movlw	1
  5624  0118BE  D001               	goto	u9680
  5625  0118C0                     u9670:
  5626  0118C0  0E00               	movlw	0
  5627  0118C2                     u9680:
  5628  0118C2  0100               	movlb	0	; () banked
  5629  0118C4  6FF1               	movwf	button_timer_interrupt@sw_value& (0+255),b
  5630  0118C6  EC83  F082         	call	_button_timer_interrupt	;wreg free
  5631  0118CA  0012               	return		;funcret
  5632  0118CC                     __end_of_ctmu_loop:
  5633                           	opt stack 0
  5634                           tblptru	equ	0xFF8
  5635                           tblptrh	equ	0xFF7
  5636                           tblptrl	equ	0xFF6
  5637                           tablat	equ	0xFF5
  5638                           prodh	equ	0xFF4
  5639                           prodl	equ	0xFF3
  5640                           intcon	equ	0xFF2
  5641                           indf0	equ	0xFEF
  5642                           postinc0	equ	0xFEE
  5643                           fsr0h	equ	0xFEA
  5644                           fsr0l	equ	0xFE9
  5645                           wreg	equ	0xFE8
  5646                           postdec1	equ	0xFE5
  5647                           fsr1l	equ	0xFE1
  5648                           indf2	equ	0xFDF
  5649                           postinc2	equ	0xFDE
  5650                           postdec2	equ	0xFDD
  5651                           fsr2h	equ	0xFDA
  5652                           fsr2l	equ	0xFD9
  5653                           status	equ	0xFD8
  5654                           
  5655 ;; *************** function _button_timer_interrupt *****************
  5656 ;; Defined at:
  5657 ;;		line 51 in file "../My_header\My_button.h"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;  bt              2   28[BANK0 ] PTR struct button
  5660 ;;		 -> ctm(4), ct2(4), ct1(4), ct0(4), 
  5661 ;;  sw_value        1   30[BANK0 ] unsigned char 
  5662 ;; Auto vars:     Size  Location     Type
  5663 ;;		None
  5664 ;; Return value:  Size  Location     Type
  5665 ;;		None               void
  5666 ;; Registers used:
  5667 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5668 ;; Tracked objects:
  5669 ;;		On entry : 0/0
  5670 ;;		On exit  : 0/0
  5671 ;;		Unchanged: 0/0
  5672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5673 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5675 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5676 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5677 ;;Total ram usage:        5 bytes
  5678 ;; Hardware stack levels used:    1
  5679 ;; Hardware stack levels required when called:    4
  5680 ;; This function calls:
  5681 ;;		Nothing
  5682 ;; This function is called by:
  5683 ;;		_ctmu_loop
  5684 ;; This function uses a non-reentrant model
  5685 ;;
  5686                           
  5687                           	psect	text19
  5688  010506                     __ptext19:
  5689                           	opt stack 0
  5690  010506                     _button_timer_interrupt:
  5691                           	opt stack 24
  5692                           
  5693                           ;My_header\My_button.h: 52: if (sw_value) {
  5694                           
  5695                           ;incstack = 0
  5696  010506  0100               	movlb	0	; () banked
  5697  010508  51F1               	movf	button_timer_interrupt@sw_value& (0+255),w,b
  5698  01050A  0100               	movlb	0	; () banked
  5699  01050C  B4D8               	btfsc	status,2,c
  5700  01050E  D0A8               	goto	l8242
  5701                           
  5702                           ; BSR set to: 0
  5703                           ;My_header\My_button.h: 53: if (bt->cnt_sw == 900)bt->flag.long_holding_7 = 1;
  5704  010510  C0EF  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5705  010514  C0F0  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5706  010518  0E84               	movlw	132
  5707  01051A  18DE               	xorwf	postinc2,w,c
  5708  01051C  E10D               	bnz	l272
  5709  01051E  0E03               	movlw	3
  5710  010520  18DE               	xorwf	postinc2,w,c
  5711  010522  A4D8               	btfss	status,2,c
  5712  010524  D009               	goto	l272
  5713                           
  5714                           ; BSR set to: 0
  5715  010526  0100               	movlb	0	; () banked
  5716  010528  EE20 F003          	lfsr	2,3
  5717  01052C  51EF               	movf	button_timer_interrupt@bt& (0+255),w,b
  5718  01052E  26D9               	addwf	fsr2l,f,c
  5719  010530  51F0               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5720  010532  22DA               	addwfc	fsr2h,f,c
  5721  010534  0100               	movlb	0	; () banked
  5722  010536  8EDF               	bsf	indf2,7,c
  5723  010538                     l272:
  5724                           
  5725                           ; BSR set to: 0
  5726                           ;My_header\My_button.h: 54: if (bt->cnt_sw == 700)bt->flag.long_holding_6 = 1;
  5727  010538  C0EF  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5728  01053C  C0F0  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5729  010540  0EBC               	movlw	188
  5730  010542  18DE               	xorwf	postinc2,w,c
  5731  010544  E10D               	bnz	l273
  5732  010546  0E02               	movlw	2
  5733  010548  18DE               	xorwf	postinc2,w,c
  5734  01054A  A4D8               	btfss	status,2,c
  5735  01054C  D009               	goto	l273
  5736                           
  5737                           ; BSR set to: 0
  5738  01054E  0100               	movlb	0	; () banked
  5739  010550  EE20 F003          	lfsr	2,3
  5740  010554  51EF               	movf	button_timer_interrupt@bt& (0+255),w,b
  5741  010556  26D9               	addwf	fsr2l,f,c
  5742  010558  51F0               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5743  01055A  22DA               	addwfc	fsr2h,f,c
  5744  01055C  0100               	movlb	0	; () banked
  5745  01055E  8CDF               	bsf	indf2,6,c
  5746  010560                     l273:
  5747                           
  5748                           ; BSR set to: 0
  5749                           ;My_header\My_button.h: 55: if (bt->cnt_sw == 500)bt->flag.long_holding_5 = 1;
  5750  010560  C0EF  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5751  010564  C0F0  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5752  010568  0EF4               	movlw	244
  5753  01056A  18DE               	xorwf	postinc2,w,c
  5754  01056C  E10C               	bnz	l274
  5755  01056E  04DE               	decf	postinc2,w,c
  5756  010570  A4D8               	btfss	status,2,c
  5757  010572  D009               	goto	l274
  5758                           
  5759                           ; BSR set to: 0
  5760  010574  0100               	movlb	0	; () banked
  5761  010576  EE20 F003          	lfsr	2,3
  5762  01057A  51EF               	movf	button_timer_interrupt@bt& (0+255),w,b
  5763  01057C  26D9               	addwf	fsr2l,f,c
  5764  01057E  51F0               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5765  010580  22DA               	addwfc	fsr2h,f,c
  5766  010582  0100               	movlb	0	; () banked
  5767  010584  8ADF               	bsf	indf2,5,c
  5768  010586                     l274:
  5769                           
  5770                           ; BSR set to: 0
  5771                           ;My_header\My_button.h: 56: if (bt->cnt_sw == 300)bt->flag.long_holding_4 = 1;
  5772  010586  C0EF  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5773  01058A  C0F0  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5774  01058E  0E2C               	movlw	44
  5775  010590  18DE               	xorwf	postinc2,w,c
  5776  010592  E10C               	bnz	l275
  5777  010594  04DE               	decf	postinc2,w,c
  5778  010596  A4D8               	btfss	status,2,c
  5779  010598  D009               	goto	l275
  5780                           
  5781                           ; BSR set to: 0
  5782  01059A  0100               	movlb	0	; () banked
  5783  01059C  EE20 F003          	lfsr	2,3
  5784  0105A0  51EF               	movf	button_timer_interrupt@bt& (0+255),w,b
  5785  0105A2  26D9               	addwf	fsr2l,f,c
  5786  0105A4  51F0               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5787  0105A6  22DA               	addwfc	fsr2h,f,c
  5788  0105A8  0100               	movlb	0	; () banked
  5789  0105AA  88DF               	bsf	indf2,4,c
  5790  0105AC                     l275:
  5791                           
  5792                           ; BSR set to: 0
  5793                           ;My_header\My_button.h: 57: if (bt->cnt_sw == 150)bt->flag.long_holding_3 = 1;
  5794  0105AC  C0EF  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5795  0105B0  C0F0  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5796  0105B4  0E96               	movlw	150
  5797  0105B6  18DE               	xorwf	postinc2,w,c
  5798  0105B8  10DE               	iorwf	postinc2,w,c
  5799  0105BA  A4D8               	btfss	status,2,c
  5800  0105BC  D009               	goto	l276
  5801                           
  5802                           ; BSR set to: 0
  5803  0105BE  0100               	movlb	0	; () banked
  5804  0105C0  EE20 F003          	lfsr	2,3
  5805  0105C4  51EF               	movf	button_timer_interrupt@bt& (0+255),w,b
  5806  0105C6  26D9               	addwf	fsr2l,f,c
  5807  0105C8  51F0               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5808  0105CA  22DA               	addwfc	fsr2h,f,c
  5809  0105CC  0100               	movlb	0	; () banked
  5810  0105CE  86DF               	bsf	indf2,3,c
  5811  0105D0                     l276:
  5812                           
  5813                           ; BSR set to: 0
  5814                           ;My_header\My_button.h: 58: if (bt->cnt_sw == 60)bt->flag.long_holding_2 = 1;
  5815  0105D0  C0EF  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5816  0105D4  C0F0  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5817  0105D8  0E3C               	movlw	60
  5818  0105DA  18DE               	xorwf	postinc2,w,c
  5819  0105DC  10DE               	iorwf	postinc2,w,c
  5820  0105DE  A4D8               	btfss	status,2,c
  5821  0105E0  D009               	goto	l277
  5822                           
  5823                           ; BSR set to: 0
  5824  0105E2  0100               	movlb	0	; () banked
  5825  0105E4  EE20 F003          	lfsr	2,3
  5826  0105E8  51EF               	movf	button_timer_interrupt@bt& (0+255),w,b
  5827  0105EA  26D9               	addwf	fsr2l,f,c
  5828  0105EC  51F0               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5829  0105EE  22DA               	addwfc	fsr2h,f,c
  5830  0105F0  0100               	movlb	0	; () banked
  5831  0105F2  84DF               	bsf	indf2,2,c
  5832  0105F4                     l277:
  5833                           
  5834                           ; BSR set to: 0
  5835                           ;My_header\My_button.h: 59: if (bt->cnt_sw == 16)bt->flag.long_holding_1 = 1;
  5836  0105F4  C0EF  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5837  0105F8  C0F0  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5838  0105FC  0E10               	movlw	16
  5839  0105FE  18DE               	xorwf	postinc2,w,c
  5840  010600  10DE               	iorwf	postinc2,w,c
  5841  010602  A4D8               	btfss	status,2,c
  5842  010604  D009               	goto	l278
  5843                           
  5844                           ; BSR set to: 0
  5845  010606  0100               	movlb	0	; () banked
  5846  010608  EE20 F003          	lfsr	2,3
  5847  01060C  51EF               	movf	button_timer_interrupt@bt& (0+255),w,b
  5848  01060E  26D9               	addwf	fsr2l,f,c
  5849  010610  51F0               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5850  010612  22DA               	addwfc	fsr2h,f,c
  5851  010614  0100               	movlb	0	; () banked
  5852  010616  82DF               	bsf	indf2,1,c
  5853  010618                     l278:
  5854                           
  5855                           ; BSR set to: 0
  5856                           ;My_header\My_button.h: 60: if (bt->cnt_sw == 2)bt->flag.pressing = 1;
  5857  010618  C0EF  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5858  01061C  C0F0  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5859  010620  0E02               	movlw	2
  5860  010622  18DE               	xorwf	postinc2,w,c
  5861  010624  10DE               	iorwf	postinc2,w,c
  5862  010626  A4D8               	btfss	status,2,c
  5863  010628  D009               	goto	l279
  5864                           
  5865                           ; BSR set to: 0
  5866  01062A  0100               	movlb	0	; () banked
  5867  01062C  EE20 F003          	lfsr	2,3
  5868  010630  51EF               	movf	button_timer_interrupt@bt& (0+255),w,b
  5869  010632  26D9               	addwf	fsr2l,f,c
  5870  010634  51F0               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5871  010636  22DA               	addwfc	fsr2h,f,c
  5872  010638  0100               	movlb	0	; () banked
  5873  01063A  80DF               	bsf	indf2,0,c
  5874  01063C                     l279:
  5875                           
  5876                           ; BSR set to: 0
  5877                           ;My_header\My_button.h: 61: if (bt->cnt_sw < 900 + 1) bt->cnt_sw++;
  5878  01063C  C0EF  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5879  010640  C0F0  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5880  010644  0E85               	movlw	133
  5881  010646  5CDE               	subwf	postinc2,w,c
  5882  010648  0E03               	movlw	3
  5883  01064A  58DE               	subwfb	postinc2,w,c
  5884  01064C  B0D8               	btfsc	status,0,c
  5885  01064E  0012               	return	
  5886                           
  5887                           ; BSR set to: 0
  5888  010650  C0EF  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5889  010654  C0F0  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5890  010658  2ADE               	incf	postinc2,f,c
  5891  01065A  0E00               	movlw	0
  5892  01065C  22DD               	addwfc	postdec2,f,c
  5893                           
  5894                           ; BSR set to: 0
  5895                           ;My_header\My_button.h: 62: } else {
  5896  01065E  0012               	return	
  5897  010660                     l8242:
  5898                           
  5899                           ; BSR set to: 0
  5900                           ;My_header\My_button.h: 63: if (bt->cnt_sw >= 900)bt->flag.long_hold_7 = 1;
  5901  010660  C0EF  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5902  010664  C0F0  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5903  010668  0E84               	movlw	132
  5904  01066A  5CDE               	subwf	postinc2,w,c
  5905  01066C  0E03               	movlw	3
  5906  01066E  58DE               	subwfb	postinc2,w,c
  5907  010670  A0D8               	btfss	status,0,c
  5908  010672  D00A               	goto	l8246
  5909                           
  5910                           ; BSR set to: 0
  5911  010674  0100               	movlb	0	; () banked
  5912  010676  EE20 F002          	lfsr	2,2
  5913  01067A  51EF               	movf	button_timer_interrupt@bt& (0+255),w,b
  5914  01067C  26D9               	addwf	fsr2l,f,c
  5915  01067E  51F0               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5916  010680  22DA               	addwfc	fsr2h,f,c
  5917  010682  0100               	movlb	0	; () banked
  5918  010684  8EDF               	bsf	indf2,7,c
  5919  010686  D08F               	goto	l8274
  5920  010688                     l8246:
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;My_header\My_button.h: 64: else if (bt->cnt_sw >= 700)bt->flag.long_hold_6 = 1;
  5924  010688  C0EF  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5925  01068C  C0F0  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5926  010690  0EBC               	movlw	188
  5927  010692  5CDE               	subwf	postinc2,w,c
  5928  010694  0E02               	movlw	2
  5929  010696  58DE               	subwfb	postinc2,w,c
  5930  010698  A0D8               	btfss	status,0,c
  5931  01069A  D00A               	goto	l8250
  5932                           
  5933                           ; BSR set to: 0
  5934  01069C  0100               	movlb	0	; () banked
  5935  01069E  EE20 F002          	lfsr	2,2
  5936  0106A2  51EF               	movf	button_timer_interrupt@bt& (0+255),w,b
  5937  0106A4  26D9               	addwf	fsr2l,f,c
  5938  0106A6  51F0               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5939  0106A8  22DA               	addwfc	fsr2h,f,c
  5940  0106AA  0100               	movlb	0	; () banked
  5941  0106AC  8CDF               	bsf	indf2,6,c
  5942  0106AE  D07B               	goto	l8274
  5943  0106B0                     l8250:
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;My_header\My_button.h: 65: else if (bt->cnt_sw >= 500)bt->flag.long_hold_5 = 1;
  5947  0106B0  C0EF  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5948  0106B4  C0F0  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5949  0106B8  0EF4               	movlw	244
  5950  0106BA  5CDE               	subwf	postinc2,w,c
  5951  0106BC  0E01               	movlw	1
  5952  0106BE  58DE               	subwfb	postinc2,w,c
  5953  0106C0  A0D8               	btfss	status,0,c
  5954  0106C2  D00A               	goto	l8254
  5955                           
  5956                           ; BSR set to: 0
  5957  0106C4  0100               	movlb	0	; () banked
  5958  0106C6  EE20 F002          	lfsr	2,2
  5959  0106CA  51EF               	movf	button_timer_interrupt@bt& (0+255),w,b
  5960  0106CC  26D9               	addwf	fsr2l,f,c
  5961  0106CE  51F0               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5962  0106D0  22DA               	addwfc	fsr2h,f,c
  5963  0106D2  0100               	movlb	0	; () banked
  5964  0106D4  8ADF               	bsf	indf2,5,c
  5965  0106D6  D067               	goto	l8274
  5966  0106D8                     l8254:
  5967                           
  5968                           ; BSR set to: 0
  5969                           ;My_header\My_button.h: 66: else if (bt->cnt_sw >= 300)bt->flag.long_hold_4 = 1;
  5970  0106D8  C0EF  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5971  0106DC  C0F0  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5972  0106E0  0E2C               	movlw	44
  5973  0106E2  5CDE               	subwf	postinc2,w,c
  5974  0106E4  0E01               	movlw	1
  5975  0106E6  58DE               	subwfb	postinc2,w,c
  5976  0106E8  A0D8               	btfss	status,0,c
  5977  0106EA  D00A               	goto	l8258
  5978                           
  5979                           ; BSR set to: 0
  5980  0106EC  0100               	movlb	0	; () banked
  5981  0106EE  EE20 F002          	lfsr	2,2
  5982  0106F2  51EF               	movf	button_timer_interrupt@bt& (0+255),w,b
  5983  0106F4  26D9               	addwf	fsr2l,f,c
  5984  0106F6  51F0               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5985  0106F8  22DA               	addwfc	fsr2h,f,c
  5986  0106FA  0100               	movlb	0	; () banked
  5987  0106FC  88DF               	bsf	indf2,4,c
  5988  0106FE  D053               	goto	l8274
  5989  010700                     l8258:
  5990                           
  5991                           ; BSR set to: 0
  5992                           ;My_header\My_button.h: 67: else if (bt->cnt_sw >= 150)bt->flag.long_hold_3 = 1;
  5993  010700  C0EF  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5994  010704  C0F0  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5995  010708  0E01               	movlw	1
  5996  01070A  50DB               	movf	plusw2,w,c
  5997  01070C  E104               	bnz	u8820
  5998  01070E  0E96               	movlw	150
  5999  010710  5CDE               	subwf	postinc2,w,c
  6000  010712  A0D8               	btfss	status,0,c
  6001  010714  D00A               	goto	l8262
  6002  010716                     u8820:
  6003                           
  6004                           ; BSR set to: 0
  6005  010716  0100               	movlb	0	; () banked
  6006  010718  EE20 F002          	lfsr	2,2
  6007  01071C  51EF               	movf	button_timer_interrupt@bt& (0+255),w,b
  6008  01071E  26D9               	addwf	fsr2l,f,c
  6009  010720  51F0               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  6010  010722  22DA               	addwfc	fsr2h,f,c
  6011  010724  0100               	movlb	0	; () banked
  6012  010726  86DF               	bsf	indf2,3,c
  6013  010728  D03E               	goto	l8274
  6014  01072A                     l8262:
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;My_header\My_button.h: 68: else if (bt->cnt_sw >= 60)bt->flag.long_hold_2 = 1;
  6018  01072A  C0EF  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6019  01072E  C0F0  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6020  010732  0E01               	movlw	1
  6021  010734  50DB               	movf	plusw2,w,c
  6022  010736  E104               	bnz	u8830
  6023  010738  0E3C               	movlw	60
  6024  01073A  5CDE               	subwf	postinc2,w,c
  6025  01073C  A0D8               	btfss	status,0,c
  6026  01073E  D00A               	goto	l8266
  6027  010740                     u8830:
  6028                           
  6029                           ; BSR set to: 0
  6030  010740  0100               	movlb	0	; () banked
  6031  010742  EE20 F002          	lfsr	2,2
  6032  010746  51EF               	movf	button_timer_interrupt@bt& (0+255),w,b
  6033  010748  26D9               	addwf	fsr2l,f,c
  6034  01074A  51F0               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  6035  01074C  22DA               	addwfc	fsr2h,f,c
  6036  01074E  0100               	movlb	0	; () banked
  6037  010750  84DF               	bsf	indf2,2,c
  6038  010752  D029               	goto	l8274
  6039  010754                     l8266:
  6040                           
  6041                           ; BSR set to: 0
  6042                           ;My_header\My_button.h: 69: else if (bt->cnt_sw >= 16)bt->flag.long_hold_1 = 1;
  6043  010754  C0EF  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6044  010758  C0F0  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6045  01075C  0E01               	movlw	1
  6046  01075E  50DB               	movf	plusw2,w,c
  6047  010760  E104               	bnz	u8840
  6048  010762  0E10               	movlw	16
  6049  010764  5CDE               	subwf	postinc2,w,c
  6050  010766  A0D8               	btfss	status,0,c
  6051  010768  D00A               	goto	l8270
  6052  01076A                     u8840:
  6053                           
  6054                           ; BSR set to: 0
  6055  01076A  0100               	movlb	0	; () banked
  6056  01076C  EE20 F002          	lfsr	2,2
  6057  010770  51EF               	movf	button_timer_interrupt@bt& (0+255),w,b
  6058  010772  26D9               	addwf	fsr2l,f,c
  6059  010774  51F0               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  6060  010776  22DA               	addwfc	fsr2h,f,c
  6061  010778  0100               	movlb	0	; () banked
  6062  01077A  82DF               	bsf	indf2,1,c
  6063  01077C  D014               	goto	l8274
  6064  01077E                     l8270:
  6065                           
  6066                           ; BSR set to: 0
  6067                           ;My_header\My_button.h: 70: else if (bt->cnt_sw >= 2)bt->flag.press = 1;
  6068  01077E  C0EF  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6069  010782  C0F0  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6070  010786  0E01               	movlw	1
  6071  010788  50DB               	movf	plusw2,w,c
  6072  01078A  E104               	bnz	u8850
  6073  01078C  0E02               	movlw	2
  6074  01078E  5CDE               	subwf	postinc2,w,c
  6075  010790  A0D8               	btfss	status,0,c
  6076  010792  D009               	goto	l8274
  6077  010794                     u8850:
  6078                           
  6079                           ; BSR set to: 0
  6080  010794  0100               	movlb	0	; () banked
  6081  010796  EE20 F002          	lfsr	2,2
  6082  01079A  51EF               	movf	button_timer_interrupt@bt& (0+255),w,b
  6083  01079C  26D9               	addwf	fsr2l,f,c
  6084  01079E  51F0               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  6085  0107A0  22DA               	addwfc	fsr2h,f,c
  6086  0107A2  0100               	movlb	0	; () banked
  6087  0107A4  80DF               	bsf	indf2,0,c
  6088  0107A6                     l8274:
  6089                           
  6090                           ; BSR set to: 0
  6091                           ;My_header\My_button.h: 71: bt->cnt_sw = 0;
  6092  0107A6  C0EF  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6093  0107AA  C0F0  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6094  0107AE  0E00               	movlw	0
  6095  0107B0  6EDE               	movwf	postinc2,c
  6096  0107B2  0E00               	movlw	0
  6097  0107B4  6EDD               	movwf	postdec2,c
  6098                           
  6099                           ; BSR set to: 0
  6100                           ;My_header\My_button.h: 72: bt->flags &= 0x00FF;
  6101  0107B6  0100               	movlb	0	; () banked
  6102  0107B8  EE20 F002          	lfsr	2,2
  6103  0107BC  51EF               	movf	button_timer_interrupt@bt& (0+255),w,b
  6104  0107BE  26D9               	addwf	fsr2l,f,c
  6105  0107C0  51F0               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  6106  0107C2  22DA               	addwfc	fsr2h,f,c
  6107  0107C4  0EFF               	movlw	255
  6108  0107C6  16DE               	andwf	postinc2,f,c
  6109  0107C8  0E00               	movlw	0
  6110  0107CA  16DD               	andwf	postdec2,f,c
  6111  0107CC  0012               	return	
  6112  0107CE                     __end_of_button_timer_interrupt:
  6113                           	opt stack 0
  6114                           tblptru	equ	0xFF8
  6115                           tblptrh	equ	0xFF7
  6116                           tblptrl	equ	0xFF6
  6117                           tablat	equ	0xFF5
  6118                           prodh	equ	0xFF4
  6119                           prodl	equ	0xFF3
  6120                           intcon	equ	0xFF2
  6121                           indf0	equ	0xFEF
  6122                           postinc0	equ	0xFEE
  6123                           fsr0h	equ	0xFEA
  6124                           fsr0l	equ	0xFE9
  6125                           wreg	equ	0xFE8
  6126                           postdec1	equ	0xFE5
  6127                           fsr1l	equ	0xFE1
  6128                           indf2	equ	0xFDF
  6129                           postinc2	equ	0xFDE
  6130                           postdec2	equ	0xFDD
  6131                           plusw2	equ	0xFDB
  6132                           fsr2h	equ	0xFDA
  6133                           fsr2l	equ	0xFD9
  6134                           status	equ	0xFD8
  6135                           
  6136 ;; *************** function ___lwdiv *****************
  6137 ;; Defined at:
  6138 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  6139 ;; Parameters:    Size  Location     Type
  6140 ;;  dividend        2   21[BANK0 ] unsigned int 
  6141 ;;  divisor         2   23[BANK0 ] unsigned int 
  6142 ;; Auto vars:     Size  Location     Type
  6143 ;;  quotient        2   26[BANK0 ] unsigned int 
  6144 ;;  counter         1   25[BANK0 ] unsigned char 
  6145 ;; Return value:  Size  Location     Type
  6146 ;;                  2   21[BANK0 ] unsigned int 
  6147 ;; Registers used:
  6148 ;;		wreg, status,2, status,0
  6149 ;; Tracked objects:
  6150 ;;		On entry : 0/0
  6151 ;;		On exit  : 0/0
  6152 ;;		Unchanged: 0/0
  6153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6154 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6155 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6157 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6158 ;;Total ram usage:        7 bytes
  6159 ;; Hardware stack levels used:    1
  6160 ;; Hardware stack levels required when called:    4
  6161 ;; This function calls:
  6162 ;;		Nothing
  6163 ;; This function is called by:
  6164 ;;		_my_utoa
  6165 ;;		_display_LCD
  6166 ;;		_ctmu_loop
  6167 ;;		_main
  6168 ;;		_ringbuf_put_num
  6169 ;;		_tx_sendn
  6170 ;; This function uses a non-reentrant model
  6171 ;;
  6172                           
  6173                           	psect	text20
  6174  012948                     __ptext20:
  6175                           	opt stack 0
  6176  012948                     ___lwdiv:
  6177                           	opt stack 23
  6178                           
  6179                           ; BSR set to: 0
  6180                           ;incstack = 0
  6181  012948  0E00               	movlw	0
  6182  01294A  0100               	movlb	0	; () banked
  6183  01294C  6FEE               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6184  01294E  0E00               	movlw	0
  6185  012950  6FED               	movwf	___lwdiv@quotient& (0+255),b
  6186                           
  6187                           ; BSR set to: 0
  6188  012952  0100               	movlb	0	; () banked
  6189  012954  51EA               	movf	___lwdiv@divisor& (0+255),w,b
  6190  012956  0100               	movlb	0	; () banked
  6191  012958  11EB               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6192  01295A  B4D8               	btfsc	status,2,c
  6193  01295C  D02C               	goto	l1767
  6194                           
  6195                           ; BSR set to: 0
  6196  01295E  0E01               	movlw	1
  6197  012960  0100               	movlb	0	; () banked
  6198  012962  6FEC               	movwf	___lwdiv@counter& (0+255),b
  6199  012964  D006               	goto	l7946
  6200  012966                     l7944:
  6201                           
  6202                           ; BSR set to: 0
  6203  012966  0100               	movlb	0	; () banked
  6204  012968  90D8               	bcf	status,0,c
  6205  01296A  37EA               	rlcf	___lwdiv@divisor& (0+255),f,b
  6206  01296C  37EB               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6207  01296E  0100               	movlb	0	; () banked
  6208  012970  2BEC               	incf	___lwdiv@counter& (0+255),f,b
  6209  012972                     l7946:
  6210                           
  6211                           ; BSR set to: 0
  6212  012972  0100               	movlb	0	; () banked
  6213  012974  AFEB               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6214  012976  D7F7               	goto	l7944
  6215  012978                     l7948:
  6216                           
  6217                           ; BSR set to: 0
  6218  012978  0100               	movlb	0	; () banked
  6219  01297A  90D8               	bcf	status,0,c
  6220  01297C  37ED               	rlcf	___lwdiv@quotient& (0+255),f,b
  6221  01297E  37EE               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6222                           
  6223                           ; BSR set to: 0
  6224  012980  0100               	movlb	0	; () banked
  6225  012982  51EA               	movf	___lwdiv@divisor& (0+255),w,b
  6226  012984  0100               	movlb	0	; () banked
  6227  012986  5DE8               	subwf	___lwdiv@dividend& (0+255),w,b
  6228  012988  0100               	movlb	0	; () banked
  6229  01298A  51EB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6230  01298C  0100               	movlb	0	; () banked
  6231  01298E  59E9               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6232  012990  A0D8               	btfss	status,0,c
  6233  012992  D00A               	goto	l7956
  6234                           
  6235                           ; BSR set to: 0
  6236  012994  0100               	movlb	0	; () banked
  6237  012996  51EA               	movf	___lwdiv@divisor& (0+255),w,b
  6238  012998  0100               	movlb	0	; () banked
  6239  01299A  5FE8               	subwf	___lwdiv@dividend& (0+255),f,b
  6240  01299C  0100               	movlb	0	; () banked
  6241  01299E  51EB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6242  0129A0  0100               	movlb	0	; () banked
  6243  0129A2  5BE9               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6244                           
  6245                           ; BSR set to: 0
  6246  0129A4  0100               	movlb	0	; () banked
  6247  0129A6  81ED               	bsf	___lwdiv@quotient& (0+255),0,b
  6248  0129A8                     l7956:
  6249                           
  6250                           ; BSR set to: 0
  6251  0129A8  0100               	movlb	0	; () banked
  6252  0129AA  90D8               	bcf	status,0,c
  6253  0129AC  33EB               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6254  0129AE  33EA               	rrcf	___lwdiv@divisor& (0+255),f,b
  6255                           
  6256                           ; BSR set to: 0
  6257  0129B0  0100               	movlb	0	; () banked
  6258  0129B2  2FEC               	decfsz	___lwdiv@counter& (0+255),f,b
  6259  0129B4  D7E1               	goto	l7948
  6260  0129B6                     l1767:
  6261                           
  6262                           ; BSR set to: 0
  6263  0129B6  C0ED  F0E8         	movff	___lwdiv@quotient,?___lwdiv
  6264  0129BA  C0EE  F0E9         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6265                           
  6266                           ; BSR set to: 0
  6267  0129BE  0012               	return		;funcret
  6268  0129C0                     __end_of___lwdiv:
  6269                           	opt stack 0
  6270                           tblptru	equ	0xFF8
  6271                           tblptrh	equ	0xFF7
  6272                           tblptrl	equ	0xFF6
  6273                           tablat	equ	0xFF5
  6274                           prodh	equ	0xFF4
  6275                           prodl	equ	0xFF3
  6276                           intcon	equ	0xFF2
  6277                           indf0	equ	0xFEF
  6278                           postinc0	equ	0xFEE
  6279                           fsr0h	equ	0xFEA
  6280                           fsr0l	equ	0xFE9
  6281                           wreg	equ	0xFE8
  6282                           postdec1	equ	0xFE5
  6283                           fsr1l	equ	0xFE1
  6284                           indf2	equ	0xFDF
  6285                           postinc2	equ	0xFDE
  6286                           postdec2	equ	0xFDD
  6287                           plusw2	equ	0xFDB
  6288                           fsr2h	equ	0xFDA
  6289                           fsr2l	equ	0xFD9
  6290                           status	equ	0xFD8
  6291                           
  6292 ;; *************** function _CTMU_read *****************
  6293 ;; Defined at:
  6294 ;;		line 304 in file "../My_header\My_header.h"
  6295 ;; Parameters:    Size  Location     Type
  6296 ;;  ch              1    wreg     unsigned char 
  6297 ;; Auto vars:     Size  Location     Type
  6298 ;;  ch              1   15[BANK0 ] unsigned char 
  6299 ;;  i               1   20[BANK0 ] unsigned char 
  6300 ;;  sum             4   16[BANK0 ] unsigned long 
  6301 ;; Return value:  Size  Location     Type
  6302 ;;                  2   13[BANK0 ] unsigned int 
  6303 ;; Registers used:
  6304 ;;		wreg, status,2, status,0, cstack
  6305 ;; Tracked objects:
  6306 ;;		On entry : 0/0
  6307 ;;		On exit  : 0/0
  6308 ;;		Unchanged: 0/0
  6309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6310 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6311 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6312 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6313 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6314 ;;Total ram usage:        9 bytes
  6315 ;; Hardware stack levels used:    1
  6316 ;; Hardware stack levels required when called:    5
  6317 ;; This function calls:
  6318 ;;		___lldiv
  6319 ;; This function is called by:
  6320 ;;		_ctmu_loop
  6321 ;;		_main
  6322 ;; This function uses a non-reentrant model
  6323 ;;
  6324                           
  6325                           	psect	text21
  6326  011FAE                     __ptext21:
  6327                           	opt stack 0
  6328  011FAE                     _CTMU_read:
  6329                           	opt stack 23
  6330                           
  6331                           ; BSR set to: 0
  6332                           ;incstack = 0
  6333                           ;CTMU_read@ch stored from wreg
  6334  011FAE  0100               	movlb	0	; () banked
  6335  011FB0  6FE2               	movwf	CTMU_read@ch& (0+255),b
  6336                           
  6337                           ;My_header\My_header.h: 305: uint32_t sum = 0;
  6338  011FB2  0E00               	movlw	0
  6339  011FB4  0100               	movlb	0	; () banked
  6340  011FB6  6FE3               	movwf	CTMU_read@sum& (0+255),b
  6341  011FB8  0E00               	movlw	0
  6342  011FBA  6FE4               	movwf	(CTMU_read@sum+1)& (0+255),b
  6343  011FBC  0E00               	movlw	0
  6344  011FBE  6FE5               	movwf	(CTMU_read@sum+2)& (0+255),b
  6345  011FC0  0E00               	movlw	0
  6346  011FC2  6FE6               	movwf	(CTMU_read@sum+3)& (0+255),b
  6347                           
  6348                           ;My_header\My_header.h: 306: for (uint8_t i = 0; i < 10; i++) {
  6349  011FC4  0E00               	movlw	0
  6350  011FC6  0100               	movlb	0	; () banked
  6351  011FC8  6FE7               	movwf	CTMU_read@i& (0+255),b
  6352  011FCA                     l8174:
  6353                           
  6354                           ; BSR set to: 0
  6355  011FCA  0E09               	movlw	9
  6356  011FCC  0100               	movlb	0	; () banked
  6357  011FCE  65E7               	cpfsgt	CTMU_read@i& (0+255),b
  6358  011FD0  D001               	goto	l8178
  6359  011FD2  D029               	goto	l8206
  6360  011FD4                     l8178:
  6361                           
  6362                           ; BSR set to: 0
  6363                           ;My_header\My_header.h: 307: ADCON0bits.CHS = ch;
  6364  011FD4  C0E2  F020         	movff	CTMU_read@ch,??_CTMU_read
  6365  011FD8  4620               	rlncf	??_CTMU_read,f,c
  6366  011FDA  4620               	rlncf	??_CTMU_read,f,c
  6367  011FDC  50C2               	movf	4034,w,c	;volatile
  6368  011FDE  1820               	xorwf	??_CTMU_read,w,c
  6369  011FE0  0BC3               	andlw	-61
  6370  011FE2  1820               	xorwf	??_CTMU_read,w,c
  6371  011FE4  6EC2               	movwf	4034,c	;volatile
  6372                           
  6373                           ; BSR set to: 0
  6374                           ;My_header\My_header.h: 308: CTMUCONHbits.CTMUEN = 1;
  6375  011FE6  8EB3               	bsf	4019,7,c	;volatile
  6376                           
  6377                           ; BSR set to: 0
  6378                           ;My_header\My_header.h: 309: CTMUCONLbits.EDG1STAT = 0;
  6379  011FE8  90B2               	bcf	4018,0,c	;volatile
  6380                           
  6381                           ; BSR set to: 0
  6382                           ;My_header\My_header.h: 310: CTMUCONLbits.EDG2STAT = 0;
  6383  011FEA  92B2               	bcf	4018,1,c	;volatile
  6384                           
  6385                           ; BSR set to: 0
  6386                           ;My_header\My_header.h: 313: CTMUCONHbits.IDISSEN = 1;
  6387  011FEC  82B3               	bsf	4019,1,c	;volatile
  6388                           
  6389                           ; BSR set to: 0
  6390                           ;My_header\My_header.h: 314: _delay((unsigned long)((20)*(48000000/4000000.0)));
  6391  011FEE  0E50               	movlw	80
  6392  011FF0                     u10057:
  6393  011FF0  2EE8               	decfsz	wreg,f,c
  6394  011FF2  D7FE               	goto	u10057
  6395                           
  6396                           ;My_header\My_header.h: 315: CTMUCONHbits.IDISSEN = 0;
  6397  011FF4  92B3               	bcf	4019,1,c	;volatile
  6398                           
  6399                           ;My_header\My_header.h: 317: CTMUCONLbits.EDG1STAT = 1;
  6400  011FF6  80B2               	bsf	4018,0,c	;volatile
  6401                           
  6402                           ;My_header\My_header.h: 318: _delay((unsigned long)((5)*(48000000/4000000.0)));
  6403  011FF8  0E14               	movlw	20
  6404  011FFA                     u10067:
  6405  011FFA  2EE8               	decfsz	wreg,f,c
  6406  011FFC  D7FE               	goto	u10067
  6407                           
  6408                           ;My_header\My_header.h: 319: CTMUCONLbits.EDG1STAT = 0;
  6409  011FFE  90B2               	bcf	4018,0,c	;volatile
  6410                           
  6411                           ;My_header\My_header.h: 321: PIR1bits.ADIF = 0;
  6412  012000  9C9E               	bcf	3998,6,c	;volatile
  6413                           
  6414                           ;My_header\My_header.h: 322: ADCON0bits.GO = 1;
  6415  012002  82C2               	bsf	4034,1,c	;volatile
  6416  012004                     l237:
  6417  012004  AC9E               	btfss	3998,6,c	;volatile
  6418  012006  D7FE               	goto	l237
  6419                           
  6420                           ;My_header\My_header.h: 324: sum += ADRES;
  6421  012008  50C3               	movf	4035,w,c	;volatile
  6422  01200A  0100               	movlb	0	; () banked
  6423  01200C  27E3               	addwf	CTMU_read@sum& (0+255),f,b
  6424  01200E  50C4               	movf	4036,w,c	;volatile
  6425  012010  0100               	movlb	0	; () banked
  6426  012012  23E4               	addwfc	(CTMU_read@sum+1)& (0+255),f,b
  6427  012014  0E00               	movlw	0
  6428  012016  0100               	movlb	0	; () banked
  6429  012018  23E5               	addwfc	(CTMU_read@sum+2)& (0+255),f,b
  6430  01201A  0E00               	movlw	0
  6431  01201C  0100               	movlb	0	; () banked
  6432  01201E  23E6               	addwfc	(CTMU_read@sum+3)& (0+255),f,b
  6433  012020  0100               	movlb	0	; () banked
  6434  012022  2BE7               	incf	CTMU_read@i& (0+255),f,b
  6435  012024  D7D2               	goto	l8174
  6436  012026                     l8206:
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;My_header\My_header.h: 325: }
  6440                           ;My_header\My_header.h: 326: return sum / 10 / 4;
  6441  012026  C0E3  F0D3         	movff	CTMU_read@sum,___lldiv@dividend
  6442  01202A  C0E4  F0D4         	movff	CTMU_read@sum+1,___lldiv@dividend+1
  6443  01202E  C0E5  F0D5         	movff	CTMU_read@sum+2,___lldiv@dividend+2
  6444  012032  C0E6  F0D6         	movff	CTMU_read@sum+3,___lldiv@dividend+3
  6445  012036  0E0A               	movlw	10
  6446  012038  0100               	movlb	0	; () banked
  6447  01203A  6FD7               	movwf	___lldiv@divisor& (0+255),b
  6448  01203C  0E00               	movlw	0
  6449  01203E  6FD8               	movwf	(___lldiv@divisor+1)& (0+255),b
  6450  012040  0E00               	movlw	0
  6451  012042  6FD9               	movwf	(___lldiv@divisor+2)& (0+255),b
  6452  012044  0E00               	movlw	0
  6453  012046  6FDA               	movwf	(___lldiv@divisor+3)& (0+255),b
  6454  012048  EC95  F090         	call	___lldiv	;wreg free
  6455  01204C  0E03               	movlw	3
  6456  01204E  D007               	goto	u8660
  6457  012050                     u8665:
  6458  012050  0100               	movlb	0	; () banked
  6459  012052  90D8               	bcf	status,0,c
  6460  012054  33D6               	rrcf	(?___lldiv+3)& (0+255),f,b
  6461  012056  33D5               	rrcf	(?___lldiv+2)& (0+255),f,b
  6462  012058  0100               	movlb	0	; () banked
  6463  01205A  33D4               	rrcf	(?___lldiv+1)& (0+255),f,b
  6464  01205C  33D3               	rrcf	?___lldiv& (0+255),f,b
  6465  01205E                     u8660:
  6466  01205E  2EE8               	decfsz	wreg,f,c
  6467  012060  D7F7               	goto	u8665
  6468  012062  C0D3  F0E0         	movff	?___lldiv,?_CTMU_read
  6469  012066  C0D4  F0E1         	movff	?___lldiv+1,?_CTMU_read+1
  6470  01206A  0012               	return	
  6471  01206C                     __end_of_CTMU_read:
  6472                           	opt stack 0
  6473                           tblptru	equ	0xFF8
  6474                           tblptrh	equ	0xFF7
  6475                           tblptrl	equ	0xFF6
  6476                           tablat	equ	0xFF5
  6477                           prodh	equ	0xFF4
  6478                           prodl	equ	0xFF3
  6479                           intcon	equ	0xFF2
  6480                           indf0	equ	0xFEF
  6481                           postinc0	equ	0xFEE
  6482                           fsr0h	equ	0xFEA
  6483                           fsr0l	equ	0xFE9
  6484                           wreg	equ	0xFE8
  6485                           postdec1	equ	0xFE5
  6486                           fsr1l	equ	0xFE1
  6487                           indf2	equ	0xFDF
  6488                           postinc2	equ	0xFDE
  6489                           postdec2	equ	0xFDD
  6490                           plusw2	equ	0xFDB
  6491                           fsr2h	equ	0xFDA
  6492                           fsr2l	equ	0xFD9
  6493                           status	equ	0xFD8
  6494                           
  6495 ;; *************** function _RTCC_adjust_time_button *****************
  6496 ;; Defined at:
  6497 ;;		line 363 in file "../My_header\My_RTCC.h"
  6498 ;; Parameters:    Size  Location     Type
  6499 ;;  mode            2   24[BANK1 ] PTR struct button
  6500 ;;		 -> ctm(4), 
  6501 ;;  cnt_inc         2   26[BANK1 ] PTR struct button
  6502 ;;		 -> ct0(4), 
  6503 ;;  cnt_dec         2   28[BANK1 ] PTR struct button
  6504 ;;		 -> ct1(4), 
  6505 ;; Auto vars:     Size  Location     Type
  6506 ;;		None
  6507 ;; Return value:  Size  Location     Type
  6508 ;;		None               void
  6509 ;; Registers used:
  6510 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6511 ;; Tracked objects:
  6512 ;;		On entry : 0/0
  6513 ;;		On exit  : 0/0
  6514 ;;		Unchanged: 0/0
  6515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6516 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6519 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6520 ;;Total ram usage:        6 bytes
  6521 ;; Hardware stack levels used:    1
  6522 ;; Hardware stack levels required when called:    9
  6523 ;; This function calls:
  6524 ;;		_RTCC_adjust_time_cursor
  6525 ;;		_RTCC_adjust_time_dec
  6526 ;;		_RTCC_adjust_time_inc
  6527 ;;		_RTCC_adjust_time_toggle
  6528 ;; This function is called by:
  6529 ;;		_normal_mode_loop
  6530 ;; This function uses a non-reentrant model
  6531 ;;
  6532                           
  6533                           	psect	text22
  6534  0116A6                     __ptext22:
  6535                           	opt stack 0
  6536  0116A6                     _RTCC_adjust_time_button:
  6537                           	opt stack 20
  6538                           
  6539                           ;My_header\My_RTCC.h: 364: if (mode->flag.long_holding_3) {
  6540                           
  6541                           ; BSR set to: 0
  6542                           ;incstack = 0
  6543  0116A6  0101               	movlb	1	; () banked
  6544  0116A8  EE20 F003          	lfsr	2,3
  6545  0116AC  5118               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  6546  0116AE  26D9               	addwf	fsr2l,f,c
  6547  0116B0  5119               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  6548  0116B2  22DA               	addwfc	fsr2h,f,c
  6549  0116B4  0101               	movlb	1	; () banked
  6550  0116B6  A6DF               	btfss	indf2,3,c
  6551  0116B8  D02C               	goto	l8682
  6552                           
  6553                           ; BSR set to: 1
  6554                           ;My_header\My_RTCC.h: 365: mode->flag.long_holding_3 = 0;
  6555  0116BA  0101               	movlb	1	; () banked
  6556  0116BC  EE20 F003          	lfsr	2,3
  6557  0116C0  5118               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  6558  0116C2  26D9               	addwf	fsr2l,f,c
  6559  0116C4  5119               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  6560  0116C6  22DA               	addwfc	fsr2h,f,c
  6561  0116C8  0101               	movlb	1	; () banked
  6562  0116CA  96DF               	bcf	indf2,3,c
  6563                           
  6564                           ; BSR set to: 1
  6565                           ;My_header\My_RTCC.h: 366: RTCC_adjust_time_toggle();
  6566  0116CC  EC8C  F099         	call	_RTCC_adjust_time_toggle	;wreg free
  6567                           
  6568                           ;My_header\My_RTCC.h: 367: mode->flags = 0;
  6569  0116D0  0101               	movlb	1	; () banked
  6570  0116D2  EE20 F002          	lfsr	2,2
  6571  0116D6  5118               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  6572  0116D8  26D9               	addwf	fsr2l,f,c
  6573  0116DA  5119               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  6574  0116DC  22DA               	addwfc	fsr2h,f,c
  6575  0116DE  0E00               	movlw	0
  6576  0116E0  6EDE               	movwf	postinc2,c
  6577  0116E2  0E00               	movlw	0
  6578  0116E4  6EDD               	movwf	postdec2,c
  6579                           
  6580                           ; BSR set to: 1
  6581                           ;My_header\My_RTCC.h: 368: cnt_inc->flags = 0;
  6582  0116E6  0101               	movlb	1	; () banked
  6583  0116E8  EE20 F002          	lfsr	2,2
  6584  0116EC  511A               	movf	RTCC_adjust_time_button@cnt_inc& (0+255),w,b
  6585  0116EE  26D9               	addwf	fsr2l,f,c
  6586  0116F0  511B               	movf	(RTCC_adjust_time_button@cnt_inc+1)& (0+255),w,b
  6587  0116F2  22DA               	addwfc	fsr2h,f,c
  6588  0116F4  0E00               	movlw	0
  6589  0116F6  6EDE               	movwf	postinc2,c
  6590  0116F8  0E00               	movlw	0
  6591  0116FA  6EDD               	movwf	postdec2,c
  6592                           
  6593                           ; BSR set to: 1
  6594                           ;My_header\My_RTCC.h: 369: cnt_dec->flags = 0;
  6595  0116FC  0101               	movlb	1	; () banked
  6596  0116FE  EE20 F002          	lfsr	2,2
  6597  011702  511C               	movf	RTCC_adjust_time_button@cnt_dec& (0+255),w,b
  6598  011704  26D9               	addwf	fsr2l,f,c
  6599  011706  511D               	movf	(RTCC_adjust_time_button@cnt_dec+1)& (0+255),w,b
  6600  011708  22DA               	addwfc	fsr2h,f,c
  6601  01170A  0E00               	movlw	0
  6602  01170C  6EDE               	movwf	postinc2,c
  6603  01170E  0E00               	movlw	0
  6604  011710  6EDD               	movwf	postdec2,c
  6605  011712                     l8682:
  6606                           
  6607                           ; BSR set to: 1
  6608                           ;My_header\My_RTCC.h: 370: }
  6609                           ;My_header\My_RTCC.h: 371: if (edit_flag.flags) {
  6610  011712  0100               	movlb	0	; () banked
  6611  011714  51B5               	movf	_edit_flag& (0+255),w,b
  6612  011716  B4D8               	btfsc	status,2,c
  6613  011718  0012               	return	
  6614                           
  6615                           ; BSR set to: 0
  6616                           ;My_header\My_RTCC.h: 372: if (mode->flag.press) {
  6617  01171A  0101               	movlb	1	; () banked
  6618  01171C  EE20 F002          	lfsr	2,2
  6619  011720  5118               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  6620  011722  26D9               	addwf	fsr2l,f,c
  6621  011724  5119               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  6622  011726  22DA               	addwfc	fsr2h,f,c
  6623  011728  0101               	movlb	1	; () banked
  6624  01172A  A0DF               	btfss	indf2,0,c
  6625  01172C  D00B               	goto	l8690
  6626                           
  6627                           ; BSR set to: 1
  6628                           ;My_header\My_RTCC.h: 373: mode->flag.press = 0;
  6629  01172E  0101               	movlb	1	; () banked
  6630  011730  EE20 F002          	lfsr	2,2
  6631  011734  5118               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  6632  011736  26D9               	addwf	fsr2l,f,c
  6633  011738  5119               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  6634  01173A  22DA               	addwfc	fsr2h,f,c
  6635  01173C  0101               	movlb	1	; () banked
  6636  01173E  90DF               	bcf	indf2,0,c
  6637                           
  6638                           ; BSR set to: 1
  6639                           ;My_header\My_RTCC.h: 374: RTCC_adjust_time_cursor();
  6640  011740  ECB6  F095         	call	_RTCC_adjust_time_cursor	;wreg free
  6641  011744                     l8690:
  6642                           
  6643                           ;My_header\My_RTCC.h: 375: }
  6644                           ;My_header\My_RTCC.h: 376: if (cnt_inc->flag.press) {
  6645  011744  0101               	movlb	1	; () banked
  6646  011746  EE20 F002          	lfsr	2,2
  6647  01174A  511A               	movf	RTCC_adjust_time_button@cnt_inc& (0+255),w,b
  6648  01174C  26D9               	addwf	fsr2l,f,c
  6649  01174E  511B               	movf	(RTCC_adjust_time_button@cnt_inc+1)& (0+255),w,b
  6650  011750  22DA               	addwfc	fsr2h,f,c
  6651  011752  0101               	movlb	1	; () banked
  6652  011754  A0DF               	btfss	indf2,0,c
  6653  011756  D017               	goto	l8696
  6654                           
  6655                           ; BSR set to: 1
  6656                           ;My_header\My_RTCC.h: 377: cnt_inc->flag.press = 0;
  6657  011758  0101               	movlb	1	; () banked
  6658  01175A  EE20 F002          	lfsr	2,2
  6659  01175E  511A               	movf	RTCC_adjust_time_button@cnt_inc& (0+255),w,b
  6660  011760  26D9               	addwf	fsr2l,f,c
  6661  011762  511B               	movf	(RTCC_adjust_time_button@cnt_inc+1)& (0+255),w,b
  6662  011764  22DA               	addwfc	fsr2h,f,c
  6663  011766  0101               	movlb	1	; () banked
  6664  011768  90DF               	bcf	indf2,0,c
  6665                           
  6666                           ; BSR set to: 1
  6667                           ;My_header\My_RTCC.h: 378: RTCC_adjust_time_inc(&caltime_now, &epoch_now);
  6668  01176A  0EF0               	movlw	low _caltime_now
  6669  01176C  0101               	movlb	1	; () banked
  6670  01176E  6F0E               	movwf	RTCC_adjust_time_inc@ct& (0+255),b
  6671  011770  0E01               	movlw	high _caltime_now
  6672  011772  0101               	movlb	1	; () banked
  6673  011774  6F0F               	movwf	(RTCC_adjust_time_inc@ct+1)& (0+255),b
  6674  011776  0ECA               	movlw	low _epoch_now
  6675  011778  0101               	movlb	1	; () banked
  6676  01177A  6F10               	movwf	RTCC_adjust_time_inc@ep& (0+255),b
  6677  01177C  0E00               	movlw	high _epoch_now
  6678  01177E  0101               	movlb	1	; () banked
  6679  011780  6F11               	movwf	(RTCC_adjust_time_inc@ep+1)& (0+255),b
  6680  011782  EC82  F086         	call	_RTCC_adjust_time_inc	;wreg free
  6681  011786                     l8696:
  6682                           
  6683                           ;My_header\My_RTCC.h: 379: }
  6684                           ;My_header\My_RTCC.h: 380: if (cnt_dec->flag.press) {
  6685  011786  0101               	movlb	1	; () banked
  6686  011788  EE20 F002          	lfsr	2,2
  6687  01178C  511C               	movf	RTCC_adjust_time_button@cnt_dec& (0+255),w,b
  6688  01178E  26D9               	addwf	fsr2l,f,c
  6689  011790  511D               	movf	(RTCC_adjust_time_button@cnt_dec+1)& (0+255),w,b
  6690  011792  22DA               	addwfc	fsr2h,f,c
  6691  011794  0101               	movlb	1	; () banked
  6692  011796  A0DF               	btfss	indf2,0,c
  6693  011798  0012               	return	
  6694                           
  6695                           ; BSR set to: 1
  6696                           ;My_header\My_RTCC.h: 381: cnt_dec->flag.press = 0;
  6697  01179A  0101               	movlb	1	; () banked
  6698  01179C  EE20 F002          	lfsr	2,2
  6699  0117A0  511C               	movf	RTCC_adjust_time_button@cnt_dec& (0+255),w,b
  6700  0117A2  26D9               	addwf	fsr2l,f,c
  6701  0117A4  511D               	movf	(RTCC_adjust_time_button@cnt_dec+1)& (0+255),w,b
  6702  0117A6  22DA               	addwfc	fsr2h,f,c
  6703  0117A8  0101               	movlb	1	; () banked
  6704  0117AA  90DF               	bcf	indf2,0,c
  6705                           
  6706                           ; BSR set to: 1
  6707                           ;My_header\My_RTCC.h: 382: RTCC_adjust_time_dec(&caltime_now, &epoch_now);
  6708  0117AC  0EF0               	movlw	low _caltime_now
  6709  0117AE  0101               	movlb	1	; () banked
  6710  0117B0  6F0E               	movwf	RTCC_adjust_time_dec@ct& (0+255),b
  6711  0117B2  0E01               	movlw	high _caltime_now
  6712  0117B4  0101               	movlb	1	; () banked
  6713  0117B6  6F0F               	movwf	(RTCC_adjust_time_dec@ct+1)& (0+255),b
  6714  0117B8  0ECA               	movlw	low _epoch_now
  6715  0117BA  0101               	movlb	1	; () banked
  6716  0117BC  6F10               	movwf	RTCC_adjust_time_dec@ep& (0+255),b
  6717  0117BE  0E00               	movlw	high _epoch_now
  6718  0117C0  0101               	movlb	1	; () banked
  6719  0117C2  6F11               	movwf	(RTCC_adjust_time_dec@ep+1)& (0+255),b
  6720  0117C4  ECB4  F087         	call	_RTCC_adjust_time_dec	;wreg free
  6721  0117C8  0012               	return	
  6722  0117CA                     __end_of_RTCC_adjust_time_button:
  6723                           	opt stack 0
  6724                           tblptru	equ	0xFF8
  6725                           tblptrh	equ	0xFF7
  6726                           tblptrl	equ	0xFF6
  6727                           tablat	equ	0xFF5
  6728                           prodh	equ	0xFF4
  6729                           prodl	equ	0xFF3
  6730                           intcon	equ	0xFF2
  6731                           indf0	equ	0xFEF
  6732                           postinc0	equ	0xFEE
  6733                           fsr0h	equ	0xFEA
  6734                           fsr0l	equ	0xFE9
  6735                           wreg	equ	0xFE8
  6736                           postdec1	equ	0xFE5
  6737                           fsr1l	equ	0xFE1
  6738                           indf2	equ	0xFDF
  6739                           postinc2	equ	0xFDE
  6740                           postdec2	equ	0xFDD
  6741                           plusw2	equ	0xFDB
  6742                           fsr2h	equ	0xFDA
  6743                           fsr2l	equ	0xFD9
  6744                           status	equ	0xFD8
  6745                           
  6746 ;; *************** function _RTCC_adjust_time_toggle *****************
  6747 ;; Defined at:
  6748 ;;		line 303 in file "../My_header\My_RTCC.h"
  6749 ;; Parameters:    Size  Location     Type
  6750 ;;		None
  6751 ;; Auto vars:     Size  Location     Type
  6752 ;;		None
  6753 ;; Return value:  Size  Location     Type
  6754 ;;		None               void
  6755 ;; Registers used:
  6756 ;;		wreg, status,2
  6757 ;; Tracked objects:
  6758 ;;		On entry : 0/0
  6759 ;;		On exit  : 0/0
  6760 ;;		Unchanged: 0/0
  6761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6766 ;;Total ram usage:        0 bytes
  6767 ;; Hardware stack levels used:    1
  6768 ;; Hardware stack levels required when called:    4
  6769 ;; This function calls:
  6770 ;;		Nothing
  6771 ;; This function is called by:
  6772 ;;		_RTCC_adjust_time_button
  6773 ;; This function uses a non-reentrant model
  6774 ;;
  6775                           
  6776                           	psect	text23
  6777  013318                     __ptext23:
  6778                           	opt stack 0
  6779  013318                     _RTCC_adjust_time_toggle:
  6780                           	opt stack 24
  6781                           
  6782                           ;My_header\My_RTCC.h: 304: if (edit_flag.flags) {
  6783                           
  6784                           ;incstack = 0
  6785  013318  0100               	movlb	0	; () banked
  6786  01331A  51B5               	movf	_edit_flag& (0+255),w,b
  6787  01331C  B4D8               	btfsc	status,2,c
  6788  01331E  D004               	goto	l493
  6789                           
  6790                           ; BSR set to: 0
  6791                           ;My_header\My_RTCC.h: 305: edit_flag.flags = 0;
  6792  013320  0E00               	movlw	0
  6793  013322  0100               	movlb	0	; () banked
  6794  013324  6FB5               	movwf	_edit_flag& (0+255),b
  6795                           
  6796                           ;My_header\My_RTCC.h: 306: } else {
  6797  013326  0012               	return	
  6798  013328                     l493:
  6799                           
  6800                           ; BSR set to: 0
  6801                           ;My_header\My_RTCC.h: 307: edit_flag.flag.ss = 1;
  6802  013328  0100               	movlb	0	; () banked
  6803  01332A  81B5               	bsf	_edit_flag& (0+255),0,b
  6804  01332C  0012               	return	
  6805  01332E                     __end_of_RTCC_adjust_time_toggle:
  6806                           	opt stack 0
  6807                           tblptru	equ	0xFF8
  6808                           tblptrh	equ	0xFF7
  6809                           tblptrl	equ	0xFF6
  6810                           tablat	equ	0xFF5
  6811                           prodh	equ	0xFF4
  6812                           prodl	equ	0xFF3
  6813                           intcon	equ	0xFF2
  6814                           indf0	equ	0xFEF
  6815                           postinc0	equ	0xFEE
  6816                           fsr0h	equ	0xFEA
  6817                           fsr0l	equ	0xFE9
  6818                           wreg	equ	0xFE8
  6819                           postdec1	equ	0xFE5
  6820                           fsr1l	equ	0xFE1
  6821                           indf2	equ	0xFDF
  6822                           postinc2	equ	0xFDE
  6823                           postdec2	equ	0xFDD
  6824                           plusw2	equ	0xFDB
  6825                           fsr2h	equ	0xFDA
  6826                           fsr2l	equ	0xFD9
  6827                           status	equ	0xFD8
  6828                           
  6829 ;; *************** function _RTCC_adjust_time_inc *****************
  6830 ;; Defined at:
  6831 ;;		line 321 in file "../My_header\My_RTCC.h"
  6832 ;; Parameters:    Size  Location     Type
  6833 ;;  ct              2   14[BANK1 ] PTR struct .
  6834 ;;		 -> caltime_now(7), 
  6835 ;;  ep              2   16[BANK1 ] PTR unsigned long 
  6836 ;;		 -> epoch_now(4), 
  6837 ;; Auto vars:     Size  Location     Type
  6838 ;;  i               1   22[BANK1 ] unsigned char 
  6839 ;;  i               1   23[BANK1 ] unsigned char 
  6840 ;; Return value:  Size  Location     Type
  6841 ;;		None               void
  6842 ;; Registers used:
  6843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6844 ;; Tracked objects:
  6845 ;;		On entry : 0/0
  6846 ;;		On exit  : 0/0
  6847 ;;		Unchanged: 0/0
  6848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6849 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6850 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6851 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6852 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6853 ;;Total ram usage:       10 bytes
  6854 ;; Hardware stack levels used:    1
  6855 ;; Hardware stack levels required when called:    8
  6856 ;; This function calls:
  6857 ;;		_RTCC_from_RTCC
  6858 ;;		_RTCC_from_epoch
  6859 ;;		___lmul
  6860 ;;		_month_length
  6861 ;; This function is called by:
  6862 ;;		_RTCC_adjust_time_button
  6863 ;; This function uses a non-reentrant model
  6864 ;;
  6865                           
  6866                           	psect	text24
  6867  010D04                     __ptext24:
  6868                           	opt stack 0
  6869  010D04                     _RTCC_adjust_time_inc:
  6870                           	opt stack 20
  6871                           
  6872                           ;My_header\My_RTCC.h: 322: RTCC_from_RTCC(ct, ep);
  6873                           
  6874                           ; BSR set to: 0
  6875                           ;incstack = 0
  6876  010D04  C10E  F100         	movff	RTCC_adjust_time_inc@ct,RTCC_from_RTCC@ct
  6877  010D08  C10F  F101         	movff	RTCC_adjust_time_inc@ct+1,RTCC_from_RTCC@ct+1
  6878  010D0C  C110  F102         	movff	RTCC_adjust_time_inc@ep,RTCC_from_RTCC@ep
  6879  010D10  C111  F103         	movff	RTCC_adjust_time_inc@ep+1,RTCC_from_RTCC@ep+1
  6880  010D14  EC29  F099         	call	_RTCC_from_RTCC	;wreg free
  6881                           
  6882                           ;My_header\My_RTCC.h: 323: if (edit_flag.flag.ss) *ep += 1;
  6883  010D18  0100               	movlb	0	; () banked
  6884  010D1A  A1B5               	btfss	_edit_flag& (0+255),0,b
  6885  010D1C  D009               	goto	l8342
  6886                           
  6887                           ; BSR set to: 0
  6888  010D1E  C110  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6889  010D22  C111  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6890  010D26  2ADE               	incf	postinc2,f,c
  6891  010D28  0E00               	movlw	0
  6892  010D2A  22DE               	addwfc	postinc2,f,c
  6893  010D2C  22DE               	addwfc	postinc2,f,c
  6894  010D2E  22DE               	addwfc	postinc2,f,c
  6895  010D30                     l8342:
  6896                           
  6897                           ; BSR set to: 0
  6898                           ;My_header\My_RTCC.h: 324: if (edit_flag.flag.mm) *ep += ((epoch_t)60);
  6899  010D30  0100               	movlb	0	; () banked
  6900  010D32  A3B5               	btfss	_edit_flag& (0+255),1,b
  6901  010D34  D00A               	goto	l8346
  6902                           
  6903                           ; BSR set to: 0
  6904  010D36  0E3C               	movlw	60
  6905  010D38  C110  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6906  010D3C  C111  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6907  010D40  26DE               	addwf	postinc2,f,c
  6908  010D42  0E00               	movlw	0
  6909  010D44  22DE               	addwfc	postinc2,f,c
  6910  010D46  22DE               	addwfc	postinc2,f,c
  6911  010D48  22DE               	addwfc	postinc2,f,c
  6912  010D4A                     l8346:
  6913                           
  6914                           ; BSR set to: 0
  6915                           ;My_header\My_RTCC.h: 325: if (edit_flag.flag.hh) *ep += ((epoch_t)60*60);
  6916  010D4A  0100               	movlb	0	; () banked
  6917  010D4C  A5B5               	btfss	_edit_flag& (0+255),2,b
  6918  010D4E  D00C               	goto	l8350
  6919                           
  6920                           ; BSR set to: 0
  6921  010D50  C110  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6922  010D54  C111  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6923  010D58  0E10               	movlw	16
  6924  010D5A  26DE               	addwf	postinc2,f,c
  6925  010D5C  0E0E               	movlw	14
  6926  010D5E  22DE               	addwfc	postinc2,f,c
  6927  010D60  0E00               	movlw	0
  6928  010D62  22DE               	addwfc	postinc2,f,c
  6929  010D64  0E00               	movlw	0
  6930  010D66  22DE               	addwfc	postinc2,f,c
  6931  010D68                     l8350:
  6932                           
  6933                           ; BSR set to: 0
  6934                           ;My_header\My_RTCC.h: 326: if (edit_flag.flag.DD) *ep += ((epoch_t)60*60*24);
  6935  010D68  0100               	movlb	0	; () banked
  6936  010D6A  A7B5               	btfss	_edit_flag& (0+255),3,b
  6937  010D6C  D00C               	goto	l8354
  6938                           
  6939                           ; BSR set to: 0
  6940  010D6E  C110  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6941  010D72  C111  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6942  010D76  0E80               	movlw	128
  6943  010D78  26DE               	addwf	postinc2,f,c
  6944  010D7A  0E51               	movlw	81
  6945  010D7C  22DE               	addwfc	postinc2,f,c
  6946  010D7E  0E01               	movlw	1
  6947  010D80  22DE               	addwfc	postinc2,f,c
  6948  010D82  0E00               	movlw	0
  6949  010D84  22DE               	addwfc	postinc2,f,c
  6950  010D86                     l8354:
  6951                           
  6952                           ; BSR set to: 0
  6953                           ;My_header\My_RTCC.h: 327: if (edit_flag.flag.MM) *ep += ((epoch_t)60*60*24) * month_len
      +                          gth(ct->YY, ct->MM);
  6954  010D86  0100               	movlb	0	; () banked
  6955  010D88  A9B5               	btfss	_edit_flag& (0+255),4,b
  6956  010D8A  D037               	goto	l8358
  6957                           
  6958                           ; BSR set to: 0
  6959  010D8C  0101               	movlb	1	; () banked
  6960  010D8E  EE20 F005          	lfsr	2,5
  6961  010D92  510E               	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  6962  010D94  26D9               	addwf	fsr2l,f,c
  6963  010D96  510F               	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  6964  010D98  22DA               	addwfc	fsr2h,f,c
  6965  010D9A  50DF               	movf	indf2,w,c
  6966  010D9C  6E20               	movwf	month_length@month,c
  6967  010D9E  0101               	movlb	1	; () banked
  6968  010DA0  EE20 F006          	lfsr	2,6
  6969  010DA4  510E               	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  6970  010DA6  26D9               	addwf	fsr2l,f,c
  6971  010DA8  510F               	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  6972  010DAA  22DA               	addwfc	fsr2h,f,c
  6973  010DAC  50DF               	movf	indf2,w,c
  6974  010DAE  EC67  F08D         	call	_month_length
  6975  010DB2  0101               	movlb	1	; () banked
  6976  010DB4  6F12               	movwf	??_RTCC_adjust_time_inc& (0+255),b
  6977  010DB6  0101               	movlb	1	; () banked
  6978  010DB8  5112               	movf	??_RTCC_adjust_time_inc& (0+255),w,b
  6979  010DBA  0100               	movlb	0	; () banked
  6980  010DBC  6FE0               	movwf	___lmul@multiplier& (0+255),b
  6981  010DBE  6BE1               	clrf	(___lmul@multiplier+1)& (0+255),b
  6982  010DC0  6BE2               	clrf	(___lmul@multiplier+2)& (0+255),b
  6983  010DC2  6BE3               	clrf	(___lmul@multiplier+3)& (0+255),b
  6984  010DC4  0E80               	movlw	128
  6985  010DC6  0100               	movlb	0	; () banked
  6986  010DC8  6FE4               	movwf	___lmul@multiplicand& (0+255),b
  6987  010DCA  0E51               	movlw	81
  6988  010DCC  6FE5               	movwf	(___lmul@multiplicand+1)& (0+255),b
  6989  010DCE  0E01               	movlw	1
  6990  010DD0  6FE6               	movwf	(___lmul@multiplicand+2)& (0+255),b
  6991  010DD2  0E00               	movlw	0
  6992  010DD4  6FE7               	movwf	(___lmul@multiplicand+3)& (0+255),b
  6993  010DD6  ECE0  F094         	call	___lmul	;wreg free
  6994  010DDA  C110  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6995  010DDE  C111  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6996  010DE2  0100               	movlb	0	; () banked
  6997  010DE4  51E0               	movf	?___lmul& (0+255),w,b
  6998  010DE6  26DE               	addwf	postinc2,f,c
  6999  010DE8  0100               	movlb	0	; () banked
  7000  010DEA  51E1               	movf	(?___lmul+1)& (0+255),w,b
  7001  010DEC  22DE               	addwfc	postinc2,f,c
  7002  010DEE  0100               	movlb	0	; () banked
  7003  010DF0  51E2               	movf	(?___lmul+2)& (0+255),w,b
  7004  010DF2  22DE               	addwfc	postinc2,f,c
  7005  010DF4  0100               	movlb	0	; () banked
  7006  010DF6  51E3               	movf	(?___lmul+3)& (0+255),w,b
  7007  010DF8  22DE               	addwfc	postinc2,f,c
  7008  010DFA                     l8358:
  7009                           
  7010                           ; BSR set to: 0
  7011                           ;My_header\My_RTCC.h: 328: if (edit_flag.flag.YY) {
  7012  010DFA  0100               	movlb	0	; () banked
  7013  010DFC  ABB5               	btfss	_edit_flag& (0+255),5,b
  7014  010DFE  D088               	goto	l8380
  7015                           
  7016                           ; BSR set to: 0
  7017                           ;My_header\My_RTCC.h: 329: for (uint8_t i = ct->MM; i <= 12; i++) {
  7018  010E00  0101               	movlb	1	; () banked
  7019  010E02  EE20 F005          	lfsr	2,5
  7020  010E06  510E               	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  7021  010E08  26D9               	addwf	fsr2l,f,c
  7022  010E0A  510F               	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  7023  010E0C  22DA               	addwfc	fsr2h,f,c
  7024  010E0E  50DF               	movf	indf2,w,c
  7025  010E10  0101               	movlb	1	; () banked
  7026  010E12  6F17               	movwf	RTCC_adjust_time_inc@i& (0+255),b
  7027  010E14                     l8362:
  7028                           
  7029                           ; BSR set to: 1
  7030  010E14  0E0C               	movlw	12
  7031  010E16  0101               	movlb	1	; () banked
  7032  010E18  6517               	cpfsgt	RTCC_adjust_time_inc@i& (0+255),b
  7033  010E1A  D001               	goto	l8366
  7034  010E1C  D033               	goto	l8372
  7035  010E1E                     l8366:
  7036                           
  7037                           ; BSR set to: 1
  7038                           ;My_header\My_RTCC.h: 330: *ep += ((epoch_t)60*60*24) * month_length(ct->YY, i);
  7039  010E1E  C117  F020         	movff	RTCC_adjust_time_inc@i,month_length@month
  7040  010E22  0101               	movlb	1	; () banked
  7041  010E24  EE20 F006          	lfsr	2,6
  7042  010E28  510E               	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  7043  010E2A  26D9               	addwf	fsr2l,f,c
  7044  010E2C  510F               	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  7045  010E2E  22DA               	addwfc	fsr2h,f,c
  7046  010E30  50DF               	movf	indf2,w,c
  7047  010E32  EC67  F08D         	call	_month_length
  7048  010E36  0101               	movlb	1	; () banked
  7049  010E38  6F12               	movwf	??_RTCC_adjust_time_inc& (0+255),b
  7050  010E3A  0101               	movlb	1	; () banked
  7051  010E3C  5112               	movf	??_RTCC_adjust_time_inc& (0+255),w,b
  7052  010E3E  0100               	movlb	0	; () banked
  7053  010E40  6FE0               	movwf	___lmul@multiplier& (0+255),b
  7054  010E42  6BE1               	clrf	(___lmul@multiplier+1)& (0+255),b
  7055  010E44  6BE2               	clrf	(___lmul@multiplier+2)& (0+255),b
  7056  010E46  6BE3               	clrf	(___lmul@multiplier+3)& (0+255),b
  7057  010E48  0E80               	movlw	128
  7058  010E4A  0100               	movlb	0	; () banked
  7059  010E4C  6FE4               	movwf	___lmul@multiplicand& (0+255),b
  7060  010E4E  0E51               	movlw	81
  7061  010E50  6FE5               	movwf	(___lmul@multiplicand+1)& (0+255),b
  7062  010E52  0E01               	movlw	1
  7063  010E54  6FE6               	movwf	(___lmul@multiplicand+2)& (0+255),b
  7064  010E56  0E00               	movlw	0
  7065  010E58  6FE7               	movwf	(___lmul@multiplicand+3)& (0+255),b
  7066  010E5A  ECE0  F094         	call	___lmul	;wreg free
  7067  010E5E  C110  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  7068  010E62  C111  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  7069  010E66  0100               	movlb	0	; () banked
  7070  010E68  51E0               	movf	?___lmul& (0+255),w,b
  7071  010E6A  26DE               	addwf	postinc2,f,c
  7072  010E6C  0100               	movlb	0	; () banked
  7073  010E6E  51E1               	movf	(?___lmul+1)& (0+255),w,b
  7074  010E70  22DE               	addwfc	postinc2,f,c
  7075  010E72  0100               	movlb	0	; () banked
  7076  010E74  51E2               	movf	(?___lmul+2)& (0+255),w,b
  7077  010E76  22DE               	addwfc	postinc2,f,c
  7078  010E78  0100               	movlb	0	; () banked
  7079  010E7A  51E3               	movf	(?___lmul+3)& (0+255),w,b
  7080  010E7C  22DE               	addwfc	postinc2,f,c
  7081                           
  7082                           ; BSR set to: 0
  7083  010E7E  0101               	movlb	1	; () banked
  7084  010E80  2B17               	incf	RTCC_adjust_time_inc@i& (0+255),f,b
  7085  010E82  D7C8               	goto	l8362
  7086  010E84                     l8372:
  7087                           
  7088                           ; BSR set to: 1
  7089                           ;My_header\My_RTCC.h: 331: }
  7090                           ;My_header\My_RTCC.h: 332: for (uint8_t i = 1; i < ct->MM; i++) {
  7091  010E84  0E01               	movlw	1
  7092  010E86  0101               	movlb	1	; () banked
  7093  010E88  6F16               	movwf	RTCC_adjust_time_inc@i_2077& (0+255),b
  7094  010E8A  D036               	goto	l8378
  7095  010E8C                     l8374:
  7096                           
  7097                           ; BSR set to: 1
  7098                           ;My_header\My_RTCC.h: 333: *ep += ((epoch_t)60*60*24) * month_length(ct->YY + 1, i);
  7099  010E8C  C116  F020         	movff	RTCC_adjust_time_inc@i_2077,month_length@month
  7100  010E90  0101               	movlb	1	; () banked
  7101  010E92  EE20 F006          	lfsr	2,6
  7102  010E96  510E               	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  7103  010E98  26D9               	addwf	fsr2l,f,c
  7104  010E9A  510F               	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  7105  010E9C  22DA               	addwfc	fsr2h,f,c
  7106  010E9E  50DF               	movf	indf2,w,c
  7107  010EA0  0101               	movlb	1	; () banked
  7108  010EA2  6F12               	movwf	??_RTCC_adjust_time_inc& (0+255),b
  7109  010EA4  0101               	movlb	1	; () banked
  7110  010EA6  2912               	incf	??_RTCC_adjust_time_inc& (0+255),w,b
  7111  010EA8  EC67  F08D         	call	_month_length
  7112  010EAC  0101               	movlb	1	; () banked
  7113  010EAE  6F13               	movwf	(??_RTCC_adjust_time_inc+1)& (0+255),b
  7114  010EB0  0101               	movlb	1	; () banked
  7115  010EB2  5113               	movf	(??_RTCC_adjust_time_inc+1)& (0+255),w,b
  7116  010EB4  0100               	movlb	0	; () banked
  7117  010EB6  6FE0               	movwf	___lmul@multiplier& (0+255),b
  7118  010EB8  6BE1               	clrf	(___lmul@multiplier+1)& (0+255),b
  7119  010EBA  6BE2               	clrf	(___lmul@multiplier+2)& (0+255),b
  7120  010EBC  6BE3               	clrf	(___lmul@multiplier+3)& (0+255),b
  7121  010EBE  0E80               	movlw	128
  7122  010EC0  0100               	movlb	0	; () banked
  7123  010EC2  6FE4               	movwf	___lmul@multiplicand& (0+255),b
  7124  010EC4  0E51               	movlw	81
  7125  010EC6  6FE5               	movwf	(___lmul@multiplicand+1)& (0+255),b
  7126  010EC8  0E01               	movlw	1
  7127  010ECA  6FE6               	movwf	(___lmul@multiplicand+2)& (0+255),b
  7128  010ECC  0E00               	movlw	0
  7129  010ECE  6FE7               	movwf	(___lmul@multiplicand+3)& (0+255),b
  7130  010ED0  ECE0  F094         	call	___lmul	;wreg free
  7131  010ED4  C110  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  7132  010ED8  C111  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  7133  010EDC  0100               	movlb	0	; () banked
  7134  010EDE  51E0               	movf	?___lmul& (0+255),w,b
  7135  010EE0  26DE               	addwf	postinc2,f,c
  7136  010EE2  0100               	movlb	0	; () banked
  7137  010EE4  51E1               	movf	(?___lmul+1)& (0+255),w,b
  7138  010EE6  22DE               	addwfc	postinc2,f,c
  7139  010EE8  0100               	movlb	0	; () banked
  7140  010EEA  51E2               	movf	(?___lmul+2)& (0+255),w,b
  7141  010EEC  22DE               	addwfc	postinc2,f,c
  7142  010EEE  0100               	movlb	0	; () banked
  7143  010EF0  51E3               	movf	(?___lmul+3)& (0+255),w,b
  7144  010EF2  22DE               	addwfc	postinc2,f,c
  7145                           
  7146                           ; BSR set to: 0
  7147  010EF4  0101               	movlb	1	; () banked
  7148  010EF6  2B16               	incf	RTCC_adjust_time_inc@i_2077& (0+255),f,b
  7149  010EF8                     l8378:
  7150                           
  7151                           ; BSR set to: 1
  7152  010EF8  0101               	movlb	1	; () banked
  7153  010EFA  EE20 F005          	lfsr	2,5
  7154  010EFE  510E               	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  7155  010F00  26D9               	addwf	fsr2l,f,c
  7156  010F02  510F               	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  7157  010F04  22DA               	addwfc	fsr2h,f,c
  7158  010F06  50DE               	movf	postinc2,w,c
  7159  010F08  0101               	movlb	1	; () banked
  7160  010F0A  5D16               	subwf	RTCC_adjust_time_inc@i_2077& (0+255),w,b
  7161  010F0C  A0D8               	btfss	status,0,c
  7162  010F0E  D7BE               	goto	l8374
  7163  010F10                     l8380:
  7164                           
  7165                           ;My_header\My_RTCC.h: 334: }
  7166                           ;My_header\My_RTCC.h: 335: }
  7167                           ;My_header\My_RTCC.h: 337: if (*ep >= 3155760000)*ep -= 3155760000;
  7168  010F10  C110  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  7169  010F14  C111  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  7170  010F18  0E80               	movlw	128
  7171  010F1A  5CDE               	subwf	postinc2,w,c
  7172  010F1C  0E13               	movlw	19
  7173  010F1E  58DE               	subwfb	postinc2,w,c
  7174  010F20  0E19               	movlw	25
  7175  010F22  58DE               	subwfb	postinc2,w,c
  7176  010F24  0EBC               	movlw	188
  7177  010F26  58DE               	subwfb	postinc2,w,c
  7178  010F28  A0D8               	btfss	status,0,c
  7179  010F2A  D00C               	goto	l8384
  7180  010F2C  C110  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  7181  010F30  C111  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  7182  010F34  0E80               	movlw	128
  7183  010F36  5EDE               	subwf	postinc2,f,c
  7184  010F38  0E13               	movlw	19
  7185  010F3A  5ADE               	subwfb	postinc2,f,c
  7186  010F3C  0E19               	movlw	25
  7187  010F3E  5ADE               	subwfb	postinc2,f,c
  7188  010F40  0EBC               	movlw	188
  7189  010F42  5ADE               	subwfb	postinc2,f,c
  7190  010F44                     l8384:
  7191                           
  7192                           ;My_header\My_RTCC.h: 338: RTCC_from_epoch(&caltime_now, &epoch_now);
  7193  010F44  0EF0               	movlw	low _caltime_now
  7194  010F46  0101               	movlb	1	; () banked
  7195  010F48  6F0A               	movwf	RTCC_from_epoch@ct& (0+255),b
  7196  010F4A  0E01               	movlw	high _caltime_now
  7197  010F4C  0101               	movlb	1	; () banked
  7198  010F4E  6F0B               	movwf	(RTCC_from_epoch@ct+1)& (0+255),b
  7199  010F50  0ECA               	movlw	low _epoch_now
  7200  010F52  0101               	movlb	1	; () banked
  7201  010F54  6F0C               	movwf	RTCC_from_epoch@ep& (0+255),b
  7202  010F56  0E00               	movlw	high _epoch_now
  7203  010F58  0101               	movlb	1	; () banked
  7204  010F5A  6F0D               	movwf	(RTCC_from_epoch@ep+1)& (0+255),b
  7205  010F5C  EC18  F099         	call	_RTCC_from_epoch	;wreg free
  7206                           
  7207                           ;My_header\My_RTCC.h: 339: time_change_flag = 1;
  7208  010F60  0E01               	movlw	1
  7209  010F62  0100               	movlb	0	; () banked
  7210  010F64  6FB8               	movwf	_time_change_flag& (0+255),b
  7211                           
  7212                           ; BSR set to: 0
  7213  010F66  0012               	return		;funcret
  7214  010F68                     __end_of_RTCC_adjust_time_inc:
  7215                           	opt stack 0
  7216                           tblptru	equ	0xFF8
  7217                           tblptrh	equ	0xFF7
  7218                           tblptrl	equ	0xFF6
  7219                           tablat	equ	0xFF5
  7220                           prodh	equ	0xFF4
  7221                           prodl	equ	0xFF3
  7222                           intcon	equ	0xFF2
  7223                           indf0	equ	0xFEF
  7224                           postinc0	equ	0xFEE
  7225                           fsr0h	equ	0xFEA
  7226                           fsr0l	equ	0xFE9
  7227                           wreg	equ	0xFE8
  7228                           postdec1	equ	0xFE5
  7229                           fsr1l	equ	0xFE1
  7230                           indf2	equ	0xFDF
  7231                           postinc2	equ	0xFDE
  7232                           postdec2	equ	0xFDD
  7233                           plusw2	equ	0xFDB
  7234                           fsr2h	equ	0xFDA
  7235                           fsr2l	equ	0xFD9
  7236                           status	equ	0xFD8
  7237                           
  7238 ;; *************** function _RTCC_adjust_time_dec *****************
  7239 ;; Defined at:
  7240 ;;		line 342 in file "../My_header\My_RTCC.h"
  7241 ;; Parameters:    Size  Location     Type
  7242 ;;  ct              2   14[BANK1 ] PTR struct .
  7243 ;;		 -> caltime_now(7), 
  7244 ;;  ep              2   16[BANK1 ] PTR unsigned long 
  7245 ;;		 -> epoch_now(4), 
  7246 ;; Auto vars:     Size  Location     Type
  7247 ;;  i               1   22[BANK1 ] unsigned char 
  7248 ;;  i               1   23[BANK1 ] unsigned char 
  7249 ;; Return value:  Size  Location     Type
  7250 ;;		None               void
  7251 ;; Registers used:
  7252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7253 ;; Tracked objects:
  7254 ;;		On entry : 0/0
  7255 ;;		On exit  : 0/0
  7256 ;;		Unchanged: 0/0
  7257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7258 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7259 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7260 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7261 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7262 ;;Total ram usage:       10 bytes
  7263 ;; Hardware stack levels used:    1
  7264 ;; Hardware stack levels required when called:    8
  7265 ;; This function calls:
  7266 ;;		_RTCC_from_RTCC
  7267 ;;		_RTCC_from_epoch
  7268 ;;		___lmul
  7269 ;;		_month_length
  7270 ;; This function is called by:
  7271 ;;		_RTCC_adjust_time_button
  7272 ;; This function uses a non-reentrant model
  7273 ;;
  7274                           
  7275                           	psect	text25
  7276  010F68                     __ptext25:
  7277                           	opt stack 0
  7278  010F68                     _RTCC_adjust_time_dec:
  7279                           	opt stack 20
  7280                           
  7281                           ;My_header\My_RTCC.h: 343: RTCC_from_RTCC(ct, ep);
  7282                           
  7283                           ; BSR set to: 0
  7284                           ;incstack = 0
  7285  010F68  C10E  F100         	movff	RTCC_adjust_time_dec@ct,RTCC_from_RTCC@ct
  7286  010F6C  C10F  F101         	movff	RTCC_adjust_time_dec@ct+1,RTCC_from_RTCC@ct+1
  7287  010F70  C110  F102         	movff	RTCC_adjust_time_dec@ep,RTCC_from_RTCC@ep
  7288  010F74  C111  F103         	movff	RTCC_adjust_time_dec@ep+1,RTCC_from_RTCC@ep+1
  7289  010F78  EC29  F099         	call	_RTCC_from_RTCC	;wreg free
  7290                           
  7291                           ;My_header\My_RTCC.h: 344: if (edit_flag.flag.ss) *ep -= 1;
  7292  010F7C  0100               	movlb	0	; () banked
  7293  010F7E  A1B5               	btfss	_edit_flag& (0+255),0,b
  7294  010F80  D009               	goto	l8394
  7295                           
  7296                           ; BSR set to: 0
  7297  010F82  C110  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  7298  010F86  C111  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  7299  010F8A  06DE               	decf	postinc2,f,c
  7300  010F8C  0E00               	movlw	0
  7301  010F8E  5ADE               	subwfb	postinc2,f,c
  7302  010F90  5ADE               	subwfb	postinc2,f,c
  7303  010F92  5ADE               	subwfb	postinc2,f,c
  7304  010F94                     l8394:
  7305                           
  7306                           ; BSR set to: 0
  7307                           ;My_header\My_RTCC.h: 345: if (edit_flag.flag.mm) *ep -= ((epoch_t)60);
  7308  010F94  0100               	movlb	0	; () banked
  7309  010F96  A3B5               	btfss	_edit_flag& (0+255),1,b
  7310  010F98  D00A               	goto	l8398
  7311                           
  7312                           ; BSR set to: 0
  7313  010F9A  0E3C               	movlw	60
  7314  010F9C  C110  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  7315  010FA0  C111  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  7316  010FA4  5EDE               	subwf	postinc2,f,c
  7317  010FA6  0E00               	movlw	0
  7318  010FA8  5ADE               	subwfb	postinc2,f,c
  7319  010FAA  5ADE               	subwfb	postinc2,f,c
  7320  010FAC  5ADE               	subwfb	postinc2,f,c
  7321  010FAE                     l8398:
  7322                           
  7323                           ; BSR set to: 0
  7324                           ;My_header\My_RTCC.h: 346: if (edit_flag.flag.hh) *ep -= ((epoch_t)60*60);
  7325  010FAE  0100               	movlb	0	; () banked
  7326  010FB0  A5B5               	btfss	_edit_flag& (0+255),2,b
  7327  010FB2  D00C               	goto	l8402
  7328                           
  7329                           ; BSR set to: 0
  7330  010FB4  C110  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  7331  010FB8  C111  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  7332  010FBC  0E10               	movlw	16
  7333  010FBE  5EDE               	subwf	postinc2,f,c
  7334  010FC0  0E0E               	movlw	14
  7335  010FC2  5ADE               	subwfb	postinc2,f,c
  7336  010FC4  0E00               	movlw	0
  7337  010FC6  5ADE               	subwfb	postinc2,f,c
  7338  010FC8  0E00               	movlw	0
  7339  010FCA  5ADE               	subwfb	postinc2,f,c
  7340  010FCC                     l8402:
  7341                           
  7342                           ; BSR set to: 0
  7343                           ;My_header\My_RTCC.h: 347: if (edit_flag.flag.DD) *ep -= ((epoch_t)60*60*24);
  7344  010FCC  0100               	movlb	0	; () banked
  7345  010FCE  A7B5               	btfss	_edit_flag& (0+255),3,b
  7346  010FD0  D00C               	goto	l8406
  7347                           
  7348                           ; BSR set to: 0
  7349  010FD2  C110  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  7350  010FD6  C111  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  7351  010FDA  0E80               	movlw	128
  7352  010FDC  5EDE               	subwf	postinc2,f,c
  7353  010FDE  0E51               	movlw	81
  7354  010FE0  5ADE               	subwfb	postinc2,f,c
  7355  010FE2  0E01               	movlw	1
  7356  010FE4  5ADE               	subwfb	postinc2,f,c
  7357  010FE6  0E00               	movlw	0
  7358  010FE8  5ADE               	subwfb	postinc2,f,c
  7359  010FEA                     l8406:
  7360                           
  7361                           ; BSR set to: 0
  7362                           ;My_header\My_RTCC.h: 348: if (edit_flag.flag.MM) *ep -= ((epoch_t)60*60*24) * month_len
      +                          gth(ct->YY, ct->MM);
  7363  010FEA  0100               	movlb	0	; () banked
  7364  010FEC  A9B5               	btfss	_edit_flag& (0+255),4,b
  7365  010FEE  D037               	goto	l8410
  7366                           
  7367                           ; BSR set to: 0
  7368  010FF0  0101               	movlb	1	; () banked
  7369  010FF2  EE20 F005          	lfsr	2,5
  7370  010FF6  510E               	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  7371  010FF8  26D9               	addwf	fsr2l,f,c
  7372  010FFA  510F               	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  7373  010FFC  22DA               	addwfc	fsr2h,f,c
  7374  010FFE  50DF               	movf	indf2,w,c
  7375  011000  6E20               	movwf	month_length@month,c
  7376  011002  0101               	movlb	1	; () banked
  7377  011004  EE20 F006          	lfsr	2,6
  7378  011008  510E               	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  7379  01100A  26D9               	addwf	fsr2l,f,c
  7380  01100C  510F               	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  7381  01100E  22DA               	addwfc	fsr2h,f,c
  7382  011010  50DF               	movf	indf2,w,c
  7383  011012  EC67  F08D         	call	_month_length
  7384  011016  0101               	movlb	1	; () banked
  7385  011018  6F12               	movwf	??_RTCC_adjust_time_dec& (0+255),b
  7386  01101A  0101               	movlb	1	; () banked
  7387  01101C  5112               	movf	??_RTCC_adjust_time_dec& (0+255),w,b
  7388  01101E  0100               	movlb	0	; () banked
  7389  011020  6FE0               	movwf	___lmul@multiplier& (0+255),b
  7390  011022  6BE1               	clrf	(___lmul@multiplier+1)& (0+255),b
  7391  011024  6BE2               	clrf	(___lmul@multiplier+2)& (0+255),b
  7392  011026  6BE3               	clrf	(___lmul@multiplier+3)& (0+255),b
  7393  011028  0E80               	movlw	128
  7394  01102A  0100               	movlb	0	; () banked
  7395  01102C  6FE4               	movwf	___lmul@multiplicand& (0+255),b
  7396  01102E  0E51               	movlw	81
  7397  011030  6FE5               	movwf	(___lmul@multiplicand+1)& (0+255),b
  7398  011032  0E01               	movlw	1
  7399  011034  6FE6               	movwf	(___lmul@multiplicand+2)& (0+255),b
  7400  011036  0E00               	movlw	0
  7401  011038  6FE7               	movwf	(___lmul@multiplicand+3)& (0+255),b
  7402  01103A  ECE0  F094         	call	___lmul	;wreg free
  7403  01103E  C110  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  7404  011042  C111  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  7405  011046  0100               	movlb	0	; () banked
  7406  011048  51E0               	movf	?___lmul& (0+255),w,b
  7407  01104A  5EDE               	subwf	postinc2,f,c
  7408  01104C  0100               	movlb	0	; () banked
  7409  01104E  51E1               	movf	(?___lmul+1)& (0+255),w,b
  7410  011050  5ADE               	subwfb	postinc2,f,c
  7411  011052  0100               	movlb	0	; () banked
  7412  011054  51E2               	movf	(?___lmul+2)& (0+255),w,b
  7413  011056  5ADE               	subwfb	postinc2,f,c
  7414  011058  0100               	movlb	0	; () banked
  7415  01105A  51E3               	movf	(?___lmul+3)& (0+255),w,b
  7416  01105C  5ADE               	subwfb	postinc2,f,c
  7417  01105E                     l8410:
  7418                           
  7419                           ; BSR set to: 0
  7420                           ;My_header\My_RTCC.h: 349: if (edit_flag.flag.YY) {
  7421  01105E  0100               	movlb	0	; () banked
  7422  011060  ABB5               	btfss	_edit_flag& (0+255),5,b
  7423  011062  D088               	goto	l8432
  7424                           
  7425                           ; BSR set to: 0
  7426                           ;My_header\My_RTCC.h: 350: for (uint8_t i = ct->MM; i >= 1; i--) {
  7427  011064  0101               	movlb	1	; () banked
  7428  011066  EE20 F005          	lfsr	2,5
  7429  01106A  510E               	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  7430  01106C  26D9               	addwf	fsr2l,f,c
  7431  01106E  510F               	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  7432  011070  22DA               	addwfc	fsr2h,f,c
  7433  011072  50DF               	movf	indf2,w,c
  7434  011074  0101               	movlb	1	; () banked
  7435  011076  6F17               	movwf	RTCC_adjust_time_dec@i& (0+255),b
  7436  011078                     l8414:
  7437                           
  7438                           ; BSR set to: 1
  7439  011078  0101               	movlb	1	; () banked
  7440  01107A  5117               	movf	RTCC_adjust_time_dec@i& (0+255),w,b
  7441  01107C  0101               	movlb	1	; () banked
  7442  01107E  B4D8               	btfsc	status,2,c
  7443  011080  D033               	goto	l8424
  7444                           
  7445                           ; BSR set to: 1
  7446                           ;My_header\My_RTCC.h: 351: *ep -= ((epoch_t)60*60*24) * month_length(ct->YY, i);
  7447                           
  7448                           ; BSR set to: 1
  7449                           
  7450                           ; BSR set to: 1
  7451  011082  C117  F020         	movff	RTCC_adjust_time_dec@i,month_length@month
  7452  011086  0101               	movlb	1	; () banked
  7453  011088  EE20 F006          	lfsr	2,6
  7454  01108C  510E               	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  7455  01108E  26D9               	addwf	fsr2l,f,c
  7456  011090  510F               	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  7457  011092  22DA               	addwfc	fsr2h,f,c
  7458  011094  50DF               	movf	indf2,w,c
  7459  011096  EC67  F08D         	call	_month_length
  7460  01109A  0101               	movlb	1	; () banked
  7461  01109C  6F12               	movwf	??_RTCC_adjust_time_dec& (0+255),b
  7462  01109E  0101               	movlb	1	; () banked
  7463  0110A0  5112               	movf	??_RTCC_adjust_time_dec& (0+255),w,b
  7464  0110A2  0100               	movlb	0	; () banked
  7465  0110A4  6FE0               	movwf	___lmul@multiplier& (0+255),b
  7466  0110A6  6BE1               	clrf	(___lmul@multiplier+1)& (0+255),b
  7467  0110A8  6BE2               	clrf	(___lmul@multiplier+2)& (0+255),b
  7468  0110AA  6BE3               	clrf	(___lmul@multiplier+3)& (0+255),b
  7469  0110AC  0E80               	movlw	128
  7470  0110AE  0100               	movlb	0	; () banked
  7471  0110B0  6FE4               	movwf	___lmul@multiplicand& (0+255),b
  7472  0110B2  0E51               	movlw	81
  7473  0110B4  6FE5               	movwf	(___lmul@multiplicand+1)& (0+255),b
  7474  0110B6  0E01               	movlw	1
  7475  0110B8  6FE6               	movwf	(___lmul@multiplicand+2)& (0+255),b
  7476  0110BA  0E00               	movlw	0
  7477  0110BC  6FE7               	movwf	(___lmul@multiplicand+3)& (0+255),b
  7478  0110BE  ECE0  F094         	call	___lmul	;wreg free
  7479  0110C2  C110  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  7480  0110C6  C111  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  7481  0110CA  0100               	movlb	0	; () banked
  7482  0110CC  51E0               	movf	?___lmul& (0+255),w,b
  7483  0110CE  5EDE               	subwf	postinc2,f,c
  7484  0110D0  0100               	movlb	0	; () banked
  7485  0110D2  51E1               	movf	(?___lmul+1)& (0+255),w,b
  7486  0110D4  5ADE               	subwfb	postinc2,f,c
  7487  0110D6  0100               	movlb	0	; () banked
  7488  0110D8  51E2               	movf	(?___lmul+2)& (0+255),w,b
  7489  0110DA  5ADE               	subwfb	postinc2,f,c
  7490  0110DC  0100               	movlb	0	; () banked
  7491  0110DE  51E3               	movf	(?___lmul+3)& (0+255),w,b
  7492  0110E0  5ADE               	subwfb	postinc2,f,c
  7493                           
  7494                           ; BSR set to: 0
  7495  0110E2  0101               	movlb	1	; () banked
  7496  0110E4  0717               	decf	RTCC_adjust_time_dec@i& (0+255),f,b
  7497  0110E6  D7C8               	goto	l8414
  7498  0110E8                     l8424:
  7499                           
  7500                           ; BSR set to: 1
  7501                           ;My_header\My_RTCC.h: 352: }
  7502                           ;My_header\My_RTCC.h: 353: for (uint8_t i = 12; i > ct->MM; i--) {
  7503  0110E8  0E0C               	movlw	12
  7504  0110EA  0101               	movlb	1	; () banked
  7505  0110EC  6F16               	movwf	RTCC_adjust_time_dec@i_2090& (0+255),b
  7506  0110EE  D036               	goto	l8430
  7507  0110F0                     l8426:
  7508                           
  7509                           ; BSR set to: 1
  7510                           ;My_header\My_RTCC.h: 354: *ep -= ((epoch_t)60*60*24) * month_length(ct->YY - 1, i);
  7511  0110F0  C116  F020         	movff	RTCC_adjust_time_dec@i_2090,month_length@month
  7512  0110F4  0101               	movlb	1	; () banked
  7513  0110F6  EE20 F006          	lfsr	2,6
  7514  0110FA  510E               	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  7515  0110FC  26D9               	addwf	fsr2l,f,c
  7516  0110FE  510F               	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  7517  011100  22DA               	addwfc	fsr2h,f,c
  7518  011102  50DF               	movf	indf2,w,c
  7519  011104  0101               	movlb	1	; () banked
  7520  011106  6F12               	movwf	??_RTCC_adjust_time_dec& (0+255),b
  7521  011108  0101               	movlb	1	; () banked
  7522  01110A  0512               	decf	??_RTCC_adjust_time_dec& (0+255),w,b
  7523  01110C  EC67  F08D         	call	_month_length
  7524  011110  0101               	movlb	1	; () banked
  7525  011112  6F13               	movwf	(??_RTCC_adjust_time_dec+1)& (0+255),b
  7526  011114  0101               	movlb	1	; () banked
  7527  011116  5113               	movf	(??_RTCC_adjust_time_dec+1)& (0+255),w,b
  7528  011118  0100               	movlb	0	; () banked
  7529  01111A  6FE0               	movwf	___lmul@multiplier& (0+255),b
  7530  01111C  6BE1               	clrf	(___lmul@multiplier+1)& (0+255),b
  7531  01111E  6BE2               	clrf	(___lmul@multiplier+2)& (0+255),b
  7532  011120  6BE3               	clrf	(___lmul@multiplier+3)& (0+255),b
  7533  011122  0E80               	movlw	128
  7534  011124  0100               	movlb	0	; () banked
  7535  011126  6FE4               	movwf	___lmul@multiplicand& (0+255),b
  7536  011128  0E51               	movlw	81
  7537  01112A  6FE5               	movwf	(___lmul@multiplicand+1)& (0+255),b
  7538  01112C  0E01               	movlw	1
  7539  01112E  6FE6               	movwf	(___lmul@multiplicand+2)& (0+255),b
  7540  011130  0E00               	movlw	0
  7541  011132  6FE7               	movwf	(___lmul@multiplicand+3)& (0+255),b
  7542  011134  ECE0  F094         	call	___lmul	;wreg free
  7543  011138  C110  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  7544  01113C  C111  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  7545  011140  0100               	movlb	0	; () banked
  7546  011142  51E0               	movf	?___lmul& (0+255),w,b
  7547  011144  5EDE               	subwf	postinc2,f,c
  7548  011146  0100               	movlb	0	; () banked
  7549  011148  51E1               	movf	(?___lmul+1)& (0+255),w,b
  7550  01114A  5ADE               	subwfb	postinc2,f,c
  7551  01114C  0100               	movlb	0	; () banked
  7552  01114E  51E2               	movf	(?___lmul+2)& (0+255),w,b
  7553  011150  5ADE               	subwfb	postinc2,f,c
  7554  011152  0100               	movlb	0	; () banked
  7555  011154  51E3               	movf	(?___lmul+3)& (0+255),w,b
  7556  011156  5ADE               	subwfb	postinc2,f,c
  7557                           
  7558                           ; BSR set to: 0
  7559  011158  0101               	movlb	1	; () banked
  7560  01115A  0716               	decf	RTCC_adjust_time_dec@i_2090& (0+255),f,b
  7561  01115C                     l8430:
  7562                           
  7563                           ; BSR set to: 1
  7564  01115C  0101               	movlb	1	; () banked
  7565  01115E  EE20 F005          	lfsr	2,5
  7566  011162  510E               	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  7567  011164  26D9               	addwf	fsr2l,f,c
  7568  011166  510F               	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  7569  011168  22DA               	addwfc	fsr2h,f,c
  7570  01116A  0101               	movlb	1	; () banked
  7571  01116C  5116               	movf	RTCC_adjust_time_dec@i_2090& (0+255),w,b
  7572  01116E  5CDE               	subwf	postinc2,w,c
  7573  011170  A0D8               	btfss	status,0,c
  7574  011172  D7BE               	goto	l8426
  7575  011174                     l8432:
  7576                           
  7577                           ;My_header\My_RTCC.h: 355: }
  7578                           ;My_header\My_RTCC.h: 356: }
  7579                           ;My_header\My_RTCC.h: 358: if (*ep >= 3155760000)*ep += 3155760000;
  7580  011174  C110  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  7581  011178  C111  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  7582  01117C  0E80               	movlw	128
  7583  01117E  5CDE               	subwf	postinc2,w,c
  7584  011180  0E13               	movlw	19
  7585  011182  58DE               	subwfb	postinc2,w,c
  7586  011184  0E19               	movlw	25
  7587  011186  58DE               	subwfb	postinc2,w,c
  7588  011188  0EBC               	movlw	188
  7589  01118A  58DE               	subwfb	postinc2,w,c
  7590  01118C  A0D8               	btfss	status,0,c
  7591  01118E  D00C               	goto	l8436
  7592  011190  C110  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  7593  011194  C111  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  7594  011198  0E80               	movlw	128
  7595  01119A  26DE               	addwf	postinc2,f,c
  7596  01119C  0E13               	movlw	19
  7597  01119E  22DE               	addwfc	postinc2,f,c
  7598  0111A0  0E19               	movlw	25
  7599  0111A2  22DE               	addwfc	postinc2,f,c
  7600  0111A4  0EBC               	movlw	188
  7601  0111A6  22DE               	addwfc	postinc2,f,c
  7602  0111A8                     l8436:
  7603                           
  7604                           ;My_header\My_RTCC.h: 359: RTCC_from_epoch(&caltime_now, &epoch_now);
  7605  0111A8  0EF0               	movlw	low _caltime_now
  7606  0111AA  0101               	movlb	1	; () banked
  7607  0111AC  6F0A               	movwf	RTCC_from_epoch@ct& (0+255),b
  7608  0111AE  0E01               	movlw	high _caltime_now
  7609  0111B0  0101               	movlb	1	; () banked
  7610  0111B2  6F0B               	movwf	(RTCC_from_epoch@ct+1)& (0+255),b
  7611  0111B4  0ECA               	movlw	low _epoch_now
  7612  0111B6  0101               	movlb	1	; () banked
  7613  0111B8  6F0C               	movwf	RTCC_from_epoch@ep& (0+255),b
  7614  0111BA  0E00               	movlw	high _epoch_now
  7615  0111BC  0101               	movlb	1	; () banked
  7616  0111BE  6F0D               	movwf	(RTCC_from_epoch@ep+1)& (0+255),b
  7617  0111C0  EC18  F099         	call	_RTCC_from_epoch	;wreg free
  7618                           
  7619                           ;My_header\My_RTCC.h: 360: time_change_flag = 1;
  7620  0111C4  0E01               	movlw	1
  7621  0111C6  0100               	movlb	0	; () banked
  7622  0111C8  6FB8               	movwf	_time_change_flag& (0+255),b
  7623                           
  7624                           ; BSR set to: 0
  7625  0111CA  0012               	return		;funcret
  7626  0111CC                     __end_of_RTCC_adjust_time_dec:
  7627                           	opt stack 0
  7628                           tblptru	equ	0xFF8
  7629                           tblptrh	equ	0xFF7
  7630                           tblptrl	equ	0xFF6
  7631                           tablat	equ	0xFF5
  7632                           prodh	equ	0xFF4
  7633                           prodl	equ	0xFF3
  7634                           intcon	equ	0xFF2
  7635                           indf0	equ	0xFEF
  7636                           postinc0	equ	0xFEE
  7637                           fsr0h	equ	0xFEA
  7638                           fsr0l	equ	0xFE9
  7639                           wreg	equ	0xFE8
  7640                           postdec1	equ	0xFE5
  7641                           fsr1l	equ	0xFE1
  7642                           indf2	equ	0xFDF
  7643                           postinc2	equ	0xFDE
  7644                           postdec2	equ	0xFDD
  7645                           plusw2	equ	0xFDB
  7646                           fsr2h	equ	0xFDA
  7647                           fsr2l	equ	0xFD9
  7648                           status	equ	0xFD8
  7649                           
  7650 ;; *************** function _RTCC_from_epoch *****************
  7651 ;; Defined at:
  7652 ;;		line 242 in file "../My_header\My_RTCC.h"
  7653 ;; Parameters:    Size  Location     Type
  7654 ;;  ct              2   10[BANK1 ] PTR struct .
  7655 ;;		 -> caltime_now(7), 
  7656 ;;  ep              2   12[BANK1 ] PTR unsigned long 
  7657 ;;		 -> epoch_now(4), 
  7658 ;; Auto vars:     Size  Location     Type
  7659 ;;		None
  7660 ;; Return value:  Size  Location     Type
  7661 ;;		None               void
  7662 ;; Registers used:
  7663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7664 ;; Tracked objects:
  7665 ;;		On entry : 0/0
  7666 ;;		On exit  : 0/0
  7667 ;;		Unchanged: 0/0
  7668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7669 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7672 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7673 ;;Total ram usage:        4 bytes
  7674 ;; Hardware stack levels used:    1
  7675 ;; Hardware stack levels required when called:    7
  7676 ;; This function calls:
  7677 ;;		_caltime_to_RTCC
  7678 ;;		_epoch_to_caltime
  7679 ;; This function is called by:
  7680 ;;		_RTCC_adjust_time_inc
  7681 ;;		_RTCC_adjust_time_dec
  7682 ;;		_main
  7683 ;; This function uses a non-reentrant model
  7684 ;;
  7685                           
  7686                           	psect	text26
  7687  013230                     __ptext26:
  7688                           	opt stack 0
  7689  013230                     _RTCC_from_epoch:
  7690                           	opt stack 20
  7691                           
  7692                           ;My_header\My_RTCC.h: 243: epoch_to_caltime(ct, ep);
  7693                           
  7694                           ; BSR set to: 0
  7695                           ;incstack = 0
  7696  013230  C10A  F0F4         	movff	RTCC_from_epoch@ct,epoch_to_caltime@ct
  7697  013234  C10B  F0F5         	movff	RTCC_from_epoch@ct+1,epoch_to_caltime@ct+1
  7698  013238  C10C  F0F6         	movff	RTCC_from_epoch@ep,epoch_to_caltime@ep
  7699  01323C  C10D  F0F7         	movff	RTCC_from_epoch@ep+1,epoch_to_caltime@ep+1
  7700  013240  ECE6  F088         	call	_epoch_to_caltime	;wreg free
  7701                           
  7702                           ;My_header\My_RTCC.h: 244: caltime_to_RTCC(ct);
  7703  013244  C10A  F0DB         	movff	RTCC_from_epoch@ct,caltime_to_RTCC@ct
  7704  013248  C10B  F0DC         	movff	RTCC_from_epoch@ct+1,caltime_to_RTCC@ct+1
  7705  01324C  ECA6  F08E         	call	_caltime_to_RTCC	;wreg free
  7706  013250  0012               	return		;funcret
  7707  013252                     __end_of_RTCC_from_epoch:
  7708                           	opt stack 0
  7709                           tblptru	equ	0xFF8
  7710                           tblptrh	equ	0xFF7
  7711                           tblptrl	equ	0xFF6
  7712                           tablat	equ	0xFF5
  7713                           prodh	equ	0xFF4
  7714                           prodl	equ	0xFF3
  7715                           intcon	equ	0xFF2
  7716                           indf0	equ	0xFEF
  7717                           postinc0	equ	0xFEE
  7718                           fsr0h	equ	0xFEA
  7719                           fsr0l	equ	0xFE9
  7720                           wreg	equ	0xFE8
  7721                           postdec1	equ	0xFE5
  7722                           fsr1l	equ	0xFE1
  7723                           indf2	equ	0xFDF
  7724                           postinc2	equ	0xFDE
  7725                           postdec2	equ	0xFDD
  7726                           plusw2	equ	0xFDB
  7727                           fsr2h	equ	0xFDA
  7728                           fsr2l	equ	0xFD9
  7729                           status	equ	0xFD8
  7730                           
  7731 ;; *************** function _epoch_to_caltime *****************
  7732 ;; Defined at:
  7733 ;;		line 157 in file "../My_header\My_RTCC.h"
  7734 ;; Parameters:    Size  Location     Type
  7735 ;;  ct              2   33[BANK0 ] PTR struct .
  7736 ;;		 -> caltime_now(7), 
  7737 ;;  ep              2   35[BANK0 ] PTR unsigned long 
  7738 ;;		 -> epoch_now(4), 
  7739 ;; Auto vars:     Size  Location     Type
  7740 ;;  num             4    6[BANK1 ] unsigned long 
  7741 ;;  day             2    2[BANK1 ] unsigned int 
  7742 ;;  day_since_ep    2    0[BANK1 ] unsigned int 
  7743 ;;  month           1    5[BANK1 ] unsigned char 
  7744 ;;  year            1    4[BANK1 ] unsigned char 
  7745 ;; Return value:  Size  Location     Type
  7746 ;;		None               void
  7747 ;; Registers used:
  7748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7749 ;; Tracked objects:
  7750 ;;		On entry : 0/0
  7751 ;;		On exit  : 0/0
  7752 ;;		Unchanged: 0/0
  7753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7754 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7755 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7756 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7757 ;;      Totals:         0       6      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7758 ;;Total ram usage:       16 bytes
  7759 ;; Hardware stack levels used:    1
  7760 ;; Hardware stack levels required when called:    6
  7761 ;; This function calls:
  7762 ;;		_get_quot_rem
  7763 ;;		_month_length
  7764 ;; This function is called by:
  7765 ;;		_RTCC_from_epoch
  7766 ;;		_RTCC_from_caltime
  7767 ;; This function uses a non-reentrant model
  7768 ;;
  7769                           
  7770                           	psect	text27
  7771  0111CC                     __ptext27:
  7772                           	opt stack 0
  7773  0111CC                     _epoch_to_caltime:
  7774                           	opt stack 20
  7775                           
  7776                           ;My_header\My_RTCC.h: 160: static uint16_t day_cache = 0;
  7777                           ;My_header\My_RTCC.h: 161: static uint8_t month_cache = 1;
  7778                           ;My_header\My_RTCC.h: 162: static uint8_t year_cache = 0;
  7779                           ;My_header\My_RTCC.h: 163: uint16_t day_since_epoch;
  7780                           ;My_header\My_RTCC.h: 164: uint16_t day;
  7781                           ;My_header\My_RTCC.h: 165: uint8_t year = 0;
  7782                           
  7783                           ;incstack = 0
  7784  0111CC  0E00               	movlw	0
  7785  0111CE  0101               	movlb	1	; () banked
  7786  0111D0  6F04               	movwf	epoch_to_caltime@year& (0+255),b
  7787                           
  7788                           ;My_header\My_RTCC.h: 166: uint8_t month = 1;
  7789  0111D2  0E01               	movlw	1
  7790  0111D4  0101               	movlb	1	; () banked
  7791  0111D6  6F05               	movwf	epoch_to_caltime@month& (0+255),b
  7792                           
  7793                           ; BSR set to: 1
  7794                           ;My_header\My_RTCC.h: 167: epoch_t num;
  7795                           ;My_header\My_RTCC.h: 169: num = *ep;
  7796  0111D8  C0F6  FFD9         	movff	epoch_to_caltime@ep,fsr2l
  7797  0111DC  C0F7  FFDA         	movff	epoch_to_caltime@ep+1,fsr2h
  7798  0111E0  CFDE F106          	movff	postinc2,epoch_to_caltime@num
  7799  0111E4  CFDE F107          	movff	postinc2,epoch_to_caltime@num+1
  7800  0111E8  CFDE F108          	movff	postinc2,epoch_to_caltime@num+2
  7801  0111EC  CFDE F109          	movff	postinc2,epoch_to_caltime@num+3
  7802                           
  7803                           ; BSR set to: 1
  7804                           ;My_header\My_RTCC.h: 170: ct->ss = get_quot_rem(&num, 60);
  7805  0111F0  0E06               	movlw	low epoch_to_caltime@num
  7806  0111F2  0100               	movlb	0	; () banked
  7807  0111F4  6FEC               	movwf	get_quot_rem@quot& (0+255),b
  7808  0111F6  0E01               	movlw	high epoch_to_caltime@num
  7809  0111F8  0100               	movlb	0	; () banked
  7810  0111FA  6FED               	movwf	(get_quot_rem@quot+1)& (0+255),b
  7811  0111FC  0E3C               	movlw	60
  7812  0111FE  0100               	movlb	0	; () banked
  7813  011200  6FEE               	movwf	get_quot_rem@div& (0+255),b
  7814  011202  ECD3  F08D         	call	_get_quot_rem	;wreg free
  7815  011206  0100               	movlb	0	; () banked
  7816  011208  51EC               	movf	?_get_quot_rem& (0+255),w,b
  7817  01120A  C0F4  FFD9         	movff	epoch_to_caltime@ct,fsr2l
  7818  01120E  C0F5  FFDA         	movff	epoch_to_caltime@ct+1,fsr2h
  7819  011212  6EDF               	movwf	indf2,c
  7820                           
  7821                           ; BSR set to: 0
  7822                           ;My_header\My_RTCC.h: 171: ct->mm = get_quot_rem(&num, 60);
  7823  011214  0E06               	movlw	low epoch_to_caltime@num
  7824  011216  0100               	movlb	0	; () banked
  7825  011218  6FEC               	movwf	get_quot_rem@quot& (0+255),b
  7826  01121A  0E01               	movlw	high epoch_to_caltime@num
  7827  01121C  0100               	movlb	0	; () banked
  7828  01121E  6FED               	movwf	(get_quot_rem@quot+1)& (0+255),b
  7829  011220  0E3C               	movlw	60
  7830  011222  0100               	movlb	0	; () banked
  7831  011224  6FEE               	movwf	get_quot_rem@div& (0+255),b
  7832  011226  ECD3  F08D         	call	_get_quot_rem	;wreg free
  7833  01122A  0100               	movlb	0	; () banked
  7834  01122C  EE20 F001          	lfsr	2,1
  7835  011230  51F4               	movf	epoch_to_caltime@ct& (0+255),w,b
  7836  011232  26D9               	addwf	fsr2l,f,c
  7837  011234  51F5               	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
  7838  011236  22DA               	addwfc	fsr2h,f,c
  7839  011238  0100               	movlb	0	; () banked
  7840  01123A  C0EC  FFDF         	movff	?_get_quot_rem,indf2
  7841                           
  7842                           ; BSR set to: 0
  7843                           ;My_header\My_RTCC.h: 172: ct->hh = get_quot_rem(&num, 24);
  7844  01123E  0E06               	movlw	low epoch_to_caltime@num
  7845  011240  0100               	movlb	0	; () banked
  7846  011242  6FEC               	movwf	get_quot_rem@quot& (0+255),b
  7847  011244  0E01               	movlw	high epoch_to_caltime@num
  7848  011246  0100               	movlb	0	; () banked
  7849  011248  6FED               	movwf	(get_quot_rem@quot+1)& (0+255),b
  7850  01124A  0E18               	movlw	24
  7851  01124C  0100               	movlb	0	; () banked
  7852  01124E  6FEE               	movwf	get_quot_rem@div& (0+255),b
  7853  011250  ECD3  F08D         	call	_get_quot_rem	;wreg free
  7854  011254  0100               	movlb	0	; () banked
  7855  011256  EE20 F002          	lfsr	2,2
  7856  01125A  51F4               	movf	epoch_to_caltime@ct& (0+255),w,b
  7857  01125C  26D9               	addwf	fsr2l,f,c
  7858  01125E  51F5               	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
  7859  011260  22DA               	addwfc	fsr2h,f,c
  7860  011262  0100               	movlb	0	; () banked
  7861  011264  C0EC  FFDF         	movff	?_get_quot_rem,indf2
  7862                           
  7863                           ; BSR set to: 0
  7864                           ;My_header\My_RTCC.h: 173: day = num;
  7865  011268  C106  F102         	movff	epoch_to_caltime@num,epoch_to_caltime@day
  7866  01126C  C107  F103         	movff	epoch_to_caltime@num+1,epoch_to_caltime@day+1
  7867                           
  7868                           ; BSR set to: 0
  7869                           ;My_header\My_RTCC.h: 174: day_since_epoch = day;
  7870  011270  C102  F100         	movff	epoch_to_caltime@day,epoch_to_caltime@day_since_epoch
  7871  011274  C103  F101         	movff	epoch_to_caltime@day+1,epoch_to_caltime@day_since_epoch+1
  7872                           
  7873                           ; BSR set to: 0
  7874                           ;My_header\My_RTCC.h: 176: num += 6;
  7875  011278  0E06               	movlw	6
  7876  01127A  0101               	movlb	1	; () banked
  7877  01127C  2706               	addwf	epoch_to_caltime@num& (0+255),f,b
  7878  01127E  0E00               	movlw	0
  7879  011280  2307               	addwfc	(epoch_to_caltime@num+1)& (0+255),f,b
  7880  011282  2308               	addwfc	(epoch_to_caltime@num+2)& (0+255),f,b
  7881  011284  2309               	addwfc	(epoch_to_caltime@num+3)& (0+255),f,b
  7882                           
  7883                           ; BSR set to: 1
  7884                           ;My_header\My_RTCC.h: 177: ct->EE = get_quot_rem(&num, 7);
  7885  011286  0E06               	movlw	low epoch_to_caltime@num
  7886  011288  0100               	movlb	0	; () banked
  7887  01128A  6FEC               	movwf	get_quot_rem@quot& (0+255),b
  7888  01128C  0E01               	movlw	high epoch_to_caltime@num
  7889  01128E  0100               	movlb	0	; () banked
  7890  011290  6FED               	movwf	(get_quot_rem@quot+1)& (0+255),b
  7891  011292  0E07               	movlw	7
  7892  011294  0100               	movlb	0	; () banked
  7893  011296  6FEE               	movwf	get_quot_rem@div& (0+255),b
  7894  011298  ECD3  F08D         	call	_get_quot_rem	;wreg free
  7895  01129C  0100               	movlb	0	; () banked
  7896  01129E  EE20 F003          	lfsr	2,3
  7897  0112A2  51F4               	movf	epoch_to_caltime@ct& (0+255),w,b
  7898  0112A4  26D9               	addwf	fsr2l,f,c
  7899  0112A6  51F5               	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
  7900  0112A8  22DA               	addwfc	fsr2h,f,c
  7901  0112AA  0100               	movlb	0	; () banked
  7902  0112AC  C0EC  FFDF         	movff	?_get_quot_rem,indf2
  7903                           
  7904                           ;My_header\My_RTCC.h: 186: while (day >= month_length(year, month)) {
  7905  0112B0  D03F               	goto	l8074
  7906  0112B2                     l416:
  7907                           
  7908                           ; BSR set to: 1
  7909                           ;My_header\My_RTCC.h: 187: LATB2 = 1;
  7910  0112B2  848A               	bsf	3978,2,c	;volatile
  7911                           
  7912                           ; BSR set to: 1
  7913                           ;My_header\My_RTCC.h: 188: day = day - month_length(year, month);
  7914  0112B4  C105  F020         	movff	epoch_to_caltime@month,month_length@month
  7915  0112B8  0101               	movlb	1	; () banked
  7916  0112BA  5104               	movf	epoch_to_caltime@year& (0+255),w,b
  7917  0112BC  EC67  F08D         	call	_month_length
  7918  0112C0  0100               	movlb	0	; () banked
  7919  0112C2  6FF8               	movwf	??_epoch_to_caltime& (0+255),b
  7920  0112C4  6BF9               	clrf	(??_epoch_to_caltime+1)& (0+255),b
  7921  0112C6  0100               	movlb	0	; () banked
  7922  0112C8  1FF8               	comf	??_epoch_to_caltime& (0+255),f,b
  7923  0112CA  1FF9               	comf	(??_epoch_to_caltime+1)& (0+255),f,b
  7924  0112CC  4BF8               	infsnz	??_epoch_to_caltime& (0+255),f,b
  7925  0112CE  2BF9               	incf	(??_epoch_to_caltime+1)& (0+255),f,b
  7926  0112D0  0101               	movlb	1	; () banked
  7927  0112D2  5102               	movf	epoch_to_caltime@day& (0+255),w,b
  7928  0112D4  0100               	movlb	0	; () banked
  7929  0112D6  25F8               	addwf	??_epoch_to_caltime& (0+255),w,b
  7930  0112D8  0101               	movlb	1	; () banked
  7931  0112DA  6F02               	movwf	epoch_to_caltime@day& (0+255),b
  7932  0112DC  0101               	movlb	1	; () banked
  7933  0112DE  5103               	movf	(epoch_to_caltime@day+1)& (0+255),w,b
  7934  0112E0  0100               	movlb	0	; () banked
  7935  0112E2  21F9               	addwfc	(??_epoch_to_caltime+1)& (0+255),w,b
  7936  0112E4  0101               	movlb	1	; () banked
  7937  0112E6  6F03               	movwf	(epoch_to_caltime@day+1)& (0+255),b
  7938                           
  7939                           ; BSR set to: 1
  7940                           ;My_header\My_RTCC.h: 189: if (month == 12) {
  7941  0112E8  0E0C               	movlw	12
  7942  0112EA  0101               	movlb	1	; () banked
  7943  0112EC  1905               	xorwf	epoch_to_caltime@month& (0+255),w,b
  7944  0112EE  A4D8               	btfss	status,2,c
  7945  0112F0  D019               	goto	l8068
  7946                           
  7947                           ; BSR set to: 1
  7948                           ;My_header\My_RTCC.h: 190: month = 1;
  7949  0112F2  0E01               	movlw	1
  7950  0112F4  0101               	movlb	1	; () banked
  7951  0112F6  6F05               	movwf	epoch_to_caltime@month& (0+255),b
  7952                           
  7953                           ; BSR set to: 1
  7954                           ;My_header\My_RTCC.h: 191: year++;
  7955  0112F8  0101               	movlb	1	; () banked
  7956  0112FA  2B04               	incf	epoch_to_caltime@year& (0+255),f,b
  7957                           
  7958                           ; BSR set to: 1
  7959                           ;My_header\My_RTCC.h: 193: if (year >= 100) {
  7960  0112FC  0E63               	movlw	99
  7961  0112FE  0101               	movlb	1	; () banked
  7962  011300  6504               	cpfsgt	epoch_to_caltime@year& (0+255),b
  7963  011302  D012               	goto	l8070
  7964                           
  7965                           ; BSR set to: 1
  7966                           ;My_header\My_RTCC.h: 194: *ep -= 3155760000;
  7967  011304  C0F6  FFD9         	movff	epoch_to_caltime@ep,fsr2l
  7968  011308  C0F7  FFDA         	movff	epoch_to_caltime@ep+1,fsr2h
  7969  01130C  0E80               	movlw	128
  7970  01130E  5EDE               	subwf	postinc2,f,c
  7971  011310  0E13               	movlw	19
  7972  011312  5ADE               	subwfb	postinc2,f,c
  7973  011314  0E19               	movlw	25
  7974  011316  5ADE               	subwfb	postinc2,f,c
  7975  011318  0EBC               	movlw	188
  7976  01131A  5ADE               	subwfb	postinc2,f,c
  7977                           
  7978                           ; BSR set to: 1
  7979                           ;My_header\My_RTCC.h: 195: year = 0;
  7980  01131C  0E00               	movlw	0
  7981  01131E  0101               	movlb	1	; () banked
  7982  011320  6F04               	movwf	epoch_to_caltime@year& (0+255),b
  7983                           
  7984                           ; BSR set to: 1
  7985                           ;My_header\My_RTCC.h: 196: }
  7986                           ;My_header\My_RTCC.h: 197: } else {
  7987  011322  D002               	goto	l8070
  7988  011324                     l8068:
  7989                           
  7990                           ; BSR set to: 1
  7991                           ;My_header\My_RTCC.h: 198: month++;
  7992  011324  0101               	movlb	1	; () banked
  7993  011326  2B05               	incf	epoch_to_caltime@month& (0+255),f,b
  7994  011328                     l8070:
  7995                           
  7996                           ; BSR set to: 1
  7997                           ;My_header\My_RTCC.h: 199: }
  7998                           ;My_header\My_RTCC.h: 200: month_cache = month;
  7999  011328  C105  F0FE         	movff	epoch_to_caltime@month,epoch_to_caltime@month_cache
  8000                           
  8001                           ; BSR set to: 1
  8002                           ;My_header\My_RTCC.h: 201: year_cache = year;
  8003  01132C  C104  F0B9         	movff	epoch_to_caltime@year,epoch_to_caltime@year_cache
  8004  011330                     l8074:
  8005  011330  C105  F020         	movff	epoch_to_caltime@month,month_length@month
  8006  011334  0101               	movlb	1	; () banked
  8007  011336  5104               	movf	epoch_to_caltime@year& (0+255),w,b
  8008  011338  EC67  F08D         	call	_month_length
  8009  01133C  0100               	movlb	0	; () banked
  8010  01133E  6FF8               	movwf	??_epoch_to_caltime& (0+255),b
  8011  011340  0100               	movlb	0	; () banked
  8012  011342  51F8               	movf	??_epoch_to_caltime& (0+255),w,b
  8013  011344  0101               	movlb	1	; () banked
  8014  011346  5D02               	subwf	epoch_to_caltime@day& (0+255),w,b
  8015  011348  0E00               	movlw	0
  8016  01134A  5903               	subwfb	(epoch_to_caltime@day+1)& (0+255),w,b
  8017  01134C  B0D8               	btfsc	status,0,c
  8018  01134E  D7B1               	goto	l416
  8019                           
  8020                           ; BSR set to: 1
  8021                           ;My_header\My_RTCC.h: 202: }
  8022                           ;My_header\My_RTCC.h: 203: day_cache = day_since_epoch - day;
  8023                           
  8024                           ; BSR set to: 1
  8025  011350  C102  F0F8         	movff	epoch_to_caltime@day,??_epoch_to_caltime
  8026  011354  C103  F0F9         	movff	epoch_to_caltime@day+1,??_epoch_to_caltime+1
  8027  011358  0100               	movlb	0	; () banked
  8028  01135A  1FF8               	comf	??_epoch_to_caltime& (0+255),f,b
  8029  01135C  1FF9               	comf	(??_epoch_to_caltime+1)& (0+255),f,b
  8030  01135E  4BF8               	infsnz	??_epoch_to_caltime& (0+255),f,b
  8031  011360  2BF9               	incf	(??_epoch_to_caltime+1)& (0+255),f,b
  8032  011362  0101               	movlb	1	; () banked
  8033  011364  5100               	movf	epoch_to_caltime@day_since_epoch& (0+255),w,b
  8034  011366  0100               	movlb	0	; () banked
  8035  011368  25F8               	addwf	??_epoch_to_caltime& (0+255),w,b
  8036  01136A  0100               	movlb	0	; () banked
  8037  01136C  6FA3               	movwf	epoch_to_caltime@day_cache& (0+255),b
  8038  01136E  0101               	movlb	1	; () banked
  8039  011370  5101               	movf	(epoch_to_caltime@day_since_epoch+1)& (0+255),w,b
  8040  011372  0100               	movlb	0	; () banked
  8041  011374  21F9               	addwfc	(??_epoch_to_caltime+1)& (0+255),w,b
  8042  011376  0100               	movlb	0	; () banked
  8043  011378  6FA4               	movwf	(epoch_to_caltime@day_cache+1)& (0+255),b
  8044                           
  8045                           ; BSR set to: 0
  8046                           ;My_header\My_RTCC.h: 204: day++;
  8047  01137A  0101               	movlb	1	; () banked
  8048  01137C  4B02               	infsnz	epoch_to_caltime@day& (0+255),f,b
  8049  01137E  2B03               	incf	(epoch_to_caltime@day+1)& (0+255),f,b
  8050                           
  8051                           ; BSR set to: 1
  8052                           ;My_header\My_RTCC.h: 206: ct->YY = year;
  8053  011380  0100               	movlb	0	; () banked
  8054  011382  EE20 F006          	lfsr	2,6
  8055  011386  51F4               	movf	epoch_to_caltime@ct& (0+255),w,b
  8056  011388  26D9               	addwf	fsr2l,f,c
  8057  01138A  51F5               	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
  8058  01138C  22DA               	addwfc	fsr2h,f,c
  8059  01138E  C104  FFDF         	movff	epoch_to_caltime@year,indf2
  8060                           
  8061                           ; BSR set to: 0
  8062                           ;My_header\My_RTCC.h: 207: ct->MM = month;
  8063  011392  0100               	movlb	0	; () banked
  8064  011394  EE20 F005          	lfsr	2,5
  8065  011398  51F4               	movf	epoch_to_caltime@ct& (0+255),w,b
  8066  01139A  26D9               	addwf	fsr2l,f,c
  8067  01139C  51F5               	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
  8068  01139E  22DA               	addwfc	fsr2h,f,c
  8069  0113A0  C105  FFDF         	movff	epoch_to_caltime@month,indf2
  8070                           
  8071                           ; BSR set to: 0
  8072                           ;My_header\My_RTCC.h: 208: ct->DD = day;
  8073  0113A4  0100               	movlb	0	; () banked
  8074  0113A6  EE20 F004          	lfsr	2,4
  8075  0113AA  51F4               	movf	epoch_to_caltime@ct& (0+255),w,b
  8076  0113AC  26D9               	addwf	fsr2l,f,c
  8077  0113AE  51F5               	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
  8078  0113B0  22DA               	addwfc	fsr2h,f,c
  8079  0113B2  C102  FFDF         	movff	epoch_to_caltime@day,indf2
  8080                           
  8081                           ; BSR set to: 0
  8082  0113B6  0012               	return		;funcret
  8083  0113B8                     __end_of_epoch_to_caltime:
  8084                           	opt stack 0
  8085                           tblptru	equ	0xFF8
  8086                           tblptrh	equ	0xFF7
  8087                           tblptrl	equ	0xFF6
  8088                           tablat	equ	0xFF5
  8089                           prodh	equ	0xFF4
  8090                           prodl	equ	0xFF3
  8091                           intcon	equ	0xFF2
  8092                           indf0	equ	0xFEF
  8093                           postinc0	equ	0xFEE
  8094                           fsr0h	equ	0xFEA
  8095                           fsr0l	equ	0xFE9
  8096                           wreg	equ	0xFE8
  8097                           postdec1	equ	0xFE5
  8098                           fsr1l	equ	0xFE1
  8099                           indf2	equ	0xFDF
  8100                           postinc2	equ	0xFDE
  8101                           postdec2	equ	0xFDD
  8102                           plusw2	equ	0xFDB
  8103                           fsr2h	equ	0xFDA
  8104                           fsr2l	equ	0xFD9
  8105                           status	equ	0xFD8
  8106                           
  8107 ;; *************** function _get_quot_rem *****************
  8108 ;; Defined at:
  8109 ;;		line 112 in file "../My_header\My_RTCC.h"
  8110 ;; Parameters:    Size  Location     Type
  8111 ;;  quot            2   25[BANK0 ] PTR unsigned long 
  8112 ;;		 -> epoch_to_caltime@num(4), 
  8113 ;;  div             1   27[BANK0 ] unsigned char 
  8114 ;; Auto vars:     Size  Location     Type
  8115 ;;  num             4   29[BANK0 ] unsigned long 
  8116 ;; Return value:  Size  Location     Type
  8117 ;;                  4   25[BANK0 ] unsigned long 
  8118 ;; Registers used:
  8119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8120 ;; Tracked objects:
  8121 ;;		On entry : 0/0
  8122 ;;		On exit  : 0/0
  8123 ;;		Unchanged: 0/0
  8124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8125 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8126 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8128 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8129 ;;Total ram usage:        8 bytes
  8130 ;; Hardware stack levels used:    1
  8131 ;; Hardware stack levels required when called:    5
  8132 ;; This function calls:
  8133 ;;		___lldiv
  8134 ;;		___lmul
  8135 ;; This function is called by:
  8136 ;;		_epoch_to_caltime
  8137 ;; This function uses a non-reentrant model
  8138 ;;
  8139                           
  8140                           	psect	text28
  8141  011BA6                     __ptext28:
  8142                           	opt stack 0
  8143  011BA6                     _get_quot_rem:
  8144                           	opt stack 20
  8145                           
  8146                           ;My_header\My_RTCC.h: 115: epoch_t num = *quot;
  8147                           
  8148                           ; BSR set to: 0
  8149                           ;incstack = 0
  8150  011BA6  C0EC  FFD9         	movff	get_quot_rem@quot,fsr2l
  8151  011BAA  C0ED  FFDA         	movff	get_quot_rem@quot+1,fsr2h
  8152  011BAE  CFDE F0F0          	movff	postinc2,get_quot_rem@num
  8153  011BB2  CFDE F0F1          	movff	postinc2,get_quot_rem@num+1
  8154  011BB6  CFDE F0F2          	movff	postinc2,get_quot_rem@num+2
  8155  011BBA  CFDE F0F3          	movff	postinc2,get_quot_rem@num+3
  8156                           
  8157                           ;My_header\My_RTCC.h: 116: return num - (*quot = num / div) * div;
  8158  011BBE  0100               	movlb	0	; () banked
  8159  011BC0  51EE               	movf	get_quot_rem@div& (0+255),w,b
  8160  011BC2  0100               	movlb	0	; () banked
  8161  011BC4  6FD7               	movwf	___lldiv@divisor& (0+255),b
  8162  011BC6  6BD8               	clrf	(___lldiv@divisor+1)& (0+255),b
  8163  011BC8  6BD9               	clrf	(___lldiv@divisor+2)& (0+255),b
  8164  011BCA  6BDA               	clrf	(___lldiv@divisor+3)& (0+255),b
  8165  011BCC  C0F0  F0D3         	movff	get_quot_rem@num,___lldiv@dividend
  8166  011BD0  C0F1  F0D4         	movff	get_quot_rem@num+1,___lldiv@dividend+1
  8167  011BD4  C0F2  F0D5         	movff	get_quot_rem@num+2,___lldiv@dividend+2
  8168  011BD8  C0F3  F0D6         	movff	get_quot_rem@num+3,___lldiv@dividend+3
  8169  011BDC  EC95  F090         	call	___lldiv	;wreg free
  8170  011BE0  C0EC  FFD9         	movff	get_quot_rem@quot,fsr2l
  8171  011BE4  C0ED  FFDA         	movff	get_quot_rem@quot+1,fsr2h
  8172  011BE8  0100               	movlb	0	; () banked
  8173  011BEA  C0D3  FFDE         	movff	?___lldiv,postinc2
  8174  011BEE  0100               	movlb	0	; () banked
  8175  011BF0  C0D4  FFDE         	movff	?___lldiv+1,postinc2
  8176  011BF4  0100               	movlb	0	; () banked
  8177  011BF6  C0D5  FFDE         	movff	?___lldiv+2,postinc2
  8178  011BFA  0100               	movlb	0	; () banked
  8179  011BFC  C0D6  FFDD         	movff	?___lldiv+3,postdec2
  8180  011C00  52DD               	movf	postdec2,f,c
  8181  011C02  52DD               	movf	postdec2,f,c
  8182  011C04  CFDE F0E0          	movff	postinc2,___lmul@multiplier
  8183  011C08  CFDE F0E1          	movff	postinc2,___lmul@multiplier+1
  8184  011C0C  CFDE F0E2          	movff	postinc2,___lmul@multiplier+2
  8185  011C10  CFDE F0E3          	movff	postinc2,___lmul@multiplier+3
  8186  011C14  0100               	movlb	0	; () banked
  8187  011C16  51EE               	movf	get_quot_rem@div& (0+255),w,b
  8188  011C18  0100               	movlb	0	; () banked
  8189  011C1A  6FE4               	movwf	___lmul@multiplicand& (0+255),b
  8190  011C1C  6BE5               	clrf	(___lmul@multiplicand+1)& (0+255),b
  8191  011C1E  6BE6               	clrf	(___lmul@multiplicand+2)& (0+255),b
  8192  011C20  6BE7               	clrf	(___lmul@multiplicand+3)& (0+255),b
  8193  011C22  ECE0  F094         	call	___lmul	;wreg free
  8194  011C26  0100               	movlb	0	; () banked
  8195  011C28  1FE0               	comf	?___lmul& (0+255),f,b
  8196  011C2A  0100               	movlb	0	; () banked
  8197  011C2C  1FE1               	comf	(?___lmul+1)& (0+255),f,b
  8198  011C2E  0100               	movlb	0	; () banked
  8199  011C30  1FE2               	comf	(?___lmul+2)& (0+255),f,b
  8200  011C32  0100               	movlb	0	; () banked
  8201  011C34  1FE3               	comf	(?___lmul+3)& (0+255),f,b
  8202  011C36  0100               	movlb	0	; () banked
  8203  011C38  2BE0               	incf	?___lmul& (0+255),f,b
  8204  011C3A  0E00               	movlw	0
  8205  011C3C  0100               	movlb	0	; () banked
  8206  011C3E  23E1               	addwfc	(?___lmul+1)& (0+255),f,b
  8207  011C40  0100               	movlb	0	; () banked
  8208  011C42  23E2               	addwfc	(?___lmul+2)& (0+255),f,b
  8209  011C44  0100               	movlb	0	; () banked
  8210  011C46  23E3               	addwfc	(?___lmul+3)& (0+255),f,b
  8211  011C48  0100               	movlb	0	; () banked
  8212  011C4A  51F0               	movf	get_quot_rem@num& (0+255),w,b
  8213  011C4C  0100               	movlb	0	; () banked
  8214  011C4E  25E0               	addwf	?___lmul& (0+255),w,b
  8215  011C50  0100               	movlb	0	; () banked
  8216  011C52  6FEC               	movwf	?_get_quot_rem& (0+255),b
  8217  011C54  0100               	movlb	0	; () banked
  8218  011C56  51F1               	movf	(get_quot_rem@num+1)& (0+255),w,b
  8219  011C58  0100               	movlb	0	; () banked
  8220  011C5A  21E1               	addwfc	(?___lmul+1)& (0+255),w,b
  8221  011C5C  0100               	movlb	0	; () banked
  8222  011C5E  6FED               	movwf	(?_get_quot_rem+1)& (0+255),b
  8223  011C60  0100               	movlb	0	; () banked
  8224  011C62  51F2               	movf	(get_quot_rem@num+2)& (0+255),w,b
  8225  011C64  0100               	movlb	0	; () banked
  8226  011C66  21E2               	addwfc	(?___lmul+2)& (0+255),w,b
  8227  011C68  0100               	movlb	0	; () banked
  8228  011C6A  6FEE               	movwf	(?_get_quot_rem+2)& (0+255),b
  8229  011C6C  0100               	movlb	0	; () banked
  8230  011C6E  51F3               	movf	(get_quot_rem@num+3)& (0+255),w,b
  8231  011C70  0100               	movlb	0	; () banked
  8232  011C72  21E3               	addwfc	(?___lmul+3)& (0+255),w,b
  8233  011C74  0100               	movlb	0	; () banked
  8234  011C76  6FEF               	movwf	(?_get_quot_rem+3)& (0+255),b
  8235  011C78  0012               	return	
  8236  011C7A                     __end_of_get_quot_rem:
  8237                           	opt stack 0
  8238                           tblptru	equ	0xFF8
  8239                           tblptrh	equ	0xFF7
  8240                           tblptrl	equ	0xFF6
  8241                           tablat	equ	0xFF5
  8242                           prodh	equ	0xFF4
  8243                           prodl	equ	0xFF3
  8244                           intcon	equ	0xFF2
  8245                           indf0	equ	0xFEF
  8246                           postinc0	equ	0xFEE
  8247                           fsr0h	equ	0xFEA
  8248                           fsr0l	equ	0xFE9
  8249                           wreg	equ	0xFE8
  8250                           postdec1	equ	0xFE5
  8251                           fsr1l	equ	0xFE1
  8252                           indf2	equ	0xFDF
  8253                           postinc2	equ	0xFDE
  8254                           postdec2	equ	0xFDD
  8255                           plusw2	equ	0xFDB
  8256                           fsr2h	equ	0xFDA
  8257                           fsr2l	equ	0xFD9
  8258                           status	equ	0xFD8
  8259                           
  8260 ;; *************** function ___lldiv *****************
  8261 ;; Defined at:
  8262 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lldiv.c"
  8263 ;; Parameters:    Size  Location     Type
  8264 ;;  dividend        4    0[BANK0 ] unsigned long 
  8265 ;;  divisor         4    4[BANK0 ] unsigned long 
  8266 ;; Auto vars:     Size  Location     Type
  8267 ;;  quotient        4    8[BANK0 ] unsigned long 
  8268 ;;  counter         1   12[BANK0 ] unsigned char 
  8269 ;; Return value:  Size  Location     Type
  8270 ;;                  4    0[BANK0 ] unsigned long 
  8271 ;; Registers used:
  8272 ;;		wreg, status,2, status,0
  8273 ;; Tracked objects:
  8274 ;;		On entry : 0/0
  8275 ;;		On exit  : 0/0
  8276 ;;		Unchanged: 0/0
  8277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8278 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8279 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8281 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8282 ;;Total ram usage:       13 bytes
  8283 ;; Hardware stack levels used:    1
  8284 ;; Hardware stack levels required when called:    4
  8285 ;; This function calls:
  8286 ;;		Nothing
  8287 ;; This function is called by:
  8288 ;;		_CTMU_read
  8289 ;;		_get_quot_rem
  8290 ;;		_display_LCD
  8291 ;;		_my_utoa32
  8292 ;; This function uses a non-reentrant model
  8293 ;;
  8294                           
  8295                           	psect	text29
  8296  01212A                     __ptext29:
  8297                           	opt stack 0
  8298  01212A                     ___lldiv:
  8299                           	opt stack 24
  8300                           
  8301                           ; BSR set to: 0
  8302                           ;incstack = 0
  8303  01212A  0E00               	movlw	0
  8304  01212C  0100               	movlb	0	; () banked
  8305  01212E  6FDB               	movwf	___lldiv@quotient& (0+255),b
  8306  012130  0E00               	movlw	0
  8307  012132  6FDC               	movwf	(___lldiv@quotient+1)& (0+255),b
  8308  012134  0E00               	movlw	0
  8309  012136  6FDD               	movwf	(___lldiv@quotient+2)& (0+255),b
  8310  012138  0E00               	movlw	0
  8311  01213A  6FDE               	movwf	(___lldiv@quotient+3)& (0+255),b
  8312                           
  8313                           ; BSR set to: 0
  8314  01213C  0100               	movlb	0	; () banked
  8315  01213E  51D7               	movf	___lldiv@divisor& (0+255),w,b
  8316  012140  0100               	movlb	0	; () banked
  8317  012142  11D8               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8318  012144  0100               	movlb	0	; () banked
  8319  012146  11D9               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8320  012148  0100               	movlb	0	; () banked
  8321  01214A  11DA               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  8322  01214C  B4D8               	btfsc	status,2,c
  8323  01214E  D042               	goto	l1714
  8324                           
  8325                           ; BSR set to: 0
  8326  012150  0E01               	movlw	1
  8327  012152  0100               	movlb	0	; () banked
  8328  012154  6FDF               	movwf	___lldiv@counter& (0+255),b
  8329  012156  D008               	goto	l7872
  8330  012158                     l7870:
  8331                           
  8332                           ; BSR set to: 0
  8333  012158  0100               	movlb	0	; () banked
  8334  01215A  90D8               	bcf	status,0,c
  8335  01215C  37D7               	rlcf	___lldiv@divisor& (0+255),f,b
  8336  01215E  37D8               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8337  012160  37D9               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8338  012162  37DA               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8339  012164  0100               	movlb	0	; () banked
  8340  012166  2BDF               	incf	___lldiv@counter& (0+255),f,b
  8341  012168                     l7872:
  8342                           
  8343                           ; BSR set to: 0
  8344  012168  0100               	movlb	0	; () banked
  8345  01216A  AFDA               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8346  01216C  D7F5               	goto	l7870
  8347  01216E                     l7874:
  8348                           
  8349                           ; BSR set to: 0
  8350  01216E  0100               	movlb	0	; () banked
  8351  012170  90D8               	bcf	status,0,c
  8352  012172  37DB               	rlcf	___lldiv@quotient& (0+255),f,b
  8353  012174  37DC               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8354  012176  37DD               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8355  012178  37DE               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8356                           
  8357                           ; BSR set to: 0
  8358  01217A  0100               	movlb	0	; () banked
  8359  01217C  51D7               	movf	___lldiv@divisor& (0+255),w,b
  8360  01217E  0100               	movlb	0	; () banked
  8361  012180  5DD3               	subwf	___lldiv@dividend& (0+255),w,b
  8362  012182  0100               	movlb	0	; () banked
  8363  012184  51D8               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8364  012186  0100               	movlb	0	; () banked
  8365  012188  59D4               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8366  01218A  0100               	movlb	0	; () banked
  8367  01218C  51D9               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8368  01218E  0100               	movlb	0	; () banked
  8369  012190  59D5               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8370  012192  0100               	movlb	0	; () banked
  8371  012194  51DA               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8372  012196  0100               	movlb	0	; () banked
  8373  012198  59D6               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8374  01219A  A0D8               	btfss	status,0,c
  8375  01219C  D012               	goto	l7882
  8376                           
  8377                           ; BSR set to: 0
  8378  01219E  0100               	movlb	0	; () banked
  8379  0121A0  51D7               	movf	___lldiv@divisor& (0+255),w,b
  8380  0121A2  0100               	movlb	0	; () banked
  8381  0121A4  5FD3               	subwf	___lldiv@dividend& (0+255),f,b
  8382  0121A6  0100               	movlb	0	; () banked
  8383  0121A8  51D8               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8384  0121AA  0100               	movlb	0	; () banked
  8385  0121AC  5BD4               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8386  0121AE  0100               	movlb	0	; () banked
  8387  0121B0  51D9               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8388  0121B2  0100               	movlb	0	; () banked
  8389  0121B4  5BD5               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8390  0121B6  0100               	movlb	0	; () banked
  8391  0121B8  51DA               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8392  0121BA  0100               	movlb	0	; () banked
  8393  0121BC  5BD6               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8394                           
  8395                           ; BSR set to: 0
  8396  0121BE  0100               	movlb	0	; () banked
  8397  0121C0  81DB               	bsf	___lldiv@quotient& (0+255),0,b
  8398  0121C2                     l7882:
  8399                           
  8400                           ; BSR set to: 0
  8401  0121C2  0100               	movlb	0	; () banked
  8402  0121C4  90D8               	bcf	status,0,c
  8403  0121C6  33DA               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8404  0121C8  33D9               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8405  0121CA  33D8               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8406  0121CC  33D7               	rrcf	___lldiv@divisor& (0+255),f,b
  8407                           
  8408                           ; BSR set to: 0
  8409  0121CE  0100               	movlb	0	; () banked
  8410  0121D0  2FDF               	decfsz	___lldiv@counter& (0+255),f,b
  8411  0121D2  D7CD               	goto	l7874
  8412  0121D4                     l1714:
  8413                           
  8414                           ; BSR set to: 0
  8415  0121D4  C0DB  F0D3         	movff	___lldiv@quotient,?___lldiv
  8416  0121D8  C0DC  F0D4         	movff	___lldiv@quotient+1,?___lldiv+1
  8417  0121DC  C0DD  F0D5         	movff	___lldiv@quotient+2,?___lldiv+2
  8418  0121E0  C0DE  F0D6         	movff	___lldiv@quotient+3,?___lldiv+3
  8419                           
  8420                           ; BSR set to: 0
  8421  0121E4  0012               	return		;funcret
  8422  0121E6                     __end_of___lldiv:
  8423                           	opt stack 0
  8424                           tblptru	equ	0xFF8
  8425                           tblptrh	equ	0xFF7
  8426                           tblptrl	equ	0xFF6
  8427                           tablat	equ	0xFF5
  8428                           prodh	equ	0xFF4
  8429                           prodl	equ	0xFF3
  8430                           intcon	equ	0xFF2
  8431                           indf0	equ	0xFEF
  8432                           postinc0	equ	0xFEE
  8433                           fsr0h	equ	0xFEA
  8434                           fsr0l	equ	0xFE9
  8435                           wreg	equ	0xFE8
  8436                           postdec1	equ	0xFE5
  8437                           fsr1l	equ	0xFE1
  8438                           indf2	equ	0xFDF
  8439                           postinc2	equ	0xFDE
  8440                           postdec2	equ	0xFDD
  8441                           plusw2	equ	0xFDB
  8442                           fsr2h	equ	0xFDA
  8443                           fsr2l	equ	0xFD9
  8444                           status	equ	0xFD8
  8445                           
  8446 ;; *************** function _caltime_to_RTCC *****************
  8447 ;; Defined at:
  8448 ;;		line 137 in file "../My_header\My_RTCC.h"
  8449 ;; Parameters:    Size  Location     Type
  8450 ;;  ct              2    8[BANK0 ] PTR struct .
  8451 ;;		 -> caltime_now(7), 
  8452 ;; Auto vars:     Size  Location     Type
  8453 ;;		None
  8454 ;; Return value:  Size  Location     Type
  8455 ;;		None               void
  8456 ;; Registers used:
  8457 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8458 ;; Tracked objects:
  8459 ;;		On entry : 0/0
  8460 ;;		On exit  : 0/0
  8461 ;;		Unchanged: 0/0
  8462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8463 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8466 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8467 ;;Total ram usage:        2 bytes
  8468 ;; Hardware stack levels used:    1
  8469 ;; Hardware stack levels required when called:    6
  8470 ;; This function calls:
  8471 ;;		_d_to_x
  8472 ;; This function is called by:
  8473 ;;		_RTCC_from_epoch
  8474 ;;		_RTCC_from_caltime
  8475 ;; This function uses a non-reentrant model
  8476 ;;
  8477                           
  8478                           	psect	text30
  8479  011D4C                     __ptext30:
  8480                           	opt stack 0
  8481  011D4C                     _caltime_to_RTCC:
  8482                           	opt stack 20
  8483  011D4C                     l403:
  8484  011D4C  010F               	movlb	15	; () banked
  8485  011D4E  B93F               	btfsc	63,4,b	;volatile
  8486  011D50  D7FD               	goto	l403
  8487                           
  8488                           ; BSR set to: 15
  8489                           ;My_header\My_RTCC.h: 139: RTCCFGbits.RTCPTR0 = 1;
  8490  011D52  010F               	movlb	15	; () banked
  8491  011D54  813F               	bsf	63,0,b	;volatile
  8492                           
  8493                           ;My_header\My_RTCC.h: 140: RTCCFGbits.RTCPTR1 = 1;
  8494  011D56  010F               	movlb	15	; () banked
  8495  011D58  833F               	bsf	63,1,b	;volatile
  8496                           
  8497                           ; BSR set to: 15
  8498                           ;My_header\My_RTCC.h: 141: RTCVALL = d_to_x(ct->YY);
  8499  011D5A  0100               	movlb	0	; () banked
  8500  011D5C  EE20 F006          	lfsr	2,6
  8501  011D60  51DB               	movf	caltime_to_RTCC@ct& (0+255),w,b
  8502  011D62  26D9               	addwf	fsr2l,f,c
  8503  011D64  51DC               	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
  8504  011D66  22DA               	addwfc	fsr2h,f,c
  8505  011D68  50DF               	movf	indf2,w,c
  8506  011D6A  EC06  F099         	call	_d_to_x
  8507  011D6E  010F               	movlb	15	; () banked
  8508  011D70  6F3A               	movwf	58,b	;volatile
  8509                           
  8510                           ; BSR set to: 15
  8511                           ;My_header\My_RTCC.h: 142: RTCVALH = 0x00;
  8512  011D72  0E00               	movlw	0
  8513  011D74  010F               	movlb	15	; () banked
  8514  011D76  6F3B               	movwf	59,b	;volatile
  8515                           
  8516                           ; BSR set to: 15
  8517                           ;My_header\My_RTCC.h: 143: RTCCFGbits.RTCPTR0 = 0;
  8518  011D78  010F               	movlb	15	; () banked
  8519  011D7A  913F               	bcf	63,0,b	;volatile
  8520                           
  8521                           ; BSR set to: 15
  8522                           ;My_header\My_RTCC.h: 144: RTCCFGbits.RTCPTR1 = 1;
  8523  011D7C  010F               	movlb	15	; () banked
  8524  011D7E  833F               	bsf	63,1,b	;volatile
  8525                           
  8526                           ; BSR set to: 15
  8527                           ;My_header\My_RTCC.h: 145: RTCVALL = d_to_x(ct->DD);
  8528  011D80  0100               	movlb	0	; () banked
  8529  011D82  EE20 F004          	lfsr	2,4
  8530  011D86  51DB               	movf	caltime_to_RTCC@ct& (0+255),w,b
  8531  011D88  26D9               	addwf	fsr2l,f,c
  8532  011D8A  51DC               	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
  8533  011D8C  22DA               	addwfc	fsr2h,f,c
  8534  011D8E  50DF               	movf	indf2,w,c
  8535  011D90  EC06  F099         	call	_d_to_x
  8536  011D94  010F               	movlb	15	; () banked
  8537  011D96  6F3A               	movwf	58,b	;volatile
  8538                           
  8539                           ; BSR set to: 15
  8540                           ;My_header\My_RTCC.h: 146: RTCVALH = d_to_x(ct->MM);
  8541  011D98  0100               	movlb	0	; () banked
  8542  011D9A  EE20 F005          	lfsr	2,5
  8543  011D9E  51DB               	movf	caltime_to_RTCC@ct& (0+255),w,b
  8544  011DA0  26D9               	addwf	fsr2l,f,c
  8545  011DA2  51DC               	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
  8546  011DA4  22DA               	addwfc	fsr2h,f,c
  8547  011DA6  50DF               	movf	indf2,w,c
  8548  011DA8  EC06  F099         	call	_d_to_x
  8549  011DAC  010F               	movlb	15	; () banked
  8550  011DAE  6F3B               	movwf	59,b	;volatile
  8551                           
  8552                           ; BSR set to: 15
  8553                           ;My_header\My_RTCC.h: 147: RTCCFGbits.RTCPTR0 = 1;
  8554  011DB0  010F               	movlb	15	; () banked
  8555  011DB2  813F               	bsf	63,0,b	;volatile
  8556                           
  8557                           ; BSR set to: 15
  8558                           ;My_header\My_RTCC.h: 148: RTCCFGbits.RTCPTR1 = 0;
  8559  011DB4  010F               	movlb	15	; () banked
  8560  011DB6  933F               	bcf	63,1,b	;volatile
  8561                           
  8562                           ; BSR set to: 15
  8563                           ;My_header\My_RTCC.h: 149: RTCVALL = d_to_x(ct->hh);
  8564  011DB8  0100               	movlb	0	; () banked
  8565  011DBA  EE20 F002          	lfsr	2,2
  8566  011DBE  51DB               	movf	caltime_to_RTCC@ct& (0+255),w,b
  8567  011DC0  26D9               	addwf	fsr2l,f,c
  8568  011DC2  51DC               	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
  8569  011DC4  22DA               	addwfc	fsr2h,f,c
  8570  011DC6  50DF               	movf	indf2,w,c
  8571  011DC8  EC06  F099         	call	_d_to_x
  8572  011DCC  010F               	movlb	15	; () banked
  8573  011DCE  6F3A               	movwf	58,b	;volatile
  8574                           
  8575                           ; BSR set to: 15
  8576                           ;My_header\My_RTCC.h: 150: RTCVALH = d_to_x(ct->EE);
  8577  011DD0  0100               	movlb	0	; () banked
  8578  011DD2  EE20 F003          	lfsr	2,3
  8579  011DD6  51DB               	movf	caltime_to_RTCC@ct& (0+255),w,b
  8580  011DD8  26D9               	addwf	fsr2l,f,c
  8581  011DDA  51DC               	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
  8582  011DDC  22DA               	addwfc	fsr2h,f,c
  8583  011DDE  50DF               	movf	indf2,w,c
  8584  011DE0  EC06  F099         	call	_d_to_x
  8585  011DE4  010F               	movlb	15	; () banked
  8586  011DE6  6F3B               	movwf	59,b	;volatile
  8587                           
  8588                           ; BSR set to: 15
  8589                           ;My_header\My_RTCC.h: 151: RTCCFGbits.RTCPTR0 = 0;
  8590  011DE8  010F               	movlb	15	; () banked
  8591  011DEA  913F               	bcf	63,0,b	;volatile
  8592                           
  8593                           ; BSR set to: 15
  8594                           ;My_header\My_RTCC.h: 152: RTCCFGbits.RTCPTR1 = 0;
  8595  011DEC  010F               	movlb	15	; () banked
  8596  011DEE  933F               	bcf	63,1,b	;volatile
  8597                           
  8598                           ; BSR set to: 15
  8599                           ;My_header\My_RTCC.h: 153: RTCVALL = d_to_x(ct->ss);
  8600  011DF0  C0DB  FFD9         	movff	caltime_to_RTCC@ct,fsr2l
  8601  011DF4  C0DC  FFDA         	movff	caltime_to_RTCC@ct+1,fsr2h
  8602  011DF8  50DF               	movf	indf2,w,c
  8603  011DFA  EC06  F099         	call	_d_to_x
  8604  011DFE  010F               	movlb	15	; () banked
  8605  011E00  6F3A               	movwf	58,b	;volatile
  8606                           
  8607                           ; BSR set to: 15
  8608                           ;My_header\My_RTCC.h: 154: RTCVALH = d_to_x(ct->mm);
  8609  011E02  0100               	movlb	0	; () banked
  8610  011E04  EE20 F001          	lfsr	2,1
  8611  011E08  51DB               	movf	caltime_to_RTCC@ct& (0+255),w,b
  8612  011E0A  26D9               	addwf	fsr2l,f,c
  8613  011E0C  51DC               	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
  8614  011E0E  22DA               	addwfc	fsr2h,f,c
  8615  011E10  50DF               	movf	indf2,w,c
  8616  011E12  EC06  F099         	call	_d_to_x
  8617  011E16  010F               	movlb	15	; () banked
  8618  011E18  6F3B               	movwf	59,b	;volatile
  8619                           
  8620                           ; BSR set to: 15
  8621  011E1A  0012               	return		;funcret
  8622  011E1C                     __end_of_caltime_to_RTCC:
  8623                           	opt stack 0
  8624                           tblptru	equ	0xFF8
  8625                           tblptrh	equ	0xFF7
  8626                           tblptrl	equ	0xFF6
  8627                           tablat	equ	0xFF5
  8628                           prodh	equ	0xFF4
  8629                           prodl	equ	0xFF3
  8630                           intcon	equ	0xFF2
  8631                           indf0	equ	0xFEF
  8632                           postinc0	equ	0xFEE
  8633                           fsr0h	equ	0xFEA
  8634                           fsr0l	equ	0xFE9
  8635                           wreg	equ	0xFE8
  8636                           postdec1	equ	0xFE5
  8637                           fsr1l	equ	0xFE1
  8638                           indf2	equ	0xFDF
  8639                           postinc2	equ	0xFDE
  8640                           postdec2	equ	0xFDD
  8641                           plusw2	equ	0xFDB
  8642                           fsr2h	equ	0xFDA
  8643                           fsr2l	equ	0xFD9
  8644                           status	equ	0xFD8
  8645                           
  8646 ;; *************** function _d_to_x *****************
  8647 ;; Defined at:
  8648 ;;		line 73 in file "../My_header\My_RTCC.h"
  8649 ;; Parameters:    Size  Location     Type
  8650 ;;  dec             1    wreg     unsigned char 
  8651 ;; Auto vars:     Size  Location     Type
  8652 ;;  dec             1   31[COMRAM] unsigned char 
  8653 ;; Return value:  Size  Location     Type
  8654 ;;                  1    wreg      unsigned char 
  8655 ;; Registers used:
  8656 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8657 ;; Tracked objects:
  8658 ;;		On entry : 0/0
  8659 ;;		On exit  : 0/0
  8660 ;;		Unchanged: 0/0
  8661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8663 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8665 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8666 ;;Total ram usage:        1 bytes
  8667 ;; Hardware stack levels used:    1
  8668 ;; Hardware stack levels required when called:    5
  8669 ;; This function calls:
  8670 ;;		___awdiv
  8671 ;; This function is called by:
  8672 ;;		_caltime_to_RTCC
  8673 ;; This function uses a non-reentrant model
  8674 ;;
  8675                           
  8676                           	psect	text31
  8677  01320C                     __ptext31:
  8678                           	opt stack 0
  8679  01320C                     _d_to_x:
  8680                           	opt stack 20
  8681                           
  8682                           ; BSR set to: 15
  8683                           ;incstack = 0
  8684                           ;d_to_x@dec stored from wreg
  8685  01320C  6E20               	movwf	d_to_x@dec,c
  8686                           
  8687                           ;My_header\My_RTCC.h: 76: return dec / 10 * 6 + dec;
  8688  01320E  C020  F0D3         	movff	d_to_x@dec,___awdiv@dividend
  8689  013212  0100               	movlb	0	; () banked
  8690  013214  6BD4               	clrf	(___awdiv@dividend+1)& (0+255),b
  8691  013216  0E00               	movlw	0
  8692  013218  0100               	movlb	0	; () banked
  8693  01321A  6FD6               	movwf	(___awdiv@divisor+1)& (0+255),b
  8694  01321C  0E0A               	movlw	10
  8695  01321E  6FD5               	movwf	___awdiv@divisor& (0+255),b
  8696  013220  EC36  F090         	call	___awdiv	;wreg free
  8697  013224  0100               	movlb	0	; () banked
  8698  013226  51D3               	movf	?___awdiv& (0+255),w,b
  8699  013228  0D06               	mullw	6
  8700  01322A  50F3               	movf	prodl,w,c
  8701  01322C  2420               	addwf	d_to_x@dec,w,c
  8702  01322E  0012               	return	
  8703  013230                     __end_of_d_to_x:
  8704                           	opt stack 0
  8705                           tblptru	equ	0xFF8
  8706                           tblptrh	equ	0xFF7
  8707                           tblptrl	equ	0xFF6
  8708                           tablat	equ	0xFF5
  8709                           prodh	equ	0xFF4
  8710                           prodl	equ	0xFF3
  8711                           intcon	equ	0xFF2
  8712                           indf0	equ	0xFEF
  8713                           postinc0	equ	0xFEE
  8714                           fsr0h	equ	0xFEA
  8715                           fsr0l	equ	0xFE9
  8716                           wreg	equ	0xFE8
  8717                           postdec1	equ	0xFE5
  8718                           fsr1l	equ	0xFE1
  8719                           indf2	equ	0xFDF
  8720                           postinc2	equ	0xFDE
  8721                           postdec2	equ	0xFDD
  8722                           plusw2	equ	0xFDB
  8723                           fsr2h	equ	0xFDA
  8724                           fsr2l	equ	0xFD9
  8725                           status	equ	0xFD8
  8726                           
  8727 ;; *************** function ___awdiv *****************
  8728 ;; Defined at:
  8729 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  8730 ;; Parameters:    Size  Location     Type
  8731 ;;  dividend        2    0[BANK0 ] int 
  8732 ;;  divisor         2    2[BANK0 ] int 
  8733 ;; Auto vars:     Size  Location     Type
  8734 ;;  quotient        2    6[BANK0 ] int 
  8735 ;;  sign            1    5[BANK0 ] unsigned char 
  8736 ;;  counter         1    4[BANK0 ] unsigned char 
  8737 ;; Return value:  Size  Location     Type
  8738 ;;                  2    0[BANK0 ] int 
  8739 ;; Registers used:
  8740 ;;		wreg, status,2, status,0
  8741 ;; Tracked objects:
  8742 ;;		On entry : 0/0
  8743 ;;		On exit  : 0/0
  8744 ;;		Unchanged: 0/0
  8745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8746 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8747 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8749 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8750 ;;Total ram usage:        8 bytes
  8751 ;; Hardware stack levels used:    1
  8752 ;; Hardware stack levels required when called:    4
  8753 ;; This function calls:
  8754 ;;		Nothing
  8755 ;; This function is called by:
  8756 ;;		_d_to_x
  8757 ;; This function uses a non-reentrant model
  8758 ;;
  8759                           
  8760                           	psect	text32
  8761  01206C                     __ptext32:
  8762                           	opt stack 0
  8763  01206C                     ___awdiv:
  8764                           	opt stack 20
  8765                           
  8766                           ; BSR set to: 0
  8767                           ;incstack = 0
  8768  01206C  0E00               	movlw	0
  8769  01206E  0100               	movlb	0	; () banked
  8770  012070  6FD8               	movwf	___awdiv@sign& (0+255),b
  8771                           
  8772                           ; BSR set to: 0
  8773  012072  0100               	movlb	0	; () banked
  8774  012074  AFD6               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8775  012076  D008               	goto	l7792
  8776                           
  8777                           ; BSR set to: 0
  8778  012078  0100               	movlb	0	; () banked
  8779  01207A  6DD5               	negf	___awdiv@divisor& (0+255),b
  8780  01207C  1FD6               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8781  01207E  B0D8               	btfsc	status,0,c
  8782  012080  2BD6               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8783                           
  8784                           ; BSR set to: 0
  8785  012082  0E01               	movlw	1
  8786  012084  0100               	movlb	0	; () banked
  8787  012086  6FD8               	movwf	___awdiv@sign& (0+255),b
  8788  012088                     l7792:
  8789                           
  8790                           ; BSR set to: 0
  8791  012088  0100               	movlb	0	; () banked
  8792  01208A  AFD4               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8793  01208C  D008               	goto	l7798
  8794                           
  8795                           ; BSR set to: 0
  8796  01208E  0100               	movlb	0	; () banked
  8797  012090  6DD3               	negf	___awdiv@dividend& (0+255),b
  8798  012092  1FD4               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8799  012094  B0D8               	btfsc	status,0,c
  8800  012096  2BD4               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8801                           
  8802                           ; BSR set to: 0
  8803  012098  0E01               	movlw	1
  8804  01209A  0100               	movlb	0	; () banked
  8805  01209C  1BD8               	xorwf	___awdiv@sign& (0+255),f,b
  8806  01209E                     l7798:
  8807                           
  8808                           ; BSR set to: 0
  8809  01209E  0E00               	movlw	0
  8810  0120A0  0100               	movlb	0	; () banked
  8811  0120A2  6FDA               	movwf	(___awdiv@quotient+1)& (0+255),b
  8812  0120A4  0E00               	movlw	0
  8813  0120A6  6FD9               	movwf	___awdiv@quotient& (0+255),b
  8814                           
  8815                           ; BSR set to: 0
  8816  0120A8  0100               	movlb	0	; () banked
  8817  0120AA  51D5               	movf	___awdiv@divisor& (0+255),w,b
  8818  0120AC  0100               	movlb	0	; () banked
  8819  0120AE  11D6               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8820  0120B0  B4D8               	btfsc	status,2,c
  8821  0120B2  D02C               	goto	l7820
  8822                           
  8823                           ; BSR set to: 0
  8824  0120B4  0E01               	movlw	1
  8825  0120B6  0100               	movlb	0	; () banked
  8826  0120B8  6FD7               	movwf	___awdiv@counter& (0+255),b
  8827  0120BA  D006               	goto	l7806
  8828  0120BC                     l7804:
  8829                           
  8830                           ; BSR set to: 0
  8831  0120BC  0100               	movlb	0	; () banked
  8832  0120BE  90D8               	bcf	status,0,c
  8833  0120C0  37D5               	rlcf	___awdiv@divisor& (0+255),f,b
  8834  0120C2  37D6               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8835  0120C4  0100               	movlb	0	; () banked
  8836  0120C6  2BD7               	incf	___awdiv@counter& (0+255),f,b
  8837  0120C8                     l7806:
  8838                           
  8839                           ; BSR set to: 0
  8840  0120C8  0100               	movlb	0	; () banked
  8841  0120CA  AFD6               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8842  0120CC  D7F7               	goto	l7804
  8843  0120CE                     l7808:
  8844                           
  8845                           ; BSR set to: 0
  8846  0120CE  0100               	movlb	0	; () banked
  8847  0120D0  90D8               	bcf	status,0,c
  8848  0120D2  37D9               	rlcf	___awdiv@quotient& (0+255),f,b
  8849  0120D4  37DA               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8850                           
  8851                           ; BSR set to: 0
  8852  0120D6  0100               	movlb	0	; () banked
  8853  0120D8  51D5               	movf	___awdiv@divisor& (0+255),w,b
  8854  0120DA  0100               	movlb	0	; () banked
  8855  0120DC  5DD3               	subwf	___awdiv@dividend& (0+255),w,b
  8856  0120DE  0100               	movlb	0	; () banked
  8857  0120E0  51D6               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8858  0120E2  0100               	movlb	0	; () banked
  8859  0120E4  59D4               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8860  0120E6  A0D8               	btfss	status,0,c
  8861  0120E8  D00A               	goto	l7816
  8862                           
  8863                           ; BSR set to: 0
  8864  0120EA  0100               	movlb	0	; () banked
  8865  0120EC  51D5               	movf	___awdiv@divisor& (0+255),w,b
  8866  0120EE  0100               	movlb	0	; () banked
  8867  0120F0  5FD3               	subwf	___awdiv@dividend& (0+255),f,b
  8868  0120F2  0100               	movlb	0	; () banked
  8869  0120F4  51D6               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8870  0120F6  0100               	movlb	0	; () banked
  8871  0120F8  5BD4               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8872                           
  8873                           ; BSR set to: 0
  8874  0120FA  0100               	movlb	0	; () banked
  8875  0120FC  81D9               	bsf	___awdiv@quotient& (0+255),0,b
  8876  0120FE                     l7816:
  8877                           
  8878                           ; BSR set to: 0
  8879  0120FE  0100               	movlb	0	; () banked
  8880  012100  90D8               	bcf	status,0,c
  8881  012102  33D6               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8882  012104  33D5               	rrcf	___awdiv@divisor& (0+255),f,b
  8883                           
  8884                           ; BSR set to: 0
  8885  012106  0100               	movlb	0	; () banked
  8886  012108  2FD7               	decfsz	___awdiv@counter& (0+255),f,b
  8887  01210A  D7E1               	goto	l7808
  8888  01210C                     l7820:
  8889                           
  8890                           ; BSR set to: 0
  8891  01210C  0100               	movlb	0	; () banked
  8892  01210E  51D8               	movf	___awdiv@sign& (0+255),w,b
  8893  012110  0100               	movlb	0	; () banked
  8894  012112  B4D8               	btfsc	status,2,c
  8895  012114  D005               	goto	l7824
  8896                           
  8897                           ; BSR set to: 0
  8898  012116  0100               	movlb	0	; () banked
  8899  012118  6DD9               	negf	___awdiv@quotient& (0+255),b
  8900  01211A  1FDA               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8901  01211C  B0D8               	btfsc	status,0,c
  8902  01211E  2BDA               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8903  012120                     l7824:
  8904                           
  8905                           ; BSR set to: 0
  8906  012120  C0D9  F0D3         	movff	___awdiv@quotient,?___awdiv
  8907  012124  C0DA  F0D4         	movff	___awdiv@quotient+1,?___awdiv+1
  8908  012128  0012               	return	
  8909  01212A                     __end_of___awdiv:
  8910                           	opt stack 0
  8911                           tblptru	equ	0xFF8
  8912                           tblptrh	equ	0xFF7
  8913                           tblptrl	equ	0xFF6
  8914                           tablat	equ	0xFF5
  8915                           prodh	equ	0xFF4
  8916                           prodl	equ	0xFF3
  8917                           intcon	equ	0xFF2
  8918                           indf0	equ	0xFEF
  8919                           postinc0	equ	0xFEE
  8920                           fsr0h	equ	0xFEA
  8921                           fsr0l	equ	0xFE9
  8922                           wreg	equ	0xFE8
  8923                           postdec1	equ	0xFE5
  8924                           fsr1l	equ	0xFE1
  8925                           indf2	equ	0xFDF
  8926                           postinc2	equ	0xFDE
  8927                           postdec2	equ	0xFDD
  8928                           plusw2	equ	0xFDB
  8929                           fsr2h	equ	0xFDA
  8930                           fsr2l	equ	0xFD9
  8931                           status	equ	0xFD8
  8932                           
  8933 ;; *************** function _RTCC_adjust_time_cursor *****************
  8934 ;; Defined at:
  8935 ;;		line 311 in file "../My_header\My_RTCC.h"
  8936 ;; Parameters:    Size  Location     Type
  8937 ;;		None
  8938 ;; Auto vars:     Size  Location     Type
  8939 ;;		None
  8940 ;; Return value:  Size  Location     Type
  8941 ;;		None               void
  8942 ;; Registers used:
  8943 ;;		wreg, status,2
  8944 ;; Tracked objects:
  8945 ;;		On entry : 0/0
  8946 ;;		On exit  : 0/0
  8947 ;;		Unchanged: 0/0
  8948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8953 ;;Total ram usage:        0 bytes
  8954 ;; Hardware stack levels used:    1
  8955 ;; Hardware stack levels required when called:    4
  8956 ;; This function calls:
  8957 ;;		Nothing
  8958 ;; This function is called by:
  8959 ;;		_RTCC_adjust_time_button
  8960 ;; This function uses a non-reentrant model
  8961 ;;
  8962                           
  8963                           	psect	text33
  8964  012B6C                     __ptext33:
  8965                           	opt stack 0
  8966  012B6C                     _RTCC_adjust_time_cursor:
  8967                           	opt stack 24
  8968                           
  8969                           ;My_header\My_RTCC.h: 312: if (edit_flag.flag.ss)edit_flag.flags = 0x02;
  8970                           
  8971                           ; BSR set to: 0
  8972                           ;incstack = 0
  8973  012B6C  0100               	movlb	0	; () banked
  8974  012B6E  A1B5               	btfss	_edit_flag& (0+255),0,b
  8975  012B70  D004               	goto	l498
  8976                           
  8977                           ; BSR set to: 0
  8978  012B72  0E02               	movlw	2
  8979  012B74  0100               	movlb	0	; () banked
  8980  012B76  6FB5               	movwf	_edit_flag& (0+255),b
  8981  012B78  0012               	return	
  8982  012B7A                     l498:
  8983                           
  8984                           ; BSR set to: 0
  8985                           ;My_header\My_RTCC.h: 313: else if (edit_flag.flag.mm)edit_flag.flags = 0x04;
  8986  012B7A  0100               	movlb	0	; () banked
  8987  012B7C  A3B5               	btfss	_edit_flag& (0+255),1,b
  8988  012B7E  D004               	goto	l500
  8989                           
  8990                           ; BSR set to: 0
  8991  012B80  0E04               	movlw	4
  8992  012B82  0100               	movlb	0	; () banked
  8993  012B84  6FB5               	movwf	_edit_flag& (0+255),b
  8994  012B86  0012               	return	
  8995  012B88                     l500:
  8996                           
  8997                           ; BSR set to: 0
  8998                           ;My_header\My_RTCC.h: 314: else if (edit_flag.flag.hh)edit_flag.flags = 0x08;
  8999  012B88  0100               	movlb	0	; () banked
  9000  012B8A  A5B5               	btfss	_edit_flag& (0+255),2,b
  9001  012B8C  D004               	goto	l502
  9002                           
  9003                           ; BSR set to: 0
  9004  012B8E  0E08               	movlw	8
  9005  012B90  0100               	movlb	0	; () banked
  9006  012B92  6FB5               	movwf	_edit_flag& (0+255),b
  9007  012B94  0012               	return	
  9008  012B96                     l502:
  9009                           
  9010                           ; BSR set to: 0
  9011                           ;My_header\My_RTCC.h: 315: else if (edit_flag.flag.DD)edit_flag.flags = 0x10;
  9012  012B96  0100               	movlb	0	; () banked
  9013  012B98  A7B5               	btfss	_edit_flag& (0+255),3,b
  9014  012B9A  D004               	goto	l504
  9015                           
  9016                           ; BSR set to: 0
  9017  012B9C  0E10               	movlw	16
  9018  012B9E  0100               	movlb	0	; () banked
  9019  012BA0  6FB5               	movwf	_edit_flag& (0+255),b
  9020  012BA2  0012               	return	
  9021  012BA4                     l504:
  9022                           
  9023                           ; BSR set to: 0
  9024                           ;My_header\My_RTCC.h: 316: else if (edit_flag.flag.MM)edit_flag.flags = 0x20;
  9025  012BA4  0100               	movlb	0	; () banked
  9026  012BA6  A9B5               	btfss	_edit_flag& (0+255),4,b
  9027  012BA8  D004               	goto	l506
  9028                           
  9029                           ; BSR set to: 0
  9030  012BAA  0E20               	movlw	32
  9031  012BAC  0100               	movlb	0	; () banked
  9032  012BAE  6FB5               	movwf	_edit_flag& (0+255),b
  9033  012BB0  0012               	return	
  9034  012BB2                     l506:
  9035                           
  9036                           ; BSR set to: 0
  9037                           ;My_header\My_RTCC.h: 317: else if (edit_flag.flag.YY)edit_flag.flags = 0x01;
  9038  012BB2  0100               	movlb	0	; () banked
  9039  012BB4  ABB5               	btfss	_edit_flag& (0+255),5,b
  9040  012BB6  D004               	goto	l8334
  9041                           
  9042                           ; BSR set to: 0
  9043  012BB8  0E01               	movlw	1
  9044  012BBA  0100               	movlb	0	; () banked
  9045  012BBC  6FB5               	movwf	_edit_flag& (0+255),b
  9046  012BBE  0012               	return	
  9047  012BC0                     l8334:
  9048                           
  9049                           ; BSR set to: 0
  9050                           ;My_header\My_RTCC.h: 318: else edit_flag.flags = 0x00;
  9051  012BC0  0E00               	movlw	0
  9052  012BC2  0100               	movlb	0	; () banked
  9053  012BC4  6FB5               	movwf	_edit_flag& (0+255),b
  9054                           
  9055                           ; BSR set to: 0
  9056                           
  9057                           ; BSR set to: 0
  9058                           
  9059                           ; BSR set to: 0
  9060                           
  9061                           ; BSR set to: 0
  9062                           
  9063                           ; BSR set to: 0
  9064  012BC6  0012               	return	
  9065  012BC8                     __end_of_RTCC_adjust_time_cursor:
  9066                           	opt stack 0
  9067                           tblptru	equ	0xFF8
  9068                           tblptrh	equ	0xFF7
  9069                           tblptrl	equ	0xFF6
  9070                           tablat	equ	0xFF5
  9071                           prodh	equ	0xFF4
  9072                           prodl	equ	0xFF3
  9073                           intcon	equ	0xFF2
  9074                           indf0	equ	0xFEF
  9075                           postinc0	equ	0xFEE
  9076                           fsr0h	equ	0xFEA
  9077                           fsr0l	equ	0xFE9
  9078                           wreg	equ	0xFE8
  9079                           postdec1	equ	0xFE5
  9080                           fsr1l	equ	0xFE1
  9081                           indf2	equ	0xFDF
  9082                           postinc2	equ	0xFDE
  9083                           postdec2	equ	0xFDD
  9084                           plusw2	equ	0xFDB
  9085                           fsr2h	equ	0xFDA
  9086                           fsr2l	equ	0xFD9
  9087                           status	equ	0xFD8
  9088                           
  9089 ;; *************** function _Auto_cut *****************
  9090 ;; Defined at:
  9091 ;;		line 140 in file "tasks.h"
  9092 ;; Parameters:    Size  Location     Type
  9093 ;;		None
  9094 ;; Auto vars:     Size  Location     Type
  9095 ;;  i               1   11[BANK0 ] unsigned char 
  9096 ;; Return value:  Size  Location     Type
  9097 ;;		None               void
  9098 ;; Registers used:
  9099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9100 ;; Tracked objects:
  9101 ;;		On entry : 0/0
  9102 ;;		On exit  : 0/0
  9103 ;;		Unchanged: 0/0
  9104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9106 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9107 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9108 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9109 ;;Total ram usage:        3 bytes
  9110 ;; Hardware stack levels used:    1
  9111 ;; Hardware stack levels required when called:    5
  9112 ;; This function calls:
  9113 ;;		_ADC
  9114 ;;		_IN
  9115 ;;		_OUT
  9116 ;;		___wmul
  9117 ;; This function is called by:
  9118 ;;		_normal_mode_loop
  9119 ;; This function uses a non-reentrant model
  9120 ;;
  9121                           
  9122                           	psect	text34
  9123  0118CC                     __ptext34:
  9124                           	opt stack 0
  9125  0118CC                     _Auto_cut:
  9126                           	opt stack 24
  9127                           
  9128                           ;tasks.h: 141: for (uint8_t i = 0; i < 3; i++) {
  9129                           
  9130                           ; BSR set to: 0
  9131                           ;incstack = 0
  9132  0118CC  0E00               	movlw	0
  9133  0118CE  0100               	movlb	0	; () banked
  9134  0118D0  6FDE               	movwf	Auto_cut@i& (0+255),b
  9135  0118D2                     l8704:
  9136                           
  9137                           ; BSR set to: 0
  9138  0118D2  0E02               	movlw	2
  9139  0118D4  0100               	movlb	0	; () banked
  9140  0118D6  65DE               	cpfsgt	Auto_cut@i& (0+255),b
  9141  0118D8  D001               	goto	l8708
  9142  0118DA  0012               	return	
  9143  0118DC                     l8708:
  9144                           
  9145                           ; BSR set to: 0
  9146                           ;tasks.h: 142: I[i] = 13 * ADC(IN(i)) / 16;
  9147  0118DC  0100               	movlb	0	; () banked
  9148  0118DE  51DE               	movf	Auto_cut@i& (0+255),w,b
  9149  0118E0  ECB8  F098         	call	_IN
  9150  0118E4  EC8E  F098         	call	_ADC
  9151  0118E8  C0D3  F0D6         	movff	?_ADC,___wmul@multiplier
  9152  0118EC  C0D4  F0D7         	movff	?_ADC+1,___wmul@multiplier+1
  9153  0118F0  0E00               	movlw	0
  9154  0118F2  0100               	movlb	0	; () banked
  9155  0118F4  6FD9               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9156  0118F6  0E0D               	movlw	13
  9157  0118F8  6FD8               	movwf	___wmul@multiplicand& (0+255),b
  9158  0118FA  EC13  F098         	call	___wmul	;wreg free
  9159  0118FE  0E04               	movlw	4
  9160  011900  0100               	movlb	0	; () banked
  9161  011902  6FDC               	movwf	??_Auto_cut& (0+255),b
  9162  011904                     u9425:
  9163  011904  0100               	movlb	0	; () banked
  9164  011906  90D8               	bcf	status,0,c
  9165  011908  33D7               	rrcf	(?___wmul+1)& (0+255),f,b
  9166  01190A  33D6               	rrcf	?___wmul& (0+255),f,b
  9167  01190C  0100               	movlb	0	; () banked
  9168  01190E  2FDC               	decfsz	??_Auto_cut& (0+255),f,b
  9169  011910  D7F9               	goto	u9425
  9170  011912  0100               	movlb	0	; () banked
  9171  011914  51DE               	movf	Auto_cut@i& (0+255),w,b
  9172  011916  0D02               	mullw	2
  9173  011918  0E69               	movlw	low _I
  9174  01191A  24F3               	addwf	prodl,w,c
  9175  01191C  6ED9               	movwf	fsr2l,c
  9176  01191E  0E00               	movlw	high _I
  9177  011920  20F4               	addwfc	prodh,w,c
  9178  011922  6EDA               	movwf	fsr2h,c
  9179  011924  0100               	movlb	0	; () banked
  9180  011926  C0D6  FFDE         	movff	?___wmul,postinc2
  9181  01192A  0100               	movlb	0	; () banked
  9182  01192C  C0D7  FFDD         	movff	?___wmul+1,postdec2
  9183                           
  9184                           ; BSR set to: 0
  9185                           ;tasks.h: 143: if (auto_cut_ON[i]) {
  9186  011930  0100               	movlb	0	; () banked
  9187  011932  51DE               	movf	Auto_cut@i& (0+255),w,b
  9188  011934  0D01               	mullw	1
  9189  011936  0E7B               	movlw	low _auto_cut_ON
  9190  011938  24F3               	addwf	prodl,w,c
  9191  01193A  6ED9               	movwf	fsr2l,c
  9192  01193C  0E00               	movlw	high _auto_cut_ON
  9193  01193E  20F4               	addwfc	prodh,w,c
  9194  011940  6EDA               	movwf	fsr2h,c
  9195  011942  50DF               	movf	indf2,w,c
  9196  011944  B4D8               	btfsc	status,2,c
  9197  011946  D040               	goto	l8720
  9198                           
  9199                           ; BSR set to: 0
  9200                           ;tasks.h: 144: if (I[i] < 100) {
  9201  011948  0100               	movlb	0	; () banked
  9202  01194A  51DE               	movf	Auto_cut@i& (0+255),w,b
  9203  01194C  0D02               	mullw	2
  9204  01194E  0E69               	movlw	low _I
  9205  011950  24F3               	addwf	prodl,w,c
  9206  011952  6ED9               	movwf	fsr2l,c
  9207  011954  0E00               	movlw	high _I
  9208  011956  20F4               	addwfc	prodh,w,c
  9209  011958  6EDA               	movwf	fsr2h,c
  9210  01195A  0E01               	movlw	1
  9211  01195C  50DB               	movf	plusw2,w,c
  9212  01195E  E127               	bnz	l8718
  9213  011960  0E64               	movlw	100
  9214  011962  5CDE               	subwf	postinc2,w,c
  9215  011964  B0D8               	btfsc	status,0,c
  9216  011966  D023               	goto	l8718
  9217                           
  9218                           ; BSR set to: 0
  9219                           ;tasks.h: 145: cut_cnt[i]++;
  9220  011968  0100               	movlb	0	; () banked
  9221  01196A  51DE               	movf	Auto_cut@i& (0+255),w,b
  9222  01196C  0D02               	mullw	2
  9223  01196E  0E6F               	movlw	low _cut_cnt
  9224  011970  24F3               	addwf	prodl,w,c
  9225  011972  6ED9               	movwf	fsr2l,c
  9226  011974  0E00               	movlw	high _cut_cnt
  9227  011976  20F4               	addwfc	prodh,w,c
  9228  011978  6EDA               	movwf	fsr2h,c
  9229  01197A  2ADE               	incf	postinc2,f,c
  9230  01197C  0E00               	movlw	0
  9231  01197E  22DD               	addwfc	postdec2,f,c
  9232                           
  9233                           ;tasks.h: 146: if (cut_cnt[i] > 6) {
  9234  011980  0100               	movlb	0	; () banked
  9235  011982  51DE               	movf	Auto_cut@i& (0+255),w,b
  9236  011984  0D02               	mullw	2
  9237  011986  0E6F               	movlw	low _cut_cnt
  9238  011988  24F3               	addwf	prodl,w,c
  9239  01198A  6ED9               	movwf	fsr2l,c
  9240  01198C  0E00               	movlw	high _cut_cnt
  9241  01198E  20F4               	addwfc	prodh,w,c
  9242  011990  6EDA               	movwf	fsr2h,c
  9243  011992  0E01               	movlw	1
  9244  011994  50DB               	movf	plusw2,w,c
  9245  011996  E104               	bnz	u9450
  9246  011998  0E07               	movlw	7
  9247  01199A  5CDE               	subwf	postinc2,w,c
  9248  01199C  A0D8               	btfss	status,0,c
  9249  01199E  D014               	goto	l8720
  9250  0119A0                     u9450:
  9251                           
  9252                           ; BSR set to: 0
  9253                           ;tasks.h: 147: OUT(i, 0);
  9254  0119A0  0E00               	movlw	0
  9255  0119A2  6E20               	movwf	OUT@value,c
  9256  0119A4  0100               	movlb	0	; () banked
  9257  0119A6  51DE               	movf	Auto_cut@i& (0+255),w,b
  9258  0119A8  EC10  F096         	call	_OUT
  9259                           
  9260                           ;tasks.h: 148: }
  9261                           ;tasks.h: 149: } else {
  9262  0119AC  D00D               	goto	l8720
  9263  0119AE                     l8718:
  9264                           
  9265                           ;tasks.h: 150: cut_cnt[i] = 0;
  9266  0119AE  0100               	movlb	0	; () banked
  9267  0119B0  51DE               	movf	Auto_cut@i& (0+255),w,b
  9268  0119B2  0D02               	mullw	2
  9269  0119B4  0E6F               	movlw	low _cut_cnt
  9270  0119B6  24F3               	addwf	prodl,w,c
  9271  0119B8  6ED9               	movwf	fsr2l,c
  9272  0119BA  0E00               	movlw	high _cut_cnt
  9273  0119BC  20F4               	addwfc	prodh,w,c
  9274  0119BE  6EDA               	movwf	fsr2h,c
  9275  0119C0  0E00               	movlw	0
  9276  0119C2  6EDE               	movwf	postinc2,c
  9277  0119C4  0E00               	movlw	0
  9278  0119C6  6EDD               	movwf	postdec2,c
  9279  0119C8                     l8720:
  9280  0119C8  0100               	movlb	0	; () banked
  9281  0119CA  2BDE               	incf	Auto_cut@i& (0+255),f,b
  9282  0119CC  D782               	goto	l8704
  9283  0119CE                     __end_of_Auto_cut:
  9284                           	opt stack 0
  9285                           tblptru	equ	0xFF8
  9286                           tblptrh	equ	0xFF7
  9287                           tblptrl	equ	0xFF6
  9288                           tablat	equ	0xFF5
  9289                           prodh	equ	0xFF4
  9290                           prodl	equ	0xFF3
  9291                           intcon	equ	0xFF2
  9292                           indf0	equ	0xFEF
  9293                           postinc0	equ	0xFEE
  9294                           fsr0h	equ	0xFEA
  9295                           fsr0l	equ	0xFE9
  9296                           wreg	equ	0xFE8
  9297                           postdec1	equ	0xFE5
  9298                           fsr1l	equ	0xFE1
  9299                           indf2	equ	0xFDF
  9300                           postinc2	equ	0xFDE
  9301                           postdec2	equ	0xFDD
  9302                           plusw2	equ	0xFDB
  9303                           fsr2h	equ	0xFDA
  9304                           fsr2l	equ	0xFD9
  9305                           status	equ	0xFD8
  9306                           
  9307 ;; *************** function ___wmul *****************
  9308 ;; Defined at:
  9309 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  9310 ;; Parameters:    Size  Location     Type
  9311 ;;  multiplier      2    3[BANK0 ] unsigned int 
  9312 ;;  multiplicand    2    5[BANK0 ] unsigned int 
  9313 ;; Auto vars:     Size  Location     Type
  9314 ;;  product         2    7[BANK0 ] unsigned int 
  9315 ;; Return value:  Size  Location     Type
  9316 ;;                  2    3[BANK0 ] unsigned int 
  9317 ;; Registers used:
  9318 ;;		wreg, status,2, status,0, prodl, prodh
  9319 ;; Tracked objects:
  9320 ;;		On entry : 0/0
  9321 ;;		On exit  : 0/0
  9322 ;;		Unchanged: 0/0
  9323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9324 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9325 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9327 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9328 ;;Total ram usage:        6 bytes
  9329 ;; Hardware stack levels used:    1
  9330 ;; Hardware stack levels required when called:    4
  9331 ;; This function calls:
  9332 ;;		Nothing
  9333 ;; This function is called by:
  9334 ;;		_Auto_cut
  9335 ;;		_my_atoi
  9336 ;; This function uses a non-reentrant model
  9337 ;;
  9338                           
  9339                           	psect	text35
  9340  013026                     __ptext35:
  9341                           	opt stack 0
  9342  013026                     ___wmul:
  9343                           	opt stack 24
  9344                           
  9345                           ; BSR set to: 0
  9346                           ;incstack = 0
  9347  013026  0100               	movlb	0	; () banked
  9348  013028  51D6               	movf	___wmul@multiplier& (0+255),w,b
  9349  01302A  0100               	movlb	0	; () banked
  9350  01302C  03D8               	mulwf	___wmul@multiplicand& (0+255),b
  9351  01302E  CFF3 F0DA          	movff	prodl,___wmul@product
  9352  013032  CFF4 F0DB          	movff	prodh,___wmul@product+1
  9353  013036  0100               	movlb	0	; () banked
  9354  013038  51D6               	movf	___wmul@multiplier& (0+255),w,b
  9355  01303A  0100               	movlb	0	; () banked
  9356  01303C  03D9               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9357  01303E  50F3               	movf	prodl,w,c
  9358  013040  0100               	movlb	0	; () banked
  9359  013042  27DB               	addwf	(___wmul@product+1)& (0+255),f,b
  9360  013044  0100               	movlb	0	; () banked
  9361  013046  51D7               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9362  013048  0100               	movlb	0	; () banked
  9363  01304A  03D8               	mulwf	___wmul@multiplicand& (0+255),b
  9364  01304C  50F3               	movf	prodl,w,c
  9365  01304E  0100               	movlb	0	; () banked
  9366  013050  27DB               	addwf	(___wmul@product+1)& (0+255),f,b
  9367                           
  9368                           ; BSR set to: 0
  9369  013052  C0DA  F0D6         	movff	___wmul@product,?___wmul
  9370  013056  C0DB  F0D7         	movff	___wmul@product+1,?___wmul+1
  9371  01305A  0012               	return	
  9372  01305C                     __end_of___wmul:
  9373                           	opt stack 0
  9374                           tblptru	equ	0xFF8
  9375                           tblptrh	equ	0xFF7
  9376                           tblptrl	equ	0xFF6
  9377                           tablat	equ	0xFF5
  9378                           prodh	equ	0xFF4
  9379                           prodl	equ	0xFF3
  9380                           intcon	equ	0xFF2
  9381                           indf0	equ	0xFEF
  9382                           postinc0	equ	0xFEE
  9383                           fsr0h	equ	0xFEA
  9384                           fsr0l	equ	0xFE9
  9385                           wreg	equ	0xFE8
  9386                           postdec1	equ	0xFE5
  9387                           fsr1l	equ	0xFE1
  9388                           indf2	equ	0xFDF
  9389                           postinc2	equ	0xFDE
  9390                           postdec2	equ	0xFDD
  9391                           plusw2	equ	0xFDB
  9392                           fsr2h	equ	0xFDA
  9393                           fsr2l	equ	0xFD9
  9394                           status	equ	0xFD8
  9395                           
  9396 ;; *************** function _OUT *****************
  9397 ;; Defined at:
  9398 ;;		line 49 in file "tasks.h"
  9399 ;; Parameters:    Size  Location     Type
  9400 ;;  b               1    wreg     unsigned char 
  9401 ;;  value           1   31[COMRAM] unsigned char 
  9402 ;; Auto vars:     Size  Location     Type
  9403 ;;  b               1    0[BANK0 ] unsigned char 
  9404 ;; Return value:  Size  Location     Type
  9405 ;;		None               void
  9406 ;; Registers used:
  9407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9408 ;; Tracked objects:
  9409 ;;		On entry : 0/0
  9410 ;;		On exit  : 0/0
  9411 ;;		Unchanged: 0/0
  9412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9413 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9416 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9417 ;;Total ram usage:        2 bytes
  9418 ;; Hardware stack levels used:    1
  9419 ;; Hardware stack levels required when called:    4
  9420 ;; This function calls:
  9421 ;;		Nothing
  9422 ;; This function is called by:
  9423 ;;		_Auto_cut
  9424 ;;		_port_loop
  9425 ;;		_sleep_loop
  9426 ;;		_main
  9427 ;; This function uses a non-reentrant model
  9428 ;;
  9429                           
  9430                           	psect	text36
  9431  012C20                     __ptext36:
  9432                           	opt stack 0
  9433  012C20                     _OUT:
  9434                           	opt stack 25
  9435                           
  9436                           ; BSR set to: 0
  9437                           ;incstack = 0
  9438                           ;OUT@b stored from wreg
  9439  012C20  0100               	movlb	0	; () banked
  9440  012C22  6FD3               	movwf	OUT@b& (0+255),b
  9441                           
  9442                           ;tasks.h: 50: out_flag[b] = value;
  9443  012C24  0100               	movlb	0	; () banked
  9444  012C26  51D3               	movf	OUT@b& (0+255),w,b
  9445  012C28  0D01               	mullw	1
  9446  012C2A  0E84               	movlw	low _out_flag
  9447  012C2C  24F3               	addwf	prodl,w,c
  9448  012C2E  6ED9               	movwf	fsr2l,c
  9449  012C30  0E00               	movlw	high _out_flag
  9450  012C32  20F4               	addwfc	prodh,w,c
  9451  012C34  6EDA               	movwf	fsr2h,c
  9452  012C36  C020  FFDF         	movff	OUT@value,indf2
  9453                           
  9454                           ;tasks.h: 51: switch (b) {
  9455  012C3A  D012               	goto	l8444
  9456  012C3C                     l605:
  9457                           
  9458                           ; BSR set to: 0
  9459                           ;tasks.h: 53: LATA5 = value;
  9460  012C3C  A020               	btfss	OUT@value,0,c
  9461  012C3E  D002               	goto	u9140
  9462  012C40  8A89               	bsf	3977,5,c	;volatile
  9463  012C42  0012               	return	
  9464  012C44                     u9140:
  9465  012C44  9A89               	bcf	3977,5,c	;volatile
  9466                           
  9467                           ;tasks.h: 54: break;
  9468  012C46  0012               	return	
  9469  012C48                     l607:
  9470                           
  9471                           ; BSR set to: 0
  9472                           ;tasks.h: 56: LATA6 = value;
  9473  012C48  A020               	btfss	OUT@value,0,c
  9474  012C4A  D002               	goto	u9160
  9475  012C4C  8C89               	bsf	3977,6,c	;volatile
  9476  012C4E  0012               	return	
  9477  012C50                     u9160:
  9478  012C50  9C89               	bcf	3977,6,c	;volatile
  9479                           
  9480                           ;tasks.h: 57: break;
  9481  012C52  0012               	return	
  9482  012C54                     l608:
  9483                           
  9484                           ; BSR set to: 0
  9485                           ;tasks.h: 59: LATA7 = value;
  9486  012C54  A020               	btfss	OUT@value,0,c
  9487  012C56  D002               	goto	u9180
  9488  012C58  8E89               	bsf	3977,7,c	;volatile
  9489  012C5A  0012               	return	
  9490  012C5C                     u9180:
  9491  012C5C  9E89               	bcf	3977,7,c	;volatile
  9492                           
  9493                           ;tasks.h: 61: }
  9494                           
  9495                           ;tasks.h: 60: break;
  9496  012C5E  0012               	return	
  9497  012C60                     l8444:
  9498  012C60  0100               	movlb	0	; () banked
  9499  012C62  51D3               	movf	OUT@b& (0+255),w,b
  9500                           
  9501                           ; Switch size 1, requested type "space"
  9502                           ; Number of cases is 3, Range of values is 0 to 2
  9503                           ; switch strategies available:
  9504                           ; Name         Instructions Cycles
  9505                           ; simple_byte           10     6 (average)
  9506                           ;	Chosen strategy is simple_byte
  9507  012C64  0A00               	xorlw	0	; case 0
  9508  012C66  B4D8               	btfsc	status,2,c
  9509  012C68  D7E9               	goto	l605
  9510  012C6A  0A01               	xorlw	1	; case 1
  9511  012C6C  B4D8               	btfsc	status,2,c
  9512  012C6E  D7EC               	goto	l607
  9513  012C70  0A03               	xorlw	3	; case 2
  9514  012C72  A4D8               	btfss	status,2,c
  9515  012C74  0012               	return	
  9516  012C76  D7EE               	goto	l608
  9517  012C78                     __end_of_OUT:
  9518                           	opt stack 0
  9519                           tblptru	equ	0xFF8
  9520                           tblptrh	equ	0xFF7
  9521                           tblptrl	equ	0xFF6
  9522                           tablat	equ	0xFF5
  9523                           prodh	equ	0xFF4
  9524                           prodl	equ	0xFF3
  9525                           intcon	equ	0xFF2
  9526                           indf0	equ	0xFEF
  9527                           postinc0	equ	0xFEE
  9528                           fsr0h	equ	0xFEA
  9529                           fsr0l	equ	0xFE9
  9530                           wreg	equ	0xFE8
  9531                           postdec1	equ	0xFE5
  9532                           fsr1l	equ	0xFE1
  9533                           indf2	equ	0xFDF
  9534                           postinc2	equ	0xFDE
  9535                           postdec2	equ	0xFDD
  9536                           plusw2	equ	0xFDB
  9537                           fsr2h	equ	0xFDA
  9538                           fsr2l	equ	0xFD9
  9539                           status	equ	0xFD8
  9540                           
  9541 ;; *************** function _IN *****************
  9542 ;; Defined at:
  9543 ;;		line 64 in file "tasks.h"
  9544 ;; Parameters:    Size  Location     Type
  9545 ;;  b               1    wreg     unsigned char 
  9546 ;; Auto vars:     Size  Location     Type
  9547 ;;  b               1   31[COMRAM] unsigned char 
  9548 ;; Return value:  Size  Location     Type
  9549 ;;                  1    wreg      unsigned char 
  9550 ;; Registers used:
  9551 ;;		wreg, status,2, status,0
  9552 ;; Tracked objects:
  9553 ;;		On entry : 0/0
  9554 ;;		On exit  : 0/0
  9555 ;;		Unchanged: 0/0
  9556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9558 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9560 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9561 ;;Total ram usage:        1 bytes
  9562 ;; Hardware stack levels used:    1
  9563 ;; Hardware stack levels required when called:    4
  9564 ;; This function calls:
  9565 ;;		Nothing
  9566 ;; This function is called by:
  9567 ;;		_Auto_cut
  9568 ;; This function uses a non-reentrant model
  9569 ;;
  9570                           
  9571                           	psect	text37
  9572  013170                     __ptext37:
  9573                           	opt stack 0
  9574  013170                     _IN:
  9575                           	opt stack 24
  9576                           
  9577                           ;incstack = 0
  9578                           ;IN@b stored from wreg
  9579  013170  6E20               	movwf	IN@b,c
  9580                           
  9581                           ;tasks.h: 65: switch (b) {
  9582  013172  D006               	goto	l8462
  9583  013174                     l8448:
  9584                           
  9585                           ;tasks.h: 67: return 8;
  9586  013174  0E08               	movlw	8
  9587  013176  0012               	return	
  9588  013178                     l8452:
  9589                           
  9590                           ;tasks.h: 69: return 9;
  9591  013178  0E09               	movlw	9
  9592  01317A  0012               	return	
  9593  01317C                     l8456:
  9594                           
  9595                           ;tasks.h: 71: return 10;
  9596  01317C  0E0A               	movlw	10
  9597  01317E  0012               	return	
  9598  013180                     l8462:
  9599  013180  5020               	movf	IN@b,w,c
  9600                           
  9601                           ; Switch size 1, requested type "space"
  9602                           ; Number of cases is 3, Range of values is 0 to 2
  9603                           ; switch strategies available:
  9604                           ; Name         Instructions Cycles
  9605                           ; simple_byte           10     6 (average)
  9606                           ;	Chosen strategy is simple_byte
  9607  013182  0A00               	xorlw	0	; case 0
  9608  013184  B4D8               	btfsc	status,2,c
  9609  013186  D7F6               	goto	l8448
  9610  013188  0A01               	xorlw	1	; case 1
  9611  01318A  B4D8               	btfsc	status,2,c
  9612  01318C  D7F5               	goto	l8452
  9613  01318E  0A03               	xorlw	3	; case 2
  9614  013190  B4D8               	btfsc	status,2,c
  9615  013192  D7F4               	goto	l8456
  9616                           
  9617                           ;tasks.h: 73: return 0;
  9618  013194  0E00               	movlw	0
  9619  013196  0012               	return	
  9620  013198                     __end_of_IN:
  9621                           	opt stack 0
  9622                           tblptru	equ	0xFF8
  9623                           tblptrh	equ	0xFF7
  9624                           tblptrl	equ	0xFF6
  9625                           tablat	equ	0xFF5
  9626                           prodh	equ	0xFF4
  9627                           prodl	equ	0xFF3
  9628                           intcon	equ	0xFF2
  9629                           indf0	equ	0xFEF
  9630                           postinc0	equ	0xFEE
  9631                           fsr0h	equ	0xFEA
  9632                           fsr0l	equ	0xFE9
  9633                           wreg	equ	0xFE8
  9634                           postdec1	equ	0xFE5
  9635                           fsr1l	equ	0xFE1
  9636                           indf2	equ	0xFDF
  9637                           postinc2	equ	0xFDE
  9638                           postdec2	equ	0xFDD
  9639                           plusw2	equ	0xFDB
  9640                           fsr2h	equ	0xFDA
  9641                           fsr2l	equ	0xFD9
  9642                           status	equ	0xFD8
  9643                           
  9644 ;; *************** function _ADC *****************
  9645 ;; Defined at:
  9646 ;;		line 172 in file "../My_header\My_header.h"
  9647 ;; Parameters:    Size  Location     Type
  9648 ;;  ch              1    wreg     unsigned char 
  9649 ;; Auto vars:     Size  Location     Type
  9650 ;;  ch              1    2[BANK0 ] unsigned char 
  9651 ;; Return value:  Size  Location     Type
  9652 ;;                  2    0[BANK0 ] unsigned int 
  9653 ;; Registers used:
  9654 ;;		wreg, status,2, status,0
  9655 ;; Tracked objects:
  9656 ;;		On entry : 0/0
  9657 ;;		On exit  : 0/0
  9658 ;;		Unchanged: 0/0
  9659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9660 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9661 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9662 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9663 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9664 ;;Total ram usage:        4 bytes
  9665 ;; Hardware stack levels used:    1
  9666 ;; Hardware stack levels required when called:    4
  9667 ;; This function calls:
  9668 ;;		Nothing
  9669 ;; This function is called by:
  9670 ;;		_Auto_cut
  9671 ;; This function uses a non-reentrant model
  9672 ;;
  9673                           
  9674                           	psect	text38
  9675  01311C                     __ptext38:
  9676                           	opt stack 0
  9677  01311C                     _ADC:
  9678                           	opt stack 24
  9679                           
  9680                           ;incstack = 0
  9681                           ;ADC@ch stored from wreg
  9682  01311C  0100               	movlb	0	; () banked
  9683  01311E  6FD5               	movwf	ADC@ch& (0+255),b
  9684                           
  9685                           ;My_header\My_header.h: 173: ADCON0bits.CHS = ch;
  9686  013120  C0D5  F020         	movff	ADC@ch,??_ADC
  9687  013124  4620               	rlncf	??_ADC,f,c
  9688  013126  4620               	rlncf	??_ADC,f,c
  9689  013128  50C2               	movf	4034,w,c	;volatile
  9690  01312A  1820               	xorwf	??_ADC,w,c
  9691  01312C  0BC3               	andlw	-61
  9692  01312E  1820               	xorwf	??_ADC,w,c
  9693  013130  6EC2               	movwf	4034,c	;volatile
  9694                           
  9695                           ;My_header\My_header.h: 174: ADCON0bits.ADON = 1;
  9696  013132  80C2               	bsf	4034,0,c	;volatile
  9697                           
  9698                           ;My_header\My_header.h: 176: PIR1bits.ADIF = 0;
  9699  013134  9C9E               	bcf	3998,6,c	;volatile
  9700                           
  9701                           ;My_header\My_header.h: 177: ADCON0bits.GO_nDONE = 1;
  9702  013136  82C2               	bsf	4034,1,c	;volatile
  9703  013138                     l149:
  9704  013138  AC9E               	btfss	3998,6,c	;volatile
  9705  01313A  D7FE               	goto	l149
  9706                           
  9707                           ;My_header\My_header.h: 179: return ADRES;
  9708  01313C  CFC3 F0D3          	movff	4035,?_ADC	;volatile
  9709  013140  CFC4 F0D4          	movff	4036,?_ADC+1	;volatile
  9710  013144  0012               	return		;funcret
  9711  013146                     __end_of_ADC:
  9712                           	opt stack 0
  9713                           tblptru	equ	0xFF8
  9714                           tblptrh	equ	0xFF7
  9715                           tblptrl	equ	0xFF6
  9716                           tablat	equ	0xFF5
  9717                           prodh	equ	0xFF4
  9718                           prodl	equ	0xFF3
  9719                           intcon	equ	0xFF2
  9720                           indf0	equ	0xFEF
  9721                           postinc0	equ	0xFEE
  9722                           fsr0h	equ	0xFEA
  9723                           fsr0l	equ	0xFE9
  9724                           wreg	equ	0xFE8
  9725                           postdec1	equ	0xFE5
  9726                           fsr1l	equ	0xFE1
  9727                           indf2	equ	0xFDF
  9728                           postinc2	equ	0xFDE
  9729                           postdec2	equ	0xFDD
  9730                           plusw2	equ	0xFDB
  9731                           fsr2h	equ	0xFDA
  9732                           fsr2l	equ	0xFD9
  9733                           status	equ	0xFD8
  9734                           
  9735 ;; *************** function _main_init *****************
  9736 ;; Defined at:
  9737 ;;		line 258 in file "tasks.h"
  9738 ;; Parameters:    Size  Location     Type
  9739 ;;		None
  9740 ;; Auto vars:     Size  Location     Type
  9741 ;;  rxbuf         200    0[BANK2 ] unsigned char [200]
  9742 ;;  txbuf         200    0[BANK1 ] unsigned char [200]
  9743 ;; Return value:  Size  Location     Type
  9744 ;;		None               void
  9745 ;; Registers used:
  9746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9747 ;; Tracked objects:
  9748 ;;		On entry : 0/0
  9749 ;;		On exit  : 0/0
  9750 ;;		Unchanged: 0/0
  9751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9753 ;;      Locals:         0       0     200     200       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9755 ;;      Totals:         0       0     200     200       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9756 ;;Total ram usage:      400 bytes
  9757 ;; Hardware stack levels used:    1
  9758 ;; Hardware stack levels required when called:    9
  9759 ;; This function calls:
  9760 ;;		_ADC_init
  9761 ;;		_CTMU_init
  9762 ;;		_I2C_LCD_init
  9763 ;;		_I2C_init
  9764 ;;		_RTCC_init
  9765 ;;		_UART_init
  9766 ;;		_ringbuf_init
  9767 ;;		_timer0_init
  9768 ;;		_timer1_init
  9769 ;;		_timer3_init
  9770 ;; This function is called by:
  9771 ;;		_main
  9772 ;; This function uses a non-reentrant model
  9773 ;;
  9774                           
  9775                           	psect	text39
  9776  0124BA                     __ptext39:
  9777                           	opt stack 0
  9778  0124BA                     _main_init:
  9779                           	opt stack 21
  9780                           
  9781                           ;tasks.h: 260: OSCCONbits.IRCF = 7;
  9782                           
  9783                           ;incstack = 0
  9784  0124BA  88D3               	bsf	4051,4,c	;volatile
  9785  0124BC  8AD3               	bsf	4051,5,c	;volatile
  9786  0124BE  8CD3               	bsf	4051,6,c	;volatile
  9787                           
  9788                           ;tasks.h: 261: OSCTUNEbits.PLLEN = 1;
  9789  0124C0  8C9B               	bsf	3995,6,c	;volatile
  9790                           
  9791                           ;tasks.h: 262: OSCCONbits.SCS = 0;
  9792  0124C2  0EFC               	movlw	-4
  9793  0124C4  16D3               	andwf	4051,f,c	;volatile
  9794                           
  9795                           ;tasks.h: 263: TRISA = 0b00011111;
  9796  0124C6  0E1F               	movlw	31
  9797  0124C8  6E92               	movwf	3986,c	;volatile
  9798                           
  9799                           ;tasks.h: 264: TRISB = 0b00111111;
  9800  0124CA  0E3F               	movlw	63
  9801  0124CC  6E93               	movwf	3987,c	;volatile
  9802                           
  9803                           ;tasks.h: 265: TRISC = 0b10110010;
  9804  0124CE  0EB2               	movlw	178
  9805  0124D0  6E94               	movwf	3988,c	;volatile
  9806                           
  9807                           ;tasks.h: 266: ANCON0 = 0b11111111;
  9808  0124D2  010F               	movlb	15	; () banked
  9809  0124D4  6948               	setf	72,b	;volatile
  9810                           
  9811                           ;tasks.h: 267: ANCON1 = 0b00011000;
  9812  0124D6  0E18               	movlw	24
  9813  0124D8  010F               	movlb	15	; () banked
  9814  0124DA  6F49               	movwf	73,b	;volatile
  9815                           
  9816                           ; BSR set to: 15
  9817                           ;tasks.h: 268: INTCON2bits.RBPU = 0;
  9818  0124DC  9EF1               	bcf	intcon2,7,c	;volatile
  9819                           
  9820                           ; BSR set to: 15
  9821                           ;tasks.h: 270: timer0_init(6);
  9822  0124DE  0E06               	movlw	6
  9823  0124E0  EC2E  F098         	call	_timer0_init
  9824                           
  9825                           ;tasks.h: 271: timer1_init(0, 2);
  9826  0124E4  0E02               	movlw	2
  9827  0124E6  6E20               	movwf	timer1_init@clock_select,c
  9828  0124E8  0E00               	movlw	0
  9829  0124EA  ECE3  F096         	call	_timer1_init
  9830                           
  9831                           ;tasks.h: 272: timer3_init(2);
  9832  0124EE  0E02               	movlw	2
  9833  0124F0  ECCC  F098         	call	_timer3_init
  9834                           
  9835                           ;tasks.h: 273: I2C_init();
  9836  0124F4  ECA2  F099         	call	_I2C_init	;wreg free
  9837                           
  9838                           ;tasks.h: 274: I2C_LCD_init();
  9839  0124F8  EC3C  F096         	call	_I2C_LCD_init	;wreg free
  9840                           
  9841                           ;tasks.h: 275: ADC_init(0);
  9842  0124FC  0E00               	movlw	0
  9843  0124FE  EC4A  F099         	call	_ADC_init
  9844                           
  9845                           ;tasks.h: 276: RTCC_init();
  9846  012502  EC61  F098         	call	_RTCC_init	;wreg free
  9847                           
  9848                           ;tasks.h: 277: CTMU_init();
  9849  012506  ECE0  F098         	call	_CTMU_init	;wreg free
  9850                           
  9851                           ;tasks.h: 279: UART_init();
  9852  01250A  EC3A  F099         	call	_UART_init	;wreg free
  9853                           
  9854                           ;tasks.h: 280: uint8_t txbuf[200];
  9855                           ;tasks.h: 281: ringbuf_init(&tx_buf, txbuf, sizeof (txbuf));
  9856  01250E  0EE8               	movlw	low _tx_buf
  9857  012510  0100               	movlb	0	; () banked
  9858  012512  6FD3               	movwf	ringbuf_init@rb& (0+255),b
  9859  012514  0E01               	movlw	high _tx_buf
  9860  012516  0100               	movlb	0	; () banked
  9861  012518  6FD4               	movwf	(ringbuf_init@rb+1)& (0+255),b
  9862  01251A  0E00               	movlw	low main_init@txbuf
  9863  01251C  0100               	movlb	0	; () banked
  9864  01251E  6FD5               	movwf	ringbuf_init@internal_buf& (0+255),b
  9865  012520  0E01               	movlw	high main_init@txbuf
  9866  012522  0100               	movlb	0	; () banked
  9867  012524  6FD6               	movwf	(ringbuf_init@internal_buf+1)& (0+255),b
  9868  012526  0E00               	movlw	0
  9869  012528  0100               	movlb	0	; () banked
  9870  01252A  6FD8               	movwf	(ringbuf_init@bufsize+1)& (0+255),b
  9871  01252C  0EC8               	movlw	200
  9872  01252E  6FD7               	movwf	ringbuf_init@bufsize& (0+255),b
  9873  012530  EC68  F096         	call	_ringbuf_init	;wreg free
  9874                           
  9875                           ;tasks.h: 282: uint8_t rxbuf[200];
  9876                           ;tasks.h: 283: ringbuf_init(&rx_buf, rxbuf, sizeof (rxbuf));
  9877  012534  0EEA               	movlw	low _rx_buf
  9878  012536  0100               	movlb	0	; () banked
  9879  012538  6FD3               	movwf	ringbuf_init@rb& (0+255),b
  9880  01253A  0E02               	movlw	high _rx_buf
  9881  01253C  0100               	movlb	0	; () banked
  9882  01253E  6FD4               	movwf	(ringbuf_init@rb+1)& (0+255),b
  9883  012540  0E00               	movlw	low main_init@rxbuf
  9884  012542  0100               	movlb	0	; () banked
  9885  012544  6FD5               	movwf	ringbuf_init@internal_buf& (0+255),b
  9886  012546  0E02               	movlw	high main_init@rxbuf
  9887  012548  0100               	movlb	0	; () banked
  9888  01254A  6FD6               	movwf	(ringbuf_init@internal_buf+1)& (0+255),b
  9889  01254C  0E00               	movlw	0
  9890  01254E  0100               	movlb	0	; () banked
  9891  012550  6FD8               	movwf	(ringbuf_init@bufsize+1)& (0+255),b
  9892  012552  0EC8               	movlw	200
  9893  012554  6FD7               	movwf	ringbuf_init@bufsize& (0+255),b
  9894  012556  EC68  F096         	call	_ringbuf_init	;wreg free
  9895  01255A  0012               	return		;funcret
  9896  01255C                     __end_of_main_init:
  9897                           	opt stack 0
  9898                           tblptru	equ	0xFF8
  9899                           tblptrh	equ	0xFF7
  9900                           tblptrl	equ	0xFF6
  9901                           tablat	equ	0xFF5
  9902                           prodh	equ	0xFF4
  9903                           prodl	equ	0xFF3
  9904                           intcon	equ	0xFF2
  9905                           intcon2	equ	0xFF1
  9906                           indf0	equ	0xFEF
  9907                           postinc0	equ	0xFEE
  9908                           fsr0h	equ	0xFEA
  9909                           fsr0l	equ	0xFE9
  9910                           wreg	equ	0xFE8
  9911                           postdec1	equ	0xFE5
  9912                           fsr1l	equ	0xFE1
  9913                           indf2	equ	0xFDF
  9914                           postinc2	equ	0xFDE
  9915                           postdec2	equ	0xFDD
  9916                           plusw2	equ	0xFDB
  9917                           fsr2h	equ	0xFDA
  9918                           fsr2l	equ	0xFD9
  9919                           status	equ	0xFD8
  9920                           
  9921 ;; *************** function _timer3_init *****************
  9922 ;; Defined at:
  9923 ;;		line 85 in file "../My_header\My_header.h"
  9924 ;; Parameters:    Size  Location     Type
  9925 ;;  prescaler       1    wreg     unsigned char 
  9926 ;; Auto vars:     Size  Location     Type
  9927 ;;  prescaler       1    0[BANK0 ] unsigned char 
  9928 ;; Return value:  Size  Location     Type
  9929 ;;		None               void
  9930 ;; Registers used:
  9931 ;;		wreg, status,2, status,0
  9932 ;; Tracked objects:
  9933 ;;		On entry : 0/0
  9934 ;;		On exit  : 0/0
  9935 ;;		Unchanged: 0/0
  9936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9938 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9939 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9940 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9941 ;;Total ram usage:        2 bytes
  9942 ;; Hardware stack levels used:    1
  9943 ;; Hardware stack levels required when called:    4
  9944 ;; This function calls:
  9945 ;;		Nothing
  9946 ;; This function is called by:
  9947 ;;		_main_init
  9948 ;; This function uses a non-reentrant model
  9949 ;;
  9950                           
  9951                           	psect	text40
  9952  013198                     __ptext40:
  9953                           	opt stack 0
  9954  013198                     _timer3_init:
  9955                           	opt stack 25
  9956                           
  9957                           ;incstack = 0
  9958                           ;timer3_init@prescaler stored from wreg
  9959  013198  0100               	movlb	0	; () banked
  9960  01319A  6FD3               	movwf	timer3_init@prescaler& (0+255),b
  9961                           
  9962                           ;My_header\My_header.h: 86: T3CONbits.TMR3CS = 0;
  9963  01319C  0E3F               	movlw	-193
  9964  01319E  1679               	andwf	3961,f,c	;volatile
  9965                           
  9966                           ;My_header\My_header.h: 87: T3CONbits.T3OSCEN = 0;
  9967  0131A0  9679               	bcf	3961,3,c	;volatile
  9968                           
  9969                           ;My_header\My_header.h: 88: T3CONbits.T3CKPS = prescaler;
  9970  0131A2  C0D3  F020         	movff	timer3_init@prescaler,??_timer3_init
  9971  0131A6  3A20               	swapf	??_timer3_init,f,c
  9972  0131A8  5079               	movf	3961,w,c	;volatile
  9973  0131AA  1820               	xorwf	??_timer3_init,w,c
  9974  0131AC  0BCF               	andlw	-49
  9975  0131AE  1820               	xorwf	??_timer3_init,w,c
  9976  0131B0  6E79               	movwf	3961,c	;volatile
  9977                           
  9978                           ;My_header\My_header.h: 89: T3CONbits.RD163 = 0;
  9979  0131B2  9E79               	bcf	3961,7,c	;volatile
  9980                           
  9981                           ;My_header\My_header.h: 90: T3CONbits.TMR3ON = 1;
  9982  0131B4  8079               	bsf	3961,0,c	;volatile
  9983                           
  9984                           ;My_header\My_header.h: 91: IPR2bits.TMR3IP = 0;
  9985  0131B6  92A2               	bcf	4002,1,c	;volatile
  9986                           
  9987                           ;My_header\My_header.h: 92: PIR2bits.TMR3IF = 0;
  9988  0131B8  92A1               	bcf	4001,1,c	;volatile
  9989                           
  9990                           ;My_header\My_header.h: 93: PIE2bits.TMR3IE = 1;
  9991  0131BA  82A0               	bsf	4000,1,c	;volatile
  9992                           
  9993                           ;My_header\My_header.h: 94: INTCONbits.PEIE = 1;
  9994  0131BC  8CF2               	bsf	intcon,6,c	;volatile
  9995  0131BE  0012               	return		;funcret
  9996  0131C0                     __end_of_timer3_init:
  9997                           	opt stack 0
  9998                           tblptru	equ	0xFF8
  9999                           tblptrh	equ	0xFF7
 10000                           tblptrl	equ	0xFF6
 10001                           tablat	equ	0xFF5
 10002                           prodh	equ	0xFF4
 10003                           prodl	equ	0xFF3
 10004                           intcon	equ	0xFF2
 10005                           intcon2	equ	0xFF1
 10006                           indf0	equ	0xFEF
 10007                           postinc0	equ	0xFEE
 10008                           fsr0h	equ	0xFEA
 10009                           fsr0l	equ	0xFE9
 10010                           wreg	equ	0xFE8
 10011                           postdec1	equ	0xFE5
 10012                           fsr1l	equ	0xFE1
 10013                           indf2	equ	0xFDF
 10014                           postinc2	equ	0xFDE
 10015                           postdec2	equ	0xFDD
 10016                           plusw2	equ	0xFDB
 10017                           fsr2h	equ	0xFDA
 10018                           fsr2l	equ	0xFD9
 10019                           status	equ	0xFD8
 10020                           
 10021 ;; *************** function _timer1_init *****************
 10022 ;; Defined at:
 10023 ;;		line 54 in file "../My_header\My_header.h"
 10024 ;; Parameters:    Size  Location     Type
 10025 ;;  prescaler       1    wreg     unsigned char 
 10026 ;;  clock_select    1   31[COMRAM] unsigned char 
 10027 ;; Auto vars:     Size  Location     Type
 10028 ;;  prescaler       1    1[BANK0 ] unsigned char 
 10029 ;; Return value:  Size  Location     Type
 10030 ;;		None               void
 10031 ;; Registers used:
 10032 ;;		wreg, status,2, status,0
 10033 ;; Tracked objects:
 10034 ;;		On entry : 0/0
 10035 ;;		On exit  : 0/0
 10036 ;;		Unchanged: 0/0
 10037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10038 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10039 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10040 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10041 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10042 ;;Total ram usage:        3 bytes
 10043 ;; Hardware stack levels used:    1
 10044 ;; Hardware stack levels required when called:    4
 10045 ;; This function calls:
 10046 ;;		Nothing
 10047 ;; This function is called by:
 10048 ;;		_main_init
 10049 ;; This function uses a non-reentrant model
 10050 ;;
 10051                           
 10052                           	psect	text41
 10053  012DC6                     __ptext41:
 10054                           	opt stack 0
 10055  012DC6                     _timer1_init:
 10056                           	opt stack 25
 10057                           
 10058                           ;incstack = 0
 10059                           ;timer1_init@prescaler stored from wreg
 10060  012DC6  0100               	movlb	0	; () banked
 10061  012DC8  6FD4               	movwf	timer1_init@prescaler& (0+255),b
 10062                           
 10063                           ;My_header\My_header.h: 55: T1CONbits.TMR1CS = clock_select;
 10064  012DCA  C020  F0D3         	movff	timer1_init@clock_select,??_timer1_init
 10065  012DCE  0100               	movlb	0	; () banked
 10066  012DD0  3BD3               	swapf	??_timer1_init& (0+255),f,b
 10067  012DD2  47D3               	rlncf	??_timer1_init& (0+255),f,b
 10068  012DD4  47D3               	rlncf	??_timer1_init& (0+255),f,b
 10069  012DD6  50CD               	movf	4045,w,c	;volatile
 10070  012DD8  0100               	movlb	0	; () banked
 10071  012DDA  19D3               	xorwf	??_timer1_init& (0+255),w,b
 10072  012DDC  0B3F               	andlw	-193
 10073  012DDE  19D3               	xorwf	??_timer1_init& (0+255),w,b
 10074  012DE0  6ECD               	movwf	4045,c	;volatile
 10075                           
 10076                           ;My_header\My_header.h: 56: if (clock_select == 2) T1CONbits.T1OSCEN = 1;
 10077  012DE2  0E02               	movlw	2
 10078  012DE4  1820               	xorwf	timer1_init@clock_select,w,c
 10079  012DE6  A4D8               	btfss	status,2,c
 10080  012DE8  D002               	goto	l132
 10081                           
 10082                           ; BSR set to: 0
 10083  012DEA  86CD               	bsf	4045,3,c	;volatile
 10084  012DEC  D001               	goto	l8574
 10085  012DEE                     l132:
 10086                           
 10087                           ; BSR set to: 0
 10088                           ;My_header\My_header.h: 57: else T1CONbits.T1OSCEN = 0;
 10089  012DEE  96CD               	bcf	4045,3,c	;volatile
 10090  012DF0                     l8574:
 10091                           
 10092                           ; BSR set to: 0
 10093                           ;My_header\My_header.h: 58: T1CONbits.T1CKPS = prescaler;
 10094  012DF0  C0D4  F0D3         	movff	timer1_init@prescaler,??_timer1_init
 10095  012DF4  0100               	movlb	0	; () banked
 10096  012DF6  3BD3               	swapf	??_timer1_init& (0+255),f,b
 10097  012DF8  50CD               	movf	4045,w,c	;volatile
 10098  012DFA  0100               	movlb	0	; () banked
 10099  012DFC  19D3               	xorwf	??_timer1_init& (0+255),w,b
 10100  012DFE  0BCF               	andlw	-49
 10101  012E00  19D3               	xorwf	??_timer1_init& (0+255),w,b
 10102  012E02  6ECD               	movwf	4045,c	;volatile
 10103                           
 10104                           ; BSR set to: 0
 10105                           ;My_header\My_header.h: 59: T1CONbits.nT1SYNC = 1;
 10106  012E04  84CD               	bsf	4045,2,c	;volatile
 10107                           
 10108                           ; BSR set to: 0
 10109                           ;My_header\My_header.h: 60: T1CONbits.RD16 = 0;
 10110  012E06  92CD               	bcf	4045,1,c	;volatile
 10111                           
 10112                           ; BSR set to: 0
 10113                           ;My_header\My_header.h: 61: T1CONbits.TMR1ON = 1;
 10114  012E08  80CD               	bsf	4045,0,c	;volatile
 10115                           
 10116                           ; BSR set to: 0
 10117                           ;My_header\My_header.h: 62: IPR1bits.TMR1IP = 0;
 10118  012E0A  909F               	bcf	3999,0,c	;volatile
 10119                           
 10120                           ; BSR set to: 0
 10121                           ;My_header\My_header.h: 63: PIR1bits.TMR1IF = 0;
 10122  012E0C  909E               	bcf	3998,0,c	;volatile
 10123                           
 10124                           ; BSR set to: 0
 10125                           ;My_header\My_header.h: 64: PIE1bits.TMR1IE = 1;
 10126  012E0E  809D               	bsf	3997,0,c	;volatile
 10127                           
 10128                           ; BSR set to: 0
 10129                           ;My_header\My_header.h: 65: INTCONbits.PEIE = 1;
 10130  012E10  8CF2               	bsf	intcon,6,c	;volatile
 10131                           
 10132                           ; BSR set to: 0
 10133  012E12  0012               	return		;funcret
 10134  012E14                     __end_of_timer1_init:
 10135                           	opt stack 0
 10136                           tblptru	equ	0xFF8
 10137                           tblptrh	equ	0xFF7
 10138                           tblptrl	equ	0xFF6
 10139                           tablat	equ	0xFF5
 10140                           prodh	equ	0xFF4
 10141                           prodl	equ	0xFF3
 10142                           intcon	equ	0xFF2
 10143                           intcon2	equ	0xFF1
 10144                           indf0	equ	0xFEF
 10145                           postinc0	equ	0xFEE
 10146                           fsr0h	equ	0xFEA
 10147                           fsr0l	equ	0xFE9
 10148                           wreg	equ	0xFE8
 10149                           postdec1	equ	0xFE5
 10150                           fsr1l	equ	0xFE1
 10151                           indf2	equ	0xFDF
 10152                           postinc2	equ	0xFDE
 10153                           postdec2	equ	0xFDD
 10154                           plusw2	equ	0xFDB
 10155                           fsr2h	equ	0xFDA
 10156                           fsr2l	equ	0xFD9
 10157                           status	equ	0xFD8
 10158                           
 10159 ;; *************** function _timer0_init *****************
 10160 ;; Defined at:
 10161 ;;		line 15 in file "../My_header\My_header.h"
 10162 ;; Parameters:    Size  Location     Type
 10163 ;;  prescaler       1    wreg     unsigned char 
 10164 ;; Auto vars:     Size  Location     Type
 10165 ;;  prescaler       1    0[BANK0 ] unsigned char 
 10166 ;; Return value:  Size  Location     Type
 10167 ;;		None               void
 10168 ;; Registers used:
 10169 ;;		wreg, status,2, status,0
 10170 ;; Tracked objects:
 10171 ;;		On entry : 0/0
 10172 ;;		On exit  : 0/0
 10173 ;;		Unchanged: 0/0
 10174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10176 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10177 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10178 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10179 ;;Total ram usage:        2 bytes
 10180 ;; Hardware stack levels used:    1
 10181 ;; Hardware stack levels required when called:    4
 10182 ;; This function calls:
 10183 ;;		Nothing
 10184 ;; This function is called by:
 10185 ;;		_main_init
 10186 ;; This function uses a non-reentrant model
 10187 ;;
 10188                           
 10189                           	psect	text42
 10190  01305C                     __ptext42:
 10191                           	opt stack 0
 10192  01305C                     _timer0_init:
 10193                           	opt stack 25
 10194                           
 10195                           ; BSR set to: 0
 10196                           ;incstack = 0
 10197                           ;timer0_init@prescaler stored from wreg
 10198  01305C  0100               	movlb	0	; () banked
 10199  01305E  6FD3               	movwf	timer0_init@prescaler& (0+255),b
 10200                           
 10201                           ;My_header\My_header.h: 16: T0CONbits.TMR0ON = 1;
 10202  013060  8ED5               	bsf	4053,7,c	;volatile
 10203                           
 10204                           ;My_header\My_header.h: 17: T0CONbits.T08BIT = 1;
 10205  013062  8CD5               	bsf	4053,6,c	;volatile
 10206                           
 10207                           ;My_header\My_header.h: 18: T0CONbits.T0CS = 0;
 10208  013064  9AD5               	bcf	4053,5,c	;volatile
 10209                           
 10210                           ;My_header\My_header.h: 19: if (prescaler == 0) {
 10211  013066  0100               	movlb	0	; () banked
 10212  013068  51D3               	movf	timer0_init@prescaler& (0+255),w,b
 10213  01306A  0100               	movlb	0	; () banked
 10214  01306C  A4D8               	btfss	status,2,c
 10215  01306E  D002               	goto	l127
 10216                           
 10217                           ; BSR set to: 0
 10218                           ;My_header\My_header.h: 20: T0CONbits.PSA = 1;
 10219  013070  86D5               	bsf	4053,3,c	;volatile
 10220                           
 10221                           ;My_header\My_header.h: 21: } else {
 10222  013072  D00A               	goto	l8562
 10223  013074                     l127:
 10224                           
 10225                           ; BSR set to: 0
 10226                           ;My_header\My_header.h: 22: T0CONbits.PSA = 0;
 10227  013074  96D5               	bcf	4053,3,c	;volatile
 10228                           
 10229                           ; BSR set to: 0
 10230                           ;My_header\My_header.h: 23: T0CONbits.T0PS = prescaler - 1;
 10231  013076  C0D3  F020         	movff	timer0_init@prescaler,??_timer0_init
 10232  01307A  0EFF               	movlw	255
 10233  01307C  2620               	addwf	??_timer0_init,f,c
 10234  01307E  50D5               	movf	4053,w,c	;volatile
 10235  013080  1820               	xorwf	??_timer0_init,w,c
 10236  013082  0BF8               	andlw	-8
 10237  013084  1820               	xorwf	??_timer0_init,w,c
 10238  013086  6ED5               	movwf	4053,c	;volatile
 10239  013088                     l8562:
 10240                           
 10241                           ; BSR set to: 0
 10242                           ;My_header\My_header.h: 24: }
 10243                           ;My_header\My_header.h: 25: INTCONbits.T0IE = 1;
 10244  013088  8AF2               	bsf	intcon,5,c	;volatile
 10245                           
 10246                           ; BSR set to: 0
 10247                           ;My_header\My_header.h: 26: INTCONbits.TMR0IF = 0;
 10248  01308A  94F2               	bcf	intcon,2,c	;volatile
 10249                           
 10250                           ; BSR set to: 0
 10251                           ;My_header\My_header.h: 27: INTCON2bits.TMR0IP = 0;
 10252  01308C  94F1               	bcf	intcon2,2,c	;volatile
 10253                           
 10254                           ; BSR set to: 0
 10255                           ;My_header\My_header.h: 28: INTCONbits.PEIE = 1;
 10256  01308E  8CF2               	bsf	intcon,6,c	;volatile
 10257                           
 10258                           ; BSR set to: 0
 10259  013090  0012               	return		;funcret
 10260  013092                     __end_of_timer0_init:
 10261                           	opt stack 0
 10262                           tblptru	equ	0xFF8
 10263                           tblptrh	equ	0xFF7
 10264                           tblptrl	equ	0xFF6
 10265                           tablat	equ	0xFF5
 10266                           prodh	equ	0xFF4
 10267                           prodl	equ	0xFF3
 10268                           intcon	equ	0xFF2
 10269                           intcon2	equ	0xFF1
 10270                           indf0	equ	0xFEF
 10271                           postinc0	equ	0xFEE
 10272                           fsr0h	equ	0xFEA
 10273                           fsr0l	equ	0xFE9
 10274                           wreg	equ	0xFE8
 10275                           postdec1	equ	0xFE5
 10276                           fsr1l	equ	0xFE1
 10277                           indf2	equ	0xFDF
 10278                           postinc2	equ	0xFDE
 10279                           postdec2	equ	0xFDD
 10280                           plusw2	equ	0xFDB
 10281                           fsr2h	equ	0xFDA
 10282                           fsr2l	equ	0xFD9
 10283                           status	equ	0xFD8
 10284                           
 10285 ;; *************** function _ringbuf_init *****************
 10286 ;; Defined at:
 10287 ;;		line 24 in file "../My_header\My_ringbuf.h"
 10288 ;; Parameters:    Size  Location     Type
 10289 ;;  rb              2    0[BANK0 ] PTR struct ringbuf
 10290 ;;		 -> rx_buf(8), tx_buf(8), 
 10291 ;;  internal_buf    2    2[BANK0 ] PTR unsigned char 
 10292 ;;		 -> main_init@rxbuf(200), main_init@txbuf(200), 
 10293 ;;  bufsize         2    4[BANK0 ] unsigned int 
 10294 ;; Auto vars:     Size  Location     Type
 10295 ;;		None
 10296 ;; Return value:  Size  Location     Type
 10297 ;;		None               void
 10298 ;; Registers used:
 10299 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10300 ;; Tracked objects:
 10301 ;;		On entry : 0/0
 10302 ;;		On exit  : 0/0
 10303 ;;		Unchanged: 0/0
 10304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10305 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10308 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10309 ;;Total ram usage:        6 bytes
 10310 ;; Hardware stack levels used:    1
 10311 ;; Hardware stack levels required when called:    4
 10312 ;; This function calls:
 10313 ;;		Nothing
 10314 ;; This function is called by:
 10315 ;;		_main_init
 10316 ;; This function uses a non-reentrant model
 10317 ;;
 10318                           
 10319                           	psect	text43
 10320  012CD0                     __ptext43:
 10321                           	opt stack 0
 10322  012CD0                     _ringbuf_init:
 10323                           	opt stack 25
 10324                           
 10325                           ;My_header\My_ringbuf.h: 25: rb->buf = internal_buf;
 10326                           
 10327                           ; BSR set to: 0
 10328                           ;incstack = 0
 10329  012CD0  C0D3  FFD9         	movff	ringbuf_init@rb,fsr2l
 10330  012CD4  C0D4  FFDA         	movff	ringbuf_init@rb+1,fsr2h
 10331  012CD8  C0D5  FFDE         	movff	ringbuf_init@internal_buf,postinc2
 10332  012CDC  C0D6  FFDD         	movff	ringbuf_init@internal_buf+1,postdec2
 10333                           
 10334                           ;My_header\My_ringbuf.h: 26: rb->size = bufsize;
 10335  012CE0  0100               	movlb	0	; () banked
 10336  012CE2  EE20 F002          	lfsr	2,2
 10337  012CE6  51D3               	movf	ringbuf_init@rb& (0+255),w,b
 10338  012CE8  26D9               	addwf	fsr2l,f,c
 10339  012CEA  51D4               	movf	(ringbuf_init@rb+1)& (0+255),w,b
 10340  012CEC  22DA               	addwfc	fsr2h,f,c
 10341  012CEE  C0D7  FFDE         	movff	ringbuf_init@bufsize,postinc2
 10342  012CF2  C0D8  FFDD         	movff	ringbuf_init@bufsize+1,postdec2
 10343                           
 10344                           ; BSR set to: 0
 10345                           ;My_header\My_ringbuf.h: 27: rb->head = 0;
 10346  012CF6  0100               	movlb	0	; () banked
 10347  012CF8  EE20 F004          	lfsr	2,4
 10348  012CFC  51D3               	movf	ringbuf_init@rb& (0+255),w,b
 10349  012CFE  26D9               	addwf	fsr2l,f,c
 10350  012D00  51D4               	movf	(ringbuf_init@rb+1)& (0+255),w,b
 10351  012D02  22DA               	addwfc	fsr2h,f,c
 10352  012D04  0E00               	movlw	0
 10353  012D06  6EDE               	movwf	postinc2,c
 10354  012D08  0E00               	movlw	0
 10355  012D0A  6EDD               	movwf	postdec2,c
 10356                           
 10357                           ; BSR set to: 0
 10358                           ;My_header\My_ringbuf.h: 28: rb->tail = 0;
 10359  012D0C  0100               	movlb	0	; () banked
 10360  012D0E  EE20 F006          	lfsr	2,6
 10361  012D12  51D3               	movf	ringbuf_init@rb& (0+255),w,b
 10362  012D14  26D9               	addwf	fsr2l,f,c
 10363  012D16  51D4               	movf	(ringbuf_init@rb+1)& (0+255),w,b
 10364  012D18  22DA               	addwfc	fsr2h,f,c
 10365  012D1A  0E00               	movlw	0
 10366  012D1C  6EDE               	movwf	postinc2,c
 10367  012D1E  0E00               	movlw	0
 10368  012D20  6EDD               	movwf	postdec2,c
 10369                           
 10370                           ; BSR set to: 0
 10371  012D22  0012               	return		;funcret
 10372  012D24                     __end_of_ringbuf_init:
 10373                           	opt stack 0
 10374                           tblptru	equ	0xFF8
 10375                           tblptrh	equ	0xFF7
 10376                           tblptrl	equ	0xFF6
 10377                           tablat	equ	0xFF5
 10378                           prodh	equ	0xFF4
 10379                           prodl	equ	0xFF3
 10380                           intcon	equ	0xFF2
 10381                           intcon2	equ	0xFF1
 10382                           indf0	equ	0xFEF
 10383                           postinc0	equ	0xFEE
 10384                           fsr0h	equ	0xFEA
 10385                           fsr0l	equ	0xFE9
 10386                           wreg	equ	0xFE8
 10387                           postdec1	equ	0xFE5
 10388                           fsr1l	equ	0xFE1
 10389                           indf2	equ	0xFDF
 10390                           postinc2	equ	0xFDE
 10391                           postdec2	equ	0xFDD
 10392                           plusw2	equ	0xFDB
 10393                           fsr2h	equ	0xFDA
 10394                           fsr2l	equ	0xFD9
 10395                           status	equ	0xFD8
 10396                           
 10397 ;; *************** function _UART_init *****************
 10398 ;; Defined at:
 10399 ;;		line 192 in file "../My_header\My_header.h"
 10400 ;; Parameters:    Size  Location     Type
 10401 ;;		None
 10402 ;; Auto vars:     Size  Location     Type
 10403 ;;		None
 10404 ;; Return value:  Size  Location     Type
 10405 ;;		None               void
 10406 ;; Registers used:
 10407 ;;		wreg, status,2
 10408 ;; Tracked objects:
 10409 ;;		On entry : 0/0
 10410 ;;		On exit  : 0/0
 10411 ;;		Unchanged: 0/0
 10412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10417 ;;Total ram usage:        0 bytes
 10418 ;; Hardware stack levels used:    1
 10419 ;; Hardware stack levels required when called:    4
 10420 ;; This function calls:
 10421 ;;		Nothing
 10422 ;; This function is called by:
 10423 ;;		_main_init
 10424 ;; This function uses a non-reentrant model
 10425 ;;
 10426                           
 10427                           	psect	text44
 10428  013274                     __ptext44:
 10429                           	opt stack 0
 10430  013274                     _UART_init:
 10431                           	opt stack 25
 10432                           
 10433                           ;My_header\My_header.h: 193: TXSTA1bits.TX9 = 0;
 10434                           
 10435                           ; BSR set to: 0
 10436                           ;incstack = 0
 10437  013274  9CAD               	bcf	4013,6,c	;volatile
 10438                           
 10439                           ;My_header\My_header.h: 194: TXSTA1bits.TXEN = 1;
 10440  013276  8AAD               	bsf	4013,5,c	;volatile
 10441                           
 10442                           ;My_header\My_header.h: 195: TXSTA1bits.SYNC = 0;
 10443  013278  98AD               	bcf	4013,4,c	;volatile
 10444                           
 10445                           ;My_header\My_header.h: 196: TXSTA1bits.BRGH = 0;
 10446  01327A  94AD               	bcf	4013,2,c	;volatile
 10447                           
 10448                           ;My_header\My_header.h: 197: RCSTA1bits.SPEN = 1;
 10449  01327C  8EAC               	bsf	4012,7,c	;volatile
 10450                           
 10451                           ;My_header\My_header.h: 198: RCSTA1bits.RX9 = 0;
 10452  01327E  9CAC               	bcf	4012,6,c	;volatile
 10453                           
 10454                           ;My_header\My_header.h: 199: RCSTA1bits.CREN = 1;
 10455  013280  88AC               	bsf	4012,4,c	;volatile
 10456                           
 10457                           ;My_header\My_header.h: 200: BAUDCON1bits.BRG16 = 0;
 10458  013282  967E               	bcf	3966,3,c	;volatile
 10459                           
 10460                           ;My_header\My_header.h: 201: SPBRG1 = 48000000 / 64 / 9600 - 1;
 10461  013284  0E4D               	movlw	77
 10462  013286  6EB0               	movwf	4016,c	;volatile
 10463                           
 10464                           ;My_header\My_header.h: 202: SPBRGH1 = 0;
 10465  013288  0E00               	movlw	0
 10466  01328A  6E7F               	movwf	3967,c	;volatile
 10467                           
 10468                           ;My_header\My_header.h: 203: IPR1bits.RC1IP = 0;
 10469  01328C  9A9F               	bcf	3999,5,c	;volatile
 10470                           
 10471                           ;My_header\My_header.h: 204: PIE1bits.RCIE = 1;
 10472  01328E  8A9D               	bsf	3997,5,c	;volatile
 10473                           
 10474                           ;My_header\My_header.h: 205: INTCONbits.PEIE = 1;
 10475  013290  8CF2               	bsf	intcon,6,c	;volatile
 10476  013292  0012               	return		;funcret
 10477  013294                     __end_of_UART_init:
 10478                           	opt stack 0
 10479                           tblptru	equ	0xFF8
 10480                           tblptrh	equ	0xFF7
 10481                           tblptrl	equ	0xFF6
 10482                           tablat	equ	0xFF5
 10483                           prodh	equ	0xFF4
 10484                           prodl	equ	0xFF3
 10485                           intcon	equ	0xFF2
 10486                           intcon2	equ	0xFF1
 10487                           indf0	equ	0xFEF
 10488                           postinc0	equ	0xFEE
 10489                           fsr0h	equ	0xFEA
 10490                           fsr0l	equ	0xFE9
 10491                           wreg	equ	0xFE8
 10492                           postdec1	equ	0xFE5
 10493                           fsr1l	equ	0xFE1
 10494                           indf2	equ	0xFDF
 10495                           postinc2	equ	0xFDE
 10496                           postdec2	equ	0xFDD
 10497                           plusw2	equ	0xFDB
 10498                           fsr2h	equ	0xFDA
 10499                           fsr2l	equ	0xFD9
 10500                           status	equ	0xFD8
 10501                           
 10502 ;; *************** function _RTCC_init *****************
 10503 ;; Defined at:
 10504 ;;		line 56 in file "../My_header\My_RTCC.h"
 10505 ;; Parameters:    Size  Location     Type
 10506 ;;		None
 10507 ;; Auto vars:     Size  Location     Type
 10508 ;;		None
 10509 ;; Return value:  Size  Location     Type
 10510 ;;		None               void
 10511 ;; Registers used:
 10512 ;;		wreg, status,2
 10513 ;; Tracked objects:
 10514 ;;		On entry : 0/0
 10515 ;;		On exit  : 0/0
 10516 ;;		Unchanged: 0/0
 10517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10522 ;;Total ram usage:        0 bytes
 10523 ;; Hardware stack levels used:    1
 10524 ;; Hardware stack levels required when called:    4
 10525 ;; This function calls:
 10526 ;;		Nothing
 10527 ;; This function is called by:
 10528 ;;		_main_init
 10529 ;; This function uses a non-reentrant model
 10530 ;;
 10531                           
 10532                           	psect	text45
 10533  0130C2                     __ptext45:
 10534                           	opt stack 0
 10535  0130C2                     _RTCC_init:
 10536                           	opt stack 25
 10537                           
 10538                           ;My_header\My_RTCC.h: 57: RTCCFGbits.RTCWREN = 1;
 10539                           
 10540                           ;incstack = 0
 10541  0130C2  010F               	movlb	15	; () banked
 10542  0130C4  8B3F               	bsf	63,5,b	;volatile
 10543                           
 10544                           ;My_header\My_RTCC.h: 58: if (RTCCFGbits.RTCWREN != 1) {
 10545  0130C6  010F               	movlb	15	; () banked
 10546  0130C8  BB3F               	btfsc	63,5,b	;volatile
 10547  0130CA  D006               	goto	l8662
 10548                           
 10549                           ; BSR set to: 15
 10550                           ;My_header\My_RTCC.h: 59: EECON2 = 0x55;
 10551  0130CC  0E55               	movlw	85
 10552  0130CE  6EA7               	movwf	4007,c	;volatile
 10553                           
 10554                           ;My_header\My_RTCC.h: 60: EECON2 = 0xAA;
 10555  0130D0  0EAA               	movlw	170
 10556  0130D2  6EA7               	movwf	4007,c	;volatile
 10557                           
 10558                           ; BSR set to: 15
 10559                           ;My_header\My_RTCC.h: 61: RTCCFGbits.RTCWREN = 1;
 10560  0130D4  010F               	movlb	15	; () banked
 10561  0130D6  8B3F               	bsf	63,5,b	;volatile
 10562  0130D8                     l8662:
 10563                           
 10564                           ; BSR set to: 15
 10565                           ;My_header\My_RTCC.h: 62: }
 10566                           ;My_header\My_RTCC.h: 63: RTCCFGbits.RTCEN = 1;
 10567  0130D8  010F               	movlb	15	; () banked
 10568  0130DA  8F3F               	bsf	63,7,b	;volatile
 10569                           
 10570                           ; BSR set to: 15
 10571                           ;My_header\My_RTCC.h: 64: RTCCFGbits.RTCOE = 0;
 10572  0130DC  010F               	movlb	15	; () banked
 10573  0130DE  953F               	bcf	63,2,b	;volatile
 10574                           
 10575                           ; BSR set to: 15
 10576                           ;My_header\My_RTCC.h: 65: PADCFG1bits.RTSECSEL0 = 1;
 10577  0130E0  010F               	movlb	15	; () banked
 10578  0130E2  833C               	bsf	60,1,b	;volatile
 10579                           
 10580                           ; BSR set to: 15
 10581                           ;My_header\My_RTCC.h: 66: PADCFG1bits.RTSECSEL1 = 1;
 10582  0130E4  010F               	movlb	15	; () banked
 10583  0130E6  853C               	bsf	60,2,b	;volatile
 10584                           
 10585                           ;My_header\My_RTCC.h: 67: RTCCAL = 0x00;
 10586  0130E8  0E00               	movlw	0
 10587  0130EA  010F               	movlb	15	; () banked
 10588  0130EC  6F3E               	movwf	62,b	;volatile
 10589                           
 10590                           ; BSR set to: 15
 10591  0130EE  0012               	return		;funcret
 10592  0130F0                     __end_of_RTCC_init:
 10593                           	opt stack 0
 10594                           tblptru	equ	0xFF8
 10595                           tblptrh	equ	0xFF7
 10596                           tblptrl	equ	0xFF6
 10597                           tablat	equ	0xFF5
 10598                           prodh	equ	0xFF4
 10599                           prodl	equ	0xFF3
 10600                           intcon	equ	0xFF2
 10601                           intcon2	equ	0xFF1
 10602                           indf0	equ	0xFEF
 10603                           postinc0	equ	0xFEE
 10604                           fsr0h	equ	0xFEA
 10605                           fsr0l	equ	0xFE9
 10606                           wreg	equ	0xFE8
 10607                           postdec1	equ	0xFE5
 10608                           fsr1l	equ	0xFE1
 10609                           indf2	equ	0xFDF
 10610                           postinc2	equ	0xFDE
 10611                           postdec2	equ	0xFDD
 10612                           plusw2	equ	0xFDB
 10613                           fsr2h	equ	0xFDA
 10614                           fsr2l	equ	0xFD9
 10615                           status	equ	0xFD8
 10616                           
 10617 ;; *************** function _I2C_init *****************
 10618 ;; Defined at:
 10619 ;;		line 25 in file "../My_header\My_I2C.h"
 10620 ;; Parameters:    Size  Location     Type
 10621 ;;		None
 10622 ;; Auto vars:     Size  Location     Type
 10623 ;;		None
 10624 ;; Return value:  Size  Location     Type
 10625 ;;		None               void
 10626 ;; Registers used:
 10627 ;;		wreg, status,2
 10628 ;; Tracked objects:
 10629 ;;		On entry : 0/0
 10630 ;;		On exit  : 0/0
 10631 ;;		Unchanged: 0/0
 10632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10637 ;;Total ram usage:        0 bytes
 10638 ;; Hardware stack levels used:    1
 10639 ;; Hardware stack levels required when called:    4
 10640 ;; This function calls:
 10641 ;;		Nothing
 10642 ;; This function is called by:
 10643 ;;		_main_init
 10644 ;; This function uses a non-reentrant model
 10645 ;;
 10646                           
 10647                           	psect	text46
 10648  013344                     __ptext46:
 10649                           	opt stack 0
 10650  013344                     _I2C_init:
 10651                           	opt stack 25
 10652                           
 10653                           ;My_header\My_I2C.h: 26: SSP1STAT = 0b10000000;
 10654                           
 10655                           ; BSR set to: 15
 10656                           ;incstack = 0
 10657  013344  0E80               	movlw	128
 10658  013346  6EC7               	movwf	4039,c	;volatile
 10659                           
 10660                           ;My_header\My_I2C.h: 27: SSP1CON1 = 0b00101000;
 10661  013348  0E28               	movlw	40
 10662  01334A  6EC6               	movwf	4038,c	;volatile
 10663                           
 10664                           ;My_header\My_I2C.h: 28: SSP1ADD = 0x13;
 10665  01334C  0E13               	movlw	19
 10666  01334E  6EC8               	movwf	4040,c	;volatile
 10667                           
 10668                           ;My_header\My_I2C.h: 31: SSP1IF = 0;
 10669  013350  969E               	bcf	3998,3,c	;volatile
 10670                           
 10671                           ;My_header\My_I2C.h: 32: BCL1IF = 0;
 10672  013352  96A1               	bcf	4001,3,c	;volatile
 10673  013354  0012               	return		;funcret
 10674  013356                     __end_of_I2C_init:
 10675                           	opt stack 0
 10676                           tblptru	equ	0xFF8
 10677                           tblptrh	equ	0xFF7
 10678                           tblptrl	equ	0xFF6
 10679                           tablat	equ	0xFF5
 10680                           prodh	equ	0xFF4
 10681                           prodl	equ	0xFF3
 10682                           intcon	equ	0xFF2
 10683                           intcon2	equ	0xFF1
 10684                           indf0	equ	0xFEF
 10685                           postinc0	equ	0xFEE
 10686                           fsr0h	equ	0xFEA
 10687                           fsr0l	equ	0xFE9
 10688                           wreg	equ	0xFE8
 10689                           postdec1	equ	0xFE5
 10690                           fsr1l	equ	0xFE1
 10691                           indf2	equ	0xFDF
 10692                           postinc2	equ	0xFDE
 10693                           postdec2	equ	0xFDD
 10694                           plusw2	equ	0xFDB
 10695                           fsr2h	equ	0xFDA
 10696                           fsr2l	equ	0xFD9
 10697                           status	equ	0xFD8
 10698                           
 10699 ;; *************** function _I2C_LCD_init *****************
 10700 ;; Defined at:
 10701 ;;		line 164 in file "../My_header\My_I2C.h"
 10702 ;; Parameters:    Size  Location     Type
 10703 ;;		None
 10704 ;; Auto vars:     Size  Location     Type
 10705 ;;		None
 10706 ;; Return value:  Size  Location     Type
 10707 ;;		None               void
 10708 ;; Registers used:
 10709 ;;		wreg, status,2, status,0, cstack
 10710 ;; Tracked objects:
 10711 ;;		On entry : 0/0
 10712 ;;		On exit  : 0/0
 10713 ;;		Unchanged: 0/0
 10714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10719 ;;Total ram usage:        0 bytes
 10720 ;; Hardware stack levels used:    1
 10721 ;; Hardware stack levels required when called:    8
 10722 ;; This function calls:
 10723 ;;		_Delay_ms
 10724 ;;		_I2C_LCD_Clear
 10725 ;;		_I2C_LCD_Command
 10726 ;; This function is called by:
 10727 ;;		_main_init
 10728 ;; This function uses a non-reentrant model
 10729 ;;
 10730                           
 10731                           	psect	text47
 10732  012C78                     __ptext47:
 10733                           	opt stack 0
 10734  012C78                     _I2C_LCD_init:
 10735                           	opt stack 21
 10736                           
 10737                           ;My_header\My_I2C.h: 165: Delay_ms(40);
 10738                           
 10739                           ;incstack = 0
 10740  012C78  0E00               	movlw	0
 10741  012C7A  0100               	movlb	0	; () banked
 10742  012C7C  6FD4               	movwf	(Delay_ms@ms+1)& (0+255),b
 10743  012C7E  0E28               	movlw	40
 10744  012C80  6FD3               	movwf	Delay_ms@ms& (0+255),b
 10745  012C82  ECA3  F098         	call	_Delay_ms	;wreg free
 10746                           
 10747                           ;My_header\My_I2C.h: 166: I2C_LCD_Command(0x38);
 10748  012C86  0E38               	movlw	56
 10749  012C88  ECF7  F097         	call	_I2C_LCD_Command
 10750                           
 10751                           ;My_header\My_I2C.h: 167: I2C_LCD_Command(0x39);
 10752  012C8C  0E39               	movlw	57
 10753  012C8E  ECF7  F097         	call	_I2C_LCD_Command
 10754                           
 10755                           ;My_header\My_I2C.h: 168: I2C_LCD_Command(0x14);
 10756  012C92  0E14               	movlw	20
 10757  012C94  ECF7  F097         	call	_I2C_LCD_Command
 10758                           
 10759                           ;My_header\My_I2C.h: 169: I2C_LCD_Command(0x70);
 10760  012C98  0E70               	movlw	112
 10761  012C9A  ECF7  F097         	call	_I2C_LCD_Command
 10762                           
 10763                           ;My_header\My_I2C.h: 170: I2C_LCD_Command(0x56);
 10764  012C9E  0E56               	movlw	86
 10765  012CA0  ECF7  F097         	call	_I2C_LCD_Command
 10766                           
 10767                           ;My_header\My_I2C.h: 171: I2C_LCD_Command(0x6C);
 10768  012CA4  0E6C               	movlw	108
 10769  012CA6  ECF7  F097         	call	_I2C_LCD_Command
 10770                           
 10771                           ;My_header\My_I2C.h: 172: Delay_ms(200);
 10772  012CAA  0E00               	movlw	0
 10773  012CAC  0100               	movlb	0	; () banked
 10774  012CAE  6FD4               	movwf	(Delay_ms@ms+1)& (0+255),b
 10775  012CB0  0EC8               	movlw	200
 10776  012CB2  6FD3               	movwf	Delay_ms@ms& (0+255),b
 10777  012CB4  ECA3  F098         	call	_Delay_ms	;wreg free
 10778                           
 10779                           ;My_header\My_I2C.h: 173: I2C_LCD_Command(0x38);
 10780  012CB8  0E38               	movlw	56
 10781  012CBA  ECF7  F097         	call	_I2C_LCD_Command
 10782                           
 10783                           ;My_header\My_I2C.h: 174: I2C_LCD_Command(0x0C);
 10784  012CBE  0E0C               	movlw	12
 10785  012CC0  ECF7  F097         	call	_I2C_LCD_Command
 10786                           
 10787                           ;My_header\My_I2C.h: 175: I2C_LCD_Command(0x06);
 10788  012CC4  0E06               	movlw	6
 10789  012CC6  ECF7  F097         	call	_I2C_LCD_Command
 10790                           
 10791                           ;My_header\My_I2C.h: 176: I2C_LCD_Clear();
 10792  012CCA  EC66  F099         	call	_I2C_LCD_Clear	;wreg free
 10793  012CCE  0012               	return		;funcret
 10794  012CD0                     __end_of_I2C_LCD_init:
 10795                           	opt stack 0
 10796                           tblptru	equ	0xFF8
 10797                           tblptrh	equ	0xFF7
 10798                           tblptrl	equ	0xFF6
 10799                           tablat	equ	0xFF5
 10800                           prodh	equ	0xFF4
 10801                           prodl	equ	0xFF3
 10802                           intcon	equ	0xFF2
 10803                           intcon2	equ	0xFF1
 10804                           indf0	equ	0xFEF
 10805                           postinc0	equ	0xFEE
 10806                           fsr0h	equ	0xFEA
 10807                           fsr0l	equ	0xFE9
 10808                           wreg	equ	0xFE8
 10809                           postdec1	equ	0xFE5
 10810                           fsr1l	equ	0xFE1
 10811                           indf2	equ	0xFDF
 10812                           postinc2	equ	0xFDE
 10813                           postdec2	equ	0xFDD
 10814                           plusw2	equ	0xFDB
 10815                           fsr2h	equ	0xFDA
 10816                           fsr2l	equ	0xFD9
 10817                           status	equ	0xFD8
 10818                           
 10819 ;; *************** function _I2C_LCD_Clear *****************
 10820 ;; Defined at:
 10821 ;;		line 107 in file "../My_header\My_I2C.h"
 10822 ;; Parameters:    Size  Location     Type
 10823 ;;		None
 10824 ;; Auto vars:     Size  Location     Type
 10825 ;;		None
 10826 ;; Return value:  Size  Location     Type
 10827 ;;		None               void
 10828 ;; Registers used:
 10829 ;;		wreg, status,2, status,0, cstack
 10830 ;; Tracked objects:
 10831 ;;		On entry : 0/0
 10832 ;;		On exit  : 0/0
 10833 ;;		Unchanged: 0/0
 10834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10837 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10838 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10839 ;;Total ram usage:        1 bytes
 10840 ;; Hardware stack levels used:    1
 10841 ;; Hardware stack levels required when called:    7
 10842 ;; This function calls:
 10843 ;;		_I2C_LCD_Command
 10844 ;; This function is called by:
 10845 ;;		_I2C_LCD_init
 10846 ;;		_display_LCD
 10847 ;;		_sleep_loop
 10848 ;; This function uses a non-reentrant model
 10849 ;;
 10850                           
 10851                           	psect	text48
 10852  0132CC                     __ptext48:
 10853                           	opt stack 0
 10854  0132CC                     _I2C_LCD_Clear:
 10855                           	opt stack 22
 10856                           
 10857                           ;My_header\My_I2C.h: 108: I2C_LCD_Command(0x01);
 10858                           
 10859                           ;incstack = 0
 10860  0132CC  0E01               	movlw	1
 10861  0132CE  ECF7  F097         	call	_I2C_LCD_Command
 10862                           
 10863                           ;My_header\My_I2C.h: 109: _delay((unsigned long)((1100)*(48000000/4000000.0)));
 10864  0132D2  0E12               	movlw	18
 10865  0132D4  0100               	movlb	0	; () banked
 10866  0132D6  6FD8               	movwf	??_I2C_LCD_Clear& (0+255),b
 10867  0132D8  0E23               	movlw	35
 10868  0132DA                     u10077:
 10869  0132DA  2EE8               	decfsz	wreg,f,c
 10870  0132DC  D7FE               	goto	u10077
 10871  0132DE  2FD8               	decfsz	??_I2C_LCD_Clear& (0+255),f,b
 10872  0132E0  D7FC               	goto	u10077
 10873  0132E2  F000               	nop	
 10874  0132E4  0012               	return		;funcret
 10875  0132E6                     __end_of_I2C_LCD_Clear:
 10876                           	opt stack 0
 10877                           tblptru	equ	0xFF8
 10878                           tblptrh	equ	0xFF7
 10879                           tblptrl	equ	0xFF6
 10880                           tablat	equ	0xFF5
 10881                           prodh	equ	0xFF4
 10882                           prodl	equ	0xFF3
 10883                           intcon	equ	0xFF2
 10884                           intcon2	equ	0xFF1
 10885                           indf0	equ	0xFEF
 10886                           postinc0	equ	0xFEE
 10887                           fsr0h	equ	0xFEA
 10888                           fsr0l	equ	0xFE9
 10889                           wreg	equ	0xFE8
 10890                           postdec1	equ	0xFE5
 10891                           fsr1l	equ	0xFE1
 10892                           indf2	equ	0xFDF
 10893                           postinc2	equ	0xFDE
 10894                           postdec2	equ	0xFDD
 10895                           plusw2	equ	0xFDB
 10896                           fsr2h	equ	0xFDA
 10897                           fsr2l	equ	0xFD9
 10898                           status	equ	0xFD8
 10899                           
 10900 ;; *************** function _I2C_LCD_Command *****************
 10901 ;; Defined at:
 10902 ;;		line 94 in file "../My_header\My_I2C.h"
 10903 ;; Parameters:    Size  Location     Type
 10904 ;;  c               1    wreg     unsigned char 
 10905 ;; Auto vars:     Size  Location     Type
 10906 ;;  c               1    3[BANK0 ] unsigned char 
 10907 ;;  ans             1    4[BANK0 ] unsigned char 
 10908 ;; Return value:  Size  Location     Type
 10909 ;;		None               void
 10910 ;; Registers used:
 10911 ;;		wreg, status,2, status,0, cstack
 10912 ;; Tracked objects:
 10913 ;;		On entry : 0/0
 10914 ;;		On exit  : 0/0
 10915 ;;		Unchanged: 0/0
 10916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10918 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10920 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10921 ;;Total ram usage:        2 bytes
 10922 ;; Hardware stack levels used:    1
 10923 ;; Hardware stack levels required when called:    6
 10924 ;; This function calls:
 10925 ;;		_I2C_Send
 10926 ;;		_I2C_Start
 10927 ;;		_I2C_Stop
 10928 ;; This function is called by:
 10929 ;;		_I2C_LCD_Clear
 10930 ;;		_I2C_LCD_SetCursor
 10931 ;;		_I2C_LCD_init
 10932 ;; This function uses a non-reentrant model
 10933 ;;
 10934                           
 10935                           	psect	text49
 10936  012FEE                     __ptext49:
 10937                           	opt stack 0
 10938  012FEE                     _I2C_LCD_Command:
 10939                           	opt stack 22
 10940                           
 10941                           ;incstack = 0
 10942                           ;I2C_LCD_Command@c stored from wreg
 10943  012FEE  0100               	movlb	0	; () banked
 10944  012FF0  6FD6               	movwf	I2C_LCD_Command@c& (0+255),b
 10945                           
 10946                           ;My_header\My_I2C.h: 95: uint8_t ans;
 10947                           ;My_header\My_I2C.h: 97: ans = I2C_Start(0x3E, 0);
 10948  012FF2  0E00               	movlw	0
 10949  012FF4  0100               	movlb	0	; () banked
 10950  012FF6  6FD4               	movwf	I2C_Start@rw& (0+255),b
 10951  012FF8  0E3E               	movlw	62
 10952  012FFA  EC49  F098         	call	_I2C_Start
 10953  012FFE  0100               	movlb	0	; () banked
 10954  013000  6FD7               	movwf	I2C_LCD_Command@ans& (0+255),b
 10955                           
 10956                           ; BSR set to: 0
 10957                           ;My_header\My_I2C.h: 98: if (ans == 0) {
 10958  013002  0100               	movlb	0	; () banked
 10959  013004  51D7               	movf	I2C_LCD_Command@ans& (0+255),w,b
 10960  013006  0100               	movlb	0	; () banked
 10961  013008  A4D8               	btfss	status,2,c
 10962  01300A  D007               	goto	l333
 10963                           
 10964                           ; BSR set to: 0
 10965                           ;My_header\My_I2C.h: 100: I2C_Send(0b10000000);
 10966  01300C  0E80               	movlw	128
 10967  01300E  EC80  F099         	call	_I2C_Send
 10968                           
 10969                           ;My_header\My_I2C.h: 101: I2C_Send(c);
 10970  013012  0100               	movlb	0	; () banked
 10971  013014  51D6               	movf	I2C_LCD_Command@c& (0+255),w,b
 10972  013016  EC80  F099         	call	_I2C_Send
 10973  01301A                     l333:
 10974                           
 10975                           ;My_header\My_I2C.h: 102: }
 10976                           ;My_header\My_I2C.h: 103: I2C_Stop();
 10977  01301A  ECAB  F099         	call	_I2C_Stop	;wreg free
 10978                           
 10979                           ;My_header\My_I2C.h: 104: _delay((unsigned long)((26)*(48000000/4000000.0)));
 10980  01301E  0E68               	movlw	104
 10981  013020                     u10087:
 10982  013020  2EE8               	decfsz	wreg,f,c
 10983  013022  D7FE               	goto	u10087
 10984  013024  0012               	return		;funcret
 10985  013026                     __end_of_I2C_LCD_Command:
 10986                           	opt stack 0
 10987                           tblptru	equ	0xFF8
 10988                           tblptrh	equ	0xFF7
 10989                           tblptrl	equ	0xFF6
 10990                           tablat	equ	0xFF5
 10991                           prodh	equ	0xFF4
 10992                           prodl	equ	0xFF3
 10993                           intcon	equ	0xFF2
 10994                           intcon2	equ	0xFF1
 10995                           indf0	equ	0xFEF
 10996                           postinc0	equ	0xFEE
 10997                           fsr0h	equ	0xFEA
 10998                           fsr0l	equ	0xFE9
 10999                           wreg	equ	0xFE8
 11000                           postdec1	equ	0xFE5
 11001                           fsr1l	equ	0xFE1
 11002                           indf2	equ	0xFDF
 11003                           postinc2	equ	0xFDE
 11004                           postdec2	equ	0xFDD
 11005                           plusw2	equ	0xFDB
 11006                           fsr2h	equ	0xFDA
 11007                           fsr2l	equ	0xFD9
 11008                           status	equ	0xFD8
 11009                           
 11010 ;; *************** function _I2C_Stop *****************
 11011 ;; Defined at:
 11012 ;;		line 59 in file "../My_header\My_I2C.h"
 11013 ;; Parameters:    Size  Location     Type
 11014 ;;		None
 11015 ;; Auto vars:     Size  Location     Type
 11016 ;;		None
 11017 ;; Return value:  Size  Location     Type
 11018 ;;		None               void
 11019 ;; Registers used:
 11020 ;;		wreg, status,2, status,0, cstack
 11021 ;; Tracked objects:
 11022 ;;		On entry : 0/0
 11023 ;;		On exit  : 0/0
 11024 ;;		Unchanged: 0/0
 11025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11030 ;;Total ram usage:        0 bytes
 11031 ;; Hardware stack levels used:    1
 11032 ;; Hardware stack levels required when called:    5
 11033 ;; This function calls:
 11034 ;;		_I2C_IdleCheck
 11035 ;; This function is called by:
 11036 ;;		_I2C_LCD_Command
 11037 ;;		_I2C_LCD_Putc
 11038 ;;		_I2C_LCD_Puts
 11039 ;;		_I2C_LCD_CreateChar
 11040 ;; This function uses a non-reentrant model
 11041 ;;
 11042                           
 11043                           	psect	text50
 11044  013356                     __ptext50:
 11045                           	opt stack 0
 11046  013356                     _I2C_Stop:
 11047                           	opt stack 22
 11048                           
 11049                           ;My_header\My_I2C.h: 61: I2C_IdleCheck(0x5);
 11050                           
 11051                           ;incstack = 0
 11052  013356  0E05               	movlw	5
 11053  013358  EC73  F099         	call	_I2C_IdleCheck
 11054                           
 11055                           ;My_header\My_I2C.h: 62: SSP1CON2bits.PEN = 1;
 11056  01335C  84C5               	bsf	4037,2,c	;volatile
 11057  01335E  0012               	return		;funcret
 11058  013360                     __end_of_I2C_Stop:
 11059                           	opt stack 0
 11060                           tblptru	equ	0xFF8
 11061                           tblptrh	equ	0xFF7
 11062                           tblptrl	equ	0xFF6
 11063                           tablat	equ	0xFF5
 11064                           prodh	equ	0xFF4
 11065                           prodl	equ	0xFF3
 11066                           intcon	equ	0xFF2
 11067                           intcon2	equ	0xFF1
 11068                           indf0	equ	0xFEF
 11069                           postinc0	equ	0xFEE
 11070                           fsr0h	equ	0xFEA
 11071                           fsr0l	equ	0xFE9
 11072                           wreg	equ	0xFE8
 11073                           postdec1	equ	0xFE5
 11074                           fsr1l	equ	0xFE1
 11075                           indf2	equ	0xFDF
 11076                           postinc2	equ	0xFDE
 11077                           postdec2	equ	0xFDD
 11078                           plusw2	equ	0xFDB
 11079                           fsr2h	equ	0xFDA
 11080                           fsr2l	equ	0xFD9
 11081                           status	equ	0xFD8
 11082                           
 11083 ;; *************** function _I2C_Start *****************
 11084 ;; Defined at:
 11085 ;;		line 35 in file "../My_header\My_I2C.h"
 11086 ;; Parameters:    Size  Location     Type
 11087 ;;  adrs            1    wreg     unsigned char 
 11088 ;;  rw              1    1[BANK0 ] unsigned char 
 11089 ;; Auto vars:     Size  Location     Type
 11090 ;;  adrs            1    2[BANK0 ] unsigned char 
 11091 ;; Return value:  Size  Location     Type
 11092 ;;                  1    wreg      unsigned char 
 11093 ;; Registers used:
 11094 ;;		wreg, status,2, status,0, cstack
 11095 ;; Tracked objects:
 11096 ;;		On entry : 0/0
 11097 ;;		On exit  : 0/0
 11098 ;;		Unchanged: 0/0
 11099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11100 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11101 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11103 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11104 ;;Total ram usage:        2 bytes
 11105 ;; Hardware stack levels used:    1
 11106 ;; Hardware stack levels required when called:    5
 11107 ;; This function calls:
 11108 ;;		_I2C_IdleCheck
 11109 ;; This function is called by:
 11110 ;;		_I2C_LCD_Command
 11111 ;;		_I2C_LCD_Putc
 11112 ;;		_I2C_LCD_Puts
 11113 ;;		_I2C_LCD_CreateChar
 11114 ;; This function uses a non-reentrant model
 11115 ;;
 11116                           
 11117                           	psect	text51
 11118  013092                     __ptext51:
 11119                           	opt stack 0
 11120  013092                     _I2C_Start:
 11121                           	opt stack 22
 11122                           
 11123                           ;incstack = 0
 11124                           ;I2C_Start@adrs stored from wreg
 11125  013092  0100               	movlb	0	; () banked
 11126  013094  6FD5               	movwf	I2C_Start@adrs& (0+255),b
 11127                           
 11128                           ;My_header\My_I2C.h: 37: I2C_IdleCheck(0x5);
 11129  013096  0E05               	movlw	5
 11130  013098  EC73  F099         	call	_I2C_IdleCheck
 11131                           
 11132                           ;My_header\My_I2C.h: 38: SSP1CON2bits.SEN = 1;
 11133  01309C  80C5               	bsf	4037,0,c	;volatile
 11134                           
 11135                           ;My_header\My_I2C.h: 40: I2C_IdleCheck(0x5);
 11136  01309E  0E05               	movlw	5
 11137  0130A0  EC73  F099         	call	_I2C_IdleCheck
 11138                           
 11139                           ;My_header\My_I2C.h: 41: SSP1IF = 0;
 11140  0130A4  969E               	bcf	3998,3,c	;volatile
 11141                           
 11142                           ;My_header\My_I2C.h: 42: SSP1BUF = (uint8_t) ((adrs << 1) + rw);
 11143  0130A6  0100               	movlb	0	; () banked
 11144  0130A8  51D5               	movf	I2C_Start@adrs& (0+255),w,b
 11145  0130AA  25D5               	addwf	I2C_Start@adrs& (0+255),w,b
 11146  0130AC  0100               	movlb	0	; () banked
 11147  0130AE  25D4               	addwf	I2C_Start@rw& (0+255),w,b
 11148  0130B0  6EC9               	movwf	4041,c	;volatile
 11149  0130B2                     l309:
 11150  0130B2  A69E               	btfss	3998,3,c	;volatile
 11151  0130B4  D7FE               	goto	l309
 11152                           
 11153                           ;My_header\My_I2C.h: 44: return SSP1CON2bits.ACKSTAT;
 11154  0130B6  ACC5               	btfss	4037,6,c	;volatile
 11155  0130B8  D002               	goto	u8260
 11156  0130BA  0E01               	movlw	1
 11157  0130BC  0012               	return	
 11158  0130BE                     u8260:
 11159  0130BE  0E00               	movlw	0
 11160  0130C0  0012               	return	
 11161  0130C2                     __end_of_I2C_Start:
 11162                           	opt stack 0
 11163                           tblptru	equ	0xFF8
 11164                           tblptrh	equ	0xFF7
 11165                           tblptrl	equ	0xFF6
 11166                           tablat	equ	0xFF5
 11167                           prodh	equ	0xFF4
 11168                           prodl	equ	0xFF3
 11169                           intcon	equ	0xFF2
 11170                           intcon2	equ	0xFF1
 11171                           indf0	equ	0xFEF
 11172                           postinc0	equ	0xFEE
 11173                           fsr0h	equ	0xFEA
 11174                           fsr0l	equ	0xFE9
 11175                           wreg	equ	0xFE8
 11176                           postdec1	equ	0xFE5
 11177                           fsr1l	equ	0xFE1
 11178                           indf2	equ	0xFDF
 11179                           postinc2	equ	0xFDE
 11180                           postdec2	equ	0xFDD
 11181                           plusw2	equ	0xFDB
 11182                           fsr2h	equ	0xFDA
 11183                           fsr2l	equ	0xFD9
 11184                           status	equ	0xFD8
 11185                           
 11186 ;; *************** function _I2C_Send *****************
 11187 ;; Defined at:
 11188 ;;		line 65 in file "../My_header\My_I2C.h"
 11189 ;; Parameters:    Size  Location     Type
 11190 ;;  data            1    wreg     unsigned char 
 11191 ;; Auto vars:     Size  Location     Type
 11192 ;;  data            1    1[BANK0 ] unsigned char 
 11193 ;; Return value:  Size  Location     Type
 11194 ;;                  1    wreg      unsigned char 
 11195 ;; Registers used:
 11196 ;;		wreg, status,2, status,0, cstack
 11197 ;; Tracked objects:
 11198 ;;		On entry : 0/0
 11199 ;;		On exit  : 0/0
 11200 ;;		Unchanged: 0/0
 11201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11203 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11205 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11206 ;;Total ram usage:        1 bytes
 11207 ;; Hardware stack levels used:    1
 11208 ;; Hardware stack levels required when called:    5
 11209 ;; This function calls:
 11210 ;;		_I2C_IdleCheck
 11211 ;; This function is called by:
 11212 ;;		_I2C_LCD_Command
 11213 ;;		_I2C_LCD_Putc
 11214 ;;		_I2C_LCD_Puts
 11215 ;;		_I2C_LCD_CreateChar
 11216 ;; This function uses a non-reentrant model
 11217 ;;
 11218                           
 11219                           	psect	text52
 11220  013300                     __ptext52:
 11221                           	opt stack 0
 11222  013300                     _I2C_Send:
 11223                           	opt stack 22
 11224                           
 11225                           ;incstack = 0
 11226                           ;I2C_Send@data stored from wreg
 11227  013300  0100               	movlb	0	; () banked
 11228  013302  6FD4               	movwf	I2C_Send@data& (0+255),b
 11229                           
 11230                           ;My_header\My_I2C.h: 66: I2C_IdleCheck(0x5);
 11231  013304  0E05               	movlw	5
 11232  013306  EC73  F099         	call	_I2C_IdleCheck
 11233                           
 11234                           ;My_header\My_I2C.h: 67: SSP1IF = 0;
 11235  01330A  969E               	bcf	3998,3,c	;volatile
 11236                           
 11237                           ;My_header\My_I2C.h: 68: SSP1BUF = data;
 11238  01330C  C0D4  FFC9         	movff	I2C_Send@data,4041	;volatile
 11239  013310                     l324:
 11240  013310  A69E               	btfss	3998,3,c	;volatile
 11241  013312  D7FE               	goto	l324
 11242                           
 11243                           ;My_header\My_I2C.h: 70: return SSP1CON2bits.ACKSTAT;
 11244                           ;	Return value of _I2C_Send is never used
 11245  013314  50C5               	movf	4037,w,c	;volatile
 11246  013316  0012               	return	
 11247  013318                     __end_of_I2C_Send:
 11248                           	opt stack 0
 11249                           tblptru	equ	0xFF8
 11250                           tblptrh	equ	0xFF7
 11251                           tblptrl	equ	0xFF6
 11252                           tablat	equ	0xFF5
 11253                           prodh	equ	0xFF4
 11254                           prodl	equ	0xFF3
 11255                           intcon	equ	0xFF2
 11256                           intcon2	equ	0xFF1
 11257                           indf0	equ	0xFEF
 11258                           postinc0	equ	0xFEE
 11259                           fsr0h	equ	0xFEA
 11260                           fsr0l	equ	0xFE9
 11261                           wreg	equ	0xFE8
 11262                           postdec1	equ	0xFE5
 11263                           fsr1l	equ	0xFE1
 11264                           indf2	equ	0xFDF
 11265                           postinc2	equ	0xFDE
 11266                           postdec2	equ	0xFDD
 11267                           plusw2	equ	0xFDB
 11268                           fsr2h	equ	0xFDA
 11269                           fsr2l	equ	0xFD9
 11270                           status	equ	0xFD8
 11271                           
 11272 ;; *************** function _I2C_IdleCheck *****************
 11273 ;; Defined at:
 11274 ;;		line 21 in file "../My_header\My_I2C.h"
 11275 ;; Parameters:    Size  Location     Type
 11276 ;;  mask            1    wreg     unsigned char 
 11277 ;; Auto vars:     Size  Location     Type
 11278 ;;  mask            1    0[BANK0 ] unsigned char 
 11279 ;; Return value:  Size  Location     Type
 11280 ;;		None               void
 11281 ;; Registers used:
 11282 ;;		wreg, status,2, status,0
 11283 ;; Tracked objects:
 11284 ;;		On entry : 0/0
 11285 ;;		On exit  : 0/0
 11286 ;;		Unchanged: 0/0
 11287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11289 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11290 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11291 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11292 ;;Total ram usage:        2 bytes
 11293 ;; Hardware stack levels used:    1
 11294 ;; Hardware stack levels required when called:    4
 11295 ;; This function calls:
 11296 ;;		Nothing
 11297 ;; This function is called by:
 11298 ;;		_I2C_Start
 11299 ;;		_I2C_Stop
 11300 ;;		_I2C_Send
 11301 ;;		_I2C_rStart
 11302 ;;		_I2C_Receive
 11303 ;; This function uses a non-reentrant model
 11304 ;;
 11305                           
 11306                           	psect	text53
 11307  0132E6                     __ptext53:
 11308                           	opt stack 0
 11309  0132E6                     _I2C_IdleCheck:
 11310                           	opt stack 22
 11311                           
 11312                           ;incstack = 0
 11313                           ;I2C_IdleCheck@mask stored from wreg
 11314  0132E6  0100               	movlb	0	; () banked
 11315  0132E8  6FD3               	movwf	I2C_IdleCheck@mask& (0+255),b
 11316  0132EA                     l7772:
 11317  0132EA  50C7               	movf	4039,w,c	;volatile
 11318  0132EC  0100               	movlb	0	; () banked
 11319  0132EE  15D3               	andwf	I2C_IdleCheck@mask& (0+255),w,b
 11320  0132F0  6E20               	movwf	??_I2C_IdleCheck& (0+255),c
 11321  0132F2  50C5               	movf	4037,w,c	;volatile
 11322  0132F4  0B1F               	andlw	31
 11323  0132F6  1020               	iorwf	??_I2C_IdleCheck,w,c
 11324  0132F8  0900               	iorlw	0
 11325  0132FA  B4D8               	btfsc	status,2,c
 11326  0132FC  0012               	return	
 11327  0132FE  D7F5               	goto	l7772
 11328  013300                     __end_of_I2C_IdleCheck:
 11329                           	opt stack 0
 11330                           tblptru	equ	0xFF8
 11331                           tblptrh	equ	0xFF7
 11332                           tblptrl	equ	0xFF6
 11333                           tablat	equ	0xFF5
 11334                           prodh	equ	0xFF4
 11335                           prodl	equ	0xFF3
 11336                           intcon	equ	0xFF2
 11337                           intcon2	equ	0xFF1
 11338                           indf0	equ	0xFEF
 11339                           postinc0	equ	0xFEE
 11340                           fsr0h	equ	0xFEA
 11341                           fsr0l	equ	0xFE9
 11342                           wreg	equ	0xFE8
 11343                           postdec1	equ	0xFE5
 11344                           fsr1l	equ	0xFE1
 11345                           indf2	equ	0xFDF
 11346                           postinc2	equ	0xFDE
 11347                           postdec2	equ	0xFDD
 11348                           plusw2	equ	0xFDB
 11349                           fsr2h	equ	0xFDA
 11350                           fsr2l	equ	0xFD9
 11351                           status	equ	0xFD8
 11352                           
 11353 ;; *************** function _Delay_ms *****************
 11354 ;; Defined at:
 11355 ;;		line 333 in file "../My_header\My_header.h"
 11356 ;; Parameters:    Size  Location     Type
 11357 ;;  ms              2    0[BANK0 ] unsigned int 
 11358 ;; Auto vars:     Size  Location     Type
 11359 ;;		None
 11360 ;; Return value:  Size  Location     Type
 11361 ;;		None               void
 11362 ;; Registers used:
 11363 ;;		wreg, status,2, status,0
 11364 ;; Tracked objects:
 11365 ;;		On entry : 0/0
 11366 ;;		On exit  : 0/0
 11367 ;;		Unchanged: 0/0
 11368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11369 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11371 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11372 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11373 ;;Total ram usage:        3 bytes
 11374 ;; Hardware stack levels used:    1
 11375 ;; Hardware stack levels required when called:    4
 11376 ;; This function calls:
 11377 ;;		Nothing
 11378 ;; This function is called by:
 11379 ;;		_I2C_LCD_init
 11380 ;; This function uses a non-reentrant model
 11381 ;;
 11382                           
 11383                           	psect	text54
 11384  013146                     __ptext54:
 11385                           	opt stack 0
 11386  013146                     _Delay_ms:
 11387                           	opt stack 24
 11388                           
 11389                           ;My_header\My_header.h: 334: while (ms--)_delay((unsigned long)((1)*(48000000/4000.0)));
 11390                           
 11391                           ; BSR set to: 0
 11392                           ;incstack = 0
 11393  013146  D008               	goto	l8214
 11394  013148                     l8212:
 11395  013148  0E10               	movlw	16
 11396  01314A  6E20               	movwf	??_Delay_ms& (0+255),c
 11397  01314C  0E94               	movlw	148
 11398  01314E                     u10097:
 11399  01314E  2EE8               	decfsz	wreg,f,c
 11400  013150  D7FE               	goto	u10097
 11401  013152  2E20               	decfsz	??_Delay_ms& (0+255),f,c
 11402  013154  D7FC               	goto	u10097
 11403  013156  D000               	nop2	
 11404  013158                     l8214:
 11405  013158  0100               	movlb	0	; () banked
 11406  01315A  07D3               	decf	Delay_ms@ms& (0+255),f,b
 11407  01315C  A0D8               	btfss	status,0,c
 11408  01315E  07D4               	decf	(Delay_ms@ms+1)& (0+255),f,b
 11409  013160  0100               	movlb	0	; () banked
 11410  013162  29D3               	incf	Delay_ms@ms& (0+255),w,b
 11411  013164  E1F1               	bnz	l8212
 11412  013166  0100               	movlb	0	; () banked
 11413  013168  29D4               	incf	(Delay_ms@ms+1)& (0+255),w,b
 11414  01316A  B4D8               	btfsc	status,2,c
 11415  01316C  0012               	return	
 11416  01316E  D7EC               	goto	l8212
 11417  013170                     __end_of_Delay_ms:
 11418                           	opt stack 0
 11419                           tblptru	equ	0xFF8
 11420                           tblptrh	equ	0xFF7
 11421                           tblptrl	equ	0xFF6
 11422                           tablat	equ	0xFF5
 11423                           prodh	equ	0xFF4
 11424                           prodl	equ	0xFF3
 11425                           intcon	equ	0xFF2
 11426                           intcon2	equ	0xFF1
 11427                           indf0	equ	0xFEF
 11428                           postinc0	equ	0xFEE
 11429                           fsr0h	equ	0xFEA
 11430                           fsr0l	equ	0xFE9
 11431                           wreg	equ	0xFE8
 11432                           postdec1	equ	0xFE5
 11433                           fsr1l	equ	0xFE1
 11434                           indf2	equ	0xFDF
 11435                           postinc2	equ	0xFDE
 11436                           postdec2	equ	0xFDD
 11437                           plusw2	equ	0xFDB
 11438                           fsr2h	equ	0xFDA
 11439                           fsr2l	equ	0xFD9
 11440                           status	equ	0xFD8
 11441                           
 11442 ;; *************** function _CTMU_init *****************
 11443 ;; Defined at:
 11444 ;;		line 289 in file "../My_header\My_header.h"
 11445 ;; Parameters:    Size  Location     Type
 11446 ;;		None
 11447 ;; Auto vars:     Size  Location     Type
 11448 ;;		None
 11449 ;; Return value:  Size  Location     Type
 11450 ;;		None               void
 11451 ;; Registers used:
 11452 ;;		wreg, status,2
 11453 ;; Tracked objects:
 11454 ;;		On entry : 0/0
 11455 ;;		On exit  : 0/0
 11456 ;;		Unchanged: 0/0
 11457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11462 ;;Total ram usage:        0 bytes
 11463 ;; Hardware stack levels used:    1
 11464 ;; Hardware stack levels required when called:    4
 11465 ;; This function calls:
 11466 ;;		Nothing
 11467 ;; This function is called by:
 11468 ;;		_main_init
 11469 ;; This function uses a non-reentrant model
 11470 ;;
 11471                           
 11472                           	psect	text55
 11473  0131C0                     __ptext55:
 11474                           	opt stack 0
 11475  0131C0                     _CTMU_init:
 11476                           	opt stack 25
 11477                           
 11478                           ;My_header\My_header.h: 290: CTMUCONH = 0x00;
 11479                           
 11480                           ; BSR set to: 0
 11481                           ;incstack = 0
 11482  0131C0  0E00               	movlw	0
 11483  0131C2  6EB3               	movwf	4019,c	;volatile
 11484                           
 11485                           ;My_header\My_header.h: 291: CTMUCONL = 0x90;
 11486  0131C4  0E90               	movlw	144
 11487  0131C6  6EB2               	movwf	4018,c	;volatile
 11488                           
 11489                           ;My_header\My_header.h: 292: CTMUICON = 0x01;
 11490  0131C8  0E01               	movlw	1
 11491  0131CA  6EB1               	movwf	4017,c	;volatile
 11492                           
 11493                           ;My_header\My_header.h: 294: ADCON1bits.ADFM = 1;
 11494  0131CC  8EC1               	bsf	4033,7,c	;volatile
 11495                           
 11496                           ;My_header\My_header.h: 295: ADCON1bits.ADCAL = 0;
 11497  0131CE  9CC1               	bcf	4033,6,c	;volatile
 11498                           
 11499                           ;My_header\My_header.h: 296: ADCON1bits.ACQT = 1;
 11500  0131D0  50C1               	movf	4033,w,c	;volatile
 11501  0131D2  0BC7               	andlw	-57
 11502  0131D4  0908               	iorlw	8
 11503  0131D6  6EC1               	movwf	4033,c	;volatile
 11504                           
 11505                           ;My_header\My_header.h: 297: ADCON1bits.ADCS = 6;
 11506  0131D8  50C1               	movf	4033,w,c	;volatile
 11507  0131DA  0BF8               	andlw	-8
 11508  0131DC  0906               	iorlw	6
 11509  0131DE  6EC1               	movwf	4033,c	;volatile
 11510                           
 11511                           ;My_header\My_header.h: 299: ADCON0bits.VCFG0 = 0;
 11512  0131E0  9CC2               	bcf	4034,6,c	;volatile
 11513                           
 11514                           ;My_header\My_header.h: 300: ADCON0bits.VCFG1 = 0;
 11515  0131E2  9EC2               	bcf	4034,7,c	;volatile
 11516                           
 11517                           ;My_header\My_header.h: 301: ADCON0bits.ADON = 1;
 11518  0131E4  80C2               	bsf	4034,0,c	;volatile
 11519  0131E6  0012               	return		;funcret
 11520  0131E8                     __end_of_CTMU_init:
 11521                           	opt stack 0
 11522                           tblptru	equ	0xFF8
 11523                           tblptrh	equ	0xFF7
 11524                           tblptrl	equ	0xFF6
 11525                           tablat	equ	0xFF5
 11526                           prodh	equ	0xFF4
 11527                           prodl	equ	0xFF3
 11528                           intcon	equ	0xFF2
 11529                           intcon2	equ	0xFF1
 11530                           indf0	equ	0xFEF
 11531                           postinc0	equ	0xFEE
 11532                           fsr0h	equ	0xFEA
 11533                           fsr0l	equ	0xFE9
 11534                           wreg	equ	0xFE8
 11535                           postdec1	equ	0xFE5
 11536                           fsr1l	equ	0xFE1
 11537                           indf2	equ	0xFDF
 11538                           postinc2	equ	0xFDE
 11539                           postdec2	equ	0xFDD
 11540                           plusw2	equ	0xFDB
 11541                           fsr2h	equ	0xFDA
 11542                           fsr2l	equ	0xFD9
 11543                           status	equ	0xFD8
 11544                           
 11545 ;; *************** function _ADC_init *****************
 11546 ;; Defined at:
 11547 ;;		line 149 in file "../My_header\My_header.h"
 11548 ;; Parameters:    Size  Location     Type
 11549 ;;  p_ref           1    wreg     unsigned char 
 11550 ;; Auto vars:     Size  Location     Type
 11551 ;;  p_ref           1   31[COMRAM] unsigned char 
 11552 ;; Return value:  Size  Location     Type
 11553 ;;		None               void
 11554 ;; Registers used:
 11555 ;;		wreg, status,2
 11556 ;; Tracked objects:
 11557 ;;		On entry : 0/0
 11558 ;;		On exit  : 0/0
 11559 ;;		Unchanged: 0/0
 11560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11562 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11564 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11565 ;;Total ram usage:        1 bytes
 11566 ;; Hardware stack levels used:    1
 11567 ;; Hardware stack levels required when called:    4
 11568 ;; This function calls:
 11569 ;;		Nothing
 11570 ;; This function is called by:
 11571 ;;		_main_init
 11572 ;; This function uses a non-reentrant model
 11573 ;;
 11574                           
 11575                           	psect	text56
 11576  013294                     __ptext56:
 11577                           	opt stack 0
 11578  013294                     _ADC_init:
 11579                           	opt stack 25
 11580                           
 11581                           ;incstack = 0
 11582                           ;ADC_init@p_ref stored from wreg
 11583  013294  6E20               	movwf	ADC_init@p_ref,c
 11584                           
 11585                           ;My_header\My_header.h: 150: ADCON0bits.VCFG1 = 0;
 11586  013296  9EC2               	bcf	4034,7,c	;volatile
 11587                           
 11588                           ;My_header\My_header.h: 151: ADCON0bits.VCFG0 = p_ref;
 11589  013298  B020               	btfsc	ADC_init@p_ref,0,c
 11590  01329A  D002               	bra	u9345
 11591  01329C  9CC2               	bcf	4034,6,c	;volatile
 11592  01329E  D001               	bra	u9346
 11593  0132A0                     u9345:
 11594  0132A0  8CC2               	bsf	4034,6,c	;volatile
 11595  0132A2                     u9346:
 11596                           
 11597                           ;My_header\My_header.h: 153: ADCON1bits.ADFM = 1;
 11598  0132A2  8EC1               	bsf	4033,7,c	;volatile
 11599                           
 11600                           ;My_header\My_header.h: 154: ADCON1bits.ADCAL = 0;
 11601  0132A4  9CC1               	bcf	4033,6,c	;volatile
 11602                           
 11603                           ;My_header\My_header.h: 155: ADCON1bits.ADCS = 6;
 11604  0132A6  50C1               	movf	4033,w,c	;volatile
 11605  0132A8  0BF8               	andlw	-8
 11606  0132AA  0906               	iorlw	6
 11607  0132AC  6EC1               	movwf	4033,c	;volatile
 11608  0132AE  0012               	return		;funcret
 11609  0132B0                     __end_of_ADC_init:
 11610                           	opt stack 0
 11611                           tblptru	equ	0xFF8
 11612                           tblptrh	equ	0xFF7
 11613                           tblptrl	equ	0xFF6
 11614                           tablat	equ	0xFF5
 11615                           prodh	equ	0xFF4
 11616                           prodl	equ	0xFF3
 11617                           intcon	equ	0xFF2
 11618                           intcon2	equ	0xFF1
 11619                           indf0	equ	0xFEF
 11620                           postinc0	equ	0xFEE
 11621                           fsr0h	equ	0xFEA
 11622                           fsr0l	equ	0xFE9
 11623                           wreg	equ	0xFE8
 11624                           postdec1	equ	0xFE5
 11625                           fsr1l	equ	0xFE1
 11626                           indf2	equ	0xFDF
 11627                           postinc2	equ	0xFDE
 11628                           postdec2	equ	0xFDD
 11629                           plusw2	equ	0xFDB
 11630                           fsr2h	equ	0xFDA
 11631                           fsr2l	equ	0xFD9
 11632                           status	equ	0xFD8
 11633                           
 11634 ;; *************** function _RTCC_loop *****************
 11635 ;; Defined at:
 11636 ;;		line 387 in file "../My_header\My_RTCC.h"
 11637 ;; Parameters:    Size  Location     Type
 11638 ;;		None
 11639 ;; Auto vars:     Size  Location     Type
 11640 ;;		None
 11641 ;; Return value:  Size  Location     Type
 11642 ;;		None               void
 11643 ;; Registers used:
 11644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11645 ;; Tracked objects:
 11646 ;;		On entry : 0/0
 11647 ;;		On exit  : 0/0
 11648 ;;		Unchanged: 0/0
 11649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11654 ;;Total ram usage:        0 bytes
 11655 ;; Hardware stack levels used:    1
 11656 ;; Hardware stack levels required when called:    8
 11657 ;; This function calls:
 11658 ;;		_RTCC_from_RTCC
 11659 ;; This function is called by:
 11660 ;;		_main
 11661 ;; This function uses a non-reentrant model
 11662 ;;
 11663                           
 11664                           	psect	text57
 11665  012E5E                     __ptext57:
 11666                           	opt stack 0
 11667  012E5E                     _RTCC_loop:
 11668                           	opt stack 22
 11669  012E5E                     l553:
 11670  012E5E  010F               	movlb	15	; () banked
 11671  012E60  B93F               	btfsc	63,4,b	;volatile
 11672  012E62  D7FD               	goto	l553
 11673                           
 11674                           ; BSR set to: 15
 11675                           ;My_header\My_RTCC.h: 390: halfsec = RTCCFGbits.HALFSEC;
 11676                           
 11677                           ; BSR set to: 15
 11678  012E64  0E00               	movlw	0
 11679  012E66  B73F               	btfsc	63,3,b	;volatile
 11680  012E68  0E01               	movlw	1
 11681  012E6A  0100               	movlb	0	; () banked
 11682  012E6C  6FB6               	movwf	_halfsec& (0+255),b
 11683                           
 11684                           ; BSR set to: 0
 11685                           ;My_header\My_RTCC.h: 391: if (prev_halfsec != halfsec) {
 11686  012E6E  0100               	movlb	0	; () banked
 11687  012E70  51B6               	movf	_halfsec& (0+255),w,b
 11688  012E72  0100               	movlb	0	; () banked
 11689  012E74  19A7               	xorwf	RTCC_loop@prev_halfsec& (0+255),w,b
 11690  012E76  B4D8               	btfsc	status,2,c
 11691  012E78  0012               	return	
 11692                           
 11693                           ; BSR set to: 0
 11694                           ;My_header\My_RTCC.h: 392: prev_halfsec = halfsec;
 11695  012E7A  C0B6  F0A7         	movff	_halfsec,RTCC_loop@prev_halfsec
 11696                           
 11697                           ;My_header\My_RTCC.h: 393: colon = halfsec;
 11698  012E7E  C0B6  F0B0         	movff	_halfsec,_colon
 11699                           
 11700                           ; BSR set to: 0
 11701                           ;My_header\My_RTCC.h: 394: time_change_flag = 1;
 11702  012E82  0E01               	movlw	1
 11703  012E84  0100               	movlb	0	; () banked
 11704  012E86  6FB8               	movwf	_time_change_flag& (0+255),b
 11705                           
 11706                           ; BSR set to: 0
 11707                           ;My_header\My_RTCC.h: 395: RTCC_from_RTCC(&caltime_now, &epoch_now);
 11708  012E88  0EF0               	movlw	low _caltime_now
 11709  012E8A  0101               	movlb	1	; () banked
 11710  012E8C  6F00               	movwf	RTCC_from_RTCC@ct& (0+255),b
 11711  012E8E  0E01               	movlw	high _caltime_now
 11712  012E90  0101               	movlb	1	; () banked
 11713  012E92  6F01               	movwf	(RTCC_from_RTCC@ct+1)& (0+255),b
 11714  012E94  0ECA               	movlw	low _epoch_now
 11715  012E96  0101               	movlb	1	; () banked
 11716  012E98  6F02               	movwf	RTCC_from_RTCC@ep& (0+255),b
 11717  012E9A  0E00               	movlw	high _epoch_now
 11718  012E9C  0101               	movlb	1	; () banked
 11719  012E9E  6F03               	movwf	(RTCC_from_RTCC@ep+1)& (0+255),b
 11720  012EA0  EC29  F099         	call	_RTCC_from_RTCC	;wreg free
 11721  012EA4  0012               	return	
 11722  012EA6                     __end_of_RTCC_loop:
 11723                           	opt stack 0
 11724                           tblptru	equ	0xFF8
 11725                           tblptrh	equ	0xFF7
 11726                           tblptrl	equ	0xFF6
 11727                           tablat	equ	0xFF5
 11728                           prodh	equ	0xFF4
 11729                           prodl	equ	0xFF3
 11730                           intcon	equ	0xFF2
 11731                           intcon2	equ	0xFF1
 11732                           indf0	equ	0xFEF
 11733                           postinc0	equ	0xFEE
 11734                           fsr0h	equ	0xFEA
 11735                           fsr0l	equ	0xFE9
 11736                           wreg	equ	0xFE8
 11737                           postdec1	equ	0xFE5
 11738                           fsr1l	equ	0xFE1
 11739                           indf2	equ	0xFDF
 11740                           postinc2	equ	0xFDE
 11741                           postdec2	equ	0xFDD
 11742                           plusw2	equ	0xFDB
 11743                           fsr2h	equ	0xFDA
 11744                           fsr2l	equ	0xFD9
 11745                           status	equ	0xFD8
 11746                           
 11747 ;; *************** function _RTCC_from_RTCC *****************
 11748 ;; Defined at:
 11749 ;;		line 231 in file "../My_header\My_RTCC.h"
 11750 ;; Parameters:    Size  Location     Type
 11751 ;;  ct              2    0[BANK1 ] PTR struct .
 11752 ;;		 -> caltime_now(7), 
 11753 ;;  ep              2    2[BANK1 ] PTR unsigned long 
 11754 ;;		 -> epoch_now(4), 
 11755 ;; Auto vars:     Size  Location     Type
 11756 ;;		None
 11757 ;; Return value:  Size  Location     Type
 11758 ;;		None               void
 11759 ;; Registers used:
 11760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11761 ;; Tracked objects:
 11762 ;;		On entry : 0/0
 11763 ;;		On exit  : 0/0
 11764 ;;		Unchanged: 0/0
 11765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11766 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11769 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11770 ;;Total ram usage:        4 bytes
 11771 ;; Hardware stack levels used:    1
 11772 ;; Hardware stack levels required when called:    7
 11773 ;; This function calls:
 11774 ;;		_RTCC_to_caltime
 11775 ;;		_caltime_to_epoch
 11776 ;; This function is called by:
 11777 ;;		_display_time_1602
 11778 ;;		_RTCC_adjust_time_inc
 11779 ;;		_RTCC_adjust_time_dec
 11780 ;;		_RTCC_loop
 11781 ;;		_sleep_loop
 11782 ;;		_main
 11783 ;;		_display_time_0802
 11784 ;; This function uses a non-reentrant model
 11785 ;;
 11786                           
 11787                           	psect	text58
 11788  013252                     __ptext58:
 11789                           	opt stack 0
 11790  013252                     _RTCC_from_RTCC:
 11791                           	opt stack 22
 11792                           
 11793                           ;My_header\My_RTCC.h: 232: RTCC_to_caltime(ct);
 11794                           
 11795                           ;incstack = 0
 11796  013252  C100  F0D4         	movff	RTCC_from_RTCC@ct,RTCC_to_caltime@ct
 11797  013256  C101  F0D5         	movff	RTCC_from_RTCC@ct+1,RTCC_to_caltime@ct+1
 11798  01325A  EC51  F091         	call	_RTCC_to_caltime	;wreg free
 11799                           
 11800                           ;My_header\My_RTCC.h: 233: caltime_to_epoch(ct, ep);
 11801  01325E  C100  F0EC         	movff	RTCC_from_RTCC@ct,caltime_to_epoch@ct
 11802  013262  C101  F0ED         	movff	RTCC_from_RTCC@ct+1,caltime_to_epoch@ct+1
 11803  013266  C102  F0EE         	movff	RTCC_from_RTCC@ep,caltime_to_epoch@ep
 11804  01326A  C103  F0EF         	movff	RTCC_from_RTCC@ep+1,caltime_to_epoch@ep+1
 11805  01326E  EC3E  F085         	call	_caltime_to_epoch	;wreg free
 11806  013272  0012               	return		;funcret
 11807  013274                     __end_of_RTCC_from_RTCC:
 11808                           	opt stack 0
 11809                           tblptru	equ	0xFF8
 11810                           tblptrh	equ	0xFF7
 11811                           tblptrl	equ	0xFF6
 11812                           tablat	equ	0xFF5
 11813                           prodh	equ	0xFF4
 11814                           prodl	equ	0xFF3
 11815                           intcon	equ	0xFF2
 11816                           intcon2	equ	0xFF1
 11817                           indf0	equ	0xFEF
 11818                           postinc0	equ	0xFEE
 11819                           fsr0h	equ	0xFEA
 11820                           fsr0l	equ	0xFE9
 11821                           wreg	equ	0xFE8
 11822                           postdec1	equ	0xFE5
 11823                           fsr1l	equ	0xFE1
 11824                           indf2	equ	0xFDF
 11825                           postinc2	equ	0xFDE
 11826                           postdec2	equ	0xFDD
 11827                           plusw2	equ	0xFDB
 11828                           fsr2h	equ	0xFDA
 11829                           fsr2l	equ	0xFD9
 11830                           status	equ	0xFD8
 11831                           
 11832 ;; *************** function _caltime_to_epoch *****************
 11833 ;; Defined at:
 11834 ;;		line 211 in file "../My_header\My_RTCC.h"
 11835 ;; Parameters:    Size  Location     Type
 11836 ;;  ct              2   25[BANK0 ] PTR struct .
 11837 ;;		 -> caltime_now(7), 
 11838 ;;  ep              2   27[BANK0 ] PTR unsigned long 
 11839 ;;		 -> epoch_now(4), 
 11840 ;; Auto vars:     Size  Location     Type
 11841 ;;  month           1   39[BANK0 ] unsigned char 
 11842 ;;  month           1   34[BANK0 ] unsigned char 
 11843 ;;  year            1   33[BANK0 ] unsigned char 
 11844 ;;  epoch           4   35[BANK0 ] unsigned long 
 11845 ;; Return value:  Size  Location     Type
 11846 ;;		None               void
 11847 ;; Registers used:
 11848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11849 ;; Tracked objects:
 11850 ;;		On entry : 0/0
 11851 ;;		On exit  : 0/0
 11852 ;;		Unchanged: 0/0
 11853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11854 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11855 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11856 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11857 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11858 ;;Total ram usage:       15 bytes
 11859 ;; Hardware stack levels used:    1
 11860 ;; Hardware stack levels required when called:    6
 11861 ;; This function calls:
 11862 ;;		___lmul
 11863 ;;		_month_length
 11864 ;; This function is called by:
 11865 ;;		_RTCC_from_RTCC
 11866 ;;		_RTCC_from_caltime
 11867 ;; This function uses a non-reentrant model
 11868 ;;
 11869                           
 11870                           	psect	text59
 11871  010A7C                     __ptext59:
 11872                           	opt stack 0
 11873  010A7C                     _caltime_to_epoch:
 11874                           	opt stack 22
 11875                           
 11876                           ;My_header\My_RTCC.h: 212: epoch_t epoch = 0;
 11877                           
 11878                           ;incstack = 0
 11879  010A7C  0E00               	movlw	0
 11880  010A7E  0100               	movlb	0	; () banked
 11881  010A80  6FF6               	movwf	caltime_to_epoch@epoch& (0+255),b
 11882  010A82  0E00               	movlw	0
 11883  010A84  6FF7               	movwf	(caltime_to_epoch@epoch+1)& (0+255),b
 11884  010A86  0E00               	movlw	0
 11885  010A88  6FF8               	movwf	(caltime_to_epoch@epoch+2)& (0+255),b
 11886  010A8A  0E00               	movlw	0
 11887  010A8C  6FF9               	movwf	(caltime_to_epoch@epoch+3)& (0+255),b
 11888                           
 11889                           ;My_header\My_RTCC.h: 213: for (uint8_t year = 0; year < ct->YY; year++) {
 11890  010A8E  0E00               	movlw	0
 11891  010A90  0100               	movlb	0	; () banked
 11892  010A92  6FF4               	movwf	caltime_to_epoch@year& (0+255),b
 11893  010A94  D037               	goto	l8102
 11894  010A96                     l8088:
 11895                           
 11896                           ; BSR set to: 0
 11897                           ;My_header\My_RTCC.h: 214: for (uint8_t month = 1; month <= 12; month++) {
 11898  010A96  0E01               	movlw	1
 11899  010A98  0100               	movlb	0	; () banked
 11900  010A9A  6FFA               	movwf	caltime_to_epoch@month& (0+255),b
 11901  010A9C                     l8090:
 11902                           
 11903                           ; BSR set to: 0
 11904  010A9C  0E0C               	movlw	12
 11905  010A9E  0100               	movlb	0	; () banked
 11906  010AA0  65FA               	cpfsgt	caltime_to_epoch@month& (0+255),b
 11907  010AA2  D001               	goto	l8094
 11908  010AA4  D02D               	goto	l8100
 11909  010AA6                     l8094:
 11910                           
 11911                           ; BSR set to: 0
 11912                           ;My_header\My_RTCC.h: 215: epoch += ((epoch_t)60*60*24) * month_length(year, month);
 11913  010AA6  C0FA  F020         	movff	caltime_to_epoch@month,month_length@month
 11914  010AAA  0100               	movlb	0	; () banked
 11915  010AAC  51F4               	movf	caltime_to_epoch@year& (0+255),w,b
 11916  010AAE  EC67  F08D         	call	_month_length
 11917  010AB2  0100               	movlb	0	; () banked
 11918  010AB4  6FF0               	movwf	??_caltime_to_epoch& (0+255),b
 11919  010AB6  0100               	movlb	0	; () banked
 11920  010AB8  51F0               	movf	??_caltime_to_epoch& (0+255),w,b
 11921  010ABA  0100               	movlb	0	; () banked
 11922  010ABC  6FE0               	movwf	___lmul@multiplier& (0+255),b
 11923  010ABE  6BE1               	clrf	(___lmul@multiplier+1)& (0+255),b
 11924  010AC0  6BE2               	clrf	(___lmul@multiplier+2)& (0+255),b
 11925  010AC2  6BE3               	clrf	(___lmul@multiplier+3)& (0+255),b
 11926  010AC4  0E80               	movlw	128
 11927  010AC6  0100               	movlb	0	; () banked
 11928  010AC8  6FE4               	movwf	___lmul@multiplicand& (0+255),b
 11929  010ACA  0E51               	movlw	81
 11930  010ACC  6FE5               	movwf	(___lmul@multiplicand+1)& (0+255),b
 11931  010ACE  0E01               	movlw	1
 11932  010AD0  6FE6               	movwf	(___lmul@multiplicand+2)& (0+255),b
 11933  010AD2  0E00               	movlw	0
 11934  010AD4  6FE7               	movwf	(___lmul@multiplicand+3)& (0+255),b
 11935  010AD6  ECE0  F094         	call	___lmul	;wreg free
 11936  010ADA  0100               	movlb	0	; () banked
 11937  010ADC  51E0               	movf	?___lmul& (0+255),w,b
 11938  010ADE  0100               	movlb	0	; () banked
 11939  010AE0  27F6               	addwf	caltime_to_epoch@epoch& (0+255),f,b
 11940  010AE2  0100               	movlb	0	; () banked
 11941  010AE4  51E1               	movf	(?___lmul+1)& (0+255),w,b
 11942  010AE6  0100               	movlb	0	; () banked
 11943  010AE8  23F7               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
 11944  010AEA  0100               	movlb	0	; () banked
 11945  010AEC  51E2               	movf	(?___lmul+2)& (0+255),w,b
 11946  010AEE  0100               	movlb	0	; () banked
 11947  010AF0  23F8               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
 11948  010AF2  0100               	movlb	0	; () banked
 11949  010AF4  51E3               	movf	(?___lmul+3)& (0+255),w,b
 11950  010AF6  0100               	movlb	0	; () banked
 11951  010AF8  23F9               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
 11952                           
 11953                           ; BSR set to: 0
 11954  010AFA  0100               	movlb	0	; () banked
 11955  010AFC  2BFA               	incf	caltime_to_epoch@month& (0+255),f,b
 11956  010AFE  D7CE               	goto	l8090
 11957  010B00                     l8100:
 11958                           
 11959                           ; BSR set to: 0
 11960  010B00  0100               	movlb	0	; () banked
 11961  010B02  2BF4               	incf	caltime_to_epoch@year& (0+255),f,b
 11962  010B04                     l8102:
 11963                           
 11964                           ; BSR set to: 0
 11965  010B04  0100               	movlb	0	; () banked
 11966  010B06  EE20 F006          	lfsr	2,6
 11967  010B0A  51EC               	movf	caltime_to_epoch@ct& (0+255),w,b
 11968  010B0C  26D9               	addwf	fsr2l,f,c
 11969  010B0E  51ED               	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
 11970  010B10  22DA               	addwfc	fsr2h,f,c
 11971  010B12  50DE               	movf	postinc2,w,c
 11972  010B14  0100               	movlb	0	; () banked
 11973  010B16  5DF4               	subwf	caltime_to_epoch@year& (0+255),w,b
 11974  010B18  A0D8               	btfss	status,0,c
 11975  010B1A  D7BD               	goto	l8088
 11976                           
 11977                           ; BSR set to: 0
 11978                           ;My_header\My_RTCC.h: 216: }
 11979                           ;My_header\My_RTCC.h: 217: }
 11980                           ;My_header\My_RTCC.h: 218: for (uint8_t month = 1; month < ct->MM; month++) {
 11981                           
 11982                           ; BSR set to: 0
 11983  010B1C  0E01               	movlw	1
 11984  010B1E  0100               	movlb	0	; () banked
 11985  010B20  6FF5               	movwf	caltime_to_epoch@month_1995& (0+255),b
 11986  010B22  D032               	goto	l8110
 11987  010B24                     l8106:
 11988                           
 11989                           ; BSR set to: 0
 11990                           ;My_header\My_RTCC.h: 219: epoch += ((epoch_t)60*60*24) * month_length(ct->YY, month);
 11991  010B24  C0F5  F020         	movff	caltime_to_epoch@month_1995,month_length@month
 11992  010B28  0100               	movlb	0	; () banked
 11993  010B2A  EE20 F006          	lfsr	2,6
 11994  010B2E  51EC               	movf	caltime_to_epoch@ct& (0+255),w,b
 11995  010B30  26D9               	addwf	fsr2l,f,c
 11996  010B32  51ED               	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
 11997  010B34  22DA               	addwfc	fsr2h,f,c
 11998  010B36  50DF               	movf	indf2,w,c
 11999  010B38  EC67  F08D         	call	_month_length
 12000  010B3C  0100               	movlb	0	; () banked
 12001  010B3E  6FF0               	movwf	??_caltime_to_epoch& (0+255),b
 12002  010B40  0100               	movlb	0	; () banked
 12003  010B42  51F0               	movf	??_caltime_to_epoch& (0+255),w,b
 12004  010B44  0100               	movlb	0	; () banked
 12005  010B46  6FE0               	movwf	___lmul@multiplier& (0+255),b
 12006  010B48  6BE1               	clrf	(___lmul@multiplier+1)& (0+255),b
 12007  010B4A  6BE2               	clrf	(___lmul@multiplier+2)& (0+255),b
 12008  010B4C  6BE3               	clrf	(___lmul@multiplier+3)& (0+255),b
 12009  010B4E  0E80               	movlw	128
 12010  010B50  0100               	movlb	0	; () banked
 12011  010B52  6FE4               	movwf	___lmul@multiplicand& (0+255),b
 12012  010B54  0E51               	movlw	81
 12013  010B56  6FE5               	movwf	(___lmul@multiplicand+1)& (0+255),b
 12014  010B58  0E01               	movlw	1
 12015  010B5A  6FE6               	movwf	(___lmul@multiplicand+2)& (0+255),b
 12016  010B5C  0E00               	movlw	0
 12017  010B5E  6FE7               	movwf	(___lmul@multiplicand+3)& (0+255),b
 12018  010B60  ECE0  F094         	call	___lmul	;wreg free
 12019  010B64  0100               	movlb	0	; () banked
 12020  010B66  51E0               	movf	?___lmul& (0+255),w,b
 12021  010B68  0100               	movlb	0	; () banked
 12022  010B6A  27F6               	addwf	caltime_to_epoch@epoch& (0+255),f,b
 12023  010B6C  0100               	movlb	0	; () banked
 12024  010B6E  51E1               	movf	(?___lmul+1)& (0+255),w,b
 12025  010B70  0100               	movlb	0	; () banked
 12026  010B72  23F7               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
 12027  010B74  0100               	movlb	0	; () banked
 12028  010B76  51E2               	movf	(?___lmul+2)& (0+255),w,b
 12029  010B78  0100               	movlb	0	; () banked
 12030  010B7A  23F8               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
 12031  010B7C  0100               	movlb	0	; () banked
 12032  010B7E  51E3               	movf	(?___lmul+3)& (0+255),w,b
 12033  010B80  0100               	movlb	0	; () banked
 12034  010B82  23F9               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
 12035                           
 12036                           ; BSR set to: 0
 12037  010B84  0100               	movlb	0	; () banked
 12038  010B86  2BF5               	incf	caltime_to_epoch@month_1995& (0+255),f,b
 12039  010B88                     l8110:
 12040                           
 12041                           ; BSR set to: 0
 12042  010B88  0100               	movlb	0	; () banked
 12043  010B8A  EE20 F005          	lfsr	2,5
 12044  010B8E  51EC               	movf	caltime_to_epoch@ct& (0+255),w,b
 12045  010B90  26D9               	addwf	fsr2l,f,c
 12046  010B92  51ED               	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
 12047  010B94  22DA               	addwfc	fsr2h,f,c
 12048  010B96  50DE               	movf	postinc2,w,c
 12049  010B98  0100               	movlb	0	; () banked
 12050  010B9A  5DF5               	subwf	caltime_to_epoch@month_1995& (0+255),w,b
 12051  010B9C  A0D8               	btfss	status,0,c
 12052  010B9E  D7C2               	goto	l8106
 12053                           
 12054                           ; BSR set to: 0
 12055                           ;My_header\My_RTCC.h: 220: }
 12056                           ;My_header\My_RTCC.h: 221: epoch += ((epoch_t)60*60*24) * (ct->DD - 1);
 12057                           
 12058                           ; BSR set to: 0
 12059  010BA0  0EFF               	movlw	255
 12060  010BA2  0100               	movlb	0	; () banked
 12061  010BA4  6FF0               	movwf	??_caltime_to_epoch& (0+255),b
 12062  010BA6  0EFF               	movlw	255
 12063  010BA8  0100               	movlb	0	; () banked
 12064  010BAA  6FF1               	movwf	(??_caltime_to_epoch+1)& (0+255),b
 12065  010BAC  0100               	movlb	0	; () banked
 12066  010BAE  EE20 F004          	lfsr	2,4
 12067  010BB2  51EC               	movf	caltime_to_epoch@ct& (0+255),w,b
 12068  010BB4  26D9               	addwf	fsr2l,f,c
 12069  010BB6  51ED               	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
 12070  010BB8  22DA               	addwfc	fsr2h,f,c
 12071  010BBA  50DF               	movf	indf2,w,c
 12072  010BBC  0100               	movlb	0	; () banked
 12073  010BBE  6FF2               	movwf	(??_caltime_to_epoch+2)& (0+255),b
 12074  010BC0  6BF3               	clrf	(??_caltime_to_epoch+3)& (0+255),b
 12075  010BC2  0100               	movlb	0	; () banked
 12076  010BC4  51F0               	movf	??_caltime_to_epoch& (0+255),w,b
 12077  010BC6  0100               	movlb	0	; () banked
 12078  010BC8  27F2               	addwf	(??_caltime_to_epoch+2)& (0+255),f,b
 12079  010BCA  0100               	movlb	0	; () banked
 12080  010BCC  51F1               	movf	(??_caltime_to_epoch+1)& (0+255),w,b
 12081  010BCE  0100               	movlb	0	; () banked
 12082  010BD0  23F3               	addwfc	(??_caltime_to_epoch+3)& (0+255),f,b
 12083  010BD2  C0F2  F0E0         	movff	??_caltime_to_epoch+2,___lmul@multiplier
 12084  010BD6  C0F3  F0E1         	movff	??_caltime_to_epoch+3,___lmul@multiplier+1
 12085  010BDA  0100               	movlb	0	; () banked
 12086  010BDC  0E00               	movlw	0
 12087  010BDE  BFE1               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
 12088  010BE0  0EFF               	movlw	-1
 12089  010BE2  6FE2               	movwf	(___lmul@multiplier+2)& (0+255),b
 12090  010BE4  6FE3               	movwf	(___lmul@multiplier+3)& (0+255),b
 12091  010BE6  0E80               	movlw	128
 12092  010BE8  0100               	movlb	0	; () banked
 12093  010BEA  6FE4               	movwf	___lmul@multiplicand& (0+255),b
 12094  010BEC  0E51               	movlw	81
 12095  010BEE  6FE5               	movwf	(___lmul@multiplicand+1)& (0+255),b
 12096  010BF0  0E01               	movlw	1
 12097  010BF2  6FE6               	movwf	(___lmul@multiplicand+2)& (0+255),b
 12098  010BF4  0E00               	movlw	0
 12099  010BF6  6FE7               	movwf	(___lmul@multiplicand+3)& (0+255),b
 12100  010BF8  ECE0  F094         	call	___lmul	;wreg free
 12101  010BFC  0100               	movlb	0	; () banked
 12102  010BFE  51E0               	movf	?___lmul& (0+255),w,b
 12103  010C00  0100               	movlb	0	; () banked
 12104  010C02  27F6               	addwf	caltime_to_epoch@epoch& (0+255),f,b
 12105  010C04  0100               	movlb	0	; () banked
 12106  010C06  51E1               	movf	(?___lmul+1)& (0+255),w,b
 12107  010C08  0100               	movlb	0	; () banked
 12108  010C0A  23F7               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
 12109  010C0C  0100               	movlb	0	; () banked
 12110  010C0E  51E2               	movf	(?___lmul+2)& (0+255),w,b
 12111  010C10  0100               	movlb	0	; () banked
 12112  010C12  23F8               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
 12113  010C14  0100               	movlb	0	; () banked
 12114  010C16  51E3               	movf	(?___lmul+3)& (0+255),w,b
 12115  010C18  0100               	movlb	0	; () banked
 12116  010C1A  23F9               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
 12117                           
 12118                           ;My_header\My_RTCC.h: 222: epoch += ((epoch_t)60*60) * ct->hh;
 12119  010C1C  0100               	movlb	0	; () banked
 12120  010C1E  EE20 F002          	lfsr	2,2
 12121  010C22  51EC               	movf	caltime_to_epoch@ct& (0+255),w,b
 12122  010C24  26D9               	addwf	fsr2l,f,c
 12123  010C26  51ED               	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
 12124  010C28  22DA               	addwfc	fsr2h,f,c
 12125  010C2A  50DF               	movf	indf2,w,c
 12126  010C2C  0100               	movlb	0	; () banked
 12127  010C2E  6FF0               	movwf	??_caltime_to_epoch& (0+255),b
 12128  010C30  0100               	movlb	0	; () banked
 12129  010C32  51F0               	movf	??_caltime_to_epoch& (0+255),w,b
 12130  010C34  0100               	movlb	0	; () banked
 12131  010C36  6FE0               	movwf	___lmul@multiplier& (0+255),b
 12132  010C38  6BE1               	clrf	(___lmul@multiplier+1)& (0+255),b
 12133  010C3A  6BE2               	clrf	(___lmul@multiplier+2)& (0+255),b
 12134  010C3C  6BE3               	clrf	(___lmul@multiplier+3)& (0+255),b
 12135  010C3E  0E10               	movlw	16
 12136  010C40  0100               	movlb	0	; () banked
 12137  010C42  6FE4               	movwf	___lmul@multiplicand& (0+255),b
 12138  010C44  0E0E               	movlw	14
 12139  010C46  6FE5               	movwf	(___lmul@multiplicand+1)& (0+255),b
 12140  010C48  0E00               	movlw	0
 12141  010C4A  6FE6               	movwf	(___lmul@multiplicand+2)& (0+255),b
 12142  010C4C  0E00               	movlw	0
 12143  010C4E  6FE7               	movwf	(___lmul@multiplicand+3)& (0+255),b
 12144  010C50  ECE0  F094         	call	___lmul	;wreg free
 12145  010C54  0100               	movlb	0	; () banked
 12146  010C56  51E0               	movf	?___lmul& (0+255),w,b
 12147  010C58  0100               	movlb	0	; () banked
 12148  010C5A  27F6               	addwf	caltime_to_epoch@epoch& (0+255),f,b
 12149  010C5C  0100               	movlb	0	; () banked
 12150  010C5E  51E1               	movf	(?___lmul+1)& (0+255),w,b
 12151  010C60  0100               	movlb	0	; () banked
 12152  010C62  23F7               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
 12153  010C64  0100               	movlb	0	; () banked
 12154  010C66  51E2               	movf	(?___lmul+2)& (0+255),w,b
 12155  010C68  0100               	movlb	0	; () banked
 12156  010C6A  23F8               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
 12157  010C6C  0100               	movlb	0	; () banked
 12158  010C6E  51E3               	movf	(?___lmul+3)& (0+255),w,b
 12159  010C70  0100               	movlb	0	; () banked
 12160  010C72  23F9               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
 12161                           
 12162                           ;My_header\My_RTCC.h: 223: epoch += ((epoch_t)60) * ct->mm;
 12163  010C74  0100               	movlb	0	; () banked
 12164  010C76  EE20 F001          	lfsr	2,1
 12165  010C7A  51EC               	movf	caltime_to_epoch@ct& (0+255),w,b
 12166  010C7C  26D9               	addwf	fsr2l,f,c
 12167  010C7E  51ED               	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
 12168  010C80  22DA               	addwfc	fsr2h,f,c
 12169  010C82  50DF               	movf	indf2,w,c
 12170  010C84  0100               	movlb	0	; () banked
 12171  010C86  6FF0               	movwf	??_caltime_to_epoch& (0+255),b
 12172  010C88  0100               	movlb	0	; () banked
 12173  010C8A  51F0               	movf	??_caltime_to_epoch& (0+255),w,b
 12174  010C8C  0100               	movlb	0	; () banked
 12175  010C8E  6FE0               	movwf	___lmul@multiplier& (0+255),b
 12176  010C90  6BE1               	clrf	(___lmul@multiplier+1)& (0+255),b
 12177  010C92  6BE2               	clrf	(___lmul@multiplier+2)& (0+255),b
 12178  010C94  6BE3               	clrf	(___lmul@multiplier+3)& (0+255),b
 12179  010C96  0E3C               	movlw	60
 12180  010C98  0100               	movlb	0	; () banked
 12181  010C9A  6FE4               	movwf	___lmul@multiplicand& (0+255),b
 12182  010C9C  0E00               	movlw	0
 12183  010C9E  6FE5               	movwf	(___lmul@multiplicand+1)& (0+255),b
 12184  010CA0  0E00               	movlw	0
 12185  010CA2  6FE6               	movwf	(___lmul@multiplicand+2)& (0+255),b
 12186  010CA4  0E00               	movlw	0
 12187  010CA6  6FE7               	movwf	(___lmul@multiplicand+3)& (0+255),b
 12188  010CA8  ECE0  F094         	call	___lmul	;wreg free
 12189  010CAC  0100               	movlb	0	; () banked
 12190  010CAE  51E0               	movf	?___lmul& (0+255),w,b
 12191  010CB0  0100               	movlb	0	; () banked
 12192  010CB2  27F6               	addwf	caltime_to_epoch@epoch& (0+255),f,b
 12193  010CB4  0100               	movlb	0	; () banked
 12194  010CB6  51E1               	movf	(?___lmul+1)& (0+255),w,b
 12195  010CB8  0100               	movlb	0	; () banked
 12196  010CBA  23F7               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
 12197  010CBC  0100               	movlb	0	; () banked
 12198  010CBE  51E2               	movf	(?___lmul+2)& (0+255),w,b
 12199  010CC0  0100               	movlb	0	; () banked
 12200  010CC2  23F8               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
 12201  010CC4  0100               	movlb	0	; () banked
 12202  010CC6  51E3               	movf	(?___lmul+3)& (0+255),w,b
 12203  010CC8  0100               	movlb	0	; () banked
 12204  010CCA  23F9               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
 12205                           
 12206                           ; BSR set to: 0
 12207                           ;My_header\My_RTCC.h: 224: epoch += ct->ss;
 12208  010CCC  C0EC  FFD9         	movff	caltime_to_epoch@ct,fsr2l
 12209  010CD0  C0ED  FFDA         	movff	caltime_to_epoch@ct+1,fsr2h
 12210  010CD4  50DF               	movf	indf2,w,c
 12211  010CD6  0100               	movlb	0	; () banked
 12212  010CD8  6FF0               	movwf	??_caltime_to_epoch& (0+255),b
 12213  010CDA  0100               	movlb	0	; () banked
 12214  010CDC  51F0               	movf	??_caltime_to_epoch& (0+255),w,b
 12215  010CDE  0100               	movlb	0	; () banked
 12216  010CE0  27F6               	addwf	caltime_to_epoch@epoch& (0+255),f,b
 12217  010CE2  0E00               	movlw	0
 12218  010CE4  23F7               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
 12219  010CE6  23F8               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
 12220  010CE8  23F9               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
 12221                           
 12222                           ; BSR set to: 0
 12223                           ;My_header\My_RTCC.h: 226: *ep = epoch;
 12224  010CEA  C0EE  FFD9         	movff	caltime_to_epoch@ep,fsr2l
 12225  010CEE  C0EF  FFDA         	movff	caltime_to_epoch@ep+1,fsr2h
 12226  010CF2  C0F6  FFDE         	movff	caltime_to_epoch@epoch,postinc2
 12227  010CF6  C0F7  FFDE         	movff	caltime_to_epoch@epoch+1,postinc2
 12228  010CFA  C0F8  FFDE         	movff	caltime_to_epoch@epoch+2,postinc2
 12229  010CFE  C0F9  FFDE         	movff	caltime_to_epoch@epoch+3,postinc2
 12230                           
 12231                           ; BSR set to: 0
 12232  010D02  0012               	return		;funcret
 12233  010D04                     __end_of_caltime_to_epoch:
 12234                           	opt stack 0
 12235                           tblptru	equ	0xFF8
 12236                           tblptrh	equ	0xFF7
 12237                           tblptrl	equ	0xFF6
 12238                           tablat	equ	0xFF5
 12239                           prodh	equ	0xFF4
 12240                           prodl	equ	0xFF3
 12241                           intcon	equ	0xFF2
 12242                           intcon2	equ	0xFF1
 12243                           indf0	equ	0xFEF
 12244                           postinc0	equ	0xFEE
 12245                           fsr0h	equ	0xFEA
 12246                           fsr0l	equ	0xFE9
 12247                           wreg	equ	0xFE8
 12248                           postdec1	equ	0xFE5
 12249                           fsr1l	equ	0xFE1
 12250                           indf2	equ	0xFDF
 12251                           postinc2	equ	0xFDE
 12252                           postdec2	equ	0xFDD
 12253                           plusw2	equ	0xFDB
 12254                           fsr2h	equ	0xFDA
 12255                           fsr2l	equ	0xFD9
 12256                           status	equ	0xFD8
 12257                           
 12258 ;; *************** function _month_length *****************
 12259 ;; Defined at:
 12260 ;;		line 87 in file "../My_header\My_RTCC.h"
 12261 ;; Parameters:    Size  Location     Type
 12262 ;;  year            1    wreg     unsigned char 
 12263 ;;  month           1   31[COMRAM] unsigned char 
 12264 ;; Auto vars:     Size  Location     Type
 12265 ;;  year            1   10[BANK0 ] unsigned char 
 12266 ;; Return value:  Size  Location     Type
 12267 ;;                  1    wreg      unsigned char 
 12268 ;; Registers used:
 12269 ;;		wreg, status,2, status,0, cstack
 12270 ;; Tracked objects:
 12271 ;;		On entry : 0/0
 12272 ;;		On exit  : 0/0
 12273 ;;		Unchanged: 0/0
 12274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12275 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12276 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12277 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12278 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12279 ;;Total ram usage:        6 bytes
 12280 ;; Hardware stack levels used:    1
 12281 ;; Hardware stack levels required when called:    5
 12282 ;; This function calls:
 12283 ;;		___awmod
 12284 ;; This function is called by:
 12285 ;;		_epoch_to_caltime
 12286 ;;		_caltime_to_epoch
 12287 ;;		_RTCC_adjust_time_inc
 12288 ;;		_RTCC_adjust_time_dec
 12289 ;; This function uses a non-reentrant model
 12290 ;;
 12291                           
 12292                           	psect	text60
 12293  011ACE                     __ptext60:
 12294                           	opt stack 0
 12295  011ACE                     _month_length:
 12296                           	opt stack 22
 12297                           
 12298                           ; BSR set to: 0
 12299                           ;incstack = 0
 12300                           ;month_length@year stored from wreg
 12301  011ACE  0100               	movlb	0	; () banked
 12302  011AD0  6FDD               	movwf	month_length@year& (0+255),b
 12303                           
 12304                           ;My_header\My_RTCC.h: 88: if (month == 2) return 28 + !(year & 3)-!(year % 100)+!(year %
      +                           400);
 12305  011AD2  0E02               	movlw	2
 12306  011AD4  1820               	xorwf	month_length@month,w,c
 12307  011AD6  A4D8               	btfss	status,2,c
 12308  011AD8  D03E               	goto	l7928
 12309  011ADA  C0DD  F0D3         	movff	month_length@year,___awmod@dividend
 12310  011ADE  0100               	movlb	0	; () banked
 12311  011AE0  6BD4               	clrf	(___awmod@dividend+1)& (0+255),b
 12312  011AE2  0E00               	movlw	0
 12313  011AE4  0100               	movlb	0	; () banked
 12314  011AE6  6FD6               	movwf	(___awmod@divisor+1)& (0+255),b
 12315  011AE8  0E64               	movlw	100
 12316  011AEA  6FD5               	movwf	___awmod@divisor& (0+255),b
 12317  011AEC  ECAE  F092         	call	___awmod	;wreg free
 12318  011AF0  0100               	movlb	0	; () banked
 12319  011AF2  51D3               	movf	?___awmod& (0+255),w,b
 12320  011AF4  0100               	movlb	0	; () banked
 12321  011AF6  11D4               	iorwf	(?___awmod+1)& (0+255),w,b
 12322  011AF8  A4D8               	btfss	status,2,c
 12323  011AFA  D002               	goto	u8290
 12324  011AFC  0E01               	movlw	1
 12325  011AFE  D001               	goto	u8300
 12326  011B00                     u8290:
 12327  011B00  0E00               	movlw	0
 12328  011B02                     u8300:
 12329  011B02  0800               	sublw	0
 12330  011B04  0100               	movlb	0	; () banked
 12331  011B06  6FD9               	movwf	??_month_length& (0+255),b
 12332  011B08  C0DD  F0D3         	movff	month_length@year,___awmod@dividend
 12333  011B0C  0100               	movlb	0	; () banked
 12334  011B0E  6BD4               	clrf	(___awmod@dividend+1)& (0+255),b
 12335  011B10  0E01               	movlw	1
 12336  011B12  0100               	movlb	0	; () banked
 12337  011B14  6FD6               	movwf	(___awmod@divisor+1)& (0+255),b
 12338  011B16  0E90               	movlw	144
 12339  011B18  6FD5               	movwf	___awmod@divisor& (0+255),b
 12340  011B1A  ECAE  F092         	call	___awmod	;wreg free
 12341  011B1E  0100               	movlb	0	; () banked
 12342  011B20  51D3               	movf	?___awmod& (0+255),w,b
 12343  011B22  0100               	movlb	0	; () banked
 12344  011B24  11D4               	iorwf	(?___awmod+1)& (0+255),w,b
 12345  011B26  A4D8               	btfss	status,2,c
 12346  011B28  D004               	goto	u8310
 12347  011B2A  0100               	movlb	0	; () banked
 12348  011B2C  6BDA               	clrf	(??_month_length+1)& (0+255),b
 12349  011B2E  2BDA               	incf	(??_month_length+1)& (0+255),f,b
 12350  011B30  D002               	goto	u8328
 12351  011B32                     u8310:
 12352  011B32  0100               	movlb	0	; () banked
 12353  011B34  6BDA               	clrf	(??_month_length+1)& (0+255),b
 12354  011B36                     u8328:
 12355  011B36  C0DD  F0DB         	movff	month_length@year,??_month_length+2
 12356  011B3A  0E03               	movlw	3
 12357  011B3C  0100               	movlb	0	; () banked
 12358  011B3E  17DB               	andwf	(??_month_length+2)& (0+255),f,b
 12359  011B40  A4D8               	btfss	status,2,c
 12360  011B42  D002               	goto	u8330
 12361  011B44  0E01               	movlw	1
 12362  011B46  D001               	goto	u8340
 12363  011B48                     u8330:
 12364  011B48  0E00               	movlw	0
 12365  011B4A                     u8340:
 12366  011B4A  0100               	movlb	0	; () banked
 12367  011B4C  25DA               	addwf	(??_month_length+1)& (0+255),w,b
 12368  011B4E  0100               	movlb	0	; () banked
 12369  011B50  25D9               	addwf	??_month_length& (0+255),w,b
 12370  011B52  0F1C               	addlw	28
 12371                           
 12372                           ; BSR set to: 0
 12373                           
 12374                           ; BSR set to: 0
 12375  011B54  0012               	return	
 12376  011B56                     l7928:
 12377                           
 12378                           ;My_header\My_RTCC.h: 89: else return 31 - (((-(month & 1)^month)&13) == 4);
 12379  011B56  5020               	movf	month_length@month,w,c
 12380  011B58  0B01               	andlw	1
 12381  011B5A  0100               	movlb	0	; () banked
 12382  011B5C  6FD9               	movwf	??_month_length& (0+255),b
 12383  011B5E  6BDA               	clrf	(??_month_length+1)& (0+255),b
 12384  011B60  0100               	movlb	0	; () banked
 12385  011B62  1FD9               	comf	??_month_length& (0+255),f,b
 12386  011B64  1FDA               	comf	(??_month_length+1)& (0+255),f,b
 12387  011B66  4BD9               	infsnz	??_month_length& (0+255),f,b
 12388  011B68  2BDA               	incf	(??_month_length+1)& (0+255),f,b
 12389  011B6A  5020               	movf	month_length@month,w,c
 12390  011B6C  0100               	movlb	0	; () banked
 12391  011B6E  6FDB               	movwf	(??_month_length+2)& (0+255),b
 12392  011B70  6BDC               	clrf	(??_month_length+3)& (0+255),b
 12393  011B72  0100               	movlb	0	; () banked
 12394  011B74  51D9               	movf	??_month_length& (0+255),w,b
 12395  011B76  0100               	movlb	0	; () banked
 12396  011B78  1BDB               	xorwf	(??_month_length+2)& (0+255),f,b
 12397  011B7A  0100               	movlb	0	; () banked
 12398  011B7C  51DA               	movf	(??_month_length+1)& (0+255),w,b
 12399  011B7E  0100               	movlb	0	; () banked
 12400  011B80  1BDC               	xorwf	(??_month_length+3)& (0+255),f,b
 12401  011B82  0E0D               	movlw	13
 12402  011B84  0100               	movlb	0	; () banked
 12403  011B86  17DB               	andwf	(??_month_length+2)& (0+255),f,b
 12404  011B88  0E00               	movlw	0
 12405  011B8A  17DC               	andwf	(??_month_length+3)& (0+255),f,b
 12406  011B8C  0E04               	movlw	4
 12407  011B8E  0100               	movlb	0	; () banked
 12408  011B90  19DB               	xorwf	(??_month_length+2)& (0+255),w,b
 12409  011B92  0100               	movlb	0	; () banked
 12410  011B94  11DC               	iorwf	(??_month_length+3)& (0+255),w,b
 12411  011B96  A4D8               	btfss	status,2,c
 12412  011B98  D002               	goto	u8350
 12413  011B9A  0E01               	movlw	1
 12414  011B9C  D001               	goto	u8360
 12415  011B9E                     u8350:
 12416  011B9E  0E00               	movlw	0
 12417  011BA0                     u8360:
 12418  011BA0  0800               	sublw	0
 12419  011BA2  0F1F               	addlw	31
 12420                           
 12421                           ; BSR set to: 0
 12422  011BA4  0012               	return	
 12423  011BA6                     __end_of_month_length:
 12424                           	opt stack 0
 12425                           tblptru	equ	0xFF8
 12426                           tblptrh	equ	0xFF7
 12427                           tblptrl	equ	0xFF6
 12428                           tablat	equ	0xFF5
 12429                           prodh	equ	0xFF4
 12430                           prodl	equ	0xFF3
 12431                           intcon	equ	0xFF2
 12432                           intcon2	equ	0xFF1
 12433                           indf0	equ	0xFEF
 12434                           postinc0	equ	0xFEE
 12435                           fsr0h	equ	0xFEA
 12436                           fsr0l	equ	0xFE9
 12437                           wreg	equ	0xFE8
 12438                           postdec1	equ	0xFE5
 12439                           fsr1l	equ	0xFE1
 12440                           indf2	equ	0xFDF
 12441                           postinc2	equ	0xFDE
 12442                           postdec2	equ	0xFDD
 12443                           plusw2	equ	0xFDB
 12444                           fsr2h	equ	0xFDA
 12445                           fsr2l	equ	0xFD9
 12446                           status	equ	0xFD8
 12447                           
 12448 ;; *************** function ___awmod *****************
 12449 ;; Defined at:
 12450 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
 12451 ;; Parameters:    Size  Location     Type
 12452 ;;  dividend        2    0[BANK0 ] int 
 12453 ;;  divisor         2    2[BANK0 ] int 
 12454 ;; Auto vars:     Size  Location     Type
 12455 ;;  sign            1    5[BANK0 ] unsigned char 
 12456 ;;  counter         1    4[BANK0 ] unsigned char 
 12457 ;; Return value:  Size  Location     Type
 12458 ;;                  2    0[BANK0 ] int 
 12459 ;; Registers used:
 12460 ;;		wreg, status,2, status,0
 12461 ;; Tracked objects:
 12462 ;;		On entry : 0/0
 12463 ;;		On exit  : 0/0
 12464 ;;		Unchanged: 0/0
 12465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12466 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12467 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12469 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12470 ;;Total ram usage:        6 bytes
 12471 ;; Hardware stack levels used:    1
 12472 ;; Hardware stack levels required when called:    4
 12473 ;; This function calls:
 12474 ;;		Nothing
 12475 ;; This function is called by:
 12476 ;;		_month_length
 12477 ;; This function uses a non-reentrant model
 12478 ;;
 12479                           
 12480                           	psect	text61
 12481  01255C                     __ptext61:
 12482                           	opt stack 0
 12483  01255C                     ___awmod:
 12484                           	opt stack 22
 12485                           
 12486                           ; BSR set to: 0
 12487                           ;incstack = 0
 12488  01255C  0E00               	movlw	0
 12489  01255E  0100               	movlb	0	; () banked
 12490  012560  6FD8               	movwf	___awmod@sign& (0+255),b
 12491                           
 12492                           ; BSR set to: 0
 12493  012562  0100               	movlb	0	; () banked
 12494  012564  AFD4               	btfss	(___awmod@dividend+1)& (0+255),7,b
 12495  012566  D008               	goto	l7836
 12496                           
 12497                           ; BSR set to: 0
 12498  012568  0100               	movlb	0	; () banked
 12499  01256A  6DD3               	negf	___awmod@dividend& (0+255),b
 12500  01256C  1FD4               	comf	(___awmod@dividend+1)& (0+255),f,b
 12501  01256E  B0D8               	btfsc	status,0,c
 12502  012570  2BD4               	incf	(___awmod@dividend+1)& (0+255),f,b
 12503                           
 12504                           ; BSR set to: 0
 12505  012572  0E01               	movlw	1
 12506  012574  0100               	movlb	0	; () banked
 12507  012576  6FD8               	movwf	___awmod@sign& (0+255),b
 12508  012578                     l7836:
 12509                           
 12510                           ; BSR set to: 0
 12511  012578  0100               	movlb	0	; () banked
 12512  01257A  AFD6               	btfss	(___awmod@divisor+1)& (0+255),7,b
 12513  01257C  D005               	goto	l7840
 12514                           
 12515                           ; BSR set to: 0
 12516  01257E  0100               	movlb	0	; () banked
 12517  012580  6DD5               	negf	___awmod@divisor& (0+255),b
 12518  012582  1FD6               	comf	(___awmod@divisor+1)& (0+255),f,b
 12519  012584  B0D8               	btfsc	status,0,c
 12520  012586  2BD6               	incf	(___awmod@divisor+1)& (0+255),f,b
 12521  012588                     l7840:
 12522                           
 12523                           ; BSR set to: 0
 12524  012588  0100               	movlb	0	; () banked
 12525  01258A  51D5               	movf	___awmod@divisor& (0+255),w,b
 12526  01258C  0100               	movlb	0	; () banked
 12527  01258E  11D6               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 12528  012590  B4D8               	btfsc	status,2,c
 12529  012592  D026               	goto	l7856
 12530                           
 12531                           ; BSR set to: 0
 12532  012594  0E01               	movlw	1
 12533  012596  0100               	movlb	0	; () banked
 12534  012598  6FD7               	movwf	___awmod@counter& (0+255),b
 12535  01259A  D006               	goto	l7846
 12536  01259C                     l7844:
 12537                           
 12538                           ; BSR set to: 0
 12539  01259C  0100               	movlb	0	; () banked
 12540  01259E  90D8               	bcf	status,0,c
 12541  0125A0  37D5               	rlcf	___awmod@divisor& (0+255),f,b
 12542  0125A2  37D6               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 12543  0125A4  0100               	movlb	0	; () banked
 12544  0125A6  2BD7               	incf	___awmod@counter& (0+255),f,b
 12545  0125A8                     l7846:
 12546                           
 12547                           ; BSR set to: 0
 12548  0125A8  0100               	movlb	0	; () banked
 12549  0125AA  AFD6               	btfss	(___awmod@divisor+1)& (0+255),7,b
 12550  0125AC  D7F7               	goto	l7844
 12551  0125AE                     l7848:
 12552                           
 12553                           ; BSR set to: 0
 12554  0125AE  0100               	movlb	0	; () banked
 12555  0125B0  51D5               	movf	___awmod@divisor& (0+255),w,b
 12556  0125B2  0100               	movlb	0	; () banked
 12557  0125B4  5DD3               	subwf	___awmod@dividend& (0+255),w,b
 12558  0125B6  0100               	movlb	0	; () banked
 12559  0125B8  51D6               	movf	(___awmod@divisor+1)& (0+255),w,b
 12560  0125BA  0100               	movlb	0	; () banked
 12561  0125BC  59D4               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 12562  0125BE  A0D8               	btfss	status,0,c
 12563  0125C0  D008               	goto	l7852
 12564                           
 12565                           ; BSR set to: 0
 12566  0125C2  0100               	movlb	0	; () banked
 12567  0125C4  51D5               	movf	___awmod@divisor& (0+255),w,b
 12568  0125C6  0100               	movlb	0	; () banked
 12569  0125C8  5FD3               	subwf	___awmod@dividend& (0+255),f,b
 12570  0125CA  0100               	movlb	0	; () banked
 12571  0125CC  51D6               	movf	(___awmod@divisor+1)& (0+255),w,b
 12572  0125CE  0100               	movlb	0	; () banked
 12573  0125D0  5BD4               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 12574  0125D2                     l7852:
 12575                           
 12576                           ; BSR set to: 0
 12577  0125D2  0100               	movlb	0	; () banked
 12578  0125D4  90D8               	bcf	status,0,c
 12579  0125D6  33D6               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 12580  0125D8  33D5               	rrcf	___awmod@divisor& (0+255),f,b
 12581                           
 12582                           ; BSR set to: 0
 12583  0125DA  0100               	movlb	0	; () banked
 12584  0125DC  2FD7               	decfsz	___awmod@counter& (0+255),f,b
 12585  0125DE  D7E7               	goto	l7848
 12586  0125E0                     l7856:
 12587                           
 12588                           ; BSR set to: 0
 12589  0125E0  0100               	movlb	0	; () banked
 12590  0125E2  51D8               	movf	___awmod@sign& (0+255),w,b
 12591  0125E4  0100               	movlb	0	; () banked
 12592  0125E6  B4D8               	btfsc	status,2,c
 12593  0125E8  D005               	goto	l7860
 12594                           
 12595                           ; BSR set to: 0
 12596  0125EA  0100               	movlb	0	; () banked
 12597  0125EC  6DD3               	negf	___awmod@dividend& (0+255),b
 12598  0125EE  1FD4               	comf	(___awmod@dividend+1)& (0+255),f,b
 12599  0125F0  B0D8               	btfsc	status,0,c
 12600  0125F2  2BD4               	incf	(___awmod@dividend+1)& (0+255),f,b
 12601  0125F4                     l7860:
 12602                           
 12603                           ; BSR set to: 0
 12604  0125F4  C0D3  F0D3         	movff	___awmod@dividend,?___awmod
 12605  0125F8  C0D4  F0D4         	movff	___awmod@dividend+1,?___awmod+1
 12606  0125FC  0012               	return	
 12607  0125FE                     __end_of___awmod:
 12608                           	opt stack 0
 12609                           tblptru	equ	0xFF8
 12610                           tblptrh	equ	0xFF7
 12611                           tblptrl	equ	0xFF6
 12612                           tablat	equ	0xFF5
 12613                           prodh	equ	0xFF4
 12614                           prodl	equ	0xFF3
 12615                           intcon	equ	0xFF2
 12616                           intcon2	equ	0xFF1
 12617                           indf0	equ	0xFEF
 12618                           postinc0	equ	0xFEE
 12619                           fsr0h	equ	0xFEA
 12620                           fsr0l	equ	0xFE9
 12621                           wreg	equ	0xFE8
 12622                           postdec1	equ	0xFE5
 12623                           fsr1l	equ	0xFE1
 12624                           indf2	equ	0xFDF
 12625                           postinc2	equ	0xFDE
 12626                           postdec2	equ	0xFDD
 12627                           plusw2	equ	0xFDB
 12628                           fsr2h	equ	0xFDA
 12629                           fsr2l	equ	0xFD9
 12630                           status	equ	0xFD8
 12631                           
 12632 ;; *************** function ___lmul *****************
 12633 ;; Defined at:
 12634 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul32.c"
 12635 ;; Parameters:    Size  Location     Type
 12636 ;;  multiplier      4   13[BANK0 ] unsigned long 
 12637 ;;  multiplicand    4   17[BANK0 ] unsigned long 
 12638 ;; Auto vars:     Size  Location     Type
 12639 ;;  product         4   21[BANK0 ] unsigned long 
 12640 ;; Return value:  Size  Location     Type
 12641 ;;                  4   13[BANK0 ] unsigned long 
 12642 ;; Registers used:
 12643 ;;		wreg, status,2, status,0
 12644 ;; Tracked objects:
 12645 ;;		On entry : 0/0
 12646 ;;		On exit  : 0/0
 12647 ;;		Unchanged: 0/0
 12648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12649 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12650 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12652 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12653 ;;Total ram usage:       12 bytes
 12654 ;; Hardware stack levels used:    1
 12655 ;; Hardware stack levels required when called:    4
 12656 ;; This function calls:
 12657 ;;		Nothing
 12658 ;; This function is called by:
 12659 ;;		_get_quot_rem
 12660 ;;		_caltime_to_epoch
 12661 ;;		_RTCC_adjust_time_inc
 12662 ;;		_RTCC_adjust_time_dec
 12663 ;; This function uses a non-reentrant model
 12664 ;;
 12665                           
 12666                           	psect	text62
 12667  0129C0                     __ptext62:
 12668                           	opt stack 0
 12669  0129C0                     ___lmul:
 12670                           	opt stack 23
 12671                           
 12672                           ; BSR set to: 0
 12673                           ;incstack = 0
 12674  0129C0  0E00               	movlw	0
 12675  0129C2  0100               	movlb	0	; () banked
 12676  0129C4  6FE8               	movwf	___lmul@product& (0+255),b
 12677  0129C6  0E00               	movlw	0
 12678  0129C8  6FE9               	movwf	(___lmul@product+1)& (0+255),b
 12679  0129CA  0E00               	movlw	0
 12680  0129CC  6FEA               	movwf	(___lmul@product+2)& (0+255),b
 12681  0129CE  0E00               	movlw	0
 12682  0129D0  6FEB               	movwf	(___lmul@product+3)& (0+255),b
 12683  0129D2                     l7776:
 12684                           
 12685                           ; BSR set to: 0
 12686  0129D2  0100               	movlb	0	; () banked
 12687  0129D4  A1E0               	btfss	___lmul@multiplier& (0+255),0,b
 12688  0129D6  D010               	goto	l7780
 12689                           
 12690                           ; BSR set to: 0
 12691  0129D8  0100               	movlb	0	; () banked
 12692  0129DA  51E4               	movf	___lmul@multiplicand& (0+255),w,b
 12693  0129DC  0100               	movlb	0	; () banked
 12694  0129DE  27E8               	addwf	___lmul@product& (0+255),f,b
 12695  0129E0  0100               	movlb	0	; () banked
 12696  0129E2  51E5               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 12697  0129E4  0100               	movlb	0	; () banked
 12698  0129E6  23E9               	addwfc	(___lmul@product+1)& (0+255),f,b
 12699  0129E8  0100               	movlb	0	; () banked
 12700  0129EA  51E6               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 12701  0129EC  0100               	movlb	0	; () banked
 12702  0129EE  23EA               	addwfc	(___lmul@product+2)& (0+255),f,b
 12703  0129F0  0100               	movlb	0	; () banked
 12704  0129F2  51E7               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 12705  0129F4  0100               	movlb	0	; () banked
 12706  0129F6  23EB               	addwfc	(___lmul@product+3)& (0+255),f,b
 12707  0129F8                     l7780:
 12708                           
 12709                           ; BSR set to: 0
 12710  0129F8  0100               	movlb	0	; () banked
 12711  0129FA  90D8               	bcf	status,0,c
 12712  0129FC  37E4               	rlcf	___lmul@multiplicand& (0+255),f,b
 12713  0129FE  37E5               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 12714  012A00  37E6               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 12715  012A02  37E7               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 12716                           
 12717                           ; BSR set to: 0
 12718  012A04  0100               	movlb	0	; () banked
 12719  012A06  90D8               	bcf	status,0,c
 12720  012A08  33E3               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 12721  012A0A  33E2               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 12722  012A0C  33E1               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 12723  012A0E  33E0               	rrcf	___lmul@multiplier& (0+255),f,b
 12724  012A10  0100               	movlb	0	; () banked
 12725  012A12  51E0               	movf	___lmul@multiplier& (0+255),w,b
 12726  012A14  0100               	movlb	0	; () banked
 12727  012A16  11E1               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 12728  012A18  0100               	movlb	0	; () banked
 12729  012A1A  11E2               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 12730  012A1C  0100               	movlb	0	; () banked
 12731  012A1E  11E3               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 12732  012A20  A4D8               	btfss	status,2,c
 12733  012A22  D7D7               	goto	l7776
 12734                           
 12735                           ; BSR set to: 0
 12736  012A24  C0E8  F0E0         	movff	___lmul@product,?___lmul
 12737  012A28  C0E9  F0E1         	movff	___lmul@product+1,?___lmul+1
 12738  012A2C  C0EA  F0E2         	movff	___lmul@product+2,?___lmul+2
 12739  012A30  C0EB  F0E3         	movff	___lmul@product+3,?___lmul+3
 12740                           
 12741                           ; BSR set to: 0
 12742  012A34  0012               	return		;funcret
 12743  012A36                     __end_of___lmul:
 12744                           	opt stack 0
 12745                           tblptru	equ	0xFF8
 12746                           tblptrh	equ	0xFF7
 12747                           tblptrl	equ	0xFF6
 12748                           tablat	equ	0xFF5
 12749                           prodh	equ	0xFF4
 12750                           prodl	equ	0xFF3
 12751                           intcon	equ	0xFF2
 12752                           intcon2	equ	0xFF1
 12753                           indf0	equ	0xFEF
 12754                           postinc0	equ	0xFEE
 12755                           fsr0h	equ	0xFEA
 12756                           fsr0l	equ	0xFE9
 12757                           wreg	equ	0xFE8
 12758                           postdec1	equ	0xFE5
 12759                           fsr1l	equ	0xFE1
 12760                           indf2	equ	0xFDF
 12761                           postinc2	equ	0xFDE
 12762                           postdec2	equ	0xFDD
 12763                           plusw2	equ	0xFDB
 12764                           fsr2h	equ	0xFDA
 12765                           fsr2l	equ	0xFD9
 12766                           status	equ	0xFD8
 12767                           
 12768 ;; *************** function _RTCC_to_caltime *****************
 12769 ;; Defined at:
 12770 ;;		line 121 in file "../My_header\My_RTCC.h"
 12771 ;; Parameters:    Size  Location     Type
 12772 ;;  ct              2    1[BANK0 ] PTR struct .
 12773 ;;		 -> caltime_now(7), 
 12774 ;; Auto vars:     Size  Location     Type
 12775 ;;  dumy            1    3[BANK0 ] unsigned char 
 12776 ;; Return value:  Size  Location     Type
 12777 ;;		None               void
 12778 ;; Registers used:
 12779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12780 ;; Tracked objects:
 12781 ;;		On entry : 0/0
 12782 ;;		On exit  : 0/0
 12783 ;;		Unchanged: 0/0
 12784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12785 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12786 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12788 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12789 ;;Total ram usage:        3 bytes
 12790 ;; Hardware stack levels used:    1
 12791 ;; Hardware stack levels required when called:    5
 12792 ;; This function calls:
 12793 ;;		_x_to_d
 12794 ;; This function is called by:
 12795 ;;		_RTCC_from_RTCC
 12796 ;; This function uses a non-reentrant model
 12797 ;;
 12798                           
 12799                           	psect	text63
 12800  0122A2                     __ptext63:
 12801                           	opt stack 0
 12802  0122A2                     _RTCC_to_caltime:
 12803                           	opt stack 23
 12804  0122A2                     l397:
 12805  0122A2  010F               	movlb	15	; () banked
 12806  0122A4  B93F               	btfsc	63,4,b	;volatile
 12807  0122A6  D7FD               	goto	l397
 12808                           
 12809                           ; BSR set to: 15
 12810                           ;My_header\My_RTCC.h: 124: RTCCFGbits.RTCPTR0 = 1;
 12811  0122A8  010F               	movlb	15	; () banked
 12812  0122AA  813F               	bsf	63,0,b	;volatile
 12813                           
 12814                           ;My_header\My_RTCC.h: 125: RTCCFGbits.RTCPTR1 = 1;
 12815  0122AC  010F               	movlb	15	; () banked
 12816  0122AE  833F               	bsf	63,1,b	;volatile
 12817                           
 12818                           ; BSR set to: 15
 12819                           ;My_header\My_RTCC.h: 127: ct->YY = x_to_d(RTCVALL);
 12820  0122B0  0100               	movlb	0	; () banked
 12821  0122B2  EE20 F006          	lfsr	2,6
 12822  0122B6  51D4               	movf	RTCC_to_caltime@ct& (0+255),w,b
 12823  0122B8  26D9               	addwf	fsr2l,f,c
 12824  0122BA  51D5               	movf	(RTCC_to_caltime@ct+1)& (0+255),w,b
 12825  0122BC  22DA               	addwfc	fsr2h,f,c
 12826  0122BE  010F               	movlb	15	; () banked
 12827  0122C0  513A               	movf	58,w,b	;volatile
 12828  0122C2  EC58  F099         	call	_x_to_d
 12829  0122C6  6EDF               	movwf	indf2,c
 12830                           
 12831                           ;My_header\My_RTCC.h: 128: uint8_t dumy = RTCVALH;
 12832  0122C8  CF3B F0D6          	movff	3899,RTCC_to_caltime@dumy	;volatile
 12833                           
 12834                           ;My_header\My_RTCC.h: 129: ct->DD = x_to_d(RTCVALL);
 12835  0122CC  0100               	movlb	0	; () banked
 12836  0122CE  EE20 F004          	lfsr	2,4
 12837  0122D2  51D4               	movf	RTCC_to_caltime@ct& (0+255),w,b
 12838  0122D4  26D9               	addwf	fsr2l,f,c
 12839  0122D6  51D5               	movf	(RTCC_to_caltime@ct+1)& (0+255),w,b
 12840  0122D8  22DA               	addwfc	fsr2h,f,c
 12841  0122DA  010F               	movlb	15	; () banked
 12842  0122DC  513A               	movf	58,w,b	;volatile
 12843  0122DE  EC58  F099         	call	_x_to_d
 12844  0122E2  6EDF               	movwf	indf2,c
 12845                           
 12846                           ;My_header\My_RTCC.h: 130: ct->MM = x_to_d(RTCVALH);
 12847  0122E4  0100               	movlb	0	; () banked
 12848  0122E6  EE20 F005          	lfsr	2,5
 12849  0122EA  51D4               	movf	RTCC_to_caltime@ct& (0+255),w,b
 12850  0122EC  26D9               	addwf	fsr2l,f,c
 12851  0122EE  51D5               	movf	(RTCC_to_caltime@ct+1)& (0+255),w,b
 12852  0122F0  22DA               	addwfc	fsr2h,f,c
 12853  0122F2  010F               	movlb	15	; () banked
 12854  0122F4  513B               	movf	59,w,b	;volatile
 12855  0122F6  EC58  F099         	call	_x_to_d
 12856  0122FA  6EDF               	movwf	indf2,c
 12857                           
 12858                           ;My_header\My_RTCC.h: 131: ct->hh = x_to_d(RTCVALL);
 12859  0122FC  0100               	movlb	0	; () banked
 12860  0122FE  EE20 F002          	lfsr	2,2
 12861  012302  51D4               	movf	RTCC_to_caltime@ct& (0+255),w,b
 12862  012304  26D9               	addwf	fsr2l,f,c
 12863  012306  51D5               	movf	(RTCC_to_caltime@ct+1)& (0+255),w,b
 12864  012308  22DA               	addwfc	fsr2h,f,c
 12865  01230A  010F               	movlb	15	; () banked
 12866  01230C  513A               	movf	58,w,b	;volatile
 12867  01230E  EC58  F099         	call	_x_to_d
 12868  012312  6EDF               	movwf	indf2,c
 12869                           
 12870                           ;My_header\My_RTCC.h: 132: ct->EE = x_to_d(RTCVALH);
 12871  012314  0100               	movlb	0	; () banked
 12872  012316  EE20 F003          	lfsr	2,3
 12873  01231A  51D4               	movf	RTCC_to_caltime@ct& (0+255),w,b
 12874  01231C  26D9               	addwf	fsr2l,f,c
 12875  01231E  51D5               	movf	(RTCC_to_caltime@ct+1)& (0+255),w,b
 12876  012320  22DA               	addwfc	fsr2h,f,c
 12877  012322  010F               	movlb	15	; () banked
 12878  012324  513B               	movf	59,w,b	;volatile
 12879  012326  EC58  F099         	call	_x_to_d
 12880  01232A  6EDF               	movwf	indf2,c
 12881                           
 12882                           ;My_header\My_RTCC.h: 133: ct->ss = x_to_d(RTCVALL);
 12883  01232C  010F               	movlb	15	; () banked
 12884  01232E  513A               	movf	58,w,b	;volatile
 12885  012330  EC58  F099         	call	_x_to_d
 12886  012334  C0D4  FFD9         	movff	RTCC_to_caltime@ct,fsr2l
 12887  012338  C0D5  FFDA         	movff	RTCC_to_caltime@ct+1,fsr2h
 12888  01233C  6EDF               	movwf	indf2,c
 12889                           
 12890                           ;My_header\My_RTCC.h: 134: ct->mm = x_to_d(RTCVALH);
 12891  01233E  0100               	movlb	0	; () banked
 12892  012340  EE20 F001          	lfsr	2,1
 12893  012344  51D4               	movf	RTCC_to_caltime@ct& (0+255),w,b
 12894  012346  26D9               	addwf	fsr2l,f,c
 12895  012348  51D5               	movf	(RTCC_to_caltime@ct+1)& (0+255),w,b
 12896  01234A  22DA               	addwfc	fsr2h,f,c
 12897  01234C  010F               	movlb	15	; () banked
 12898  01234E  513B               	movf	59,w,b	;volatile
 12899  012350  EC58  F099         	call	_x_to_d
 12900  012354  6EDF               	movwf	indf2,c
 12901  012356  0012               	return		;funcret
 12902  012358                     __end_of_RTCC_to_caltime:
 12903                           	opt stack 0
 12904                           tblptru	equ	0xFF8
 12905                           tblptrh	equ	0xFF7
 12906                           tblptrl	equ	0xFF6
 12907                           tablat	equ	0xFF5
 12908                           prodh	equ	0xFF4
 12909                           prodl	equ	0xFF3
 12910                           intcon	equ	0xFF2
 12911                           intcon2	equ	0xFF1
 12912                           indf0	equ	0xFEF
 12913                           postinc0	equ	0xFEE
 12914                           fsr0h	equ	0xFEA
 12915                           fsr0l	equ	0xFE9
 12916                           wreg	equ	0xFE8
 12917                           postdec1	equ	0xFE5
 12918                           fsr1l	equ	0xFE1
 12919                           indf2	equ	0xFDF
 12920                           postinc2	equ	0xFDE
 12921                           postdec2	equ	0xFDD
 12922                           plusw2	equ	0xFDB
 12923                           fsr2h	equ	0xFDA
 12924                           fsr2l	equ	0xFD9
 12925                           status	equ	0xFD8
 12926                           
 12927 ;; *************** function _x_to_d *****************
 12928 ;; Defined at:
 12929 ;;		line 81 in file "../My_header\My_RTCC.h"
 12930 ;; Parameters:    Size  Location     Type
 12931 ;;  hex             1    wreg     unsigned char 
 12932 ;; Auto vars:     Size  Location     Type
 12933 ;;  hex             1    0[BANK0 ] unsigned char 
 12934 ;; Return value:  Size  Location     Type
 12935 ;;                  1    wreg      unsigned char 
 12936 ;; Registers used:
 12937 ;;		wreg, status,2, status,0, prodl, prodh
 12938 ;; Tracked objects:
 12939 ;;		On entry : 0/0
 12940 ;;		On exit  : 0/0
 12941 ;;		Unchanged: 0/0
 12942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12944 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12945 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12946 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12947 ;;Total ram usage:        2 bytes
 12948 ;; Hardware stack levels used:    1
 12949 ;; Hardware stack levels required when called:    4
 12950 ;; This function calls:
 12951 ;;		Nothing
 12952 ;; This function is called by:
 12953 ;;		_RTCC_to_caltime
 12954 ;; This function uses a non-reentrant model
 12955 ;;
 12956                           
 12957                           	psect	text64
 12958  0132B0                     __ptext64:
 12959                           	opt stack 0
 12960  0132B0                     _x_to_d:
 12961                           	opt stack 23
 12962                           
 12963                           ;incstack = 0
 12964                           ;x_to_d@hex stored from wreg
 12965  0132B0  0100               	movlb	0	; () banked
 12966  0132B2  6FD3               	movwf	x_to_d@hex& (0+255),b
 12967                           
 12968                           ;My_header\My_RTCC.h: 82: return 10 * (0x0F & (hex >> 4)) + (0x0F & hex);
 12969  0132B4  C0D3  F020         	movff	x_to_d@hex,??_x_to_d
 12970  0132B8  0E0F               	movlw	15
 12971  0132BA  1620               	andwf	??_x_to_d,f,c
 12972  0132BC  0100               	movlb	0	; () banked
 12973  0132BE  39D3               	swapf	x_to_d@hex& (0+255),w,b
 12974  0132C0  0B0F               	andlw	15
 12975  0132C2  0B0F               	andlw	15
 12976  0132C4  0D0A               	mullw	10
 12977  0132C6  50F3               	movf	prodl,w,c
 12978  0132C8  2420               	addwf	??_x_to_d,w,c
 12979  0132CA  0012               	return	
 12980  0132CC                     __end_of_x_to_d:
 12981                           	opt stack 0
 12982                           tblptru	equ	0xFF8
 12983                           tblptrh	equ	0xFF7
 12984                           tblptrl	equ	0xFF6
 12985                           tablat	equ	0xFF5
 12986                           prodh	equ	0xFF4
 12987                           prodl	equ	0xFF3
 12988                           intcon	equ	0xFF2
 12989                           intcon2	equ	0xFF1
 12990                           indf0	equ	0xFEF
 12991                           postinc0	equ	0xFEE
 12992                           fsr0h	equ	0xFEA
 12993                           fsr0l	equ	0xFE9
 12994                           wreg	equ	0xFE8
 12995                           postdec1	equ	0xFE5
 12996                           fsr1l	equ	0xFE1
 12997                           indf2	equ	0xFDF
 12998                           postinc2	equ	0xFDE
 12999                           postdec2	equ	0xFDD
 13000                           plusw2	equ	0xFDB
 13001                           fsr2h	equ	0xFDA
 13002                           fsr2l	equ	0xFD9
 13003                           status	equ	0xFD8
 13004                           
 13005 ;; *************** function _ISR *****************
 13006 ;; Defined at:
 13007 ;;		line 65 in file "main.c"
 13008 ;; Parameters:    Size  Location     Type
 13009 ;;		None
 13010 ;; Auto vars:     Size  Location     Type
 13011 ;;  ascii           1   30[COMRAM] unsigned char 
 13012 ;; Return value:  Size  Location     Type
 13013 ;;		None               void
 13014 ;; Registers used:
 13015 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13016 ;; Tracked objects:
 13017 ;;		On entry : 0/0
 13018 ;;		On exit  : 0/0
 13019 ;;		Unchanged: 0/0
 13020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13022 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13023 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13024 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13025 ;;Total ram usage:       15 bytes
 13026 ;; Hardware stack levels used:    1
 13027 ;; Hardware stack levels required when called:    3
 13028 ;; This function calls:
 13029 ;;		_UART_ISR
 13030 ;;		_charge_time_count
 13031 ;;		_delay_timer_interrupt
 13032 ;;		_integrating
 13033 ;;		_lchika
 13034 ;;		_tx_send
 13035 ;; This function is called by:
 13036 ;;		Interrupt level 2
 13037 ;; This function uses a non-reentrant model
 13038 ;;
 13039                           
 13040                           	psect	intcode
 13041  000008                     __pintcode:
 13042                           	opt stack 0
 13043  000008                     _ISR:
 13044                           	opt stack 20
 13045                           
 13046                           ; BSR set to: 0
 13047                           ;incstack = 0
 13048  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13049  00000A  CFFA F011          	movff	pclath,??_ISR
 13050  00000E  CFFB F012          	movff	pclatu,??_ISR+1
 13051  000012  CFE9 F013          	movff	fsr0l,??_ISR+2
 13052  000016  CFEA F014          	movff	fsr0h,??_ISR+3
 13053  00001A  CFE1 F015          	movff	fsr1l,??_ISR+4
 13054  00001E  CFE2 F016          	movff	fsr1h,??_ISR+5
 13055  000022  CFD9 F017          	movff	fsr2l,??_ISR+6
 13056  000026  CFDA F018          	movff	fsr2h,??_ISR+7
 13057  00002A  CFF3 F019          	movff	prodl,??_ISR+8
 13058  00002E  CFF4 F01A          	movff	prodh,??_ISR+9
 13059  000032  CFF6 F01B          	movff	tblptrl,??_ISR+10
 13060  000036  CFF7 F01C          	movff	tblptrh,??_ISR+11
 13061  00003A  CFF8 F01D          	movff	tblptru,??_ISR+12
 13062  00003E  CFF5 F01E          	movff	tablat,??_ISR+13
 13063                           
 13064                           ;main.c: 66: UART_ISR();
 13065  000042  EC0A  F097         	call	_UART_ISR	;wreg free
 13066                           
 13067                           ;main.c: 67: if (PIE1bits.RC1IE && PIR1bits.RC1IF) {
 13068  000046  BA9D               	btfsc	3997,5,c	;volatile
 13069  000048  AA9E               	btfss	3998,5,c	;volatile
 13070  00004A  D006               	goto	i2l7026
 13071                           
 13072                           ;main.c: 68: PIR1bits.RC1IF = 0;
 13073  00004C  9A9E               	bcf	3998,5,c	;volatile
 13074                           
 13075                           ;main.c: 69: uint8_t ascii = RCREG1;
 13076  00004E  CFAF F01F          	movff	4015,ISR@ascii	;volatile
 13077                           
 13078                           ;main.c: 70: tx_send(ascii);
 13079  000052  501F               	movf	ISR@ascii,w,c
 13080  000054  EC97  F099         	call	_tx_send
 13081  000058                     i2l7026:
 13082                           
 13083                           ;main.c: 71: }
 13084                           ;main.c: 72: if (INTCONbits.T0IE && INTCONbits.T0IF) {
 13085  000058  BAF2               	btfsc	intcon,5,c	;volatile
 13086  00005A  A4F2               	btfss	intcon,2,c	;volatile
 13087  00005C  D013               	goto	i2l7040
 13088                           
 13089                           ;main.c: 73: INTCONbits.T0IF = 0;
 13090  00005E  94F2               	bcf	intcon,2,c	;volatile
 13091                           
 13092                           ;main.c: 74: static uint16_t cnt_t0;
 13093                           ;main.c: 75: if (cnt_t0) {
 13094  000060  0100               	movlb	0	; () banked
 13095  000062  5193               	movf	ISR@cnt_t0& (0+255),w,b
 13096  000064  0100               	movlb	0	; () banked
 13097  000066  1194               	iorwf	(ISR@cnt_t0+1)& (0+255),w,b
 13098  000068  B4D8               	btfsc	status,2,c
 13099  00006A  D005               	goto	i2l7036
 13100                           
 13101                           ; BSR set to: 0
 13102                           ;main.c: 76: cnt_t0--;
 13103  00006C  0100               	movlb	0	; () banked
 13104  00006E  0793               	decf	ISR@cnt_t0& (0+255),f,b
 13105  000070  A0D8               	btfss	status,0,c
 13106  000072  0794               	decf	(ISR@cnt_t0+1)& (0+255),f,b
 13107                           
 13108                           ;main.c: 77: } else {
 13109  000074  D007               	goto	i2l7040
 13110  000076                     i2l7036:
 13111                           
 13112                           ; BSR set to: 0
 13113                           ;main.c: 78: cnt_t0 = 120;
 13114  000076  0E00               	movlw	0
 13115  000078  0100               	movlb	0	; () banked
 13116  00007A  6F94               	movwf	(ISR@cnt_t0+1)& (0+255),b
 13117  00007C  0E78               	movlw	120
 13118  00007E  6F93               	movwf	ISR@cnt_t0& (0+255),b
 13119                           
 13120                           ; BSR set to: 0
 13121                           ;main.c: 79: lchika();
 13122  000080  ECE7  F08C         	call	_lchika	;wreg free
 13123  000084                     i2l7040:
 13124                           
 13125                           ;main.c: 80: }
 13126                           ;main.c: 81: }
 13127                           ;main.c: 82: if (PIE1bits.TMR1IE && PIR1bits.TMR1IF) {
 13128  000084  B09D               	btfsc	3997,0,c	;volatile
 13129  000086  A09E               	btfss	3998,0,c	;volatile
 13130  000088  D01B               	goto	i2l7056
 13131                           
 13132                           ;main.c: 83: PIR1bits.TMR1IF = 0;
 13133  00008A  909E               	bcf	3998,0,c	;volatile
 13134                           
 13135                           ;main.c: 84: TMR1H = 0xC0;
 13136  00008C  0EC0               	movlw	192
 13137  00008E  6ECF               	movwf	4047,c	;volatile
 13138                           
 13139                           ;main.c: 85: cut_time_flag = 1;
 13140  000090  0E01               	movlw	1
 13141  000092  0100               	movlb	0	; () banked
 13142  000094  6FB3               	movwf	_cut_time_flag& (0+255),b
 13143                           
 13144                           ;main.c: 86: display_flag = 1;
 13145  000096  0E01               	movlw	1
 13146  000098  0100               	movlb	0	; () banked
 13147  00009A  6FB4               	movwf	_display_flag& (0+255),b
 13148                           
 13149                           ;main.c: 87: static uint8_t cnt_t1 = 2;
 13150                           ;main.c: 88: if (cnt_t1) {
 13151  00009C  0100               	movlb	0	; () banked
 13152  00009E  51FD               	movf	ISR@cnt_t1& (0+255),w,b
 13153  0000A0  B4D8               	btfsc	status,2,c
 13154  0000A2  D004               	goto	i2l7050
 13155                           
 13156                           ; BSR set to: 0
 13157                           ;main.c: 89: cnt_t1 = 0;
 13158  0000A4  0E00               	movlw	0
 13159  0000A6  0100               	movlb	0	; () banked
 13160  0000A8  6FFD               	movwf	ISR@cnt_t1& (0+255),b
 13161                           
 13162                           ;main.c: 90: } else {
 13163  0000AA  D00A               	goto	i2l7056
 13164  0000AC                     i2l7050:
 13165                           
 13166                           ; BSR set to: 0
 13167                           ;main.c: 91: cnt_t1 = 1;
 13168  0000AC  0E01               	movlw	1
 13169  0000AE  0100               	movlb	0	; () banked
 13170  0000B0  6FFD               	movwf	ISR@cnt_t1& (0+255),b
 13171                           
 13172                           ; BSR set to: 0
 13173                           ;main.c: 92: integrating();
 13174  0000B2  ECFF  F092         	call	_integrating	;wreg free
 13175                           
 13176                           ;main.c: 93: charge_time_count();
 13177  0000B6  EC77  F097         	call	_charge_time_count	;wreg free
 13178                           
 13179                           ;main.c: 94: display_flag = 1;
 13180  0000BA  0E01               	movlw	1
 13181  0000BC  0100               	movlb	0	; () banked
 13182  0000BE  6FB4               	movwf	_display_flag& (0+255),b
 13183  0000C0                     i2l7056:
 13184                           
 13185                           ;main.c: 95: }
 13186                           ;main.c: 96: }
 13187                           ;main.c: 97: if (PIE2bits.TMR3IE && PIR2bits.TMR3IF) {
 13188  0000C0  B2A0               	btfsc	4000,1,c	;volatile
 13189  0000C2  A2A1               	btfss	4001,1,c	;volatile
 13190  0000C4  D00A               	goto	i2l772
 13191                           
 13192                           ;main.c: 98: PIR2bits.TMR3IF = 0;
 13193  0000C6  92A1               	bcf	4001,1,c	;volatile
 13194                           
 13195                           ;main.c: 99: ctmu_flag = 1;
 13196  0000C8  0E01               	movlw	1
 13197  0000CA  0100               	movlb	0	; () banked
 13198  0000CC  6FB2               	movwf	_ctmu_flag& (0+255),b
 13199                           
 13200                           ; BSR set to: 0
 13201                           ;main.c: 100: delay_timer_interrupt(&delay_display);
 13202  0000CE  0ECE               	movlw	low _delay_display
 13203  0000D0  6E01               	movwf	delay_timer_interrupt@d,c
 13204  0000D2  0E00               	movlw	high _delay_display
 13205  0000D4  6E02               	movwf	delay_timer_interrupt@d+1,c
 13206  0000D6  EC53  F097         	call	_delay_timer_interrupt	;wreg free
 13207  0000DA                     i2l772:
 13208  0000DA  C01E  FFF5         	movff	??_ISR+13,tablat
 13209  0000DE  C01D  FFF8         	movff	??_ISR+12,tblptru
 13210  0000E2  C01C  FFF7         	movff	??_ISR+11,tblptrh
 13211  0000E6  C01B  FFF6         	movff	??_ISR+10,tblptrl
 13212  0000EA  C01A  FFF4         	movff	??_ISR+9,prodh
 13213  0000EE  C019  FFF3         	movff	??_ISR+8,prodl
 13214  0000F2  C018  FFDA         	movff	??_ISR+7,fsr2h
 13215  0000F6  C017  FFD9         	movff	??_ISR+6,fsr2l
 13216  0000FA  C016  FFE2         	movff	??_ISR+5,fsr1h
 13217  0000FE  C015  FFE1         	movff	??_ISR+4,fsr1l
 13218  000102  C014  FFEA         	movff	??_ISR+3,fsr0h
 13219  000106  C013  FFE9         	movff	??_ISR+2,fsr0l
 13220  00010A  C012  FFFB         	movff	??_ISR+1,pclatu
 13221  00010E  C011  FFFA         	movff	??_ISR,pclath
 13222  000112  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13223  000114  0011               	retfie		f
 13224  000116                     __end_of_ISR:
 13225                           	opt stack 0
 13226                           pclatu	equ	0xFFB
 13227                           pclath	equ	0xFFA
 13228                           tblptru	equ	0xFF8
 13229                           tblptrh	equ	0xFF7
 13230                           tblptrl	equ	0xFF6
 13231                           tablat	equ	0xFF5
 13232                           prodh	equ	0xFF4
 13233                           prodl	equ	0xFF3
 13234                           intcon	equ	0xFF2
 13235                           intcon2	equ	0xFF1
 13236                           indf0	equ	0xFEF
 13237                           postinc0	equ	0xFEE
 13238                           fsr0h	equ	0xFEA
 13239                           fsr0l	equ	0xFE9
 13240                           wreg	equ	0xFE8
 13241                           postdec1	equ	0xFE5
 13242                           fsr1h	equ	0xFE2
 13243                           fsr1l	equ	0xFE1
 13244                           indf2	equ	0xFDF
 13245                           postinc2	equ	0xFDE
 13246                           postdec2	equ	0xFDD
 13247                           plusw2	equ	0xFDB
 13248                           fsr2h	equ	0xFDA
 13249                           fsr2l	equ	0xFD9
 13250                           status	equ	0xFD8
 13251                           
 13252 ;; *************** function _tx_send *****************
 13253 ;; Defined at:
 13254 ;;		line 222 in file "../My_header\My_header.h"
 13255 ;; Parameters:    Size  Location     Type
 13256 ;;  asciicode       1    wreg     const unsigned char 
 13257 ;; Auto vars:     Size  Location     Type
 13258 ;;  asciicode       1   15[COMRAM] const unsigned char 
 13259 ;; Return value:  Size  Location     Type
 13260 ;;		None               void
 13261 ;; Registers used:
 13262 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13263 ;; Tracked objects:
 13264 ;;		On entry : 0/0
 13265 ;;		On exit  : 0/0
 13266 ;;		Unchanged: 0/0
 13267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13269 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13271 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13272 ;;Total ram usage:        1 bytes
 13273 ;; Hardware stack levels used:    1
 13274 ;; Hardware stack levels required when called:    2
 13275 ;; This function calls:
 13276 ;;		_ringbuf_put
 13277 ;; This function is called by:
 13278 ;;		_ISR
 13279 ;;		_tx_sendn
 13280 ;; This function uses a non-reentrant model
 13281 ;;
 13282                           
 13283                           	psect	text66
 13284  01332E                     __ptext66:
 13285                           	opt stack 0
 13286  01332E                     _tx_send:
 13287                           	opt stack 20
 13288                           
 13289                           ;incstack = 0
 13290                           ;tx_send@asciicode stored from wreg
 13291  01332E  6E10               	movwf	tx_send@asciicode,c
 13292                           
 13293                           ;My_header\My_header.h: 223: ringbuf_put(&tx_buf, asciicode);
 13294  013330  0EE8               	movlw	low _tx_buf
 13295  013332  6E09               	movwf	ringbuf_put@rb,c
 13296  013334  0E01               	movlw	high _tx_buf
 13297  013336  6E0A               	movwf	ringbuf_put@rb+1,c
 13298  013338  C010  F00B         	movff	tx_send@asciicode,ringbuf_put@asciicode
 13299  01333C  ECAC  F091         	call	_ringbuf_put	;wreg free
 13300                           
 13301                           ;My_header\My_header.h: 224: PIE1bits.TXIE = 1;
 13302  013340  889D               	bsf	3997,4,c	;volatile
 13303  013342  0012               	return		;funcret
 13304  013344                     __end_of_tx_send:
 13305                           	opt stack 0
 13306                           pclatu	equ	0xFFB
 13307                           pclath	equ	0xFFA
 13308                           tblptru	equ	0xFF8
 13309                           tblptrh	equ	0xFF7
 13310                           tblptrl	equ	0xFF6
 13311                           tablat	equ	0xFF5
 13312                           prodh	equ	0xFF4
 13313                           prodl	equ	0xFF3
 13314                           intcon	equ	0xFF2
 13315                           intcon2	equ	0xFF1
 13316                           indf0	equ	0xFEF
 13317                           postinc0	equ	0xFEE
 13318                           fsr0h	equ	0xFEA
 13319                           fsr0l	equ	0xFE9
 13320                           wreg	equ	0xFE8
 13321                           postdec1	equ	0xFE5
 13322                           fsr1h	equ	0xFE2
 13323                           fsr1l	equ	0xFE1
 13324                           indf2	equ	0xFDF
 13325                           postinc2	equ	0xFDE
 13326                           postdec2	equ	0xFDD
 13327                           plusw2	equ	0xFDB
 13328                           fsr2h	equ	0xFDA
 13329                           fsr2l	equ	0xFD9
 13330                           status	equ	0xFD8
 13331                           
 13332 ;; *************** function _lchika *****************
 13333 ;; Defined at:
 13334 ;;		line 117 in file "tasks.h"
 13335 ;; Parameters:    Size  Location     Type
 13336 ;;		None
 13337 ;; Auto vars:     Size  Location     Type
 13338 ;;  i               1   11[COMRAM] unsigned char 
 13339 ;; Return value:  Size  Location     Type
 13340 ;;		None               void
 13341 ;; Registers used:
 13342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13343 ;; Tracked objects:
 13344 ;;		On entry : 0/0
 13345 ;;		On exit  : 0/0
 13346 ;;		Unchanged: 0/0
 13347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13349 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13350 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13351 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13352 ;;Total ram usage:        4 bytes
 13353 ;; Hardware stack levels used:    1
 13354 ;; Hardware stack levels required when called:    1
 13355 ;; This function calls:
 13356 ;;		i2_LED
 13357 ;;		i2___awdiv
 13358 ;;		i2___lwdiv
 13359 ;; This function is called by:
 13360 ;;		_ISR
 13361 ;; This function uses a non-reentrant model
 13362 ;;
 13363                           
 13364                           	psect	text67
 13365  0119CE                     __ptext67:
 13366                           	opt stack 0
 13367  0119CE                     _lchika:
 13368                           	opt stack 21
 13369                           
 13370                           ;tasks.h: 118: uint8_t i;
 13371                           ;tasks.h: 119: static uint8_t cnt[3];
 13372                           ;tasks.h: 120: static uint8_t cntf[3];
 13373                           ;tasks.h: 121: for (i = 0; i < 3; i++) {
 13374                           
 13375                           ;incstack = 0
 13376  0119CE  0E00               	movlw	0
 13377  0119D0  6E0C               	movwf	lchika@i,c
 13378  0119D2                     i2l6304:
 13379  0119D2  0E02               	movlw	2
 13380  0119D4  640C               	cpfsgt	lchika@i,c
 13381  0119D6  D001               	goto	i2l6308
 13382  0119D8  0012               	return	
 13383  0119DA                     i2l6308:
 13384                           
 13385                           ;tasks.h: 122: cnt[i]++;
 13386  0119DA  500C               	movf	lchika@i,w,c
 13387  0119DC  0D01               	mullw	1
 13388  0119DE  0E8D               	movlw	low lchika@cnt
 13389  0119E0  24F3               	addwf	prodl,w,c
 13390  0119E2  6ED9               	movwf	fsr2l,c
 13391  0119E4  0E00               	movlw	high lchika@cnt
 13392  0119E6  20F4               	addwfc	prodh,w,c
 13393  0119E8  6EDA               	movwf	fsr2h,c
 13394  0119EA  2ADF               	incf	indf2,f,c
 13395                           
 13396                           ;tasks.h: 123: if (cnt[i] % 2 == 1) {
 13397  0119EC  500C               	movf	lchika@i,w,c
 13398  0119EE  0D01               	mullw	1
 13399  0119F0  0E8D               	movlw	low lchika@cnt
 13400  0119F2  24F3               	addwf	prodl,w,c
 13401  0119F4  6ED9               	movwf	fsr2l,c
 13402  0119F6  0E00               	movlw	high lchika@cnt
 13403  0119F8  20F4               	addwfc	prodh,w,c
 13404  0119FA  6EDA               	movwf	fsr2h,c
 13405  0119FC  0100               	movlb	0	; () banked
 13406  0119FE  A0DF               	btfss	indf2,0,c
 13407  011A00  D006               	goto	i2l6312
 13408                           
 13409                           ; BSR set to: 0
 13410                           ;tasks.h: 124: LED(i, 0);
 13411  011A02  0E00               	movlw	0
 13412  011A04  6E01               	movwf	i2LED@value,c
 13413  011A06  500C               	movf	lchika@i,w,c
 13414  011A08  ECBC  F097         	call	i2_LED
 13415                           
 13416                           ;tasks.h: 125: } else {
 13417  011A0C  D05E               	goto	i2l6326
 13418  011A0E                     i2l6312:
 13419                           
 13420                           ;tasks.h: 126: if (cnt[i] / 2 <= I[i] / 100) {
 13421  011A0E  500C               	movf	lchika@i,w,c
 13422  011A10  0D02               	mullw	2
 13423  011A12  0E69               	movlw	low _I
 13424  011A14  24F3               	addwf	prodl,w,c
 13425  011A16  6ED9               	movwf	fsr2l,c
 13426  011A18  0E00               	movlw	high _I
 13427  011A1A  20F4               	addwfc	prodh,w,c
 13428  011A1C  6EDA               	movwf	fsr2h,c
 13429  011A1E  CFDE F001          	movff	postinc2,i2___lwdiv@dividend
 13430  011A22  CFDD F002          	movff	postdec2,i2___lwdiv@dividend+1
 13431  011A26  0E00               	movlw	0
 13432  011A28  6E04               	movwf	i2___lwdiv@divisor+1,c
 13433  011A2A  0E64               	movlw	100
 13434  011A2C  6E03               	movwf	i2___lwdiv@divisor,c
 13435  011A2E  EC92  F096         	call	i2___lwdiv	;wreg free
 13436  011A32  C001  F009         	movff	?i2___lwdiv,??_lchika
 13437  011A36  C002  F00A         	movff	?i2___lwdiv+1,??_lchika+1
 13438  011A3A  500C               	movf	lchika@i,w,c
 13439  011A3C  0D01               	mullw	1
 13440  011A3E  0E8D               	movlw	low lchika@cnt
 13441  011A40  24F3               	addwf	prodl,w,c
 13442  011A42  6ED9               	movwf	fsr2l,c
 13443  011A44  0E00               	movlw	high lchika@cnt
 13444  011A46  20F4               	addwfc	prodh,w,c
 13445  011A48  6EDA               	movwf	fsr2h,c
 13446  011A4A  50DF               	movf	indf2,w,c
 13447  011A4C  6E0B               	movwf	(??_lchika+2)& (0+255),c
 13448  011A4E  500B               	movf	??_lchika+2,w,c
 13449  011A50  6E01               	movwf	i2___awdiv@dividend,c
 13450  011A52  6A02               	clrf	i2___awdiv@dividend+1,c
 13451  011A54  0E00               	movlw	0
 13452  011A56  6E04               	movwf	i2___awdiv@divisor+1,c
 13453  011A58  0E02               	movlw	2
 13454  011A5A  6E03               	movwf	i2___awdiv@divisor,c
 13455  011A5C  EC21  F094         	call	i2___awdiv	;wreg free
 13456  011A60  5001               	movf	?i2___awdiv,w,c
 13457  011A62  5C09               	subwf	??_lchika,w,c
 13458  011A64  5002               	movf	?i2___awdiv+1,w,c
 13459  011A66  580A               	subwfb	??_lchika+1,w,c
 13460  011A68  A0D8               	btfss	status,0,c
 13461  011A6A  D00C               	goto	i2l6318
 13462                           
 13463                           ;tasks.h: 127: LED(i, 1);
 13464  011A6C  0E01               	movlw	1
 13465  011A6E  6E01               	movwf	i2LED@value,c
 13466  011A70  500C               	movf	lchika@i,w,c
 13467  011A72  ECBC  F097         	call	i2_LED
 13468                           
 13469                           ;tasks.h: 128: cntf[i] = 0;
 13470  011A76  500C               	movf	lchika@i,w,c
 13471  011A78  0D01               	mullw	1
 13472  011A7A  0E90               	movlw	low lchika@cntf
 13473  011A7C  24F3               	addwf	prodl,w,c
 13474  011A7E  6ED9               	movwf	fsr2l,c
 13475  011A80  0E00               	movlw	high lchika@cntf
 13476  011A82  D01F               	goto	L5
 13477  011A84                     i2l6318:
 13478                           
 13479                           ;tasks.h: 130: cntf[i]++;
 13480  011A84  500C               	movf	lchika@i,w,c
 13481  011A86  0D01               	mullw	1
 13482  011A88  0E90               	movlw	low lchika@cntf
 13483  011A8A  24F3               	addwf	prodl,w,c
 13484  011A8C  6ED9               	movwf	fsr2l,c
 13485  011A8E  0E00               	movlw	high lchika@cntf
 13486  011A90  20F4               	addwfc	prodh,w,c
 13487  011A92  6EDA               	movwf	fsr2h,c
 13488  011A94  2ADF               	incf	indf2,f,c
 13489                           
 13490                           ;tasks.h: 131: LED(i, 0);
 13491  011A96  0E00               	movlw	0
 13492  011A98  6E01               	movwf	i2LED@value,c
 13493  011A9A  500C               	movf	lchika@i,w,c
 13494  011A9C  ECBC  F097         	call	i2_LED
 13495                           
 13496                           ;tasks.h: 132: if (cntf[i] >= 2) {
 13497  011AA0  500C               	movf	lchika@i,w,c
 13498  011AA2  0D01               	mullw	1
 13499  011AA4  0E90               	movlw	low lchika@cntf
 13500  011AA6  24F3               	addwf	prodl,w,c
 13501  011AA8  6ED9               	movwf	fsr2l,c
 13502  011AAA  0E00               	movlw	high lchika@cntf
 13503  011AAC  20F4               	addwfc	prodh,w,c
 13504  011AAE  6EDA               	movwf	fsr2h,c
 13505  011AB0  0E01               	movlw	1
 13506  011AB2  64DF               	cpfsgt	indf2,c
 13507  011AB4  D00A               	goto	i2l6326
 13508                           
 13509                           ;tasks.h: 133: cnt[i] = 0;
 13510  011AB6  500C               	movf	lchika@i,w,c
 13511  011AB8  0D01               	mullw	1
 13512  011ABA  0E8D               	movlw	low lchika@cnt
 13513  011ABC  24F3               	addwf	prodl,w,c
 13514  011ABE  6ED9               	movwf	fsr2l,c
 13515  011AC0  0E00               	movlw	high lchika@cnt
 13516  011AC2                     L5:
 13517  011AC2  20F4               	addwfc	prodh,w,c
 13518  011AC4  6EDA               	movwf	fsr2h,c
 13519  011AC6  0E00               	movlw	0
 13520  011AC8  6EDF               	movwf	indf2,c
 13521  011ACA                     i2l6326:
 13522  011ACA  2A0C               	incf	lchika@i,f,c
 13523  011ACC  D782               	goto	i2l6304
 13524  011ACE                     __end_of_lchika:
 13525                           	opt stack 0
 13526                           pclatu	equ	0xFFB
 13527                           pclath	equ	0xFFA
 13528                           tblptru	equ	0xFF8
 13529                           tblptrh	equ	0xFF7
 13530                           tblptrl	equ	0xFF6
 13531                           tablat	equ	0xFF5
 13532                           prodh	equ	0xFF4
 13533                           prodl	equ	0xFF3
 13534                           intcon	equ	0xFF2
 13535                           intcon2	equ	0xFF1
 13536                           indf0	equ	0xFEF
 13537                           postinc0	equ	0xFEE
 13538                           fsr0h	equ	0xFEA
 13539                           fsr0l	equ	0xFE9
 13540                           wreg	equ	0xFE8
 13541                           postdec1	equ	0xFE5
 13542                           fsr1h	equ	0xFE2
 13543                           fsr1l	equ	0xFE1
 13544                           indf2	equ	0xFDF
 13545                           postinc2	equ	0xFDE
 13546                           postdec2	equ	0xFDD
 13547                           plusw2	equ	0xFDB
 13548                           fsr2h	equ	0xFDA
 13549                           fsr2l	equ	0xFD9
 13550                           status	equ	0xFD8
 13551                           
 13552 ;; *************** function i2___lwdiv *****************
 13553 ;; Defined at:
 13554 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
 13555 ;; Parameters:    Size  Location     Type
 13556 ;;  dividend        2    0[COMRAM] unsigned int 
 13557 ;;  divisor         2    2[COMRAM] unsigned int 
 13558 ;; Auto vars:     Size  Location     Type
 13559 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 13560 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 13561 ;; Return value:  Size  Location     Type
 13562 ;;                  2    0[COMRAM] unsigned int 
 13563 ;; Registers used:
 13564 ;;		wreg, status,2, status,0
 13565 ;; Tracked objects:
 13566 ;;		On entry : 0/0
 13567 ;;		On exit  : 0/0
 13568 ;;		Unchanged: 0/0
 13569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13570 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13571 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13573 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13574 ;;Total ram usage:        7 bytes
 13575 ;; Hardware stack levels used:    1
 13576 ;; This function calls:
 13577 ;;		Nothing
 13578 ;; This function is called by:
 13579 ;;		_lchika
 13580 ;; This function uses a non-reentrant model
 13581 ;;
 13582                           
 13583                           	psect	text68
 13584  012D24                     __ptext68:
 13585                           	opt stack 0
 13586  012D24                     i2___lwdiv:
 13587                           	opt stack 21
 13588                           
 13589                           ;incstack = 0
 13590  012D24  0E00               	movlw	0
 13591  012D26  6E06               	movwf	i2___lwdiv@quotient+1,c
 13592  012D28  0E00               	movlw	0
 13593  012D2A  6E05               	movwf	i2___lwdiv@quotient,c
 13594  012D2C  5003               	movf	i2___lwdiv@divisor,w,c
 13595  012D2E  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 13596  012D30  B4D8               	btfsc	status,2,c
 13597  012D32  D01C               	goto	i2l1767
 13598  012D34  0E01               	movlw	1
 13599  012D36  6E07               	movwf	i2___lwdiv@counter,c
 13600  012D38  D004               	goto	i2l6250
 13601  012D3A                     i2l6248:
 13602  012D3A  90D8               	bcf	status,0,c
 13603  012D3C  3603               	rlcf	i2___lwdiv@divisor,f,c
 13604  012D3E  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 13605  012D40  2A07               	incf	i2___lwdiv@counter,f,c
 13606  012D42                     i2l6250:
 13607  012D42  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 13608  012D44  D7FA               	goto	i2l6248
 13609  012D46                     i2l6252:
 13610  012D46  90D8               	bcf	status,0,c
 13611  012D48  3605               	rlcf	i2___lwdiv@quotient,f,c
 13612  012D4A  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 13613  012D4C  5003               	movf	i2___lwdiv@divisor,w,c
 13614  012D4E  5C01               	subwf	i2___lwdiv@dividend,w,c
 13615  012D50  5004               	movf	i2___lwdiv@divisor+1,w,c
 13616  012D52  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 13617  012D54  A0D8               	btfss	status,0,c
 13618  012D56  D005               	goto	i2l6260
 13619  012D58  5003               	movf	i2___lwdiv@divisor,w,c
 13620  012D5A  5E01               	subwf	i2___lwdiv@dividend,f,c
 13621  012D5C  5004               	movf	i2___lwdiv@divisor+1,w,c
 13622  012D5E  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 13623  012D60  8005               	bsf	i2___lwdiv@quotient,0,c
 13624  012D62                     i2l6260:
 13625  012D62  90D8               	bcf	status,0,c
 13626  012D64  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 13627  012D66  3203               	rrcf	i2___lwdiv@divisor,f,c
 13628  012D68  2E07               	decfsz	i2___lwdiv@counter,f,c
 13629  012D6A  D7ED               	goto	i2l6252
 13630  012D6C                     i2l1767:
 13631  012D6C  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 13632  012D70  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 13633  012D74  0012               	return		;funcret
 13634  012D76                     __end_ofi2___lwdiv:
 13635                           	opt stack 0
 13636                           pclatu	equ	0xFFB
 13637                           pclath	equ	0xFFA
 13638                           tblptru	equ	0xFF8
 13639                           tblptrh	equ	0xFF7
 13640                           tblptrl	equ	0xFF6
 13641                           tablat	equ	0xFF5
 13642                           prodh	equ	0xFF4
 13643                           prodl	equ	0xFF3
 13644                           intcon	equ	0xFF2
 13645                           intcon2	equ	0xFF1
 13646                           indf0	equ	0xFEF
 13647                           postinc0	equ	0xFEE
 13648                           fsr0h	equ	0xFEA
 13649                           fsr0l	equ	0xFE9
 13650                           wreg	equ	0xFE8
 13651                           postdec1	equ	0xFE5
 13652                           fsr1h	equ	0xFE2
 13653                           fsr1l	equ	0xFE1
 13654                           indf2	equ	0xFDF
 13655                           postinc2	equ	0xFDE
 13656                           postdec2	equ	0xFDD
 13657                           plusw2	equ	0xFDB
 13658                           fsr2h	equ	0xFDA
 13659                           fsr2l	equ	0xFD9
 13660                           status	equ	0xFD8
 13661                           
 13662 ;; *************** function i2___awdiv *****************
 13663 ;; Defined at:
 13664 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
 13665 ;; Parameters:    Size  Location     Type
 13666 ;;  dividend        2    0[COMRAM] int 
 13667 ;;  divisor         2    2[COMRAM] int 
 13668 ;; Auto vars:     Size  Location     Type
 13669 ;;  __awdiv         2    6[COMRAM] int 
 13670 ;;  __awdiv         1    5[COMRAM] unsigned char 
 13671 ;;  __awdiv         1    4[COMRAM] unsigned char 
 13672 ;; Return value:  Size  Location     Type
 13673 ;;                  2    0[COMRAM] int 
 13674 ;; Registers used:
 13675 ;;		wreg, status,2, status,0
 13676 ;; Tracked objects:
 13677 ;;		On entry : 0/0
 13678 ;;		On exit  : 0/0
 13679 ;;		Unchanged: 0/0
 13680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13681 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13682 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13684 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13685 ;;Total ram usage:        8 bytes
 13686 ;; Hardware stack levels used:    1
 13687 ;; This function calls:
 13688 ;;		Nothing
 13689 ;; This function is called by:
 13690 ;;		_lchika
 13691 ;; This function uses a non-reentrant model
 13692 ;;
 13693                           
 13694                           	psect	text69
 13695  012842                     __ptext69:
 13696                           	opt stack 0
 13697  012842                     i2___awdiv:
 13698                           	opt stack 21
 13699                           
 13700                           ;incstack = 0
 13701  012842  0E00               	movlw	0
 13702  012844  6E06               	movwf	i2___awdiv@sign,c
 13703  012846  AE04               	btfss	i2___awdiv@divisor+1,7,c
 13704  012848  D006               	goto	i2l6184
 13705  01284A  6C03               	negf	i2___awdiv@divisor,c
 13706  01284C  1E04               	comf	i2___awdiv@divisor+1,f,c
 13707  01284E  B0D8               	btfsc	status,0,c
 13708  012850  2A04               	incf	i2___awdiv@divisor+1,f,c
 13709  012852  0E01               	movlw	1
 13710  012854  6E06               	movwf	i2___awdiv@sign,c
 13711  012856                     i2l6184:
 13712  012856  AE02               	btfss	i2___awdiv@dividend+1,7,c
 13713  012858  D006               	goto	i2l6190
 13714  01285A  6C01               	negf	i2___awdiv@dividend,c
 13715  01285C  1E02               	comf	i2___awdiv@dividend+1,f,c
 13716  01285E  B0D8               	btfsc	status,0,c
 13717  012860  2A02               	incf	i2___awdiv@dividend+1,f,c
 13718  012862  0E01               	movlw	1
 13719  012864  1A06               	xorwf	i2___awdiv@sign,f,c
 13720  012866                     i2l6190:
 13721  012866  0E00               	movlw	0
 13722  012868  6E08               	movwf	i2___awdiv@quotient+1,c
 13723  01286A  0E00               	movlw	0
 13724  01286C  6E07               	movwf	i2___awdiv@quotient,c
 13725  01286E  5003               	movf	i2___awdiv@divisor,w,c
 13726  012870  1004               	iorwf	i2___awdiv@divisor+1,w,c
 13727  012872  B4D8               	btfsc	status,2,c
 13728  012874  D01C               	goto	i2l6212
 13729  012876  0E01               	movlw	1
 13730  012878  6E05               	movwf	i2___awdiv@counter,c
 13731  01287A  D004               	goto	i2l6198
 13732  01287C                     i2l6196:
 13733  01287C  90D8               	bcf	status,0,c
 13734  01287E  3603               	rlcf	i2___awdiv@divisor,f,c
 13735  012880  3604               	rlcf	i2___awdiv@divisor+1,f,c
 13736  012882  2A05               	incf	i2___awdiv@counter,f,c
 13737  012884                     i2l6198:
 13738  012884  AE04               	btfss	i2___awdiv@divisor+1,7,c
 13739  012886  D7FA               	goto	i2l6196
 13740  012888                     i2l6200:
 13741  012888  90D8               	bcf	status,0,c
 13742  01288A  3607               	rlcf	i2___awdiv@quotient,f,c
 13743  01288C  3608               	rlcf	i2___awdiv@quotient+1,f,c
 13744  01288E  5003               	movf	i2___awdiv@divisor,w,c
 13745  012890  5C01               	subwf	i2___awdiv@dividend,w,c
 13746  012892  5004               	movf	i2___awdiv@divisor+1,w,c
 13747  012894  5802               	subwfb	i2___awdiv@dividend+1,w,c
 13748  012896  A0D8               	btfss	status,0,c
 13749  012898  D005               	goto	i2l6208
 13750  01289A  5003               	movf	i2___awdiv@divisor,w,c
 13751  01289C  5E01               	subwf	i2___awdiv@dividend,f,c
 13752  01289E  5004               	movf	i2___awdiv@divisor+1,w,c
 13753  0128A0  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 13754  0128A2  8007               	bsf	i2___awdiv@quotient,0,c
 13755  0128A4                     i2l6208:
 13756  0128A4  90D8               	bcf	status,0,c
 13757  0128A6  3204               	rrcf	i2___awdiv@divisor+1,f,c
 13758  0128A8  3203               	rrcf	i2___awdiv@divisor,f,c
 13759  0128AA  2E05               	decfsz	i2___awdiv@counter,f,c
 13760  0128AC  D7ED               	goto	i2l6200
 13761  0128AE                     i2l6212:
 13762  0128AE  5006               	movf	i2___awdiv@sign,w,c
 13763  0128B0  B4D8               	btfsc	status,2,c
 13764  0128B2  D004               	goto	i2l6216
 13765  0128B4  6C07               	negf	i2___awdiv@quotient,c
 13766  0128B6  1E08               	comf	i2___awdiv@quotient+1,f,c
 13767  0128B8  B0D8               	btfsc	status,0,c
 13768  0128BA  2A08               	incf	i2___awdiv@quotient+1,f,c
 13769  0128BC                     i2l6216:
 13770  0128BC  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 13771  0128C0  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 13772  0128C4  0012               	return	
 13773  0128C6                     __end_ofi2___awdiv:
 13774                           	opt stack 0
 13775                           pclatu	equ	0xFFB
 13776                           pclath	equ	0xFFA
 13777                           tblptru	equ	0xFF8
 13778                           tblptrh	equ	0xFF7
 13779                           tblptrl	equ	0xFF6
 13780                           tablat	equ	0xFF5
 13781                           prodh	equ	0xFF4
 13782                           prodl	equ	0xFF3
 13783                           intcon	equ	0xFF2
 13784                           intcon2	equ	0xFF1
 13785                           indf0	equ	0xFEF
 13786                           postinc0	equ	0xFEE
 13787                           fsr0h	equ	0xFEA
 13788                           fsr0l	equ	0xFE9
 13789                           wreg	equ	0xFE8
 13790                           postdec1	equ	0xFE5
 13791                           fsr1h	equ	0xFE2
 13792                           fsr1l	equ	0xFE1
 13793                           indf2	equ	0xFDF
 13794                           postinc2	equ	0xFDE
 13795                           postdec2	equ	0xFDD
 13796                           plusw2	equ	0xFDB
 13797                           fsr2h	equ	0xFDA
 13798                           fsr2l	equ	0xFD9
 13799                           status	equ	0xFD8
 13800                           
 13801 ;; *************** function i2_LED *****************
 13802 ;; Defined at:
 13803 ;;		line 76 in file "tasks.h"
 13804 ;; Parameters:    Size  Location     Type
 13805 ;;  b               1    wreg     unsigned char 
 13806 ;;  value           1    0[COMRAM] unsigned char 
 13807 ;; Auto vars:     Size  Location     Type
 13808 ;;  b               1    1[COMRAM] unsigned char 
 13809 ;; Return value:  Size  Location     Type
 13810 ;;		None               void
 13811 ;; Registers used:
 13812 ;;		wreg, status,2, status,0
 13813 ;; Tracked objects:
 13814 ;;		On entry : 0/0
 13815 ;;		On exit  : 0/0
 13816 ;;		Unchanged: 0/0
 13817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13818 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13819 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13821 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13822 ;;Total ram usage:        2 bytes
 13823 ;; Hardware stack levels used:    1
 13824 ;; This function calls:
 13825 ;;		Nothing
 13826 ;; This function is called by:
 13827 ;;		_lchika
 13828 ;; This function uses a non-reentrant model
 13829 ;;
 13830                           
 13831                           	psect	text70
 13832  012F78                     __ptext70:
 13833                           	opt stack 0
 13834  012F78                     i2_LED:
 13835                           	opt stack 21
 13836                           
 13837                           ;incstack = 0
 13838                           ;i2LED@b stored from wreg
 13839  012F78  6E02               	movwf	i2LED@b,c
 13840                           
 13841                           ;tasks.h: 77: switch (b) {
 13842  012F7A  D012               	goto	i2l6174
 13843  012F7C                     i2l621:
 13844                           
 13845                           ;tasks.h: 79: LATB7 = value;
 13846  012F7C  A001               	btfss	i2LED@value,0,c
 13847  012F7E  D002               	goto	i2u582_40
 13848  012F80  8E8A               	bsf	3978,7,c	;volatile
 13849  012F82  0012               	return	
 13850  012F84                     i2u582_40:
 13851  012F84  9E8A               	bcf	3978,7,c	;volatile
 13852                           
 13853                           ;tasks.h: 80: break;
 13854  012F86  0012               	return	
 13855  012F88                     i2l623:
 13856                           
 13857                           ;tasks.h: 82: LATB6 = value;
 13858  012F88  A001               	btfss	i2LED@value,0,c
 13859  012F8A  D002               	goto	i2u584_40
 13860  012F8C  8C8A               	bsf	3978,6,c	;volatile
 13861  012F8E  0012               	return	
 13862  012F90                     i2u584_40:
 13863  012F90  9C8A               	bcf	3978,6,c	;volatile
 13864                           
 13865                           ;tasks.h: 83: break;
 13866  012F92  0012               	return	
 13867  012F94                     i2l624:
 13868                           
 13869                           ;tasks.h: 85: LATC2 = value;
 13870  012F94  A001               	btfss	i2LED@value,0,c
 13871  012F96  D002               	goto	i2u586_40
 13872  012F98  848B               	bsf	3979,2,c	;volatile
 13873  012F9A  0012               	return	
 13874  012F9C                     i2u586_40:
 13875  012F9C  948B               	bcf	3979,2,c	;volatile
 13876                           
 13877                           ;tasks.h: 87: }
 13878                           
 13879                           ;tasks.h: 86: break;
 13880  012F9E  0012               	return	
 13881  012FA0                     i2l6174:
 13882  012FA0  5002               	movf	i2LED@b,w,c
 13883                           
 13884                           ; Switch size 1, requested type "space"
 13885                           ; Number of cases is 3, Range of values is 0 to 2
 13886                           ; switch strategies available:
 13887                           ; Name         Instructions Cycles
 13888                           ; simple_byte           10     6 (average)
 13889                           ;	Chosen strategy is simple_byte
 13890  012FA2  0A00               	xorlw	0	; case 0
 13891  012FA4  B4D8               	btfsc	status,2,c
 13892  012FA6  D7EA               	goto	i2l621
 13893  012FA8  0A01               	xorlw	1	; case 1
 13894  012FAA  B4D8               	btfsc	status,2,c
 13895  012FAC  D7ED               	goto	i2l623
 13896  012FAE  0A03               	xorlw	3	; case 2
 13897  012FB0  A4D8               	btfss	status,2,c
 13898  012FB2  0012               	return	
 13899  012FB4  D7EF               	goto	i2l624
 13900  012FB6                     __end_ofi2_LED:
 13901                           	opt stack 0
 13902                           pclatu	equ	0xFFB
 13903                           pclath	equ	0xFFA
 13904                           tblptru	equ	0xFF8
 13905                           tblptrh	equ	0xFF7
 13906                           tblptrl	equ	0xFF6
 13907                           tablat	equ	0xFF5
 13908                           prodh	equ	0xFF4
 13909                           prodl	equ	0xFF3
 13910                           intcon	equ	0xFF2
 13911                           intcon2	equ	0xFF1
 13912                           indf0	equ	0xFEF
 13913                           postinc0	equ	0xFEE
 13914                           fsr0h	equ	0xFEA
 13915                           fsr0l	equ	0xFE9
 13916                           wreg	equ	0xFE8
 13917                           postdec1	equ	0xFE5
 13918                           fsr1h	equ	0xFE2
 13919                           fsr1l	equ	0xFE1
 13920                           indf2	equ	0xFDF
 13921                           postinc2	equ	0xFDE
 13922                           postdec2	equ	0xFDD
 13923                           plusw2	equ	0xFDB
 13924                           fsr2h	equ	0xFDA
 13925                           fsr2l	equ	0xFD9
 13926                           status	equ	0xFD8
 13927                           
 13928 ;; *************** function _integrating *****************
 13929 ;; Defined at:
 13930 ;;		line 156 in file "tasks.h"
 13931 ;; Parameters:    Size  Location     Type
 13932 ;;		None
 13933 ;; Auto vars:     Size  Location     Type
 13934 ;;  port            1   15[COMRAM] unsigned char 
 13935 ;; Return value:  Size  Location     Type
 13936 ;;		None               void
 13937 ;; Registers used:
 13938 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13939 ;; Tracked objects:
 13940 ;;		On entry : 0/0
 13941 ;;		On exit  : 0/0
 13942 ;;		Unchanged: 0/0
 13943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13945 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13946 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13947 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13948 ;;Total ram usage:        3 bytes
 13949 ;; Hardware stack levels used:    1
 13950 ;; Hardware stack levels required when called:    1
 13951 ;; This function calls:
 13952 ;;		i2___lldiv
 13953 ;; This function is called by:
 13954 ;;		_ISR
 13955 ;; This function uses a non-reentrant model
 13956 ;;
 13957                           
 13958                           	psect	text71
 13959  0125FE                     __ptext71:
 13960                           	opt stack 0
 13961  0125FE                     _integrating:
 13962                           	opt stack 21
 13963                           
 13964                           ;tasks.h: 157: for (uint8_t port = 0; port < 3; port++) {
 13965                           
 13966                           ;incstack = 0
 13967  0125FE  0E00               	movlw	0
 13968  012600  6E10               	movwf	integrating@port,c
 13969  012602                     i2l6332:
 13970  012602  0E02               	movlw	2
 13971  012604  6410               	cpfsgt	integrating@port,c
 13972  012606  D001               	goto	i2l6336
 13973  012608  0012               	return	
 13974  01260A                     i2l6336:
 13975                           
 13976                           ;tasks.h: 158: s[port] += I[port];
 13977  01260A  5010               	movf	integrating@port,w,c
 13978  01260C  0D02               	mullw	2
 13979  01260E  0E69               	movlw	low _I
 13980  012610  24F3               	addwf	prodl,w,c
 13981  012612  6ED9               	movwf	fsr2l,c
 13982  012614  0E00               	movlw	high _I
 13983  012616  20F4               	addwfc	prodh,w,c
 13984  012618  6EDA               	movwf	fsr2h,c
 13985  01261A  CFDE F00E          	movff	postinc2,??_integrating
 13986  01261E  CFDD F00F          	movff	postdec2,??_integrating+1
 13987  012622  5010               	movf	integrating@port,w,c
 13988  012624  0D04               	mullw	4
 13989  012626  0EC8               	movlw	low _s
 13990  012628  24F3               	addwf	prodl,w,c
 13991  01262A  6ED9               	movwf	fsr2l,c
 13992  01262C  0E02               	movlw	high _s
 13993  01262E  20F4               	addwfc	prodh,w,c
 13994  012630  6EDA               	movwf	fsr2h,c
 13995  012632  500E               	movf	??_integrating,w,c
 13996  012634  26DE               	addwf	postinc2,f,c
 13997  012636  500F               	movf	??_integrating+1,w,c
 13998  012638  22DE               	addwfc	postinc2,f,c
 13999  01263A  0E00               	movlw	0
 14000  01263C  22DE               	addwfc	postinc2,f,c
 14001  01263E  22DE               	addwfc	postinc2,f,c
 14002                           
 14003                           ;tasks.h: 159: S[port] = s[port] / 3600;
 14004  012640  5010               	movf	integrating@port,w,c
 14005  012642  0D04               	mullw	4
 14006  012644  0EC8               	movlw	low _s
 14007  012646  24F3               	addwf	prodl,w,c
 14008  012648  6ED9               	movwf	fsr2l,c
 14009  01264A  0E02               	movlw	high _s
 14010  01264C  20F4               	addwfc	prodh,w,c
 14011  01264E  6EDA               	movwf	fsr2h,c
 14012  012650  CFDE F001          	movff	postinc2,i2___lldiv@dividend
 14013  012654  CFDE F002          	movff	postinc2,i2___lldiv@dividend+1
 14014  012658  CFDE F003          	movff	postinc2,i2___lldiv@dividend+2
 14015  01265C  CFDE F004          	movff	postinc2,i2___lldiv@dividend+3
 14016  012660  0E10               	movlw	16
 14017  012662  6E05               	movwf	i2___lldiv@divisor,c
 14018  012664  0E0E               	movlw	14
 14019  012666  6E06               	movwf	i2___lldiv@divisor+1,c
 14020  012668  0E00               	movlw	0
 14021  01266A  6E07               	movwf	i2___lldiv@divisor+2,c
 14022  01266C  0E00               	movlw	0
 14023  01266E  6E08               	movwf	i2___lldiv@divisor+3,c
 14024  012670  EC63  F094         	call	i2___lldiv	;wreg free
 14025  012674  5010               	movf	integrating@port,w,c
 14026  012676  0D04               	mullw	4
 14027  012678  0EC9               	movlw	low _S
 14028  01267A  24F3               	addwf	prodl,w,c
 14029  01267C  6ED9               	movwf	fsr2l,c
 14030  01267E  0E01               	movlw	high _S
 14031  012680  20F4               	addwfc	prodh,w,c
 14032  012682  6EDA               	movwf	fsr2h,c
 14033  012684  C001  FFDE         	movff	?i2___lldiv,postinc2
 14034  012688  C002  FFDE         	movff	?i2___lldiv+1,postinc2
 14035  01268C  C003  FFDE         	movff	?i2___lldiv+2,postinc2
 14036  012690  C004  FFDE         	movff	?i2___lldiv+3,postinc2
 14037  012694  2A10               	incf	integrating@port,f,c
 14038  012696  D7B5               	goto	i2l6332
 14039  012698                     __end_of_integrating:
 14040                           	opt stack 0
 14041                           pclatu	equ	0xFFB
 14042                           pclath	equ	0xFFA
 14043                           tblptru	equ	0xFF8
 14044                           tblptrh	equ	0xFF7
 14045                           tblptrl	equ	0xFF6
 14046                           tablat	equ	0xFF5
 14047                           prodh	equ	0xFF4
 14048                           prodl	equ	0xFF3
 14049                           intcon	equ	0xFF2
 14050                           intcon2	equ	0xFF1
 14051                           indf0	equ	0xFEF
 14052                           postinc0	equ	0xFEE
 14053                           fsr0h	equ	0xFEA
 14054                           fsr0l	equ	0xFE9
 14055                           wreg	equ	0xFE8
 14056                           postdec1	equ	0xFE5
 14057                           fsr1h	equ	0xFE2
 14058                           fsr1l	equ	0xFE1
 14059                           indf2	equ	0xFDF
 14060                           postinc2	equ	0xFDE
 14061                           postdec2	equ	0xFDD
 14062                           plusw2	equ	0xFDB
 14063                           fsr2h	equ	0xFDA
 14064                           fsr2l	equ	0xFD9
 14065                           status	equ	0xFD8
 14066                           
 14067 ;; *************** function i2___lldiv *****************
 14068 ;; Defined at:
 14069 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lldiv.c"
 14070 ;; Parameters:    Size  Location     Type
 14071 ;;  dividend        4    0[COMRAM] unsigned long 
 14072 ;;  divisor         4    4[COMRAM] unsigned long 
 14073 ;; Auto vars:     Size  Location     Type
 14074 ;;  __lldiv         4    8[COMRAM] unsigned long 
 14075 ;;  __lldiv         1   12[COMRAM] unsigned char 
 14076 ;; Return value:  Size  Location     Type
 14077 ;;                  4    0[COMRAM] unsigned long 
 14078 ;; Registers used:
 14079 ;;		wreg, status,2, status,0
 14080 ;; Tracked objects:
 14081 ;;		On entry : 0/0
 14082 ;;		On exit  : 0/0
 14083 ;;		Unchanged: 0/0
 14084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14085 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14086 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14088 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14089 ;;Total ram usage:       13 bytes
 14090 ;; Hardware stack levels used:    1
 14091 ;; This function calls:
 14092 ;;		Nothing
 14093 ;; This function is called by:
 14094 ;;		_integrating
 14095 ;; This function uses a non-reentrant model
 14096 ;;
 14097                           
 14098                           	psect	text72
 14099  0128C6                     __ptext72:
 14100                           	opt stack 0
 14101  0128C6                     i2___lldiv:
 14102                           	opt stack 21
 14103                           
 14104                           ;incstack = 0
 14105  0128C6  0E00               	movlw	0
 14106  0128C8  6E09               	movwf	i2___lldiv@quotient,c
 14107  0128CA  0E00               	movlw	0
 14108  0128CC  6E0A               	movwf	i2___lldiv@quotient+1,c
 14109  0128CE  0E00               	movlw	0
 14110  0128D0  6E0B               	movwf	i2___lldiv@quotient+2,c
 14111  0128D2  0E00               	movlw	0
 14112  0128D4  6E0C               	movwf	i2___lldiv@quotient+3,c
 14113  0128D6  5005               	movf	i2___lldiv@divisor,w,c
 14114  0128D8  1006               	iorwf	i2___lldiv@divisor+1,w,c
 14115  0128DA  1007               	iorwf	i2___lldiv@divisor+2,w,c
 14116  0128DC  1008               	iorwf	i2___lldiv@divisor+3,w,c
 14117  0128DE  B4D8               	btfsc	status,2,c
 14118  0128E0  D02A               	goto	i2l1714
 14119  0128E2  0E01               	movlw	1
 14120  0128E4  6E0D               	movwf	i2___lldiv@counter,c
 14121  0128E6  D006               	goto	i2l6228
 14122  0128E8                     i2l6226:
 14123  0128E8  90D8               	bcf	status,0,c
 14124  0128EA  3605               	rlcf	i2___lldiv@divisor,f,c
 14125  0128EC  3606               	rlcf	i2___lldiv@divisor+1,f,c
 14126  0128EE  3607               	rlcf	i2___lldiv@divisor+2,f,c
 14127  0128F0  3608               	rlcf	i2___lldiv@divisor+3,f,c
 14128  0128F2  2A0D               	incf	i2___lldiv@counter,f,c
 14129  0128F4                     i2l6228:
 14130  0128F4  AE08               	btfss	i2___lldiv@divisor+3,7,c
 14131  0128F6  D7F8               	goto	i2l6226
 14132  0128F8                     i2l6230:
 14133  0128F8  90D8               	bcf	status,0,c
 14134  0128FA  3609               	rlcf	i2___lldiv@quotient,f,c
 14135  0128FC  360A               	rlcf	i2___lldiv@quotient+1,f,c
 14136  0128FE  360B               	rlcf	i2___lldiv@quotient+2,f,c
 14137  012900  360C               	rlcf	i2___lldiv@quotient+3,f,c
 14138  012902  5005               	movf	i2___lldiv@divisor,w,c
 14139  012904  5C01               	subwf	i2___lldiv@dividend,w,c
 14140  012906  5006               	movf	i2___lldiv@divisor+1,w,c
 14141  012908  5802               	subwfb	i2___lldiv@dividend+1,w,c
 14142  01290A  5007               	movf	i2___lldiv@divisor+2,w,c
 14143  01290C  5803               	subwfb	i2___lldiv@dividend+2,w,c
 14144  01290E  5008               	movf	i2___lldiv@divisor+3,w,c
 14145  012910  5804               	subwfb	i2___lldiv@dividend+3,w,c
 14146  012912  A0D8               	btfss	status,0,c
 14147  012914  D009               	goto	i2l6238
 14148  012916  5005               	movf	i2___lldiv@divisor,w,c
 14149  012918  5E01               	subwf	i2___lldiv@dividend,f,c
 14150  01291A  5006               	movf	i2___lldiv@divisor+1,w,c
 14151  01291C  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 14152  01291E  5007               	movf	i2___lldiv@divisor+2,w,c
 14153  012920  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 14154  012922  5008               	movf	i2___lldiv@divisor+3,w,c
 14155  012924  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 14156  012926  8009               	bsf	i2___lldiv@quotient,0,c
 14157  012928                     i2l6238:
 14158  012928  90D8               	bcf	status,0,c
 14159  01292A  3208               	rrcf	i2___lldiv@divisor+3,f,c
 14160  01292C  3207               	rrcf	i2___lldiv@divisor+2,f,c
 14161  01292E  3206               	rrcf	i2___lldiv@divisor+1,f,c
 14162  012930  3205               	rrcf	i2___lldiv@divisor,f,c
 14163  012932  2E0D               	decfsz	i2___lldiv@counter,f,c
 14164  012934  D7E1               	goto	i2l6230
 14165  012936                     i2l1714:
 14166  012936  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 14167  01293A  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 14168  01293E  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 14169  012942  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 14170  012946  0012               	return		;funcret
 14171  012948                     __end_ofi2___lldiv:
 14172                           	opt stack 0
 14173                           pclatu	equ	0xFFB
 14174                           pclath	equ	0xFFA
 14175                           tblptru	equ	0xFF8
 14176                           tblptrh	equ	0xFF7
 14177                           tblptrl	equ	0xFF6
 14178                           tablat	equ	0xFF5
 14179                           prodh	equ	0xFF4
 14180                           prodl	equ	0xFF3
 14181                           intcon	equ	0xFF2
 14182                           intcon2	equ	0xFF1
 14183                           indf0	equ	0xFEF
 14184                           postinc0	equ	0xFEE
 14185                           fsr0h	equ	0xFEA
 14186                           fsr0l	equ	0xFE9
 14187                           wreg	equ	0xFE8
 14188                           postdec1	equ	0xFE5
 14189                           fsr1h	equ	0xFE2
 14190                           fsr1l	equ	0xFE1
 14191                           indf2	equ	0xFDF
 14192                           postinc2	equ	0xFDE
 14193                           postdec2	equ	0xFDD
 14194                           plusw2	equ	0xFDB
 14195                           fsr2h	equ	0xFDA
 14196                           fsr2l	equ	0xFD9
 14197                           status	equ	0xFD8
 14198                           
 14199 ;; *************** function _delay_timer_interrupt *****************
 14200 ;; Defined at:
 14201 ;;		line 344 in file "../My_header\My_header.h"
 14202 ;; Parameters:    Size  Location     Type
 14203 ;;  d               2    0[COMRAM] PTR struct Delay
 14204 ;;		 -> delay_display(3), 
 14205 ;; Auto vars:     Size  Location     Type
 14206 ;;		None
 14207 ;; Return value:  Size  Location     Type
 14208 ;;		None               void
 14209 ;; Registers used:
 14210 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14211 ;; Tracked objects:
 14212 ;;		On entry : 0/0
 14213 ;;		On exit  : 0/0
 14214 ;;		Unchanged: 0/0
 14215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14216 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14218 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14219 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14220 ;;Total ram usage:        4 bytes
 14221 ;; Hardware stack levels used:    1
 14222 ;; This function calls:
 14223 ;;		Nothing
 14224 ;; This function is called by:
 14225 ;;		_ISR
 14226 ;; This function uses a non-reentrant model
 14227 ;;
 14228                           
 14229                           	psect	text73
 14230  012EA6                     __ptext73:
 14231                           	opt stack 0
 14232  012EA6                     _delay_timer_interrupt:
 14233                           	opt stack 22
 14234                           
 14235                           ;My_header\My_header.h: 345: if (d->cnt == 1)d->flag = 1;
 14236                           
 14237                           ;incstack = 0
 14238  012EA6  EE20 F001          	lfsr	2,1
 14239  012EAA  5001               	movf	delay_timer_interrupt@d,w,c
 14240  012EAC  26D9               	addwf	fsr2l,f,c
 14241  012EAE  5002               	movf	delay_timer_interrupt@d+1,w,c
 14242  012EB0  22DA               	addwfc	fsr2h,f,c
 14243  012EB2  04DE               	decf	postinc2,w,c
 14244  012EB4  10DE               	iorwf	postinc2,w,c
 14245  012EB6  A4D8               	btfss	status,2,c
 14246  012EB8  D006               	goto	i2l6286
 14247  012EBA  C001  FFD9         	movff	delay_timer_interrupt@d,fsr2l
 14248  012EBE  C002  FFDA         	movff	delay_timer_interrupt@d+1,fsr2h
 14249  012EC2  0E01               	movlw	1
 14250  012EC4  6EDF               	movwf	indf2,c
 14251  012EC6                     i2l6286:
 14252                           
 14253                           ;My_header\My_header.h: 346: if (d->cnt)d->cnt--;
 14254  012EC6  EE20 F001          	lfsr	2,1
 14255  012ECA  5001               	movf	delay_timer_interrupt@d,w,c
 14256  012ECC  26D9               	addwf	fsr2l,f,c
 14257  012ECE  5002               	movf	delay_timer_interrupt@d+1,w,c
 14258  012ED0  22DA               	addwfc	fsr2h,f,c
 14259  012ED2  50DE               	movf	postinc2,w,c
 14260  012ED4  10DE               	iorwf	postinc2,w,c
 14261  012ED6  B4D8               	btfsc	status,2,c
 14262  012ED8  0012               	return	
 14263  012EDA  EE20 F001          	lfsr	2,1
 14264  012EDE  5001               	movf	delay_timer_interrupt@d,w,c
 14265  012EE0  26D9               	addwf	fsr2l,f,c
 14266  012EE2  5002               	movf	delay_timer_interrupt@d+1,w,c
 14267  012EE4  22DA               	addwfc	fsr2h,f,c
 14268  012EE6  06DE               	decf	postinc2,f,c
 14269  012EE8  0E00               	movlw	0
 14270  012EEA  5ADD               	subwfb	postdec2,f,c
 14271  012EEC  0012               	return	
 14272  012EEE                     __end_of_delay_timer_interrupt:
 14273                           	opt stack 0
 14274                           pclatu	equ	0xFFB
 14275                           pclath	equ	0xFFA
 14276                           tblptru	equ	0xFF8
 14277                           tblptrh	equ	0xFF7
 14278                           tblptrl	equ	0xFF6
 14279                           tablat	equ	0xFF5
 14280                           prodh	equ	0xFF4
 14281                           prodl	equ	0xFF3
 14282                           intcon	equ	0xFF2
 14283                           intcon2	equ	0xFF1
 14284                           indf0	equ	0xFEF
 14285                           postinc0	equ	0xFEE
 14286                           fsr0h	equ	0xFEA
 14287                           fsr0l	equ	0xFE9
 14288                           wreg	equ	0xFE8
 14289                           postdec1	equ	0xFE5
 14290                           fsr1h	equ	0xFE2
 14291                           fsr1l	equ	0xFE1
 14292                           indf2	equ	0xFDF
 14293                           postinc2	equ	0xFDE
 14294                           postdec2	equ	0xFDD
 14295                           plusw2	equ	0xFDB
 14296                           fsr2h	equ	0xFDA
 14297                           fsr2l	equ	0xFD9
 14298                           status	equ	0xFD8
 14299                           
 14300 ;; *************** function _charge_time_count *****************
 14301 ;; Defined at:
 14302 ;;		line 163 in file "tasks.h"
 14303 ;; Parameters:    Size  Location     Type
 14304 ;;		None
 14305 ;; Auto vars:     Size  Location     Type
 14306 ;;  i               1    2[COMRAM] unsigned char 
 14307 ;; Return value:  Size  Location     Type
 14308 ;;		None               void
 14309 ;; Registers used:
 14310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14311 ;; Tracked objects:
 14312 ;;		On entry : 0/0
 14313 ;;		On exit  : 0/0
 14314 ;;		Unchanged: 0/0
 14315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14317 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14318 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14319 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14320 ;;Total ram usage:        3 bytes
 14321 ;; Hardware stack levels used:    1
 14322 ;; This function calls:
 14323 ;;		Nothing
 14324 ;; This function is called by:
 14325 ;;		_ISR
 14326 ;; This function uses a non-reentrant model
 14327 ;;
 14328                           
 14329                           	psect	text74
 14330  012EEE                     __ptext74:
 14331                           	opt stack 0
 14332  012EEE                     _charge_time_count:
 14333                           	opt stack 22
 14334                           
 14335                           ;tasks.h: 164: uint8_t i;
 14336                           ;tasks.h: 165: for (i = 0; i < 3; i++) {
 14337                           
 14338                           ;incstack = 0
 14339  012EEE  0E00               	movlw	0
 14340  012EF0  6E03               	movwf	charge_time_count@i,c
 14341  012EF2                     i2l6346:
 14342  012EF2  0E02               	movlw	2
 14343  012EF4  6403               	cpfsgt	charge_time_count@i,c
 14344  012EF6  D001               	goto	i2l6350
 14345  012EF8  0012               	return	
 14346  012EFA                     i2l6350:
 14347                           
 14348                           ;tasks.h: 166: if (I[i] > 100)charge_time[i]++;
 14349  012EFA  5003               	movf	charge_time_count@i,w,c
 14350  012EFC  0D02               	mullw	2
 14351  012EFE  0E69               	movlw	low _I
 14352  012F00  24F3               	addwf	prodl,w,c
 14353  012F02  6ED9               	movwf	fsr2l,c
 14354  012F04  0E00               	movlw	high _I
 14355  012F06  20F4               	addwfc	prodh,w,c
 14356  012F08  6EDA               	movwf	fsr2h,c
 14357  012F0A  0E01               	movlw	1
 14358  012F0C  50DB               	movf	plusw2,w,c
 14359  012F0E  E104               	bnz	i2u617_40
 14360  012F10  0E65               	movlw	101
 14361  012F12  5CDE               	subwf	postinc2,w,c
 14362  012F14  A0D8               	btfss	status,0,c
 14363  012F16  D00D               	goto	i2l6354
 14364  012F18                     i2u617_40:
 14365  012F18  5003               	movf	charge_time_count@i,w,c
 14366  012F1A  0D04               	mullw	4
 14367  012F1C  0ED5               	movlw	low _charge_time
 14368  012F1E  24F3               	addwf	prodl,w,c
 14369  012F20  6ED9               	movwf	fsr2l,c
 14370  012F22  0E01               	movlw	high _charge_time
 14371  012F24  20F4               	addwfc	prodh,w,c
 14372  012F26  6EDA               	movwf	fsr2h,c
 14373  012F28  2ADE               	incf	postinc2,f,c
 14374  012F2A  0E00               	movlw	0
 14375  012F2C  22DE               	addwfc	postinc2,f,c
 14376  012F2E  22DE               	addwfc	postinc2,f,c
 14377  012F30  22DE               	addwfc	postinc2,f,c
 14378  012F32                     i2l6354:
 14379  012F32  2A03               	incf	charge_time_count@i,f,c
 14380  012F34  D7DE               	goto	i2l6346
 14381  012F36                     __end_of_charge_time_count:
 14382                           	opt stack 0
 14383                           pclatu	equ	0xFFB
 14384                           pclath	equ	0xFFA
 14385                           tblptru	equ	0xFF8
 14386                           tblptrh	equ	0xFF7
 14387                           tblptrl	equ	0xFF6
 14388                           tablat	equ	0xFF5
 14389                           prodh	equ	0xFF4
 14390                           prodl	equ	0xFF3
 14391                           intcon	equ	0xFF2
 14392                           intcon2	equ	0xFF1
 14393                           indf0	equ	0xFEF
 14394                           postinc0	equ	0xFEE
 14395                           fsr0h	equ	0xFEA
 14396                           fsr0l	equ	0xFE9
 14397                           wreg	equ	0xFE8
 14398                           postdec1	equ	0xFE5
 14399                           fsr1h	equ	0xFE2
 14400                           fsr1l	equ	0xFE1
 14401                           indf2	equ	0xFDF
 14402                           postinc2	equ	0xFDE
 14403                           postdec2	equ	0xFDD
 14404                           plusw2	equ	0xFDB
 14405                           fsr2h	equ	0xFDA
 14406                           fsr2l	equ	0xFD9
 14407                           status	equ	0xFD8
 14408                           
 14409 ;; *************** function _UART_ISR *****************
 14410 ;; Defined at:
 14411 ;;		line 208 in file "../My_header\My_header.h"
 14412 ;; Parameters:    Size  Location     Type
 14413 ;;		None
 14414 ;; Auto vars:     Size  Location     Type
 14415 ;;  ascii           1   15[COMRAM] unsigned char 
 14416 ;; Return value:  Size  Location     Type
 14417 ;;		None               void
 14418 ;; Registers used:
 14419 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14420 ;; Tracked objects:
 14421 ;;		On entry : 0/0
 14422 ;;		On exit  : 0/0
 14423 ;;		Unchanged: 0/0
 14424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14426 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14428 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14429 ;;Total ram usage:        1 bytes
 14430 ;; Hardware stack levels used:    1
 14431 ;; Hardware stack levels required when called:    2
 14432 ;; This function calls:
 14433 ;;		_ringbuf_num
 14434 ;;		_ringbuf_pop
 14435 ;;		_ringbuf_put
 14436 ;; This function is called by:
 14437 ;;		_ISR
 14438 ;; This function uses a non-reentrant model
 14439 ;;
 14440                           
 14441                           	psect	text75
 14442  012E14                     __ptext75:
 14443                           	opt stack 0
 14444  012E14                     _UART_ISR:
 14445                           	opt stack 20
 14446                           
 14447                           ;My_header\My_header.h: 209: if (PIE1bits.TXIE && PIR1bits.TXIF) {
 14448                           
 14449                           ;incstack = 0
 14450  012E14  B89D               	btfsc	3997,4,c	;volatile
 14451  012E16  A89E               	btfss	3998,4,c	;volatile
 14452  012E18  D013               	goto	i2l207
 14453                           
 14454                           ;My_header\My_header.h: 210: if (ringbuf_num(&tx_buf)) {
 14455  012E1A  0EE8               	movlw	low _tx_buf
 14456  012E1C  6E01               	movwf	ringbuf_num@rb,c
 14457  012E1E  0E01               	movlw	high _tx_buf
 14458  012E20  6E02               	movwf	ringbuf_num@rb+1,c
 14459  012E22  ECF3  F090         	call	_ringbuf_num	;wreg free
 14460  012E26  5001               	movf	?_ringbuf_num,w,c
 14461  012E28  1002               	iorwf	?_ringbuf_num+1,w,c
 14462  012E2A  B4D8               	btfsc	status,2,c
 14463  012E2C  D008               	goto	i2l208
 14464                           
 14465                           ;My_header\My_header.h: 211: TXREG1 = ringbuf_pop(&tx_buf);
 14466  012E2E  0EE8               	movlw	low _tx_buf
 14467  012E30  6E09               	movwf	ringbuf_pop@rb,c
 14468  012E32  0E01               	movlw	high _tx_buf
 14469  012E34  6E0A               	movwf	ringbuf_pop@rb+1,c
 14470  012E36  EC07  F092         	call	_ringbuf_pop	;wreg free
 14471  012E3A  6EAE               	movwf	4014,c	;volatile
 14472                           
 14473                           ;My_header\My_header.h: 212: } else {
 14474  012E3C  D001               	goto	i2l207
 14475  012E3E                     i2l208:
 14476                           
 14477                           ;My_header\My_header.h: 213: PIE1bits.TXIE = 0;
 14478  012E3E  989D               	bcf	3997,4,c	;volatile
 14479  012E40                     i2l207:
 14480                           
 14481                           ;My_header\My_header.h: 214: }
 14482                           ;My_header\My_header.h: 215: }
 14483                           ;My_header\My_header.h: 216: if (PIR1bits.RCIF && PIE1bits.RCIE) {
 14484  012E40  AA9E               	btfss	3998,5,c	;volatile
 14485  012E42  0012               	return	
 14486  012E44  AA9D               	btfss	3997,5,c	;volatile
 14487  012E46  0012               	return	
 14488                           
 14489                           ;My_header\My_header.h: 217: char ascii = RCREG1;
 14490  012E48  CFAF F010          	movff	4015,UART_ISR@ascii	;volatile
 14491                           
 14492                           ;My_header\My_header.h: 218: ringbuf_put(&rx_buf, ascii);
 14493  012E4C  0EEA               	movlw	low _rx_buf
 14494  012E4E  6E09               	movwf	ringbuf_put@rb,c
 14495  012E50  0E02               	movlw	high _rx_buf
 14496  012E52  6E0A               	movwf	ringbuf_put@rb+1,c
 14497  012E54  C010  F00B         	movff	UART_ISR@ascii,ringbuf_put@asciicode
 14498  012E58  ECAC  F091         	call	_ringbuf_put	;wreg free
 14499  012E5C  0012               	return	
 14500  012E5E                     __end_of_UART_ISR:
 14501                           	opt stack 0
 14502                           pclatu	equ	0xFFB
 14503                           pclath	equ	0xFFA
 14504                           tblptru	equ	0xFF8
 14505                           tblptrh	equ	0xFF7
 14506                           tblptrl	equ	0xFF6
 14507                           tablat	equ	0xFF5
 14508                           prodh	equ	0xFF4
 14509                           prodl	equ	0xFF3
 14510                           intcon	equ	0xFF2
 14511                           intcon2	equ	0xFF1
 14512                           indf0	equ	0xFEF
 14513                           postinc0	equ	0xFEE
 14514                           fsr0h	equ	0xFEA
 14515                           fsr0l	equ	0xFE9
 14516                           wreg	equ	0xFE8
 14517                           postdec1	equ	0xFE5
 14518                           fsr1h	equ	0xFE2
 14519                           fsr1l	equ	0xFE1
 14520                           indf2	equ	0xFDF
 14521                           postinc2	equ	0xFDE
 14522                           postdec2	equ	0xFDD
 14523                           plusw2	equ	0xFDB
 14524                           fsr2h	equ	0xFDA
 14525                           fsr2l	equ	0xFD9
 14526                           status	equ	0xFD8
 14527                           
 14528 ;; *************** function _ringbuf_put *****************
 14529 ;; Defined at:
 14530 ;;		line 39 in file "../My_header\My_ringbuf.h"
 14531 ;; Parameters:    Size  Location     Type
 14532 ;;  rb              2    8[COMRAM] PTR struct ringbuf
 14533 ;;		 -> rx_buf(8), tx_buf(8), 
 14534 ;;  asciicode       1   10[COMRAM] unsigned char 
 14535 ;; Auto vars:     Size  Location     Type
 14536 ;;		None
 14537 ;; Return value:  Size  Location     Type
 14538 ;;		None               void
 14539 ;; Registers used:
 14540 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14541 ;; Tracked objects:
 14542 ;;		On entry : 0/0
 14543 ;;		On exit  : 0/0
 14544 ;;		Unchanged: 0/0
 14545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14546 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14548 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14549 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14550 ;;Total ram usage:        7 bytes
 14551 ;; Hardware stack levels used:    1
 14552 ;; Hardware stack levels required when called:    1
 14553 ;; This function calls:
 14554 ;;		_ringbuf_num
 14555 ;; This function is called by:
 14556 ;;		_UART_ISR
 14557 ;;		_tx_send
 14558 ;;		_ringbuf_put_num
 14559 ;;		_ringbuf_put_str
 14560 ;;		_tx_sends
 14561 ;; This function uses a non-reentrant model
 14562 ;;
 14563                           
 14564                           	psect	text76
 14565  012358                     __ptext76:
 14566                           	opt stack 0
 14567  012358                     _ringbuf_put:
 14568                           	opt stack 20
 14569                           
 14570                           ;My_header\My_ringbuf.h: 40: if (ringbuf_num(rb) < rb->size) {
 14571                           
 14572                           ;incstack = 0
 14573  012358  C009  F001         	movff	ringbuf_put@rb,ringbuf_num@rb
 14574  01235C  C00A  F002         	movff	ringbuf_put@rb+1,ringbuf_num@rb+1
 14575  012360  ECF3  F090         	call	_ringbuf_num	;wreg free
 14576  012364  EE20 F002          	lfsr	2,2
 14577  012368  5009               	movf	ringbuf_put@rb,w,c
 14578  01236A  26D9               	addwf	fsr2l,f,c
 14579  01236C  500A               	movf	ringbuf_put@rb+1,w,c
 14580  01236E  22DA               	addwfc	fsr2h,f,c
 14581  012370  50DE               	movf	postinc2,w,c
 14582  012372  5C01               	subwf	?_ringbuf_num,w,c
 14583  012374  50DE               	movf	postinc2,w,c
 14584  012376  5802               	subwfb	?_ringbuf_num+1,w,c
 14585  012378  B0D8               	btfsc	status,0,c
 14586  01237A  0012               	return	
 14587                           
 14588                           ;My_header\My_ringbuf.h: 41: rb->buf[rb->head] = asciicode;
 14589  01237C  EE20 F004          	lfsr	2,4
 14590  012380  5009               	movf	ringbuf_put@rb,w,c
 14591  012382  26D9               	addwf	fsr2l,f,c
 14592  012384  500A               	movf	ringbuf_put@rb+1,w,c
 14593  012386  22DA               	addwfc	fsr2h,f,c
 14594  012388  CFDE F00C          	movff	postinc2,??_ringbuf_put
 14595  01238C  CFDD F00D          	movff	postdec2,??_ringbuf_put+1
 14596  012390  C009  FFD9         	movff	ringbuf_put@rb,fsr2l
 14597  012394  C00A  FFDA         	movff	ringbuf_put@rb+1,fsr2h
 14598  012398  CFDE F00E          	movff	postinc2,??_ringbuf_put+2
 14599  01239C  CFDD F00F          	movff	postdec2,??_ringbuf_put+3
 14600  0123A0  500C               	movf	??_ringbuf_put,w,c
 14601  0123A2  240E               	addwf	??_ringbuf_put+2,w,c
 14602  0123A4  6ED9               	movwf	fsr2l,c
 14603  0123A6  500D               	movf	??_ringbuf_put+1,w,c
 14604  0123A8  200F               	addwfc	??_ringbuf_put+3,w,c
 14605  0123AA  6EDA               	movwf	fsr2h,c
 14606  0123AC  C00B  FFDF         	movff	ringbuf_put@asciicode,indf2
 14607                           
 14608                           ;My_header\My_ringbuf.h: 42: if (rb->head + 1 < rb->size) rb->head++;
 14609  0123B0  EE20 F002          	lfsr	2,2
 14610  0123B4  5009               	movf	ringbuf_put@rb,w,c
 14611  0123B6  26D9               	addwf	fsr2l,f,c
 14612  0123B8  500A               	movf	ringbuf_put@rb+1,w,c
 14613  0123BA  22DA               	addwfc	fsr2h,f,c
 14614  0123BC  EE10 F004          	lfsr	1,4
 14615  0123C0  5009               	movf	ringbuf_put@rb,w,c
 14616  0123C2  26E1               	addwf	fsr1l,f,c
 14617  0123C4  500A               	movf	ringbuf_put@rb+1,w,c
 14618  0123C6  22E2               	addwfc	fsr1h,f,c
 14619  0123C8  CFE6 F00E          	movff	postinc1,??_ringbuf_put+2
 14620  0123CC  CFE5 F00F          	movff	postdec1,??_ringbuf_put+3
 14621  0123D0  0E01               	movlw	1
 14622  0123D2  260E               	addwf	??_ringbuf_put+2,f,c
 14623  0123D4  0E00               	movlw	0
 14624  0123D6  220F               	addwfc	??_ringbuf_put+3,f,c
 14625  0123D8  50DE               	movf	postinc2,w,c
 14626  0123DA  5C0E               	subwf	??_ringbuf_put+2,w,c
 14627  0123DC  50DE               	movf	postinc2,w,c
 14628  0123DE  580F               	subwfb	??_ringbuf_put+3,w,c
 14629  0123E0  B0D8               	btfsc	status,0,c
 14630  0123E2  D00A               	goto	i2l5798
 14631  0123E4  EE20 F004          	lfsr	2,4
 14632  0123E8  5009               	movf	ringbuf_put@rb,w,c
 14633  0123EA  26D9               	addwf	fsr2l,f,c
 14634  0123EC  500A               	movf	ringbuf_put@rb+1,w,c
 14635  0123EE  22DA               	addwfc	fsr2h,f,c
 14636  0123F0  2ADE               	incf	postinc2,f,c
 14637  0123F2  0E00               	movlw	0
 14638  0123F4  22DD               	addwfc	postdec2,f,c
 14639  0123F6  0012               	return	
 14640  0123F8                     i2l5798:
 14641                           
 14642                           ;My_header\My_ringbuf.h: 43: else rb->head = 0;
 14643  0123F8  EE20 F004          	lfsr	2,4
 14644  0123FC  5009               	movf	ringbuf_put@rb,w,c
 14645  0123FE  26D9               	addwf	fsr2l,f,c
 14646  012400  500A               	movf	ringbuf_put@rb+1,w,c
 14647  012402  22DA               	addwfc	fsr2h,f,c
 14648  012404  0E00               	movlw	0
 14649  012406  6EDE               	movwf	postinc2,c
 14650  012408  0E00               	movlw	0
 14651  01240A  6EDD               	movwf	postdec2,c
 14652  01240C  0012               	return	
 14653  01240E                     __end_of_ringbuf_put:
 14654                           	opt stack 0
 14655                           pclatu	equ	0xFFB
 14656                           pclath	equ	0xFFA
 14657                           tblptru	equ	0xFF8
 14658                           tblptrh	equ	0xFF7
 14659                           tblptrl	equ	0xFF6
 14660                           tablat	equ	0xFF5
 14661                           prodh	equ	0xFF4
 14662                           prodl	equ	0xFF3
 14663                           intcon	equ	0xFF2
 14664                           intcon2	equ	0xFF1
 14665                           indf0	equ	0xFEF
 14666                           postinc0	equ	0xFEE
 14667                           fsr0h	equ	0xFEA
 14668                           fsr0l	equ	0xFE9
 14669                           wreg	equ	0xFE8
 14670                           postinc1	equ	0xFE6
 14671                           postdec1	equ	0xFE5
 14672                           fsr1h	equ	0xFE2
 14673                           fsr1l	equ	0xFE1
 14674                           indf2	equ	0xFDF
 14675                           postinc2	equ	0xFDE
 14676                           postdec2	equ	0xFDD
 14677                           plusw2	equ	0xFDB
 14678                           fsr2h	equ	0xFDA
 14679                           fsr2l	equ	0xFD9
 14680                           status	equ	0xFD8
 14681                           
 14682 ;; *************** function _ringbuf_pop *****************
 14683 ;; Defined at:
 14684 ;;		line 64 in file "../My_header\My_ringbuf.h"
 14685 ;; Parameters:    Size  Location     Type
 14686 ;;  rb              2    8[COMRAM] PTR struct ringbuf
 14687 ;;		 -> tx_buf(8), 
 14688 ;; Auto vars:     Size  Location     Type
 14689 ;;  ret             1   14[COMRAM] unsigned char 
 14690 ;; Return value:  Size  Location     Type
 14691 ;;                  1    wreg      unsigned char 
 14692 ;; Registers used:
 14693 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14694 ;; Tracked objects:
 14695 ;;		On entry : 0/0
 14696 ;;		On exit  : 0/0
 14697 ;;		Unchanged: 0/0
 14698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14699 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14700 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14701 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14702 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14703 ;;Total ram usage:        7 bytes
 14704 ;; Hardware stack levels used:    1
 14705 ;; Hardware stack levels required when called:    1
 14706 ;; This function calls:
 14707 ;;		_ringbuf_num
 14708 ;; This function is called by:
 14709 ;;		_UART_ISR
 14710 ;; This function uses a non-reentrant model
 14711 ;;
 14712                           
 14713                           	psect	text77
 14714  01240E                     __ptext77:
 14715                           	opt stack 0
 14716  01240E                     _ringbuf_pop:
 14717                           	opt stack 20
 14718                           
 14719                           ;My_header\My_ringbuf.h: 65: if (ringbuf_num(rb)) {
 14720                           
 14721                           ;incstack = 0
 14722  01240E  C009  F001         	movff	ringbuf_pop@rb,ringbuf_num@rb
 14723  012412  C00A  F002         	movff	ringbuf_pop@rb+1,ringbuf_num@rb+1
 14724  012416  ECF3  F090         	call	_ringbuf_num	;wreg free
 14725  01241A  5001               	movf	?_ringbuf_num,w,c
 14726  01241C  1002               	iorwf	?_ringbuf_num+1,w,c
 14727  01241E  B4D8               	btfsc	status,2,c
 14728  012420  D04A               	goto	i2l5816
 14729                           
 14730                           ;My_header\My_ringbuf.h: 66: char ret = rb->buf[rb->tail];
 14731  012422  EE20 F006          	lfsr	2,6
 14732  012426  5009               	movf	ringbuf_pop@rb,w,c
 14733  012428  26D9               	addwf	fsr2l,f,c
 14734  01242A  500A               	movf	ringbuf_pop@rb+1,w,c
 14735  01242C  22DA               	addwfc	fsr2h,f,c
 14736  01242E  CFDE F00B          	movff	postinc2,??_ringbuf_pop
 14737  012432  CFDD F00C          	movff	postdec2,??_ringbuf_pop+1
 14738  012436  C009  FFD9         	movff	ringbuf_pop@rb,fsr2l
 14739  01243A  C00A  FFDA         	movff	ringbuf_pop@rb+1,fsr2h
 14740  01243E  CFDE F00D          	movff	postinc2,??_ringbuf_pop+2
 14741  012442  CFDD F00E          	movff	postdec2,??_ringbuf_pop+3
 14742  012446  500B               	movf	??_ringbuf_pop,w,c
 14743  012448  240D               	addwf	??_ringbuf_pop+2,w,c
 14744  01244A  6ED9               	movwf	fsr2l,c
 14745  01244C  500C               	movf	??_ringbuf_pop+1,w,c
 14746  01244E  200E               	addwfc	??_ringbuf_pop+3,w,c
 14747  012450  6EDA               	movwf	fsr2h,c
 14748  012452  50DF               	movf	indf2,w,c
 14749  012454  6E0F               	movwf	ringbuf_pop@ret,c
 14750                           
 14751                           ;My_header\My_ringbuf.h: 67: if (rb->tail + 1 < rb->size) {
 14752  012456  EE20 F002          	lfsr	2,2
 14753  01245A  5009               	movf	ringbuf_pop@rb,w,c
 14754  01245C  26D9               	addwf	fsr2l,f,c
 14755  01245E  500A               	movf	ringbuf_pop@rb+1,w,c
 14756  012460  22DA               	addwfc	fsr2h,f,c
 14757  012462  EE10 F006          	lfsr	1,6
 14758  012466  5009               	movf	ringbuf_pop@rb,w,c
 14759  012468  26E1               	addwf	fsr1l,f,c
 14760  01246A  500A               	movf	ringbuf_pop@rb+1,w,c
 14761  01246C  22E2               	addwfc	fsr1h,f,c
 14762  01246E  CFE6 F00D          	movff	postinc1,??_ringbuf_pop+2
 14763  012472  CFE5 F00E          	movff	postdec1,??_ringbuf_pop+3
 14764  012476  0E01               	movlw	1
 14765  012478  260D               	addwf	??_ringbuf_pop+2,f,c
 14766  01247A  0E00               	movlw	0
 14767  01247C  220E               	addwfc	??_ringbuf_pop+3,f,c
 14768  01247E  50DE               	movf	postinc2,w,c
 14769  012480  5C0D               	subwf	??_ringbuf_pop+2,w,c
 14770  012482  50DE               	movf	postinc2,w,c
 14771  012484  580E               	subwfb	??_ringbuf_pop+3,w,c
 14772  012486  B0D8               	btfsc	status,0,c
 14773  012488  D00A               	goto	i2l5808
 14774                           
 14775                           ;My_header\My_ringbuf.h: 68: rb->tail++;
 14776  01248A  EE20 F006          	lfsr	2,6
 14777  01248E  5009               	movf	ringbuf_pop@rb,w,c
 14778  012490  26D9               	addwf	fsr2l,f,c
 14779  012492  500A               	movf	ringbuf_pop@rb+1,w,c
 14780  012494  22DA               	addwfc	fsr2h,f,c
 14781  012496  2ADE               	incf	postinc2,f,c
 14782  012498  0E00               	movlw	0
 14783  01249A  22DD               	addwfc	postdec2,f,c
 14784                           
 14785                           ;My_header\My_ringbuf.h: 69: } else {
 14786  01249C  D00A               	goto	i2l5810
 14787  01249E                     i2l5808:
 14788                           
 14789                           ;My_header\My_ringbuf.h: 70: rb->tail = 0;
 14790  01249E  EE20 F006          	lfsr	2,6
 14791  0124A2  5009               	movf	ringbuf_pop@rb,w,c
 14792  0124A4  26D9               	addwf	fsr2l,f,c
 14793  0124A6  500A               	movf	ringbuf_pop@rb+1,w,c
 14794  0124A8  22DA               	addwfc	fsr2h,f,c
 14795  0124AA  0E00               	movlw	0
 14796  0124AC  6EDE               	movwf	postinc2,c
 14797  0124AE  0E00               	movlw	0
 14798  0124B0  6EDD               	movwf	postdec2,c
 14799  0124B2                     i2l5810:
 14800                           
 14801                           ;My_header\My_ringbuf.h: 71: }
 14802                           ;My_header\My_ringbuf.h: 72: return ret;
 14803  0124B2  500F               	movf	ringbuf_pop@ret,w,c
 14804                           
 14805                           ;My_header\My_ringbuf.h: 73: } else {
 14806  0124B4  0012               	return	
 14807  0124B6                     i2l5816:
 14808                           
 14809                           ;My_header\My_ringbuf.h: 74: return 0;
 14810  0124B6  0E00               	movlw	0
 14811  0124B8  0012               	return	
 14812  0124BA                     __end_of_ringbuf_pop:
 14813                           	opt stack 0
 14814                           pclatu	equ	0xFFB
 14815                           pclath	equ	0xFFA
 14816                           tblptru	equ	0xFF8
 14817                           tblptrh	equ	0xFF7
 14818                           tblptrl	equ	0xFF6
 14819                           tablat	equ	0xFF5
 14820                           prodh	equ	0xFF4
 14821                           prodl	equ	0xFF3
 14822                           intcon	equ	0xFF2
 14823                           intcon2	equ	0xFF1
 14824                           indf0	equ	0xFEF
 14825                           postinc0	equ	0xFEE
 14826                           fsr0h	equ	0xFEA
 14827                           fsr0l	equ	0xFE9
 14828                           wreg	equ	0xFE8
 14829                           postinc1	equ	0xFE6
 14830                           postdec1	equ	0xFE5
 14831                           fsr1h	equ	0xFE2
 14832                           fsr1l	equ	0xFE1
 14833                           indf2	equ	0xFDF
 14834                           postinc2	equ	0xFDE
 14835                           postdec2	equ	0xFDD
 14836                           plusw2	equ	0xFDB
 14837                           fsr2h	equ	0xFDA
 14838                           fsr2l	equ	0xFD9
 14839                           status	equ	0xFD8
 14840                           
 14841 ;; *************** function _ringbuf_num *****************
 14842 ;; Defined at:
 14843 ;;		line 31 in file "../My_header\My_ringbuf.h"
 14844 ;; Parameters:    Size  Location     Type
 14845 ;;  rb              2    0[COMRAM] PTR struct ringbuf
 14846 ;;		 -> rx_buf(8), tx_buf(8), 
 14847 ;; Auto vars:     Size  Location     Type
 14848 ;;		None
 14849 ;; Return value:  Size  Location     Type
 14850 ;;                  2    0[COMRAM] unsigned int 
 14851 ;; Registers used:
 14852 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14853 ;; Tracked objects:
 14854 ;;		On entry : 0/0
 14855 ;;		On exit  : 0/0
 14856 ;;		Unchanged: 0/0
 14857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14858 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14860 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14861 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14862 ;;Total ram usage:        8 bytes
 14863 ;; Hardware stack levels used:    1
 14864 ;; This function calls:
 14865 ;;		Nothing
 14866 ;; This function is called by:
 14867 ;;		_ringbuf_put
 14868 ;;		_ringbuf_pop
 14869 ;;		_UART_ISR
 14870 ;;		_ringbuf_backspace
 14871 ;; This function uses a non-reentrant model
 14872 ;;
 14873                           
 14874                           	psect	text78
 14875  0121E6                     __ptext78:
 14876                           	opt stack 0
 14877  0121E6                     _ringbuf_num:
 14878                           	opt stack 20
 14879                           
 14880                           ;My_header\My_ringbuf.h: 32: if (rb->head >= rb->tail) {
 14881                           
 14882                           ;incstack = 0
 14883  0121E6  EE20 F006          	lfsr	2,6
 14884  0121EA  5001               	movf	ringbuf_num@rb,w,c
 14885  0121EC  26D9               	addwf	fsr2l,f,c
 14886  0121EE  5002               	movf	ringbuf_num@rb+1,w,c
 14887  0121F0  22DA               	addwfc	fsr2h,f,c
 14888  0121F2  EE10 F004          	lfsr	1,4
 14889  0121F6  5001               	movf	ringbuf_num@rb,w,c
 14890  0121F8  26E1               	addwf	fsr1l,f,c
 14891  0121FA  5002               	movf	ringbuf_num@rb+1,w,c
 14892  0121FC  22E2               	addwfc	fsr1h,f,c
 14893  0121FE  50DE               	movf	postinc2,w,c
 14894  012200  5CE6               	subwf	postinc1,w,c
 14895  012202  50DE               	movf	postinc2,w,c
 14896  012204  58E6               	subwfb	postinc1,w,c
 14897  012206  A0D8               	btfss	status,0,c
 14898  012208  D01F               	goto	i2l5332
 14899                           
 14900                           ;My_header\My_ringbuf.h: 33: return (rb->head - rb->tail);
 14901  01220A  EE20 F004          	lfsr	2,4
 14902  01220E  5001               	movf	ringbuf_num@rb,w,c
 14903  012210  26D9               	addwf	fsr2l,f,c
 14904  012212  5002               	movf	ringbuf_num@rb+1,w,c
 14905  012214  22DA               	addwfc	fsr2h,f,c
 14906  012216  CFDE F003          	movff	postinc2,??_ringbuf_num
 14907  01221A  CFDD F004          	movff	postdec2,??_ringbuf_num+1
 14908  01221E  EE20 F006          	lfsr	2,6
 14909  012222  5001               	movf	ringbuf_num@rb,w,c
 14910  012224  26D9               	addwf	fsr2l,f,c
 14911  012226  5002               	movf	ringbuf_num@rb+1,w,c
 14912  012228  22DA               	addwfc	fsr2h,f,c
 14913  01222A  CFDE F005          	movff	postinc2,??_ringbuf_num+2
 14914  01222E  CFDD F006          	movff	postdec2,??_ringbuf_num+3
 14915  012232  1E05               	comf	??_ringbuf_num+2,f,c
 14916  012234  1E06               	comf	??_ringbuf_num+3,f,c
 14917  012236  4A05               	infsnz	??_ringbuf_num+2,f,c
 14918  012238  2A06               	incf	??_ringbuf_num+3,f,c
 14919  01223A  5003               	movf	??_ringbuf_num,w,c
 14920  01223C  2405               	addwf	??_ringbuf_num+2,w,c
 14921  01223E  6E01               	movwf	?_ringbuf_num,c
 14922  012240  5004               	movf	??_ringbuf_num+1,w,c
 14923  012242  2006               	addwfc	??_ringbuf_num+3,w,c
 14924  012244  6E02               	movwf	?_ringbuf_num+1,c
 14925                           
 14926                           ;My_header\My_ringbuf.h: 34: } else {
 14927  012246  0012               	return	
 14928  012248                     i2l5332:
 14929                           
 14930                           ;My_header\My_ringbuf.h: 35: return (rb->size + rb->head - rb->tail);
 14931  012248  EE20 F004          	lfsr	2,4
 14932  01224C  5001               	movf	ringbuf_num@rb,w,c
 14933  01224E  26D9               	addwf	fsr2l,f,c
 14934  012250  5002               	movf	ringbuf_num@rb+1,w,c
 14935  012252  22DA               	addwfc	fsr2h,f,c
 14936  012254  CFDE F003          	movff	postinc2,??_ringbuf_num
 14937  012258  CFDD F004          	movff	postdec2,??_ringbuf_num+1
 14938  01225C  EE20 F002          	lfsr	2,2
 14939  012260  5001               	movf	ringbuf_num@rb,w,c
 14940  012262  26D9               	addwf	fsr2l,f,c
 14941  012264  5002               	movf	ringbuf_num@rb+1,w,c
 14942  012266  22DA               	addwfc	fsr2h,f,c
 14943  012268  CFDE F005          	movff	postinc2,??_ringbuf_num+2
 14944  01226C  CFDD F006          	movff	postdec2,??_ringbuf_num+3
 14945  012270  EE20 F006          	lfsr	2,6
 14946  012274  5001               	movf	ringbuf_num@rb,w,c
 14947  012276  26D9               	addwf	fsr2l,f,c
 14948  012278  5002               	movf	ringbuf_num@rb+1,w,c
 14949  01227A  22DA               	addwfc	fsr2h,f,c
 14950  01227C  CFDE F007          	movff	postinc2,??_ringbuf_num+4
 14951  012280  CFDD F008          	movff	postdec2,??_ringbuf_num+5
 14952  012284  1E07               	comf	??_ringbuf_num+4,f,c
 14953  012286  1E08               	comf	??_ringbuf_num+5,f,c
 14954  012288  4A07               	infsnz	??_ringbuf_num+4,f,c
 14955  01228A  2A08               	incf	??_ringbuf_num+5,f,c
 14956  01228C  5005               	movf	??_ringbuf_num+2,w,c
 14957  01228E  2607               	addwf	??_ringbuf_num+4,f,c
 14958  012290  5006               	movf	??_ringbuf_num+3,w,c
 14959  012292  2208               	addwfc	??_ringbuf_num+5,f,c
 14960  012294  5003               	movf	??_ringbuf_num,w,c
 14961  012296  2407               	addwf	??_ringbuf_num+4,w,c
 14962  012298  6E01               	movwf	?_ringbuf_num,c
 14963  01229A  5004               	movf	??_ringbuf_num+1,w,c
 14964  01229C  2008               	addwfc	??_ringbuf_num+5,w,c
 14965  01229E  6E02               	movwf	?_ringbuf_num+1,c
 14966  0122A0  0012               	return	
 14967  0122A2                     __end_of_ringbuf_num:
 14968                           	opt stack 0
 14969                           pclatu	equ	0xFFB
 14970                           pclath	equ	0xFFA
 14971                           tblptru	equ	0xFF8
 14972                           tblptrh	equ	0xFF7
 14973                           tblptrl	equ	0xFF6
 14974                           tablat	equ	0xFF5
 14975                           prodh	equ	0xFF4
 14976                           prodl	equ	0xFF3
 14977                           intcon	equ	0xFF2
 14978                           intcon2	equ	0xFF1
 14979                           indf0	equ	0xFEF
 14980                           postinc0	equ	0xFEE
 14981                           fsr0h	equ	0xFEA
 14982                           fsr0l	equ	0xFE9
 14983                           wreg	equ	0xFE8
 14984                           postinc1	equ	0xFE6
 14985                           postdec1	equ	0xFE5
 14986                           fsr1h	equ	0xFE2
 14987                           fsr1l	equ	0xFE1
 14988                           indf2	equ	0xFDF
 14989                           postinc2	equ	0xFDE
 14990                           postdec2	equ	0xFDD
 14991                           plusw2	equ	0xFDB
 14992                           fsr2h	equ	0xFDA
 14993                           fsr2l	equ	0xFD9
 14994                           status	equ	0xFD8
 14995                           pclatu	equ	0xFFB
 14996                           pclath	equ	0xFFA
 14997                           tblptru	equ	0xFF8
 14998                           tblptrh	equ	0xFF7
 14999                           tblptrl	equ	0xFF6
 15000                           tablat	equ	0xFF5
 15001                           prodh	equ	0xFF4
 15002                           prodl	equ	0xFF3
 15003                           intcon	equ	0xFF2
 15004                           intcon2	equ	0xFF1
 15005                           indf0	equ	0xFEF
 15006                           postinc0	equ	0xFEE
 15007                           fsr0h	equ	0xFEA
 15008                           fsr0l	equ	0xFE9
 15009                           wreg	equ	0xFE8
 15010                           postinc1	equ	0xFE6
 15011                           postdec1	equ	0xFE5
 15012                           fsr1h	equ	0xFE2
 15013                           fsr1l	equ	0xFE1
 15014                           indf2	equ	0xFDF
 15015                           postinc2	equ	0xFDE
 15016                           postdec2	equ	0xFDD
 15017                           plusw2	equ	0xFDB
 15018                           fsr2h	equ	0xFDA
 15019                           fsr2l	equ	0xFD9
 15020                           status	equ	0xFD8
 15021                           
 15022                           	psect	rparam
 15023  0000                     pclatu	equ	0xFFB
 15024                           pclath	equ	0xFFA
 15025                           tblptru	equ	0xFF8
 15026                           tblptrh	equ	0xFF7
 15027                           tblptrl	equ	0xFF6
 15028                           tablat	equ	0xFF5
 15029                           prodh	equ	0xFF4
 15030                           prodl	equ	0xFF3
 15031                           intcon	equ	0xFF2
 15032                           intcon2	equ	0xFF1
 15033                           indf0	equ	0xFEF
 15034                           postinc0	equ	0xFEE
 15035                           fsr0h	equ	0xFEA
 15036                           fsr0l	equ	0xFE9
 15037                           wreg	equ	0xFE8
 15038                           postinc1	equ	0xFE6
 15039                           postdec1	equ	0xFE5
 15040                           fsr1h	equ	0xFE2
 15041                           fsr1l	equ	0xFE1
 15042                           indf2	equ	0xFDF
 15043                           postinc2	equ	0xFDE
 15044                           postdec2	equ	0xFDD
 15045                           plusw2	equ	0xFDB
 15046                           fsr2h	equ	0xFDA
 15047                           fsr2l	equ	0xFD9
 15048                           status	equ	0xFD8
 15049                           
 15050                           	psect	temp
 15051  000040                     btemp:
 15052                           	opt stack 0
 15053  000040                     	ds	1
 15054  0000                     int$flags	set	btemp
 15055                           pclatu	equ	0xFFB
 15056                           pclath	equ	0xFFA
 15057                           tblptru	equ	0xFF8
 15058                           tblptrh	equ	0xFF7
 15059                           tblptrl	equ	0xFF6
 15060                           tablat	equ	0xFF5
 15061                           prodh	equ	0xFF4
 15062                           prodl	equ	0xFF3
 15063                           intcon	equ	0xFF2
 15064                           intcon2	equ	0xFF1
 15065                           indf0	equ	0xFEF
 15066                           postinc0	equ	0xFEE
 15067                           fsr0h	equ	0xFEA
 15068                           fsr0l	equ	0xFE9
 15069                           wreg	equ	0xFE8
 15070                           postinc1	equ	0xFE6
 15071                           postdec1	equ	0xFE5
 15072                           fsr1h	equ	0xFE2
 15073                           fsr1l	equ	0xFE1
 15074                           indf2	equ	0xFDF
 15075                           postinc2	equ	0xFDE
 15076                           postdec2	equ	0xFDD
 15077                           plusw2	equ	0xFDB
 15078                           fsr2h	equ	0xFDA
 15079                           fsr2l	equ	0xFD9
 15080                           status	equ	0xFD8


Data Sizes:
    Strings     191
    Constant    229
    Data        5
    BSS         369
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      63
    BANK0           160     40     160
    BANK1           256    201     254
    BANK2           256    200     242
    BANK3           256      0     128
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          192      0       0
    BANK14          176      0       0

Pointer List with Targets:

    CDCDataInHandle	PTR void  size(2) Largest target is 48
		 -> NULL(NULL[0]), BDT(BIGRAMl[48]), 

    CDCDataOutHandle	PTR void  size(2) Largest target is 48
		 -> NULL(NULL[0]), BDT(BIGRAMl[48]), 

    pCDCDst.wRom	PTR const unsigned int  size(2) Largest target is 0

    pCDCDst.bRom	PTR const unsigned char  size(2) Largest target is 0

    pCDCDst.wRam	PTR unsigned int  size(2) Largest target is 0

    pCDCDst.bRam	PTR unsigned char  size(2) Largest target is 0

    S3919_POINTER$wRom	PTR const unsigned int  size(2) Largest target is 0

    pCDCSrc.wRom	PTR const unsigned int  size(2) Largest target is 0

    S3919_POINTER$bRom	PTR const unsigned char  size(2) Largest target is 0

    pCDCSrc.bRom	PTR const unsigned char  size(2) Largest target is 0

    S3919_POINTER$wRam	PTR unsigned int  size(2) Largest target is 0

    pCDCSrc.wRam	PTR unsigned int  size(2) Largest target is 0

    S3919_POINTER$bRam	PTR unsigned char  size(2) Largest target is 0

    pCDCSrc.bRam	PTR unsigned char  size(2) Largest target is 0

    USB_SD_Ptr	const PTR const unsigned char [3] size(2) Largest target is 52
		 -> sd002(CODE[52]), sd001(CODE[52]), sd000(CODE[4]), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(2) Largest target is 67
		 -> configDescriptor1(CODE[67]), 

    pDst	PTR volatile unsigned char  size(2) Largest target is 8
		 -> CtrlTrfData(BIGRAMh[8]), NULL(NULL[0]), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(2) Largest target is 48
		 -> NULL(NULL[0]), BDT(BIGRAMl[48]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(2) Largest target is 48
		 -> NULL(NULL[0]), BDT(BIGRAMl[48]), 

    sp__USBTransferOnePacket	PTR void  size(2) Largest target is 48
		 -> NULL(NULL[0]), BDT(BIGRAMl[48]), 

    pBDTEntryOut	PTR volatile struct __BDT[3] size(2) Largest target is 48
		 -> NULL(NULL[0]), BDT(BIGRAMl[48]), 

    pBDTEntryIn	PTR volatile struct __BDT[3] size(2) Largest target is 48
		 -> NULL(NULL[0]), BDT(BIGRAMl[48]), 

    S2652$pFunc	PTR FTN()void  size(3) Largest target is 0
		 -> Absolute function(), 

    outPipes.pFunc	PTR FTN()void  size(3) Largest target is 0
		 -> Absolute function(), 

    S2642$wRam	PTR unsigned int  size(2) Largest target is 0

    outPipes.pDst.wRam	PTR unsigned int  size(2) Largest target is 0

    S2642$bRam	PTR unsigned char  size(2) Largest target is 0

    outPipes.pDst.bRam	PTR unsigned char  size(2) Largest target is 0

    S2618$wRom	PTR const unsigned int  size(2) Largest target is 0

    inPipes.pSrc.wRom	PTR const unsigned int  size(2) Largest target is 0

    S2618$wRam	PTR unsigned int  size(2) Largest target is 0

    inPipes.pSrc.wRam	PTR unsigned int  size(2) Largest target is 0

    S2618$bRom	PTR const unsigned char  size(2) Largest target is 0

    inPipes.pSrc.bRom	PTR const unsigned char  size(2) Largest target is 0

    S2618$bRam	PTR unsigned char  size(2) Largest target is 0

    inPipes.pSrc.bRam	PTR unsigned char  size(2) Largest target is 0

    sp__memset	PTR void  size(2) Largest target is 48
		 -> USBAlternateInterface(BANK0[2]), BDT(BIGRAMl[48]), UEP1(SFR_1[1]), 

    RTCC_adjust_time_button@cnt_dec	PTR struct button size(2) Largest target is 4
		 -> ct1(BANK0[4]), 

    RTCC_adjust_time_button@cnt_inc	PTR struct button size(2) Largest target is 4
		 -> ct0(BANK0[4]), 

    RTCC_adjust_time_button@mode	PTR struct button size(2) Largest target is 4
		 -> ctm(BANK0[4]), 

    RTCC_adjust_time_dec@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    RTCC_adjust_time_dec@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK1[7]), 

    RTCC_adjust_time_inc@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    RTCC_adjust_time_inc@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK1[7]), 

    display_time_1602@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    display_time_1602@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK1[7]), 

    my_utoa@str	PTR unsigned char  size(2) Largest target is 10
		 -> display_LCD@str(BANK1[10]), display_dec@str(BANK1[10]), 

    RTCC_from_epoch@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    RTCC_from_epoch@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK1[7]), 

    RTCC_from_RTCC@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    RTCC_from_RTCC@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK1[7]), 

    caltime_to_epoch@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    caltime_to_epoch@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK1[7]), 

    epoch_to_caltime@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK1[7]), 

    epoch_to_caltime@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    caltime_to_RTCC@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK1[7]), 

    RTCC_to_caltime@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK1[7]), 

    get_quot_rem@quot	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_to_caltime@num(BANK1[4]), 

    I2C_LCD_Puts@s	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_20(CODE[9]), STR_19(CODE[17]), STR_18(CODE[13]), STR_17(CODE[16]), 
		 -> STR_16(CODE[20]), STR_15(CODE[19]), STR_14(CODE[2]), STR_13(CODE[3]), 
		 -> STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[4]), display_LCD@str(BANK1[10]), 
		 -> STR_9(CODE[13]), STR_8(CODE[17]), STR_7(CODE[11]), STR_6(CODE[11]), 
		 -> STR_5(CODE[12]), STR_4(CODE[12]), STR_3(CODE[10]), STR_2(CODE[10]), 
		 -> weekday_3char(CODE[28]), STR_1(CODE[3]), display_dec@str(BANK1[10]), 

    button_timer_interrupt@bt	PTR struct button size(2) Largest target is 4
		 -> ctm(BANK0[4]), ct2(BANK0[4]), ct1(BANK0[4]), ct0(BANK0[4]), 

    delay_set@d	PTR struct Delay size(2) Largest target is 3
		 -> delay_display(BANK0[3]), 

    delay_timer_interrupt@d	PTR struct Delay size(2) Largest target is 3
		 -> delay_display(BANK0[3]), 

    rx_buf.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@rxbuf(BANK2[200]), main_init@txbuf(BANK1[200]), 

    tx_buf.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@rxbuf(BANK2[200]), main_init@txbuf(BANK1[200]), 

    ringbuf_delete@rb.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@rxbuf(BANK2[200]), main_init@txbuf(BANK1[200]), 

    ringbuf_backspace@rb.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@rxbuf(BANK2[200]), main_init@txbuf(BANK1[200]), 

    ringbuf_pop@rb.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@rxbuf(BANK2[200]), main_init@txbuf(BANK1[200]), 

    ringbuf_pop@rb	PTR struct ringbuf size(2) Largest target is 9
		 -> tx_buf(BANK1[8]), 

    ringbuf_put@rb.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@rxbuf(BANK2[200]), main_init@txbuf(BANK1[200]), 

    ringbuf_put@rb	PTR struct ringbuf size(2) Largest target is 9
		 -> rx_buf(BANK2[8]), tx_buf(BANK1[8]), 

    ringbuf_num@rb.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@rxbuf(BANK2[200]), main_init@txbuf(BANK1[200]), 

    ringbuf_num@rb	PTR struct ringbuf size(2) Largest target is 9
		 -> rx_buf(BANK2[8]), tx_buf(BANK1[8]), 

    S790ringbuf$buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@rxbuf(BANK2[200]), main_init@txbuf(BANK1[200]), 

    ringbuf_init@rb.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@rxbuf(BANK2[200]), main_init@txbuf(BANK1[200]), 

    ringbuf_init@internal_buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@rxbuf(BANK2[200]), main_init@txbuf(BANK1[200]), 

    ringbuf_init@rb	PTR struct ringbuf size(2) Largest target is 9
		 -> rx_buf(BANK2[8]), tx_buf(BANK1[8]), 


Critical Paths under _main in COMRAM

    _main->_CTMU_read
    _main->_LED
    _main->_OUT
    _sleep_loop->_LED
    _sleep_loop->_OUT
    _port_loop->_LED
    _port_loop->_OUT
    _port_loop->_sw_flag_clear
    _port_loop->_sw_flag_read
    _display_LCD->___llmod
    _display_LCD->___lwmod
    _my_utoa->___llmod
    _my_utoa->___lwmod
    _ctmu_loop->_CTMU_read
    _button_timer_interrupt->_CTMU_read
    ___lwdiv->_CTMU_read
    ___lwdiv->___lwmod
    _RTCC_adjust_time_inc->_month_length
    _RTCC_adjust_time_dec->_month_length
    _epoch_to_caltime->_month_length
    _caltime_to_RTCC->_d_to_x
    _Auto_cut->_ADC
    _Auto_cut->_IN
    _Auto_cut->_OUT
    ___wmul->_ADC
    ___wmul->_IN
    _main_init->_ADC_init
    _main_init->_timer0_init
    _main_init->_timer1_init
    _main_init->_timer3_init
    _I2C_LCD_init->_Delay_ms
    _I2C_Stop->_I2C_IdleCheck
    _I2C_Start->_I2C_IdleCheck
    _I2C_Send->_I2C_IdleCheck
    _caltime_to_epoch->_month_length
    ___lmul->_month_length
    _RTCC_to_caltime->_x_to_d

Critical Paths under _ISR in COMRAM

    _ISR->_UART_ISR
    _ISR->_integrating
    _ISR->_tx_send
    _tx_send->_ringbuf_put
    _lchika->i2___awdiv
    _integrating->i2___lldiv
    _UART_ISR->_ringbuf_pop
    _UART_ISR->_ringbuf_put
    _ringbuf_put->_ringbuf_num
    _ringbuf_pop->_ringbuf_num

Critical Paths under _main in BANK0

    _port_loop->_delay_set
    _display_dec->_my_utoa
    _my_utoa->___lwdiv
    _I2C_LCD_Putc->_I2C_Start
    _display_port->_I2C_LCD_SetCursor
    _I2C_LCD_SetCursor->_I2C_LCD_Command
    _I2C_LCD_Puts->_I2C_Start
    ___llmod->___lldiv
    _ctmu_loop->_button_timer_interrupt
    _button_timer_interrupt->___lwdiv
    ___lwdiv->_CTMU_read
    _CTMU_read->___lldiv
    _RTCC_from_epoch->_epoch_to_caltime
    _epoch_to_caltime->_get_quot_rem
    _get_quot_rem->___lmul
    _d_to_x->___awdiv
    _Auto_cut->___wmul
    ___wmul->_ADC
    _main_init->_ringbuf_init
    _I2C_LCD_init->_I2C_LCD_Clear
    _I2C_LCD_Clear->_I2C_LCD_Command
    _I2C_LCD_Command->_I2C_Start
    _I2C_Stop->_I2C_IdleCheck
    _I2C_Start->_I2C_IdleCheck
    _I2C_Send->_I2C_IdleCheck
    _RTCC_from_RTCC->_caltime_to_epoch
    _caltime_to_epoch->___lmul
    _month_length->___awmod
    ___lmul->___lldiv
    _RTCC_to_caltime->_x_to_d

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_main_init
    _sleep_loop->_RTCC_from_RTCC
    _normal_mode_loop->_RTCC_adjust_time_button
    _normal_mode_loop->_display_LCD
    _display_LCD->_display_time_1602
    _display_time_1602->_display_dec
    _RTCC_adjust_time_button->_RTCC_adjust_time_dec
    _RTCC_adjust_time_button->_RTCC_adjust_time_inc
    _RTCC_adjust_time_inc->_RTCC_from_epoch
    _RTCC_adjust_time_dec->_RTCC_from_epoch
    _RTCC_from_epoch->_epoch_to_caltime
    _RTCC_loop->_RTCC_from_RTCC

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_main_init

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  168542
                                            200 BANK1      1     1      0
                          _CTMU_read
                                _LED
                                _OUT
                     _RTCC_from_RTCC
                    _RTCC_from_epoch
                          _RTCC_loop
                            ___lwdiv
                          _main_init
                   _normal_mode_loop
                         _sleep_loop
 ---------------------------------------------------------------------------------
 (1) _sleep_loop                                           1     1      0   15110
                                              4 BANK1      1     1      0
                      _I2C_LCD_Clear
                       _I2C_LCD_Puts
                  _I2C_LCD_SetCursor
                                _LED
                                _OUT
                     _RTCC_from_RTCC
 ---------------------------------------------------------------------------------
 (1) _normal_mode_loop                                     0     0      0  119726
                           _Auto_cut
            _RTCC_adjust_time_button
                          _ctmu_loop
                        _display_LCD
                          _port_loop
 ---------------------------------------------------------------------------------
 (2) _port_loop                                            1     1      0    4031
                                              4 BANK0      1     1      0
                                _LED
                                _OUT
                          _delay_set
                      _sw_flag_clear
                       _sw_flag_read
 ---------------------------------------------------------------------------------
 (3) _sw_flag_read                                         3     1      2     748
                                             31 COMRAM     1     1      0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _sw_flag_clear                                        3     1      2     644
                                             31 COMRAM     1     1      0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _delay_set                                            4     0      4     509
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _LED                                                  2     1      1     643
                                             31 COMRAM     1     0      1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _display_LCD                                         14    14      0   55175
                                             16 BANK1     14    14      0
                      _I2C_LCD_Clear
                       _I2C_LCD_Putc
                       _I2C_LCD_Puts
                  _I2C_LCD_SetCursor
                            ___lldiv
                            ___llmod
                            ___lwdiv
                            ___lwmod
                       _display_port
                  _display_time_1602
                            _my_utoa
 ---------------------------------------------------------------------------------
 (3) _display_time_1602                                    5     1      4   26370
                                             11 BANK1      5     1      4
                       _I2C_LCD_Putc
                       _I2C_LCD_Puts
                  _I2C_LCD_SetCursor
                     _RTCC_from_RTCC
                        _display_dec
 ---------------------------------------------------------------------------------
 (4) _display_dec                                         12    11      1   12252
                                             36 BANK0      1     0      1
                                              0 BANK1     11    11      0
                       _I2C_LCD_Puts
                            _my_utoa
 ---------------------------------------------------------------------------------
 (3) _my_utoa                                              8     3      5    7145
                                             28 BANK0      8     3      5
                            ___lldiv (ARG)
                            ___llmod (ARG)
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4    1688
                                             31 COMRAM     1     1      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _I2C_LCD_Putc                                         2     2      0     667
                                              3 BANK0      2     2      0
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _display_port                                         0     0      0    6043
                       _I2C_LCD_Puts
                  _I2C_LCD_SetCursor
 ---------------------------------------------------------------------------------
 (2) _I2C_LCD_SetCursor                                    4     3      1    2430
                                              5 BANK0      4     3      1
                    _I2C_LCD_Command
 ---------------------------------------------------------------------------------
 (2) _I2C_LCD_Puts                                         5     3      2    3613
                                              3 BANK0      5     3      2
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8    1064
                                             31 COMRAM     1     1      0
                                             13 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _ctmu_loop                                            0     0      0    7241
                          _CTMU_read
                            ___lwdiv
             _button_timer_interrupt
 ---------------------------------------------------------------------------------
 (3) _button_timer_interrupt                               5     2      3    1979
                                             28 BANK0      5     2      3
                          _CTMU_read (ARG)
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4    3291
                                             21 BANK0      7     3      4
                          _CTMU_read (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _CTMU_read                                            9     7      2    1971
                                             31 COMRAM     1     1      0
                                             13 BANK0      8     6      2
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _RTCC_adjust_time_button                              6     0      6   44923
                                             24 BANK1      6     0      6
            _RTCC_adjust_time_cursor
               _RTCC_adjust_time_dec
               _RTCC_adjust_time_inc
            _RTCC_adjust_time_toggle
 ---------------------------------------------------------------------------------
 (3) _RTCC_adjust_time_toggle                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RTCC_adjust_time_inc                                10     6      4   22135
                                             14 BANK1     10     6      4
                     _RTCC_from_RTCC
                    _RTCC_from_epoch
                             ___lmul
                       _month_length
 ---------------------------------------------------------------------------------
 (3) _RTCC_adjust_time_dec                                10     6      4   22135
                                             14 BANK1     10     6      4
                     _RTCC_from_RTCC
                    _RTCC_from_epoch
                             ___lmul
                       _month_length
 ---------------------------------------------------------------------------------
 (4) _RTCC_from_epoch                                      4     0      4   10277
                                             10 BANK1      4     0      4
                    _caltime_to_RTCC
                   _epoch_to_caltime
 ---------------------------------------------------------------------------------
 (5) _epoch_to_caltime                                    16    12      4    8282
                                             33 BANK0      6     2      4
                                              0 BANK1     10    10      0
                       _get_quot_rem
                       _month_length
 ---------------------------------------------------------------------------------
 (6) _get_quot_rem                                         8     4      4    4816
                                             25 BANK0      8     4      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1835
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _caltime_to_RTCC                                      2     0      2    1278
                                              8 BANK0      2     0      2
                             _d_to_x
 ---------------------------------------------------------------------------------
 (6) _d_to_x                                               1     1      0     853
                                             31 COMRAM     1     1      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     791
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _RTCC_adjust_time_cursor                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Auto_cut                                             3     3      0    8356
                                              9 BANK0      3     3      0
                                _ADC
                                 _IN
                                _OUT
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    7272
                                              3 BANK0      6     2      4
                                _ADC (ARG)
                                 _IN (ARG)
 ---------------------------------------------------------------------------------
 (2) _OUT                                                  2     1      1     706
                                             31 COMRAM     1     0      1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _IN                                                   1     1      0      31
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ADC                                                  4     2      2      31
                                             31 COMRAM     1     1      0
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _main_init                                          400   400      0    2784
                                              0 BANK1    200   200      0
                                              0 BANK2    200   200      0
                           _ADC_init
                          _CTMU_init
                       _I2C_LCD_init
                           _I2C_init
                          _RTCC_init
                          _UART_init
                       _ringbuf_init
                        _timer0_init
                        _timer1_init
                        _timer3_init
 ---------------------------------------------------------------------------------
 (2) _timer3_init                                          2     2      0      31
                                             31 COMRAM     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _timer1_init                                          3     2      1     197
                                             31 COMRAM     1     0      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _timer0_init                                          2     2      0      62
                                             31 COMRAM     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ringbuf_init                                         6     0      6     810
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RTCC_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_LCD_init                                         0     0      0    1573
                           _Delay_ms
                      _I2C_LCD_Clear
                    _I2C_LCD_Command
 ---------------------------------------------------------------------------------
 (2) _I2C_LCD_Clear                                        1     1      0     667
                                              5 BANK0      1     1      0
                    _I2C_LCD_Command
 ---------------------------------------------------------------------------------
 (3) _I2C_LCD_Command                                      2     2      0     667
                                              3 BANK0      2     2      0
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0      31
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            2     1      1     509
                                              1 BANK0      2     1      1
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (4) _I2C_Send                                             1     1      0      62
                                              1 BANK0      1     1      0
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (5) _I2C_IdleCheck                                        2     2      0      31
                                             31 COMRAM     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay_ms                                             3     1      2     239
                                             31 COMRAM     1     1      0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CTMU_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             1     1      0      31
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _RTCC_loop                                            0     0      0    6921
                     _RTCC_from_RTCC
 ---------------------------------------------------------------------------------
 (2) _RTCC_from_RTCC                                       4     0      4    6921
                                              0 BANK1      4     0      4
                    _RTCC_to_caltime
                   _caltime_to_epoch
 ---------------------------------------------------------------------------------
 (3) _caltime_to_epoch                                    15    11      4    4986
                                             25 BANK0     15    11      4
                             ___lmul
                       _month_length
 ---------------------------------------------------------------------------------
 (4) _month_length                                         6     5      1    2075
                                             31 COMRAM     1     0      1
                                              6 BANK0      5     5      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     849
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8    1960
                                             13 BANK0     12     4      8
                            ___lldiv (ARG)
                       _month_length (ARG)
 ---------------------------------------------------------------------------------
 (3) _RTCC_to_caltime                                      3     1      2     386
                                              1 BANK0      3     1      2
                             _x_to_d
 ---------------------------------------------------------------------------------
 (4) _x_to_d                                               2     2      0      62
                                             31 COMRAM     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 15    15      0    6185
                                             16 COMRAM    15    15      0
                           _UART_ISR
                  _charge_time_count
              _delay_timer_interrupt
                        _integrating
                             _lchika
                            _tx_send
 ---------------------------------------------------------------------------------
 (9) _tx_send                                              1     1      0    1620
                                             15 COMRAM     1     1      0
                        _ringbuf_put
 ---------------------------------------------------------------------------------
 (9) _lchika                                               4     4      0    1020
                                              8 COMRAM     4     4      0
                              i2_LED
                          i2___awdiv
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (10) i2___awdiv                                           8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (10) i2_LED                                               2     1      1     166
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (9) _integrating                                          3     3      0     348
                                             13 COMRAM     3     3      0
                          i2___lldiv
 ---------------------------------------------------------------------------------
 (10) i2___lldiv                                          13     5      8     214
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (9) _delay_timer_interrupt                                4     2      2     177
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _charge_time_count                                    3     3      0      90
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) _UART_ISR                                             1     1      0    2907
                                             15 COMRAM     1     1      0
                        _ringbuf_num
                        _ringbuf_pop
                        _ringbuf_put
 ---------------------------------------------------------------------------------
 (10) _ringbuf_put                                         7     4      3    1598
                                              8 COMRAM     7     4      3
                        _ringbuf_num
 ---------------------------------------------------------------------------------
 (10) _ringbuf_pop                                         7     5      2     776
                                              8 COMRAM     7     5      2
                        _ringbuf_num
 ---------------------------------------------------------------------------------
 (11) _ringbuf_num                                         8     6      2     510
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CTMU_read
     ___lldiv
   _LED
   _OUT
   _RTCC_from_RTCC
     _RTCC_to_caltime
       _x_to_d
     _caltime_to_epoch
       ___lmul
         ___lldiv (ARG)
         _month_length (ARG)
           ___awmod
       _month_length
         ___awmod
   _RTCC_from_epoch
     _caltime_to_RTCC
       _d_to_x
         ___awdiv
     _epoch_to_caltime
       _get_quot_rem
         ___lldiv
         ___lmul
           ___lldiv (ARG)
           _month_length (ARG)
             ___awmod
       _month_length
         ___awmod
   _RTCC_loop
     _RTCC_from_RTCC
       _RTCC_to_caltime
         _x_to_d
       _caltime_to_epoch
         ___lmul
           ___lldiv (ARG)
           _month_length (ARG)
             ___awmod
         _month_length
           ___awmod
   ___lwdiv
     _CTMU_read (ARG)
       ___lldiv
     ___lwmod (ARG)
   _main_init
     _ADC_init
     _CTMU_init
     _I2C_LCD_init
       _Delay_ms
       _I2C_LCD_Clear
         _I2C_LCD_Command
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
       _I2C_LCD_Command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     _I2C_init
     _RTCC_init
     _UART_init
     _ringbuf_init
     _timer0_init
     _timer1_init
     _timer3_init
   _normal_mode_loop
     _Auto_cut
       _ADC
       _IN
       _OUT
       ___wmul
         _ADC (ARG)
         _IN (ARG)
     _RTCC_adjust_time_button
       _RTCC_adjust_time_cursor
       _RTCC_adjust_time_dec
         _RTCC_from_RTCC
           _RTCC_to_caltime
             _x_to_d
           _caltime_to_epoch
             ___lmul
               ___lldiv (ARG)
               _month_length (ARG)
                 ___awmod
             _month_length
               ___awmod
         _RTCC_from_epoch
           _caltime_to_RTCC
             _d_to_x
               ___awdiv
           _epoch_to_caltime
             _get_quot_rem
               ___lldiv
               ___lmul
                 ___lldiv (ARG)
                 _month_length (ARG)
                   ___awmod
             _month_length
               ___awmod
         ___lmul
           ___lldiv (ARG)
           _month_length (ARG)
             ___awmod
         _month_length
           ___awmod
       _RTCC_adjust_time_inc
         _RTCC_from_RTCC
           _RTCC_to_caltime
             _x_to_d
           _caltime_to_epoch
             ___lmul
               ___lldiv (ARG)
               _month_length (ARG)
                 ___awmod
             _month_length
               ___awmod
         _RTCC_from_epoch
           _caltime_to_RTCC
             _d_to_x
               ___awdiv
           _epoch_to_caltime
             _get_quot_rem
               ___lldiv
               ___lmul
                 ___lldiv (ARG)
                 _month_length (ARG)
                   ___awmod
             _month_length
               ___awmod
         ___lmul
           ___lldiv (ARG)
           _month_length (ARG)
             ___awmod
         _month_length
           ___awmod
       _RTCC_adjust_time_toggle
     _ctmu_loop
       _CTMU_read
         ___lldiv
       ___lwdiv
         _CTMU_read (ARG)
           ___lldiv
         ___lwmod (ARG)
       _button_timer_interrupt
         _CTMU_read (ARG)
           ___lldiv
         ___lwdiv (ARG)
           _CTMU_read (ARG)
             ___lldiv
           ___lwmod (ARG)
     _display_LCD
       _I2C_LCD_Clear
         _I2C_LCD_Command
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
       _I2C_LCD_Putc
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
       _I2C_LCD_Puts
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
       _I2C_LCD_SetCursor
         _I2C_LCD_Command
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lwdiv
         _CTMU_read (ARG)
           ___lldiv
         ___lwmod (ARG)
       ___lwmod
       _display_port
         _I2C_LCD_Puts
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
         _I2C_LCD_SetCursor
           _I2C_LCD_Command
             _I2C_Send
               _I2C_IdleCheck
             _I2C_Start
               _I2C_IdleCheck
             _I2C_Stop
               _I2C_IdleCheck
       _display_time_1602
         _I2C_LCD_Putc
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
         _I2C_LCD_Puts
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
         _I2C_LCD_SetCursor
           _I2C_LCD_Command
             _I2C_Send
               _I2C_IdleCheck
             _I2C_Start
               _I2C_IdleCheck
             _I2C_Stop
               _I2C_IdleCheck
         _RTCC_from_RTCC
           _RTCC_to_caltime
             _x_to_d
           _caltime_to_epoch
             ___lmul
               ___lldiv (ARG)
               _month_length (ARG)
                 ___awmod
             _month_length
               ___awmod
         _display_dec
           _I2C_LCD_Puts
             _I2C_Send
               _I2C_IdleCheck
             _I2C_Start
               _I2C_IdleCheck
             _I2C_Stop
               _I2C_IdleCheck
           _my_utoa
             ___lldiv (ARG)
             ___llmod (ARG)
               ___lldiv (ARG)
             ___lwdiv (ARG)
               _CTMU_read (ARG)
                 ___lldiv
               ___lwmod (ARG)
             ___lwmod (ARG)
       _my_utoa
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lwdiv (ARG)
           _CTMU_read (ARG)
             ___lldiv
           ___lwmod (ARG)
         ___lwmod (ARG)
     _port_loop
       _LED
       _OUT
       _delay_set
       _sw_flag_clear
       _sw_flag_read
   _sleep_loop
     _I2C_LCD_Clear
       _I2C_LCD_Command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     _I2C_LCD_Puts
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
     _I2C_LCD_SetCursor
       _I2C_LCD_Command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     _LED
     _OUT
     _RTCC_from_RTCC
       _RTCC_to_caltime
         _x_to_d
       _caltime_to_epoch
         ___lmul
           ___lldiv (ARG)
           _month_length (ARG)
             ___awmod
         _month_length
           ___awmod

 _ISR (ROOT)
   _UART_ISR
     _ringbuf_num
     _ringbuf_pop
       _ringbuf_num
     _ringbuf_put
       _ringbuf_num
   _charge_time_count
   _delay_timer_interrupt
   _integrating
     i2___lldiv
   _lchika
     i2_LED
     i2___awdiv
     i2___lwdiv
   _tx_send
     _ringbuf_put
       _ringbuf_num

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAMl            CFF      0       0      36        0.0%
BIGRAMh            170      0       0      35        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0      80      12       50.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100     C8      F2      10       94.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100     C9      FE       7       99.2%
BITBANK13           C0      0       0      31        0.0%
BANK13              C0      0       0      32        0.0%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     28      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      3F       1       67.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     34F       8        0.0%
DATA                 0      0     34F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Nov 10 22:47:35 2015

                               _I 0069                        _USB_SD_Ptr FE5B  
                               _S 01C9                                 _s 02C8  
                    ?_display_LCD 0001                 _charge_time_count 2EEE  
              __size_of_I2C_Start 0030                      ?_display_dec 00F7  
                              _IN 3170                                _d1 01E5  
                    ___awdiv@sign 00D8         __size_of_normal_mode_loop 00C6  
                              _ms 01E1               ___wmul@multiplicand 00D8  
              i2___lwdiv@dividend 0001                 ??_RTCC_from_epoch 0021  
                    _sw_flag_read 2A36                ?_charge_time_count 0001  
                    __CFG_CP0$OFF 000000                               ?_IN 0001  
                             IN@b 0020                               l132 2DEE  
                             l127 3074                               l403 1D4C  
                             l324 3310                               l500 2B88  
                             l309 30B2                               l333 301A  
                             l149 3138                               l237 2004  
                             l502 2B96                               _ADC 311C  
                             l504 2BA4                               l416 12B2  
                             l272 0538                               l273 0560  
                             l345 2FE2                               l506 2BB2  
                             l274 0586                               l275 05AC  
                             l276 05D0                               l605 2C3C  
                             l277 05F4                               l445 27BC  
                             l621 2F3C                               l278 0618  
                             l607 2C48                               l279 063C  
                             l623 2F48                               l608 2C54  
                             l624 2F54                               l553 2E5E  
                             l397 22A2                               l493 3328  
                             l498 2B7A                               _BDT 000D00  
                             _LED 2F36                               _ISR 0008  
                             _UIE 000F36                               _UIR 000F62  
                             _OUT 2C20                     ?_get_quot_rem 00EC  
                   ?_display_port 0001                caltime_to_epoch@ep 00EE  
              caltime_to_epoch@ct 00EC                               _ct0 00BA  
                             _ct1 00BE                               _ct2 00C2  
                             _ctm 00C6                     _sw_flag_clear 2D76  
                    ___awmod@sign 00D8                               prod 000FF3  
                             wreg 000FE8                        _TXSTA1bits 000FAD  
                  _USBDeviceState 0034       RTCC_adjust_time_button@mode 0118  
             ??_charge_time_count 0001           _RTCC_adjust_time_button 16A6  
         _RTCC_adjust_time_cursor 2B6C                              ??_IN 0020  
                    _I2C_LCD_Putc 2FB6                      _I2C_LCD_Puts 272C  
                            ?_ADC 00D3               sw_flag_read@bit_and 00D3  
         _RTCC_adjust_time_toggle 3318                              LED@b 00D3  
                            ?_LED 0020                 ??_I2C_LCD_Command 0021  
                            ?_ISR 0001                              ?_OUT 0020  
                    _I2C_LCD_init 2C78                              l1714 21D4  
                            l1724 271A                              l1767 29B6  
                            l1777 2B62                              OUT@b 00D3  
                            l8100 0B00                              l8110 0B88  
                            l8102 0B04                              l8120 27CA  
                            l8106 0B24                              l8122 27E8  
                            l8130 2828                              l8212 3148  
                            l9004 1E48                              l8214 3158  
                            l8070 1328                              l8206 2026  
                            l8310 1662                              l8312 1668  
                            l9016 1E70                              l9008 1E52  
              __CFG_WPFP$PAGE_127 000000                              l8090 0A9C  
                            l8074 1330                              l8410 105E  
                            l8402 0FCC                              l8250 06B0  
                            l8242 0660                              l8162 2C0E  
                            l9026 1EAE                              l8068 1324  
                            l8500 2D8C                              l9036 1EDC  
                            l9212 14F6                              l9204 14E0  
                            l8094 0AA6                              l8334 2BC0  
                            l8430 115C                              l8414 1078  
                            l8406 0FEA                              l8350 0D68  
                            l8342 0D30                              l8174 1FCA  
                            l8270 077E                              l8262 072A  
                            l8254 06D8                              l8246 0688  
                            l8510 1C88                              l8502 2D9E  
                            l9230 1552                              l8088 0A96  
                            l8424 10E8                              l8432 1174  
                            l8520 1CEA                              l9224 1544  
                            l9208 14EC                              l8426 10F0  
                            l8362 0E14                              l8354 0D86  
                            l8346 0D4A                              l8178 1FD4  
                            l8266 0754                              l8258 0700  
                            l8274 07A6                              l8522 1CFC  
                            l8514 1CB0                              l8530 1D36  
                            l8506 2DB0                              l8452 3178  
                            l8444 2C60                              l7804 20BC  
                            l7820 210C                              l8436 11A8  
                            l8372 0E84                              l8380 0F10  
                            l8516 1CC2                              l8462 3180  
                            l7806 20C8                              l8374 0E8C  
                            l8366 0E1E                              l8358 0DFA  
                            l8550 270A                              l8542 26B2  
                            l8526 1D24                              l7840 2588  
                            l8456 317C                              l8448 3174  
                            l8720 19C8                              l8704 18D2  
                            l7824 2120                              l7816 20FE  
                            l7808 20CE                              l8384 0F44  
                            l8544 26C0                              l8472 2F60  
                            l8480 2A54                              l8562 3088  
                            l8394 0F94                              l8378 0EF8  
                            l8546 26C6                              l8802 0486  
                            l7780 29F8                              l7860 25F4  
                            l7852 25D2                              l7844 259C  
                            l7836 2578                              l7772 32EA  
                            l8708 18DC                              l8732 0040  
                            l8484 2A6E                              l8476 2A3A  
                            l8820 07D4                              l7846 25A8  
                            l8662 30D8                              l8574 2DF0  
                            l8718 19AE                              l7870 2158  
                            l8398 0FAE                              l8750 017E  
                            l8734 005E                              l8726 0006  
                            l8494 2A94                              l7776 29D2  
                            l7848 25AE                              l7856 25E0  
                            l7928 1B56                              l7792 2088  
                            l7872 2168                              l7944 2966  
                            l8808 04A8                              l8760 01DE  
                            l8816 04CA                              l8488 2A88  
                            l8840 0856                              l8824 07DE  
                            l7882 21C2                              l7874 216E  
                            l8690 1744                              l8682 1712  
                            l7946 2972                              l8498 2D7A  
                            l7956 29A8                              l7948 2978  
                            l7972 2B56                              l7964 2B22  
                            l8860 092A                              l7798 209E  
                            l7990 275A                              l7966 2B2C  
                            l8790 0442                              l8870 097C  
                            l8846 088C                              l8838 0850  
                            l8696 1786                              l7968 2B32  
                            l8882 09EE                              l8962 1F10  
                            l8954 1F00                              l7996 278C  
                            l8796 0464                              l8868 0976  
                            l8956 1F04                              l7998 27B4  
                            l8894 0A5A                              l8886 0A0A  
                            l8982 1F88                              l8974 1F44  
                            l8958 1F08                              l8966 1F14  
                            STR_1 FFF1                              l8888 0A24  
                            l8968 1F32                              STR_2 FFDA  
                            STR_3 FFD0                              l8898 0A60  
                            l8978 1F58                              STR_4 FFAE  
                            STR_5 FFA2                              l8988 1F9A  
                            STR_6 FFC5                              STR_7 FFBA  
                            STR_8 FF67                              STR_9 FF88  
                            u8300 1B02                              u8310 1B32  
                            u9200 2F44                              u8330 1B48  
                            u8340 1B4A                              u8260 30BE  
                            u9140 2C44                              u9220 2F50  
                            u8350 1B9E                              _UCFG 000F39  
                            u8360 1BA0                              u8328 1B36  
                            u9160 2C50                              u9240 2F5C  
                            u8290 1B00                              u8450 277C  
                            u9180 2C5C                              u8460 27AE  
                            _UEP0 000F26                              _UEP1 000F27  
                            u9345 32A0                              u9425 1904  
                            u8457 2772                              u9346 32A2  
                            u9450 19A0                              u9610 1800  
                            u8467 27A4                              _UEIE 000F37  
                            u8660 205E                              u8820 0716  
                            u9620 1802                              u8830 0740  
                            u9630 1840                              u8840 076A  
                            u9640 1842                              u8665 2050  
                            u8850 0794                              u9650 1880  
                            u9660 1882                              u9670 18C0  
                            u9680 18C2                              _UEIR 000F63  
                            _UCON 000F65                              u9780 1E24  
                            u9786 1E26                   _CDCDataInHandle 0097  
                            _pDst 00A1                              _main 13B8  
        button_timer_interrupt@bt 00EF                              fsr0h 000FEA  
                            fsr1h 000FE2                i2___lwdiv@quotient 0005  
                            indf0 000FEF                              fsr0l 000FE9  
                            fsr2h 000FDA                       _BaudRateGen 02DE  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                  __end_of_I2C_Send 3318  
                            btemp 0040            __CFG_DSWDTOSC$T1OSCREF 000000  
                __end_of_I2C_Stop 3360                              pclat 000FFA  
                __end_of_I2C_init 3356                              prodh 000FF4  
                            prodl 000FF3                              start 0116  
                __end_of_ADC_init 32B0                     __CFG_IESO$OFF 000000  
      RTCC_adjust_time_dec@i_2090 0116                __size_of_CTMU_init 0028  
              __size_of_CTMU_read 00BE         __end_of_charge_time_count 2F36  
                    ___param_bank 000010                     _I2C_LCD_Clear 32CC  
                           ??_ADC 0020                             ADC@ch 00D5  
                   ADC_init@p_ref 0020                             ??_LED 0021  
                           ??_ISR 0011            __size_of_I2C_IdleCheck 001A  
                           ??_OUT 0021                 ??_RTCC_to_caltime 0021  
                   __CFG_PLLDIV$2 000000                      _BAUDCON1bits 000F7E  
                           ?_main 0001                    ??_get_quot_rem 0021  
                  ??_display_port 0021                   __end_of___awdiv 212A  
                           _ADRES 000FC3                             STR_10 FFED  
                           STR_11 FFF4                             STR_12 FFF7  
                           STR_20 FFE4                             STR_13 FFFA  
                           STR_14 FFFD                             STR_15 FF54  
                           STR_16 FF40                             STR_17 FF78  
                           STR_18 FF95                             STR_19 FF67  
                 __end_of___awmod 25FE                   __end_of___lldiv 21E6  
                           u10037 2FE8                             u10047 2788  
                           u10057 1FF0                             u10067 1FFA  
                           u10077 32DA                             u10087 3020  
                           u10097 314E                   ___awdiv@divisor 00D5  
                 __end_of___llmod 272C                             _LATB2 007C52  
                           _LATA5 007C4D                             _LATC2 007C5A  
                           _LATA6 007C4E                             _LATA7 007C4F  
                           _LATB6 007C56                             _LATB7 007C57  
                 __end_of___lwdiv 29C0                    ?_sw_flag_clear 00D3  
                 __end_of___lwmod 2B6C                             i2l207 2E40  
                           i2l208 2E3E                             i2l621 2F7C  
                           i2l623 2F88                             i2l624 2F94  
                           i2l772 00DA                             _UADDR 000F38  
                 ___awdiv@counter 00D7                             i2_LED 2F78  
                           _TMR1H 000FCF                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _USTAT 000F64               ___lmul@multiplicand 00E4  
                  __CFG_FCMEN$OFF 000000                  __end_of_UART_ISR 2E5E  
                           _sd000 FF3C                             _sd001 FEA6  
                           _sd002 FEDA              caltime_to_epoch@year 00F4  
              __size_of_UART_init 0020                             _colon 00B0  
              __size_of_RTCC_init 002E                __size_of_RTCC_loop 0048  
                           main@i 01C8                 __end_of_I2C_Start 30C2  
                           tablat 000FF5                   __end_of_my_utoa 2842  
                           plusw2 000FDB            ?_delay_timer_interrupt 0001  
                    ?_integrating 0001                             status 000FD8  
                 __end_of_tx_send 3344                  __end_of_Delay_ms 3170  
                  delay_set@value 00D5                __size_ofi2___awdiv 0084  
               month_length@month 0020                       CTMU_read@ch 00E2  
              __size_ofi2___lldiv 0082                __size_ofi2___lwdiv 0052  
                  ?_I2C_LCD_Clear 0001                   __initialization 2AAA  
               i2___lldiv@divisor 0005                      __end_of_main 1558  
               i2___lldiv@counter 000D             _control_signal_bitmap 00B1  
                __end_of_Auto_cut 19CE               ringbuf_init@bufsize 00D7  
                RTCC_from_RTCC@ep 0102                  RTCC_from_RTCC@ct 0100  
      RTCC_adjust_time_inc@i_2077 0116                            ??_main 0021  
                   __activetblptr 000003         ??_RTCC_adjust_time_button 0021  
       ??_RTCC_adjust_time_cursor 0020                            ?i2_LED 0001  
       ??_RTCC_adjust_time_toggle 0020                 __end_of_CTMU_init 31E8  
               __end_of_CTMU_read 206C                      _cdc_mem_type 00AF  
                          _BCL1IF 007D0B                     _I2C_IdleCheck 32E6  
                _CDCDataOutHandle 002D                  ___llmod@dividend 00E0  
               _I2C_LCD_SetCursor 30F0               display_time_1602@ep 010D  
             display_time_1602@ct 010B                            _EECON2 000FA7  
                          _ANCON0 000F48                            _ANCON1 000F49  
                ___awdiv@dividend 00D3                            i2LED@b 0002  
              I2C_LCD_Command@ans 00D7                            i2l1714 2936  
                  __CFG_WDTEN$OFF 000000                            i2l1767 2D6C  
                          i2l6200 2888                            i2l5332 2248  
                          i2l6212 28AE                            i2l6230 28F8  
                          i2l6216 28BC                            i2l6208 28A4  
                          i2l6312 1A0E                            i2l6304 19D2  
                          i2l7040 0084                            i2l6226 28E8  
                          i2l6250 2D42                            i2l7050 00AC  
                          i2l7026 0058                            i2l6228 28F4  
                          i2l6332 2602                            i2l6260 2D62  
                          i2l6252 2D46                            i2l6308 19DA  
                          i2l7036 0076                            i2l6350 2EFA  
                          i2l6238 2928                            i2l6174 2FA0  
                          i2l6190 2866                            i2l6318 1A84  
                          i2l6326 1ACA                            i2l6336 260A  
                          i2l6184 2856                            i2l6248 2D3A  
                          i2l7056 00C0                            i2l5810 24B2  
                          i2l6354 2F32                            i2l6346 2EF2  
                          i2l6196 287C                            i2l6286 2EC6  
                          i2l6198 2884                            i2l5808 249E  
                          i2l5816 24B6                            i2l5798 23F8  
              ?_I2C_LCD_SetCursor 00D8                            _RCREG1 000FAF  
                          _RTCCAL 000F3E                            _SPBRG1 000FB0  
                          _SSP1IF 007CF3                    __CFG_WPCFG$OFF 000000  
               sw_flag_clear@port 0020                            _TXREG1 000FAE  
                  __CFG_WPDIS$OFF 000000                epoch_to_caltime@ep 00F6  
              epoch_to_caltime@ct 00F4                 _shortPacketStatus 003C  
             ??_I2C_LCD_SetCursor 0021                    __CFG_XINST$OFF 000000  
               ?_epoch_to_caltime 00F4        __size_of_charge_time_count 0048  
           caltime_to_epoch@epoch 00F6                      ?_ringbuf_pop 0009  
                    ?_ringbuf_num 0001                      ?_ringbuf_put 0009  
           caltime_to_epoch@month 00FA                            ___lmul 29C0  
                 _caltime_to_RTCC 1D4C                            ___wmul 3026  
              ??_epoch_to_caltime 00F8                 __end_of_UART_init 3294  
                       ??___awdiv 0020                         ??___awmod 0020  
    __end_of_RTCC_adjust_time_dec 11CC      __end_of_RTCC_adjust_time_inc 0F68  
                          _d_to_x 320C                         ??___lldiv 0020  
                    ?_timer0_init 0001                         ??___llmod 0020  
               __end_of_RTCC_init 30F0                      ?_timer1_init 0020  
                       ??___lwdiv 0021                 __end_of_RTCC_loop 2EA6  
                       ??___lwmod 0020                      ?_timer3_init 0001  
                          _lchika 19CE                  _normal_mode_loop 1EE8  
                          clear_0 2AB0                            clear_1 2ABC  
                          clear_2 2AC8                            clear_3 2AD4  
                          clear_4 2AE0                   __CFG_CLKOEC$OFF 000000  
                ___awdiv@quotient 00D9                   ___awmod@divisor 00D5  
                 ??_sw_flag_clear 0020              __size_of_display_LCD 0506  
                 ___awmod@counter 00D7                            _x_to_d 32B0  
                          _rx_buf 02EA                            _tx_buf 01E8  
            __size_of_display_dec 0058                    i2___awdiv@sign 0006  
       __size_of_caltime_to_epoch 0288                 __end_ofi2___awdiv 28C6  
                       ?_I2C_Send 0001                         ?_I2C_Stop 0001  
               __end_ofi2___lldiv 2948                 __end_ofi2___lwdiv 2D76  
                    __mediumconst FE5A                     _cut_time_flag 00B3  
                       ?_I2C_init 0001         __end_of_I2C_LCD_SetCursor 311C  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                         ?_ADC_init 0001  
                  ?_I2C_IdleCheck 0001                         ??_my_utoa 0021  
          delay_timer_interrupt@d 0001                         ??_tx_send 0010  
                     _CtrlTrfData 000D38              _controlTransferState 0039  
  RTCC_adjust_time_button@cnt_dec 011C              __CFG_LS48MHZ$SYS48X8 000000  
  RTCC_adjust_time_button@cnt_inc 011A                        __accesstop 0060  
         __end_of__initialization 2B06                      CTMU_read@sum 00E3  
            __end_of_get_quot_rem 1C7A              __end_of_display_port 1D4C  
                   ___rparam_used 000001                   ??_I2C_LCD_Clear 00D8  
                 _RTCC_from_epoch 3230                     __end_ofi2_LED 2FB6  
            __CFG_WPEND$PAGE_WPFP 000000                    __pcstackCOMRAM 0001  
              i2___lldiv@dividend 0001                     __end_of_sd000 FF40  
                   __end_of_sd001 FEDA                     __end_of_sd002 FF0E  
                    __pidataBANK0 3360                         ?_UART_ISR 0001  
                 __CFG_DSWDTPS$G2 000000                        __end_of_IN 3198  
                 _I2C_LCD_Command 2FEE                __size_of_delay_set 0024  
                         ??i2_LED 0002           sleep_loop@prev_power_sw 00FF  
                I2C_LCD_Command@c 00D6                        ??_I2C_Send 0021  
                      ??_I2C_Stop 0021                        _cdc_notice 02D4  
                      _cdc_rx_len 0036                        ??_I2C_init 0020  
                       ?_Delay_ms 00D3                        _cdc_tx_len 0038  
                      ??_ADC_init 0020        caltime_to_epoch@month_1995 00F5  
          RTCC_adjust_time_dec@ep 0110            RTCC_adjust_time_dec@ct 010E  
              i2___lldiv@quotient 0009            RTCC_adjust_time_inc@ep 0110  
          RTCC_adjust_time_inc@ct 010E                __size_of_main_init 00A2  
                      __pbssBANK0 0060                        __pbssBANK1 01C9  
                      __pbssBANK2 02C8                        __pbssBANK3 0300  
                       ?_Auto_cut 0001                __size_of_ctmu_loop 0102  
                       ISR@cnt_t0 0093                         ISR@cnt_t1 00FD  
         __end_of_caltime_to_RTCC 1E1C                   _RTCC_to_caltime 22A2  
                     _pBDTEntryIn 0027              __size_of_integrating 009A  
           __end_of_weekday_3char FF2A                           ?___lmul 00E0  
                      ??_UART_ISR 0010                           ?___wmul 00D6  
                         ?_d_to_x 0001                           ?_lchika 0001  
            I2C_LCD_SetCursor@col 00DB                    ___lmul@product 00E8  
                      _device_dsc FF2A              I2C_LCD_SetCursor@row 00D8  
                         ?_x_to_d 0001                      I2C_Send@data 00D4  
                      _ep_data_in 007E                 _configDescriptor1 FE63  
              __CFG_OSC$INTOSCPLL 000000                   ??_I2C_IdleCheck 0020  
                      ??_Delay_ms 0020        __size_of_I2C_LCD_SetCursor 002C  
              __size_of_port_loop 02AE            I2C_LCD_SetCursor@F8672 00FB  
                 __CFG_WDTPS$1024 000000                           _SPBRGH1 000F7F  
                         _SSP1ADD 000FC8                           _SSP1BUF 000FC9  
                         _RTCVALH 000F3B                           _RTCVALL 000F3A  
         ??_delay_timer_interrupt 0003                           _UIEbits 000F36  
         __end_of_RTCC_from_epoch 3252              timer1_init@prescaler 00D4  
            _RTCC_adjust_time_dec 0F68                           _UIRbits 000F62  
            _RTCC_adjust_time_inc 0D04                        ??_Auto_cut 00DC  
                __CFG_CFGPLLEN$ON 000000          ??_button_timer_interrupt 00F2  
                   _cdc_trf_state 0037                   integrating@port 0010  
               __end_of_delay_set 320C                     ?_month_length 0020  
             epoch_to_caltime@day 0102                 RTCC_from_epoch@ep 010C  
               RTCC_from_epoch@ct 010A               epoch_to_caltime@num 0106  
                       _I2C_Start 3092                           _pCDCDst 0087  
                         _pCDCSrc 008A                           __Hparam 0000  
                         __Lparam 0000           __end_of_I2C_LCD_Command 3026  
                  display_LCD@str 0110                     ?_ringbuf_init 00D3  
                         ___awdiv 206C                   __size_of___lmul 0076  
                         ___awmod 255C                           ___lldiv 212A  
                 __size_of___wmul 0036                           ___llmod 2698  
                         ___lwdiv 2948                           ___lwmod 2B10  
                 __size_of_d_to_x 0024              __size_of_ringbuf_pop 00AC  
            __size_of_ringbuf_num 00BC              __size_of_ringbuf_put 00B6  
                 __CFG_STVREN$OFF 000000                   __size_of_lchika 0100  
               __end_of_main_init 255C       epoch_to_caltime@month_cache 00FE  
                         __pcinit 2AAA         __end_of_configDescriptor1 FEA6  
                         __ramtop 0F00              __size_of_timer0_init 0036  
                         _halfsec 00B6              __size_of_timer1_init 004E  
                         __ptext0 13B8                           __ptext1 1E1C  
                         __ptext2 1EE8                           __ptext3 07CE  
                         __ptext4 2A36                           __ptext5 2D76  
                         __ptext6 31E8                           __ptext7 2F36  
                         __ptext8 0000                           __ptext9 1558  
                   I2C_LCD_Putc@c 00D6                           _inPipes 0021  
            __size_of_timer3_init 0028                 __end_of_ctmu_loop 18CC  
                 __size_of_x_to_d 001C                     I2C_LCD_Puts@s 00D6  
     _USBDeferOUTDataStagePackets 00AC                         _T0CONbits 000FD5  
                    __size_of_ADC 002A                      __size_of_LED 0042  
                _time_change_flag 00B8                  _caltime_to_epoch 0A7C  
                    __size_of_ISR 010E                         _T1CONbits 000FCD  
                    __size_of_OUT 0058                           _cut_cnt 006F  
         __size_of_RTCC_from_RTCC 0022                         _T3CONbits 000F79  
                ___awmod@dividend 00D3                         _T5CONbits 000F22  
                         _my_utoa 27BA                __end_of_USB_CD_Ptr FE63  
         __end_of_RTCC_to_caltime 2358                           _tx_send 332E  
                         lchika@i 000C             ?_RTCC_adjust_time_dec 010E  
           ?_RTCC_adjust_time_inc 010E             __size_of_get_quot_rem 00D4  
           __size_of_display_port 00D2              end_of_initialization 2B06  
                      delay_set@d 00D3                         _CTMU_init 31C0  
                       _CTMU_read 1FAE          __end_of_normal_mode_loop 1FAE  
                    _CTMUCONHbits 000FB3                __end_of_USB_SD_Ptr FE61  
                    _CTMUCONLbits 000FB2               _pBDTEntryEP0OutNext 0031  
                  ??_month_length 00D9                    display_dec@dec 010A  
                  display_dec@str 0100   _dummy_encapsulated_cmd_response 02E2  
                     sleep_loop@i 0104                  ?_caltime_to_RTCC 00DB  
                      ?_I2C_Start 00D4                   ___lldiv@divisor 00D7  
            timer3_init@prescaler 00D3                   ___lldiv@counter 00DF  
                  ??_ringbuf_init 0020                 __end_of_port_loop 0A7C  
                      _sleep_flag 003D                           postdec1 000FE5  
                         postdec2 000FDD                        _sleep_loop 1E1C  
            sw_flag_clear@bit_and 00D3                           postinc0 000FEE  
                         postinc1 000FE6                           postinc2 000FDE  
      _USBStatusStageEnabledFlag1 00AD        _USBStatusStageEnabledFlag2 00AE  
                       _PORTBbits 000F81                         _UART_init 3274  
                __CFG_DSBOREN$OFF 000000                         _RTCC_init 30C2  
                       _RTCC_loop 2E5E                      _display_flag 00B4  
       epoch_to_caltime@day_cache 00A3                      _get_quot_rem 1BA6  
                    _display_port 1C7A                        _print_port 003B  
       __size_of_epoch_to_caltime 01EC                  __CFG_CPUDIV$OSC1 000000  
              _BothEP0OutUOWNsSet 00A8                 __size_of_I2C_Send 0018  
               __size_of_I2C_Stop 000A                         i2___awdiv 2842  
               __size_of_I2C_init 0012                 i2___lwdiv@divisor 0003  
                       i2___lldiv 28C6                 __size_of_ADC_init 001C  
                       i2___lwdiv 2D24                 i2___lwdiv@counter 0007  
                ?_RTCC_from_epoch 010A                        ?_CTMU_init 0001  
                      ?_CTMU_read 00E0                         _USTATcopy 003F  
                       Auto_cut@i 00DE   __size_of_button_timer_interrupt 02C8  
         timer1_init@clock_select 0020                  __CFG_IOL1WAY$OFF 000000  
              i2___awdiv@dividend 0001               __CFG_MSSP7B_EN$MSK7 000000  
                ?_I2C_LCD_Command 0001                    ringbuf_init@rb 00D3  
                      lchika@cntf 0090                     ??_display_LCD 0021  
                  ringbuf_pop@ret 000F                     ??_display_dec 0021  
                  __end_of___lmul 2A36          ?_RTCC_adjust_time_button 0118  
        ?_RTCC_adjust_time_cursor 0001                    __end_of___wmul 305C  
                   ?_sw_flag_read 00D3                    __end_of_d_to_x 3230  
               __size_of_UART_ISR 004A          ?_RTCC_adjust_time_toggle 0001  
                  __end_of_lchika 1ACE                        ?_UART_init 0001  
                      ?_RTCC_init 0001                        ?_RTCC_loop 0001  
                __CFG_DSWDTEN$OFF 000000             __end_of_sw_flag_clear 2DC6  
               _USBBusIsSuspended 00AA                    __end_of_x_to_d 32CC  
           epoch_to_caltime@month 0105               start_initialization 2AAA  
                      CTMU_read@i 00E7                  month_length@year 00DD  
                     __end_of_ADC 3146                i2___awdiv@quotient 0007  
                     __end_of_LED 2F78                       __end_of_ISR 0116  
                     __end_of_OUT 2C78                     ?_I2C_LCD_Putc 0001  
                   ?_I2C_LCD_Puts 00D6            ??_RTCC_adjust_time_dec 0112  
          ??_RTCC_adjust_time_inc 0112                     ?_I2C_LCD_init 0001  
                     _cdc_data_rx 0300                       _cdc_data_tx 0340  
                   UART_ISR@ascii 0010                        ?i2___awdiv 0001  
               __size_of_Delay_ms 002A                        ?i2___lldiv 0001  
                ?_RTCC_to_caltime 00D4                        ?i2___lwdiv 0001  
                 ___llmod@divisor 00E4                 __size_of_Auto_cut 0102  
                     ??_I2C_Start 0021                   ___llmod@counter 0020  
           __end_of_I2C_LCD_Clear 32E6            _pBDTEntryEP0OutCurrent 002F  
                        ??___lmul 0021                       ?_sleep_loop 0001  
                        ??___wmul 0021                          ??_d_to_x 0020  
                  ??_sw_flag_read 0020                 __CFG_ADCSEL$BIT12 000000  
                     __pdataBANK0 00FB                          ??_lchika 0009  
          _button_timer_interrupt 0506                          ??_x_to_d 0020  
            __end_of_month_length 1BA6                    _RTCC_from_RTCC 3252  
             __end_of_display_LCD 0506            _USBActiveConfiguration 003E  
             __end_of_display_dec 2C20                       __pbssCOMRAM 0021  
             RTCC_to_caltime@dumy 00D6                          LED@value 0020  
                   __pcstackBANK0 00D3                     __pcstackBANK1 0100  
                   __pcstackBANK2 0200                    ??_I2C_LCD_Putc 0021  
                sw_flag_read@port 0020                    ??_I2C_LCD_Puts 00D8  
                  ??_I2C_LCD_init 0021                       _caltime_now 01F0  
                   _delay_display 00CE              __end_of_ringbuf_init 2D24  
                     _charge_time 01D5                  tx_send@asciicode 0010  
                     ??_CTMU_init 0020                       ??_CTMU_read 0020  
  __size_of_delay_timer_interrupt 0048     __end_of_delay_timer_interrupt 2EEE  
                   ??_integrating 000E             RTCC_adjust_time_dec@i 0117  
                    _pBDTEntryOut 0075             RTCC_adjust_time_inc@i 0117  
        __end_of_caltime_to_epoch 0D04                          ISR@ascii 001F  
                 millis_timer@cnt 00A5                  ___lwdiv@dividend 00E8  
 __end_of_RTCC_adjust_time_button 17CA   __end_of_RTCC_adjust_time_cursor 2BC8  
                       _delay_set 31E8                         _edit_flag 00B5  
                       __pintcode 0008   __end_of_RTCC_adjust_time_toggle 332E  
                   __pmediumconst FE5A                          ?___awdiv 00D3  
                        ?___awmod 00D3                          ?___lldiv 00D3  
              charge_time_count@i 0003                          ?___llmod 00E0  
                        ?___lwdiv 00E8                          ?___lwmod 00D3  
                 I2C_LCD_Putc@ans 00D7            __end_of_RTCC_from_RTCC 3274  
                 I2C_LCD_Puts@ans 00D9                       ??_UART_init 0020  
      USBCBSendResume@delay_count 0095                       ??_RTCC_init 0020  
                     ??_RTCC_loop 0021                    __size_ofi2_LED 003E  
                       _epoch_now 00CA                         _main_init 24BA  
                     I2C_Start@rw 00D4                  _epoch_to_caltime 11CC  
                        _I2C_Send 3300                          OUT@value 0020  
                        _I2C_Stop 3356              __CFG_RTCOSC$T1OSCREF 000000  
                       _ctmu_flag 00B2                          _I2C_init 3344  
                _display_LCD$5194 011A                         _ctmu_loop 17CA  
                        _ADC_init 3294             __end_of_I2C_IdleCheck 3300  
                     _PADCFG1bits 000F3C                          ?_my_utoa 00EF  
                     _ep_data_out 0081                  ___lwdiv@quotient 00ED  
                     ??i2___awdiv 0005                          ?_tx_send 0001  
                     ??i2___lldiv 0009                       ??i2___lwdiv 0005  
             __size_of_sleep_loop 00CC                       __size_of_IN 0028  
                       d_to_x@dec 0020                          _CTMUCONH 000FB3  
                        _CTMUCONL 000FB2                          _CTMUICON 000FB1  
               ?_normal_mode_loop 0001          ringbuf_init@internal_buf 00D5  
                  ___wmul@product 00DA                ??_normal_mode_loop 0021  
                        _IPR1bits 000F9F                          _IPR2bits 000FA2  
                        _PIE1bits 000F9D                          _PIE2bits 000FA0  
                        _IPR5bits 000F99                          _PIE5bits 000F91  
                      ?_delay_set 00D3                          _PIR1bits 000F9E  
                        _PIR2bits 000FA1                          i2u617_40 2F18  
                        _PIR5bits 000F98        epoch_to_caltime@year_cache 00B9  
                        i2u582_40 2F84                          i2u584_40 2F90  
                        i2u586_40 2F9C                     ??_ringbuf_pop 000B  
                   ??_ringbuf_num 0003                     ??_ringbuf_put 000C  
             __end_of_integrating 2698                          _RCONbits 000FD0  
               _display_time_1602 1558                          _UEP0bits 000F26  
      _USBDeferINDataStagePackets 00AB                          _UART_ISR 2E14  
                        _SSP1CON1 000FC6                          _SSP1CON2 000FC5  
                   ??_timer0_init 0020                     ??_timer1_init 00D3  
                     _display_LCD 0000                     ??_timer3_init 0020  
                        _SSP1STAT 000FC7                          _UCONbits 000F65  
              ?_display_time_1602 010B                       _display_dec 2BC8  
                       _port_loop 07CE                   ?_RTCC_from_RTCC 0100  
                      my_utoa@str 00EF                        _ADCON0bits 000FC2  
                      _ADCON1bits 000FC1                 ___wmul@multiplier 00D6  
                __CFG_SOSCSEL$LOW 000000    button_timer_interrupt@sw_value 00F1  
                      ?_main_init 0001               ??_display_time_1602 010F  
                    _RemoteWakeup 00A9                 i2___awdiv@divisor 0003  
                        _Delay_ms 3146                 i2___awdiv@counter 0005  
                      ?_ctmu_loop 0001                         lchika@cnt 008D  
                   ringbuf_pop@rb 0009                     ringbuf_num@rb 0001  
                   I2C_Start@adrs 00D5                     ringbuf_put@rb 0009  
               ___lmul@multiplier 00E0                       _INTCON2bits 000FF1  
                       copy_data0 2AFA                        port_loop@i 00D7  
            __end_of_sw_flag_read 2AAA                          _Auto_cut 18CC  
            epoch_to_caltime@year 0104                       _auto_cut_ON 007B  
              __end_of_device_dsc FF3C         __end_of_display_time_1602 16A6  
                        __Hrparam 0000                       _ctmu_value0 0099  
                     _ctmu_value1 009B                       _ctmu_value2 009D  
                     _ctmu_valuem 009F                          __Lrparam 0000  
            __end_of_I2C_LCD_Putc 2FEE              __end_of_I2C_LCD_Puts 27BA  
                        _SetupPkt 000D30                     _weekday_3char FF0E  
            __end_of_I2C_LCD_init 2CD0             __size_of_month_length 00D8  
        __size_of_caltime_to_RTCC 00D0                  __size_of___awdiv 00BE  
                __size_of___awmod 00A2                 I2C_IdleCheck@mask 00D3  
                __size_of___lldiv 00BC                  __size_of___llmod 0094  
                __size_of___lwdiv 0078                  __size_of___lwmod 005C  
                      ?_port_loop 0001               __end_of_ringbuf_pop 24BA  
             __end_of_ringbuf_num 22A2               __end_of_ringbuf_put 240E  
                     _line_coding 01F7               __end_of_timer0_init 3092  
           __size_of_ringbuf_init 0054               __end_of_timer1_init 2E14  
             __end_of_timer3_init 31C0                        i2LED@value 0001  
                 ___lwdiv@divisor 00EA                   ___lwdiv@counter 00EC  
            timer0_init@prescaler 00D3                          __ptext10 2BC8  
                        __ptext11 27BA                          __ptext20 2948  
                        __ptext12 2B10                          __ptext21 1FAE  
                        __ptext13 2FB6                          __ptext30 1D4C  
                        __ptext22 16A6                          __ptext14 1C7A  
                        __ptext31 320C                          __ptext23 3318  
                        __ptext15 30F0                          __ptext40 3198  
                        __ptext32 206C                          __ptext24 0D04  
                        __ptext16 272C                          __ptext41 2DC6  
                        __ptext33 2B6C                          __ptext25 0F68  
                        __ptext17 2698                          __ptext50 3356  
                        __ptext42 305C                          __ptext34 18CC  
                        __ptext26 3230                          __ptext18 17CA  
                        __ptext51 3092                          __ptext43 2CD0  
                        __ptext35 3026                          __ptext27 11CC  
                        __ptext19 0506                          __ptext60 1ACE  
                        __ptext52 3300                          __ptext44 3274  
                        __ptext36 2C20                          __ptext28 1BA6  
                        __ptext61 255C                          __ptext53 32E6  
                        __ptext45 30C2                          __ptext37 3170  
                        __ptext29 212A                          __ptext70 2F78  
                        __ptext62 29C0                          __ptext54 3146  
                        __ptext46 3344                          __ptext38 311C  
                        __ptext71 25FE                          __ptext63 22A2  
                        __ptext55 31C0                          __ptext47 2C78  
                        __ptext39 24BA                          __ptext72 28C6  
                        __ptext64 32B0                          __ptext56 3294  
                        __ptext48 32CC                          __ptext73 2EA6  
                        __ptext57 2E5E                          __ptext49 2FEE  
                        __ptext74 2EEE                          __ptext66 332E  
                        __ptext58 3252                          __ptext75 2E14  
                        __ptext67 19CE                          __ptext59 0A7C  
                        __ptext76 2358                          __ptext68 2D24  
                        __ptext77 240E                          __ptext69 2842  
                        __ptext78 21E6                      _SSP1CON2bits 000FC5  
__size_of_RTCC_adjust_time_button 0124  __size_of_RTCC_adjust_time_cursor 005C  
                __size_of_my_utoa 0088  __size_of_RTCC_adjust_time_toggle 0016  
           RTCC_loop@prev_halfsec 00A7                  __size_of_tx_send 0016  
                     _integrating 25FE                     __size_of_main 01A0  
                    _month_length 1ACE          __size_of_RTCC_from_epoch 0022  
                     ??_delay_set 0020                      ??_sleep_loop 0021  
                        _outPipes 0060           ?_button_timer_interrupt 00EF  
                        int$flags 0040                          _out_flag 0084  
                    _ringbuf_init 2CD0                         x_to_d@hex 00D3  
        __size_of_I2C_LCD_Command 0038         _USBDeferStatusStagePacket 0033  
                  main_init@rxbuf 0200                    main_init@txbuf 0100  
                     ??_main_init 0021                       _OSCTUNEbits 000F9B  
                      _INTCONbits 000FF2              ringbuf_put@asciicode 000B  
                     ??_ctmu_loop 0021      I2C_LCD_SetCursor@row_offsets 00D9  
                      Delay_ms@ms 00D3                   display_dec@edit 00F7  
                get_quot_rem@quot 00EC                 RTCC_to_caltime@ct 00D4  
   __size_of_RTCC_adjust_time_dec 0264     __size_of_RTCC_adjust_time_inc 0264  
                        intlevel2 0000                __end_of_sleep_loop 1EE8  
                ___lwmod@dividend 00D3                  ___lldiv@dividend 00D3  
                      _RCSTA1bits 000FAC                 ?_caltime_to_epoch 00EC  
      __size_of_display_time_1602 014E          __end_of_epoch_to_caltime 13B8  
          __size_of_sw_flag_clear 0050          __size_of_RTCC_to_caltime 00B6  
                   _print_content 00B7                        _OSCCONbits 000FD3  
  __end_of_button_timer_interrupt 07CE                ??_caltime_to_epoch 00F0  
                        my_utoa@d 00F4                          my_utoa@v 00F5  
                     _ringbuf_pop 240E                       _ringbuf_num 21E6  
                     _ringbuf_put 2358                       _timer0_init 305C  
                     _timer1_init 2DC6                       _timer3_init 3198  
                     ??_port_loop 0021                   get_quot_rem@div 00EE  
                 get_quot_rem@num 00F0                        _RTCCFGbits 000F3F  
                ___lldiv@quotient 00DB                 caltime_to_RTCC@ct 00DB  
                 ___lwmod@divisor 00D5                 ??_caltime_to_RTCC 0021  
           _USBAlternateInterface 00D1                   ___lwmod@counter 0020  
           __size_of_sw_flag_read 0074                   _endpoint_number 003A  
          __size_of_I2C_LCD_Clear 001A   epoch_to_caltime@day_since_epoch 0100  
                   my_utoa@digits 00F3      _USBStatusStageTimeoutCounter 0035  
           __size_of_I2C_LCD_Putc 0038             __size_of_I2C_LCD_Puts 008E  
           _delay_timer_interrupt 2EA6             __size_of_I2C_LCD_init 0058  
                    my_utoa@value 00F1                        _USB_CD_Ptr FE61  
                ??_RTCC_from_RTCC 0021  
