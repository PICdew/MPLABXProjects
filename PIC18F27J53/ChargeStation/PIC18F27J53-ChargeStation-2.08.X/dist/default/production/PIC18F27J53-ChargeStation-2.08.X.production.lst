

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Nov 10 22:33:00 2015

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F27J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1
   108                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   109                           	psect	text89,global,reloc=2,class=CODE,delta=1
   110                           	psect	text90,global,reloc=2,class=CODE,delta=1
   111                           	psect	text91,global,reloc=2,class=CODE,delta=1
   112                           	psect	text92,global,reloc=2,class=CODE,delta=1
   113                           	psect	text93,global,reloc=2,class=CODE,delta=1
   114                           	psect	text94,global,reloc=2,class=CODE,delta=1
   115                           	psect	text95,global,reloc=2,class=CODE,delta=1
   116                           	psect	text96,global,reloc=2,class=CODE,delta=1
   117                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   119                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   120  0000                     
   121                           	psect	idataCOMRAM
   122  0000'                    __pidataCOMRAM:
   123                           	opt stack 0
   124                           
   125                           ;initializer for I2C_LCD_SetCursor@F8672
   126  0000' 00                 	db	0
   127  0001' 40                 	db	64
   128                           
   129                           	psect	idataBANK0
   130  0000'                    __pidataBANK0:
   131                           	opt stack 0
   132                           
   133                           ;initializer for epoch_to_caltime@month_cache
   134  0000' 01                 	db	1
   135                           
   136                           	psect	mediumconst
   137  0000'                    __pmediumconst:
   138                           	opt stack 0
   139  0000' 00                 	db	0
   140  0001'                    _dpowers:
   141                           	opt stack 0
   142  0001' 0001               	dw	1
   143  0003' 000A               	dw	10
   144  0005' 0064               	dw	100
   145  0007' 03E8               	dw	1000
   146  0009' 2710               	dw	10000
   147  000B'                    __end_of_dpowers:
   148                           	opt stack 0
   149  000B'                    display_port@port_char:
   150                           	opt stack 0
   151  000B' 4C                 	db	76
   152  000C' 45                 	db	69
   153  000D' 46                 	db	70
   154  000E' 54                 	db	84
   155  000F' 20                 	db	32
   156  0010' 50                 	db	80
   157  0011' 4F                 	db	79
   158  0012' 52                 	db	82
   159  0013' 54                 	db	84
   160  0014' 00                 	db	0
   161  0015' 00                 	db	0
   162  0016' 00                 	db	0
   163  0017' 00                 	db	0
   164  0018' 00                 	db	0
   165  0019' 00                 	db	0
   166  001A' 00                 	db	0
   167  001B' 00                 	db	0
   168  001C' 00                 	db	0
   169  001D' 00                 	db	0
   170  001E' 00                 	db	0
   171  001F' 43                 	db	67
   172  0020' 45                 	db	69
   173  0021' 4E                 	db	78
   174  0022' 54                 	db	84
   175  0023' 45                 	db	69
   176  0024' 52                 	db	82
   177  0025' 20                 	db	32
   178  0026' 50                 	db	80
   179  0027' 4F                 	db	79
   180  0028' 52                 	db	82
   181  0029' 54                 	db	84
   182  002A' 00                 	db	0
   183  002B' 00                 	db	0
   184  002C' 00                 	db	0
   185  002D' 00                 	db	0
   186  002E' 00                 	db	0
   187  002F' 00                 	db	0
   188  0030' 00                 	db	0
   189  0031' 00                 	db	0
   190  0032' 00                 	db	0
   191  0033' 52                 	db	82
   192  0034' 49                 	db	73
   193  0035' 47                 	db	71
   194  0036' 48                 	db	72
   195  0037' 54                 	db	84
   196  0038' 20                 	db	32
   197  0039' 50                 	db	80
   198  003A' 4F                 	db	79
   199  003B' 52                 	db	82
   200  003C' 54                 	db	84
   201  003D' 00                 	db	0
   202  003E' 00                 	db	0
   203  003F' 00                 	db	0
   204  0040' 00                 	db	0
   205  0041' 00                 	db	0
   206  0042' 00                 	db	0
   207  0043' 00                 	db	0
   208  0044' 00                 	db	0
   209  0045' 00                 	db	0
   210  0046' 00                 	db	0
   211  0047' 4C                 	db	76
   212  0048' 65                 	db	101
   213  0049' 66                 	db	102
   214  004A' 74                 	db	116
   215  004B' 20                 	db	32
   216  004C' 50                 	db	80
   217  004D' 6F                 	db	111
   218  004E' 72                 	db	114
   219  004F' 74                 	db	116
   220  0050' 00                 	db	0
   221  0051' 00                 	db	0
   222  0052' 00                 	db	0
   223  0053' 00                 	db	0
   224  0054' 00                 	db	0
   225  0055' 00                 	db	0
   226  0056' 00                 	db	0
   227  0057' 00                 	db	0
   228  0058' 00                 	db	0
   229  0059' 00                 	db	0
   230  005A' 00                 	db	0
   231  005B' 43                 	db	67
   232  005C' 65                 	db	101
   233  005D' 6E                 	db	110
   234  005E' 74                 	db	116
   235  005F' 65                 	db	101
   236  0060' 72                 	db	114
   237  0061' 20                 	db	32
   238  0062' 50                 	db	80
   239  0063' 6F                 	db	111
   240  0064' 72                 	db	114
   241  0065' 74                 	db	116
   242  0066' 00                 	db	0
   243  0067' 00                 	db	0
   244  0068' 00                 	db	0
   245  0069' 00                 	db	0
   246  006A' 00                 	db	0
   247  006B' 00                 	db	0
   248  006C' 00                 	db	0
   249  006D' 00                 	db	0
   250  006E' 00                 	db	0
   251  006F' 52                 	db	82
   252  0070' 69                 	db	105
   253  0071' 67                 	db	103
   254  0072' 68                 	db	104
   255  0073' 74                 	db	116
   256  0074' 20                 	db	32
   257  0075' 50                 	db	80
   258  0076' 6F                 	db	111
   259  0077' 72                 	db	114
   260  0078' 74                 	db	116
   261  0079' 00                 	db	0
   262  007A' 00                 	db	0
   263  007B' 00                 	db	0
   264  007C' 00                 	db	0
   265  007D' 00                 	db	0
   266  007E' 00                 	db	0
   267  007F' 00                 	db	0
   268  0080' 00                 	db	0
   269  0081' 00                 	db	0
   270  0082' 00                 	db	0
   271  0083'                    __end_ofdisplay_port@port_char:
   272                           	opt stack 0
   273  0083'                    _weekday_3char:
   274                           	opt stack 0
   275  0083' 53                 	db	83
   276  0084' 55                 	db	85
   277  0085' 4E                 	db	78
   278  0086' 00                 	db	0
   279  0087' 4D                 	db	77
   280  0088' 4F                 	db	79
   281  0089' 4E                 	db	78
   282  008A' 00                 	db	0
   283  008B' 54                 	db	84
   284  008C' 55                 	db	85
   285  008D' 45                 	db	69
   286  008E' 00                 	db	0
   287  008F' 57                 	db	87
   288  0090' 45                 	db	69
   289  0091' 44                 	db	68
   290  0092' 00                 	db	0
   291  0093' 54                 	db	84
   292  0094' 48                 	db	72
   293  0095' 55                 	db	85
   294  0096' 00                 	db	0
   295  0097' 46                 	db	70
   296  0098' 52                 	db	82
   297  0099' 49                 	db	73
   298  009A' 00                 	db	0
   299  009B' 53                 	db	83
   300  009C' 41                 	db	65
   301  009D' 54                 	db	84
   302  009E' 00                 	db	0
   303  009F'                    __end_of_weekday_3char:
   304                           	opt stack 0
   305  009F'                    display_port@onoff:
   306                           	opt stack 0
   307  009F' 4F                 	db	79
   308  00A0' 46                 	db	70
   309  00A1' 46                 	db	70
   310  00A2' 00                 	db	0
   311  00A3' 00                 	db	0
   312  00A4' 4F                 	db	79
   313  00A5' 4E                 	db	78
   314  00A6' 00                 	db	0
   315  00A7' 00                 	db	0
   316  00A8' 00                 	db	0
   317  00A9'                    __end_ofdisplay_port@onoff:
   318                           	opt stack 0
   319  0000                     _ANCON0	set	3912
   320  0000                     _ANCON1	set	3913
   321  0000                     _PADCFG1bits	set	3900
   322  0000                     _RTCCAL	set	3902
   323  0000                     _RTCCFGbits	set	3903
   324  0000                     _RTCVALH	set	3899
   325  0000                     _RTCVALL	set	3898
   326  0000                     _T5CONbits	set	3874
   327  0000                     _ADRES	set	4035
   328  0000                     _ADCON0bits	set	4034
   329  0000                     _ADCON1bits	set	4033
   330  0000                     _BAUDCON1bits	set	3966
   331  0000                     _CTMUCONH	set	4019
   332  0000                     _CTMUCONHbits	set	4019
   333  0000                     _CTMUCONL	set	4018
   334  0000                     _CTMUCONLbits	set	4018
   335  0000                     _CTMUICON	set	4017
   336  0000                     _EECON2	set	4007
   337  0000                     _INTCON2bits	set	4081
   338  0000                     _INTCONbits	set	4082
   339  0000                     _IPR1bits	set	3999
   340  0000                     _IPR2bits	set	4002
   341  0000                     _IPR5bits	set	3993
   342  0000                     _OSCCONbits	set	4051
   343  0000                     _OSCTUNEbits	set	3995
   344  0000                     _PIE1bits	set	3997
   345  0000                     _PIE2bits	set	4000
   346  0000                     _PIE5bits	set	3985
   347  0000                     _PIR1bits	set	3998
   348  0000                     _PIR2bits	set	4001
   349  0000                     _PIR5bits	set	3992
   350  0000                     _RCREG1	set	4015
   351  0000                     _RCSTA1bits	set	4012
   352  0000                     _SPBRG1	set	4016
   353  0000                     _SPBRGH1	set	3967
   354  0000                     _SSP1ADD	set	4040
   355  0000                     _SSP1BUF	set	4041
   356  0000                     _SSP1CON1	set	4038
   357  0000                     _SSP1CON2	set	4037
   358  0000                     _SSP1CON2bits	set	4037
   359  0000                     _SSP1STAT	set	4039
   360  0000                     _T0CONbits	set	4053
   361  0000                     _T1CONbits	set	4045
   362  0000                     _T3CONbits	set	3961
   363  0000                     _TMR1H	set	4047
   364  0000                     _TRISA	set	3986
   365  0000                     _TRISB	set	3987
   366  0000                     _TRISC	set	3988
   367  0000                     _TXREG1	set	4014
   368  0000                     _TXSTA1bits	set	4013
   369  0000                     _UCONbits	set	3941
   370  0000                     _BCL1IF	set	32011
   371  0000                     _LATA5	set	31821
   372  0000                     _LATA6	set	31822
   373  0000                     _LATA7	set	31823
   374  0000                     _LATB2	set	31826
   375  0000                     _LATB6	set	31830
   376  0000                     _LATB7	set	31831
   377  0000                     _LATC2	set	31834
   378  0000                     _SSP1IF	set	31987
   379  00A9'                    STR_44:
   380  00A9' 09                 	db	9
   381  00AA' 2A                 	db	42
   382  00AB' 2A                 	db	42
   383  00AC' 2A                 	db	42
   384  00AD' 2A                 	db	42
   385  00AE' 2A                 	db	42
   386  00AF' 2A                 	db	42
   387  00B0' 2A                 	db	42
   388  00B1' 2A                 	db	42
   389  00B2' 2A                 	db	42
   390  00B3' 2A                 	db	42
   391  00B4' 2A                 	db	42
   392  00B5' 2A                 	db	42
   393  00B6' 2A                 	db	42
   394  00B7' 2A                 	db	42
   395  00B8' 2A                 	db	42
   396  00B9' 2A                 	db	42
   397  00BA' 2A                 	db	42
   398  00BB' 2A                 	db	42
   399  00BC' 2A                 	db	42
   400  00BD' 2A                 	db	42
   401  00BE' 2A                 	db	42
   402  00BF' 2A                 	db	42
   403  00C0' 2A                 	db	42
   404  00C1' 2A                 	db	42
   405  00C2' 2A                 	db	42
   406  00C3' 2A                 	db	42
   407  00C4' 2A                 	db	42
   408  00C5' 2A                 	db	42
   409  00C6' 0A                 	db	10
   410  00C7' 09                 	db	9
   411  00C8' 2A                 	db	42
   412  00C9' 2A                 	db	42
   413  00CA' 2A                 	db	42
   414  00CB' 2A                 	db	42
   415  00CC' 20                 	db	32
   416  00CD' 43                 	db	67	;'C'
   417  00CE' 68                 	db	104	;'h'
   418  00CF' 61                 	db	97	;'a'
   419  00D0' 72                 	db	114	;'r'
   420  00D1' 67                 	db	103	;'g'
   421  00D2' 65                 	db	101	;'e'
   422  00D3' 20                 	db	32
   423  00D4' 53                 	db	83	;'S'
   424  00D5' 74                 	db	116	;'t'
   425  00D6' 61                 	db	97	;'a'
   426  00D7' 74                 	db	116	;'t'
   427  00D8' 69                 	db	105	;'i'
   428  00D9' 6F                 	db	111	;'o'
   429  00DA' 6E                 	db	110	;'n'
   430  00DB' 20                 	db	32
   431  00DC' 36                 	db	54	;'6'
   432  00DD' 2E                 	db	46
   433  00DE' 37                 	db	55	;'7'
   434  00DF' 20                 	db	32
   435  00E0' 2A                 	db	42
   436  00E1' 2A                 	db	42
   437  00E2' 2A                 	db	42
   438  00E3' 2A                 	db	42
   439  00E4' 0A                 	db	10
   440  00E5' 09                 	db	9
   441  00E6' 2A                 	db	42
   442  00E7' 2A                 	db	42
   443  00E8' 2A                 	db	42
   444  00E9' 2A                 	db	42
   445  00EA' 20                 	db	32
   446  00EB' 4D                 	db	77	;'M'
   447  00EC' 61                 	db	97	;'a'
   448  00ED' 64                 	db	100	;'d'
   449  00EE' 65                 	db	101	;'e'
   450  00EF' 20                 	db	32
   451  00F0' 62                 	db	98	;'b'
   452  00F1' 79                 	db	121	;'y'
   453  00F2' 20                 	db	32
   454  00F3' 40                 	db	64	;'@'
   455  00F4' 52                 	db	82	;'R'
   456  00F5' 79                 	db	121	;'y'
   457  00F6' 6F                 	db	111	;'o'
   458  00F7' 6B                 	db	107	;'k'
   459  00F8' 65                 	db	101	;'e'
   460  00F9' 72                 	db	114	;'r'
   461  00FA' 69                 	db	105	;'i'
   462  00FB' 20                 	db	32
   463  00FC' 20                 	db	32
   464  00FD' 20                 	db	32
   465  00FE' 2A                 	db	42
   466  00FF' 2A                 	db	42
   467  0100' 2A                 	db	42
   468  0101' 2A                 	db	42
   469  0102' 0A                 	db	10
   470  0103' 09                 	db	9
   471  0104' 2A                 	db	42
   472  0105' 2A                 	db	42
   473  0106' 2A                 	db	42
   474  0107' 2A                 	db	42
   475  0108' 2A                 	db	42
   476  0109' 2A                 	db	42
   477  010A' 2A                 	db	42
   478  010B' 2A                 	db	42
   479  010C' 2A                 	db	42
   480  010D' 2A                 	db	42
   481  010E' 2A                 	db	42
   482  010F' 2A                 	db	42
   483  0110' 2A                 	db	42
   484  0111' 2A                 	db	42
   485  0112' 2A                 	db	42
   486  0113' 2A                 	db	42
   487  0114' 2A                 	db	42
   488  0115' 2A                 	db	42
   489  0116' 2A                 	db	42
   490  0117' 2A                 	db	42
   491  0118' 2A                 	db	42
   492  0119' 2A                 	db	42
   493  011A' 2A                 	db	42
   494  011B' 2A                 	db	42
   495  011C' 2A                 	db	42
   496  011D' 2A                 	db	42
   497  011E' 2A                 	db	42
   498  011F' 2A                 	db	42
   499  0120' 0A                 	db	10
   500  0121' 0A                 	db	10
   501  0122' 09                 	db	9
   502  0123' 63                 	db	99	;'c'
   503  0124' 6F                 	db	111	;'o'
   504  0125' 6D                 	db	109	;'m'
   505  0126' 6D                 	db	109	;'m'
   506  0127' 61                 	db	97	;'a'
   507  0128' 6E                 	db	110	;'n'
   508  0129' 64                 	db	100	;'d'
   509  012A' 20                 	db	32
   510  012B' 09                 	db	9
   511  012C' 6F                 	db	111	;'o'
   512  012D' 70                 	db	112	;'p'
   513  012E' 65                 	db	101	;'e'
   514  012F' 6C                 	db	108	;'l'
   515  0130' 61                 	db	97	;'a'
   516  0131' 6E                 	db	110	;'n'
   517  0132' 64                 	db	100	;'d'
   518  0133' 31                 	db	49	;'1'
   519  0134' 09                 	db	9
   520  0135' 6F                 	db	111	;'o'
   521  0136' 70                 	db	112	;'p'
   522  0137' 65                 	db	101	;'e'
   523  0138' 6C                 	db	108	;'l'
   524  0139' 61                 	db	97	;'a'
   525  013A' 6E                 	db	110	;'n'
   526  013B' 64                 	db	100	;'d'
   527  013C' 32                 	db	50	;'2'
   528  013D' 0A                 	db	10
   529  013E' 0A                 	db	10
   530  013F' 09                 	db	9
   531  0140' 70                 	db	112	;'p'
   532  0141' 72                 	db	114	;'r'
   533  0142' 69                 	db	105	;'i'
   534  0143' 6E                 	db	110	;'n'
   535  0144' 74                 	db	116	;'t'
   536  0145' 5F                 	db	95	;'_'
   537  0146' 74                 	db	116	;'t'
   538  0147' 69                 	db	105	;'i'
   539  0148' 6D                 	db	109	;'m'
   540  0149' 65                 	db	101	;'e'
   541  014A' 28                 	db	40
   542  014B' 74                 	db	116	;'t'
   543  014C' 29                 	db	41
   544  014D' 0A                 	db	10
   545  014E' 09                 	db	9
   546  014F' 61                 	db	97	;'a'
   547  0150' 64                 	db	100	;'d'
   548  0151' 6A                 	db	106	;'j'
   549  0152' 75                 	db	117	;'u'
   550  0153' 73                 	db	115	;'s'
   551  0154' 74                 	db	116	;'t'
   552  0155' 5F                 	db	95	;'_'
   553  0156' 74                 	db	116	;'t'
   554  0157' 69                 	db	105	;'i'
   555  0158' 6D                 	db	109	;'m'
   556  0159' 65                 	db	101	;'e'
   557  015A' 28                 	db	40
   558  015B' 61                 	db	97	;'a'
   559  015C' 74                 	db	116	;'t'
   560  015D' 29                 	db	41
   561  015E' 20                 	db	32
   562  015F' 5B                 	db	91	;'['
   563  0160' 68                 	db	104	;'h'
   564  0161' 61                 	db	97	;'a'
   565  0162' 6E                 	db	110	;'n'
   566  0163' 64                 	db	100	;'d'
   567  0164' 3A                 	db	58	;':'
   568  0165' 79                 	db	121	;'y'
   569  0166' 2C                 	db	44
   570  0167' 4D                 	db	77	;'M'
   571  0168' 2C                 	db	44
   572  0169' 64                 	db	100	;'d'
   573  016A' 2C                 	db	44
   574  016B' 68                 	db	104	;'h'
   575  016C' 2C                 	db	44
   576  016D' 6D                 	db	109	;'m'
   577  016E' 2C                 	db	44
   578  016F' 73                 	db	115	;'s'
   579  0170' 5D                 	db	93	;']'
   580  0171' 20                 	db	32
   581  0172' 5B                 	db	91	;'['
   582  0173' 76                 	db	118	;'v'
   583  0174' 61                 	db	97	;'a'
   584  0175' 6C                 	db	108	;'l'
   585  0176' 75                 	db	117	;'u'
   586  0177' 65                 	db	101	;'e'
   587  0178' 28                 	db	40
   588  0179' 64                 	db	100	;'d'
   589  017A' 65                 	db	101	;'e'
   590  017B' 63                 	db	99	;'c'
   591  017C' 69                 	db	105	;'i'
   592  017D' 6D                 	db	109	;'m'
   593  017E' 61                 	db	97	;'a'
   594  017F' 6C                 	db	108	;'l'
   595  0180' 29                 	db	41
   596  0181' 5D                 	db	93	;']'
   597  0182' 0A                 	db	10
   598  0183' 09                 	db	9
   599  0184' 73                 	db	115	;'s'
   600  0185' 65                 	db	101	;'e'
   601  0186' 74                 	db	116	;'t'
   602  0187' 74                 	db	116	;'t'
   603  0188' 69                 	db	105	;'i'
   604  0189' 6E                 	db	110	;'n'
   605  018A' 67                 	db	103	;'g'
   606  018B' 73                 	db	115	;'s'
   607  018C' 28                 	db	40
   608  018D' 73                 	db	115	;'s'
   609  018E' 65                 	db	101	;'e'
   610  018F' 74                 	db	116	;'t'
   611  0190' 29                 	db	41
   612  0191' 20                 	db	32
   613  0192' 5B                 	db	91	;'['
   614  0193' 70                 	db	112	;'p'
   615  0194' 6F                 	db	111	;'o'
   616  0195' 72                 	db	114	;'r'
   617  0196' 74                 	db	116	;'t'
   618  0197' 3A                 	db	58	;':'
   619  0198' 6C                 	db	108	;'l'
   620  0199' 65                 	db	101	;'e'
   621  019A' 66                 	db	102	;'f'
   622  019B' 74                 	db	116	;'t'
   623  019C' 28                 	db	40
   624  019D' 6C                 	db	108	;'l'
   625  019E' 29                 	db	41
   626  019F' 2C                 	db	44
   627  01A0' 63                 	db	99	;'c'
   628  01A1' 65                 	db	101	;'e'
   629  01A2' 6E                 	db	110	;'n'
   630  01A3' 74                 	db	116	;'t'
   631  01A4' 65                 	db	101	;'e'
   632  01A5' 72                 	db	114	;'r'
   633  01A6' 28                 	db	40
   634  01A7' 63                 	db	99	;'c'
   635  01A8' 29                 	db	41
   636  01A9' 2C                 	db	44
   637  01AA' 72                 	db	114	;'r'
   638  01AB' 69                 	db	105	;'i'
   639  01AC' 67                 	db	103	;'g'
   640  01AD' 68                 	db	104	;'h'
   641  01AE' 74                 	db	116	;'t'
   642  01AF' 28                 	db	40
   643  01B0' 72                 	db	114	;'r'
   644  01B1' 29                 	db	41
   645  01B2' 5D                 	db	93	;']'
   646  01B3' 0A                 	db	10
   647  01B4' 09                 	db	9
   648  01B5' 09                 	db	9
   649  01B6' 5B                 	db	91	;'['
   650  01B7' 61                 	db	97	;'a'
   651  01B8' 75                 	db	117	;'u'
   652  01B9' 74                 	db	116	;'t'
   653  01BA' 6F                 	db	111	;'o'
   654  01BB' 5F                 	db	95	;'_'
   655  01BC' 73                 	db	115	;'s'
   656  01BD' 74                 	db	116	;'t'
   657  01BE' 6F                 	db	111	;'o'
   658  01BF' 70                 	db	112	;'p'
   659  01C0' 28                 	db	40
   660  01C1' 61                 	db	97	;'a'
   661  01C2' 73                 	db	115	;'s'
   662  01C3' 29                 	db	41
   663  01C4' 2C                 	db	44
   664  01C5' 61                 	db	97	;'a'
   665  01C6' 6C                 	db	108	;'l'
   666  01C7' 77                 	db	119	;'w'
   667  01C8' 61                 	db	97	;'a'
   668  01C9' 79                 	db	121	;'y'
   669  01CA' 73                 	db	115	;'s'
   670  01CB' 5F                 	db	95	;'_'
   671  01CC' 6F                 	db	111	;'o'
   672  01CD' 6E                 	db	110	;'n'
   673  01CE' 28                 	db	40
   674  01CF' 61                 	db	97	;'a'
   675  01D0' 6F                 	db	111	;'o'
   676  01D1' 29                 	db	41
   677  01D2' 2C                 	db	44
   678  01D3' 69                 	db	105	;'i'
   679  01D4' 6E                 	db	110	;'n'
   680  01D5' 74                 	db	116	;'t'
   681  01D6' 65                 	db	101	;'e'
   682  01D7' 67                 	db	103	;'g'
   683  01D8' 72                 	db	114	;'r'
   684  01D9' 61                 	db	97	;'a'
   685  01DA' 74                 	db	116	;'t'
   686  01DB' 69                 	db	105	;'i'
   687  01DC' 6E                 	db	110	;'n'
   688  01DD' 67                 	db	103	;'g'
   689  01DE' 5F                 	db	95	;'_'
   690  01DF' 72                 	db	114	;'r'
   691  01E0' 65                 	db	101	;'e'
   692  01E1' 73                 	db	115	;'s'
   693  01E2' 65                 	db	101	;'e'
   694  01E3' 74                 	db	116	;'t'
   695  01E4' 28                 	db	40
   696  01E5' 69                 	db	105	;'i'
   697  01E6' 72                 	db	114	;'r'
   698  01E7' 29                 	db	41
   699  01E8' 5D                 	db	93	;']'
   700  01E9' 0A                 	db	10
   701  01EA' 09                 	db	9
   702  01EB' 64                 	db	100	;'d'
   703  01EC' 69                 	db	105	;'i'
   704  01ED' 73                 	db	115	;'s'
   705  01EE' 70                 	db	112	;'p'
   706  01EF' 6C                 	db	108	;'l'
   707  01F0' 61                 	db	97	;'a'
   708  01F1' 79                 	db	121	;'y'
   709  01F2' 28                 	db	40
   710  01F3' 64                 	db	100	;'d'
   711  01F4' 29                 	db	41
   712  01F5' 20                 	db	32
   713  01F6' 5B                 	db	91	;'['
   714  01F7' 70                 	db	112	;'p'
   715  01F8' 6F                 	db	111	;'o'
   716  01F9' 72                 	db	114	;'r'
   717  01FA' 74                 	db	116	;'t'
   718  01FB' 3A                 	db	58	;':'
   719  01FC' 6C                 	db	108	;'l'
   720  01FD' 65                 	db	101	;'e'
   721  01FE' 66                 	db	102	;'f'
   722  01FF' 74                 	db	116	;'t'
   723  0200' 28                 	db	40
   724  0201' 6C                 	db	108	;'l'
   725  0202' 29                 	db	41
   726  0203' 2C                 	db	44
   727  0204' 63                 	db	99	;'c'
   728  0205' 65                 	db	101	;'e'
   729  0206' 6E                 	db	110	;'n'
   730  0207' 74                 	db	116	;'t'
   731  0208' 65                 	db	101	;'e'
   732  0209' 72                 	db	114	;'r'
   733  020A' 28                 	db	40
   734  020B' 63                 	db	99	;'c'
   735  020C' 29                 	db	41
   736  020D' 2C                 	db	44
   737  020E' 72                 	db	114	;'r'
   738  020F' 69                 	db	105	;'i'
   739  0210' 67                 	db	103	;'g'
   740  0211' 68                 	db	104	;'h'
   741  0212' 74                 	db	116	;'t'
   742  0213' 28                 	db	40
   743  0214' 72                 	db	114	;'r'
   744  0215' 29                 	db	41
   745  0216' 5D                 	db	93	;']'
   746  0217' 0A                 	db	10
   747  0218' 09                 	db	9
   748  0219' 09                 	db	9
   749  021A' 5B                 	db	91	;'['
   750  021B' 69                 	db	105	;'i'
   751  021C' 74                 	db	116	;'t'
   752  021D' 65                 	db	101	;'e'
   753  021E' 6D                 	db	109	;'m'
   754  021F' 3A                 	db	58	;':'
   755  0220' 63                 	db	99	;'c'
   756  0221' 75                 	db	117	;'u'
   757  0222' 72                 	db	114	;'r'
   758  0223' 72                 	db	114	;'r'
   759  0224' 65                 	db	101	;'e'
   760  0225' 6E                 	db	110	;'n'
   761  0226' 74                 	db	116	;'t'
   762  0227' 28                 	db	40
   763  0228' 63                 	db	99	;'c'
   764  0229' 29                 	db	41
   765  022A' 2C                 	db	44
   766  022B' 69                 	db	105	;'i'
   767  022C' 6E                 	db	110	;'n'
   768  022D' 74                 	db	116	;'t'
   769  022E' 65                 	db	101	;'e'
   770  022F' 67                 	db	103	;'g'
   771  0230' 72                 	db	114	;'r'
   772  0231' 61                 	db	97	;'a'
   773  0232' 74                 	db	116	;'t'
   774  0233' 65                 	db	101	;'e'
   775  0234' 64                 	db	100	;'d'
   776  0235' 5F                 	db	95	;'_'
   777  0236' 63                 	db	99	;'c'
   778  0237' 75                 	db	117	;'u'
   779  0238' 72                 	db	114	;'r'
   780  0239' 72                 	db	114	;'r'
   781  023A' 65                 	db	101	;'e'
   782  023B' 6E                 	db	110	;'n'
   783  023C' 74                 	db	116	;'t'
   784  023D' 28                 	db	40
   785  023E' 69                 	db	105	;'i'
   786  023F' 63                 	db	99	;'c'
   787  0240' 29                 	db	41
   788  0241' 2C                 	db	44
   789  0242' 69                 	db	105	;'i'
   790  0243' 6E                 	db	110	;'n'
   791  0244' 74                 	db	116	;'t'
   792  0245' 65                 	db	101	;'e'
   793  0246' 67                 	db	103	;'g'
   794  0247' 72                 	db	114	;'r'
   795  0248' 61                 	db	97	;'a'
   796  0249' 74                 	db	116	;'t'
   797  024A' 65                 	db	101	;'e'
   798  024B' 64                 	db	100	;'d'
   799  024C' 5F                 	db	95	;'_'
   800  024D' 74                 	db	116	;'t'
   801  024E' 69                 	db	105	;'i'
   802  024F' 6D                 	db	109	;'m'
   803  0250' 65                 	db	101	;'e'
   804  0251' 28                 	db	40
   805  0252' 69                 	db	105	;'i'
   806  0253' 74                 	db	116	;'t'
   807  0254' 29                 	db	41
   808  0255' 5D                 	db	93	;']'
   809  0256' 0A                 	db	10
   810  0257' 09                 	db	9
   811  0258' 6F                 	db	111	;'o'
   812  0259' 75                 	db	117	;'u'
   813  025A' 74                 	db	116	;'t'
   814  025B' 70                 	db	112	;'p'
   815  025C' 75                 	db	117	;'u'
   816  025D' 74                 	db	116	;'t'
   817  025E' 5F                 	db	95	;'_'
   818  025F' 64                 	db	100	;'d'
   819  0260' 61                 	db	97	;'a'
   820  0261' 74                 	db	116	;'t'
   821  0262' 61                 	db	97	;'a'
   822  0263' 28                 	db	40
   823  0264' 6F                 	db	111	;'o'
   824  0265' 64                 	db	100	;'d'
   825  0266' 29                 	db	41
   826  0267' 20                 	db	32
   827  0268' 3C                 	db	60	;'<'
   828  0269' 2D                 	db	45
   829  026A' 20                 	db	32
   830  026B' 73                 	db	115	;'s'
   831  026C' 74                 	db	116	;'t'
   832  026D' 6F                 	db	111	;'o'
   833  026E' 70                 	db	112	;'p'
   834  026F' 70                 	db	112	;'p'
   835  0270' 65                 	db	101	;'e'
   836  0271' 64                 	db	100	;'d'
   837  0272' 20                 	db	32
   838  0273' 62                 	db	98	;'b'
   839  0274' 79                 	db	121	;'y'
   840  0275' 20                 	db	32
   841  0276' 70                 	db	112	;'p'
   842  0277' 72                 	db	114	;'r'
   843  0278' 65                 	db	101	;'e'
   844  0279' 73                 	db	115	;'s'
   845  027A' 73                 	db	115	;'s'
   846  027B' 69                 	db	105	;'i'
   847  027C' 6E                 	db	110	;'n'
   848  027D' 67                 	db	103	;'g'
   849  027E' 20                 	db	32
   850  027F' 74                 	db	116	;'t'
   851  0280' 68                 	db	104	;'h'
   852  0281' 65                 	db	101	;'e'
   853  0282' 20                 	db	32
   854  0283' 45                 	db	69	;'E'
   855  0284' 6E                 	db	110	;'n'
   856  0285' 74                 	db	116	;'t'
   857  0286' 65                 	db	101	;'e'
   858  0287' 72                 	db	114	;'r'
   859  0288' 20                 	db	32
   860  0289' 6B                 	db	107	;'k'
   861  028A' 65                 	db	101	;'e'
   862  028B' 79                 	db	121	;'y'
   863  028C' 0A                 	db	10
   864  028D' 09                 	db	9
   865  028E' 74                 	db	116	;'t'
   866  028F' 6F                 	db	111	;'o'
   867  0290' 75                 	db	117	;'u'
   868  0291' 63                 	db	99	;'c'
   869  0292' 68                 	db	104	;'h'
   870  0293' 20                 	db	32
   871  0294' 5B                 	db	91	;'['
   872  0295' 72                 	db	114	;'r'
   873  0296' 65                 	db	101	;'e'
   874  0297' 73                 	db	115	;'s'
   875  0298' 65                 	db	101	;'e'
   876  0299' 74                 	db	116	;'t'
   877  029A' 28                 	db	40
   878  029B' 72                 	db	114	;'r'
   879  029C' 29                 	db	41
   880  029D' 2C                 	db	44
   881  029E' 69                 	db	105	;'i'
   882  029F' 6E                 	db	110	;'n'
   883  02A0' 69                 	db	105	;'i'
   884  02A1' 74                 	db	116	;'t'
   885  02A2' 69                 	db	105	;'i'
   886  02A3' 61                 	db	97	;'a'
   887  02A4' 6C                 	db	108	;'l'
   888  02A5' 69                 	db	105	;'i'
   889  02A6' 7A                 	db	122	;'z'
   890  02A7' 65                 	db	101	;'e'
   891  02A8' 28                 	db	40
   892  02A9' 69                 	db	105	;'i'
   893  02AA' 6E                 	db	110	;'n'
   894  02AB' 69                 	db	105	;'i'
   895  02AC' 74                 	db	116	;'t'
   896  02AD' 29                 	db	41
   897  02AE' 5D                 	db	93	;']'
   898  02AF' 20                 	db	32
   899  02B0' 5B                 	db	91	;'['
   900  02B1' 76                 	db	118	;'v'
   901  02B2' 61                 	db	97	;'a'
   902  02B3' 6C                 	db	108	;'l'
   903  02B4' 75                 	db	117	;'u'
   904  02B5' 65                 	db	101	;'e'
   905  02B6' 28                 	db	40
   906  02B7' 25                 	db	37
   907  02B8' 29                 	db	41
   908  02B9' 5D                 	db	93	;']'
   909  02BA' 0A                 	db	10
   910  02BB' 0A                 	db	10
   911  02BC' 09                 	db	9
   912  02BD' 66                 	db	102	;'f'
   913  02BE' 6F                 	db	111	;'o'
   914  02BF' 72                 	db	114	;'r'
   915  02C0' 20                 	db	32
   916  02C1' 44                 	db	68	;'D'
   917  02C2' 65                 	db	101	;'e'
   918  02C3' 76                 	db	118	;'v'
   919  02C4' 65                 	db	101	;'e'
   920  02C5' 6C                 	db	108	;'l'
   921  02C6' 6F                 	db	111	;'o'
   922  02C7' 70                 	db	112	;'p'
   923  02C8' 70                 	db	112	;'p'
   924  02C9' 65                 	db	101	;'e'
   925  02CA' 72                 	db	114	;'r'
   926  02CB' 0A                 	db	10
   927  02CC' 09                 	db	9
   928  02CD' 52                 	db	82	;'R'
   929  02CE' 45                 	db	69	;'E'
   930  02CF' 53                 	db	83	;'S'
   931  02D0' 45                 	db	69	;'E'
   932  02D1' 54                 	db	84	;'T'
   933  02D2' 28                 	db	40
   934  02D3' 29                 	db	41
   935  02D4' 3B                 	db	59	;';'
   936  02D5' 0A                 	db	10
   937  02D6' 09                 	db	9
   938  02D7' 62                 	db	98	;'b'
   939  02D8' 6F                 	db	111	;'o'
   940  02D9' 6F                 	db	111	;'o'
   941  02DA' 74                 	db	116	;'t'
   942  02DB' 6C                 	db	108	;'l'
   943  02DC' 6F                 	db	111	;'o'
   944  02DD' 61                 	db	97	;'a'
   945  02DE' 64                 	db	100	;'d'
   946  02DF' 0A                 	db	10
   947  02E0' 00                 	db	0
   948  02E1'                    STR_67:
   949  02E1' 09                 	db	9
   950  02E2' 63                 	db	99	;'c'
   951  02E3' 75                 	db	117	;'u'
   952  02E4' 72                 	db	114	;'r'
   953  02E5' 72                 	db	114	;'r'
   954  02E6' 65                 	db	101	;'e'
   955  02E7' 6E                 	db	110	;'n'
   956  02E8' 74                 	db	116	;'t'
   957  02E9' 28                 	db	40
   958  02EA' 63                 	db	99	;'c'
   959  02EB' 29                 	db	41
   960  02EC' 20                 	db	32
   961  02ED' 6F                 	db	111	;'o'
   962  02EE' 72                 	db	114	;'r'
   963  02EF' 20                 	db	32
   964  02F0' 69                 	db	105	;'i'
   965  02F1' 6E                 	db	110	;'n'
   966  02F2' 74                 	db	116	;'t'
   967  02F3' 65                 	db	101	;'e'
   968  02F4' 67                 	db	103	;'g'
   969  02F5' 72                 	db	114	;'r'
   970  02F6' 61                 	db	97	;'a'
   971  02F7' 74                 	db	116	;'t'
   972  02F8' 65                 	db	101	;'e'
   973  02F9' 64                 	db	100	;'d'
   974  02FA' 5F                 	db	95	;'_'
   975  02FB' 63                 	db	99	;'c'
   976  02FC' 75                 	db	117	;'u'
   977  02FD' 72                 	db	114	;'r'
   978  02FE' 72                 	db	114	;'r'
   979  02FF' 65                 	db	101	;'e'
   980  0300' 6E                 	db	110	;'n'
   981  0301' 74                 	db	116	;'t'
   982  0302' 28                 	db	40
   983  0303' 69                 	db	105	;'i'
   984  0304' 63                 	db	99	;'c'
   985  0305' 29                 	db	41
   986  0306' 20                 	db	32
   987  0307' 6F                 	db	111	;'o'
   988  0308' 72                 	db	114	;'r'
   989  0309' 20                 	db	32
   990  030A' 69                 	db	105	;'i'
   991  030B' 6E                 	db	110	;'n'
   992  030C' 74                 	db	116	;'t'
   993  030D' 65                 	db	101	;'e'
   994  030E' 67                 	db	103	;'g'
   995  030F' 72                 	db	114	;'r'
   996  0310' 61                 	db	97	;'a'
   997  0311' 74                 	db	116	;'t'
   998  0312' 65                 	db	101	;'e'
   999  0313' 64                 	db	100	;'d'
  1000  0314' 5F                 	db	95	;'_'
  1001  0315' 74                 	db	116	;'t'
  1002  0316' 69                 	db	105	;'i'
  1003  0317' 6D                 	db	109	;'m'
  1004  0318' 65                 	db	101	;'e'
  1005  0319' 28                 	db	40
  1006  031A' 69                 	db	105	;'i'
  1007  031B' 74                 	db	116	;'t'
  1008  031C' 29                 	db	41
  1009  031D' 0A                 	db	10
  1010  031E' 00                 	db	0
  1011  031F'                    STR_5:
  1012  031F' 09                 	db	9
  1013  0320' 32                 	db	50	;'2'
  1014  0321' 30                 	db	48	;'0'
  1015  0322' 25                 	db	37
  1016  0323' 30                 	db	48	;'0'
  1017  0324' 32                 	db	50	;'2'
  1018  0325' 64                 	db	100	;'d'
  1019  0326' 2F                 	db	47
  1020  0327' 25                 	db	37
  1021  0328' 30                 	db	48	;'0'
  1022  0329' 32                 	db	50	;'2'
  1023  032A' 64                 	db	100	;'d'
  1024  032B' 2F                 	db	47
  1025  032C' 25                 	db	37
  1026  032D' 30                 	db	48	;'0'
  1027  032E' 32                 	db	50	;'2'
  1028  032F' 64                 	db	100	;'d'
  1029  0330' 28                 	db	40
  1030  0331' 25                 	db	37
  1031  0332' 73                 	db	115	;'s'
  1032  0333' 29                 	db	41
  1033  0334' 25                 	db	37
  1034  0335' 30                 	db	48	;'0'
  1035  0336' 32                 	db	50	;'2'
  1036  0337' 64                 	db	100	;'d'
  1037  0338' 3A                 	db	58	;':'
  1038  0339' 25                 	db	37
  1039  033A' 30                 	db	48	;'0'
  1040  033B' 32                 	db	50	;'2'
  1041  033C' 64                 	db	100	;'d'
  1042  033D' 2D                 	db	45
  1043  033E' 25                 	db	37
  1044  033F' 30                 	db	48	;'0'
  1045  0340' 32                 	db	50	;'2'
  1046  0341' 64                 	db	100	;'d'
  1047  0342' 0A                 	db	10
  1048  0343' 00                 	db	0
  1049  0344'                    STR_54:
  1050  0344' 09                 	db	9
  1051  0345' 69                 	db	105	;'i'
  1052  0346' 6E                 	db	110	;'n'
  1053  0347' 76                 	db	118	;'v'
  1054  0348' 61                 	db	97	;'a'
  1055  0349' 6C                 	db	108	;'l'
  1056  034A' 69                 	db	105	;'i'
  1057  034B' 64                 	db	100	;'d'
  1058  034C' 20                 	db	32
  1059  034D' 64                 	db	100	;'d'
  1060  034E' 61                 	db	97	;'a'
  1061  034F' 74                 	db	116	;'t'
  1062  0350' 61                 	db	97	;'a'
  1063  0351' 0A                 	db	10
  1064  0352' 09                 	db	9
  1065  0353' 69                 	db	105	;'i'
  1066  0354' 6E                 	db	110	;'n'
  1067  0355' 69                 	db	105	;'i'
  1068  0356' 74                 	db	116	;'t'
  1069  0357' 69                 	db	105	;'i'
  1070  0358' 61                 	db	97	;'a'
  1071  0359' 6C                 	db	108	;'l'
  1072  035A' 69                 	db	105	;'i'
  1073  035B' 7A                 	db	122	;'z'
  1074  035C' 69                 	db	105	;'i'
  1075  035D' 6E                 	db	110	;'n'
  1076  035E' 67                 	db	103	;'g'
  1077  035F' 20                 	db	32
  1078  0360' 66                 	db	102	;'f'
  1079  0361' 61                 	db	97	;'a'
  1080  0362' 69                 	db	105	;'i'
  1081  0363' 6C                 	db	108	;'l'
  1082  0364' 65                 	db	101	;'e'
  1083  0365' 64                 	db	100	;'d'
  1084  0366' 0A                 	db	10
  1085  0367' 00                 	db	0
  1086  0368'                    STR_62:
  1087  0368' 09                 	db	9
  1088  0369' 6C                 	db	108	;'l'
  1089  036A' 65                 	db	101	;'e'
  1090  036B' 66                 	db	102	;'f'
  1091  036C' 74                 	db	116	;'t'
  1092  036D' 28                 	db	40
  1093  036E' 6C                 	db	108	;'l'
  1094  036F' 29                 	db	41
  1095  0370' 20                 	db	32
  1096  0371' 6F                 	db	111	;'o'
  1097  0372' 72                 	db	114	;'r'
  1098  0373' 20                 	db	32
  1099  0374' 63                 	db	99	;'c'
  1100  0375' 65                 	db	101	;'e'
  1101  0376' 6E                 	db	110	;'n'
  1102  0377' 74                 	db	116	;'t'
  1103  0378' 65                 	db	101	;'e'
  1104  0379' 72                 	db	114	;'r'
  1105  037A' 28                 	db	40
  1106  037B' 63                 	db	99	;'c'
  1107  037C' 29                 	db	41
  1108  037D' 20                 	db	32
  1109  037E' 6F                 	db	111	;'o'
  1110  037F' 72                 	db	114	;'r'
  1111  0380' 20                 	db	32
  1112  0381' 72                 	db	114	;'r'
  1113  0382' 69                 	db	105	;'i'
  1114  0383' 67                 	db	103	;'g'
  1115  0384' 68                 	db	104	;'h'
  1116  0385' 74                 	db	116	;'t'
  1117  0386' 28                 	db	40
  1118  0387' 72                 	db	114	;'r'
  1119  0388' 29                 	db	41
  1120  0389' 0A                 	db	10
  1121  038A' 00                 	db	0
  1122  038B'                    STR_53:
  1123  038B' 09                 	db	9
  1124  038C' 69                 	db	105	;'i'
  1125  038D' 6E                 	db	110	;'n'
  1126  038E' 69                 	db	105	;'i'
  1127  038F' 74                 	db	116	;'t'
  1128  0390' 69                 	db	105	;'i'
  1129  0391' 61                 	db	97	;'a'
  1130  0392' 6C                 	db	108	;'l'
  1131  0393' 69                 	db	105	;'i'
  1132  0394' 7A                 	db	122	;'z'
  1133  0395' 69                 	db	105	;'i'
  1134  0396' 6E                 	db	110	;'n'
  1135  0397' 67                 	db	103	;'g'
  1136  0398' 20                 	db	32
  1137  0399' 63                 	db	99	;'c'
  1138  039A' 6F                 	db	111	;'o'
  1139  039B' 6D                 	db	109	;'m'
  1140  039C' 70                 	db	112	;'p'
  1141  039D' 6C                 	db	108	;'l'
  1142  039E' 65                 	db	101	;'e'
  1143  039F' 74                 	db	116	;'t'
  1144  03A0' 65                 	db	101	;'e'
  1145  03A1' 0A                 	db	10
  1146  03A2' 00                 	db	0
  1147  03A3'                    STR_70:
  1148  03A3' 69                 	db	105	;'i'
  1149  03A4' 6E                 	db	110	;'n'
  1150  03A5' 74                 	db	116	;'t'
  1151  03A6' 65                 	db	101	;'e'
  1152  03A7' 67                 	db	103	;'g'
  1153  03A8' 72                 	db	114	;'r'
  1154  03A9' 61                 	db	97	;'a'
  1155  03AA' 74                 	db	116	;'t'
  1156  03AB' 65                 	db	101	;'e'
  1157  03AC' 64                 	db	100	;'d'
  1158  03AD' 5F                 	db	95	;'_'
  1159  03AE' 63                 	db	99	;'c'
  1160  03AF' 75                 	db	117	;'u'
  1161  03B0' 72                 	db	114	;'r'
  1162  03B1' 72                 	db	114	;'r'
  1163  03B2' 65                 	db	101	;'e'
  1164  03B3' 6E                 	db	110	;'n'
  1165  03B4' 74                 	db	116	;'t'
  1166  03B5' 00                 	db	0
  1167  03B6'                    STR_57:
  1168  03B6' 09                 	db	9
  1169  03B7' 73                 	db	115	;'s'
  1170  03B8' 65                 	db	101	;'e'
  1171  03B9' 74                 	db	116	;'t'
  1172  03BA' 69                 	db	105	;'i'
  1173  03BB' 6E                 	db	110	;'n'
  1174  03BC' 67                 	db	103	;'g'
  1175  03BD' 20                 	db	32
  1176  03BE' 63                 	db	99	;'c'
  1177  03BF' 6F                 	db	111	;'o'
  1178  03C0' 6D                 	db	109	;'m'
  1179  03C1' 70                 	db	112	;'p'
  1180  03C2' 6C                 	db	108	;'l'
  1181  03C3' 65                 	db	101	;'e'
  1182  03C4' 74                 	db	116	;'t'
  1183  03C5' 65                 	db	101	;'e'
  1184  03C6' 0A                 	db	10
  1185  03C7' 00                 	db	0
  1186  03C8'                    STR_23:
  1187  03C8' 43                 	db	67	;'C'
  1188  03C9' 68                 	db	104	;'h'
  1189  03CA' 61                 	db	97	;'a'
  1190  03CB' 72                 	db	114	;'r'
  1191  03CC' 67                 	db	103	;'g'
  1192  03CD' 65                 	db	101	;'e'
  1193  03CE' 20                 	db	32
  1194  03CF' 53                 	db	83	;'S'
  1195  03D0' 74                 	db	116	;'t'
  1196  03D1' 61                 	db	97	;'a'
  1197  03D2' 74                 	db	116	;'t'
  1198  03D3' 69                 	db	105	;'i'
  1199  03D4' 6F                 	db	111	;'o'
  1200  03D5' 6E                 	db	110	;'n'
  1201  03D6' 20                 	db	32
  1202  03D7' 36                 	db	54	;'6'
  1203  03D8' 00                 	db	0
  1204  03D9'                    STR_97:
  1205  03D9' 3C                 	db	60	;'<'
  1206  03DA' 2D                 	db	45
  1207  03DB' 20                 	db	32
  1208  03DC' 20                 	db	32
  1209  03DD' 20                 	db	32
  1210  03DE' 53                 	db	83	;'S'
  1211  03DF' 65                 	db	101	;'e'
  1212  03E0' 6C                 	db	108	;'l'
  1213  03E1' 65                 	db	101	;'e'
  1214  03E2' 63                 	db	99	;'c'
  1215  03E3' 74                 	db	116	;'t'
  1216  03E4' 20                 	db	32
  1217  03E5' 20                 	db	32
  1218  03E6' 20                 	db	32
  1219  03E7' 2D                 	db	45
  1220  03E8' 3E                 	db	62	;'>'
  1221  03E9' 00                 	db	0
  1222  03EA'                    STR_103:
  1223  03EA' 54                 	db	84	;'T'
  1224  03EB' 6F                 	db	111	;'o'
  1225  03EC' 67                 	db	103	;'g'
  1226  03ED' 67                 	db	103	;'g'
  1227  03EE' 6C                 	db	108	;'l'
  1228  03EF' 65                 	db	101	;'e'
  1229  03F0' 20                 	db	32
  1230  03F1' 41                 	db	65	;'A'
  1231  03F2' 75                 	db	117	;'u'
  1232  03F3' 74                 	db	116	;'t'
  1233  03F4' 6F                 	db	111	;'o'
  1234  03F5' 20                 	db	32
  1235  03F6' 53                 	db	83	;'S'
  1236  03F7' 74                 	db	116	;'t'
  1237  03F8' 6F                 	db	111	;'o'
  1238  03F9' 70                 	db	112	;'p'
  1239  03FA' 00                 	db	0
  1240  03FB'                    STR_120:
  1241  03FB' 4C                 	db	76	;'L'
  1242  03FC' 65                 	db	101	;'e'
  1243  03FD' 66                 	db	102	;'f'
  1244  03FE' 74                 	db	116	;'t'
  1245  03FF' 20                 	db	32
  1246  0400' 43                 	db	67	;'C'
  1247  0401' 65                 	db	101	;'e'
  1248  0402' 6E                 	db	110	;'n'
  1249  0403' 74                 	db	116	;'t'
  1250  0404' 72                 	db	114	;'r'
  1251  0405' 20                 	db	32
  1252  0406' 52                 	db	82	;'R'
  1253  0407' 69                 	db	105	;'i'
  1254  0408' 67                 	db	103	;'g'
  1255  0409' 68                 	db	104	;'h'
  1256  040A' 74                 	db	116	;'t'
  1257  040B' 00                 	db	0
  1258  040C'                    STR_41:
  1259  040C' 42                 	db	66	;'B'
  1260  040D' 6F                 	db	111	;'o'
  1261  040E' 6F                 	db	111	;'o'
  1262  040F' 74                 	db	116	;'t'
  1263  0410' 6C                 	db	108	;'l'
  1264  0411' 6F                 	db	111	;'o'
  1265  0412' 61                 	db	97	;'a'
  1266  0413' 64                 	db	100	;'d'
  1267  0414' 65                 	db	101	;'e'
  1268  0415' 72                 	db	114	;'r'
  1269  0416' 20                 	db	32
  1270  0417' 6D                 	db	109	;'m'
  1271  0418' 6F                 	db	111	;'o'
  1272  0419' 64                 	db	100	;'d'
  1273  041A' 65                 	db	101	;'e'
  1274  041B' 00                 	db	0
  1275  041C'                    STR_101:
  1276  041C' 41                 	db	65	;'A'
  1277  041D' 64                 	db	100	;'d'
  1278  041E' 6A                 	db	106	;'j'
  1279  041F' 75                 	db	117	;'u'
  1280  0420' 73                 	db	115	;'s'
  1281  0421' 74                 	db	116	;'t'
  1282  0422' 20                 	db	32
  1283  0423' 74                 	db	116	;'t'
  1284  0424' 68                 	db	104	;'h'
  1285  0425' 65                 	db	101	;'e'
  1286  0426' 20                 	db	32
  1287  0427' 54                 	db	84	;'T'
  1288  0428' 69                 	db	105	;'i'
  1289  0429' 6D                 	db	109	;'m'
  1290  042A' 65                 	db	101	;'e'
  1291  042B' 00                 	db	0
  1292  042C'                    STR_72:
  1293  042C' 69                 	db	105	;'i'
  1294  042D' 6E                 	db	110	;'n'
  1295  042E' 74                 	db	116	;'t'
  1296  042F' 65                 	db	101	;'e'
  1297  0430' 67                 	db	103	;'g'
  1298  0431' 72                 	db	114	;'r'
  1299  0432' 61                 	db	97	;'a'
  1300  0433' 74                 	db	116	;'t'
  1301  0434' 65                 	db	101	;'e'
  1302  0435' 64                 	db	100	;'d'
  1303  0436' 5F                 	db	95	;'_'
  1304  0437' 74                 	db	116	;'t'
  1305  0438' 69                 	db	105	;'i'
  1306  0439' 6D                 	db	109	;'m'
  1307  043A' 65                 	db	101	;'e'
  1308  043B' 00                 	db	0
  1309  043C'                    STR_105:
  1310  043C' 54                 	db	84	;'T'
  1311  043D' 6F                 	db	111	;'o'
  1312  043E' 67                 	db	103	;'g'
  1313  043F' 67                 	db	103	;'g'
  1314  0440' 6C                 	db	108	;'l'
  1315  0441' 65                 	db	101	;'e'
  1316  0442' 20                 	db	32
  1317  0443' 4C                 	db	76	;'L'
  1318  0444' 45                 	db	69	;'E'
  1319  0445' 44                 	db	68	;'D'
  1320  0446' 20                 	db	32
  1321  0447' 4C                 	db	76	;'L'
  1322  0448' 61                 	db	97	;'a'
  1323  0449' 6D                 	db	109	;'m'
  1324  044A' 70                 	db	112	;'p'
  1325  044B' 00                 	db	0
  1326  044C'                    STR_25:
  1327  044C' 53                 	db	83	;'S'
  1328  044D' 74                 	db	116	;'t'
  1329  044E' 61                 	db	97	;'a'
  1330  044F' 72                 	db	114	;'r'
  1331  0450' 74                 	db	116	;'t'
  1332  0451' 20                 	db	32
  1333  0452' 43                 	db	67	;'C'
  1334  0453' 68                 	db	104	;'h'
  1335  0454' 61                 	db	97	;'a'
  1336  0455' 72                 	db	114	;'r'
  1337  0456' 67                 	db	103	;'g'
  1338  0457' 69                 	db	105	;'i'
  1339  0458' 6E                 	db	110	;'n'
  1340  0459' 67                 	db	103	;'g'
  1341  045A' 00                 	db	0
  1342  045B'                    STR_107:
  1343  045B' 49                 	db	73	;'I'
  1344  045C' 6E                 	db	110	;'n'
  1345  045D' 74                 	db	116	;'t'
  1346  045E' 65                 	db	101	;'e'
  1347  045F' 67                 	db	103	;'g'
  1348  0460' 72                 	db	114	;'r'
  1349  0461' 61                 	db	97	;'a'
  1350  0462' 74                 	db	116	;'t'
  1351  0463' 20                 	db	32
  1352  0464' 52                 	db	82	;'R'
  1353  0465' 65                 	db	101	;'e'
  1354  0466' 73                 	db	115	;'s'
  1355  0467' 65                 	db	101	;'e'
  1356  0468' 74                 	db	116	;'t'
  1357  0469' 00                 	db	0
  1358  046A'                    STR_24:
  1359  046A' 4D                 	db	77	;'M'
  1360  046B' 61                 	db	97	;'a'
  1361  046C' 64                 	db	100	;'d'
  1362  046D' 65                 	db	101	;'e'
  1363  046E' 20                 	db	32
  1364  046F' 62                 	db	98	;'b'
  1365  0470' 79                 	db	121	;'y'
  1366  0471' 20                 	db	32
  1367  0472' 4B                 	db	75	;'K'
  1368  0473' 45                 	db	69	;'E'
  1369  0474' 52                 	db	82	;'R'
  1370  0475' 49                 	db	73	;'I'
  1371  0476' 00                 	db	0
  1372  0477'                    STR_146:
  1373  0477' 53                 	db	83	;'S'
  1374  0478' 4C                 	db	76	;'L'
  1375  0479' 45                 	db	69	;'E'
  1376  047A' 45                 	db	69	;'E'
  1377  047B' 50                 	db	80	;'P'
  1378  047C' 49                 	db	73	;'I'
  1379  047D' 4E                 	db	78	;'N'
  1380  047E' 47                 	db	71	;'G'
  1381  047F' 20                 	db	32
  1382  0480' 4E                 	db	78	;'N'
  1383  0481' 4F                 	db	79	;'O'
  1384  0482' 57                 	db	87	;'W'
  1385  0483' 00                 	db	0
  1386  0484'                    STR_40:
  1387  0484' 50                 	db	80	;'P'
  1388  0485' 49                 	db	73	;'I'
  1389  0486' 43                 	db	67	;'C'
  1390  0487' 31                 	db	49	;'1'
  1391  0488' 38                 	db	56	;'8'
  1392  0489' 46                 	db	70	;'F'
  1393  048A' 32                 	db	50	;'2'
  1394  048B' 37                 	db	55	;'7'
  1395  048C' 4A                 	db	74	;'J'
  1396  048D' 35                 	db	53	;'5'
  1397  048E' 33                 	db	51	;'3'
  1398  048F' 00                 	db	0
  1399  0490'                    STR_48:
  1400  0490' 6F                 	db	111	;'o'
  1401  0491' 75                 	db	117	;'u'
  1402  0492' 74                 	db	116	;'t'
  1403  0493' 70                 	db	112	;'p'
  1404  0494' 75                 	db	117	;'u'
  1405  0495' 74                 	db	116	;'t'
  1406  0496' 5F                 	db	95	;'_'
  1407  0497' 64                 	db	100	;'d'
  1408  0498' 61                 	db	97	;'a'
  1409  0499' 74                 	db	116	;'t'
  1410  049A' 61                 	db	97	;'a'
  1411  049B' 00                 	db	0
  1412  049C'                    STR_10:
  1413  049C' 61                 	db	97	;'a'
  1414  049D' 64                 	db	100	;'d'
  1415  049E' 6A                 	db	106	;'j'
  1416  049F' 75                 	db	117	;'u'
  1417  04A0' 73                 	db	115	;'s'
  1418  04A1' 74                 	db	116	;'t'
  1419  04A2' 5F                 	db	95	;'_'
  1420  04A3' 74                 	db	116	;'t'
  1421  04A4' 69                 	db	105	;'i'
  1422  04A5' 6D                 	db	109	;'m'
  1423  04A6' 65                 	db	101	;'e'
  1424  04A7' 00                 	db	0
  1425  04A8'                    STR_7:
  1426  04A8' 70                 	db	112	;'p'
  1427  04A9' 72                 	db	114	;'r'
  1428  04AA' 69                 	db	105	;'i'
  1429  04AB' 6E                 	db	110	;'n'
  1430  04AC' 74                 	db	116	;'t'
  1431  04AD' 5F                 	db	95	;'_'
  1432  04AE' 74                 	db	116	;'t'
  1433  04AF' 69                 	db	105	;'i'
  1434  04B0' 6D                 	db	109	;'m'
  1435  04B1' 65                 	db	101	;'e'
  1436  04B2' 00                 	db	0
  1437  04B3'                    STR_51:
  1438  04B3' 69                 	db	105	;'i'
  1439  04B4' 6E                 	db	110	;'n'
  1440  04B5' 69                 	db	105	;'i'
  1441  04B6' 74                 	db	116	;'t'
  1442  04B7' 69                 	db	105	;'i'
  1443  04B8' 61                 	db	97	;'a'
  1444  04B9' 6C                 	db	108	;'l'
  1445  04BA' 69                 	db	105	;'i'
  1446  04BB' 7A                 	db	122	;'z'
  1447  04BC' 65                 	db	101	;'e'
  1448  04BD' 00                 	db	0
  1449  04BE'                    STR_136:
  1450  04BE' 20                 	db	32
  1451  04BF' 20                 	db	32
  1452  04C0' 09                 	db	9
  1453  04C1' 50                 	db	80	;'P'
  1454  04C2' 4F                 	db	79	;'O'
  1455  04C3' 52                 	db	82	;'R'
  1456  04C4' 54                 	db	84	;'T'
  1457  04C5' 3A                 	db	58	;':'
  1458  04C6' 00                 	db	0
  1459  04C7'                    STR_45:
  1460  04C7' 52                 	db	82	;'R'
  1461  04C8' 45                 	db	69	;'E'
  1462  04C9' 53                 	db	83	;'S'
  1463  04CA' 45                 	db	69	;'E'
  1464  04CB' 54                 	db	84	;'T'
  1465  04CC' 28                 	db	40
  1466  04CD' 29                 	db	41
  1467  04CE' 3B                 	db	59	;';'
  1468  04CF' 00                 	db	0
  1469  04D0'                    STR_46:
  1470  04D0' 62                 	db	98	;'b'
  1471  04D1' 6F                 	db	111	;'o'
  1472  04D2' 6F                 	db	111	;'o'
  1473  04D3' 74                 	db	116	;'t'
  1474  04D4' 6C                 	db	108	;'l'
  1475  04D5' 6F                 	db	111	;'o'
  1476  04D6' 61                 	db	97	;'a'
  1477  04D7' 64                 	db	100	;'d'
  1478  04D8' 00                 	db	0
  1479  04D9'                    STR_96:
  1480  04D9' 53                 	db	83	;'S'
  1481  04DA' 65                 	db	101	;'e'
  1482  04DB' 74                 	db	116	;'t'
  1483  04DC' 74                 	db	116	;'t'
  1484  04DD' 69                 	db	105	;'i'
  1485  04DE' 6E                 	db	110	;'n'
  1486  04DF' 67                 	db	103	;'g'
  1487  04E0' 73                 	db	115	;'s'
  1488  04E1' 00                 	db	0
  1489  04E2'                    STR_6:
  1490  04E2' 09                 	db	9
  1491  04E3' 65                 	db	101	;'e'
  1492  04E4' 72                 	db	114	;'r'
  1493  04E5' 72                 	db	114	;'r'
  1494  04E6' 6F                 	db	111	;'o'
  1495  04E7' 72                 	db	114	;'r'
  1496  04E8' 0A                 	db	10
  1497  04E9' 00                 	db	0
  1498  04EA'                    STR_58:
  1499  04EA' 64                 	db	100	;'d'
  1500  04EB' 69                 	db	105	;'i'
  1501  04EC' 73                 	db	115	;'s'
  1502  04ED' 70                 	db	112	;'p'
  1503  04EE' 6C                 	db	108	;'l'
  1504  04EF' 61                 	db	97	;'a'
  1505  04F0' 79                 	db	121	;'y'
  1506  04F1' 00                 	db	0
  1507  04F2'                    STR_147:
  1508  04F2' 28                 	db	40
  1509  04F3' 6E                 	db	110	;'n'
  1510  04F4' 75                 	db	117	;'u'
  1511  04F5' 6C                 	db	108	;'l'
  1512  04F6' 6C                 	db	108	;'l'
  1513  04F7' 29                 	db	41
  1514  04F8' 00                 	db	0
  1515  04F9'                    STR_22:
  1516  04F9' 73                 	db	115	;'s'
  1517  04FA' 65                 	db	101	;'e'
  1518  04FB' 63                 	db	99	;'c'
  1519  04FC' 6F                 	db	111	;'o'
  1520  04FD' 6E                 	db	110	;'n'
  1521  04FE' 64                 	db	100	;'d'
  1522  04FF' 00                 	db	0
  1523  0500'                    STR_20:
  1524  0500' 6D                 	db	109	;'m'
  1525  0501' 69                 	db	105	;'i'
  1526  0502' 6E                 	db	110	;'n'
  1527  0503' 75                 	db	117	;'u'
  1528  0504' 74                 	db	116	;'t'
  1529  0505' 65                 	db	101	;'e'
  1530  0506' 00                 	db	0
  1531  0507'                    STR_74:
  1532  0507' 63                 	db	99	;'c'
  1533  0508' 65                 	db	101	;'e'
  1534  0509' 6E                 	db	110	;'n'
  1535  050A' 74                 	db	116	;'t'
  1536  050B' 65                 	db	101	;'e'
  1537  050C' 72                 	db	114	;'r'
  1538  050D' 00                 	db	0
  1539  050E'                    STR_125:
  1540  050E' 20                 	db	32
  1541  050F' 20                 	db	32
  1542  0510' 30                 	db	48	;'0'
  1543  0511' 20                 	db	32
  1544  0512' 20                 	db	32
  1545  0513' 00                 	db	0
  1546  0514'                    STR_118:
  1547  0514' 20                 	db	32
  1548  0515' 4F                 	db	79	;'O'
  1549  0516' 4E                 	db	78	;'N'
  1550  0517' 20                 	db	32
  1551  0518' 20                 	db	32
  1552  0519' 00                 	db	0
  1553  051A'                    STR_119:
  1554  051A' 20                 	db	32
  1555  051B' 4F                 	db	79	;'O'
  1556  051C' 46                 	db	70	;'F'
  1557  051D' 46                 	db	70	;'F'
  1558  051E' 20                 	db	32
  1559  051F' 00                 	db	0
  1560  0520'                    STR_124:
  1561  0520' 20                 	db	32
  1562  0521' 79                 	db	121	;'y'
  1563  0522' 65                 	db	101	;'e'
  1564  0523' 74                 	db	116	;'t'
  1565  0524' 20                 	db	32
  1566  0525' 00                 	db	0
  1567  0526'                    STR_50:
  1568  0526' 74                 	db	116	;'t'
  1569  0527' 6F                 	db	111	;'o'
  1570  0528' 75                 	db	117	;'u'
  1571  0529' 63                 	db	99	;'c'
  1572  052A' 68                 	db	104	;'h'
  1573  052B' 00                 	db	0
  1574  052C'                    STR_14:
  1575  052C' 6D                 	db	109	;'m'
  1576  052D' 6F                 	db	111	;'o'
  1577  052E' 6E                 	db	110	;'n'
  1578  052F' 74                 	db	116	;'t'
  1579  0530' 68                 	db	104	;'h'
  1580  0531' 00                 	db	0
  1581  0532'                    STR_55:
  1582  0532' 72                 	db	114	;'r'
  1583  0533' 65                 	db	101	;'e'
  1584  0534' 73                 	db	115	;'s'
  1585  0535' 65                 	db	101	;'e'
  1586  0536' 74                 	db	116	;'t'
  1587  0537' 00                 	db	0
  1588  0538'                    STR_85:
  1589  0538' 72                 	db	114	;'r'
  1590  0539' 69                 	db	105	;'i'
  1591  053A' 67                 	db	103	;'g'
  1592  053B' 68                 	db	104	;'h'
  1593  053C' 74                 	db	116	;'t'
  1594  053D' 00                 	db	0
  1595  053E'                    STR_34:
  1596  053E' 6D                 	db	109	;'m'
  1597  053F' 41                 	db	65	;'A'
  1598  0540' 68                 	db	104	;'h'
  1599  0541' 0A                 	db	10
  1600  0542' 00                 	db	0
  1601  0543'                    STR_42:
  1602  0543' 68                 	db	104	;'h'
  1603  0544' 65                 	db	101	;'e'
  1604  0545' 6C                 	db	108	;'l'
  1605  0546' 70                 	db	112	;'p'
  1606  0547' 00                 	db	0
  1607  0548'                    STR_12:
  1608  0548' 79                 	db	121	;'y'
  1609  0549' 65                 	db	101	;'e'
  1610  054A' 61                 	db	97	;'a'
  1611  054B' 72                 	db	114	;'r'
  1612  054C' 00                 	db	0
  1613  054D'                    STR_18:
  1614  054D' 68                 	db	104	;'h'
  1615  054E' 6F                 	db	111	;'o'
  1616  054F' 75                 	db	117	;'u'
  1617  0550' 72                 	db	114	;'r'
  1618  0551' 00                 	db	0
  1619  0552'                    STR_63:
  1620  0552' 6C                 	db	108	;'l'
  1621  0553' 65                 	db	101	;'e'
  1622  0554' 66                 	db	102	;'f'
  1623  0555' 74                 	db	116	;'t'
  1624  0556' 00                 	db	0
  1625  0557'                    STR_52:
  1626  0557' 69                 	db	105	;'i'
  1627  0558' 6E                 	db	110	;'n'
  1628  0559' 69                 	db	105	;'i'
  1629  055A' 74                 	db	116	;'t'
  1630  055B' 00                 	db	0
  1631  055C'                    STR_2:
  1632  055C' 08                 	db	8
  1633  055D' 20                 	db	32
  1634  055E' 08                 	db	8
  1635  055F' 00                 	db	0
  1636  0560'                    STR_26:
  1637  0560' 6D                 	db	109	;'m'
  1638  0561' 41                 	db	65	;'A'
  1639  0562' 68                 	db	104	;'h'
  1640  0563' 00                 	db	0
  1641  0564'                    STR_16:
  1642  0564' 64                 	db	100	;'d'
  1643  0565' 61                 	db	97	;'a'
  1644  0566' 79                 	db	121	;'y'
  1645  0567' 00                 	db	0
  1646  0568'                    STR_32:
  1647  0568' 41                 	db	65	;'A'
  1648  0569' 0A                 	db	10
  1649  056A' 00                 	db	0
  1650  056B'                    STR_27:
  1651  056B' 64                 	db	100	;'d'
  1652  056C' 20                 	db	32
  1653  056D' 00                 	db	0
  1654  056E'                    STR_28:
  1655  056E' 68                 	db	104	;'h'
  1656  056F' 20                 	db	32
  1657  0570' 00                 	db	0
  1658  0571'                    STR_29:
  1659  0571' 6D                 	db	109	;'m'
  1660  0572' 20                 	db	32
  1661  0573' 00                 	db	0
  1662  0574'                    STR_71:
  1663  0574' 69                 	db	105	;'i'
  1664  0575' 63                 	db	99	;'c'
  1665  0576' 00                 	db	0
  1666  0577'                    STR_47:
  1667  0577' 6F                 	db	111	;'o'
  1668  0578' 64                 	db	100	;'d'
  1669  0579' 00                 	db	0
  1670  057A'                    STR_9:
  1671  057A' 61                 	db	97	;'a'
  1672  057B' 74                 	db	116	;'t'
  1673  057C' 00                 	db	0
  1674  057D'                    STR_31:
  1675  057D' 09                 	db	9
  1676  057E' 00                 	db	0
  1677  057F'                    STR_43:
  1678  057F' 3F                 	db	63	;'?'
  1679  0580' 00                 	db	0
  1680  0581'                    STR_141:
  1681  0581' 41                 	db	65	;'A'
  1682  0582' 00                 	db	0
  1683  0583'                    STR_138:
  1684  0583' 43                 	db	67	;'C'
  1685  0584' 00                 	db	0
  1686  0585'                    STR_137:
  1687  0585' 4C                 	db	76	;'L'
  1688  0586' 00                 	db	0
  1689  0587'                    STR_13:
  1690  0587' 4D                 	db	77	;'M'
  1691  0588' 00                 	db	0
  1692  0589'                    STR_139:
  1693  0589' 52                 	db	82	;'R'
  1694  058A' 00                 	db	0
  1695  058B'                    STR_64:
  1696  058B' 6C                 	db	108	;'l'
  1697  058C' 00                 	db	0
  1698  058D'                    STR_19:
  1699  058D' 6D                 	db	109	;'m'
  1700  058E' 00                 	db	0
  1701  0000                     
  1702                           ; #config settings
  1703  058F' 00                 	db	0	; dummy byte at the end
  1704  0000                     
  1705                           	psect	cinit
  1706  0000'                    __pcinit:
  1707                           	opt stack 0
  1708  0000'                    start_initialization:
  1709                           	opt stack 0
  1710  0000'                    __initialization:
  1711                           	opt stack 0
  1712                           
  1713                           ; Clear objects allocated to BIGRAM (2000 bytes)
  1714  0000' EE00' F000'        	lfsr	0,__pbssBIGRAM
  1715  0004' EE17 F0D0          	lfsr	1,2000
  1716  0008'                    clear_0:
  1717  0008' 6AEE               	clrf	postinc0,c
  1718  000A' 50E5               	movf	postdec1,w,c
  1719  000C' 50E1               	movf	fsr1l,w,c
  1720  000E' E1FC               	bnz	clear_0
  1721  0010' 50E2               	movf	fsr1h,w,c
  1722  0012' E1FA               	bnz	clear_0
  1723                           
  1724                           ; Clear objects allocated to BANK2 (160 bytes)
  1725  0014' EE00' F000'        	lfsr	0,__pbssBANK2
  1726  0018' 0EA0               	movlw	160
  1727  001A'                    clear_1:
  1728  001A' 6AEE               	clrf	postinc0,c
  1729  001C' 06E8               	decf	wreg,f,c
  1730  001E' E1FD               	bnz	clear_1
  1731                           
  1732                           ; Clear objects allocated to BANK1 (149 bytes)
  1733  0020' EE00' F000'        	lfsr	0,__pbssBANK1
  1734  0024' 0E95               	movlw	149
  1735  0026'                    clear_2:
  1736  0026' 6AEE               	clrf	postinc0,c
  1737  0028' 06E8               	decf	wreg,f,c
  1738  002A' E1FD               	bnz	clear_2
  1739                           
  1740                           ; Clear objects allocated to BANK0 (53 bytes)
  1741  002C' EE00' F000'        	lfsr	0,__pbssBANK0
  1742  0030' 0E35               	movlw	53
  1743  0032'                    clear_3:
  1744  0032' 6AEE               	clrf	postinc0,c
  1745  0034' 06E8               	decf	wreg,f,c
  1746  0036' E1FD               	bnz	clear_3
  1747                           
  1748                           ; Clear objects allocated to COMRAM (28 bytes)
  1749  0038' EE00' F000'        	lfsr	0,__pbssCOMRAM
  1750  003C' 0E1C               	movlw	28
  1751  003E'                    clear_4:
  1752  003E' 6AEE               	clrf	postinc0,c
  1753  0040' 06E8               	decf	wreg,f,c
  1754  0042' E1FD               	bnz	clear_4
  1755                           
  1756                           ; Initialize objects allocated to BANK0 (1 bytes)
  1757                           ; load TBLPTR registers with __pidataBANK0
  1758  0044' 0E00'              	movlw	low __pidataBANK0
  1759  0046' 6EF6               	movwf	tblptrl,c
  1760  0048' 0E00'              	movlw	high __pidataBANK0
  1761  004A' 6EF7               	movwf	tblptrh,c
  1762  004C' 0E00'              	movlw	low (__pidataBANK0 shr (0+16))
  1763  004E' 6EF8               	movwf	tblptru,c
  1764  0050' 0009               	tblrd		*+	;fetch initializer
  1765  0052' CFF5 F000'         	movff	tablat,__pdataBANK0
  1766                           
  1767                           ; Initialize objects allocated to COMRAM (2 bytes)
  1768                           ; load TBLPTR registers with __pidataCOMRAM
  1769  0056' 0E00'              	movlw	low __pidataCOMRAM
  1770  0058' 6EF6               	movwf	tblptrl,c
  1771  005A' 0E00'              	movlw	high __pidataCOMRAM
  1772  005C' 6EF7               	movwf	tblptrh,c
  1773  005E' 0E00'              	movlw	low (__pidataCOMRAM shr (0+16))
  1774  0060' 6EF8               	movwf	tblptru,c
  1775  0062' 0009               	tblrd		*+	;fetch initializer
  1776  0064' CFF5 F000'         	movff	tablat,__pdataCOMRAM
  1777  0068' 0009               	tblrd		*+	;fetch initializer
  1778  006A' CFF5 F001'         	movff	tablat,__pdataCOMRAM+1
  1779  006E'                    end_of_initialization:
  1780                           	opt stack 0
  1781  006E'                    __end_of__initialization:
  1782                           	opt stack 0
  1783  006E' 9000'              	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1784  0070' 9200'              	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1785  0072' 0100               	movlb	0
  1786  0074' EF00' F000'        	goto	_main	;jump to C main() function
  1787                           tblptru	equ	0xFF8
  1788                           tblptrh	equ	0xFF7
  1789                           tblptrl	equ	0xFF6
  1790                           tablat	equ	0xFF5
  1791                           postinc0	equ	0xFEE
  1792                           wreg	equ	0xFE8
  1793                           postdec1	equ	0xFE5
  1794                           fsr1h	equ	0xFE2
  1795                           fsr1l	equ	0xFE1
  1796                           
  1797                           	psect	bssCOMRAM
  1798  0000'                    __pbssCOMRAM:
  1799                           	opt stack 0
  1800  0000'                    LED_indicator@cnt:
  1801                           	opt stack 0
  1802  0000'                    	ds	3
  1803  0003'                    LED_indicator@cntf:
  1804                           	opt stack 0
  1805  0003'                    	ds	3
  1806  0006'                    _d1:
  1807                           	opt stack 0
  1808  0006'                    	ds	3
  1809  0009'                    ISR@cnt_t0:
  1810                           	opt stack 0
  1811  0009'                    	ds	2
  1812  000B'                    millis_timer@cnt:
  1813                           	opt stack 0
  1814  000B'                    	ds	2
  1815  000D'                    ISR@cnt_t1:
  1816                           	opt stack 0
  1817  000D'                    	ds	1
  1818  000E'                    _halfsec:
  1819                           	opt stack 0
  1820  000E'                    	ds	1
  1821  000F'                    _print_port:
  1822                           	opt stack 0
  1823  000F'                    	ds	1
  1824  0010'                    sleep_loop@sleep_flag:
  1825                           	opt stack 0
  1826  0010'                    	ds	1
  1827  0011'                    _tx_buf:
  1828                           	opt stack 0
  1829  0011'                    	ds	8
  1830  0019'                    _delay_display:
  1831                           	opt stack 0
  1832  0019'                    	ds	3
  1833                           tblptru	equ	0xFF8
  1834                           tblptrh	equ	0xFF7
  1835                           tblptrl	equ	0xFF6
  1836                           tablat	equ	0xFF5
  1837                           postinc0	equ	0xFEE
  1838                           wreg	equ	0xFE8
  1839                           postdec1	equ	0xFE5
  1840                           fsr1h	equ	0xFE2
  1841                           fsr1l	equ	0xFE1
  1842                           
  1843                           	psect	dataCOMRAM
  1844  0000'                    __pdataCOMRAM:
  1845                           	opt stack 0
  1846  0000'                    I2C_LCD_SetCursor@F8672:
  1847                           	opt stack 0
  1848  0000'                    	ds	2
  1849                           tblptru	equ	0xFF8
  1850                           tblptrh	equ	0xFF7
  1851                           tblptrl	equ	0xFF6
  1852                           tablat	equ	0xFF5
  1853                           postinc0	equ	0xFEE
  1854                           wreg	equ	0xFE8
  1855                           postdec1	equ	0xFE5
  1856                           fsr1h	equ	0xFE2
  1857                           fsr1l	equ	0xFE1
  1858                           
  1859                           	psect	bssBANK0
  1860  0000'                    __pbssBANK0:
  1861                           	opt stack 0
  1862  0000'                    _ctmu_value_m:
  1863                           	opt stack 0
  1864  0000'                    	ds	2
  1865  0002'                    epoch_to_caltime@day_cache:
  1866                           	opt stack 0
  1867  0002'                    	ds	2
  1868  0004'                    RTCC_loop@prev_halfsec:
  1869                           	opt stack 0
  1870  0004'                    	ds	1
  1871  0005'                    _colon:
  1872                           	opt stack 0
  1873  0005'                    	ds	1
  1874  0006'                    _ctmu_flag:
  1875                           	opt stack 0
  1876  0006'                    	ds	1
  1877  0007'                    _ctmu_ratio:
  1878                           	opt stack 0
  1879  0007'                    	ds	1
  1880  0008'                    _cut_time_flag:
  1881                           	opt stack 0
  1882  0008'                    	ds	1
  1883  0009'                    _data_out:
  1884                           	opt stack 0
  1885  0009'                    	ds	1
  1886  000A'                    _data_out_flag:
  1887                           	opt stack 0
  1888  000A'                    	ds	1
  1889  000B'                    _display_flag:
  1890                           	opt stack 0
  1891  000B'                    	ds	1
  1892  000C'                    _edit_flag:
  1893                           	opt stack 0
  1894  000C'                    	ds	1
  1895  000D'                    _next_print_item:
  1896                           	opt stack 0
  1897  000D'                    	ds	1
  1898  000E'                    _pres_print_item:
  1899                           	opt stack 0
  1900  000E'                    	ds	1
  1901  000F'                    _print_data:
  1902                           	opt stack 0
  1903  000F'                    	ds	1
  1904  0010'                    _settings_flag:
  1905                           	opt stack 0
  1906  0010'                    	ds	1
  1907  0011'                    _settings_select:
  1908                           	opt stack 0
  1909  0011'                    	ds	1
  1910  0012'                    _settings_state:
  1911                           	opt stack 0
  1912  0012'                    	ds	1
  1913  0013'                    _time_change_flag:
  1914                           	opt stack 0
  1915  0013'                    	ds	1
  1916  0014'                    epoch_to_caltime@year_cache:
  1917                           	opt stack 0
  1918  0014'                    	ds	1
  1919  0015'                    my_terminal_loop@command_init:
  1920                           	opt stack 0
  1921  0015'                    	ds	1
  1922  0016'                    _usb_tx:
  1923                           	opt stack 0
  1924  0016'                    	ds	8
  1925  001E'                    my_terminal_loop@command:
  1926                           	opt stack 0
  1927  001E'                    	ds	8
  1928  0026'                    _caltime_now:
  1929                           	opt stack 0
  1930  0026'                    	ds	7
  1931  002D'                    _ctmu_m:
  1932                           	opt stack 0
  1933  002D'                    	ds	4
  1934  0031'                    _epoch_now:
  1935                           	opt stack 0
  1936  0031'                    	ds	4
  1937                           tblptru	equ	0xFF8
  1938                           tblptrh	equ	0xFF7
  1939                           tblptrl	equ	0xFF6
  1940                           tablat	equ	0xFF5
  1941                           postinc0	equ	0xFEE
  1942                           wreg	equ	0xFE8
  1943                           postdec1	equ	0xFE5
  1944                           fsr1h	equ	0xFE2
  1945                           fsr1l	equ	0xFE1
  1946                           
  1947                           	psect	dataBANK0
  1948  0000'                    __pdataBANK0:
  1949                           	opt stack 0
  1950  0000'                    epoch_to_caltime@month_cache:
  1951                           	opt stack 0
  1952  0000'                    	ds	1
  1953                           tblptru	equ	0xFF8
  1954                           tblptrh	equ	0xFF7
  1955                           tblptrl	equ	0xFF6
  1956                           tablat	equ	0xFF5
  1957                           postinc0	equ	0xFEE
  1958                           wreg	equ	0xFE8
  1959                           postdec1	equ	0xFE5
  1960                           fsr1h	equ	0xFE2
  1961                           fsr1l	equ	0xFE1
  1962                           
  1963                           	psect	bssBANK1
  1964  0000'                    __pbssBANK1:
  1965                           	opt stack 0
  1966  0000'                    _ms:
  1967                           	opt stack 0
  1968  0000'                    	ds	4
  1969  0004'                    _port:
  1970                           	opt stack 0
  1971  0004'                    	ds	69
  1972  0049'                    my_terminal_loop@op0:
  1973                           	opt stack 0
  1974  0049'                    	ds	20
  1975  005D'                    my_terminal_loop@op1:
  1976                           	opt stack 0
  1977  005D'                    	ds	20
  1978  0071'                    my_terminal_loop@op2:
  1979                           	opt stack 0
  1980  0071'                    	ds	20
  1981  0085'                    _rx_buf:
  1982                           	opt stack 0
  1983  0085'                    	ds	8
  1984  008D'                    _usb_rx:
  1985                           	opt stack 0
  1986  008D'                    	ds	8
  1987                           tblptru	equ	0xFF8
  1988                           tblptrh	equ	0xFF7
  1989                           tblptrl	equ	0xFF6
  1990                           tablat	equ	0xFF5
  1991                           postinc0	equ	0xFEE
  1992                           wreg	equ	0xFE8
  1993                           postdec1	equ	0xFE5
  1994                           fsr1h	equ	0xFE2
  1995                           fsr1l	equ	0xFE1
  1996                           
  1997                           	psect	bssBANK2
  1998  0000'                    __pbssBANK2:
  1999                           	opt stack 0
  2000  0000'                    main_init@usbrx:
  2001                           	opt stack 0
  2002  0000'                    	ds	100
  2003  0064'                    _display_char:
  2004                           	opt stack 0
  2005  0064'                    	ds	40
  2006  008C'                    my_terminal_loop@op3:
  2007                           	opt stack 0
  2008  008C'                    	ds	20
  2009                           tblptru	equ	0xFF8
  2010                           tblptrh	equ	0xFF7
  2011                           tblptrl	equ	0xFF6
  2012                           tablat	equ	0xFF5
  2013                           postinc0	equ	0xFEE
  2014                           wreg	equ	0xFE8
  2015                           postdec1	equ	0xFE5
  2016                           fsr1h	equ	0xFE2
  2017                           fsr1l	equ	0xFE1
  2018                           
  2019                           	psect	bssBIGRAM
  2020  0000'                    __pbssBIGRAM:
  2021                           	opt stack 0
  2022  0000'                    main_init@usbtx:
  2023                           	opt stack 0
  2024  0000'                    	ds	2000
  2025                           tblptru	equ	0xFF8
  2026                           tblptrh	equ	0xFF7
  2027                           tblptrl	equ	0xFF6
  2028                           tablat	equ	0xFF5
  2029                           postinc0	equ	0xFEE
  2030                           wreg	equ	0xFE8
  2031                           postdec1	equ	0xFE5
  2032                           fsr1h	equ	0xFE2
  2033                           fsr1l	equ	0xFE1
  2034                           
  2035                           	psect	cstackBANK3
  2036  0000'                    __pcstackBANK3:
  2037                           	opt stack 0
  2038  0000'                    my_terminal_loop@buf:
  2039                           	opt stack 0
  2040                           
  2041                           ; 100 bytes @ 0x0
  2042  0000'                    	ds	100
  2043  0064'                    _my_terminal_loop$3369:
  2044                           	opt stack 0
  2045                           
  2046                           ; 2 bytes @ 0x64
  2047  0064'                    	ds	2
  2048  0066'                    my_terminal_loop@i_2176:
  2049                           	opt stack 0
  2050                           
  2051                           ; 1 bytes @ 0x66
  2052  0066'                    	ds	1
  2053  0067'                    my_terminal_loop@ascii:
  2054                           	opt stack 0
  2055                           
  2056                           ; 1 bytes @ 0x67
  2057  0067'                    	ds	1
  2058  0068'                    my_terminal_loop@i:
  2059                           	opt stack 0
  2060                           
  2061                           ; 1 bytes @ 0x68
  2062  0068'                    	ds	1
  2063                           tblptru	equ	0xFF8
  2064                           tblptrh	equ	0xFF7
  2065                           tblptrl	equ	0xFF6
  2066                           tablat	equ	0xFF5
  2067                           postinc0	equ	0xFEE
  2068                           wreg	equ	0xFE8
  2069                           postdec1	equ	0xFE5
  2070                           fsr1h	equ	0xFE2
  2071                           fsr1l	equ	0xFE1
  2072                           
  2073                           	psect	cstackBANK1
  2074  0000'                    __pcstackBANK1:
  2075                           	opt stack 0
  2076  0000'                    command_time@tx:
  2077                           	opt stack 0
  2078  0000'                    normal_loop@str:
  2079                           	opt stack 0
  2080                           
  2081                           ; 15 bytes @ 0x0
  2082  0000'                    	ds	2
  2083  0002'                    command_time@op0:
  2084                           	opt stack 0
  2085                           
  2086                           ; 2 bytes @ 0x2
  2087  0002'                    	ds	2
  2088  0004'                    command_time@op1:
  2089                           	opt stack 0
  2090                           
  2091                           ; 2 bytes @ 0x4
  2092  0004'                    	ds	2
  2093  0006'                    command_time@op2:
  2094                           	opt stack 0
  2095                           
  2096                           ; 2 bytes @ 0x6
  2097  0006'                    	ds	2
  2098  0008'                    _command_time$3370:
  2099                           	opt stack 0
  2100                           
  2101                           ; 1 bytes @ 0x8
  2102  0008'                    	ds	1
  2103  0009'                    command_operation@tx:
  2104                           	opt stack 0
  2105                           
  2106                           ; 2 bytes @ 0x9
  2107  0009'                    	ds	2
  2108  000B'                    command_operation@op0:
  2109                           	opt stack 0
  2110                           
  2111                           ; 2 bytes @ 0xB
  2112  000B'                    	ds	2
  2113  000D'                    command_operation@op1:
  2114                           	opt stack 0
  2115                           
  2116                           ; 2 bytes @ 0xD
  2117  000D'                    	ds	2
  2118  000F'                    normal_loop@i:
  2119                           	opt stack 0
  2120  000F'                    command_operation@op2:
  2121                           	opt stack 0
  2122                           
  2123                           ; 2 bytes @ 0xF
  2124  000F'                    	ds	2
  2125  0011'                    command_operation@op3:
  2126                           	opt stack 0
  2127                           
  2128                           ; 2 bytes @ 0x11
  2129  0011'                    	ds	2
  2130  0013'                    command_operation@percentage:
  2131                           	opt stack 0
  2132                           
  2133                           ; 1 bytes @ 0x13
  2134  0013'                    	ds	1
  2135  0014'                    my_terminal_loop@tx:
  2136                           	opt stack 0
  2137                           
  2138                           ; 2 bytes @ 0x14
  2139  0014'                    	ds	2
  2140  0016'                    my_terminal_loop@rx:
  2141                           	opt stack 0
  2142                           
  2143                           ; 2 bytes @ 0x16
  2144  0016'                    	ds	2
  2145  0018'                    ??_my_terminal_loop:
  2146                           
  2147                           ; 0 bytes @ 0x18
  2148  0018'                    	ds	2
  2149  001A'                    main@i:
  2150                           	opt stack 0
  2151                           
  2152                           ; 1 bytes @ 0x1A
  2153  001A'                    	ds	1
  2154                           tblptru	equ	0xFF8
  2155                           tblptrh	equ	0xFF7
  2156                           tblptrl	equ	0xFF6
  2157                           tablat	equ	0xFF5
  2158                           postinc0	equ	0xFEE
  2159                           wreg	equ	0xFE8
  2160                           postdec1	equ	0xFE5
  2161                           fsr1h	equ	0xFE2
  2162                           fsr1l	equ	0xFE1
  2163                           
  2164                           	psect	cstackBANK0
  2165  0000'                    __pcstackBANK0:
  2166                           	opt stack 0
  2167  0000'                    ??_ringbuf_num:
  2168  0000'                    ??_my_strcmp:
  2169  0000'                    ?___lldiv:
  2170                           	opt stack 0
  2171  0000'                    I2C_LCD_Command@c:
  2172                           	opt stack 0
  2173  0000'                    I2C_LCD_Putc@c:
  2174                           	opt stack 0
  2175  0000'                    RTCC_to_caltime@dumy:
  2176                           	opt stack 0
  2177  0000'                    display_char_puts@i:
  2178                           	opt stack 0
  2179  0000'                    ___awdiv@counter:
  2180                           	opt stack 0
  2181  0000'                    ___awmod@counter:
  2182                           	opt stack 0
  2183  0000'                    ___lwmod@counter:
  2184                           	opt stack 0
  2185  0000'                    ringbuf_init@rb:
  2186                           	opt stack 0
  2187  0000'                    I2C_LCD_Puts@s:
  2188                           	opt stack 0
  2189  0000'                    display_reserve@time:
  2190                           	opt stack 0
  2191  0000'                    strcpy@cp:
  2192                           	opt stack 0
  2193  0000'                    ___lldiv@dividend:
  2194                           	opt stack 0
  2195                           
  2196                           ; 4 bytes @ 0x0
  2197  0000'                    	ds	1
  2198  0001'                    I2C_LCD_Command@ans:
  2199                           	opt stack 0
  2200  0001'                    I2C_LCD_Putc@ans:
  2201                           	opt stack 0
  2202  0001'                    ___awdiv@sign:
  2203                           	opt stack 0
  2204  0001'                    ___awmod@sign:
  2205                           	opt stack 0
  2206                           
  2207                           ; 1 bytes @ 0x1
  2208  0001'                    	ds	1
  2209  0002'                    ??_I2C_LCD_Clear:
  2210  0002'                    ??_I2C_LCD_Puts:
  2211  0002'                    I2C_LCD_SetCursor@row:
  2212                           	opt stack 0
  2213  0002'                    month_length@month:
  2214                           	opt stack 0
  2215  0002'                    display_reserve@next_item:
  2216                           	opt stack 0
  2217  0002'                    ringbuf_init@internal_buf:
  2218                           	opt stack 0
  2219  0002'                    ___awdiv@quotient:
  2220                           	opt stack 0
  2221                           
  2222                           ; 2 bytes @ 0x2
  2223  0002'                    	ds	1
  2224  0003'                    ??_month_length:
  2225  0003'                    port_button_loop@i:
  2226                           	opt stack 0
  2227  0003'                    I2C_LCD_SetCursor@row_offsets:
  2228                           	opt stack 0
  2229  0003'                    I2C_LCD_Puts@ans:
  2230                           	opt stack 0
  2231                           
  2232                           ; 2 bytes @ 0x3
  2233  0003'                    	ds	1
  2234  0004'                    d_to_x@dec:
  2235                           	opt stack 0
  2236  0004'                    ringbuf_init@bufsize:
  2237                           	opt stack 0
  2238  0004'                    ___lldiv@divisor:
  2239                           	opt stack 0
  2240                           
  2241                           ; 4 bytes @ 0x4
  2242  0004'                    	ds	1
  2243  0005'                    I2C_LCD_SetCursor@col:
  2244                           	opt stack 0
  2245  0005'                    caltime_to_RTCC@ct:
  2246                           	opt stack 0
  2247                           
  2248                           ; 2 bytes @ 0x5
  2249  0005'                    	ds	1
  2250  0006'                    ??_ringbuf_pop:
  2251  0006'                    ??_ringbuf_backspace:
  2252  0006'                    ??_display_port:
  2253  0006'                    sleep_loop@i:
  2254                           	opt stack 0
  2255                           
  2256                           ; 1 bytes @ 0x6
  2257  0006'                    	ds	1
  2258  0007'                    month_length@year:
  2259                           	opt stack 0
  2260                           
  2261                           ; 1 bytes @ 0x7
  2262  0007'                    	ds	1
  2263  0008'                    ___lldiv@quotient:
  2264                           	opt stack 0
  2265                           
  2266                           ; 4 bytes @ 0x8
  2267  0008'                    	ds	2
  2268  000A'                    ringbuf_pop@ret:
  2269                           	opt stack 0
  2270                           
  2271                           ; 1 bytes @ 0xA
  2272  000A'                    	ds	2
  2273  000C'                    ___lldiv@counter:
  2274                           	opt stack 0
  2275                           
  2276                           ; 1 bytes @ 0xC
  2277  000C'                    	ds	1
  2278  000D'                    ?___lmul:
  2279                           	opt stack 0
  2280  000D'                    ?___llmod:
  2281                           	opt stack 0
  2282  000D'                    CTMU_read@ch:
  2283                           	opt stack 0
  2284  000D'                    ___lmul@multiplier:
  2285                           	opt stack 0
  2286  000D'                    ___llmod@dividend:
  2287                           	opt stack 0
  2288                           
  2289                           ; 4 bytes @ 0xD
  2290  000D'                    	ds	1
  2291  000E'                    CTMU_read@sum:
  2292                           	opt stack 0
  2293                           
  2294                           ; 4 bytes @ 0xE
  2295  000E'                    	ds	3
  2296  0011'                    ___lmul@multiplicand:
  2297                           	opt stack 0
  2298  0011'                    ___llmod@divisor:
  2299                           	opt stack 0
  2300                           
  2301                           ; 4 bytes @ 0x11
  2302  0011'                    	ds	1
  2303  0012'                    CTMU_read@i:
  2304                           	opt stack 0
  2305                           
  2306                           ; 1 bytes @ 0x12
  2307  0012'                    	ds	1
  2308  0013'                    ?___wmul:
  2309                           	opt stack 0
  2310  0013'                    ___wmul@multiplier:
  2311                           	opt stack 0
  2312                           
  2313                           ; 2 bytes @ 0x13
  2314  0013'                    	ds	2
  2315  0015'                    my_utoa32@str:
  2316                           	opt stack 0
  2317  0015'                    ___wmul@multiplicand:
  2318                           	opt stack 0
  2319  0015'                    ___lmul@product:
  2320                           	opt stack 0
  2321                           
  2322                           ; 4 bytes @ 0x15
  2323  0015'                    	ds	2
  2324  0017'                    ___wmul@product:
  2325                           	opt stack 0
  2326  0017'                    my_utoa32@value:
  2327                           	opt stack 0
  2328                           
  2329                           ; 4 bytes @ 0x17
  2330  0017'                    	ds	2
  2331  0019'                    ??_Auto_cut:
  2332  0019'                    ?_my_atoi:
  2333                           	opt stack 0
  2334  0019'                    ?___lwdiv:
  2335                           	opt stack 0
  2336  0019'                    ?_get_quot_rem:
  2337                           	opt stack 0
  2338  0019'                    get_quot_rem@quot:
  2339                           	opt stack 0
  2340  0019'                    caltime_to_epoch@ct:
  2341                           	opt stack 0
  2342  0019'                    my_atoi@str:
  2343                           	opt stack 0
  2344  0019'                    ___lwdiv@dividend:
  2345                           	opt stack 0
  2346                           
  2347                           ; 2 bytes @ 0x19
  2348  0019'                    	ds	2
  2349  001B'                    ??_my_atoi:
  2350  001B'                    get_quot_rem@div:
  2351                           	opt stack 0
  2352  001B'                    my_utoa32@digits:
  2353                           	opt stack 0
  2354  001B'                    Auto_cut@i:
  2355                           	opt stack 0
  2356  001B'                    caltime_to_epoch@ep:
  2357                           	opt stack 0
  2358  001B'                    ___lwdiv@divisor:
  2359                           	opt stack 0
  2360                           
  2361                           ; 2 bytes @ 0x1B
  2362  001B'                    	ds	1
  2363  001C'                    my_utoa32@d:
  2364                           	opt stack 0
  2365                           
  2366                           ; 1 bytes @ 0x1C
  2367  001C'                    	ds	1
  2368  001D'                    ??_caltime_to_epoch:
  2369  001D'                    ___lwdiv@counter:
  2370                           	opt stack 0
  2371  001D'                    get_quot_rem@num:
  2372                           	opt stack 0
  2373  001D'                    my_utoa32@v:
  2374                           	opt stack 0
  2375                           
  2376                           ; 4 bytes @ 0x1D
  2377  001D'                    	ds	1
  2378  001E'                    ___lwdiv@quotient:
  2379                           	opt stack 0
  2380                           
  2381                           ; 2 bytes @ 0x1E
  2382  001E'                    	ds	1
  2383  001F'                    my_atoi@ret:
  2384                           	opt stack 0
  2385                           
  2386                           ; 2 bytes @ 0x1F
  2387  001F'                    	ds	1
  2388  0020'                    ?_sprintf:
  2389                           	opt stack 0
  2390  0020'                    ctmu_set_ratio@percentage:
  2391                           	opt stack 0
  2392  0020'                    ringbuf_put@rb:
  2393                           	opt stack 0
  2394  0020'                    button_timer_interrupt@bt:
  2395                           	opt stack 0
  2396  0020'                    my_utoa@str:
  2397                           	opt stack 0
  2398  0020'                    sprintf@sp:
  2399                           	opt stack 0
  2400                           
  2401                           ; 2 bytes @ 0x20
  2402  0020'                    	ds	1
  2403  0021'                    caltime_to_epoch@year:
  2404                           	opt stack 0
  2405  0021'                    epoch_to_caltime@ct:
  2406                           	opt stack 0
  2407                           
  2408                           ; 2 bytes @ 0x21
  2409  0021'                    	ds	1
  2410  0022'                    ringbuf_put@asciicode:
  2411                           	opt stack 0
  2412  0022'                    button_timer_interrupt@sw_value:
  2413                           	opt stack 0
  2414  0022'                    caltime_to_epoch@month_1941:
  2415                           	opt stack 0
  2416  0022'                    my_utoa@value:
  2417                           	opt stack 0
  2418  0022'                    sprintf@f:
  2419                           	opt stack 0
  2420                           
  2421                           ; 2 bytes @ 0x22
  2422  0022'                    	ds	1
  2423  0023'                    ??_ringbuf_put:
  2424  0023'                    epoch_to_caltime@ep:
  2425                           	opt stack 0
  2426  0023'                    caltime_to_epoch@epoch:
  2427                           	opt stack 0
  2428                           
  2429                           ; 4 bytes @ 0x23
  2430  0023'                    	ds	1
  2431  0024'                    my_utoa@digits:
  2432                           	opt stack 0
  2433                           
  2434                           ; 1 bytes @ 0x24
  2435  0024'                    	ds	1
  2436  0025'                    ??_epoch_to_caltime:
  2437  0025'                    my_utoa@d:
  2438                           	opt stack 0
  2439                           
  2440                           ; 1 bytes @ 0x25
  2441  0025'                    	ds	1
  2442  0026'                    my_utoa@v:
  2443                           	opt stack 0
  2444                           
  2445                           ; 2 bytes @ 0x26
  2446  0026'                    	ds	1
  2447  0027'                    caltime_to_epoch@month:
  2448                           	opt stack 0
  2449  0027'                    ringbuf_put_num@rb:
  2450                           	opt stack 0
  2451  0027'                    ringbuf_put_str@rb:
  2452                           	opt stack 0
  2453  0027'                    epoch_to_caltime@day_since_epoch:
  2454                           	opt stack 0
  2455  0027'                    USB_loop@rx_len:
  2456                           	opt stack 0
  2457                           
  2458                           ; 2 bytes @ 0x27
  2459  0027'                    	ds	1
  2460  0028'                    display_dec@edit:
  2461                           	opt stack 0
  2462  0028'                    RTCC_from_RTCC@ct:
  2463                           	opt stack 0
  2464                           
  2465                           ; 2 bytes @ 0x28
  2466  0028'                    	ds	1
  2467  0029'                    USB_loop@data:
  2468                           	opt stack 0
  2469  0029'                    ringbuf_put_num@value:
  2470                           	opt stack 0
  2471  0029'                    ringbuf_put_str@str:
  2472                           	opt stack 0
  2473  0029'                    epoch_to_caltime@day:
  2474                           	opt stack 0
  2475  0029'                    display_dec@str:
  2476                           	opt stack 0
  2477                           
  2478                           ; 10 bytes @ 0x29
  2479  0029'                    	ds	1
  2480  002A'                    RTCC_from_RTCC@ep:
  2481                           	opt stack 0
  2482                           
  2483                           ; 2 bytes @ 0x2A
  2484  002A'                    	ds	1
  2485  002B'                    ringbuf_put_num@digits:
  2486                           	opt stack 0
  2487  002B'                    epoch_to_caltime@year:
  2488                           	opt stack 0
  2489                           
  2490                           ; 1 bytes @ 0x2B
  2491  002B'                    	ds	1
  2492  002C'                    ringbuf_put_num@i:
  2493                           	opt stack 0
  2494  002C'                    epoch_to_caltime@month:
  2495                           	opt stack 0
  2496                           
  2497                           ; 1 bytes @ 0x2C
  2498  002C'                    	ds	1
  2499  002D'                    ringbuf_put_num@temp:
  2500                           	opt stack 0
  2501  002D'                    epoch_to_caltime@num:
  2502                           	opt stack 0
  2503                           
  2504                           ; 4 bytes @ 0x2D
  2505  002D'                    	ds	2
  2506  002F'                    command_get_data@tx:
  2507                           	opt stack 0
  2508                           
  2509                           ; 2 bytes @ 0x2F
  2510  002F'                    	ds	2
  2511  0031'                    command_get_data@item:
  2512                           	opt stack 0
  2513  0031'                    RTCC_from_caltime@ct:
  2514                           	opt stack 0
  2515  0031'                    RTCC_from_epoch@ct:
  2516                           	opt stack 0
  2517                           
  2518                           ; 2 bytes @ 0x31
  2519  0031'                    	ds	1
  2520  0032'                    ??_sprintf:
  2521  0032'                    command_get_data@i:
  2522                           	opt stack 0
  2523                           
  2524                           ; 1 bytes @ 0x32
  2525  0032'                    	ds	1
  2526  0033'                    display_dec@dec:
  2527                           	opt stack 0
  2528  0033'                    RTCC_from_caltime@ep:
  2529                           	opt stack 0
  2530  0033'                    RTCC_from_epoch@ep:
  2531                           	opt stack 0
  2532  0033'                    command_get_data@str:
  2533                           	opt stack 0
  2534                           
  2535                           ; 10 bytes @ 0x33
  2536  0033'                    	ds	1
  2537  0034'                    display_time_1602@ct:
  2538                           	opt stack 0
  2539                           
  2540                           ; 2 bytes @ 0x34
  2541  0034'                    	ds	1
  2542  0035'                    RTCC_adjust_time_inc@ct:
  2543                           	opt stack 0
  2544  0035'                    RTCC_adjust_time_dec@ct:
  2545                           	opt stack 0
  2546                           
  2547                           ; 2 bytes @ 0x35
  2548  0035'                    	ds	1
  2549  0036'                    sprintf@prec:
  2550                           	opt stack 0
  2551  0036'                    display_time_1602@ep:
  2552                           	opt stack 0
  2553                           
  2554                           ; 2 bytes @ 0x36
  2555  0036'                    	ds	1
  2556  0037'                    RTCC_adjust_time_inc@ep:
  2557                           	opt stack 0
  2558  0037'                    RTCC_adjust_time_dec@ep:
  2559                           	opt stack 0
  2560  0037'                    sprintf@ap:
  2561                           	opt stack 0
  2562                           
  2563                           ; 2 bytes @ 0x37
  2564  0037'                    	ds	1
  2565  0038'                    ??_display_time_1602:
  2566                           
  2567                           ; 0 bytes @ 0x38
  2568  0038'                    	ds	1
  2569  0039'                    ??_RTCC_adjust_time_inc:
  2570  0039'                    ??_RTCC_adjust_time_dec:
  2571  0039'                    sprintf@cp:
  2572                           	opt stack 0
  2573  0039'                    display_LCD@str:
  2574                           	opt stack 0
  2575                           
  2576                           ; 10 bytes @ 0x39
  2577  0039'                    	ds	2
  2578  003B'                    sprintf@val:
  2579                           	opt stack 0
  2580                           
  2581                           ; 2 bytes @ 0x3B
  2582  003B'                    	ds	2
  2583  003D'                    RTCC_adjust_time_inc@i_2023:
  2584                           	opt stack 0
  2585  003D'                    RTCC_adjust_time_dec@i_2036:
  2586                           	opt stack 0
  2587  003D'                    sprintf@len:
  2588                           	opt stack 0
  2589  003D'                    _command_get_data$3372:
  2590                           	opt stack 0
  2591                           
  2592                           ; 4 bytes @ 0x3D
  2593  003D'                    	ds	1
  2594  003E'                    RTCC_adjust_time_inc@i:
  2595                           	opt stack 0
  2596  003E'                    RTCC_adjust_time_dec@i:
  2597                           	opt stack 0
  2598                           
  2599                           ; 1 bytes @ 0x3E
  2600  003E'                    	ds	1
  2601  003F'                    ??_settings_loop:
  2602  003F'                    sprintf@flag:
  2603                           	opt stack 0
  2604                           
  2605                           ; 1 bytes @ 0x3F
  2606  003F'                    	ds	1
  2607  0040'                    sprintf@c:
  2608                           	opt stack 0
  2609                           
  2610                           ; 1 bytes @ 0x40
  2611  0040'                    	ds	1
  2612  0041'                    sprintf@width:
  2613                           	opt stack 0
  2614                           
  2615                           ; 2 bytes @ 0x41
  2616  0041'                    	ds	2
  2617  0043'                    print_time@tx:
  2618                           	opt stack 0
  2619  0043'                    _display_LCD$3371:
  2620                           	opt stack 0
  2621  0043'                    settings_loop@str:
  2622                           	opt stack 0
  2623                           
  2624                           ; 20 bytes @ 0x43
  2625  0043'                    	ds	2
  2626  0045'                    print_time@str:
  2627                           	opt stack 0
  2628                           
  2629                           ; 30 bytes @ 0x45
  2630  0045'                    	ds	18
  2631  0057'                    settings_loop@i:
  2632                           	opt stack 0
  2633                           
  2634                           ; 1 bytes @ 0x57
  2635  0057'                    	ds	1
  2636  0058'                    settings_loop@i_2499:
  2637                           	opt stack 0
  2638                           
  2639                           ; 1 bytes @ 0x58
  2640  0058'                    	ds	1
  2641  0059'                    settings_loop@i_2503:
  2642                           	opt stack 0
  2643                           
  2644                           ; 1 bytes @ 0x59
  2645  0059'                    	ds	1
  2646  005A'                    settings_loop@i_2508:
  2647                           	opt stack 0
  2648                           
  2649                           ; 1 bytes @ 0x5A
  2650  005A'                    	ds	1
  2651  005B'                    settings_loop@i_2513:
  2652                           	opt stack 0
  2653                           
  2654                           ; 1 bytes @ 0x5B
  2655  005B'                    	ds	1
  2656  005C'                    settings_loop@i_2518:
  2657                           	opt stack 0
  2658                           
  2659                           ; 1 bytes @ 0x5C
  2660  005C'                    	ds	1
  2661  005D'                    settings_loop@j:
  2662                           	opt stack 0
  2663                           
  2664                           ; 1 bytes @ 0x5D
  2665  005D'                    	ds	1
  2666  005E'                    settings_loop@j_2512:
  2667                           	opt stack 0
  2668                           
  2669                           ; 1 bytes @ 0x5E
  2670  005E'                    	ds	1
  2671  005F'                    settings_loop@j_2517:
  2672                           	opt stack 0
  2673                           
  2674                           ; 1 bytes @ 0x5F
  2675  005F'                    	ds	1
  2676  0060'                    settings_loop@strp:
  2677                           	opt stack 0
  2678                           
  2679                           ; 2 bytes @ 0x60
  2680  0060'                    	ds	3
  2681  0063'                    command_at_hand@tx:
  2682                           	opt stack 0
  2683                           
  2684                           ; 2 bytes @ 0x63
  2685  0063'                    	ds	2
  2686  0065'                    command_at_hand@hand:
  2687                           	opt stack 0
  2688                           
  2689                           ; 2 bytes @ 0x65
  2690  0065'                    	ds	2
  2691  0067'                    command_at_hand@min:
  2692                           	opt stack 0
  2693                           
  2694                           ; 1 bytes @ 0x67
  2695  0067'                    	ds	1
  2696  0068'                    command_at_hand@max:
  2697                           	opt stack 0
  2698                           
  2699                           ; 1 bytes @ 0x68
  2700  0068'                    	ds	1
  2701  0069'                    command_at_hand@value:
  2702                           	opt stack 0
  2703                           
  2704                           ; 1 bytes @ 0x69
  2705  0069'                    	ds	1
  2706                           tblptru	equ	0xFF8
  2707                           tblptrh	equ	0xFF7
  2708                           tblptrl	equ	0xFF6
  2709                           tablat	equ	0xFF5
  2710                           postinc0	equ	0xFEE
  2711                           wreg	equ	0xFE8
  2712                           postdec1	equ	0xFE5
  2713                           fsr1h	equ	0xFE2
  2714                           fsr1l	equ	0xFE1
  2715                           
  2716                           	psect	cstackCOMRAM
  2717  0000'                    __pcstackCOMRAM:
  2718                           	opt stack 0
  2719  0000'                    ?i2___awdiv:
  2720                           	opt stack 0
  2721  0000'                    ?i2___lwdiv:
  2722                           	opt stack 0
  2723  0000'                    ?i2___lldiv:
  2724                           	opt stack 0
  2725  0000'                    i2LED_OUT@value:
  2726                           	opt stack 0
  2727  0000'                    delay_timer_interrupt@d:
  2728                           	opt stack 0
  2729  0000'                    i2___awdiv@dividend:
  2730                           	opt stack 0
  2731  0000'                    i2___lwdiv@dividend:
  2732                           	opt stack 0
  2733  0000'                    i2___lldiv@dividend:
  2734                           	opt stack 0
  2735                           
  2736                           ; 4 bytes @ 0x0
  2737  0000'                    	ds	1
  2738  0001'                    i2LED_OUT@b:
  2739                           	opt stack 0
  2740                           
  2741                           ; 1 bytes @ 0x1
  2742  0001'                    	ds	1
  2743  0002'                    charge_time_count@i:
  2744                           	opt stack 0
  2745  0002'                    i2___awdiv@divisor:
  2746                           	opt stack 0
  2747  0002'                    i2___lwdiv@divisor:
  2748                           	opt stack 0
  2749                           
  2750                           ; 2 bytes @ 0x2
  2751  0002'                    	ds	2
  2752  0004'                    i2___awdiv@counter:
  2753                           	opt stack 0
  2754  0004'                    i2___lwdiv@quotient:
  2755                           	opt stack 0
  2756  0004'                    i2___lldiv@divisor:
  2757                           	opt stack 0
  2758                           
  2759                           ; 4 bytes @ 0x4
  2760  0004'                    	ds	1
  2761  0005'                    i2___awdiv@sign:
  2762                           	opt stack 0
  2763                           
  2764                           ; 1 bytes @ 0x5
  2765  0005'                    	ds	1
  2766  0006'                    i2___lwdiv@counter:
  2767                           	opt stack 0
  2768  0006'                    i2___awdiv@quotient:
  2769                           	opt stack 0
  2770                           
  2771                           ; 2 bytes @ 0x6
  2772  0006'                    	ds	2
  2773  0008'                    ??_LED_indicator:
  2774  0008'                    i2___lldiv@quotient:
  2775                           	opt stack 0
  2776                           
  2777                           ; 4 bytes @ 0x8
  2778  0008'                    	ds	3
  2779  000B'                    LED_indicator@i:
  2780                           	opt stack 0
  2781                           
  2782                           ; 1 bytes @ 0xB
  2783  000B'                    	ds	1
  2784  000C'                    i2___lldiv@counter:
  2785                           	opt stack 0
  2786                           
  2787                           ; 1 bytes @ 0xC
  2788  000C'                    	ds	1
  2789  000D'                    ??_integrating:
  2790                           
  2791                           ; 0 bytes @ 0xD
  2792  000D'                    	ds	2
  2793  000F'                    integrating@i:
  2794                           	opt stack 0
  2795                           
  2796                           ; 1 bytes @ 0xF
  2797  000F'                    	ds	1
  2798  0010'                    ??_ISR:
  2799                           
  2800                           ; 0 bytes @ 0x10
  2801  0010'                    	ds	14
  2802  001E'                    ??_isdigit:
  2803  001E'                    ??_timer0_init:
  2804  001E'                    ??_timer3_init:
  2805  001E'                    ??_I2C_IdleCheck:
  2806  001E'                    ??_x_to_d:
  2807  001E'                    ?_get_string_usb:
  2808  001E'                    ?_put_string_usb:
  2809  001E'                    ?_ADC:
  2810                           	opt stack 0
  2811  001E'                    ?_ringbuf_num:
  2812                           	opt stack 0
  2813  001E'                    ?_CTMU_read:
  2814                           	opt stack 0
  2815  001E'                    ?___awdiv:
  2816                           	opt stack 0
  2817  001E'                    ?___awmod:
  2818                           	opt stack 0
  2819  001E'                    ?___lwmod:
  2820                           	opt stack 0
  2821  001E'                    timer1_init@clock_select:
  2822                           	opt stack 0
  2823  001E'                    ADC_init@p_ref:
  2824                           	opt stack 0
  2825  001E'                    OUT@value:
  2826                           	opt stack 0
  2827  001E'                    ANALOG_IN@b:
  2828                           	opt stack 0
  2829  001E'                    LED_OUT@value:
  2830                           	opt stack 0
  2831  001E'                    display_now@pres_item:
  2832                           	opt stack 0
  2833  001E'                    ___llmod@counter:
  2834                           	opt stack 0
  2835  001E'                    _get_string_usb$0:
  2836                           	opt stack 0
  2837  001E'                    _put_string_usb$0:
  2838                           	opt stack 0
  2839  001E'                    ringbuf_num@rb:
  2840                           	opt stack 0
  2841  001E'                    ringbuf_delete@rb:
  2842                           	opt stack 0
  2843  001E'                    Delay_ms@ms:
  2844                           	opt stack 0
  2845  001E'                    delay_set@d:
  2846                           	opt stack 0
  2847  001E'                    my_strcmp@str1:
  2848                           	opt stack 0
  2849  001E'                    display_char_puts@str0:
  2850                           	opt stack 0
  2851  001E'                    ___awdiv@dividend:
  2852                           	opt stack 0
  2853  001E'                    ___awmod@dividend:
  2854                           	opt stack 0
  2855  001E'                    ___lwmod@dividend:
  2856                           	opt stack 0
  2857  001E'                    strcpy@to:
  2858                           	opt stack 0
  2859                           
  2860                           ; 2 bytes @ 0x1E
  2861  001E'                    	ds	1
  2862  001F'                    ??_timer1_init:
  2863  001F'                    timer0_init@prescaler:
  2864                           	opt stack 0
  2865  001F'                    timer3_init@prescaler:
  2866                           	opt stack 0
  2867  001F'                    I2C_IdleCheck@mask:
  2868                           	opt stack 0
  2869  001F'                    x_to_d@hex:
  2870                           	opt stack 0
  2871  001F'                    OUT@b:
  2872                           	opt stack 0
  2873  001F'                    LED_OUT@b:
  2874                           	opt stack 0
  2875  001F'                    _isdigit$2849:
  2876                           	opt stack 0
  2877                           
  2878                           ; 1 bytes @ 0x1F
  2879  001F'                    	ds	1
  2880  0020'                    ??_ADC:
  2881  0020'                    ??_CTMU_read:
  2882  0020'                    ??_Delay_ms:
  2883  0020'                    timer1_init@prescaler:
  2884                           	opt stack 0
  2885  0020'                    I2C_Start@rw:
  2886                           	opt stack 0
  2887  0020'                    I2C_Send@data:
  2888                           	opt stack 0
  2889  0020'                    isdigit@c:
  2890                           	opt stack 0
  2891  0020'                    _get_string_usb$1:
  2892                           	opt stack 0
  2893  0020'                    _put_string_usb$1:
  2894                           	opt stack 0
  2895  0020'                    ringbuf_pop@rb:
  2896                           	opt stack 0
  2897  0020'                    ringbuf_backspace@rb:
  2898                           	opt stack 0
  2899  0020'                    delay_set@value:
  2900                           	opt stack 0
  2901  0020'                    RTCC_to_caltime@ct:
  2902                           	opt stack 0
  2903  0020'                    my_strcmp@str2:
  2904                           	opt stack 0
  2905  0020'                    display_char_puts@str1:
  2906                           	opt stack 0
  2907  0020'                    ___awdiv@divisor:
  2908                           	opt stack 0
  2909  0020'                    ___awmod@divisor:
  2910                           	opt stack 0
  2911  0020'                    ___lwmod@divisor:
  2912                           	opt stack 0
  2913  0020'                    strcpy@from:
  2914                           	opt stack 0
  2915                           
  2916                           ; 2 bytes @ 0x20
  2917  0020'                    	ds	1
  2918  0021'                    ADC@ch:
  2919                           	opt stack 0
  2920  0021'                    I2C_Start@adrs:
  2921                           	opt stack 0
  2922                           
  2923                           ; 1 bytes @ 0x21
  2924  0021'                    	ds	1
  2925  0022'                    tblptru	equ	0xFF8
  2926                           tblptrh	equ	0xFF7
  2927                           tblptrl	equ	0xFF6
  2928                           tablat	equ	0xFF5
  2929                           postinc0	equ	0xFEE
  2930                           wreg	equ	0xFE8
  2931                           postdec1	equ	0xFE5
  2932                           fsr1h	equ	0xFE2
  2933                           fsr1l	equ	0xFE1
  2934                           
  2935                           ; 0 bytes @ 0x22
  2936 ;;
  2937 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2938 ;;
  2939 ;; *************** function _main *****************
  2940 ;; Defined at:
  2941 ;;		line 111 in file "main.c"
  2942 ;; Parameters:    Size  Location     Type
  2943 ;;		None
  2944 ;; Auto vars:     Size  Location     Type
  2945 ;;  i               1   26[BANK1 ] unsigned char 
  2946 ;; Return value:  Size  Location     Type
  2947 ;;                  2  1042[None  ] int 
  2948 ;; Registers used:
  2949 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
  2950 ;; Tracked objects:
  2951 ;;		On entry : 0/0
  2952 ;;		On exit  : 0/0
  2953 ;;		Unchanged: 0/0
  2954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2956 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2958 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2959 ;;Total ram usage:        1 bytes
  2960 ;; Hardware stack levels required when called:   12
  2961 ;; This function calls:
  2962 ;;		_LED_OUT
  2963 ;;		_OUT
  2964 ;;		_RTCC_from_RTCC
  2965 ;;		_RTCC_from_epoch
  2966 ;;		_RTCC_loop
  2967 ;;		_USB_loop
  2968 ;;		_bootload
  2969 ;;		_ctmu_sampling
  2970 ;;		_ctmu_set_ratio
  2971 ;;		_display_now
  2972 ;;		_display_reserve
  2973 ;;		_main_init
  2974 ;;		_my_terminal_loop
  2975 ;;		_normal_loop
  2976 ;;		_sleep_loop
  2977 ;; This function is called by:
  2978 ;;		Startup code after reset
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           	psect	text0
  2983  0000'                    __ptext0:
  2984                           	opt stack 0
  2985  0000'                    _main:
  2986                           	opt stack 19
  2987                           
  2988                           ;main.c: 112: main_init();
  2989                           
  2990                           ;incstack = 0
  2991  0000' EC00' F000'        	call	_main_init	;wreg free
  2992                           
  2993                           ;main.c: 114: ctmu_ratio = 90;
  2994  0004' 0E5A               	movlw	90
  2995  0006' 0100               	movlb	0	; () banked
  2996  0008' 6F00'              	movwf	_ctmu_ratio& (0+255),b
  2997                           
  2998                           ; BSR set to: 0
  2999                           ;main.c: 115: ctmu_set_ratio(ctmu_ratio);
  3000  000A' 0100               	movlb	0	; () banked
  3001  000C' 5100'              	movf	_ctmu_ratio& (0+255),w,b
  3002  000E' EC00' F000'        	call	_ctmu_set_ratio
  3003                           
  3004                           ;main.c: 117: RTCC_from_RTCC(&caltime_now, &epoch_now);
  3005  0012' 0E00'              	movlw	low _caltime_now
  3006  0014' 0100               	movlb	0	; () banked
  3007  0016' 6F00'              	movwf	RTCC_from_RTCC@ct& (0+255),b
  3008  0018' 0E00'              	movlw	high _caltime_now
  3009  001A' 0100               	movlb	0	; () banked
  3010  001C' 6F00'              	movwf	(RTCC_from_RTCC@ct+1)& (0+255),b
  3011  001E' 0E00'              	movlw	low _epoch_now
  3012  0020' 0100               	movlb	0	; () banked
  3013  0022' 6F00'              	movwf	RTCC_from_RTCC@ep& (0+255),b
  3014  0024' 0E00'              	movlw	high _epoch_now
  3015  0026' 0100               	movlb	0	; () banked
  3016  0028' 6F00'              	movwf	(RTCC_from_RTCC@ep+1)& (0+255),b
  3017  002A' EC00' F000'        	call	_RTCC_from_RTCC	;wreg free
  3018                           
  3019                           ;main.c: 118: if (caltime_now.DD == 0) {
  3020  002E' 0100               	movlb	0	; () banked
  3021  0030' 5100'              	movf	(_caltime_now+4)& (0+255),w,b
  3022  0032' A4D8               	btfss	status,2,c
  3023  0034' D017               	goto	l9255
  3024                           
  3025                           ; BSR set to: 0
  3026                           ;main.c: 119: epoch_now = 0;
  3027  0036' 0E00               	movlw	0
  3028  0038' 0100               	movlb	0	; () banked
  3029  003A' 6F00'              	movwf	_epoch_now& (0+255),b
  3030  003C' 0E00               	movlw	0
  3031  003E' 6F00'              	movwf	(_epoch_now+1)& (0+255),b
  3032  0040' 0E00               	movlw	0
  3033  0042' 6F00'              	movwf	(_epoch_now+2)& (0+255),b
  3034  0044' 0E00               	movlw	0
  3035  0046' 6F00'              	movwf	(_epoch_now+3)& (0+255),b
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;main.c: 120: RTCC_from_epoch(&caltime_now, &epoch_now);
  3039  0048' 0E00'              	movlw	low _caltime_now
  3040  004A' 0100               	movlb	0	; () banked
  3041  004C' 6F00'              	movwf	RTCC_from_epoch@ct& (0+255),b
  3042  004E' 0E00'              	movlw	high _caltime_now
  3043  0050' 0100               	movlb	0	; () banked
  3044  0052' 6F00'              	movwf	(RTCC_from_epoch@ct+1)& (0+255),b
  3045  0054' 0E00'              	movlw	low _epoch_now
  3046  0056' 0100               	movlb	0	; () banked
  3047  0058' 6F00'              	movwf	RTCC_from_epoch@ep& (0+255),b
  3048  005A' 0E00'              	movlw	high _epoch_now
  3049  005C' 0100               	movlb	0	; () banked
  3050  005E' 6F00'              	movwf	(RTCC_from_epoch@ep+1)& (0+255),b
  3051  0060' EC00' F000'        	call	_RTCC_from_epoch	;wreg free
  3052  0064'                    l9255:
  3053                           
  3054                           ;main.c: 121: }
  3055                           ;main.c: 122: display_now(LOGO);
  3056  0064' 0E00               	movlw	0
  3057  0066' EC00' F000'        	call	_display_now
  3058                           
  3059                           ;main.c: 123: display_reserve(PRINT_TIME, 120);
  3060  006A' 0E00               	movlw	0
  3061  006C' 0100               	movlb	0	; () banked
  3062  006E' 6F00'              	movwf	(display_reserve@time+1)& (0+255),b
  3063  0070' 0E78               	movlw	120
  3064  0072' 6F00'              	movwf	display_reserve@time& (0+255),b
  3065  0074' 0E01               	movlw	1
  3066  0076' EC00' F000'        	call	_display_reserve
  3067                           
  3068                           ;main.c: 125: for (uint8_t i = 0; i < 3; i++) {
  3069  007A' 0E00               	movlw	0
  3070  007C' 0101               	movlb	1	; () banked
  3071  007E' 6F00'              	movwf	main@i& (0+255),b
  3072  0080'                    l9261:
  3073                           
  3074                           ; BSR set to: 1
  3075  0080' 0E02               	movlw	2
  3076  0082' 0101               	movlb	1	; () banked
  3077  0084' 6500'              	cpfsgt	main@i& (0+255),b
  3078  0086' D001               	goto	l9265
  3079  0088' D03E               	goto	l9277
  3080  008A'                    l9265:
  3081                           
  3082                           ; BSR set to: 1
  3083                           ;main.c: 126: OUT(i, 0);
  3084  008A' 0E00               	movlw	0
  3085  008C' 6E1E'              	movwf	OUT@value,c
  3086  008E' 0101               	movlb	1	; () banked
  3087  0090' 5100'              	movf	main@i& (0+255),w,b
  3088  0092' EC00' F000'        	call	_OUT
  3089                           
  3090                           ;main.c: 127: LED_OUT(i, 0);
  3091  0096' 0E00               	movlw	0
  3092  0098' 6E1E'              	movwf	LED_OUT@value,c
  3093  009A' 0101               	movlb	1	; () banked
  3094  009C' 5100'              	movf	main@i& (0+255),w,b
  3095  009E' EC00' F000'        	call	_LED_OUT
  3096                           
  3097                           ;main.c: 128: port[i].cut_cnt = 0;
  3098  00A2' 0101               	movlb	1	; () banked
  3099  00A4' 5100'              	movf	main@i& (0+255),w,b
  3100  00A6' 0D17               	mullw	23
  3101  00A8' 0E14               	movlw	20
  3102  00AA' 26F3               	addwf	prodl,f,c
  3103  00AC' 0E00               	movlw	0
  3104  00AE' 22F4               	addwfc	prodh,f,c
  3105  00B0' 0E00'              	movlw	low _port
  3106  00B2' 24F3               	addwf	prodl,w,c
  3107  00B4' 6ED9               	movwf	fsr2l,c
  3108  00B6' 0E00'              	movlw	high _port
  3109  00B8' 20F4               	addwfc	prodh,w,c
  3110  00BA' 6EDA               	movwf	fsr2h,c
  3111  00BC' 0E00               	movlw	0
  3112  00BE' 6EDE               	movwf	postinc2,c
  3113  00C0' 0E00               	movlw	0
  3114  00C2' 6EDD               	movwf	postdec2,c
  3115                           
  3116                           ; BSR set to: 1
  3117                           ;main.c: 129: port[i].flag.auto_cut_ON = 1;
  3118  00C4' 0101               	movlb	1	; () banked
  3119  00C6' 5100'              	movf	main@i& (0+255),w,b
  3120  00C8' 0D17               	mullw	23
  3121  00CA' 0E16               	movlw	22
  3122  00CC' 26F3               	addwf	prodl,f,c
  3123  00CE' 0E00               	movlw	0
  3124  00D0' 22F4               	addwfc	prodh,f,c
  3125  00D2' 0E00'              	movlw	low _port
  3126  00D4' 24F3               	addwf	prodl,w,c
  3127  00D6' 6ED9               	movwf	fsr2l,c
  3128  00D8' 0E00'              	movlw	high _port
  3129  00DA' 20F4               	addwfc	prodh,w,c
  3130  00DC' 6EDA               	movwf	fsr2h,c
  3131  00DE' 0101               	movlb	1	; () banked
  3132  00E0' 80DF               	bsf	indf2,0,c
  3133                           
  3134                           ; BSR set to: 1
  3135                           ;main.c: 130: port[i].flag.led_indicator_ON = 1;
  3136  00E2' 0101               	movlb	1	; () banked
  3137  00E4' 5100'              	movf	main@i& (0+255),w,b
  3138  00E6' 0D17               	mullw	23
  3139  00E8' 0E16               	movlw	22
  3140  00EA' 26F3               	addwf	prodl,f,c
  3141  00EC' 0E00               	movlw	0
  3142  00EE' 22F4               	addwfc	prodh,f,c
  3143  00F0' 0E00'              	movlw	low _port
  3144  00F2' 24F3               	addwf	prodl,w,c
  3145  00F4' 6ED9               	movwf	fsr2l,c
  3146  00F6' 0E00'              	movlw	high _port
  3147  00F8' 20F4               	addwfc	prodh,w,c
  3148  00FA' 6EDA               	movwf	fsr2h,c
  3149  00FC' 0101               	movlb	1	; () banked
  3150  00FE' 82DF               	bsf	indf2,1,c
  3151                           
  3152                           ; BSR set to: 1
  3153  0100' 0101               	movlb	1	; () banked
  3154  0102' 2B00'              	incf	main@i& (0+255),f,b
  3155  0104' D7BD               	goto	l9261
  3156  0106'                    l9277:
  3157                           
  3158                           ; BSR set to: 1
  3159                           ;main.c: 131: }
  3160                           ;main.c: 132: settings_flag = 0;
  3161  0106' 0E00               	movlw	0
  3162  0108' 0100               	movlb	0	; () banked
  3163  010A' 6F00'              	movwf	_settings_flag& (0+255),b
  3164  010C' D030               	goto	l9323
  3165  010E'                    l9281:
  3166                           
  3167                           ;main.c: 137: INTCONbits.GIE = 0;
  3168  010E' 9EF2               	bcf	intcon,7,c	;volatile
  3169                           
  3170                           ;main.c: 138: RTCC_loop();
  3171  0110' EC00' F000'        	call	_RTCC_loop	;wreg free
  3172                           
  3173                           ;main.c: 139: INTCONbits.GIE = 1;
  3174  0114' 8EF2               	bsf	intcon,7,c	;volatile
  3175                           
  3176                           ;main.c: 140: INTCONbits.GIE = 0;
  3177  0116' 9EF2               	bcf	intcon,7,c	;volatile
  3178                           
  3179                           ;main.c: 141: USB_loop();
  3180  0118' EC00' F000'        	call	_USB_loop	;wreg free
  3181                           
  3182                           ;main.c: 142: INTCONbits.GIE = 1;
  3183  011C' 8EF2               	bsf	intcon,7,c	;volatile
  3184                           
  3185                           ;main.c: 143: INTCONbits.GIE = 0;
  3186  011E' 9EF2               	bcf	intcon,7,c	;volatile
  3187                           
  3188                           ;main.c: 144: my_terminal_loop(&usb_tx, &usb_rx);
  3189  0120' 0E00'              	movlw	low _usb_tx
  3190  0122' 0101               	movlb	1	; () banked
  3191  0124' 6F00'              	movwf	my_terminal_loop@tx& (0+255),b
  3192  0126' 0E00'              	movlw	high _usb_tx
  3193  0128' 0101               	movlb	1	; () banked
  3194  012A' 6F00'              	movwf	(my_terminal_loop@tx+1)& (0+255),b
  3195  012C' 0E00'              	movlw	low _usb_rx
  3196  012E' 0101               	movlb	1	; () banked
  3197  0130' 6F00'              	movwf	my_terminal_loop@rx& (0+255),b
  3198  0132' 0E00'              	movlw	high _usb_rx
  3199  0134' 0101               	movlb	1	; () banked
  3200  0136' 6F00'              	movwf	(my_terminal_loop@rx+1)& (0+255),b
  3201  0138' EC00' F000'        	call	_my_terminal_loop	;wreg free
  3202                           
  3203                           ;main.c: 145: INTCONbits.GIE = 1;
  3204  013C' 8EF2               	bsf	intcon,7,c	;volatile
  3205                           
  3206                           ;main.c: 146: INTCONbits.GIE = 0;
  3207  013E' 9EF2               	bcf	intcon,7,c	;volatile
  3208                           
  3209                           ;main.c: 147: normal_loop();
  3210  0140' EC00' F000'        	call	_normal_loop	;wreg free
  3211                           
  3212                           ;main.c: 148: INTCONbits.GIE = 1;
  3213  0144' 8EF2               	bsf	intcon,7,c	;volatile
  3214                           
  3215                           ;main.c: 149: INTCONbits.GIE = 0;
  3216  0146' 9EF2               	bcf	intcon,7,c	;volatile
  3217                           
  3218                           ;main.c: 150: ctmu_sampling();
  3219  0148' EC00' F000'        	call	_ctmu_sampling	;wreg free
  3220                           
  3221                           ;main.c: 151: if (ctmu_m.flag.pressing && port[0].ctmu.flag.pressing && port[1].ctmu.fla
      +                          g.pressing && port[2].ctmu.flag.pressing) {
  3222  014C' 0100               	movlb	0	; () banked
  3223  014E' A100'              	btfss	(_ctmu_m+3)& (0+255),0,b
  3224  0150' D00A               	goto	l9319
  3225                           
  3226                           ; BSR set to: 0
  3227  0152' 0101               	movlb	1	; () banked
  3228  0154' A100'              	btfss	(_port+3)& (0+255),0,b
  3229  0156' D007               	goto	l9319
  3230                           
  3231                           ; BSR set to: 1
  3232  0158' 0101               	movlb	1	; () banked
  3233  015A' A100'              	btfss	(_port+26)& (0+255),0,b
  3234  015C' D004               	goto	l9319
  3235                           
  3236                           ; BSR set to: 1
  3237  015E' 0101               	movlb	1	; () banked
  3238  0160' B100'              	btfsc	(_port+49)& (0+255),0,b
  3239                           
  3240                           ; BSR set to: 1
  3241                           ;main.c: 152: bootload();
  3242  0162' EC00' F000'        	call	_bootload	;wreg free
  3243  0166'                    l9319:
  3244                           
  3245                           ;main.c: 153: }
  3246                           ;main.c: 154: INTCONbits.GIE = 1;
  3247  0166' 8EF2               	bsf	intcon,7,c	;volatile
  3248                           
  3249                           ;main.c: 155: INTCONbits.GIE = 0;
  3250  0168' 9EF2               	bcf	intcon,7,c	;volatile
  3251                           
  3252                           ;main.c: 156: sleep_loop();
  3253  016A' EC00' F000'        	call	_sleep_loop	;wreg free
  3254  016E'                    l9323:
  3255                           
  3256                           ;main.c: 157: INTCONbits.GIE = 1;
  3257  016E' 8EF2               	bsf	intcon,7,c	;volatile
  3258  0170' D7CE               	goto	l9281
  3259  0172'                    __end_of_main:
  3260                           	opt stack 0
  3261                           tblptru	equ	0xFF8
  3262                           tblptrh	equ	0xFF7
  3263                           tblptrl	equ	0xFF6
  3264                           tablat	equ	0xFF5
  3265                           prodh	equ	0xFF4
  3266                           prodl	equ	0xFF3
  3267                           intcon	equ	0xFF2
  3268                           postinc0	equ	0xFEE
  3269                           wreg	equ	0xFE8
  3270                           postdec1	equ	0xFE5
  3271                           fsr1h	equ	0xFE2
  3272                           fsr1l	equ	0xFE1
  3273                           indf2	equ	0xFDF
  3274                           postinc2	equ	0xFDE
  3275                           postdec2	equ	0xFDD
  3276                           fsr2h	equ	0xFDA
  3277                           fsr2l	equ	0xFD9
  3278                           status	equ	0xFD8
  3279                           
  3280 ;; *************** function _sleep_loop *****************
  3281 ;; Defined at:
  3282 ;;		line 771 in file "tasks.h"
  3283 ;; Parameters:    Size  Location     Type
  3284 ;;		None
  3285 ;; Auto vars:     Size  Location     Type
  3286 ;;  i               1    6[BANK0 ] unsigned char 
  3287 ;; Return value:  Size  Location     Type
  3288 ;;		None               void
  3289 ;; Registers used:
  3290 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3291 ;; Tracked objects:
  3292 ;;		On entry : 0/0
  3293 ;;		On exit  : 0/0
  3294 ;;		Unchanged: 0/0
  3295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3297 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3299 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3300 ;;Total ram usage:        1 bytes
  3301 ;; Hardware stack levels used:    1
  3302 ;; Hardware stack levels required when called:    7
  3303 ;; This function calls:
  3304 ;;		_ADC
  3305 ;;		_I2C_LCD_Clear
  3306 ;;		_I2C_LCD_Puts
  3307 ;;		_I2C_LCD_SetCursor
  3308 ;;		_LED_OUT
  3309 ;;		_OUT
  3310 ;;		_display_now
  3311 ;;		_display_reserve
  3312 ;; This function is called by:
  3313 ;;		_main
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           	psect	text1
  3318  0000'                    __ptext1:
  3319                           	opt stack 0
  3320  0000'                    _sleep_loop:
  3321                           	opt stack 23
  3322                           
  3323                           ;tasks.h: 772: static uint8_t sleep_flag = 0;
  3324                           ;tasks.h: 773: if (ADC(12) < 2048) {
  3325                           
  3326                           ;incstack = 0
  3327  0000' 0E0C               	movlw	12
  3328  0002' EC00' F000'        	call	_ADC
  3329  0006' 0E08               	movlw	8
  3330  0008' 5C1F'              	subwf	?_ADC+1,w,c
  3331  000A' B0D8               	btfsc	status,0,c
  3332  000C' D053               	goto	l9055
  3333                           
  3334                           ;tasks.h: 774: sleep_flag = 1;
  3335  000E' 0E01               	movlw	1
  3336  0010' 6E10'              	movwf	sleep_loop@sleep_flag,c
  3337                           
  3338                           ;tasks.h: 775: INTCONbits.GIE = 0;
  3339  0012' 9EF2               	bcf	intcon,7,c	;volatile
  3340                           
  3341                           ;tasks.h: 776: for (uint8_t i = 0; i < 3; i++) {
  3342  0014' 0E00               	movlw	0
  3343  0016' 0100               	movlb	0	; () banked
  3344  0018' 6F00'              	movwf	sleep_loop@i& (0+255),b
  3345  001A'                    l9025:
  3346                           
  3347                           ; BSR set to: 0
  3348  001A' 0E02               	movlw	2
  3349  001C' 0100               	movlb	0	; () banked
  3350  001E' 6500'              	cpfsgt	sleep_loop@i& (0+255),b
  3351  0020' D001               	goto	l9029
  3352  0022' D00F               	goto	l1013
  3353  0024'                    l9029:
  3354                           
  3355                           ; BSR set to: 0
  3356                           ;tasks.h: 777: OUT(i, 0);
  3357  0024' 0E00               	movlw	0
  3358  0026' 6E1E'              	movwf	OUT@value,c
  3359  0028' 0100               	movlb	0	; () banked
  3360  002A' 5100'              	movf	sleep_loop@i& (0+255),w,b
  3361  002C' EC00' F000'        	call	_OUT
  3362                           
  3363                           ;tasks.h: 778: LED_OUT(i, 0);
  3364  0030' 0E00               	movlw	0
  3365  0032' 6E1E'              	movwf	LED_OUT@value,c
  3366  0034' 0100               	movlb	0	; () banked
  3367  0036' 5100'              	movf	sleep_loop@i& (0+255),w,b
  3368  0038' EC00' F000'        	call	_LED_OUT
  3369  003C' 0100               	movlb	0	; () banked
  3370  003E' 2B00'              	incf	sleep_loop@i& (0+255),f,b
  3371  0040' D7EC               	goto	l9025
  3372  0042'                    l1013:
  3373                           
  3374                           ; BSR set to: 0
  3375                           ;tasks.h: 779: }
  3376                           ;tasks.h: 780: UCONbits.USBEN = 0;
  3377  0042' 9665               	bcf	3941,3,c	;volatile
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;tasks.h: 781: I2C_LCD_Clear();
  3381  0044' EC00' F000'        	call	_I2C_LCD_Clear	;wreg free
  3382                           
  3383                           ;tasks.h: 782: I2C_LCD_SetCursor(0, 0);
  3384  0048' 0E00               	movlw	0
  3385  004A' 0100               	movlb	0	; () banked
  3386  004C' 6F00'              	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3387  004E' 0E00               	movlw	0
  3388  0050' EC00' F000'        	call	_I2C_LCD_SetCursor
  3389                           
  3390                           ;tasks.h: 783: I2C_LCD_Puts("Charge Station 6");
  3391  0054' 0E00'              	movlw	low STR_23
  3392  0056' 0100               	movlb	0	; () banked
  3393  0058' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
  3394  005A' 0E00'              	movlw	high STR_23
  3395  005C' 0100               	movlb	0	; () banked
  3396  005E' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3397  0060' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
  3398                           
  3399                           ;tasks.h: 784: I2C_LCD_SetCursor(0, 1);
  3400  0064' 0E01               	movlw	1
  3401  0066' 0100               	movlb	0	; () banked
  3402  0068' 6F00'              	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3403  006A' 0E00               	movlw	0
  3404  006C' EC00' F000'        	call	_I2C_LCD_SetCursor
  3405                           
  3406                           ;tasks.h: 785: I2C_LCD_Puts("SLEEPING NOW");
  3407  0070' 0E00'              	movlw	low STR_146
  3408  0072' 0100               	movlb	0	; () banked
  3409  0074' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
  3410  0076' 0E00'              	movlw	high STR_146
  3411  0078' 0100               	movlb	0	; () banked
  3412  007A' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3413  007C' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
  3414                           
  3415                           ;tasks.h: 786: }
  3416                           ;tasks.h: 787: while (sleep_flag) {
  3417  0080' D019               	goto	l9055
  3418  0082'                    l9045:
  3419                           
  3420                           ;tasks.h: 788: if (ADC(12) > 2048) {
  3421  0082' 0E0C               	movlw	12
  3422  0084' EC00' F000'        	call	_ADC
  3423  0088' 041E'              	decf	?_ADC,w,c
  3424  008A' 0E08               	movlw	8
  3425  008C' 581F'              	subwfb	?_ADC+1,w,c
  3426  008E' A0D8               	btfss	status,0,c
  3427  0090' D00F               	goto	l1016
  3428                           
  3429                           ;tasks.h: 789: sleep_flag = 0;
  3430  0092' 0E00               	movlw	0
  3431  0094' 6E10'              	movwf	sleep_loop@sleep_flag,c
  3432                           
  3433                           ;tasks.h: 790: UCONbits.USBEN = 1;
  3434  0096' 8665               	bsf	3941,3,c	;volatile
  3435                           
  3436                           ;tasks.h: 791: display_now(LOGO);
  3437  0098' 0E00               	movlw	0
  3438  009A' EC00' F000'        	call	_display_now
  3439                           
  3440                           ;tasks.h: 792: display_reserve(PRINT_TIME, 120);
  3441  009E' 0E00               	movlw	0
  3442  00A0' 0100               	movlb	0	; () banked
  3443  00A2' 6F00'              	movwf	(display_reserve@time+1)& (0+255),b
  3444  00A4' 0E78               	movlw	120
  3445  00A6' 6F00'              	movwf	display_reserve@time& (0+255),b
  3446  00A8' 0E01               	movlw	1
  3447  00AA' EC00' F000'        	call	_display_reserve
  3448                           
  3449                           ;tasks.h: 793: break;
  3450  00AE' 0012               	return	
  3451  00B0'                    l1016:
  3452  00B0' 0003               	sleep		;# 
  3453                           
  3454                           ;tasks.h: 796: __nop();
  3455  00B2' F000               	nop	
  3456  00B4'                    l9055:
  3457  00B4' 5010'              	movf	sleep_loop@sleep_flag,w,c
  3458  00B6' B4D8               	btfsc	status,2,c
  3459  00B8' 0012               	return	
  3460  00BA' D7E3               	goto	l9045
  3461  00BC'                    __end_of_sleep_loop:
  3462                           	opt stack 0
  3463                           tblptru	equ	0xFF8
  3464                           tblptrh	equ	0xFF7
  3465                           tblptrl	equ	0xFF6
  3466                           tablat	equ	0xFF5
  3467                           prodh	equ	0xFF4
  3468                           prodl	equ	0xFF3
  3469                           intcon	equ	0xFF2
  3470                           postinc0	equ	0xFEE
  3471                           wreg	equ	0xFE8
  3472                           postdec1	equ	0xFE5
  3473                           fsr1h	equ	0xFE2
  3474                           fsr1l	equ	0xFE1
  3475                           indf2	equ	0xFDF
  3476                           postinc2	equ	0xFDE
  3477                           postdec2	equ	0xFDD
  3478                           fsr2h	equ	0xFDA
  3479                           fsr2l	equ	0xFD9
  3480                           status	equ	0xFD8
  3481                           
  3482 ;; *************** function _normal_loop *****************
  3483 ;; Defined at:
  3484 ;;		line 687 in file "tasks.h"
  3485 ;; Parameters:    Size  Location     Type
  3486 ;;		None
  3487 ;; Auto vars:     Size  Location     Type
  3488 ;;  i               1   15[BANK1 ] unsigned char 
  3489 ;;  str            15    0[BANK1 ] unsigned char [15]
  3490 ;; Return value:  Size  Location     Type
  3491 ;;		None               void
  3492 ;; Registers used:
  3493 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3494 ;; Tracked objects:
  3495 ;;		On entry : 0/0
  3496 ;;		On exit  : 0/0
  3497 ;;		Unchanged: 0/0
  3498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3500 ;;      Locals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3502 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3503 ;;Total ram usage:       16 bytes
  3504 ;; Hardware stack levels used:    1
  3505 ;; Hardware stack levels required when called:    9
  3506 ;; This function calls:
  3507 ;;		_Auto_cut
  3508 ;;		___lwdiv
  3509 ;;		___lwmod
  3510 ;;		_display_LCD
  3511 ;;		_display_now
  3512 ;;		_my_utoa32
  3513 ;;		_port_button_loop
  3514 ;;		_print_time
  3515 ;;		_ringbuf_put
  3516 ;;		_ringbuf_put_str
  3517 ;;		_settings_loop
  3518 ;; This function is called by:
  3519 ;;		_main
  3520 ;; This function uses a non-reentrant model
  3521 ;;
  3522                           
  3523                           	psect	text2
  3524  0000'                    __ptext2:
  3525                           	opt stack 0
  3526  0000'                    _normal_loop:
  3527                           	opt stack 21
  3528                           
  3529                           ;tasks.h: 688: if (settings_flag) {
  3530                           
  3531                           ;incstack = 0
  3532  0000' 0100               	movlb	0	; () banked
  3533  0002' 5100'              	movf	_settings_flag& (0+255),w,b
  3534  0004' B4D8               	btfsc	status,2,c
  3535  0006' D014               	goto	l8927
  3536                           
  3537                           ; BSR set to: 0
  3538                           ;tasks.h: 689: settings_loop();
  3539  0008' EC00' F000'        	call	_settings_loop	;wreg free
  3540                           
  3541                           ;tasks.h: 690: if (ctmu_m.flag.press) {
  3542  000C' 0100               	movlb	0	; () banked
  3543  000E' A100'              	btfss	(_ctmu_m+2)& (0+255),0,b
  3544  0010' D022               	goto	l8935
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;tasks.h: 691: ctmu_m.flags = 0;
  3548  0012' 0E00               	movlw	0
  3549  0014' 0100               	movlb	0	; () banked
  3550  0016' 6F00'              	movwf	(_ctmu_m+3)& (0+255),b
  3551  0018' 0E00               	movlw	0
  3552  001A' 6F00'              	movwf	(_ctmu_m+2)& (0+255),b
  3553                           
  3554                           ;tasks.h: 692: settings_flag = 0;
  3555  001C' 0E00               	movlw	0
  3556  001E' 0100               	movlb	0	; () banked
  3557  0020' 6F00'              	movwf	_settings_flag& (0+255),b
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;tasks.h: 693: display_now(PRINT_TIME);
  3561  0022' 0E01               	movlw	1
  3562  0024' EC00' F000'        	call	_display_now
  3563                           
  3564                           ;tasks.h: 694: edit_flag.flags = 0;
  3565  0028' 0E00               	movlw	0
  3566  002A' 0100               	movlb	0	; () banked
  3567  002C' 6F00'              	movwf	_edit_flag& (0+255),b
  3568                           
  3569                           ; BSR set to: 0
  3570                           ;tasks.h: 695: }
  3571                           ;tasks.h: 696: } else {
  3572  002E' D013               	goto	l8935
  3573  0030'                    l8927:
  3574                           
  3575                           ; BSR set to: 0
  3576                           ;tasks.h: 697: port_button_loop();
  3577  0030' EC00' F000'        	call	_port_button_loop	;wreg free
  3578                           
  3579                           ;tasks.h: 698: if (ctmu_m.flag.press) {
  3580  0034' 0100               	movlb	0	; () banked
  3581  0036' A100'              	btfss	(_ctmu_m+2)& (0+255),0,b
  3582  0038' D00E               	goto	l8935
  3583                           
  3584                           ; BSR set to: 0
  3585                           ;tasks.h: 699: ctmu_m.flags = 0;
  3586  003A' 0E00               	movlw	0
  3587  003C' 0100               	movlb	0	; () banked
  3588  003E' 6F00'              	movwf	(_ctmu_m+3)& (0+255),b
  3589  0040' 0E00               	movlw	0
  3590  0042' 6F00'              	movwf	(_ctmu_m+2)& (0+255),b
  3591                           
  3592                           ;tasks.h: 700: settings_flag = 1;
  3593  0044' 0E01               	movlw	1
  3594  0046' 0100               	movlb	0	; () banked
  3595  0048' 6F00'              	movwf	_settings_flag& (0+255),b
  3596                           
  3597                           ;tasks.h: 701: settings_state = 0;
  3598  004A' 0E00               	movlw	0
  3599  004C' 0100               	movlb	0	; () banked
  3600  004E' 6F00'              	movwf	_settings_state& (0+255),b
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;tasks.h: 702: display_now(SETTINGS);
  3604  0050' 0E04               	movlw	4
  3605  0052' EC00' F000'        	call	_display_now
  3606  0056'                    l8935:
  3607                           
  3608                           ;tasks.h: 703: }
  3609                           ;tasks.h: 704: }
  3610                           ;tasks.h: 706: if (cut_time_flag) {
  3611  0056' 0100               	movlb	0	; () banked
  3612  0058' 5100'              	movf	_cut_time_flag& (0+255),w,b
  3613  005A' B4D8               	btfsc	status,2,c
  3614  005C' D005               	goto	l8941
  3615                           
  3616                           ; BSR set to: 0
  3617                           ;tasks.h: 707: cut_time_flag = 0;
  3618  005E' 0E00               	movlw	0
  3619  0060' 0100               	movlb	0	; () banked
  3620  0062' 6F00'              	movwf	_cut_time_flag& (0+255),b
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;tasks.h: 708: Auto_cut();
  3624  0064' EC00' F000'        	call	_Auto_cut	;wreg free
  3625  0068'                    l8941:
  3626                           
  3627                           ;tasks.h: 709: }
  3628                           ;tasks.h: 711: if (time_change_flag) {
  3629  0068' 0100               	movlb	0	; () banked
  3630  006A' 5100'              	movf	_time_change_flag& (0+255),w,b
  3631  006C' B4D8               	btfsc	status,2,c
  3632  006E' D00A               	goto	l986
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;tasks.h: 712: time_change_flag = 0;
  3636  0070' 0E00               	movlw	0
  3637  0072' 0100               	movlb	0	; () banked
  3638  0074' 6F00'              	movwf	_time_change_flag& (0+255),b
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;tasks.h: 713: if (pres_print_item == PRINT_TIME)display_flag = 1;
  3642  0076' 0100               	movlb	0	; () banked
  3643  0078' 0500'              	decf	_pres_print_item& (0+255),w,b
  3644  007A' A4D8               	btfss	status,2,c
  3645  007C' D003               	goto	l986
  3646                           
  3647                           ; BSR set to: 0
  3648  007E' 0E01               	movlw	1
  3649  0080' 0100               	movlb	0	; () banked
  3650  0082' 6F00'              	movwf	_display_flag& (0+255),b
  3651  0084'                    l986:
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;tasks.h: 714: }
  3655                           ;tasks.h: 715: if (delay_display.flag) {
  3656  0084' 5019'              	movf	_delay_display,w,c
  3657  0086' B4D8               	btfsc	status,2,c
  3658  0088' D007               	goto	l988
  3659                           
  3660                           ; BSR set to: 0
  3661                           ;tasks.h: 716: delay_display.flag = 0;
  3662  008A' 0E00               	movlw	0
  3663  008C' 6E19'              	movwf	_delay_display,c
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;tasks.h: 717: pres_print_item = next_print_item;
  3667  008E' C00D' F00E'        	movff	_next_print_item,_pres_print_item
  3668                           
  3669                           ;tasks.h: 718: display_flag = 1;
  3670  0092' 0E01               	movlw	1
  3671  0094' 0100               	movlb	0	; () banked
  3672  0096' 6F00'              	movwf	_display_flag& (0+255),b
  3673  0098'                    l988:
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;tasks.h: 719: }
  3677                           ;tasks.h: 720: if (display_flag) {
  3678  0098' 0100               	movlb	0	; () banked
  3679  009A' 5100'              	movf	_display_flag& (0+255),w,b
  3680  009C' B4D8               	btfsc	status,2,c
  3681  009E' D005               	goto	l8957
  3682                           
  3683                           ; BSR set to: 0
  3684                           ;tasks.h: 721: display_flag = 0;
  3685  00A0' 0E00               	movlw	0
  3686  00A2' 0100               	movlb	0	; () banked
  3687  00A4' 6F00'              	movwf	_display_flag& (0+255),b
  3688                           
  3689                           ; BSR set to: 0
  3690                           ;tasks.h: 722: display_LCD();
  3691  00A6' EC00' F000'        	call	_display_LCD	;wreg free
  3692  00AA'                    l8957:
  3693                           
  3694                           ;tasks.h: 723: }
  3695                           ;tasks.h: 725: if (data_out && data_out_flag) {
  3696  00AA' 0100               	movlb	0	; () banked
  3697  00AC' 5100'              	movf	_data_out& (0+255),w,b
  3698  00AE' B4D8               	btfsc	status,2,c
  3699  00B0' 0012               	return	
  3700                           
  3701                           ; BSR set to: 0
  3702  00B2' 0100               	movlb	0	; () banked
  3703  00B4' 5100'              	movf	_data_out_flag& (0+255),w,b
  3704  00B6' B4D8               	btfsc	status,2,c
  3705  00B8' 0012               	return	
  3706                           
  3707                           ; BSR set to: 0
  3708                           ;tasks.h: 726: data_out_flag = 0;
  3709  00BA' 0E00               	movlw	0
  3710  00BC' 0100               	movlb	0	; () banked
  3711  00BE' 6F00'              	movwf	_data_out_flag& (0+255),b
  3712                           
  3713                           ; BSR set to: 0
  3714                           ;tasks.h: 727: char str[15];
  3715                           ;tasks.h: 728: print_time(&usb_tx);
  3716  00C0' 0E00'              	movlw	low _usb_tx
  3717  00C2' 0100               	movlb	0	; () banked
  3718  00C4' 6F00'              	movwf	print_time@tx& (0+255),b
  3719  00C6' 0E00'              	movlw	high _usb_tx
  3720  00C8' 0100               	movlb	0	; () banked
  3721  00CA' 6F00'              	movwf	(print_time@tx+1)& (0+255),b
  3722  00CC' EC00' F000'        	call	_print_time	;wreg free
  3723                           
  3724                           ;tasks.h: 729: for (uint8_t i = 0; i < 3; i++) {
  3725  00D0' 0E00               	movlw	0
  3726  00D2' 0101               	movlb	1	; () banked
  3727  00D4' 6F00'              	movwf	normal_loop@i& (0+255),b
  3728  00D6'                    l8967:
  3729                           
  3730                           ; BSR set to: 1
  3731  00D6' 0E02               	movlw	2
  3732  00D8' 0101               	movlb	1	; () banked
  3733  00DA' 6500'              	cpfsgt	normal_loop@i& (0+255),b
  3734  00DC' D001               	goto	l8971
  3735  00DE' D117               	goto	l9007
  3736  00E0'                    l8971:
  3737                           
  3738                           ; BSR set to: 1
  3739                           ;tasks.h: 730: ringbuf_put_str(&usb_tx, "  \tPORT:");
  3740  00E0' 0E00'              	movlw	low _usb_tx
  3741  00E2' 0100               	movlb	0	; () banked
  3742  00E4' 6F00'              	movwf	ringbuf_put_str@rb& (0+255),b
  3743  00E6' 0E00'              	movlw	high _usb_tx
  3744  00E8' 0100               	movlb	0	; () banked
  3745  00EA' 6F00'              	movwf	(ringbuf_put_str@rb+1)& (0+255),b
  3746  00EC' 0E00'              	movlw	low STR_136
  3747  00EE' 0100               	movlb	0	; () banked
  3748  00F0' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
  3749  00F2' 0E00'              	movlw	high STR_136
  3750  00F4' 0100               	movlb	0	; () banked
  3751  00F6' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
  3752  00F8' EC00' F000'        	call	_ringbuf_put_str	;wreg free
  3753                           
  3754                           ;tasks.h: 731: switch (i) {
  3755  00FC' D02D               	goto	l8981
  3756  00FE'                    l8973:
  3757                           
  3758                           ;tasks.h: 733: ringbuf_put_str(&usb_tx, "L");
  3759  00FE' 0E00'              	movlw	low _usb_tx
  3760  0100' 0100               	movlb	0	; () banked
  3761  0102' 6F00'              	movwf	ringbuf_put_str@rb& (0+255),b
  3762  0104' 0E00'              	movlw	high _usb_tx
  3763  0106' 0100               	movlb	0	; () banked
  3764  0108' 6F00'              	movwf	(ringbuf_put_str@rb+1)& (0+255),b
  3765  010A' 0E00'              	movlw	low STR_137
  3766  010C' 0100               	movlb	0	; () banked
  3767  010E' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
  3768  0110' 0E00'              	movlw	high STR_137
  3769  0112' 0100               	movlb	0	; () banked
  3770  0114' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
  3771  0116' EC00' F000'        	call	_ringbuf_put_str	;wreg free
  3772                           
  3773                           ;tasks.h: 734: break;
  3774  011A' D029               	goto	l8983
  3775  011C'                    l8975:
  3776                           
  3777                           ;tasks.h: 736: ringbuf_put_str(&usb_tx, "C");
  3778  011C' 0E00'              	movlw	low _usb_tx
  3779  011E' 0100               	movlb	0	; () banked
  3780  0120' 6F00'              	movwf	ringbuf_put_str@rb& (0+255),b
  3781  0122' 0E00'              	movlw	high _usb_tx
  3782  0124' 0100               	movlb	0	; () banked
  3783  0126' 6F00'              	movwf	(ringbuf_put_str@rb+1)& (0+255),b
  3784  0128' 0E00'              	movlw	low STR_138
  3785  012A' 0100               	movlb	0	; () banked
  3786  012C' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
  3787  012E' 0E00'              	movlw	high STR_138
  3788  0130' 0100               	movlb	0	; () banked
  3789  0132' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
  3790  0134' EC00' F000'        	call	_ringbuf_put_str	;wreg free
  3791                           
  3792                           ;tasks.h: 737: break;
  3793  0138' D01A               	goto	l8983
  3794  013A'                    l8977:
  3795                           
  3796                           ;tasks.h: 739: ringbuf_put_str(&usb_tx, "R");
  3797  013A' 0E00'              	movlw	low _usb_tx
  3798  013C' 0100               	movlb	0	; () banked
  3799  013E' 6F00'              	movwf	ringbuf_put_str@rb& (0+255),b
  3800  0140' 0E00'              	movlw	high _usb_tx
  3801  0142' 0100               	movlb	0	; () banked
  3802  0144' 6F00'              	movwf	(ringbuf_put_str@rb+1)& (0+255),b
  3803  0146' 0E00'              	movlw	low STR_139
  3804  0148' 0100               	movlb	0	; () banked
  3805  014A' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
  3806  014C' 0E00'              	movlw	high STR_139
  3807  014E' 0100               	movlb	0	; () banked
  3808  0150' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
  3809  0152' EC00' F000'        	call	_ringbuf_put_str	;wreg free
  3810                           
  3811                           ;tasks.h: 741: }
  3812                           
  3813                           ;tasks.h: 740: break;
  3814  0156' D00B               	goto	l8983
  3815  0158'                    l8981:
  3816  0158' 0101               	movlb	1	; () banked
  3817  015A' 5100'              	movf	normal_loop@i& (0+255),w,b
  3818                           
  3819                           ; Switch size 1, requested type "space"
  3820                           ; Number of cases is 3, Range of values is 0 to 2
  3821                           ; switch strategies available:
  3822                           ; Name         Instructions Cycles
  3823                           ; simple_byte           10     6 (average)
  3824                           ;	Chosen strategy is simple_byte
  3825  015C' 0A00               	xorlw	0	; case 0
  3826  015E' B4D8               	btfsc	status,2,c
  3827  0160' D7CE               	goto	l8973
  3828  0162' 0A01               	xorlw	1	; case 1
  3829  0164' B4D8               	btfsc	status,2,c
  3830  0166' D7DA               	goto	l8975
  3831  0168' 0A03               	xorlw	3	; case 2
  3832  016A' B4D8               	btfsc	status,2,c
  3833  016C' D7E6               	goto	l8977
  3834  016E'                    l8983:
  3835                           
  3836                           ;tasks.h: 742: ringbuf_put_str(&usb_tx, "\t");
  3837  016E' 0E00'              	movlw	low _usb_tx
  3838  0170' 0100               	movlb	0	; () banked
  3839  0172' 6F00'              	movwf	ringbuf_put_str@rb& (0+255),b
  3840  0174' 0E00'              	movlw	high _usb_tx
  3841  0176' 0100               	movlb	0	; () banked
  3842  0178' 6F00'              	movwf	(ringbuf_put_str@rb+1)& (0+255),b
  3843  017A' 0E00'              	movlw	low STR_31
  3844  017C' 0100               	movlb	0	; () banked
  3845  017E' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
  3846  0180' 0E00'              	movlw	high STR_31
  3847  0182' 0100               	movlb	0	; () banked
  3848  0184' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
  3849  0186' EC00' F000'        	call	_ringbuf_put_str	;wreg free
  3850                           
  3851                           ;tasks.h: 743: ringbuf_put(&usb_tx, port[i].current / 1000 + '0');
  3852  018A' 0E00'              	movlw	low _usb_tx
  3853  018C' 0100               	movlb	0	; () banked
  3854  018E' 6F00'              	movwf	ringbuf_put@rb& (0+255),b
  3855  0190' 0E00'              	movlw	high _usb_tx
  3856  0192' 0100               	movlb	0	; () banked
  3857  0194' 6F00'              	movwf	(ringbuf_put@rb+1)& (0+255),b
  3858  0196' 0101               	movlb	1	; () banked
  3859  0198' 5100'              	movf	normal_loop@i& (0+255),w,b
  3860  019A' 0D17               	mullw	23
  3861  019C' 0E06               	movlw	6
  3862  019E' 26F3               	addwf	prodl,f,c
  3863  01A0' 0E00               	movlw	0
  3864  01A2' 22F4               	addwfc	prodh,f,c
  3865  01A4' 0E00'              	movlw	low _port
  3866  01A6' 24F3               	addwf	prodl,w,c
  3867  01A8' 6ED9               	movwf	fsr2l,c
  3868  01AA' 0E00'              	movlw	high _port
  3869  01AC' 20F4               	addwfc	prodh,w,c
  3870  01AE' 6EDA               	movwf	fsr2h,c
  3871  01B0' CFDE F019'         	movff	postinc2,___lwdiv@dividend
  3872  01B4' CFDD F01A'         	movff	postdec2,___lwdiv@dividend+1
  3873  01B8' 0E03               	movlw	3
  3874  01BA' 0100               	movlb	0	; () banked
  3875  01BC' 6F00'              	movwf	(___lwdiv@divisor+1)& (0+255),b
  3876  01BE' 0EE8               	movlw	232
  3877  01C0' 6F00'              	movwf	___lwdiv@divisor& (0+255),b
  3878  01C2' EC00' F000'        	call	___lwdiv	;wreg free
  3879  01C6' 0100               	movlb	0	; () banked
  3880  01C8' 5100'              	movf	?___lwdiv& (0+255),w,b
  3881  01CA' 0F30               	addlw	48
  3882  01CC' 0100               	movlb	0	; () banked
  3883  01CE' 6F00'              	movwf	ringbuf_put@asciicode& (0+255),b
  3884  01D0' EC00' F000'        	call	_ringbuf_put	;wreg free
  3885                           
  3886                           ;tasks.h: 744: ringbuf_put(&usb_tx, '.');
  3887  01D4' 0E00'              	movlw	low _usb_tx
  3888  01D6' 0100               	movlb	0	; () banked
  3889  01D8' 6F00'              	movwf	ringbuf_put@rb& (0+255),b
  3890  01DA' 0E00'              	movlw	high _usb_tx
  3891  01DC' 0100               	movlb	0	; () banked
  3892  01DE' 6F00'              	movwf	(ringbuf_put@rb+1)& (0+255),b
  3893  01E0' 0E2E               	movlw	46
  3894  01E2' 0100               	movlb	0	; () banked
  3895  01E4' 6F00'              	movwf	ringbuf_put@asciicode& (0+255),b
  3896  01E6' EC00' F000'        	call	_ringbuf_put	;wreg free
  3897                           
  3898                           ;tasks.h: 745: my_utoa32(str, port[i].current % 1000, 3);
  3899  01EA' 0E00'              	movlw	low normal_loop@str
  3900  01EC' 0100               	movlb	0	; () banked
  3901  01EE' 6F00'              	movwf	my_utoa32@str& (0+255),b
  3902  01F0' 0E00'              	movlw	high normal_loop@str
  3903  01F2' 0100               	movlb	0	; () banked
  3904  01F4' 6F00'              	movwf	(my_utoa32@str+1)& (0+255),b
  3905  01F6' 0101               	movlb	1	; () banked
  3906  01F8' 5100'              	movf	normal_loop@i& (0+255),w,b
  3907  01FA' 0D17               	mullw	23
  3908  01FC' 0E06               	movlw	6
  3909  01FE' 26F3               	addwf	prodl,f,c
  3910  0200' 0E00               	movlw	0
  3911  0202' 22F4               	addwfc	prodh,f,c
  3912  0204' 0E00'              	movlw	low _port
  3913  0206' 24F3               	addwf	prodl,w,c
  3914  0208' 6ED9               	movwf	fsr2l,c
  3915  020A' 0E00'              	movlw	high _port
  3916  020C' 20F4               	addwfc	prodh,w,c
  3917  020E' 6EDA               	movwf	fsr2h,c
  3918  0210' CFDE F01E'         	movff	postinc2,___lwmod@dividend
  3919  0214' CFDD F01F'         	movff	postdec2,___lwmod@dividend+1
  3920  0218' 0E03               	movlw	3
  3921  021A' 6E21'              	movwf	___lwmod@divisor+1,c
  3922  021C' 0EE8               	movlw	232
  3923  021E' 6E20'              	movwf	___lwmod@divisor,c
  3924  0220' EC00' F000'        	call	___lwmod	;wreg free
  3925  0224' C01E' F017'        	movff	?___lwmod,my_utoa32@value
  3926  0228' C01F' F018'        	movff	?___lwmod+1,my_utoa32@value+1
  3927  022C' 0100               	movlb	0	; () banked
  3928  022E' 6B00'              	clrf	(my_utoa32@value+2)& (0+255),b
  3929  0230' 6B00'              	clrf	(my_utoa32@value+3)& (0+255),b
  3930  0232' 0E03               	movlw	3
  3931  0234' 0100               	movlb	0	; () banked
  3932  0236' 6F00'              	movwf	my_utoa32@digits& (0+255),b
  3933  0238' EC00' F000'        	call	_my_utoa32	;wreg free
  3934                           
  3935                           ;tasks.h: 746: ringbuf_put_str(&usb_tx, str);
  3936  023C' 0E00'              	movlw	low _usb_tx
  3937  023E' 0100               	movlb	0	; () banked
  3938  0240' 6F00'              	movwf	ringbuf_put_str@rb& (0+255),b
  3939  0242' 0E00'              	movlw	high _usb_tx
  3940  0244' 0100               	movlb	0	; () banked
  3941  0246' 6F00'              	movwf	(ringbuf_put_str@rb+1)& (0+255),b
  3942  0248' 0E00'              	movlw	low normal_loop@str
  3943  024A' 0100               	movlb	0	; () banked
  3944  024C' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
  3945  024E' 0E00'              	movlw	high normal_loop@str
  3946  0250' 0100               	movlb	0	; () banked
  3947  0252' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
  3948  0254' EC00' F000'        	call	_ringbuf_put_str	;wreg free
  3949                           
  3950                           ;tasks.h: 747: ringbuf_put_str(&usb_tx, "A");
  3951  0258' 0E00'              	movlw	low _usb_tx
  3952  025A' 0100               	movlb	0	; () banked
  3953  025C' 6F00'              	movwf	ringbuf_put_str@rb& (0+255),b
  3954  025E' 0E00'              	movlw	high _usb_tx
  3955  0260' 0100               	movlb	0	; () banked
  3956  0262' 6F00'              	movwf	(ringbuf_put_str@rb+1)& (0+255),b
  3957  0264' 0E00'              	movlw	low STR_141
  3958  0266' 0100               	movlb	0	; () banked
  3959  0268' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
  3960  026A' 0E00'              	movlw	high STR_141
  3961  026C' 0100               	movlb	0	; () banked
  3962  026E' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
  3963  0270' EC00' F000'        	call	_ringbuf_put_str	;wreg free
  3964                           
  3965                           ;tasks.h: 749: ringbuf_put_str(&usb_tx, "\t");
  3966  0274' 0E00'              	movlw	low _usb_tx
  3967  0276' 0100               	movlb	0	; () banked
  3968  0278' 6F00'              	movwf	ringbuf_put_str@rb& (0+255),b
  3969  027A' 0E00'              	movlw	high _usb_tx
  3970  027C' 0100               	movlb	0	; () banked
  3971  027E' 6F00'              	movwf	(ringbuf_put_str@rb+1)& (0+255),b
  3972  0280' 0E00'              	movlw	low STR_31
  3973  0282' 0100               	movlb	0	; () banked
  3974  0284' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
  3975  0286' 0E00'              	movlw	high STR_31
  3976  0288' 0100               	movlb	0	; () banked
  3977  028A' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
  3978  028C' EC00' F000'        	call	_ringbuf_put_str	;wreg free
  3979                           
  3980                           ;tasks.h: 750: my_utoa32(str, port[i].integrated_current, 7);
  3981  0290' 0E00'              	movlw	low normal_loop@str
  3982  0292' 0100               	movlb	0	; () banked
  3983  0294' 6F00'              	movwf	my_utoa32@str& (0+255),b
  3984  0296' 0E00'              	movlw	high normal_loop@str
  3985  0298' 0100               	movlb	0	; () banked
  3986  029A' 6F00'              	movwf	(my_utoa32@str+1)& (0+255),b
  3987  029C' 0101               	movlb	1	; () banked
  3988  029E' 5100'              	movf	normal_loop@i& (0+255),w,b
  3989  02A0' 0D17               	mullw	23
  3990  02A2' 0E0C               	movlw	12
  3991  02A4' 26F3               	addwf	prodl,f,c
  3992  02A6' 0E00               	movlw	0
  3993  02A8' 22F4               	addwfc	prodh,f,c
  3994  02AA' 0E00'              	movlw	low _port
  3995  02AC' 24F3               	addwf	prodl,w,c
  3996  02AE' 6ED9               	movwf	fsr2l,c
  3997  02B0' 0E00'              	movlw	high _port
  3998  02B2' 20F4               	addwfc	prodh,w,c
  3999  02B4' 6EDA               	movwf	fsr2h,c
  4000  02B6' CFDE F017'         	movff	postinc2,my_utoa32@value
  4001  02BA' CFDE F018'         	movff	postinc2,my_utoa32@value+1
  4002  02BE' CFDE F019'         	movff	postinc2,my_utoa32@value+2
  4003  02C2' CFDE F01A'         	movff	postinc2,my_utoa32@value+3
  4004  02C6' 0E07               	movlw	7
  4005  02C8' 0100               	movlb	0	; () banked
  4006  02CA' 6F00'              	movwf	my_utoa32@digits& (0+255),b
  4007  02CC' EC00' F000'        	call	_my_utoa32	;wreg free
  4008                           
  4009                           ;tasks.h: 751: ringbuf_put_str(&usb_tx, str);
  4010  02D0' 0E00'              	movlw	low _usb_tx
  4011  02D2' 0100               	movlb	0	; () banked
  4012  02D4' 6F00'              	movwf	ringbuf_put_str@rb& (0+255),b
  4013  02D6' 0E00'              	movlw	high _usb_tx
  4014  02D8' 0100               	movlb	0	; () banked
  4015  02DA' 6F00'              	movwf	(ringbuf_put_str@rb+1)& (0+255),b
  4016  02DC' 0E00'              	movlw	low normal_loop@str
  4017  02DE' 0100               	movlb	0	; () banked
  4018  02E0' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
  4019  02E2' 0E00'              	movlw	high normal_loop@str
  4020  02E4' 0100               	movlb	0	; () banked
  4021  02E6' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
  4022  02E8' EC00' F000'        	call	_ringbuf_put_str	;wreg free
  4023                           
  4024                           ;tasks.h: 752: ringbuf_put_str(&usb_tx, "mAh");
  4025  02EC' 0E00'              	movlw	low _usb_tx
  4026  02EE' 0100               	movlb	0	; () banked
  4027  02F0' 6F00'              	movwf	ringbuf_put_str@rb& (0+255),b
  4028  02F2' 0E00'              	movlw	high _usb_tx
  4029  02F4' 0100               	movlb	0	; () banked
  4030  02F6' 6F00'              	movwf	(ringbuf_put_str@rb+1)& (0+255),b
  4031  02F8' 0E00'              	movlw	low STR_26
  4032  02FA' 0100               	movlb	0	; () banked
  4033  02FC' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
  4034  02FE' 0E00'              	movlw	high STR_26
  4035  0300' 0100               	movlb	0	; () banked
  4036  0302' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
  4037  0304' EC00' F000'        	call	_ringbuf_put_str	;wreg free
  4038  0308' 0101               	movlb	1	; () banked
  4039  030A' 2B00'              	incf	normal_loop@i& (0+255),f,b
  4040  030C' D6E4               	goto	l8967
  4041  030E'                    l9007:
  4042                           
  4043                           ; BSR set to: 1
  4044                           ;tasks.h: 753: }
  4045                           ;tasks.h: 754: ringbuf_put_str(&usb_tx, "\n");
  4046  030E' 0E00'              	movlw	low _usb_tx
  4047  0310' 0100               	movlb	0	; () banked
  4048  0312' 6F00'              	movwf	ringbuf_put_str@rb& (0+255),b
  4049  0314' 0E00'              	movlw	high _usb_tx
  4050  0316' 0100               	movlb	0	; () banked
  4051  0318' 6F00'              	movwf	(ringbuf_put_str@rb+1)& (0+255),b
  4052  031A' 0E00'              	movlw	low (STR_62+33)
  4053  031C' 0100               	movlb	0	; () banked
  4054  031E' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
  4055  0320' 0E00'              	movlw	high (STR_62+33)
  4056  0322' 0100               	movlb	0	; () banked
  4057  0324' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
  4058  0326' EC00' F000'        	call	_ringbuf_put_str	;wreg free
  4059  032A' 0012               	return	
  4060  032C'                    __end_of_normal_loop:
  4061                           	opt stack 0
  4062                           tblptru	equ	0xFF8
  4063                           tblptrh	equ	0xFF7
  4064                           tblptrl	equ	0xFF6
  4065                           tablat	equ	0xFF5
  4066                           prodh	equ	0xFF4
  4067                           prodl	equ	0xFF3
  4068                           intcon	equ	0xFF2
  4069                           postinc0	equ	0xFEE
  4070                           wreg	equ	0xFE8
  4071                           postdec1	equ	0xFE5
  4072                           fsr1h	equ	0xFE2
  4073                           fsr1l	equ	0xFE1
  4074                           indf2	equ	0xFDF
  4075                           postinc2	equ	0xFDE
  4076                           postdec2	equ	0xFDD
  4077                           fsr2h	equ	0xFDA
  4078                           fsr2l	equ	0xFD9
  4079                           status	equ	0xFD8
  4080                           
  4081 ;; *************** function _settings_loop *****************
  4082 ;; Defined at:
  4083 ;;		line 520 in file "tasks.h"
  4084 ;; Parameters:    Size  Location     Type
  4085 ;;		None
  4086 ;; Auto vars:     Size  Location     Type
  4087 ;;  i               1   92[BANK0 ] unsigned char 
  4088 ;;  i               1   91[BANK0 ] unsigned char 
  4089 ;;  i               1   90[BANK0 ] unsigned char 
  4090 ;;  j               1   95[BANK0 ] unsigned char 
  4091 ;;  j               1   94[BANK0 ] unsigned char 
  4092 ;;  j               1   93[BANK0 ] unsigned char 
  4093 ;;  i               1   89[BANK0 ] unsigned char 
  4094 ;;  i               1   88[BANK0 ] unsigned char 
  4095 ;;  i               1   87[BANK0 ] unsigned char 
  4096 ;;  str            20   67[BANK0 ] unsigned char [20]
  4097 ;;  strp            2   96[BANK0 ] PTR unsigned char 
  4098 ;;		 -> settings_loop@str(20), 
  4099 ;; Return value:  Size  Location     Type
  4100 ;;		None               void
  4101 ;; Registers used:
  4102 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4103 ;; Tracked objects:
  4104 ;;		On entry : 0/0
  4105 ;;		On exit  : 0/0
  4106 ;;		Unchanged: 0/0
  4107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4109 ;;      Locals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4110 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4111 ;;      Totals:         0      35       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4112 ;;Total ram usage:       35 bytes
  4113 ;; Hardware stack levels used:    1
  4114 ;; Hardware stack levels required when called:    8
  4115 ;; This function calls:
  4116 ;;		_RTCC_adjust_time_cursor
  4117 ;;		_RTCC_adjust_time_dec
  4118 ;;		_RTCC_adjust_time_inc
  4119 ;;		_RTCC_adjust_time_toggle
  4120 ;;		_display_char_puts
  4121 ;;		_display_now
  4122 ;;		_strcpy
  4123 ;; This function is called by:
  4124 ;;		_normal_loop
  4125 ;; This function uses a non-reentrant model
  4126 ;;
  4127                           
  4128                           	psect	text3
  4129  0000'                    __ptext3:
  4130                           	opt stack 0
  4131  0000'                    _settings_loop:
  4132                           	opt stack 21
  4133                           
  4134                           ;tasks.h: 521: char str[20];
  4135                           ;tasks.h: 522: char *strp;
  4136                           ;tasks.h: 523: strp = str;
  4137                           
  4138                           ;incstack = 0
  4139  0000' 0E00'              	movlw	low settings_loop@str
  4140  0002' 0100               	movlb	0	; () banked
  4141  0004' 6F00'              	movwf	settings_loop@strp& (0+255),b
  4142  0006' 0E00'              	movlw	high settings_loop@str
  4143  0008' 0100               	movlb	0	; () banked
  4144  000A' 6F00'              	movwf	(settings_loop@strp+1)& (0+255),b
  4145                           
  4146                           ;tasks.h: 524: switch (settings_state) {
  4147  000C' D3CF               	goto	l8813
  4148  000E'                    l8565:
  4149                           
  4150                           ; BSR set to: 0
  4151                           ;tasks.h: 526: settings_select = SELECT;
  4152  000E' 0E00               	movlw	0
  4153  0010' 0100               	movlb	0	; () banked
  4154  0012' 6F00'              	movwf	_settings_select& (0+255),b
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;tasks.h: 527: display_char_puts("Settings", "<-   Select   ->");
  4158  0014' 0E00'              	movlw	low STR_96
  4159  0016' 6E1E'              	movwf	display_char_puts@str0,c
  4160  0018' 0E00'              	movlw	high STR_96
  4161  001A' 6E1F'              	movwf	display_char_puts@str0+1,c
  4162  001C' 0E00'              	movlw	low STR_97
  4163  001E' 6E20'              	movwf	display_char_puts@str1,c
  4164  0020' 0E00'              	movlw	high STR_97
  4165  0022' 6E21'              	movwf	display_char_puts@str1+1,c
  4166  0024' EC00' F000'        	call	_display_char_puts	;wreg free
  4167                           
  4168                           ;tasks.h: 528: settings_state = 1;
  4169  0028' 0E01               	movlw	1
  4170  002A' 0100               	movlb	0	; () banked
  4171  002C' 6F00'              	movwf	_settings_state& (0+255),b
  4172                           
  4173                           ;tasks.h: 529: break;
  4174  002E' 0012               	return	
  4175  0030'                    l903:
  4176                           
  4177                           ; BSR set to: 0
  4178                           ;tasks.h: 531: if (port[2].ctmu.flag.press) {
  4179  0030' 0101               	movlb	1	; () banked
  4180  0032' A100'              	btfss	(_port+48)& (0+255),0,b
  4181  0034' D059               	goto	l904
  4182                           
  4183                           ; BSR set to: 1
  4184                           ;tasks.h: 532: port[2].ctmu.flags = 0;
  4185  0036' 0E00               	movlw	0
  4186  0038' 0101               	movlb	1	; () banked
  4187  003A' 6F00'              	movwf	(_port+49)& (0+255),b
  4188  003C' 0E00               	movlw	0
  4189  003E' 6F00'              	movwf	(_port+48)& (0+255),b
  4190                           
  4191                           ; BSR set to: 1
  4192                           ;tasks.h: 533: if (settings_select == INTEGRATING_RESET)settings_select = SELECT;
  4193  0040' 0E04               	movlw	4
  4194  0042' 0100               	movlb	0	; () banked
  4195  0044' 1900'              	xorwf	_settings_select& (0+255),w,b
  4196  0046' A4D8               	btfss	status,2,c
  4197  0048' D004               	goto	l8577
  4198                           
  4199                           ; BSR set to: 0
  4200  004A' 0E00               	movlw	0
  4201  004C' 0100               	movlb	0	; () banked
  4202  004E' 6F00'              	movwf	_settings_select& (0+255),b
  4203  0050' D03A               	goto	l8591
  4204  0052'                    l8577:
  4205                           
  4206                           ; BSR set to: 0
  4207                           ;tasks.h: 534: else settings_select++;
  4208  0052' 0100               	movlb	0	; () banked
  4209  0054' 2B00'              	incf	_settings_select& (0+255),f,b
  4210                           
  4211                           ; BSR set to: 0
  4212                           ;tasks.h: 535: switch (settings_select) {
  4213  0056' D037               	goto	l8591
  4214  0058'                    l8579:
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;tasks.h: 537: display_char_puts("Settings", "<-   Select   ->");
  4218  0058' 0E00'              	movlw	low STR_96
  4219  005A' 6E1E'              	movwf	display_char_puts@str0,c
  4220  005C' 0E00'              	movlw	high STR_96
  4221  005E' 6E1F'              	movwf	display_char_puts@str0+1,c
  4222  0060' 0E00'              	movlw	low STR_97
  4223  0062' 6E20'              	movwf	display_char_puts@str1,c
  4224  0064' 0E00'              	movlw	high STR_97
  4225  0066' 6E21'              	movwf	display_char_puts@str1+1,c
  4226  0068' EC00' F000'        	call	_display_char_puts	;wreg free
  4227                           
  4228                           ;tasks.h: 538: break;
  4229  006C' D03D               	goto	l904
  4230  006E'                    l8581:
  4231                           
  4232                           ;tasks.h: 540: display_char_puts("Settings", "Adjust the Time");
  4233  006E' 0E00'              	movlw	low STR_96
  4234  0070' 6E1E'              	movwf	display_char_puts@str0,c
  4235  0072' 0E00'              	movlw	high STR_96
  4236  0074' 6E1F'              	movwf	display_char_puts@str0+1,c
  4237  0076' 0E00'              	movlw	low STR_101
  4238  0078' 6E20'              	movwf	display_char_puts@str1,c
  4239  007A' 0E00'              	movlw	high STR_101
  4240  007C' 6E21'              	movwf	display_char_puts@str1+1,c
  4241  007E' EC00' F000'        	call	_display_char_puts	;wreg free
  4242                           
  4243                           ;tasks.h: 541: break;
  4244  0082' D032               	goto	l904
  4245  0084'                    l8583:
  4246                           
  4247                           ;tasks.h: 543: display_char_puts("Settings", "Toggle Auto Stop");
  4248  0084' 0E00'              	movlw	low STR_96
  4249  0086' 6E1E'              	movwf	display_char_puts@str0,c
  4250  0088' 0E00'              	movlw	high STR_96
  4251  008A' 6E1F'              	movwf	display_char_puts@str0+1,c
  4252  008C' 0E00'              	movlw	low STR_103
  4253  008E' 6E20'              	movwf	display_char_puts@str1,c
  4254  0090' 0E00'              	movlw	high STR_103
  4255  0092' 6E21'              	movwf	display_char_puts@str1+1,c
  4256  0094' EC00' F000'        	call	_display_char_puts	;wreg free
  4257                           
  4258                           ;tasks.h: 544: break;
  4259  0098' D027               	goto	l904
  4260  009A'                    l8585:
  4261                           
  4262                           ;tasks.h: 546: display_char_puts("Settings", "Toggle LED Lamp");
  4263  009A' 0E00'              	movlw	low STR_96
  4264  009C' 6E1E'              	movwf	display_char_puts@str0,c
  4265  009E' 0E00'              	movlw	high STR_96
  4266  00A0' 6E1F'              	movwf	display_char_puts@str0+1,c
  4267  00A2' 0E00'              	movlw	low STR_105
  4268  00A4' 6E20'              	movwf	display_char_puts@str1,c
  4269  00A6' 0E00'              	movlw	high STR_105
  4270  00A8' 6E21'              	movwf	display_char_puts@str1+1,c
  4271  00AA' EC00' F000'        	call	_display_char_puts	;wreg free
  4272                           
  4273                           ;tasks.h: 547: break;
  4274  00AE' D01C               	goto	l904
  4275  00B0'                    l8587:
  4276                           
  4277                           ;tasks.h: 549: display_char_puts("Settings", "Integrat Reset");
  4278  00B0' 0E00'              	movlw	low STR_96
  4279  00B2' 6E1E'              	movwf	display_char_puts@str0,c
  4280  00B4' 0E00'              	movlw	high STR_96
  4281  00B6' 6E1F'              	movwf	display_char_puts@str0+1,c
  4282  00B8' 0E00'              	movlw	low STR_107
  4283  00BA' 6E20'              	movwf	display_char_puts@str1,c
  4284  00BC' 0E00'              	movlw	high STR_107
  4285  00BE' 6E21'              	movwf	display_char_puts@str1+1,c
  4286  00C0' EC00' F000'        	call	_display_char_puts	;wreg free
  4287                           
  4288                           ;tasks.h: 551: }
  4289                           
  4290                           ;tasks.h: 550: break;
  4291  00C4' D011               	goto	l904
  4292  00C6'                    l8591:
  4293  00C6' 0100               	movlb	0	; () banked
  4294  00C8' 5100'              	movf	_settings_select& (0+255),w,b
  4295                           
  4296                           ; Switch size 1, requested type "space"
  4297                           ; Number of cases is 5, Range of values is 0 to 4
  4298                           ; switch strategies available:
  4299                           ; Name         Instructions Cycles
  4300                           ; simple_byte           16     9 (average)
  4301                           ;	Chosen strategy is simple_byte
  4302  00CA' 0A00               	xorlw	0	; case 0
  4303  00CC' B4D8               	btfsc	status,2,c
  4304  00CE' D7C4               	goto	l8579
  4305  00D0' 0A01               	xorlw	1	; case 1
  4306  00D2' B4D8               	btfsc	status,2,c
  4307  00D4' D7CC               	goto	l8581
  4308  00D6' 0A03               	xorlw	3	; case 2
  4309  00D8' B4D8               	btfsc	status,2,c
  4310  00DA' D7D4               	goto	l8583
  4311  00DC' 0A01               	xorlw	1	; case 3
  4312  00DE' B4D8               	btfsc	status,2,c
  4313  00E0' D7DC               	goto	l8585
  4314  00E2' 0A07               	xorlw	7	; case 4
  4315  00E4' B4D8               	btfsc	status,2,c
  4316  00E6' D7E4               	goto	l8587
  4317  00E8'                    l904:
  4318                           
  4319                           ;tasks.h: 552: }
  4320                           ;tasks.h: 553: if (port[0].ctmu.flag.press) {
  4321  00E8' 0101               	movlb	1	; () banked
  4322  00EA' A100'              	btfss	(_port+2)& (0+255),0,b
  4323  00EC' D059               	goto	l914
  4324                           
  4325                           ; BSR set to: 1
  4326                           ;tasks.h: 554: port[0].ctmu.flags = 0;
  4327  00EE' 0E00               	movlw	0
  4328  00F0' 0101               	movlb	1	; () banked
  4329  00F2' 6F00'              	movwf	(_port+3)& (0+255),b
  4330  00F4' 0E00               	movlw	0
  4331  00F6' 6F00'              	movwf	(_port+2)& (0+255),b
  4332                           
  4333                           ;tasks.h: 555: if (settings_select == SELECT)settings_select = INTEGRATING_RESET;
  4334  00F8' 0100               	movlb	0	; () banked
  4335  00FA' 5100'              	movf	_settings_select& (0+255),w,b
  4336  00FC' 0100               	movlb	0	; () banked
  4337  00FE' A4D8               	btfss	status,2,c
  4338  0100' D004               	goto	l8597
  4339                           
  4340                           ; BSR set to: 0
  4341  0102' 0E04               	movlw	4
  4342  0104' 0100               	movlb	0	; () banked
  4343  0106' 6F00'              	movwf	_settings_select& (0+255),b
  4344  0108' D03A               	goto	l8611
  4345  010A'                    l8597:
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;tasks.h: 556: else settings_select--;
  4349  010A' 0100               	movlb	0	; () banked
  4350  010C' 0700'              	decf	_settings_select& (0+255),f,b
  4351                           
  4352                           ; BSR set to: 0
  4353                           ;tasks.h: 557: switch (settings_select) {
  4354  010E' D037               	goto	l8611
  4355  0110'                    l8599:
  4356                           
  4357                           ; BSR set to: 0
  4358                           ;tasks.h: 559: display_char_puts("Settings", "<-   Select   ->");
  4359  0110' 0E00'              	movlw	low STR_96
  4360  0112' 6E1E'              	movwf	display_char_puts@str0,c
  4361  0114' 0E00'              	movlw	high STR_96
  4362  0116' 6E1F'              	movwf	display_char_puts@str0+1,c
  4363  0118' 0E00'              	movlw	low STR_97
  4364  011A' 6E20'              	movwf	display_char_puts@str1,c
  4365  011C' 0E00'              	movlw	high STR_97
  4366  011E' 6E21'              	movwf	display_char_puts@str1+1,c
  4367  0120' EC00' F000'        	call	_display_char_puts	;wreg free
  4368                           
  4369                           ;tasks.h: 560: break;
  4370  0124' D03D               	goto	l914
  4371  0126'                    l8601:
  4372                           
  4373                           ;tasks.h: 562: display_char_puts("Settings", "Adjust the Time");
  4374  0126' 0E00'              	movlw	low STR_96
  4375  0128' 6E1E'              	movwf	display_char_puts@str0,c
  4376  012A' 0E00'              	movlw	high STR_96
  4377  012C' 6E1F'              	movwf	display_char_puts@str0+1,c
  4378  012E' 0E00'              	movlw	low STR_101
  4379  0130' 6E20'              	movwf	display_char_puts@str1,c
  4380  0132' 0E00'              	movlw	high STR_101
  4381  0134' 6E21'              	movwf	display_char_puts@str1+1,c
  4382  0136' EC00' F000'        	call	_display_char_puts	;wreg free
  4383                           
  4384                           ;tasks.h: 563: break;
  4385  013A' D032               	goto	l914
  4386  013C'                    l8603:
  4387                           
  4388                           ;tasks.h: 565: display_char_puts("Settings", "Toggle Auto Stop");
  4389  013C' 0E00'              	movlw	low STR_96
  4390  013E' 6E1E'              	movwf	display_char_puts@str0,c
  4391  0140' 0E00'              	movlw	high STR_96
  4392  0142' 6E1F'              	movwf	display_char_puts@str0+1,c
  4393  0144' 0E00'              	movlw	low STR_103
  4394  0146' 6E20'              	movwf	display_char_puts@str1,c
  4395  0148' 0E00'              	movlw	high STR_103
  4396  014A' 6E21'              	movwf	display_char_puts@str1+1,c
  4397  014C' EC00' F000'        	call	_display_char_puts	;wreg free
  4398                           
  4399                           ;tasks.h: 566: break;
  4400  0150' D027               	goto	l914
  4401  0152'                    l8605:
  4402                           
  4403                           ;tasks.h: 568: display_char_puts("Settings", "Toggle LED Lamp");
  4404  0152' 0E00'              	movlw	low STR_96
  4405  0154' 6E1E'              	movwf	display_char_puts@str0,c
  4406  0156' 0E00'              	movlw	high STR_96
  4407  0158' 6E1F'              	movwf	display_char_puts@str0+1,c
  4408  015A' 0E00'              	movlw	low STR_105
  4409  015C' 6E20'              	movwf	display_char_puts@str1,c
  4410  015E' 0E00'              	movlw	high STR_105
  4411  0160' 6E21'              	movwf	display_char_puts@str1+1,c
  4412  0162' EC00' F000'        	call	_display_char_puts	;wreg free
  4413                           
  4414                           ;tasks.h: 569: break;
  4415  0166' D01C               	goto	l914
  4416  0168'                    l8607:
  4417                           
  4418                           ;tasks.h: 571: display_char_puts("Settings", "Integrat Reset");
  4419  0168' 0E00'              	movlw	low STR_96
  4420  016A' 6E1E'              	movwf	display_char_puts@str0,c
  4421  016C' 0E00'              	movlw	high STR_96
  4422  016E' 6E1F'              	movwf	display_char_puts@str0+1,c
  4423  0170' 0E00'              	movlw	low STR_107
  4424  0172' 6E20'              	movwf	display_char_puts@str1,c
  4425  0174' 0E00'              	movlw	high STR_107
  4426  0176' 6E21'              	movwf	display_char_puts@str1+1,c
  4427  0178' EC00' F000'        	call	_display_char_puts	;wreg free
  4428                           
  4429                           ;tasks.h: 573: }
  4430                           
  4431                           ;tasks.h: 572: break;
  4432  017C' D011               	goto	l914
  4433  017E'                    l8611:
  4434  017E' 0100               	movlb	0	; () banked
  4435  0180' 5100'              	movf	_settings_select& (0+255),w,b
  4436                           
  4437                           ; Switch size 1, requested type "space"
  4438                           ; Number of cases is 5, Range of values is 0 to 4
  4439                           ; switch strategies available:
  4440                           ; Name         Instructions Cycles
  4441                           ; simple_byte           16     9 (average)
  4442                           ;	Chosen strategy is simple_byte
  4443  0182' 0A00               	xorlw	0	; case 0
  4444  0184' B4D8               	btfsc	status,2,c
  4445  0186' D7C4               	goto	l8599
  4446  0188' 0A01               	xorlw	1	; case 1
  4447  018A' B4D8               	btfsc	status,2,c
  4448  018C' D7CC               	goto	l8601
  4449  018E' 0A03               	xorlw	3	; case 2
  4450  0190' B4D8               	btfsc	status,2,c
  4451  0192' D7D4               	goto	l8603
  4452  0194' 0A01               	xorlw	1	; case 3
  4453  0196' B4D8               	btfsc	status,2,c
  4454  0198' D7DC               	goto	l8605
  4455  019A' 0A07               	xorlw	7	; case 4
  4456  019C' B4D8               	btfsc	status,2,c
  4457  019E' D7E4               	goto	l8607
  4458  01A0'                    l914:
  4459                           
  4460                           ;tasks.h: 574: }
  4461                           ;tasks.h: 575: if (port[1].ctmu.flag.press) {
  4462  01A0' 0101               	movlb	1	; () banked
  4463  01A2' A100'              	btfss	(_port+25)& (0+255),0,b
  4464  01A4' 0012               	return	
  4465                           
  4466                           ; BSR set to: 1
  4467                           ;tasks.h: 576: port[1].ctmu.flags = 0;
  4468  01A6' 0E00               	movlw	0
  4469  01A8' 0101               	movlb	1	; () banked
  4470  01AA' 6F00'              	movwf	(_port+26)& (0+255),b
  4471  01AC' 0E00               	movlw	0
  4472  01AE' 6F00'              	movwf	(_port+25)& (0+255),b
  4473                           
  4474                           ;tasks.h: 577: settings_state = 2;
  4475  01B0' 0E02               	movlw	2
  4476  01B2' 0100               	movlb	0	; () banked
  4477  01B4' 6F00'              	movwf	_settings_state& (0+255),b
  4478                           
  4479                           ; BSR set to: 0
  4480                           ;tasks.h: 578: }
  4481                           ;tasks.h: 579: break;
  4482  01B6' 0012               	return	
  4483  01B8'                    l8615:
  4484                           
  4485                           ; BSR set to: 0
  4486                           ;tasks.h: 585: display_now(PRINT_TIME);
  4487  01B8' 0E01               	movlw	1
  4488  01BA' EC00' F000'        	call	_display_now
  4489                           
  4490                           ;tasks.h: 586: RTCC_adjust_time_toggle();
  4491  01BE' EC00' F000'        	call	_RTCC_adjust_time_toggle	;wreg free
  4492                           
  4493                           ;tasks.h: 587: settings_state = 3;
  4494  01C2' 0E03               	movlw	3
  4495  01C4' 0100               	movlb	0	; () banked
  4496  01C6' 6F00'              	movwf	_settings_state& (0+255),b
  4497                           
  4498                           ;tasks.h: 588: break;
  4499  01C8' 0012               	return	
  4500  01CA'                    l8619:
  4501                           
  4502                           ; BSR set to: 0
  4503                           ;tasks.h: 590: for (uint8_t i = 0; i < 3; i++) {
  4504  01CA' 0E00               	movlw	0
  4505  01CC' 0100               	movlb	0	; () banked
  4506  01CE' 6F00'              	movwf	settings_loop@i& (0+255),b
  4507  01D0'                    l8621:
  4508                           
  4509                           ; BSR set to: 0
  4510  01D0' 0E02               	movlw	2
  4511  01D2' 0100               	movlb	0	; () banked
  4512  01D4' 6500'              	cpfsgt	settings_loop@i& (0+255),b
  4513  01D6' D001               	goto	l8625
  4514  01D8' D02D               	goto	l8637
  4515  01DA'                    l8625:
  4516                           
  4517                           ; BSR set to: 0
  4518                           ;tasks.h: 591: if (port[i].flag.auto_cut_ON)strcpy(strp, " ON  ");
  4519  01DA' 0100               	movlb	0	; () banked
  4520  01DC' 5100'              	movf	settings_loop@i& (0+255),w,b
  4521  01DE' 0D17               	mullw	23
  4522  01E0' 0E16               	movlw	22
  4523  01E2' 26F3               	addwf	prodl,f,c
  4524  01E4' 0E00               	movlw	0
  4525  01E6' 22F4               	addwfc	prodh,f,c
  4526  01E8' 0E00'              	movlw	low _port
  4527  01EA' 24F3               	addwf	prodl,w,c
  4528  01EC' 6ED9               	movwf	fsr2l,c
  4529  01EE' 0E00'              	movlw	high _port
  4530  01F0' 20F4               	addwfc	prodh,w,c
  4531  01F2' 6EDA               	movwf	fsr2h,c
  4532  01F4' 0101               	movlb	1	; () banked
  4533  01F6' A0DF               	btfss	indf2,0,c
  4534  01F8' D00B               	goto	l8629
  4535                           
  4536                           ; BSR set to: 1
  4537  01FA' C060' F01E'        	movff	settings_loop@strp,strcpy@to
  4538  01FE' C061' F01F'        	movff	settings_loop@strp+1,strcpy@to+1
  4539  0202' 0E00'              	movlw	low STR_118
  4540  0204' 6E20'              	movwf	strcpy@from,c
  4541  0206' 0E00'              	movlw	high STR_118
  4542  0208' 6E21'              	movwf	strcpy@from+1,c
  4543  020A' EC00' F000'        	call	_strcpy	;wreg free
  4544  020E' D00A               	goto	l8631
  4545  0210'                    l8629:
  4546                           
  4547                           ;tasks.h: 592: else strcpy(strp, " OFF ");
  4548  0210' C060' F01E'        	movff	settings_loop@strp,strcpy@to
  4549  0214' C061' F01F'        	movff	settings_loop@strp+1,strcpy@to+1
  4550  0218' 0E00'              	movlw	low STR_119
  4551  021A' 6E20'              	movwf	strcpy@from,c
  4552  021C' 0E00'              	movlw	high STR_119
  4553  021E' 6E21'              	movwf	strcpy@from+1,c
  4554  0220' EC00' F000'        	call	_strcpy	;wreg free
  4555  0224'                    l8631:
  4556                           
  4557                           ;tasks.h: 593: strp += 5;
  4558  0224' 0E05               	movlw	5
  4559  0226' 0100               	movlb	0	; () banked
  4560  0228' 2700'              	addwf	settings_loop@strp& (0+255),f,b
  4561  022A' 0E00               	movlw	0
  4562  022C' 2300'              	addwfc	(settings_loop@strp+1)& (0+255),f,b
  4563                           
  4564                           ; BSR set to: 0
  4565  022E' 0100               	movlb	0	; () banked
  4566  0230' 2B00'              	incf	settings_loop@i& (0+255),f,b
  4567  0232' D7CE               	goto	l8621
  4568  0234'                    l8637:
  4569                           
  4570                           ; BSR set to: 0
  4571                           ;tasks.h: 594: }
  4572                           ;tasks.h: 595: display_char_puts("Left Centr Right", str);
  4573  0234' 0E00'              	movlw	low STR_120
  4574  0236' 6E1E'              	movwf	display_char_puts@str0,c
  4575  0238' 0E00'              	movlw	high STR_120
  4576  023A' 6E1F'              	movwf	display_char_puts@str0+1,c
  4577  023C' 0E00'              	movlw	low settings_loop@str
  4578  023E' 6E20'              	movwf	display_char_puts@str1,c
  4579  0240' 0E00'              	movlw	high settings_loop@str
  4580  0242' 6E21'              	movwf	display_char_puts@str1+1,c
  4581  0244' EC00' F000'        	call	_display_char_puts	;wreg free
  4582                           
  4583                           ;tasks.h: 596: settings_state = 3;
  4584  0248' 0E03               	movlw	3
  4585  024A' 0100               	movlb	0	; () banked
  4586  024C' 6F00'              	movwf	_settings_state& (0+255),b
  4587                           
  4588                           ;tasks.h: 597: break;
  4589  024E' 0012               	return	
  4590  0250'                    l8641:
  4591                           
  4592                           ; BSR set to: 0
  4593                           ;tasks.h: 599: for (uint8_t i = 0; i < 3; i++) {
  4594  0250' 0E00               	movlw	0
  4595  0252' 0100               	movlb	0	; () banked
  4596  0254' 6F00'              	movwf	settings_loop@i_2499& (0+255),b
  4597  0256'                    l8643:
  4598                           
  4599                           ; BSR set to: 0
  4600  0256' 0E02               	movlw	2
  4601  0258' 0100               	movlb	0	; () banked
  4602  025A' 6500'              	cpfsgt	settings_loop@i_2499& (0+255),b
  4603  025C' D001               	goto	l8647
  4604  025E' D02D               	goto	l8659
  4605  0260'                    l8647:
  4606                           
  4607                           ; BSR set to: 0
  4608                           ;tasks.h: 600: if (port[i].flag.led_indicator_ON)strcpy(strp, " ON  ");
  4609  0260' 0100               	movlb	0	; () banked
  4610  0262' 5100'              	movf	settings_loop@i_2499& (0+255),w,b
  4611  0264' 0D17               	mullw	23
  4612  0266' 0E16               	movlw	22
  4613  0268' 26F3               	addwf	prodl,f,c
  4614  026A' 0E00               	movlw	0
  4615  026C' 22F4               	addwfc	prodh,f,c
  4616  026E' 0E00'              	movlw	low _port
  4617  0270' 24F3               	addwf	prodl,w,c
  4618  0272' 6ED9               	movwf	fsr2l,c
  4619  0274' 0E00'              	movlw	high _port
  4620  0276' 20F4               	addwfc	prodh,w,c
  4621  0278' 6EDA               	movwf	fsr2h,c
  4622  027A' 0101               	movlb	1	; () banked
  4623  027C' A2DF               	btfss	indf2,1,c
  4624  027E' D00B               	goto	l8651
  4625                           
  4626                           ; BSR set to: 1
  4627  0280' C060' F01E'        	movff	settings_loop@strp,strcpy@to
  4628  0284' C061' F01F'        	movff	settings_loop@strp+1,strcpy@to+1
  4629  0288' 0E00'              	movlw	low STR_118
  4630  028A' 6E20'              	movwf	strcpy@from,c
  4631  028C' 0E00'              	movlw	high STR_118
  4632  028E' 6E21'              	movwf	strcpy@from+1,c
  4633  0290' EC00' F000'        	call	_strcpy	;wreg free
  4634  0294' D00A               	goto	l8653
  4635  0296'                    l8651:
  4636                           
  4637                           ;tasks.h: 601: else strcpy(strp, " OFF ");
  4638  0296' C060' F01E'        	movff	settings_loop@strp,strcpy@to
  4639  029A' C061' F01F'        	movff	settings_loop@strp+1,strcpy@to+1
  4640  029E' 0E00'              	movlw	low STR_119
  4641  02A0' 6E20'              	movwf	strcpy@from,c
  4642  02A2' 0E00'              	movlw	high STR_119
  4643  02A4' 6E21'              	movwf	strcpy@from+1,c
  4644  02A6' EC00' F000'        	call	_strcpy	;wreg free
  4645  02AA'                    l8653:
  4646                           
  4647                           ;tasks.h: 602: strp += 5;
  4648  02AA' 0E05               	movlw	5
  4649  02AC' 0100               	movlb	0	; () banked
  4650  02AE' 2700'              	addwf	settings_loop@strp& (0+255),f,b
  4651  02B0' 0E00               	movlw	0
  4652  02B2' 2300'              	addwfc	(settings_loop@strp+1)& (0+255),f,b
  4653                           
  4654                           ; BSR set to: 0
  4655  02B4' 0100               	movlb	0	; () banked
  4656  02B6' 2B00'              	incf	settings_loop@i_2499& (0+255),f,b
  4657  02B8' D7CE               	goto	l8643
  4658  02BA'                    l8659:
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;tasks.h: 603: }
  4662                           ;tasks.h: 604: display_char_puts("Left Centr Right", str);
  4663  02BA' 0E00'              	movlw	low STR_120
  4664  02BC' 6E1E'              	movwf	display_char_puts@str0,c
  4665  02BE' 0E00'              	movlw	high STR_120
  4666  02C0' 6E1F'              	movwf	display_char_puts@str0+1,c
  4667  02C2' 0E00'              	movlw	low settings_loop@str
  4668  02C4' 6E20'              	movwf	display_char_puts@str1,c
  4669  02C6' 0E00'              	movlw	high settings_loop@str
  4670  02C8' 6E21'              	movwf	display_char_puts@str1+1,c
  4671  02CA' EC00' F000'        	call	_display_char_puts	;wreg free
  4672                           
  4673                           ;tasks.h: 605: settings_state = 3;
  4674  02CE' 0E03               	movlw	3
  4675  02D0' 0100               	movlb	0	; () banked
  4676  02D2' 6F00'              	movwf	_settings_state& (0+255),b
  4677                           
  4678                           ;tasks.h: 606: break;
  4679  02D4' 0012               	return	
  4680  02D6'                    l8663:
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;tasks.h: 608: for (uint8_t i = 0; i < 3; i++) {
  4684  02D6' 0E00               	movlw	0
  4685  02D8' 0100               	movlb	0	; () banked
  4686  02DA' 6F00'              	movwf	settings_loop@i_2503& (0+255),b
  4687  02DC'                    l8665:
  4688                           
  4689                           ; BSR set to: 0
  4690  02DC' 0E02               	movlw	2
  4691  02DE' 0100               	movlb	0	; () banked
  4692  02E0' 6500'              	cpfsgt	settings_loop@i_2503& (0+255),b
  4693  02E2' D001               	goto	l8669
  4694  02E4' D030               	goto	l8681
  4695  02E6'                    l8669:
  4696                           
  4697                           ; BSR set to: 0
  4698                           ;tasks.h: 609: if (port[i].integrated_current)strcpy(strp, " yet ");
  4699  02E6' 0100               	movlb	0	; () banked
  4700  02E8' 5100'              	movf	settings_loop@i_2503& (0+255),w,b
  4701  02EA' 0D17               	mullw	23
  4702  02EC' 0E0C               	movlw	12
  4703  02EE' 26F3               	addwf	prodl,f,c
  4704  02F0' 0E00               	movlw	0
  4705  02F2' 22F4               	addwfc	prodh,f,c
  4706  02F4' 0E00'              	movlw	low _port
  4707  02F6' 24F3               	addwf	prodl,w,c
  4708  02F8' 6ED9               	movwf	fsr2l,c
  4709  02FA' 0E00'              	movlw	high _port
  4710  02FC' 20F4               	addwfc	prodh,w,c
  4711  02FE' 6EDA               	movwf	fsr2h,c
  4712  0300' 50DE               	movf	postinc2,w,c
  4713  0302' 10DE               	iorwf	postinc2,w,c
  4714  0304' 10DE               	iorwf	postinc2,w,c
  4715  0306' 10DE               	iorwf	postinc2,w,c
  4716  0308' B4D8               	btfsc	status,2,c
  4717  030A' D00B               	goto	l8673
  4718                           
  4719                           ; BSR set to: 0
  4720  030C' C060' F01E'        	movff	settings_loop@strp,strcpy@to
  4721  0310' C061' F01F'        	movff	settings_loop@strp+1,strcpy@to+1
  4722  0314' 0E00'              	movlw	low STR_124
  4723  0316' 6E20'              	movwf	strcpy@from,c
  4724  0318' 0E00'              	movlw	high STR_124
  4725  031A' 6E21'              	movwf	strcpy@from+1,c
  4726  031C' EC00' F000'        	call	_strcpy	;wreg free
  4727  0320' D00A               	goto	l8675
  4728  0322'                    l8673:
  4729                           
  4730                           ;tasks.h: 610: else strcpy(strp, "  0  ");
  4731  0322' C060' F01E'        	movff	settings_loop@strp,strcpy@to
  4732  0326' C061' F01F'        	movff	settings_loop@strp+1,strcpy@to+1
  4733  032A' 0E00'              	movlw	low STR_125
  4734  032C' 6E20'              	movwf	strcpy@from,c
  4735  032E' 0E00'              	movlw	high STR_125
  4736  0330' 6E21'              	movwf	strcpy@from+1,c
  4737  0332' EC00' F000'        	call	_strcpy	;wreg free
  4738  0336'                    l8675:
  4739                           
  4740                           ;tasks.h: 611: strp += 5;
  4741  0336' 0E05               	movlw	5
  4742  0338' 0100               	movlb	0	; () banked
  4743  033A' 2700'              	addwf	settings_loop@strp& (0+255),f,b
  4744  033C' 0E00               	movlw	0
  4745  033E' 2300'              	addwfc	(settings_loop@strp+1)& (0+255),f,b
  4746                           
  4747                           ; BSR set to: 0
  4748  0340' 0100               	movlb	0	; () banked
  4749  0342' 2B00'              	incf	settings_loop@i_2503& (0+255),f,b
  4750  0344' D7CB               	goto	l8665
  4751  0346'                    l8681:
  4752                           
  4753                           ; BSR set to: 0
  4754                           ;tasks.h: 612: }
  4755                           ;tasks.h: 613: display_char_puts("Left Centr Right", str);
  4756  0346' 0E00'              	movlw	low STR_120
  4757  0348' 6E1E'              	movwf	display_char_puts@str0,c
  4758  034A' 0E00'              	movlw	high STR_120
  4759  034C' 6E1F'              	movwf	display_char_puts@str0+1,c
  4760  034E' 0E00'              	movlw	low settings_loop@str
  4761  0350' 6E20'              	movwf	display_char_puts@str1,c
  4762  0352' 0E00'              	movlw	high settings_loop@str
  4763  0354' 6E21'              	movwf	display_char_puts@str1+1,c
  4764  0356' EC00' F000'        	call	_display_char_puts	;wreg free
  4765                           
  4766                           ;tasks.h: 614: settings_state = 3;
  4767  035A' 0E03               	movlw	3
  4768  035C' 0100               	movlb	0	; () banked
  4769  035E' 6F00'              	movwf	_settings_state& (0+255),b
  4770                           
  4771                           ;tasks.h: 615: break;
  4772  0360' 0012               	return	
  4773  0362'                    l8685:
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;tasks.h: 617: settings_flag = 0;
  4777  0362' 0E00               	movlw	0
  4778  0364' 0100               	movlb	0	; () banked
  4779  0366' 6F00'              	movwf	_settings_flag& (0+255),b
  4780                           
  4781                           ;tasks.h: 618: }
  4782  0368' 0012               	return	
  4783  036A'                    l8687:
  4784                           
  4785                           ; BSR set to: 0
  4786  036A' 0100               	movlb	0	; () banked
  4787  036C' 5100'              	movf	_settings_select& (0+255),w,b
  4788                           
  4789                           ; Switch size 1, requested type "space"
  4790                           ; Number of cases is 5, Range of values is 0 to 4
  4791                           ; switch strategies available:
  4792                           ; Name         Instructions Cycles
  4793                           ; simple_byte           16     9 (average)
  4794                           ;	Chosen strategy is simple_byte
  4795  036E' 0A00               	xorlw	0	; case 0
  4796  0370' B4D8               	btfsc	status,2,c
  4797  0372' 0012               	return	
  4798  0374' 0A01               	xorlw	1	; case 1
  4799  0376' B4D8               	btfsc	status,2,c
  4800  0378' D71F               	goto	l8615
  4801  037A' 0A03               	xorlw	3	; case 2
  4802  037C' B4D8               	btfsc	status,2,c
  4803  037E' D725               	goto	l8619
  4804  0380' 0A01               	xorlw	1	; case 3
  4805  0382' B4D8               	btfsc	status,2,c
  4806  0384' D765               	goto	l8641
  4807  0386' 0A07               	xorlw	7	; case 4
  4808  0388' B4D8               	btfsc	status,2,c
  4809  038A' D7A5               	goto	l8663
  4810  038C' D7EA               	goto	l8685
  4811  038E'                    l950:
  4812                           
  4813                           ; BSR set to: 0
  4814                           ;tasks.h: 625: if (port[1].ctmu.flag.press) {
  4815  038E' 0101               	movlb	1	; () banked
  4816  0390' A100'              	btfss	(_port+25)& (0+255),0,b
  4817  0392' D004               	goto	l8693
  4818                           
  4819                           ; BSR set to: 1
  4820                           ;tasks.h: 626: port[1].ctmu.flag.press = 0;
  4821  0394' 0101               	movlb	1	; () banked
  4822  0396' 9100'              	bcf	(_port+25)& (0+255),0,b
  4823                           
  4824                           ; BSR set to: 1
  4825                           ;tasks.h: 627: RTCC_adjust_time_cursor();
  4826  0398' EC00' F000'        	call	_RTCC_adjust_time_cursor	;wreg free
  4827  039C'                    l8693:
  4828                           
  4829                           ;tasks.h: 628: }
  4830                           ;tasks.h: 629: if (port[2].ctmu.flag.press) {
  4831  039C' 0101               	movlb	1	; () banked
  4832  039E' A100'              	btfss	(_port+48)& (0+255),0,b
  4833  03A0' D010               	goto	l8699
  4834                           
  4835                           ; BSR set to: 1
  4836                           ;tasks.h: 630: port[2].ctmu.flag.press = 0;
  4837  03A2' 0101               	movlb	1	; () banked
  4838  03A4' 9100'              	bcf	(_port+48)& (0+255),0,b
  4839                           
  4840                           ; BSR set to: 1
  4841                           ;tasks.h: 631: RTCC_adjust_time_inc(&caltime_now, &epoch_now);
  4842  03A6' 0E00'              	movlw	low _caltime_now
  4843  03A8' 0100               	movlb	0	; () banked
  4844  03AA' 6F00'              	movwf	RTCC_adjust_time_inc@ct& (0+255),b
  4845  03AC' 0E00'              	movlw	high _caltime_now
  4846  03AE' 0100               	movlb	0	; () banked
  4847  03B0' 6F00'              	movwf	(RTCC_adjust_time_inc@ct+1)& (0+255),b
  4848  03B2' 0E00'              	movlw	low _epoch_now
  4849  03B4' 0100               	movlb	0	; () banked
  4850  03B6' 6F00'              	movwf	RTCC_adjust_time_inc@ep& (0+255),b
  4851  03B8' 0E00'              	movlw	high _epoch_now
  4852  03BA' 0100               	movlb	0	; () banked
  4853  03BC' 6F00'              	movwf	(RTCC_adjust_time_inc@ep+1)& (0+255),b
  4854  03BE' EC00' F000'        	call	_RTCC_adjust_time_inc	;wreg free
  4855  03C2'                    l8699:
  4856                           
  4857                           ;tasks.h: 632: }
  4858                           ;tasks.h: 633: if (port[0].ctmu.flag.press) {
  4859  03C2' 0101               	movlb	1	; () banked
  4860  03C4' A100'              	btfss	(_port+2)& (0+255),0,b
  4861  03C6' 0012               	return	
  4862                           
  4863                           ; BSR set to: 1
  4864                           ;tasks.h: 634: port[0].ctmu.flag.press = 0;
  4865  03C8' 0101               	movlb	1	; () banked
  4866  03CA' 9100'              	bcf	(_port+2)& (0+255),0,b
  4867                           
  4868                           ; BSR set to: 1
  4869                           ;tasks.h: 635: RTCC_adjust_time_dec(&caltime_now, &epoch_now);
  4870  03CC' 0E00'              	movlw	low _caltime_now
  4871  03CE' 0100               	movlb	0	; () banked
  4872  03D0' 6F00'              	movwf	RTCC_adjust_time_dec@ct& (0+255),b
  4873  03D2' 0E00'              	movlw	high _caltime_now
  4874  03D4' 0100               	movlb	0	; () banked
  4875  03D6' 6F00'              	movwf	(RTCC_adjust_time_dec@ct+1)& (0+255),b
  4876  03D8' 0E00'              	movlw	low _epoch_now
  4877  03DA' 0100               	movlb	0	; () banked
  4878  03DC' 6F00'              	movwf	RTCC_adjust_time_dec@ep& (0+255),b
  4879  03DE' 0E00'              	movlw	high _epoch_now
  4880  03E0' 0100               	movlb	0	; () banked
  4881  03E2' 6F00'              	movwf	(RTCC_adjust_time_dec@ep+1)& (0+255),b
  4882  03E4' EC00' F000'        	call	_RTCC_adjust_time_dec	;wreg free
  4883                           
  4884                           ;tasks.h: 636: }
  4885                           ;tasks.h: 637: break;
  4886  03E8' 0012               	return	
  4887  03EA'                    l8705:
  4888                           
  4889                           ;tasks.h: 639: for (uint8_t j = 0; j < 3; j++) {
  4890  03EA' 0E00               	movlw	0
  4891  03EC' 0100               	movlb	0	; () banked
  4892  03EE' 6F00'              	movwf	settings_loop@j& (0+255),b
  4893  03F0'                    l8707:
  4894                           
  4895                           ; BSR set to: 0
  4896  03F0' 0E02               	movlw	2
  4897  03F2' 0100               	movlb	0	; () banked
  4898  03F4' 6500'              	cpfsgt	settings_loop@j& (0+255),b
  4899  03F6' D001               	goto	l8711
  4900  03F8' 0012               	return	
  4901  03FA'                    l8711:
  4902                           
  4903                           ; BSR set to: 0
  4904                           ;tasks.h: 640: if (port[j].ctmu.flag.press) {
  4905  03FA' 0100               	movlb	0	; () banked
  4906  03FC' 5100'              	movf	settings_loop@j& (0+255),w,b
  4907  03FE' 0D17               	mullw	23
  4908  0400' 0E02               	movlw	2
  4909  0402' 26F3               	addwf	prodl,f,c
  4910  0404' 0E00               	movlw	0
  4911  0406' 22F4               	addwfc	prodh,f,c
  4912  0408' 0E00'              	movlw	low _port
  4913  040A' 24F3               	addwf	prodl,w,c
  4914  040C' 6ED9               	movwf	fsr2l,c
  4915  040E' 0E00'              	movlw	high _port
  4916  0410' 20F4               	addwfc	prodh,w,c
  4917  0412' 6EDA               	movwf	fsr2h,c
  4918  0414' 0101               	movlb	1	; () banked
  4919  0416' A0DF               	btfss	indf2,0,c
  4920  0418' D07B               	goto	l8735
  4921                           
  4922                           ; BSR set to: 1
  4923                           ;tasks.h: 641: port[j].ctmu.flags = 0;
  4924  041A' 0100               	movlb	0	; () banked
  4925  041C' 5100'              	movf	settings_loop@j& (0+255),w,b
  4926  041E' 0D17               	mullw	23
  4927  0420' 0E02               	movlw	2
  4928  0422' 26F3               	addwf	prodl,f,c
  4929  0424' 0E00               	movlw	0
  4930  0426' 22F4               	addwfc	prodh,f,c
  4931  0428' 0E00'              	movlw	low _port
  4932  042A' 24F3               	addwf	prodl,w,c
  4933  042C' 6ED9               	movwf	fsr2l,c
  4934  042E' 0E00'              	movlw	high _port
  4935  0430' 20F4               	addwfc	prodh,w,c
  4936  0432' 6EDA               	movwf	fsr2h,c
  4937  0434' 0E00               	movlw	0
  4938  0436' 6EDE               	movwf	postinc2,c
  4939  0438' 0E00               	movlw	0
  4940  043A' 6EDD               	movwf	postdec2,c
  4941                           
  4942                           ;tasks.h: 642: port[j].flag.auto_cut_ON = !port[j].flag.auto_cut_ON;
  4943  043C' 0100               	movlb	0	; () banked
  4944  043E' 5100'              	movf	settings_loop@j& (0+255),w,b
  4945  0440' 0D17               	mullw	23
  4946  0442' 0E16               	movlw	22
  4947  0444' 26F3               	addwf	prodl,f,c
  4948  0446' 0E00               	movlw	0
  4949  0448' 22F4               	addwfc	prodh,f,c
  4950  044A' 0E00'              	movlw	low _port
  4951  044C' 24F3               	addwf	prodl,w,c
  4952  044E' 6ED9               	movwf	fsr2l,c
  4953  0450' 0E00'              	movlw	high _port
  4954  0452' 20F4               	addwfc	prodh,w,c
  4955  0454' 6EDA               	movwf	fsr2h,c
  4956  0456' 0101               	movlb	1	; () banked
  4957  0458' B0DF               	btfsc	indf2,0,c
  4958  045A' D004               	goto	u11000
  4959  045C' 0100               	movlb	0	; () banked
  4960  045E' 6B00'              	clrf	??_settings_loop& (0+255),b
  4961  0460' 2B00'              	incf	??_settings_loop& (0+255),f,b
  4962  0462' D002               	goto	u11018
  4963  0464'                    u11000:
  4964  0464' 0100               	movlb	0	; () banked
  4965  0466' 6B00'              	clrf	??_settings_loop& (0+255),b
  4966  0468'                    u11018:
  4967  0468' 0100               	movlb	0	; () banked
  4968  046A' 5100'              	movf	settings_loop@j& (0+255),w,b
  4969  046C' 0D17               	mullw	23
  4970  046E' 0E16               	movlw	22
  4971  0470' 26F3               	addwf	prodl,f,c
  4972  0472' 0E00               	movlw	0
  4973  0474' 22F4               	addwfc	prodh,f,c
  4974  0476' 0E00'              	movlw	low _port
  4975  0478' 24F3               	addwf	prodl,w,c
  4976  047A' 6ED9               	movwf	fsr2l,c
  4977  047C' 0E00'              	movlw	high _port
  4978  047E' 20F4               	addwfc	prodh,w,c
  4979  0480' 6EDA               	movwf	fsr2h,c
  4980  0482' 0101               	movlb	1	; () banked
  4981  0484' 50DF               	movf	223,w,c
  4982  0486' 0100               	movlb	0	; () banked
  4983  0488' 1900'              	xorwf	??_settings_loop& (0+255),w,b
  4984  048A' 0BFE               	andlw	-2
  4985  048C' 1900'              	xorwf	??_settings_loop& (0+255),w,b
  4986  048E' 0101               	movlb	1	; () banked
  4987  0490' 6EDF               	movwf	223,c
  4988                           
  4989                           ; BSR set to: 1
  4990                           ;tasks.h: 643: for (uint8_t i = 0; i < 3; i++) {
  4991  0492' 0E00               	movlw	0
  4992  0494' 0100               	movlb	0	; () banked
  4993  0496' 6F00'              	movwf	settings_loop@i_2508& (0+255),b
  4994  0498'                    l8717:
  4995                           
  4996                           ; BSR set to: 0
  4997  0498' 0E02               	movlw	2
  4998  049A' 0100               	movlb	0	; () banked
  4999  049C' 6500'              	cpfsgt	settings_loop@i_2508& (0+255),b
  5000  049E' D001               	goto	l8721
  5001  04A0' D02D               	goto	l8733
  5002  04A2'                    l8721:
  5003                           
  5004                           ; BSR set to: 0
  5005                           ;tasks.h: 644: if (port[i].flag.auto_cut_ON)strcpy(strp, " ON  ");
  5006  04A2' 0100               	movlb	0	; () banked
  5007  04A4' 5100'              	movf	settings_loop@i_2508& (0+255),w,b
  5008  04A6' 0D17               	mullw	23
  5009  04A8' 0E16               	movlw	22
  5010  04AA' 26F3               	addwf	prodl,f,c
  5011  04AC' 0E00               	movlw	0
  5012  04AE' 22F4               	addwfc	prodh,f,c
  5013  04B0' 0E00'              	movlw	low _port
  5014  04B2' 24F3               	addwf	prodl,w,c
  5015  04B4' 6ED9               	movwf	fsr2l,c
  5016  04B6' 0E00'              	movlw	high _port
  5017  04B8' 20F4               	addwfc	prodh,w,c
  5018  04BA' 6EDA               	movwf	fsr2h,c
  5019  04BC' 0101               	movlb	1	; () banked
  5020  04BE' A0DF               	btfss	indf2,0,c
  5021  04C0' D00B               	goto	l8725
  5022                           
  5023                           ; BSR set to: 1
  5024  04C2' C060' F01E'        	movff	settings_loop@strp,strcpy@to
  5025  04C6' C061' F01F'        	movff	settings_loop@strp+1,strcpy@to+1
  5026  04CA' 0E00'              	movlw	low STR_118
  5027  04CC' 6E20'              	movwf	strcpy@from,c
  5028  04CE' 0E00'              	movlw	high STR_118
  5029  04D0' 6E21'              	movwf	strcpy@from+1,c
  5030  04D2' EC00' F000'        	call	_strcpy	;wreg free
  5031  04D6' D00A               	goto	l8727
  5032  04D8'                    l8725:
  5033                           
  5034                           ;tasks.h: 645: else strcpy(strp, " OFF ");
  5035  04D8' C060' F01E'        	movff	settings_loop@strp,strcpy@to
  5036  04DC' C061' F01F'        	movff	settings_loop@strp+1,strcpy@to+1
  5037  04E0' 0E00'              	movlw	low STR_119
  5038  04E2' 6E20'              	movwf	strcpy@from,c
  5039  04E4' 0E00'              	movlw	high STR_119
  5040  04E6' 6E21'              	movwf	strcpy@from+1,c
  5041  04E8' EC00' F000'        	call	_strcpy	;wreg free
  5042  04EC'                    l8727:
  5043                           
  5044                           ;tasks.h: 646: strp += 5;
  5045  04EC' 0E05               	movlw	5
  5046  04EE' 0100               	movlb	0	; () banked
  5047  04F0' 2700'              	addwf	settings_loop@strp& (0+255),f,b
  5048  04F2' 0E00               	movlw	0
  5049  04F4' 2300'              	addwfc	(settings_loop@strp+1)& (0+255),f,b
  5050                           
  5051                           ; BSR set to: 0
  5052  04F6' 0100               	movlb	0	; () banked
  5053  04F8' 2B00'              	incf	settings_loop@i_2508& (0+255),f,b
  5054  04FA' D7CE               	goto	l8717
  5055  04FC'                    l8733:
  5056                           
  5057                           ; BSR set to: 0
  5058                           ;tasks.h: 647: }
  5059                           ;tasks.h: 648: display_char_puts("Left Centr Right", str);
  5060  04FC' 0E00'              	movlw	low STR_120
  5061  04FE' 6E1E'              	movwf	display_char_puts@str0,c
  5062  0500' 0E00'              	movlw	high STR_120
  5063  0502' 6E1F'              	movwf	display_char_puts@str0+1,c
  5064  0504' 0E00'              	movlw	low settings_loop@str
  5065  0506' 6E20'              	movwf	display_char_puts@str1,c
  5066  0508' 0E00'              	movlw	high settings_loop@str
  5067  050A' 6E21'              	movwf	display_char_puts@str1+1,c
  5068  050C' EC00' F000'        	call	_display_char_puts	;wreg free
  5069  0510'                    l8735:
  5070  0510' 0100               	movlb	0	; () banked
  5071  0512' 2B00'              	incf	settings_loop@j& (0+255),f,b
  5072  0514' D76D               	goto	l8707
  5073  0516'                    l8739:
  5074                           
  5075                           ; BSR set to: 0
  5076                           ;tasks.h: 653: for (uint8_t j = 0; j < 3; j++) {
  5077  0516' 0E00               	movlw	0
  5078  0518' 0100               	movlb	0	; () banked
  5079  051A' 6F00'              	movwf	settings_loop@j_2512& (0+255),b
  5080  051C'                    l8741:
  5081                           
  5082                           ; BSR set to: 0
  5083  051C' 0E02               	movlw	2
  5084  051E' 0100               	movlb	0	; () banked
  5085  0520' 6500'              	cpfsgt	settings_loop@j_2512& (0+255),b
  5086  0522' D001               	goto	l8745
  5087  0524' 0012               	return	
  5088  0526'                    l8745:
  5089                           
  5090                           ; BSR set to: 0
  5091                           ;tasks.h: 654: if (port[j].ctmu.flag.press) {
  5092  0526' 0100               	movlb	0	; () banked
  5093  0528' 5100'              	movf	settings_loop@j_2512& (0+255),w,b
  5094  052A' 0D17               	mullw	23
  5095  052C' 0E02               	movlw	2
  5096  052E' 26F3               	addwf	prodl,f,c
  5097  0530' 0E00               	movlw	0
  5098  0532' 22F4               	addwfc	prodh,f,c
  5099  0534' 0E00'              	movlw	low _port
  5100  0536' 24F3               	addwf	prodl,w,c
  5101  0538' 6ED9               	movwf	fsr2l,c
  5102  053A' 0E00'              	movlw	high _port
  5103  053C' 20F4               	addwfc	prodh,w,c
  5104  053E' 6EDA               	movwf	fsr2h,c
  5105  0540' 0101               	movlb	1	; () banked
  5106  0542' A0DF               	btfss	indf2,0,c
  5107  0544' D07D               	goto	l8769
  5108                           
  5109                           ; BSR set to: 1
  5110                           ;tasks.h: 655: port[j].ctmu.flags = 0;
  5111  0546' 0100               	movlb	0	; () banked
  5112  0548' 5100'              	movf	settings_loop@j_2512& (0+255),w,b
  5113  054A' 0D17               	mullw	23
  5114  054C' 0E02               	movlw	2
  5115  054E' 26F3               	addwf	prodl,f,c
  5116  0550' 0E00               	movlw	0
  5117  0552' 22F4               	addwfc	prodh,f,c
  5118  0554' 0E00'              	movlw	low _port
  5119  0556' 24F3               	addwf	prodl,w,c
  5120  0558' 6ED9               	movwf	fsr2l,c
  5121  055A' 0E00'              	movlw	high _port
  5122  055C' 20F4               	addwfc	prodh,w,c
  5123  055E' 6EDA               	movwf	fsr2h,c
  5124  0560' 0E00               	movlw	0
  5125  0562' 6EDE               	movwf	postinc2,c
  5126  0564' 0E00               	movlw	0
  5127  0566' 6EDD               	movwf	postdec2,c
  5128                           
  5129                           ;tasks.h: 656: port[j].flag.led_indicator_ON = !port[j].flag.led_indicator_ON;
  5130  0568' 0100               	movlb	0	; () banked
  5131  056A' 5100'              	movf	settings_loop@j_2512& (0+255),w,b
  5132  056C' 0D17               	mullw	23
  5133  056E' 0E16               	movlw	22
  5134  0570' 26F3               	addwf	prodl,f,c
  5135  0572' 0E00               	movlw	0
  5136  0574' 22F4               	addwfc	prodh,f,c
  5137  0576' 0E00'              	movlw	low _port
  5138  0578' 24F3               	addwf	prodl,w,c
  5139  057A' 6ED9               	movwf	fsr2l,c
  5140  057C' 0E00'              	movlw	high _port
  5141  057E' 20F4               	addwfc	prodh,w,c
  5142  0580' 6EDA               	movwf	fsr2h,c
  5143  0582' 0101               	movlb	1	; () banked
  5144  0584' B2DF               	btfsc	indf2,1,c
  5145  0586' D004               	goto	u11080
  5146  0588' 0100               	movlb	0	; () banked
  5147  058A' 6B00'              	clrf	??_settings_loop& (0+255),b
  5148  058C' 2B00'              	incf	??_settings_loop& (0+255),f,b
  5149  058E' D002               	goto	u11098
  5150  0590'                    u11080:
  5151  0590' 0100               	movlb	0	; () banked
  5152  0592' 6B00'              	clrf	??_settings_loop& (0+255),b
  5153  0594'                    u11098:
  5154  0594' 0100               	movlb	0	; () banked
  5155  0596' 5100'              	movf	settings_loop@j_2512& (0+255),w,b
  5156  0598' 0D17               	mullw	23
  5157  059A' 0E16               	movlw	22
  5158  059C' 26F3               	addwf	prodl,f,c
  5159  059E' 0E00               	movlw	0
  5160  05A0' 22F4               	addwfc	prodh,f,c
  5161  05A2' 0E00'              	movlw	low _port
  5162  05A4' 24F3               	addwf	prodl,w,c
  5163  05A6' 6ED9               	movwf	fsr2l,c
  5164  05A8' 0E00'              	movlw	high _port
  5165  05AA' 20F4               	addwfc	prodh,w,c
  5166  05AC' 6EDA               	movwf	fsr2h,c
  5167  05AE' 0100               	movlb	0	; () banked
  5168  05B0' 4700'              	rlncf	??_settings_loop& (0+255),f,b
  5169  05B2' 0101               	movlb	1	; () banked
  5170  05B4' 50DF               	movf	223,w,c
  5171  05B6' 0100               	movlb	0	; () banked
  5172  05B8' 1900'              	xorwf	??_settings_loop& (0+255),w,b
  5173  05BA' 0BFD               	andlw	-3
  5174  05BC' 1900'              	xorwf	??_settings_loop& (0+255),w,b
  5175  05BE' 0101               	movlb	1	; () banked
  5176  05C0' 6EDF               	movwf	223,c
  5177                           
  5178                           ; BSR set to: 1
  5179                           ;tasks.h: 657: for (uint8_t i = 0; i < 3; i++) {
  5180  05C2' 0E00               	movlw	0
  5181  05C4' 0100               	movlb	0	; () banked
  5182  05C6' 6F00'              	movwf	settings_loop@i_2513& (0+255),b
  5183  05C8'                    l8751:
  5184                           
  5185                           ; BSR set to: 0
  5186  05C8' 0E02               	movlw	2
  5187  05CA' 0100               	movlb	0	; () banked
  5188  05CC' 6500'              	cpfsgt	settings_loop@i_2513& (0+255),b
  5189  05CE' D001               	goto	l8755
  5190  05D0' D02D               	goto	l8767
  5191  05D2'                    l8755:
  5192                           
  5193                           ; BSR set to: 0
  5194                           ;tasks.h: 658: if (port[i].flag.led_indicator_ON)strcpy(strp, " ON  ");
  5195  05D2' 0100               	movlb	0	; () banked
  5196  05D4' 5100'              	movf	settings_loop@i_2513& (0+255),w,b
  5197  05D6' 0D17               	mullw	23
  5198  05D8' 0E16               	movlw	22
  5199  05DA' 26F3               	addwf	prodl,f,c
  5200  05DC' 0E00               	movlw	0
  5201  05DE' 22F4               	addwfc	prodh,f,c
  5202  05E0' 0E00'              	movlw	low _port
  5203  05E2' 24F3               	addwf	prodl,w,c
  5204  05E4' 6ED9               	movwf	fsr2l,c
  5205  05E6' 0E00'              	movlw	high _port
  5206  05E8' 20F4               	addwfc	prodh,w,c
  5207  05EA' 6EDA               	movwf	fsr2h,c
  5208  05EC' 0101               	movlb	1	; () banked
  5209  05EE' A2DF               	btfss	indf2,1,c
  5210  05F0' D00B               	goto	l8759
  5211                           
  5212                           ; BSR set to: 1
  5213  05F2' C060' F01E'        	movff	settings_loop@strp,strcpy@to
  5214  05F6' C061' F01F'        	movff	settings_loop@strp+1,strcpy@to+1
  5215  05FA' 0E00'              	movlw	low STR_118
  5216  05FC' 6E20'              	movwf	strcpy@from,c
  5217  05FE' 0E00'              	movlw	high STR_118
  5218  0600' 6E21'              	movwf	strcpy@from+1,c
  5219  0602' EC00' F000'        	call	_strcpy	;wreg free
  5220  0606' D00A               	goto	l8761
  5221  0608'                    l8759:
  5222                           
  5223                           ;tasks.h: 659: else strcpy(strp, " OFF ");
  5224  0608' C060' F01E'        	movff	settings_loop@strp,strcpy@to
  5225  060C' C061' F01F'        	movff	settings_loop@strp+1,strcpy@to+1
  5226  0610' 0E00'              	movlw	low STR_119
  5227  0612' 6E20'              	movwf	strcpy@from,c
  5228  0614' 0E00'              	movlw	high STR_119
  5229  0616' 6E21'              	movwf	strcpy@from+1,c
  5230  0618' EC00' F000'        	call	_strcpy	;wreg free
  5231  061C'                    l8761:
  5232                           
  5233                           ;tasks.h: 660: strp += 5;
  5234  061C' 0E05               	movlw	5
  5235  061E' 0100               	movlb	0	; () banked
  5236  0620' 2700'              	addwf	settings_loop@strp& (0+255),f,b
  5237  0622' 0E00               	movlw	0
  5238  0624' 2300'              	addwfc	(settings_loop@strp+1)& (0+255),f,b
  5239                           
  5240                           ; BSR set to: 0
  5241  0626' 0100               	movlb	0	; () banked
  5242  0628' 2B00'              	incf	settings_loop@i_2513& (0+255),f,b
  5243  062A' D7CE               	goto	l8751
  5244  062C'                    l8767:
  5245                           
  5246                           ; BSR set to: 0
  5247                           ;tasks.h: 661: }
  5248                           ;tasks.h: 662: display_char_puts("Left Centr Right", str);
  5249  062C' 0E00'              	movlw	low STR_120
  5250  062E' 6E1E'              	movwf	display_char_puts@str0,c
  5251  0630' 0E00'              	movlw	high STR_120
  5252  0632' 6E1F'              	movwf	display_char_puts@str0+1,c
  5253  0634' 0E00'              	movlw	low settings_loop@str
  5254  0636' 6E20'              	movwf	display_char_puts@str1,c
  5255  0638' 0E00'              	movlw	high settings_loop@str
  5256  063A' 6E21'              	movwf	display_char_puts@str1+1,c
  5257  063C' EC00' F000'        	call	_display_char_puts	;wreg free
  5258  0640'                    l8769:
  5259  0640' 0100               	movlb	0	; () banked
  5260  0642' 2B00'              	incf	settings_loop@j_2512& (0+255),f,b
  5261  0644' D76B               	goto	l8741
  5262  0646'                    l8773:
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;tasks.h: 667: for (uint8_t j = 0; j < 3; j++) {
  5266  0646' 0E00               	movlw	0
  5267  0648' 0100               	movlb	0	; () banked
  5268  064A' 6F00'              	movwf	settings_loop@j_2517& (0+255),b
  5269  064C'                    l8775:
  5270                           
  5271                           ; BSR set to: 0
  5272  064C' 0E02               	movlw	2
  5273  064E' 0100               	movlb	0	; () banked
  5274  0650' 6500'              	cpfsgt	settings_loop@j_2517& (0+255),b
  5275  0652' D001               	goto	l8779
  5276  0654' 0012               	return	
  5277  0656'                    l8779:
  5278                           
  5279                           ; BSR set to: 0
  5280                           ;tasks.h: 668: if (port[j].ctmu.flag.press) {
  5281  0656' 0100               	movlb	0	; () banked
  5282  0658' 5100'              	movf	settings_loop@j_2517& (0+255),w,b
  5283  065A' 0D17               	mullw	23
  5284  065C' 0E02               	movlw	2
  5285  065E' 26F3               	addwf	prodl,f,c
  5286  0660' 0E00               	movlw	0
  5287  0662' 22F4               	addwfc	prodh,f,c
  5288  0664' 0E00'              	movlw	low _port
  5289  0666' 24F3               	addwf	prodl,w,c
  5290  0668' 6ED9               	movwf	fsr2l,c
  5291  066A' 0E00'              	movlw	high _port
  5292  066C' 20F4               	addwfc	prodh,w,c
  5293  066E' 6EDA               	movwf	fsr2h,c
  5294  0670' 0101               	movlb	1	; () banked
  5295  0672' A0DF               	btfss	indf2,0,c
  5296  0674' D086               	goto	l8803
  5297                           
  5298                           ; BSR set to: 1
  5299                           ;tasks.h: 669: port[j].ctmu.flags = 0;
  5300  0676' 0100               	movlb	0	; () banked
  5301  0678' 5100'              	movf	settings_loop@j_2517& (0+255),w,b
  5302  067A' 0D17               	mullw	23
  5303  067C' 0E02               	movlw	2
  5304  067E' 26F3               	addwf	prodl,f,c
  5305  0680' 0E00               	movlw	0
  5306  0682' 22F4               	addwfc	prodh,f,c
  5307  0684' 0E00'              	movlw	low _port
  5308  0686' 24F3               	addwf	prodl,w,c
  5309  0688' 6ED9               	movwf	fsr2l,c
  5310  068A' 0E00'              	movlw	high _port
  5311  068C' 20F4               	addwfc	prodh,w,c
  5312  068E' 6EDA               	movwf	fsr2h,c
  5313  0690' 0E00               	movlw	0
  5314  0692' 6EDE               	movwf	postinc2,c
  5315  0694' 0E00               	movlw	0
  5316  0696' 6EDD               	movwf	postdec2,c
  5317                           
  5318                           ;tasks.h: 670: port[j].integrated_current_sec = 0;
  5319  0698' 0100               	movlb	0	; () banked
  5320  069A' 5100'              	movf	settings_loop@j_2517& (0+255),w,b
  5321  069C' 0D17               	mullw	23
  5322  069E' 0E08               	movlw	8
  5323  06A0' 26F3               	addwf	prodl,f,c
  5324  06A2' 0E00               	movlw	0
  5325  06A4' 22F4               	addwfc	prodh,f,c
  5326  06A6' 0E00'              	movlw	low _port
  5327  06A8' 24F3               	addwf	prodl,w,c
  5328  06AA' 6ED9               	movwf	fsr2l,c
  5329  06AC' 0E00'              	movlw	high _port
  5330  06AE' 20F4               	addwfc	prodh,w,c
  5331  06B0' 6EDA               	movwf	fsr2h,c
  5332  06B2' 6ADE               	clrf	postinc2,c
  5333  06B4' 6ADE               	clrf	postinc2,c
  5334  06B6' 6ADE               	clrf	postinc2,c
  5335  06B8' 6ADD               	clrf	postdec2,c
  5336                           
  5337                           ;tasks.h: 671: port[j].integrated_current = 0;
  5338  06BA' 0100               	movlb	0	; () banked
  5339  06BC' 5100'              	movf	settings_loop@j_2517& (0+255),w,b
  5340  06BE' 0D17               	mullw	23
  5341  06C0' 0E0C               	movlw	12
  5342  06C2' 26F3               	addwf	prodl,f,c
  5343  06C4' 0E00               	movlw	0
  5344  06C6' 22F4               	addwfc	prodh,f,c
  5345  06C8' 0E00'              	movlw	low _port
  5346  06CA' 24F3               	addwf	prodl,w,c
  5347  06CC' 6ED9               	movwf	fsr2l,c
  5348  06CE' 0E00'              	movlw	high _port
  5349  06D0' 20F4               	addwfc	prodh,w,c
  5350  06D2' 6EDA               	movwf	fsr2h,c
  5351  06D4' 6ADE               	clrf	postinc2,c
  5352  06D6' 6ADE               	clrf	postinc2,c
  5353  06D8' 6ADE               	clrf	postinc2,c
  5354  06DA' 6ADD               	clrf	postdec2,c
  5355                           
  5356                           ;tasks.h: 672: port[j].integrated_time = 0;
  5357  06DC' 0100               	movlb	0	; () banked
  5358  06DE' 5100'              	movf	settings_loop@j_2517& (0+255),w,b
  5359  06E0' 0D17               	mullw	23
  5360  06E2' 0E10               	movlw	16
  5361  06E4' 26F3               	addwf	prodl,f,c
  5362  06E6' 0E00               	movlw	0
  5363  06E8' 22F4               	addwfc	prodh,f,c
  5364  06EA' 0E00'              	movlw	low _port
  5365  06EC' 24F3               	addwf	prodl,w,c
  5366  06EE' 6ED9               	movwf	fsr2l,c
  5367  06F0' 0E00'              	movlw	high _port
  5368  06F2' 20F4               	addwfc	prodh,w,c
  5369  06F4' 6EDA               	movwf	fsr2h,c
  5370  06F6' 6ADE               	clrf	postinc2,c
  5371  06F8' 6ADE               	clrf	postinc2,c
  5372  06FA' 6ADE               	clrf	postinc2,c
  5373  06FC' 6ADD               	clrf	postdec2,c
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;tasks.h: 673: for (uint8_t i = 0; i < 3; i++) {
  5377  06FE' 0E00               	movlw	0
  5378  0700' 0100               	movlb	0	; () banked
  5379  0702' 6F00'              	movwf	settings_loop@i_2518& (0+255),b
  5380  0704'                    l8785:
  5381                           
  5382                           ; BSR set to: 0
  5383  0704' 0E02               	movlw	2
  5384  0706' 0100               	movlb	0	; () banked
  5385  0708' 6500'              	cpfsgt	settings_loop@i_2518& (0+255),b
  5386  070A' D001               	goto	l8789
  5387  070C' D030               	goto	l8801
  5388  070E'                    l8789:
  5389                           
  5390                           ; BSR set to: 0
  5391                           ;tasks.h: 674: if (port[i].integrated_current)strcpy(strp, " yet ");
  5392  070E' 0100               	movlb	0	; () banked
  5393  0710' 5100'              	movf	settings_loop@i_2518& (0+255),w,b
  5394  0712' 0D17               	mullw	23
  5395  0714' 0E0C               	movlw	12
  5396  0716' 26F3               	addwf	prodl,f,c
  5397  0718' 0E00               	movlw	0
  5398  071A' 22F4               	addwfc	prodh,f,c
  5399  071C' 0E00'              	movlw	low _port
  5400  071E' 24F3               	addwf	prodl,w,c
  5401  0720' 6ED9               	movwf	fsr2l,c
  5402  0722' 0E00'              	movlw	high _port
  5403  0724' 20F4               	addwfc	prodh,w,c
  5404  0726' 6EDA               	movwf	fsr2h,c
  5405  0728' 50DE               	movf	postinc2,w,c
  5406  072A' 10DE               	iorwf	postinc2,w,c
  5407  072C' 10DE               	iorwf	postinc2,w,c
  5408  072E' 10DE               	iorwf	postinc2,w,c
  5409  0730' B4D8               	btfsc	status,2,c
  5410  0732' D00B               	goto	l8793
  5411                           
  5412                           ; BSR set to: 0
  5413  0734' C060' F01E'        	movff	settings_loop@strp,strcpy@to
  5414  0738' C061' F01F'        	movff	settings_loop@strp+1,strcpy@to+1
  5415  073C' 0E00'              	movlw	low STR_124
  5416  073E' 6E20'              	movwf	strcpy@from,c
  5417  0740' 0E00'              	movlw	high STR_124
  5418  0742' 6E21'              	movwf	strcpy@from+1,c
  5419  0744' EC00' F000'        	call	_strcpy	;wreg free
  5420  0748' D00A               	goto	l8795
  5421  074A'                    l8793:
  5422                           
  5423                           ;tasks.h: 675: else strcpy(strp, "  0  ");
  5424  074A' C060' F01E'        	movff	settings_loop@strp,strcpy@to
  5425  074E' C061' F01F'        	movff	settings_loop@strp+1,strcpy@to+1
  5426  0752' 0E00'              	movlw	low STR_125
  5427  0754' 6E20'              	movwf	strcpy@from,c
  5428  0756' 0E00'              	movlw	high STR_125
  5429  0758' 6E21'              	movwf	strcpy@from+1,c
  5430  075A' EC00' F000'        	call	_strcpy	;wreg free
  5431  075E'                    l8795:
  5432                           
  5433                           ;tasks.h: 676: strp += 5;
  5434  075E' 0E05               	movlw	5
  5435  0760' 0100               	movlb	0	; () banked
  5436  0762' 2700'              	addwf	settings_loop@strp& (0+255),f,b
  5437  0764' 0E00               	movlw	0
  5438  0766' 2300'              	addwfc	(settings_loop@strp+1)& (0+255),f,b
  5439                           
  5440                           ; BSR set to: 0
  5441  0768' 0100               	movlb	0	; () banked
  5442  076A' 2B00'              	incf	settings_loop@i_2518& (0+255),f,b
  5443  076C' D7CB               	goto	l8785
  5444  076E'                    l8801:
  5445                           
  5446                           ; BSR set to: 0
  5447                           ;tasks.h: 677: }
  5448                           ;tasks.h: 678: display_char_puts("Left Centr Right", str);
  5449  076E' 0E00'              	movlw	low STR_120
  5450  0770' 6E1E'              	movwf	display_char_puts@str0,c
  5451  0772' 0E00'              	movlw	high STR_120
  5452  0774' 6E1F'              	movwf	display_char_puts@str0+1,c
  5453  0776' 0E00'              	movlw	low settings_loop@str
  5454  0778' 6E20'              	movwf	display_char_puts@str1,c
  5455  077A' 0E00'              	movlw	high settings_loop@str
  5456  077C' 6E21'              	movwf	display_char_puts@str1+1,c
  5457  077E' EC00' F000'        	call	_display_char_puts	;wreg free
  5458  0782'                    l8803:
  5459  0782' 0100               	movlb	0	; () banked
  5460  0784' 2B00'              	incf	settings_loop@j_2517& (0+255),f,b
  5461  0786' D762               	goto	l8775
  5462  0788'                    l8809:
  5463                           
  5464                           ; BSR set to: 0
  5465  0788' 0100               	movlb	0	; () banked
  5466  078A' 5100'              	movf	_settings_select& (0+255),w,b
  5467                           
  5468                           ; Switch size 1, requested type "space"
  5469                           ; Number of cases is 5, Range of values is 0 to 4
  5470                           ; switch strategies available:
  5471                           ; Name         Instructions Cycles
  5472                           ; simple_byte           16     9 (average)
  5473                           ;	Chosen strategy is simple_byte
  5474  078C' 0A00               	xorlw	0	; case 0
  5475  078E' B4D8               	btfsc	status,2,c
  5476  0790' 0012               	return	
  5477  0792' 0A01               	xorlw	1	; case 1
  5478  0794' B4D8               	btfsc	status,2,c
  5479  0796' D5FB               	goto	l950
  5480  0798' 0A03               	xorlw	3	; case 2
  5481  079A' B4D8               	btfsc	status,2,c
  5482  079C' D626               	goto	l8705
  5483  079E' 0A01               	xorlw	1	; case 3
  5484  07A0' B4D8               	btfsc	status,2,c
  5485  07A2' D6B9               	goto	l8739
  5486  07A4' 0A07               	xorlw	7	; case 4
  5487  07A6' A4D8               	btfss	status,2,c
  5488                           
  5489                           ; BSR set to: 0
  5490                           ;tasks.h: 684: }
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;tasks.h: 683: break;
  5494  07A8' 0012               	return	
  5495  07AA' D74D               	goto	l8773
  5496  07AC'                    l8813:
  5497                           
  5498                           ; BSR set to: 0
  5499  07AC' 0100               	movlb	0	; () banked
  5500  07AE' 5100'              	movf	_settings_state& (0+255),w,b
  5501                           
  5502                           ; Switch size 1, requested type "space"
  5503                           ; Number of cases is 4, Range of values is 0 to 3
  5504                           ; switch strategies available:
  5505                           ; Name         Instructions Cycles
  5506                           ; simple_byte           13     7 (average)
  5507                           ;	Chosen strategy is simple_byte
  5508  07B0' 0A00               	xorlw	0	; case 0
  5509  07B2' B4D8               	btfsc	status,2,c
  5510  07B4' D42C               	goto	l8565
  5511  07B6' 0A01               	xorlw	1	; case 1
  5512  07B8' B4D8               	btfsc	status,2,c
  5513  07BA' D43A               	goto	l903
  5514  07BC' 0A03               	xorlw	3	; case 2
  5515  07BE' B4D8               	btfsc	status,2,c
  5516  07C0' D5D4               	goto	l8687
  5517  07C2' 0A01               	xorlw	1	; case 3
  5518  07C4' A4D8               	btfss	status,2,c
  5519  07C6' 0012               	return	
  5520  07C8' D7DF               	goto	l8809
  5521  07CA'                    __end_of_settings_loop:
  5522                           	opt stack 0
  5523                           tblptru	equ	0xFF8
  5524                           tblptrh	equ	0xFF7
  5525                           tblptrl	equ	0xFF6
  5526                           tablat	equ	0xFF5
  5527                           prodh	equ	0xFF4
  5528                           prodl	equ	0xFF3
  5529                           intcon	equ	0xFF2
  5530                           postinc0	equ	0xFEE
  5531                           wreg	equ	0xFE8
  5532                           postdec1	equ	0xFE5
  5533                           fsr1h	equ	0xFE2
  5534                           fsr1l	equ	0xFE1
  5535                           indf2	equ	0xFDF
  5536                           postinc2	equ	0xFDE
  5537                           postdec2	equ	0xFDD
  5538                           fsr2h	equ	0xFDA
  5539                           fsr2l	equ	0xFD9
  5540                           status	equ	0xFD8
  5541                           
  5542 ;; *************** function _strcpy *****************
  5543 ;; Defined at:
  5544 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\strcpy.c"
  5545 ;; Parameters:    Size  Location     Type
  5546 ;;  to              2   30[COMRAM] PTR unsigned char 
  5547 ;;		 -> settings_loop@str(20), 
  5548 ;;  from            2   32[COMRAM] PTR const unsigned char 
  5549 ;;		 -> STR_134(6), STR_133(6), STR_131(6), STR_130(6), 
  5550 ;;		 -> STR_128(6), STR_127(6), STR_125(6), STR_124(6), 
  5551 ;;		 -> STR_122(6), STR_121(6), STR_119(6), STR_118(6), 
  5552 ;; Auto vars:     Size  Location     Type
  5553 ;;  cp              2    0[BANK0 ] PTR unsigned char 
  5554 ;;		 -> settings_loop@str(20), 
  5555 ;; Return value:  Size  Location     Type
  5556 ;;                  2   30[COMRAM] PTR unsigned char 
  5557 ;; Registers used:
  5558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5559 ;; Tracked objects:
  5560 ;;		On entry : 0/0
  5561 ;;		On exit  : 0/0
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5564 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5565 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5567 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5568 ;;Total ram usage:        6 bytes
  5569 ;; Hardware stack levels used:    1
  5570 ;; Hardware stack levels required when called:    3
  5571 ;; This function calls:
  5572 ;;		Nothing
  5573 ;; This function is called by:
  5574 ;;		_settings_loop
  5575 ;; This function uses a non-reentrant model
  5576 ;;
  5577                           
  5578                           	psect	text4
  5579  0000'                    __ptext4:
  5580                           	opt stack 0
  5581  0000'                    _strcpy:
  5582                           	opt stack 25
  5583                           
  5584                           ;incstack = 0
  5585  0000' C01E' F000'        	movff	strcpy@to,strcpy@cp
  5586  0004' C01F' F001'        	movff	strcpy@to+1,strcpy@cp+1
  5587  0008' D005               	goto	l8061
  5588  000A'                    l8059:
  5589  000A' 0100               	movlb	0	; () banked
  5590  000C' 4B00'              	infsnz	strcpy@cp& (0+255),f,b
  5591  000E' 2B00'              	incf	(strcpy@cp+1)& (0+255),f,b
  5592  0010' 4A20'              	infsnz	strcpy@from,f,c
  5593  0012' 2A21'              	incf	strcpy@from+1,f,c
  5594  0014'                    l8061:
  5595  0014' C020' FFF6         	movff	strcpy@from,tblptrl
  5596  0018' C021' FFF7         	movff	strcpy@from+1,tblptrh
  5597  001C'                    	if	0	;tblptru may be non-zero
  5598  001C'                    	endif
  5599  001C'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5600  001C' 0E00'              	movlw	low (__mediumconst shr (0+16))
  5601  001E' 6EF8               	movwf	tblptru,c
  5602  0020'                    	endif
  5603  0020' C000' FFD9         	movff	strcpy@cp,fsr2l
  5604  0024' C001' FFDA         	movff	strcpy@cp+1,fsr2h
  5605  0028' 0008               	tblrd		*
  5606  002A' CFF5 FFDF          	movff	tablat,indf2
  5607  002E' 50DF               	movf	indf2,w,c
  5608  0030' B4D8               	btfsc	status,2,c
  5609  0032' 0012               	return	
  5610  0034' D7EA               	goto	l8059
  5611  0036'                    __end_of_strcpy:
  5612                           	opt stack 0
  5613                           tblptru	equ	0xFF8
  5614                           tblptrh	equ	0xFF7
  5615                           tblptrl	equ	0xFF6
  5616                           tablat	equ	0xFF5
  5617                           prodh	equ	0xFF4
  5618                           prodl	equ	0xFF3
  5619                           intcon	equ	0xFF2
  5620                           postinc0	equ	0xFEE
  5621                           wreg	equ	0xFE8
  5622                           postdec1	equ	0xFE5
  5623                           fsr1h	equ	0xFE2
  5624                           fsr1l	equ	0xFE1
  5625                           indf2	equ	0xFDF
  5626                           postinc2	equ	0xFDE
  5627                           postdec2	equ	0xFDD
  5628                           fsr2h	equ	0xFDA
  5629                           fsr2l	equ	0xFD9
  5630                           status	equ	0xFD8
  5631                           
  5632 ;; *************** function _display_char_puts *****************
  5633 ;; Defined at:
  5634 ;;		line 237 in file "tasks.h"
  5635 ;; Parameters:    Size  Location     Type
  5636 ;;  str0            2   30[COMRAM] PTR const unsigned char 
  5637 ;;		 -> STR_135(17), STR_132(17), STR_129(17), STR_126(17), 
  5638 ;;		 -> STR_123(17), STR_120(17), STR_116(9), STR_114(9), 
  5639 ;;		 -> STR_112(9), STR_110(9), STR_108(9), STR_106(9), 
  5640 ;;		 -> STR_104(9), STR_102(9), STR_100(9), STR_98(9), 
  5641 ;;		 -> STR_96(9), 
  5642 ;;  str1            2   32[COMRAM] PTR const unsigned char 
  5643 ;;		 -> STR_117(15), STR_115(16), STR_113(17), STR_111(16), 
  5644 ;;		 -> STR_109(17), STR_107(15), STR_105(16), STR_103(17), 
  5645 ;;		 -> STR_101(16), STR_99(17), STR_97(17), settings_loop@str(20), 
  5646 ;; Auto vars:     Size  Location     Type
  5647 ;;  i               1    0[BANK0 ] unsigned char 
  5648 ;; Return value:  Size  Location     Type
  5649 ;;		None               void
  5650 ;; Registers used:
  5651 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5652 ;; Tracked objects:
  5653 ;;		On entry : 0/0
  5654 ;;		On exit  : 0/0
  5655 ;;		Unchanged: 0/0
  5656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5657 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5660 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5661 ;;Total ram usage:        5 bytes
  5662 ;; Hardware stack levels used:    1
  5663 ;; Hardware stack levels required when called:    3
  5664 ;; This function calls:
  5665 ;;		Nothing
  5666 ;; This function is called by:
  5667 ;;		_settings_loop
  5668 ;; This function uses a non-reentrant model
  5669 ;;
  5670                           
  5671                           	psect	text5
  5672  0000'                    __ptext5:
  5673                           	opt stack 0
  5674  0000'                    _display_char_puts:
  5675                           	opt stack 25
  5676                           
  5677                           ;tasks.h: 238: uint8_t i;
  5678                           ;tasks.h: 239: for (i = 0; *str0; i++) {
  5679                           
  5680                           ;incstack = 0
  5681  0000' 0E00               	movlw	0
  5682  0002' 0100               	movlb	0	; () banked
  5683  0004' 6F00'              	movwf	display_char_puts@i& (0+255),b
  5684  0006' D016               	goto	l7973
  5685  0008'                    l7967:
  5686                           
  5687                           ; BSR set to: 0
  5688                           ;tasks.h: 240: display_char[0][i] = *str0++;
  5689  0008' C01E' FFF6         	movff	display_char_puts@str0,tblptrl
  5690  000C' C01F' FFF7         	movff	display_char_puts@str0+1,tblptrh
  5691  0010'                    	if	0	;tblptru may be non-zero
  5692  0010'                    	endif
  5693  0010'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5694  0010' 0E00'              	movlw	low (__mediumconst shr (0+16))
  5695  0012' 6EF8               	movwf	tblptru,c
  5696  0014'                    	endif
  5697  0014' 0100               	movlb	0	; () banked
  5698  0016' 5100'              	movf	display_char_puts@i& (0+255),w,b
  5699  0018' 0D01               	mullw	1
  5700  001A' 0E00'              	movlw	low _display_char
  5701  001C' 24F3               	addwf	prodl,w,c
  5702  001E' 6ED9               	movwf	fsr2l,c
  5703  0020' 0E00'              	movlw	high _display_char
  5704  0022' 20F4               	addwfc	prodh,w,c
  5705  0024' 6EDA               	movwf	fsr2h,c
  5706  0026' 0008               	tblrd		*
  5707  0028' CFF5 FFDF          	movff	tablat,indf2
  5708                           
  5709                           ; BSR set to: 0
  5710  002C' 4A1E'              	infsnz	display_char_puts@str0,f,c
  5711  002E' 2A1F'              	incf	display_char_puts@str0+1,f,c
  5712                           
  5713                           ; BSR set to: 0
  5714  0030' 0100               	movlb	0	; () banked
  5715  0032' 2B00'              	incf	display_char_puts@i& (0+255),f,b
  5716  0034'                    l7973:
  5717                           
  5718                           ; BSR set to: 0
  5719  0034' C01E' FFF6         	movff	display_char_puts@str0,tblptrl
  5720  0038' C01F' FFF7         	movff	display_char_puts@str0+1,tblptrh
  5721  003C'                    	if	0	;tblptru may be non-zero
  5722  003C'                    	endif
  5723  003C'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5724  003C' 0E00'              	movlw	low (__mediumconst shr (0+16))
  5725  003E' 6EF8               	movwf	tblptru,c
  5726  0040'                    	endif
  5727  0040' 0008               	tblrd		*
  5728  0042' 50F5               	movf	tablat,w,c
  5729  0044' 0900               	iorlw	0
  5730  0046' A4D8               	btfss	status,2,c
  5731  0048' D7DF               	goto	l7967
  5732                           
  5733                           ; BSR set to: 0
  5734                           ;tasks.h: 241: }
  5735                           ;tasks.h: 242: display_char[0][i] = '\0';
  5736                           
  5737                           ; BSR set to: 0
  5738  004A' 0100               	movlb	0	; () banked
  5739  004C' 5100'              	movf	display_char_puts@i& (0+255),w,b
  5740  004E' 0D01               	mullw	1
  5741  0050' 0E00'              	movlw	low _display_char
  5742  0052' 24F3               	addwf	prodl,w,c
  5743  0054' 6ED9               	movwf	fsr2l,c
  5744  0056' 0E00'              	movlw	high _display_char
  5745  0058' 20F4               	addwfc	prodh,w,c
  5746  005A' 6EDA               	movwf	fsr2h,c
  5747  005C' 0E00               	movlw	0
  5748  005E' 6EDF               	movwf	indf2,c
  5749                           
  5750                           ; BSR set to: 0
  5751                           ;tasks.h: 243: for (i = 0; *str1; i++) {
  5752  0060' 0E00               	movlw	0
  5753  0062' 0100               	movlb	0	; () banked
  5754  0064' 6F00'              	movwf	display_char_puts@i& (0+255),b
  5755  0066' D01F               	goto	l7985
  5756  0068'                    l7979:
  5757                           
  5758                           ;tasks.h: 244: display_char[1][i] = *str1++;
  5759  0068' C020' FFF6         	movff	display_char_puts@str1,tblptrl
  5760  006C' C021' FFF7         	movff	display_char_puts@str1+1,tblptrh
  5761  0070' 0E00'              	movlw	low (__mediumconst shr (0+16))
  5762  0072' 6EF8               	movwf	tblptru,c
  5763  0074' 0100               	movlb	0	; () banked
  5764  0076' 5100'              	movf	display_char_puts@i& (0+255),w,b
  5765  0078' 0D01               	mullw	1
  5766  007A' 0E00'              	movlw	low (_display_char+20)
  5767  007C' 24F3               	addwf	prodl,w,c
  5768  007E' 6ED9               	movwf	fsr2l,c
  5769  0080' 0E00'              	movlw	high (_display_char+20)
  5770  0082' 20F4               	addwfc	prodh,w,c
  5771  0084' 6EDA               	movwf	fsr2h,c
  5772  0086' 0EFF'              	movlw	(high __ramtop+-1)
  5773  0088' 64F7               	cpfsgt	tblptrh,c
  5774  008A' D003               	bra	u9907
  5775  008C' 0008               	tblrd		*
  5776  008E' 50F5               	movf	tablat,w,c
  5777  0090' D005               	bra	u9900
  5778  0092'                    u9907:
  5779  0092' CFF6 FFE9          	movff	tblptrl,fsr0l
  5780  0096' CFF7 FFEA          	movff	tblptrh,fsr0h
  5781  009A' 50EF               	movf	indf0,w,c
  5782  009C'                    u9900:
  5783  009C' 6EDF               	movwf	indf2,c
  5784  009E' 4A20'              	infsnz	display_char_puts@str1,f,c
  5785  00A0' 2A21'              	incf	display_char_puts@str1+1,f,c
  5786  00A2' 0100               	movlb	0	; () banked
  5787  00A4' 2B00'              	incf	display_char_puts@i& (0+255),f,b
  5788  00A6'                    l7985:
  5789                           
  5790                           ; BSR set to: 0
  5791  00A6' C020' FFF6         	movff	display_char_puts@str1,tblptrl
  5792  00AA' C021' FFF7         	movff	display_char_puts@str1+1,tblptrh
  5793  00AE' 0E00'              	movlw	low (__mediumconst shr (0+16))
  5794  00B0' 6EF8               	movwf	tblptru,c
  5795  00B2' 0EFF'              	movlw	(high __ramtop+-1)
  5796  00B4' 64F7               	cpfsgt	tblptrh,c
  5797  00B6' D003               	bra	u9917
  5798  00B8' 0008               	tblrd		*
  5799  00BA' 50F5               	movf	tablat,w,c
  5800  00BC' D005               	bra	u9910
  5801  00BE'                    u9917:
  5802  00BE' CFF6 FFE9          	movff	tblptrl,fsr0l
  5803  00C2' CFF7 FFEA          	movff	tblptrh,fsr0h
  5804  00C6' 50EF               	movf	indf0,w,c
  5805  00C8'                    u9910:
  5806  00C8' 0900               	iorlw	0
  5807  00CA' A4D8               	btfss	status,2,c
  5808  00CC' D7CD               	goto	l7979
  5809                           
  5810                           ;tasks.h: 245: }
  5811                           ;tasks.h: 246: display_char[1][i] = '\0';
  5812  00CE' 0100               	movlb	0	; () banked
  5813  00D0' 5100'              	movf	display_char_puts@i& (0+255),w,b
  5814  00D2' 0D01               	mullw	1
  5815  00D4' 0E00'              	movlw	low (_display_char+20)
  5816  00D6' 24F3               	addwf	prodl,w,c
  5817  00D8' 6ED9               	movwf	fsr2l,c
  5818  00DA' 0E00'              	movlw	high (_display_char+20)
  5819  00DC' 20F4               	addwfc	prodh,w,c
  5820  00DE' 6EDA               	movwf	fsr2h,c
  5821  00E0' 0E00               	movlw	0
  5822  00E2' 6EDF               	movwf	indf2,c
  5823                           
  5824                           ; BSR set to: 0
  5825                           ;tasks.h: 247: display_flag = 1;
  5826  00E4' 0E01               	movlw	1
  5827  00E6' 0100               	movlb	0	; () banked
  5828  00E8' 6F00'              	movwf	_display_flag& (0+255),b
  5829                           
  5830                           ; BSR set to: 0
  5831  00EA' 0012               	return		;funcret
  5832  00EC'                    __end_of_display_char_puts:
  5833                           	opt stack 0
  5834                           tblptru	equ	0xFF8
  5835                           tblptrh	equ	0xFF7
  5836                           tblptrl	equ	0xFF6
  5837                           tablat	equ	0xFF5
  5838                           prodh	equ	0xFF4
  5839                           prodl	equ	0xFF3
  5840                           intcon	equ	0xFF2
  5841                           indf0	equ	0xFEF
  5842                           postinc0	equ	0xFEE
  5843                           fsr0h	equ	0xFEA
  5844                           fsr0l	equ	0xFE9
  5845                           wreg	equ	0xFE8
  5846                           postdec1	equ	0xFE5
  5847                           fsr1h	equ	0xFE2
  5848                           fsr1l	equ	0xFE1
  5849                           indf2	equ	0xFDF
  5850                           postinc2	equ	0xFDE
  5851                           postdec2	equ	0xFDD
  5852                           fsr2h	equ	0xFDA
  5853                           fsr2l	equ	0xFD9
  5854                           status	equ	0xFD8
  5855                           
  5856 ;; *************** function _RTCC_adjust_time_toggle *****************
  5857 ;; Defined at:
  5858 ;;		line 303 in file "../My_header\My_RTCC.h"
  5859 ;; Parameters:    Size  Location     Type
  5860 ;;		None
  5861 ;; Auto vars:     Size  Location     Type
  5862 ;;		None
  5863 ;; Return value:  Size  Location     Type
  5864 ;;		None               void
  5865 ;; Registers used:
  5866 ;;		wreg, status,2
  5867 ;; Tracked objects:
  5868 ;;		On entry : 0/0
  5869 ;;		On exit  : 0/0
  5870 ;;		Unchanged: 0/0
  5871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5876 ;;Total ram usage:        0 bytes
  5877 ;; Hardware stack levels used:    1
  5878 ;; Hardware stack levels required when called:    3
  5879 ;; This function calls:
  5880 ;;		Nothing
  5881 ;; This function is called by:
  5882 ;;		_settings_loop
  5883 ;;		_RTCC_adjust_time_button
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           	psect	text6
  5888  0000'                    __ptext6:
  5889                           	opt stack 0
  5890  0000'                    _RTCC_adjust_time_toggle:
  5891                           	opt stack 25
  5892                           
  5893                           ;My_header\My_RTCC.h: 304: if (edit_flag.flags) {
  5894                           
  5895                           ; BSR set to: 0
  5896                           ;incstack = 0
  5897  0000' 0100               	movlb	0	; () banked
  5898  0002' 5100'              	movf	_edit_flag& (0+255),w,b
  5899  0004' B4D8               	btfsc	status,2,c
  5900  0006' D004               	goto	l507
  5901                           
  5902                           ; BSR set to: 0
  5903                           ;My_header\My_RTCC.h: 305: edit_flag.flags = 0;
  5904  0008' 0E00               	movlw	0
  5905  000A' 0100               	movlb	0	; () banked
  5906  000C' 6F00'              	movwf	_edit_flag& (0+255),b
  5907                           
  5908                           ;My_header\My_RTCC.h: 306: } else {
  5909  000E' 0012               	return	
  5910  0010'                    l507:
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;My_header\My_RTCC.h: 307: edit_flag.flag.ss = 1;
  5914  0010' 0100               	movlb	0	; () banked
  5915  0012' 8100'              	bsf	_edit_flag& (0+255),0,b
  5916  0014' 0012               	return	
  5917  0016'                    __end_of_RTCC_adjust_time_toggle:
  5918                           	opt stack 0
  5919                           tblptru	equ	0xFF8
  5920                           tblptrh	equ	0xFF7
  5921                           tblptrl	equ	0xFF6
  5922                           tablat	equ	0xFF5
  5923                           prodh	equ	0xFF4
  5924                           prodl	equ	0xFF3
  5925                           intcon	equ	0xFF2
  5926                           indf0	equ	0xFEF
  5927                           postinc0	equ	0xFEE
  5928                           fsr0h	equ	0xFEA
  5929                           fsr0l	equ	0xFE9
  5930                           wreg	equ	0xFE8
  5931                           postdec1	equ	0xFE5
  5932                           fsr1h	equ	0xFE2
  5933                           fsr1l	equ	0xFE1
  5934                           indf2	equ	0xFDF
  5935                           postinc2	equ	0xFDE
  5936                           postdec2	equ	0xFDD
  5937                           fsr2h	equ	0xFDA
  5938                           fsr2l	equ	0xFD9
  5939                           status	equ	0xFD8
  5940                           
  5941 ;; *************** function _RTCC_adjust_time_inc *****************
  5942 ;; Defined at:
  5943 ;;		line 321 in file "../My_header\My_RTCC.h"
  5944 ;; Parameters:    Size  Location     Type
  5945 ;;  ct              2   53[BANK0 ] PTR struct .
  5946 ;;		 -> caltime_now(7), 
  5947 ;;  ep              2   55[BANK0 ] PTR unsigned long 
  5948 ;;		 -> epoch_now(4), 
  5949 ;; Auto vars:     Size  Location     Type
  5950 ;;  i               1   61[BANK0 ] unsigned char 
  5951 ;;  i               1   62[BANK0 ] unsigned char 
  5952 ;; Return value:  Size  Location     Type
  5953 ;;		None               void
  5954 ;; Registers used:
  5955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5956 ;; Tracked objects:
  5957 ;;		On entry : 0/0
  5958 ;;		On exit  : 0/0
  5959 ;;		Unchanged: 0/0
  5960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5961 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5962 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5963 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5964 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5965 ;;Total ram usage:       10 bytes
  5966 ;; Hardware stack levels used:    1
  5967 ;; Hardware stack levels required when called:    7
  5968 ;; This function calls:
  5969 ;;		_RTCC_from_RTCC
  5970 ;;		_RTCC_from_epoch
  5971 ;;		___lmul
  5972 ;;		_month_length
  5973 ;; This function is called by:
  5974 ;;		_settings_loop
  5975 ;;		_RTCC_adjust_time_button
  5976 ;; This function uses a non-reentrant model
  5977 ;;
  5978                           
  5979                           	psect	text7
  5980  0000'                    __ptext7:
  5981                           	opt stack 0
  5982  0000'                    _RTCC_adjust_time_inc:
  5983                           	opt stack 21
  5984                           
  5985                           ;My_header\My_RTCC.h: 322: RTCC_from_RTCC(ct, ep);
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;incstack = 0
  5989  0000' C035' F028'        	movff	RTCC_adjust_time_inc@ct,RTCC_from_RTCC@ct
  5990  0004' C036' F029'        	movff	RTCC_adjust_time_inc@ct+1,RTCC_from_RTCC@ct+1
  5991  0008' C037' F02A'        	movff	RTCC_adjust_time_inc@ep,RTCC_from_RTCC@ep
  5992  000C' C038' F02B'        	movff	RTCC_adjust_time_inc@ep+1,RTCC_from_RTCC@ep+1
  5993  0010' EC00' F000'        	call	_RTCC_from_RTCC	;wreg free
  5994                           
  5995                           ;My_header\My_RTCC.h: 323: if (edit_flag.flag.ss) *ep += 1;
  5996  0014' 0100               	movlb	0	; () banked
  5997  0016' A100'              	btfss	_edit_flag& (0+255),0,b
  5998  0018' D009               	goto	l7771
  5999                           
  6000                           ; BSR set to: 0
  6001  001A' C037' FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6002  001E' C038' FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6003  0022' 2ADE               	incf	postinc2,f,c
  6004  0024' 0E00               	movlw	0
  6005  0026' 22DE               	addwfc	postinc2,f,c
  6006  0028' 22DE               	addwfc	postinc2,f,c
  6007  002A' 22DE               	addwfc	postinc2,f,c
  6008  002C'                    l7771:
  6009                           
  6010                           ; BSR set to: 0
  6011                           ;My_header\My_RTCC.h: 324: if (edit_flag.flag.mm) *ep += ((epoch_t)60);
  6012  002C' 0100               	movlb	0	; () banked
  6013  002E' A300'              	btfss	_edit_flag& (0+255),1,b
  6014  0030' D00A               	goto	l7775
  6015                           
  6016                           ; BSR set to: 0
  6017  0032' 0E3C               	movlw	60
  6018  0034' C037' FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6019  0038' C038' FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6020  003C' 26DE               	addwf	postinc2,f,c
  6021  003E' 0E00               	movlw	0
  6022  0040' 22DE               	addwfc	postinc2,f,c
  6023  0042' 22DE               	addwfc	postinc2,f,c
  6024  0044' 22DE               	addwfc	postinc2,f,c
  6025  0046'                    l7775:
  6026                           
  6027                           ; BSR set to: 0
  6028                           ;My_header\My_RTCC.h: 325: if (edit_flag.flag.hh) *ep += ((epoch_t)60*60);
  6029  0046' 0100               	movlb	0	; () banked
  6030  0048' A500'              	btfss	_edit_flag& (0+255),2,b
  6031  004A' D00C               	goto	l7779
  6032                           
  6033                           ; BSR set to: 0
  6034  004C' C037' FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6035  0050' C038' FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6036  0054' 0E10               	movlw	16
  6037  0056' 26DE               	addwf	postinc2,f,c
  6038  0058' 0E0E               	movlw	14
  6039  005A' 22DE               	addwfc	postinc2,f,c
  6040  005C' 0E00               	movlw	0
  6041  005E' 22DE               	addwfc	postinc2,f,c
  6042  0060' 0E00               	movlw	0
  6043  0062' 22DE               	addwfc	postinc2,f,c
  6044  0064'                    l7779:
  6045                           
  6046                           ; BSR set to: 0
  6047                           ;My_header\My_RTCC.h: 326: if (edit_flag.flag.DD) *ep += ((epoch_t)60*60*24);
  6048  0064' 0100               	movlb	0	; () banked
  6049  0066' A700'              	btfss	_edit_flag& (0+255),3,b
  6050  0068' D00C               	goto	l7783
  6051                           
  6052                           ; BSR set to: 0
  6053  006A' C037' FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6054  006E' C038' FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6055  0072' 0E80               	movlw	128
  6056  0074' 26DE               	addwf	postinc2,f,c
  6057  0076' 0E51               	movlw	81
  6058  0078' 22DE               	addwfc	postinc2,f,c
  6059  007A' 0E01               	movlw	1
  6060  007C' 22DE               	addwfc	postinc2,f,c
  6061  007E' 0E00               	movlw	0
  6062  0080' 22DE               	addwfc	postinc2,f,c
  6063  0082'                    l7783:
  6064                           
  6065                           ; BSR set to: 0
  6066                           ;My_header\My_RTCC.h: 327: if (edit_flag.flag.MM) *ep += ((epoch_t)60*60*24) * month_len
      +                          gth(ct->YY, ct->MM);
  6067  0082' 0100               	movlb	0	; () banked
  6068  0084' A900'              	btfss	_edit_flag& (0+255),4,b
  6069  0086' D038               	goto	l7787
  6070                           
  6071                           ; BSR set to: 0
  6072  0088' 0100               	movlb	0	; () banked
  6073  008A' EE20 F005          	lfsr	2,5
  6074  008E' 5100'              	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  6075  0090' 26D9               	addwf	fsr2l,f,c
  6076  0092' 5100'              	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  6077  0094' 22DA               	addwfc	fsr2h,f,c
  6078  0096' 50DF               	movf	indf2,w,c
  6079  0098' 0100               	movlb	0	; () banked
  6080  009A' 6F00'              	movwf	month_length@month& (0+255),b
  6081  009C' 0100               	movlb	0	; () banked
  6082  009E' EE20 F006          	lfsr	2,6
  6083  00A2' 5100'              	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  6084  00A4' 26D9               	addwf	fsr2l,f,c
  6085  00A6' 5100'              	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  6086  00A8' 22DA               	addwfc	fsr2h,f,c
  6087  00AA' 50DF               	movf	indf2,w,c
  6088  00AC' EC00' F000'        	call	_month_length
  6089  00B0' 0100               	movlb	0	; () banked
  6090  00B2' 6F00'              	movwf	??_RTCC_adjust_time_inc& (0+255),b
  6091  00B4' 0100               	movlb	0	; () banked
  6092  00B6' 5100'              	movf	??_RTCC_adjust_time_inc& (0+255),w,b
  6093  00B8' 0100               	movlb	0	; () banked
  6094  00BA' 6F00'              	movwf	___lmul@multiplier& (0+255),b
  6095  00BC' 6B00'              	clrf	(___lmul@multiplier+1)& (0+255),b
  6096  00BE' 6B00'              	clrf	(___lmul@multiplier+2)& (0+255),b
  6097  00C0' 6B00'              	clrf	(___lmul@multiplier+3)& (0+255),b
  6098  00C2' 0E80               	movlw	128
  6099  00C4' 0100               	movlb	0	; () banked
  6100  00C6' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
  6101  00C8' 0E51               	movlw	81
  6102  00CA' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
  6103  00CC' 0E01               	movlw	1
  6104  00CE' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
  6105  00D0' 0E00               	movlw	0
  6106  00D2' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
  6107  00D4' EC00' F000'        	call	___lmul	;wreg free
  6108  00D8' C037' FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6109  00DC' C038' FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6110  00E0' 0100               	movlb	0	; () banked
  6111  00E2' 5100'              	movf	?___lmul& (0+255),w,b
  6112  00E4' 26DE               	addwf	postinc2,f,c
  6113  00E6' 0100               	movlb	0	; () banked
  6114  00E8' 5100'              	movf	(?___lmul+1)& (0+255),w,b
  6115  00EA' 22DE               	addwfc	postinc2,f,c
  6116  00EC' 0100               	movlb	0	; () banked
  6117  00EE' 5100'              	movf	(?___lmul+2)& (0+255),w,b
  6118  00F0' 22DE               	addwfc	postinc2,f,c
  6119  00F2' 0100               	movlb	0	; () banked
  6120  00F4' 5100'              	movf	(?___lmul+3)& (0+255),w,b
  6121  00F6' 22DE               	addwfc	postinc2,f,c
  6122  00F8'                    l7787:
  6123                           
  6124                           ; BSR set to: 0
  6125                           ;My_header\My_RTCC.h: 328: if (edit_flag.flag.YY) {
  6126  00F8' 0100               	movlb	0	; () banked
  6127  00FA' AB00'              	btfss	_edit_flag& (0+255),5,b
  6128  00FC' D088               	goto	l7809
  6129                           
  6130                           ; BSR set to: 0
  6131                           ;My_header\My_RTCC.h: 329: for (uint8_t i = ct->MM; i <= 12; i++) {
  6132  00FE' 0100               	movlb	0	; () banked
  6133  0100' EE20 F005          	lfsr	2,5
  6134  0104' 5100'              	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  6135  0106' 26D9               	addwf	fsr2l,f,c
  6136  0108' 5100'              	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  6137  010A' 22DA               	addwfc	fsr2h,f,c
  6138  010C' 50DF               	movf	indf2,w,c
  6139  010E' 0100               	movlb	0	; () banked
  6140  0110' 6F00'              	movwf	RTCC_adjust_time_inc@i& (0+255),b
  6141  0112'                    l7791:
  6142                           
  6143                           ; BSR set to: 0
  6144  0112' 0E0C               	movlw	12
  6145  0114' 0100               	movlb	0	; () banked
  6146  0116' 6500'              	cpfsgt	RTCC_adjust_time_inc@i& (0+255),b
  6147  0118' D001               	goto	l7795
  6148  011A' D033               	goto	l7801
  6149  011C'                    l7795:
  6150                           
  6151                           ; BSR set to: 0
  6152                           ;My_header\My_RTCC.h: 330: *ep += ((epoch_t)60*60*24) * month_length(ct->YY, i);
  6153  011C' C03E' F002'        	movff	RTCC_adjust_time_inc@i,month_length@month
  6154  0120' 0100               	movlb	0	; () banked
  6155  0122' EE20 F006          	lfsr	2,6
  6156  0126' 5100'              	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  6157  0128' 26D9               	addwf	fsr2l,f,c
  6158  012A' 5100'              	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  6159  012C' 22DA               	addwfc	fsr2h,f,c
  6160  012E' 50DF               	movf	indf2,w,c
  6161  0130' EC00' F000'        	call	_month_length
  6162  0134' 0100               	movlb	0	; () banked
  6163  0136' 6F00'              	movwf	??_RTCC_adjust_time_inc& (0+255),b
  6164  0138' 0100               	movlb	0	; () banked
  6165  013A' 5100'              	movf	??_RTCC_adjust_time_inc& (0+255),w,b
  6166  013C' 0100               	movlb	0	; () banked
  6167  013E' 6F00'              	movwf	___lmul@multiplier& (0+255),b
  6168  0140' 6B00'              	clrf	(___lmul@multiplier+1)& (0+255),b
  6169  0142' 6B00'              	clrf	(___lmul@multiplier+2)& (0+255),b
  6170  0144' 6B00'              	clrf	(___lmul@multiplier+3)& (0+255),b
  6171  0146' 0E80               	movlw	128
  6172  0148' 0100               	movlb	0	; () banked
  6173  014A' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
  6174  014C' 0E51               	movlw	81
  6175  014E' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
  6176  0150' 0E01               	movlw	1
  6177  0152' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
  6178  0154' 0E00               	movlw	0
  6179  0156' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
  6180  0158' EC00' F000'        	call	___lmul	;wreg free
  6181  015C' C037' FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6182  0160' C038' FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6183  0164' 0100               	movlb	0	; () banked
  6184  0166' 5100'              	movf	?___lmul& (0+255),w,b
  6185  0168' 26DE               	addwf	postinc2,f,c
  6186  016A' 0100               	movlb	0	; () banked
  6187  016C' 5100'              	movf	(?___lmul+1)& (0+255),w,b
  6188  016E' 22DE               	addwfc	postinc2,f,c
  6189  0170' 0100               	movlb	0	; () banked
  6190  0172' 5100'              	movf	(?___lmul+2)& (0+255),w,b
  6191  0174' 22DE               	addwfc	postinc2,f,c
  6192  0176' 0100               	movlb	0	; () banked
  6193  0178' 5100'              	movf	(?___lmul+3)& (0+255),w,b
  6194  017A' 22DE               	addwfc	postinc2,f,c
  6195                           
  6196                           ; BSR set to: 0
  6197  017C' 0100               	movlb	0	; () banked
  6198  017E' 2B00'              	incf	RTCC_adjust_time_inc@i& (0+255),f,b
  6199  0180' D7C8               	goto	l7791
  6200  0182'                    l7801:
  6201                           
  6202                           ; BSR set to: 0
  6203                           ;My_header\My_RTCC.h: 331: }
  6204                           ;My_header\My_RTCC.h: 332: for (uint8_t i = 1; i < ct->MM; i++) {
  6205  0182' 0E01               	movlw	1
  6206  0184' 0100               	movlb	0	; () banked
  6207  0186' 6F00'              	movwf	RTCC_adjust_time_inc@i_2023& (0+255),b
  6208  0188' D036               	goto	l7807
  6209  018A'                    l7803:
  6210                           
  6211                           ; BSR set to: 0
  6212                           ;My_header\My_RTCC.h: 333: *ep += ((epoch_t)60*60*24) * month_length(ct->YY + 1, i);
  6213  018A' C03D' F002'        	movff	RTCC_adjust_time_inc@i_2023,month_length@month
  6214  018E' 0100               	movlb	0	; () banked
  6215  0190' EE20 F006          	lfsr	2,6
  6216  0194' 5100'              	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  6217  0196' 26D9               	addwf	fsr2l,f,c
  6218  0198' 5100'              	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  6219  019A' 22DA               	addwfc	fsr2h,f,c
  6220  019C' 50DF               	movf	indf2,w,c
  6221  019E' 0100               	movlb	0	; () banked
  6222  01A0' 6F00'              	movwf	??_RTCC_adjust_time_inc& (0+255),b
  6223  01A2' 0100               	movlb	0	; () banked
  6224  01A4' 2900'              	incf	??_RTCC_adjust_time_inc& (0+255),w,b
  6225  01A6' EC00' F000'        	call	_month_length
  6226  01AA' 0100               	movlb	0	; () banked
  6227  01AC' 6F00'              	movwf	(??_RTCC_adjust_time_inc+1)& (0+255),b
  6228  01AE' 0100               	movlb	0	; () banked
  6229  01B0' 5100'              	movf	(??_RTCC_adjust_time_inc+1)& (0+255),w,b
  6230  01B2' 0100               	movlb	0	; () banked
  6231  01B4' 6F00'              	movwf	___lmul@multiplier& (0+255),b
  6232  01B6' 6B00'              	clrf	(___lmul@multiplier+1)& (0+255),b
  6233  01B8' 6B00'              	clrf	(___lmul@multiplier+2)& (0+255),b
  6234  01BA' 6B00'              	clrf	(___lmul@multiplier+3)& (0+255),b
  6235  01BC' 0E80               	movlw	128
  6236  01BE' 0100               	movlb	0	; () banked
  6237  01C0' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
  6238  01C2' 0E51               	movlw	81
  6239  01C4' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
  6240  01C6' 0E01               	movlw	1
  6241  01C8' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
  6242  01CA' 0E00               	movlw	0
  6243  01CC' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
  6244  01CE' EC00' F000'        	call	___lmul	;wreg free
  6245  01D2' C037' FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6246  01D6' C038' FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6247  01DA' 0100               	movlb	0	; () banked
  6248  01DC' 5100'              	movf	?___lmul& (0+255),w,b
  6249  01DE' 26DE               	addwf	postinc2,f,c
  6250  01E0' 0100               	movlb	0	; () banked
  6251  01E2' 5100'              	movf	(?___lmul+1)& (0+255),w,b
  6252  01E4' 22DE               	addwfc	postinc2,f,c
  6253  01E6' 0100               	movlb	0	; () banked
  6254  01E8' 5100'              	movf	(?___lmul+2)& (0+255),w,b
  6255  01EA' 22DE               	addwfc	postinc2,f,c
  6256  01EC' 0100               	movlb	0	; () banked
  6257  01EE' 5100'              	movf	(?___lmul+3)& (0+255),w,b
  6258  01F0' 22DE               	addwfc	postinc2,f,c
  6259                           
  6260                           ; BSR set to: 0
  6261  01F2' 0100               	movlb	0	; () banked
  6262  01F4' 2B00'              	incf	RTCC_adjust_time_inc@i_2023& (0+255),f,b
  6263  01F6'                    l7807:
  6264                           
  6265                           ; BSR set to: 0
  6266  01F6' 0100               	movlb	0	; () banked
  6267  01F8' EE20 F005          	lfsr	2,5
  6268  01FC' 5100'              	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  6269  01FE' 26D9               	addwf	fsr2l,f,c
  6270  0200' 5100'              	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  6271  0202' 22DA               	addwfc	fsr2h,f,c
  6272  0204' 50DE               	movf	postinc2,w,c
  6273  0206' 0100               	movlb	0	; () banked
  6274  0208' 5D00'              	subwf	RTCC_adjust_time_inc@i_2023& (0+255),w,b
  6275  020A' A0D8               	btfss	status,0,c
  6276  020C' D7BE               	goto	l7803
  6277  020E'                    l7809:
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;My_header\My_RTCC.h: 334: }
  6281                           ;My_header\My_RTCC.h: 335: }
  6282                           ;My_header\My_RTCC.h: 337: if (*ep >= 3155760000)*ep -= 3155760000;
  6283  020E' C037' FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6284  0212' C038' FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6285  0216' 0E80               	movlw	128
  6286  0218' 5CDE               	subwf	postinc2,w,c
  6287  021A' 0E13               	movlw	19
  6288  021C' 58DE               	subwfb	postinc2,w,c
  6289  021E' 0E19               	movlw	25
  6290  0220' 58DE               	subwfb	postinc2,w,c
  6291  0222' 0EBC               	movlw	188
  6292  0224' 58DE               	subwfb	postinc2,w,c
  6293  0226' A0D8               	btfss	status,0,c
  6294  0228' D00C               	goto	l7813
  6295                           
  6296                           ; BSR set to: 0
  6297  022A' C037' FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6298  022E' C038' FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6299  0232' 0E80               	movlw	128
  6300  0234' 5EDE               	subwf	postinc2,f,c
  6301  0236' 0E13               	movlw	19
  6302  0238' 5ADE               	subwfb	postinc2,f,c
  6303  023A' 0E19               	movlw	25
  6304  023C' 5ADE               	subwfb	postinc2,f,c
  6305  023E' 0EBC               	movlw	188
  6306  0240' 5ADE               	subwfb	postinc2,f,c
  6307  0242'                    l7813:
  6308                           
  6309                           ; BSR set to: 0
  6310                           ;My_header\My_RTCC.h: 338: RTCC_from_epoch(&caltime_now, &epoch_now);
  6311  0242' 0E00'              	movlw	low _caltime_now
  6312  0244' 0100               	movlb	0	; () banked
  6313  0246' 6F00'              	movwf	RTCC_from_epoch@ct& (0+255),b
  6314  0248' 0E00'              	movlw	high _caltime_now
  6315  024A' 0100               	movlb	0	; () banked
  6316  024C' 6F00'              	movwf	(RTCC_from_epoch@ct+1)& (0+255),b
  6317  024E' 0E00'              	movlw	low _epoch_now
  6318  0250' 0100               	movlb	0	; () banked
  6319  0252' 6F00'              	movwf	RTCC_from_epoch@ep& (0+255),b
  6320  0254' 0E00'              	movlw	high _epoch_now
  6321  0256' 0100               	movlb	0	; () banked
  6322  0258' 6F00'              	movwf	(RTCC_from_epoch@ep+1)& (0+255),b
  6323  025A' EC00' F000'        	call	_RTCC_from_epoch	;wreg free
  6324                           
  6325                           ;My_header\My_RTCC.h: 339: time_change_flag = 1;
  6326  025E' 0E01               	movlw	1
  6327  0260' 0100               	movlb	0	; () banked
  6328  0262' 6F00'              	movwf	_time_change_flag& (0+255),b
  6329                           
  6330                           ; BSR set to: 0
  6331  0264' 0012               	return		;funcret
  6332  0266'                    __end_of_RTCC_adjust_time_inc:
  6333                           	opt stack 0
  6334                           tblptru	equ	0xFF8
  6335                           tblptrh	equ	0xFF7
  6336                           tblptrl	equ	0xFF6
  6337                           tablat	equ	0xFF5
  6338                           prodh	equ	0xFF4
  6339                           prodl	equ	0xFF3
  6340                           intcon	equ	0xFF2
  6341                           indf0	equ	0xFEF
  6342                           postinc0	equ	0xFEE
  6343                           fsr0h	equ	0xFEA
  6344                           fsr0l	equ	0xFE9
  6345                           wreg	equ	0xFE8
  6346                           postdec1	equ	0xFE5
  6347                           fsr1h	equ	0xFE2
  6348                           fsr1l	equ	0xFE1
  6349                           indf2	equ	0xFDF
  6350                           postinc2	equ	0xFDE
  6351                           postdec2	equ	0xFDD
  6352                           fsr2h	equ	0xFDA
  6353                           fsr2l	equ	0xFD9
  6354                           status	equ	0xFD8
  6355                           
  6356 ;; *************** function _RTCC_adjust_time_dec *****************
  6357 ;; Defined at:
  6358 ;;		line 342 in file "../My_header\My_RTCC.h"
  6359 ;; Parameters:    Size  Location     Type
  6360 ;;  ct              2   53[BANK0 ] PTR struct .
  6361 ;;		 -> caltime_now(7), 
  6362 ;;  ep              2   55[BANK0 ] PTR unsigned long 
  6363 ;;		 -> epoch_now(4), 
  6364 ;; Auto vars:     Size  Location     Type
  6365 ;;  i               1   61[BANK0 ] unsigned char 
  6366 ;;  i               1   62[BANK0 ] unsigned char 
  6367 ;; Return value:  Size  Location     Type
  6368 ;;		None               void
  6369 ;; Registers used:
  6370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6371 ;; Tracked objects:
  6372 ;;		On entry : 0/0
  6373 ;;		On exit  : 0/0
  6374 ;;		Unchanged: 0/0
  6375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6376 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6377 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6378 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6379 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6380 ;;Total ram usage:       10 bytes
  6381 ;; Hardware stack levels used:    1
  6382 ;; Hardware stack levels required when called:    7
  6383 ;; This function calls:
  6384 ;;		_RTCC_from_RTCC
  6385 ;;		_RTCC_from_epoch
  6386 ;;		___lmul
  6387 ;;		_month_length
  6388 ;; This function is called by:
  6389 ;;		_settings_loop
  6390 ;;		_RTCC_adjust_time_button
  6391 ;; This function uses a non-reentrant model
  6392 ;;
  6393                           
  6394                           	psect	text8
  6395  0000'                    __ptext8:
  6396                           	opt stack 0
  6397  0000'                    _RTCC_adjust_time_dec:
  6398                           	opt stack 21
  6399                           
  6400                           ;My_header\My_RTCC.h: 343: RTCC_from_RTCC(ct, ep);
  6401                           
  6402                           ; BSR set to: 0
  6403                           ;incstack = 0
  6404  0000' C035' F028'        	movff	RTCC_adjust_time_dec@ct,RTCC_from_RTCC@ct
  6405  0004' C036' F029'        	movff	RTCC_adjust_time_dec@ct+1,RTCC_from_RTCC@ct+1
  6406  0008' C037' F02A'        	movff	RTCC_adjust_time_dec@ep,RTCC_from_RTCC@ep
  6407  000C' C038' F02B'        	movff	RTCC_adjust_time_dec@ep+1,RTCC_from_RTCC@ep+1
  6408  0010' EC00' F000'        	call	_RTCC_from_RTCC	;wreg free
  6409                           
  6410                           ;My_header\My_RTCC.h: 344: if (edit_flag.flag.ss) *ep -= 1;
  6411  0014' 0100               	movlb	0	; () banked
  6412  0016' A100'              	btfss	_edit_flag& (0+255),0,b
  6413  0018' D009               	goto	l7823
  6414                           
  6415                           ; BSR set to: 0
  6416  001A' C037' FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6417  001E' C038' FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6418  0022' 06DE               	decf	postinc2,f,c
  6419  0024' 0E00               	movlw	0
  6420  0026' 5ADE               	subwfb	postinc2,f,c
  6421  0028' 5ADE               	subwfb	postinc2,f,c
  6422  002A' 5ADE               	subwfb	postinc2,f,c
  6423  002C'                    l7823:
  6424                           
  6425                           ; BSR set to: 0
  6426                           ;My_header\My_RTCC.h: 345: if (edit_flag.flag.mm) *ep -= ((epoch_t)60);
  6427  002C' 0100               	movlb	0	; () banked
  6428  002E' A300'              	btfss	_edit_flag& (0+255),1,b
  6429  0030' D00A               	goto	l7827
  6430                           
  6431                           ; BSR set to: 0
  6432  0032' 0E3C               	movlw	60
  6433  0034' C037' FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6434  0038' C038' FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6435  003C' 5EDE               	subwf	postinc2,f,c
  6436  003E' 0E00               	movlw	0
  6437  0040' 5ADE               	subwfb	postinc2,f,c
  6438  0042' 5ADE               	subwfb	postinc2,f,c
  6439  0044' 5ADE               	subwfb	postinc2,f,c
  6440  0046'                    l7827:
  6441                           
  6442                           ; BSR set to: 0
  6443                           ;My_header\My_RTCC.h: 346: if (edit_flag.flag.hh) *ep -= ((epoch_t)60*60);
  6444  0046' 0100               	movlb	0	; () banked
  6445  0048' A500'              	btfss	_edit_flag& (0+255),2,b
  6446  004A' D00C               	goto	l7831
  6447                           
  6448                           ; BSR set to: 0
  6449  004C' C037' FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6450  0050' C038' FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6451  0054' 0E10               	movlw	16
  6452  0056' 5EDE               	subwf	postinc2,f,c
  6453  0058' 0E0E               	movlw	14
  6454  005A' 5ADE               	subwfb	postinc2,f,c
  6455  005C' 0E00               	movlw	0
  6456  005E' 5ADE               	subwfb	postinc2,f,c
  6457  0060' 0E00               	movlw	0
  6458  0062' 5ADE               	subwfb	postinc2,f,c
  6459  0064'                    l7831:
  6460                           
  6461                           ; BSR set to: 0
  6462                           ;My_header\My_RTCC.h: 347: if (edit_flag.flag.DD) *ep -= ((epoch_t)60*60*24);
  6463  0064' 0100               	movlb	0	; () banked
  6464  0066' A700'              	btfss	_edit_flag& (0+255),3,b
  6465  0068' D00C               	goto	l7835
  6466                           
  6467                           ; BSR set to: 0
  6468  006A' C037' FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6469  006E' C038' FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6470  0072' 0E80               	movlw	128
  6471  0074' 5EDE               	subwf	postinc2,f,c
  6472  0076' 0E51               	movlw	81
  6473  0078' 5ADE               	subwfb	postinc2,f,c
  6474  007A' 0E01               	movlw	1
  6475  007C' 5ADE               	subwfb	postinc2,f,c
  6476  007E' 0E00               	movlw	0
  6477  0080' 5ADE               	subwfb	postinc2,f,c
  6478  0082'                    l7835:
  6479                           
  6480                           ; BSR set to: 0
  6481                           ;My_header\My_RTCC.h: 348: if (edit_flag.flag.MM) *ep -= ((epoch_t)60*60*24) * month_len
      +                          gth(ct->YY, ct->MM);
  6482  0082' 0100               	movlb	0	; () banked
  6483  0084' A900'              	btfss	_edit_flag& (0+255),4,b
  6484  0086' D038               	goto	l7839
  6485                           
  6486                           ; BSR set to: 0
  6487  0088' 0100               	movlb	0	; () banked
  6488  008A' EE20 F005          	lfsr	2,5
  6489  008E' 5100'              	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  6490  0090' 26D9               	addwf	fsr2l,f,c
  6491  0092' 5100'              	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  6492  0094' 22DA               	addwfc	fsr2h,f,c
  6493  0096' 50DF               	movf	indf2,w,c
  6494  0098' 0100               	movlb	0	; () banked
  6495  009A' 6F00'              	movwf	month_length@month& (0+255),b
  6496  009C' 0100               	movlb	0	; () banked
  6497  009E' EE20 F006          	lfsr	2,6
  6498  00A2' 5100'              	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  6499  00A4' 26D9               	addwf	fsr2l,f,c
  6500  00A6' 5100'              	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  6501  00A8' 22DA               	addwfc	fsr2h,f,c
  6502  00AA' 50DF               	movf	indf2,w,c
  6503  00AC' EC00' F000'        	call	_month_length
  6504  00B0' 0100               	movlb	0	; () banked
  6505  00B2' 6F00'              	movwf	??_RTCC_adjust_time_dec& (0+255),b
  6506  00B4' 0100               	movlb	0	; () banked
  6507  00B6' 5100'              	movf	??_RTCC_adjust_time_dec& (0+255),w,b
  6508  00B8' 0100               	movlb	0	; () banked
  6509  00BA' 6F00'              	movwf	___lmul@multiplier& (0+255),b
  6510  00BC' 6B00'              	clrf	(___lmul@multiplier+1)& (0+255),b
  6511  00BE' 6B00'              	clrf	(___lmul@multiplier+2)& (0+255),b
  6512  00C0' 6B00'              	clrf	(___lmul@multiplier+3)& (0+255),b
  6513  00C2' 0E80               	movlw	128
  6514  00C4' 0100               	movlb	0	; () banked
  6515  00C6' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
  6516  00C8' 0E51               	movlw	81
  6517  00CA' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
  6518  00CC' 0E01               	movlw	1
  6519  00CE' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
  6520  00D0' 0E00               	movlw	0
  6521  00D2' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
  6522  00D4' EC00' F000'        	call	___lmul	;wreg free
  6523  00D8' C037' FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6524  00DC' C038' FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6525  00E0' 0100               	movlb	0	; () banked
  6526  00E2' 5100'              	movf	?___lmul& (0+255),w,b
  6527  00E4' 5EDE               	subwf	postinc2,f,c
  6528  00E6' 0100               	movlb	0	; () banked
  6529  00E8' 5100'              	movf	(?___lmul+1)& (0+255),w,b
  6530  00EA' 5ADE               	subwfb	postinc2,f,c
  6531  00EC' 0100               	movlb	0	; () banked
  6532  00EE' 5100'              	movf	(?___lmul+2)& (0+255),w,b
  6533  00F0' 5ADE               	subwfb	postinc2,f,c
  6534  00F2' 0100               	movlb	0	; () banked
  6535  00F4' 5100'              	movf	(?___lmul+3)& (0+255),w,b
  6536  00F6' 5ADE               	subwfb	postinc2,f,c
  6537  00F8'                    l7839:
  6538                           
  6539                           ; BSR set to: 0
  6540                           ;My_header\My_RTCC.h: 349: if (edit_flag.flag.YY) {
  6541  00F8' 0100               	movlb	0	; () banked
  6542  00FA' AB00'              	btfss	_edit_flag& (0+255),5,b
  6543  00FC' D088               	goto	l7861
  6544                           
  6545                           ; BSR set to: 0
  6546                           ;My_header\My_RTCC.h: 350: for (uint8_t i = ct->MM; i >= 1; i--) {
  6547  00FE' 0100               	movlb	0	; () banked
  6548  0100' EE20 F005          	lfsr	2,5
  6549  0104' 5100'              	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  6550  0106' 26D9               	addwf	fsr2l,f,c
  6551  0108' 5100'              	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  6552  010A' 22DA               	addwfc	fsr2h,f,c
  6553  010C' 50DF               	movf	indf2,w,c
  6554  010E' 0100               	movlb	0	; () banked
  6555  0110' 6F00'              	movwf	RTCC_adjust_time_dec@i& (0+255),b
  6556  0112'                    l7843:
  6557                           
  6558                           ; BSR set to: 0
  6559  0112' 0100               	movlb	0	; () banked
  6560  0114' 5100'              	movf	RTCC_adjust_time_dec@i& (0+255),w,b
  6561  0116' 0100               	movlb	0	; () banked
  6562  0118' B4D8               	btfsc	status,2,c
  6563  011A' D033               	goto	l7853
  6564                           
  6565                           ; BSR set to: 0
  6566                           ;My_header\My_RTCC.h: 351: *ep -= ((epoch_t)60*60*24) * month_length(ct->YY, i);
  6567                           
  6568                           ; BSR set to: 0
  6569                           
  6570                           ; BSR set to: 0
  6571  011C' C03E' F002'        	movff	RTCC_adjust_time_dec@i,month_length@month
  6572  0120' 0100               	movlb	0	; () banked
  6573  0122' EE20 F006          	lfsr	2,6
  6574  0126' 5100'              	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  6575  0128' 26D9               	addwf	fsr2l,f,c
  6576  012A' 5100'              	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  6577  012C' 22DA               	addwfc	fsr2h,f,c
  6578  012E' 50DF               	movf	indf2,w,c
  6579  0130' EC00' F000'        	call	_month_length
  6580  0134' 0100               	movlb	0	; () banked
  6581  0136' 6F00'              	movwf	??_RTCC_adjust_time_dec& (0+255),b
  6582  0138' 0100               	movlb	0	; () banked
  6583  013A' 5100'              	movf	??_RTCC_adjust_time_dec& (0+255),w,b
  6584  013C' 0100               	movlb	0	; () banked
  6585  013E' 6F00'              	movwf	___lmul@multiplier& (0+255),b
  6586  0140' 6B00'              	clrf	(___lmul@multiplier+1)& (0+255),b
  6587  0142' 6B00'              	clrf	(___lmul@multiplier+2)& (0+255),b
  6588  0144' 6B00'              	clrf	(___lmul@multiplier+3)& (0+255),b
  6589  0146' 0E80               	movlw	128
  6590  0148' 0100               	movlb	0	; () banked
  6591  014A' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
  6592  014C' 0E51               	movlw	81
  6593  014E' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
  6594  0150' 0E01               	movlw	1
  6595  0152' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
  6596  0154' 0E00               	movlw	0
  6597  0156' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
  6598  0158' EC00' F000'        	call	___lmul	;wreg free
  6599  015C' C037' FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6600  0160' C038' FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6601  0164' 0100               	movlb	0	; () banked
  6602  0166' 5100'              	movf	?___lmul& (0+255),w,b
  6603  0168' 5EDE               	subwf	postinc2,f,c
  6604  016A' 0100               	movlb	0	; () banked
  6605  016C' 5100'              	movf	(?___lmul+1)& (0+255),w,b
  6606  016E' 5ADE               	subwfb	postinc2,f,c
  6607  0170' 0100               	movlb	0	; () banked
  6608  0172' 5100'              	movf	(?___lmul+2)& (0+255),w,b
  6609  0174' 5ADE               	subwfb	postinc2,f,c
  6610  0176' 0100               	movlb	0	; () banked
  6611  0178' 5100'              	movf	(?___lmul+3)& (0+255),w,b
  6612  017A' 5ADE               	subwfb	postinc2,f,c
  6613                           
  6614                           ; BSR set to: 0
  6615  017C' 0100               	movlb	0	; () banked
  6616  017E' 0700'              	decf	RTCC_adjust_time_dec@i& (0+255),f,b
  6617  0180' D7C8               	goto	l7843
  6618  0182'                    l7853:
  6619                           
  6620                           ; BSR set to: 0
  6621                           ;My_header\My_RTCC.h: 352: }
  6622                           ;My_header\My_RTCC.h: 353: for (uint8_t i = 12; i > ct->MM; i--) {
  6623  0182' 0E0C               	movlw	12
  6624  0184' 0100               	movlb	0	; () banked
  6625  0186' 6F00'              	movwf	RTCC_adjust_time_dec@i_2036& (0+255),b
  6626  0188' D036               	goto	l7859
  6627  018A'                    l7855:
  6628                           
  6629                           ; BSR set to: 0
  6630                           ;My_header\My_RTCC.h: 354: *ep -= ((epoch_t)60*60*24) * month_length(ct->YY - 1, i);
  6631  018A' C03D' F002'        	movff	RTCC_adjust_time_dec@i_2036,month_length@month
  6632  018E' 0100               	movlb	0	; () banked
  6633  0190' EE20 F006          	lfsr	2,6
  6634  0194' 5100'              	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  6635  0196' 26D9               	addwf	fsr2l,f,c
  6636  0198' 5100'              	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  6637  019A' 22DA               	addwfc	fsr2h,f,c
  6638  019C' 50DF               	movf	indf2,w,c
  6639  019E' 0100               	movlb	0	; () banked
  6640  01A0' 6F00'              	movwf	??_RTCC_adjust_time_dec& (0+255),b
  6641  01A2' 0100               	movlb	0	; () banked
  6642  01A4' 0500'              	decf	??_RTCC_adjust_time_dec& (0+255),w,b
  6643  01A6' EC00' F000'        	call	_month_length
  6644  01AA' 0100               	movlb	0	; () banked
  6645  01AC' 6F00'              	movwf	(??_RTCC_adjust_time_dec+1)& (0+255),b
  6646  01AE' 0100               	movlb	0	; () banked
  6647  01B0' 5100'              	movf	(??_RTCC_adjust_time_dec+1)& (0+255),w,b
  6648  01B2' 0100               	movlb	0	; () banked
  6649  01B4' 6F00'              	movwf	___lmul@multiplier& (0+255),b
  6650  01B6' 6B00'              	clrf	(___lmul@multiplier+1)& (0+255),b
  6651  01B8' 6B00'              	clrf	(___lmul@multiplier+2)& (0+255),b
  6652  01BA' 6B00'              	clrf	(___lmul@multiplier+3)& (0+255),b
  6653  01BC' 0E80               	movlw	128
  6654  01BE' 0100               	movlb	0	; () banked
  6655  01C0' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
  6656  01C2' 0E51               	movlw	81
  6657  01C4' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
  6658  01C6' 0E01               	movlw	1
  6659  01C8' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
  6660  01CA' 0E00               	movlw	0
  6661  01CC' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
  6662  01CE' EC00' F000'        	call	___lmul	;wreg free
  6663  01D2' C037' FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6664  01D6' C038' FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6665  01DA' 0100               	movlb	0	; () banked
  6666  01DC' 5100'              	movf	?___lmul& (0+255),w,b
  6667  01DE' 5EDE               	subwf	postinc2,f,c
  6668  01E0' 0100               	movlb	0	; () banked
  6669  01E2' 5100'              	movf	(?___lmul+1)& (0+255),w,b
  6670  01E4' 5ADE               	subwfb	postinc2,f,c
  6671  01E6' 0100               	movlb	0	; () banked
  6672  01E8' 5100'              	movf	(?___lmul+2)& (0+255),w,b
  6673  01EA' 5ADE               	subwfb	postinc2,f,c
  6674  01EC' 0100               	movlb	0	; () banked
  6675  01EE' 5100'              	movf	(?___lmul+3)& (0+255),w,b
  6676  01F0' 5ADE               	subwfb	postinc2,f,c
  6677                           
  6678                           ; BSR set to: 0
  6679  01F2' 0100               	movlb	0	; () banked
  6680  01F4' 0700'              	decf	RTCC_adjust_time_dec@i_2036& (0+255),f,b
  6681  01F6'                    l7859:
  6682                           
  6683                           ; BSR set to: 0
  6684  01F6' 0100               	movlb	0	; () banked
  6685  01F8' EE20 F005          	lfsr	2,5
  6686  01FC' 5100'              	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  6687  01FE' 26D9               	addwf	fsr2l,f,c
  6688  0200' 5100'              	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  6689  0202' 22DA               	addwfc	fsr2h,f,c
  6690  0204' 0100               	movlb	0	; () banked
  6691  0206' 5100'              	movf	RTCC_adjust_time_dec@i_2036& (0+255),w,b
  6692  0208' 5CDE               	subwf	postinc2,w,c
  6693  020A' A0D8               	btfss	status,0,c
  6694  020C' D7BE               	goto	l7855
  6695  020E'                    l7861:
  6696                           
  6697                           ; BSR set to: 0
  6698                           ;My_header\My_RTCC.h: 355: }
  6699                           ;My_header\My_RTCC.h: 356: }
  6700                           ;My_header\My_RTCC.h: 358: if (*ep >= 3155760000)*ep += 3155760000;
  6701  020E' C037' FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6702  0212' C038' FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6703  0216' 0E80               	movlw	128
  6704  0218' 5CDE               	subwf	postinc2,w,c
  6705  021A' 0E13               	movlw	19
  6706  021C' 58DE               	subwfb	postinc2,w,c
  6707  021E' 0E19               	movlw	25
  6708  0220' 58DE               	subwfb	postinc2,w,c
  6709  0222' 0EBC               	movlw	188
  6710  0224' 58DE               	subwfb	postinc2,w,c
  6711  0226' A0D8               	btfss	status,0,c
  6712  0228' D00C               	goto	l7865
  6713                           
  6714                           ; BSR set to: 0
  6715  022A' C037' FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6716  022E' C038' FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6717  0232' 0E80               	movlw	128
  6718  0234' 26DE               	addwf	postinc2,f,c
  6719  0236' 0E13               	movlw	19
  6720  0238' 22DE               	addwfc	postinc2,f,c
  6721  023A' 0E19               	movlw	25
  6722  023C' 22DE               	addwfc	postinc2,f,c
  6723  023E' 0EBC               	movlw	188
  6724  0240' 22DE               	addwfc	postinc2,f,c
  6725  0242'                    l7865:
  6726                           
  6727                           ; BSR set to: 0
  6728                           ;My_header\My_RTCC.h: 359: RTCC_from_epoch(&caltime_now, &epoch_now);
  6729  0242' 0E00'              	movlw	low _caltime_now
  6730  0244' 0100               	movlb	0	; () banked
  6731  0246' 6F00'              	movwf	RTCC_from_epoch@ct& (0+255),b
  6732  0248' 0E00'              	movlw	high _caltime_now
  6733  024A' 0100               	movlb	0	; () banked
  6734  024C' 6F00'              	movwf	(RTCC_from_epoch@ct+1)& (0+255),b
  6735  024E' 0E00'              	movlw	low _epoch_now
  6736  0250' 0100               	movlb	0	; () banked
  6737  0252' 6F00'              	movwf	RTCC_from_epoch@ep& (0+255),b
  6738  0254' 0E00'              	movlw	high _epoch_now
  6739  0256' 0100               	movlb	0	; () banked
  6740  0258' 6F00'              	movwf	(RTCC_from_epoch@ep+1)& (0+255),b
  6741  025A' EC00' F000'        	call	_RTCC_from_epoch	;wreg free
  6742                           
  6743                           ;My_header\My_RTCC.h: 360: time_change_flag = 1;
  6744  025E' 0E01               	movlw	1
  6745  0260' 0100               	movlb	0	; () banked
  6746  0262' 6F00'              	movwf	_time_change_flag& (0+255),b
  6747                           
  6748                           ; BSR set to: 0
  6749  0264' 0012               	return		;funcret
  6750  0266'                    __end_of_RTCC_adjust_time_dec:
  6751                           	opt stack 0
  6752                           tblptru	equ	0xFF8
  6753                           tblptrh	equ	0xFF7
  6754                           tblptrl	equ	0xFF6
  6755                           tablat	equ	0xFF5
  6756                           prodh	equ	0xFF4
  6757                           prodl	equ	0xFF3
  6758                           intcon	equ	0xFF2
  6759                           indf0	equ	0xFEF
  6760                           postinc0	equ	0xFEE
  6761                           fsr0h	equ	0xFEA
  6762                           fsr0l	equ	0xFE9
  6763                           wreg	equ	0xFE8
  6764                           postdec1	equ	0xFE5
  6765                           fsr1h	equ	0xFE2
  6766                           fsr1l	equ	0xFE1
  6767                           indf2	equ	0xFDF
  6768                           postinc2	equ	0xFDE
  6769                           postdec2	equ	0xFDD
  6770                           fsr2h	equ	0xFDA
  6771                           fsr2l	equ	0xFD9
  6772                           status	equ	0xFD8
  6773                           
  6774 ;; *************** function _RTCC_from_epoch *****************
  6775 ;; Defined at:
  6776 ;;		line 242 in file "../My_header\My_RTCC.h"
  6777 ;; Parameters:    Size  Location     Type
  6778 ;;  ct              2   49[BANK0 ] PTR struct .
  6779 ;;		 -> caltime_now(7), 
  6780 ;;  ep              2   51[BANK0 ] PTR unsigned long 
  6781 ;;		 -> epoch_now(4), 
  6782 ;; Auto vars:     Size  Location     Type
  6783 ;;		None
  6784 ;; Return value:  Size  Location     Type
  6785 ;;		None               void
  6786 ;; Registers used:
  6787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6788 ;; Tracked objects:
  6789 ;;		On entry : 0/0
  6790 ;;		On exit  : 0/0
  6791 ;;		Unchanged: 0/0
  6792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6793 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6796 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6797 ;;Total ram usage:        4 bytes
  6798 ;; Hardware stack levels used:    1
  6799 ;; Hardware stack levels required when called:    6
  6800 ;; This function calls:
  6801 ;;		_caltime_to_RTCC
  6802 ;;		_epoch_to_caltime
  6803 ;; This function is called by:
  6804 ;;		_RTCC_adjust_time_inc
  6805 ;;		_RTCC_adjust_time_dec
  6806 ;;		_main
  6807 ;; This function uses a non-reentrant model
  6808 ;;
  6809                           
  6810                           	psect	text9
  6811  0000'                    __ptext9:
  6812                           	opt stack 0
  6813  0000'                    _RTCC_from_epoch:
  6814                           	opt stack 21
  6815                           
  6816                           ;My_header\My_RTCC.h: 243: epoch_to_caltime(ct, ep);
  6817                           
  6818                           ; BSR set to: 0
  6819                           ;incstack = 0
  6820  0000' C031' F021'        	movff	RTCC_from_epoch@ct,epoch_to_caltime@ct
  6821  0004' C032' F022'        	movff	RTCC_from_epoch@ct+1,epoch_to_caltime@ct+1
  6822  0008' C033' F023'        	movff	RTCC_from_epoch@ep,epoch_to_caltime@ep
  6823  000C' C034' F024'        	movff	RTCC_from_epoch@ep+1,epoch_to_caltime@ep+1
  6824  0010' EC00' F000'        	call	_epoch_to_caltime	;wreg free
  6825                           
  6826                           ;My_header\My_RTCC.h: 244: caltime_to_RTCC(ct);
  6827  0014' C031' F005'        	movff	RTCC_from_epoch@ct,caltime_to_RTCC@ct
  6828  0018' C032' F006'        	movff	RTCC_from_epoch@ct+1,caltime_to_RTCC@ct+1
  6829  001C' EC00' F000'        	call	_caltime_to_RTCC	;wreg free
  6830  0020' 0012               	return		;funcret
  6831  0022'                    __end_of_RTCC_from_epoch:
  6832                           	opt stack 0
  6833                           tblptru	equ	0xFF8
  6834                           tblptrh	equ	0xFF7
  6835                           tblptrl	equ	0xFF6
  6836                           tablat	equ	0xFF5
  6837                           prodh	equ	0xFF4
  6838                           prodl	equ	0xFF3
  6839                           intcon	equ	0xFF2
  6840                           indf0	equ	0xFEF
  6841                           postinc0	equ	0xFEE
  6842                           fsr0h	equ	0xFEA
  6843                           fsr0l	equ	0xFE9
  6844                           wreg	equ	0xFE8
  6845                           postdec1	equ	0xFE5
  6846                           fsr1h	equ	0xFE2
  6847                           fsr1l	equ	0xFE1
  6848                           indf2	equ	0xFDF
  6849                           postinc2	equ	0xFDE
  6850                           postdec2	equ	0xFDD
  6851                           fsr2h	equ	0xFDA
  6852                           fsr2l	equ	0xFD9
  6853                           status	equ	0xFD8
  6854                           
  6855 ;; *************** function _RTCC_adjust_time_cursor *****************
  6856 ;; Defined at:
  6857 ;;		line 311 in file "../My_header\My_RTCC.h"
  6858 ;; Parameters:    Size  Location     Type
  6859 ;;		None
  6860 ;; Auto vars:     Size  Location     Type
  6861 ;;		None
  6862 ;; Return value:  Size  Location     Type
  6863 ;;		None               void
  6864 ;; Registers used:
  6865 ;;		wreg, status,2
  6866 ;; Tracked objects:
  6867 ;;		On entry : 0/0
  6868 ;;		On exit  : 0/0
  6869 ;;		Unchanged: 0/0
  6870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6875 ;;Total ram usage:        0 bytes
  6876 ;; Hardware stack levels used:    1
  6877 ;; Hardware stack levels required when called:    3
  6878 ;; This function calls:
  6879 ;;		Nothing
  6880 ;; This function is called by:
  6881 ;;		_settings_loop
  6882 ;;		_RTCC_adjust_time_button
  6883 ;; This function uses a non-reentrant model
  6884 ;;
  6885                           
  6886                           	psect	text10
  6887  0000'                    __ptext10:
  6888                           	opt stack 0
  6889  0000'                    _RTCC_adjust_time_cursor:
  6890                           	opt stack 25
  6891                           
  6892                           ;My_header\My_RTCC.h: 312: if (edit_flag.flag.ss)edit_flag.flags = 0x02;
  6893                           
  6894                           ;incstack = 0
  6895  0000' 0100               	movlb	0	; () banked
  6896  0002' A100'              	btfss	_edit_flag& (0+255),0,b
  6897  0004' D004               	goto	l512
  6898                           
  6899                           ; BSR set to: 0
  6900  0006' 0E02               	movlw	2
  6901  0008' 0100               	movlb	0	; () banked
  6902  000A' 6F00'              	movwf	_edit_flag& (0+255),b
  6903  000C' 0012               	return	
  6904  000E'                    l512:
  6905                           
  6906                           ; BSR set to: 0
  6907                           ;My_header\My_RTCC.h: 313: else if (edit_flag.flag.mm)edit_flag.flags = 0x04;
  6908  000E' 0100               	movlb	0	; () banked
  6909  0010' A300'              	btfss	_edit_flag& (0+255),1,b
  6910  0012' D004               	goto	l514
  6911                           
  6912                           ; BSR set to: 0
  6913  0014' 0E04               	movlw	4
  6914  0016' 0100               	movlb	0	; () banked
  6915  0018' 6F00'              	movwf	_edit_flag& (0+255),b
  6916  001A' 0012               	return	
  6917  001C'                    l514:
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;My_header\My_RTCC.h: 314: else if (edit_flag.flag.hh)edit_flag.flags = 0x08;
  6921  001C' 0100               	movlb	0	; () banked
  6922  001E' A500'              	btfss	_edit_flag& (0+255),2,b
  6923  0020' D004               	goto	l516
  6924                           
  6925                           ; BSR set to: 0
  6926  0022' 0E08               	movlw	8
  6927  0024' 0100               	movlb	0	; () banked
  6928  0026' 6F00'              	movwf	_edit_flag& (0+255),b
  6929  0028' 0012               	return	
  6930  002A'                    l516:
  6931                           
  6932                           ; BSR set to: 0
  6933                           ;My_header\My_RTCC.h: 315: else if (edit_flag.flag.DD)edit_flag.flags = 0x10;
  6934  002A' 0100               	movlb	0	; () banked
  6935  002C' A700'              	btfss	_edit_flag& (0+255),3,b
  6936  002E' D004               	goto	l518
  6937                           
  6938                           ; BSR set to: 0
  6939  0030' 0E10               	movlw	16
  6940  0032' 0100               	movlb	0	; () banked
  6941  0034' 6F00'              	movwf	_edit_flag& (0+255),b
  6942  0036' 0012               	return	
  6943  0038'                    l518:
  6944                           
  6945                           ; BSR set to: 0
  6946                           ;My_header\My_RTCC.h: 316: else if (edit_flag.flag.MM)edit_flag.flags = 0x20;
  6947  0038' 0100               	movlb	0	; () banked
  6948  003A' A900'              	btfss	_edit_flag& (0+255),4,b
  6949  003C' D004               	goto	l520
  6950                           
  6951                           ; BSR set to: 0
  6952  003E' 0E20               	movlw	32
  6953  0040' 0100               	movlb	0	; () banked
  6954  0042' 6F00'              	movwf	_edit_flag& (0+255),b
  6955  0044' 0012               	return	
  6956  0046'                    l520:
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;My_header\My_RTCC.h: 317: else if (edit_flag.flag.YY)edit_flag.flags = 0x01;
  6960  0046' 0100               	movlb	0	; () banked
  6961  0048' AB00'              	btfss	_edit_flag& (0+255),5,b
  6962  004A' D004               	goto	l7763
  6963                           
  6964                           ; BSR set to: 0
  6965  004C' 0E01               	movlw	1
  6966  004E' 0100               	movlb	0	; () banked
  6967  0050' 6F00'              	movwf	_edit_flag& (0+255),b
  6968  0052' 0012               	return	
  6969  0054'                    l7763:
  6970                           
  6971                           ; BSR set to: 0
  6972                           ;My_header\My_RTCC.h: 318: else edit_flag.flags = 0x00;
  6973  0054' 0E00               	movlw	0
  6974  0056' 0100               	movlb	0	; () banked
  6975  0058' 6F00'              	movwf	_edit_flag& (0+255),b
  6976                           
  6977                           ; BSR set to: 0
  6978                           
  6979                           ; BSR set to: 0
  6980                           
  6981                           ; BSR set to: 0
  6982                           
  6983                           ; BSR set to: 0
  6984                           
  6985                           ; BSR set to: 0
  6986  005A' 0012               	return	
  6987  005C'                    __end_of_RTCC_adjust_time_cursor:
  6988                           	opt stack 0
  6989                           tblptru	equ	0xFF8
  6990                           tblptrh	equ	0xFF7
  6991                           tblptrl	equ	0xFF6
  6992                           tablat	equ	0xFF5
  6993                           prodh	equ	0xFF4
  6994                           prodl	equ	0xFF3
  6995                           intcon	equ	0xFF2
  6996                           indf0	equ	0xFEF
  6997                           postinc0	equ	0xFEE
  6998                           fsr0h	equ	0xFEA
  6999                           fsr0l	equ	0xFE9
  7000                           wreg	equ	0xFE8
  7001                           postdec1	equ	0xFE5
  7002                           fsr1h	equ	0xFE2
  7003                           fsr1l	equ	0xFE1
  7004                           indf2	equ	0xFDF
  7005                           postinc2	equ	0xFDE
  7006                           postdec2	equ	0xFDD
  7007                           fsr2h	equ	0xFDA
  7008                           fsr2l	equ	0xFD9
  7009                           status	equ	0xFD8
  7010                           
  7011 ;; *************** function _port_button_loop *****************
  7012 ;; Defined at:
  7013 ;;		line 475 in file "tasks.h"
  7014 ;; Parameters:    Size  Location     Type
  7015 ;;		None
  7016 ;; Auto vars:     Size  Location     Type
  7017 ;;  i               1    3[BANK0 ] unsigned char 
  7018 ;; Return value:  Size  Location     Type
  7019 ;;		None               void
  7020 ;; Registers used:
  7021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7022 ;; Tracked objects:
  7023 ;;		On entry : 0/0
  7024 ;;		On exit  : 0/0
  7025 ;;		Unchanged: 0/0
  7026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7028 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7030 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7031 ;;Total ram usage:        1 bytes
  7032 ;; Hardware stack levels used:    1
  7033 ;; Hardware stack levels required when called:    5
  7034 ;; This function calls:
  7035 ;;		_LED_OUT
  7036 ;;		_OUT
  7037 ;;		_display_now
  7038 ;;		_display_reserve
  7039 ;; This function is called by:
  7040 ;;		_normal_loop
  7041 ;; This function uses a non-reentrant model
  7042 ;;
  7043                           
  7044                           	psect	text11
  7045  0000'                    __ptext11:
  7046                           	opt stack 0
  7047  0000'                    _port_button_loop:
  7048                           	opt stack 24
  7049                           
  7050                           ;tasks.h: 476: uint8_t i;
  7051                           ;tasks.h: 477: for (i = 0; i < 3; i++) {
  7052                           
  7053                           ; BSR set to: 0
  7054                           ;incstack = 0
  7055  0000' 0E00               	movlw	0
  7056  0002' 0100               	movlb	0	; () banked
  7057  0004' 6F00'              	movwf	port_button_loop@i& (0+255),b
  7058  0006'                    l8513:
  7059                           
  7060                           ; BSR set to: 0
  7061  0006' 0E02               	movlw	2
  7062  0008' 0100               	movlb	0	; () banked
  7063  000A' 6500'              	cpfsgt	port_button_loop@i& (0+255),b
  7064  000C' D001               	goto	l8517
  7065  000E' 0012               	return	
  7066  0010'                    l8517:
  7067                           
  7068                           ; BSR set to: 0
  7069                           ;tasks.h: 479: if (port[i].ctmu.flag.pressing) {
  7070  0010' 0100               	movlb	0	; () banked
  7071  0012' 5100'              	movf	port_button_loop@i& (0+255),w,b
  7072  0014' 0D17               	mullw	23
  7073  0016' 0E03               	movlw	3
  7074  0018' 26F3               	addwf	prodl,f,c
  7075  001A' 0E00               	movlw	0
  7076  001C' 22F4               	addwfc	prodh,f,c
  7077  001E' 0E00'              	movlw	low _port
  7078  0020' 24F3               	addwf	prodl,w,c
  7079  0022' 6ED9               	movwf	fsr2l,c
  7080  0024' 0E00'              	movlw	high _port
  7081  0026' 20F4               	addwfc	prodh,w,c
  7082  0028' 6EDA               	movwf	fsr2h,c
  7083  002A' 0101               	movlb	1	; () banked
  7084  002C' A0DF               	btfss	indf2,0,c
  7085  002E' D007               	goto	l8521
  7086                           
  7087                           ; BSR set to: 1
  7088                           ;tasks.h: 480: LED_OUT(i, 1);
  7089  0030' 0E01               	movlw	1
  7090  0032' 6E1E'              	movwf	LED_OUT@value,c
  7091  0034' 0100               	movlb	0	; () banked
  7092  0036' 5100'              	movf	port_button_loop@i& (0+255),w,b
  7093  0038' EC00' F000'        	call	_LED_OUT
  7094                           
  7095                           ;tasks.h: 481: } else if (port[i].flag.led_indicator_ON == 0 && port[i].flag.led_flag ==
      +                           1) {
  7096  003C' D026               	goto	l8527
  7097  003E'                    l8521:
  7098  003E' 0100               	movlb	0	; () banked
  7099  0040' 5100'              	movf	port_button_loop@i& (0+255),w,b
  7100  0042' 0D17               	mullw	23
  7101  0044' 0E16               	movlw	22
  7102  0046' 26F3               	addwf	prodl,f,c
  7103  0048' 0E00               	movlw	0
  7104  004A' 22F4               	addwfc	prodh,f,c
  7105  004C' 0E00'              	movlw	low _port
  7106  004E' 24F3               	addwf	prodl,w,c
  7107  0050' 6ED9               	movwf	fsr2l,c
  7108  0052' 0E00'              	movlw	high _port
  7109  0054' 20F4               	addwfc	prodh,w,c
  7110  0056' 6EDA               	movwf	fsr2h,c
  7111  0058' 0101               	movlb	1	; () banked
  7112  005A' B2DF               	btfsc	indf2,1,c
  7113  005C' D016               	goto	l8527
  7114                           
  7115                           ; BSR set to: 1
  7116  005E' 0100               	movlb	0	; () banked
  7117  0060' 5100'              	movf	port_button_loop@i& (0+255),w,b
  7118  0062' 0D17               	mullw	23
  7119  0064' 0E16               	movlw	22
  7120  0066' 26F3               	addwf	prodl,f,c
  7121  0068' 0E00               	movlw	0
  7122  006A' 22F4               	addwfc	prodh,f,c
  7123  006C' 0E00'              	movlw	low _port
  7124  006E' 24F3               	addwf	prodl,w,c
  7125  0070' 6ED9               	movwf	fsr2l,c
  7126  0072' 0E00'              	movlw	high _port
  7127  0074' 20F4               	addwfc	prodh,w,c
  7128  0076' 6EDA               	movwf	fsr2h,c
  7129  0078' 0101               	movlb	1	; () banked
  7130  007A' A6DF               	btfss	indf2,3,c
  7131  007C' D006               	goto	l8527
  7132                           
  7133                           ; BSR set to: 1
  7134                           ;tasks.h: 482: LED_OUT(i, 0);
  7135  007E' 0E00               	movlw	0
  7136  0080' 6E1E'              	movwf	LED_OUT@value,c
  7137  0082' 0100               	movlb	0	; () banked
  7138  0084' 5100'              	movf	port_button_loop@i& (0+255),w,b
  7139  0086' EC00' F000'        	call	_LED_OUT
  7140  008A'                    l8527:
  7141                           
  7142                           ;tasks.h: 483: }
  7143                           ;tasks.h: 485: if (port[i].ctmu.flag.press) {
  7144  008A' 0100               	movlb	0	; () banked
  7145  008C' 5100'              	movf	port_button_loop@i& (0+255),w,b
  7146  008E' 0D17               	mullw	23
  7147  0090' 0E02               	movlw	2
  7148  0092' 26F3               	addwf	prodl,f,c
  7149  0094' 0E00               	movlw	0
  7150  0096' 22F4               	addwfc	prodh,f,c
  7151  0098' 0E00'              	movlw	low _port
  7152  009A' 24F3               	addwf	prodl,w,c
  7153  009C' 6ED9               	movwf	fsr2l,c
  7154  009E' 0E00'              	movlw	high _port
  7155  00A0' 20F4               	addwfc	prodh,w,c
  7156  00A2' 6EDA               	movwf	fsr2h,c
  7157  00A4' 0101               	movlb	1	; () banked
  7158  00A6' A0DF               	btfss	indf2,0,c
  7159  00A8' D067               	goto	l8559
  7160                           
  7161                           ; BSR set to: 1
  7162                           ;tasks.h: 486: port[i].ctmu.flags = 0;
  7163  00AA' 0100               	movlb	0	; () banked
  7164  00AC' 5100'              	movf	port_button_loop@i& (0+255),w,b
  7165  00AE' 0D17               	mullw	23
  7166  00B0' 0E02               	movlw	2
  7167  00B2' 26F3               	addwf	prodl,f,c
  7168  00B4' 0E00               	movlw	0
  7169  00B6' 22F4               	addwfc	prodh,f,c
  7170  00B8' 0E00'              	movlw	low _port
  7171  00BA' 24F3               	addwf	prodl,w,c
  7172  00BC' 6ED9               	movwf	fsr2l,c
  7173  00BE' 0E00'              	movlw	high _port
  7174  00C0' 20F4               	addwfc	prodh,w,c
  7175  00C2' 6EDA               	movwf	fsr2h,c
  7176  00C4' 0E00               	movlw	0
  7177  00C6' 6EDE               	movwf	postinc2,c
  7178  00C8' 0E00               	movlw	0
  7179  00CA' 6EDD               	movwf	postdec2,c
  7180                           
  7181                           ; BSR set to: 0
  7182                           ;tasks.h: 487: LED_OUT(i, 0);
  7183  00CC' 0E00               	movlw	0
  7184  00CE' 6E1E'              	movwf	LED_OUT@value,c
  7185  00D0' 0100               	movlb	0	; () banked
  7186  00D2' 5100'              	movf	port_button_loop@i& (0+255),w,b
  7187  00D4' EC00' F000'        	call	_LED_OUT
  7188                           
  7189                           ;tasks.h: 489: if (!port[i].flag.out_flag) {
  7190  00D8' 0100               	movlb	0	; () banked
  7191  00DA' 5100'              	movf	port_button_loop@i& (0+255),w,b
  7192  00DC' 0D17               	mullw	23
  7193  00DE' 0E16               	movlw	22
  7194  00E0' 26F3               	addwf	prodl,f,c
  7195  00E2' 0E00               	movlw	0
  7196  00E4' 22F4               	addwfc	prodh,f,c
  7197  00E6' 0E00'              	movlw	low _port
  7198  00E8' 24F3               	addwf	prodl,w,c
  7199  00EA' 6ED9               	movwf	fsr2l,c
  7200  00EC' 0E00'              	movlw	high _port
  7201  00EE' 20F4               	addwfc	prodh,w,c
  7202  00F0' 6EDA               	movwf	fsr2h,c
  7203  00F2' 0101               	movlb	1	; () banked
  7204  00F4' B4DF               	btfsc	indf2,2,c
  7205  00F6' D00C               	goto	l8539
  7206                           
  7207                           ; BSR set to: 1
  7208                           ;tasks.h: 490: display_now(START_CHARGING);
  7209  00F8' 0E02               	movlw	2
  7210  00FA' EC00' F000'        	call	_display_now
  7211                           
  7212                           ;tasks.h: 491: display_reserve(PRINT_DATA, 32);
  7213  00FE' 0E00               	movlw	0
  7214  0100' 0100               	movlb	0	; () banked
  7215  0102' 6F00'              	movwf	(display_reserve@time+1)& (0+255),b
  7216  0104' 0E20               	movlw	32
  7217  0106' 6F00'              	movwf	display_reserve@time& (0+255),b
  7218  0108' 0E03               	movlw	3
  7219  010A' EC00' F000'        	call	_display_reserve
  7220                           
  7221                           ;tasks.h: 492: } else {
  7222  010E' D003               	goto	l8541
  7223  0110'                    l8539:
  7224                           
  7225                           ;tasks.h: 493: display_now(PRINT_DATA);
  7226  0110' 0E03               	movlw	3
  7227  0112' EC00' F000'        	call	_display_now
  7228  0116'                    l8541:
  7229                           
  7230                           ;tasks.h: 494: }
  7231                           ;tasks.h: 497: if (print_port == i) {
  7232  0116' 0100               	movlb	0	; () banked
  7233  0118' 5100'              	movf	port_button_loop@i& (0+255),w,b
  7234  011A' 180F'              	xorwf	_print_port,w,c
  7235  011C' B4D8               	btfsc	status,2,c
  7236  011E' D009               	goto	l8553
  7237  0120' D012               	goto	l889
  7238  0122'                    l8545:
  7239                           
  7240                           ; BSR set to: 0
  7241                           ;tasks.h: 500: print_data = INTEGRATED_CURRENT;
  7242  0122' 0E01               	movlw	1
  7243  0124' D003               	goto	L2
  7244  0126'                    l8547:
  7245                           
  7246                           ; BSR set to: 0
  7247                           ;tasks.h: 503: print_data = INTEGRATED_TIME;
  7248  0126' 0E02               	movlw	2
  7249  0128' D001               	goto	L2
  7250  012A'                    l8549:
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;tasks.h: 507: print_data = CURRENT;
  7254  012A' 0E00               	movlw	0
  7255  012C'                    L2:
  7256  012C' 0100               	movlb	0	; () banked
  7257  012E' 6F00'              	movwf	_print_data& (0+255),b
  7258                           
  7259                           ; BSR set to: 0
  7260                           ;tasks.h: 509: }
  7261                           
  7262                           ;tasks.h: 508: break;
  7263  0130' D00C               	goto	l8555
  7264  0132'                    l8553:
  7265                           
  7266                           ; BSR set to: 0
  7267  0132' 0100               	movlb	0	; () banked
  7268  0134' 5100'              	movf	_print_data& (0+255),w,b
  7269                           
  7270                           ; Switch size 1, requested type "space"
  7271                           ; Number of cases is 3, Range of values is 0 to 2
  7272                           ; switch strategies available:
  7273                           ; Name         Instructions Cycles
  7274                           ; simple_byte           10     6 (average)
  7275                           ;	Chosen strategy is simple_byte
  7276  0136' 0A00               	xorlw	0	; case 0
  7277  0138' B4D8               	btfsc	status,2,c
  7278  013A' D7F3               	goto	l8545
  7279  013C' 0A01               	xorlw	1	; case 1
  7280  013E' B4D8               	btfsc	status,2,c
  7281  0140' D7F2               	goto	l8547
  7282  0142' 0A03               	xorlw	3	; case 2
  7283  0144' D7F2               	goto	l8549
  7284  0146'                    l889:
  7285                           
  7286                           ; BSR set to: 0
  7287                           ;tasks.h: 511: print_port = i;
  7288  0146' C003' F00F'        	movff	port_button_loop@i,_print_port
  7289  014A'                    l8555:
  7290                           
  7291                           ; BSR set to: 0
  7292                           ;tasks.h: 512: }
  7293                           ;tasks.h: 514: OUT(i, 1);
  7294  014A' 0E01               	movlw	1
  7295  014C' 6E1E'              	movwf	OUT@value,c
  7296  014E' 0100               	movlb	0	; () banked
  7297  0150' 5100'              	movf	port_button_loop@i& (0+255),w,b
  7298  0152' EC00' F000'        	call	_OUT
  7299                           
  7300                           ;tasks.h: 515: port[i].cut_cnt = 0;
  7301  0156' 0100               	movlb	0	; () banked
  7302  0158' 5100'              	movf	port_button_loop@i& (0+255),w,b
  7303  015A' 0D17               	mullw	23
  7304  015C' 0E14               	movlw	20
  7305  015E' 26F3               	addwf	prodl,f,c
  7306  0160' 0E00               	movlw	0
  7307  0162' 22F4               	addwfc	prodh,f,c
  7308  0164' 0E00'              	movlw	low _port
  7309  0166' 24F3               	addwf	prodl,w,c
  7310  0168' 6ED9               	movwf	fsr2l,c
  7311  016A' 0E00'              	movlw	high _port
  7312  016C' 20F4               	addwfc	prodh,w,c
  7313  016E' 6EDA               	movwf	fsr2h,c
  7314  0170' 0E00               	movlw	0
  7315  0172' 6EDE               	movwf	postinc2,c
  7316  0174' 0E00               	movlw	0
  7317  0176' 6EDD               	movwf	postdec2,c
  7318  0178'                    l8559:
  7319  0178' 0100               	movlb	0	; () banked
  7320  017A' 2B00'              	incf	port_button_loop@i& (0+255),f,b
  7321  017C' D744               	goto	l8513
  7322  017E'                    __end_of_port_button_loop:
  7323                           	opt stack 0
  7324                           tblptru	equ	0xFF8
  7325                           tblptrh	equ	0xFF7
  7326                           tblptrl	equ	0xFF6
  7327                           tablat	equ	0xFF5
  7328                           prodh	equ	0xFF4
  7329                           prodl	equ	0xFF3
  7330                           intcon	equ	0xFF2
  7331                           indf0	equ	0xFEF
  7332                           postinc0	equ	0xFEE
  7333                           fsr0h	equ	0xFEA
  7334                           fsr0l	equ	0xFE9
  7335                           wreg	equ	0xFE8
  7336                           postdec1	equ	0xFE5
  7337                           fsr1h	equ	0xFE2
  7338                           fsr1l	equ	0xFE1
  7339                           indf2	equ	0xFDF
  7340                           postinc2	equ	0xFDE
  7341                           postdec2	equ	0xFDD
  7342                           fsr2h	equ	0xFDA
  7343                           fsr2l	equ	0xFD9
  7344                           status	equ	0xFD8
  7345                           
  7346 ;; *************** function _display_reserve *****************
  7347 ;; Defined at:
  7348 ;;		line 214 in file "tasks.h"
  7349 ;; Parameters:    Size  Location     Type
  7350 ;;  next_item       1    wreg     enum E9644
  7351 ;;  time            2    0[BANK0 ] unsigned int 
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;  next_item       1    2[BANK0 ] enum E9644
  7354 ;; Return value:  Size  Location     Type
  7355 ;;		None               void
  7356 ;; Registers used:
  7357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7363 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7364 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7366 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7367 ;;Total ram usage:        3 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; Hardware stack levels required when called:    4
  7370 ;; This function calls:
  7371 ;;		_delay_set
  7372 ;; This function is called by:
  7373 ;;		_port_button_loop
  7374 ;;		_sleep_loop
  7375 ;;		_main
  7376 ;; This function uses a non-reentrant model
  7377 ;;
  7378                           
  7379                           	psect	text12
  7380  0000'                    __ptext12:
  7381                           	opt stack 0
  7382  0000'                    _display_reserve:
  7383                           	opt stack 25
  7384                           
  7385                           ; BSR set to: 0
  7386                           ;incstack = 0
  7387                           ;display_reserve@next_item stored from wreg
  7388  0000' 0100               	movlb	0	; () banked
  7389  0002' 6F00'              	movwf	display_reserve@next_item& (0+255),b
  7390                           
  7391                           ;tasks.h: 215: next_print_item = next_item;
  7392  0004' C002' F00D'        	movff	display_reserve@next_item,_next_print_item
  7393                           
  7394                           ;tasks.h: 216: delay_set(&delay_display, time);
  7395  0008' 0E00'              	movlw	low _delay_display
  7396  000A' 6E1E'              	movwf	delay_set@d,c
  7397  000C' 0E00'              	movlw	high _delay_display
  7398  000E' 6E1F'              	movwf	delay_set@d+1,c
  7399  0010' C000' F020'        	movff	display_reserve@time,delay_set@value
  7400  0014' C001' F021'        	movff	display_reserve@time+1,delay_set@value+1
  7401  0018' EC00' F000'        	call	_delay_set	;wreg free
  7402  001C' 0012               	return		;funcret
  7403  001E'                    __end_of_display_reserve:
  7404                           	opt stack 0
  7405                           tblptru	equ	0xFF8
  7406                           tblptrh	equ	0xFF7
  7407                           tblptrl	equ	0xFF6
  7408                           tablat	equ	0xFF5
  7409                           prodh	equ	0xFF4
  7410                           prodl	equ	0xFF3
  7411                           intcon	equ	0xFF2
  7412                           indf0	equ	0xFEF
  7413                           postinc0	equ	0xFEE
  7414                           fsr0h	equ	0xFEA
  7415                           fsr0l	equ	0xFE9
  7416                           wreg	equ	0xFE8
  7417                           postdec1	equ	0xFE5
  7418                           fsr1h	equ	0xFE2
  7419                           fsr1l	equ	0xFE1
  7420                           indf2	equ	0xFDF
  7421                           postinc2	equ	0xFDE
  7422                           postdec2	equ	0xFDD
  7423                           fsr2h	equ	0xFDA
  7424                           fsr2l	equ	0xFD9
  7425                           status	equ	0xFD8
  7426                           
  7427 ;; *************** function _delay_set *****************
  7428 ;; Defined at:
  7429 ;;		line 349 in file "../My_header\My_header.h"
  7430 ;; Parameters:    Size  Location     Type
  7431 ;;  d               2   30[COMRAM] PTR struct Delay
  7432 ;;		 -> delay_display(3), 
  7433 ;;  value           2   32[COMRAM] unsigned int 
  7434 ;; Auto vars:     Size  Location     Type
  7435 ;;		None
  7436 ;; Return value:  Size  Location     Type
  7437 ;;		None               void
  7438 ;; Registers used:
  7439 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7440 ;; Tracked objects:
  7441 ;;		On entry : 0/0
  7442 ;;		On exit  : 0/0
  7443 ;;		Unchanged: 0/0
  7444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7445 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7448 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7449 ;;Total ram usage:        4 bytes
  7450 ;; Hardware stack levels used:    1
  7451 ;; Hardware stack levels required when called:    3
  7452 ;; This function calls:
  7453 ;;		Nothing
  7454 ;; This function is called by:
  7455 ;;		_display_reserve
  7456 ;; This function uses a non-reentrant model
  7457 ;;
  7458                           
  7459                           	psect	text13
  7460  0000'                    __ptext13:
  7461                           	opt stack 0
  7462  0000'                    _delay_set:
  7463                           	opt stack 25
  7464                           
  7465                           ;My_header\My_header.h: 350: d->cnt = value;
  7466                           
  7467                           ;incstack = 0
  7468  0000' EE20 F001          	lfsr	2,1
  7469  0004' 501E'              	movf	delay_set@d,w,c
  7470  0006' 26D9               	addwf	fsr2l,f,c
  7471  0008' 501F'              	movf	delay_set@d+1,w,c
  7472  000A' 22DA               	addwfc	fsr2h,f,c
  7473  000C' C020' FFDE         	movff	delay_set@value,postinc2
  7474  0010' C021' FFDD         	movff	delay_set@value+1,postdec2
  7475                           
  7476                           ;My_header\My_header.h: 351: d->flag = 0;
  7477  0014' C01E' FFD9         	movff	delay_set@d,fsr2l
  7478  0018' C01F' FFDA         	movff	delay_set@d+1,fsr2h
  7479  001C' 0E00               	movlw	0
  7480  001E' 6EDF               	movwf	indf2,c
  7481  0020' 0012               	return		;funcret
  7482  0022'                    __end_of_delay_set:
  7483                           	opt stack 0
  7484                           tblptru	equ	0xFF8
  7485                           tblptrh	equ	0xFF7
  7486                           tblptrl	equ	0xFF6
  7487                           tablat	equ	0xFF5
  7488                           prodh	equ	0xFF4
  7489                           prodl	equ	0xFF3
  7490                           intcon	equ	0xFF2
  7491                           indf0	equ	0xFEF
  7492                           postinc0	equ	0xFEE
  7493                           fsr0h	equ	0xFEA
  7494                           fsr0l	equ	0xFE9
  7495                           wreg	equ	0xFE8
  7496                           postdec1	equ	0xFE5
  7497                           fsr1h	equ	0xFE2
  7498                           fsr1l	equ	0xFE1
  7499                           indf2	equ	0xFDF
  7500                           postinc2	equ	0xFDE
  7501                           postdec2	equ	0xFDD
  7502                           fsr2h	equ	0xFDA
  7503                           fsr2l	equ	0xFD9
  7504                           status	equ	0xFD8
  7505                           
  7506 ;; *************** function _display_now *****************
  7507 ;; Defined at:
  7508 ;;		line 219 in file "tasks.h"
  7509 ;; Parameters:    Size  Location     Type
  7510 ;;  pres_item       1    wreg     enum E9644
  7511 ;; Auto vars:     Size  Location     Type
  7512 ;;  pres_item       1   30[COMRAM] enum E9644
  7513 ;; Return value:  Size  Location     Type
  7514 ;;		None               void
  7515 ;; Registers used:
  7516 ;;		wreg, status,2
  7517 ;; Tracked objects:
  7518 ;;		On entry : 0/0
  7519 ;;		On exit  : 0/0
  7520 ;;		Unchanged: 0/0
  7521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7523 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7525 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7526 ;;Total ram usage:        1 bytes
  7527 ;; Hardware stack levels used:    1
  7528 ;; Hardware stack levels required when called:    3
  7529 ;; This function calls:
  7530 ;;		Nothing
  7531 ;; This function is called by:
  7532 ;;		_port_button_loop
  7533 ;;		_settings_loop
  7534 ;;		_normal_loop
  7535 ;;		_sleep_loop
  7536 ;;		_main
  7537 ;; This function uses a non-reentrant model
  7538 ;;
  7539                           
  7540                           	psect	text14
  7541  0000'                    __ptext14:
  7542                           	opt stack 0
  7543  0000'                    _display_now:
  7544                           	opt stack 26
  7545                           
  7546                           ;incstack = 0
  7547                           ;display_now@pres_item stored from wreg
  7548  0000' 6E1E'              	movwf	display_now@pres_item,c
  7549                           
  7550                           ;tasks.h: 220: pres_print_item = pres_item;
  7551  0002' C01E' F00E'        	movff	display_now@pres_item,_pres_print_item
  7552                           
  7553                           ;tasks.h: 221: next_print_item = pres_item;
  7554  0006' C01E' F00D'        	movff	display_now@pres_item,_next_print_item
  7555                           
  7556                           ;tasks.h: 222: display_flag = 1;
  7557  000A' 0E01               	movlw	1
  7558  000C' 0100               	movlb	0	; () banked
  7559  000E' 6F00'              	movwf	_display_flag& (0+255),b
  7560                           
  7561                           ; BSR set to: 0
  7562  0010' 0012               	return		;funcret
  7563  0012'                    __end_of_display_now:
  7564                           	opt stack 0
  7565                           tblptru	equ	0xFF8
  7566                           tblptrh	equ	0xFF7
  7567                           tblptrl	equ	0xFF6
  7568                           tablat	equ	0xFF5
  7569                           prodh	equ	0xFF4
  7570                           prodl	equ	0xFF3
  7571                           intcon	equ	0xFF2
  7572                           indf0	equ	0xFEF
  7573                           postinc0	equ	0xFEE
  7574                           fsr0h	equ	0xFEA
  7575                           fsr0l	equ	0xFE9
  7576                           wreg	equ	0xFE8
  7577                           postdec1	equ	0xFE5
  7578                           fsr1h	equ	0xFE2
  7579                           fsr1l	equ	0xFE1
  7580                           indf2	equ	0xFDF
  7581                           postinc2	equ	0xFDE
  7582                           postdec2	equ	0xFDD
  7583                           fsr2h	equ	0xFDA
  7584                           fsr2l	equ	0xFD9
  7585                           status	equ	0xFD8
  7586                           
  7587 ;; *************** function _LED_OUT *****************
  7588 ;; Defined at:
  7589 ;;		line 140 in file "tasks.h"
  7590 ;; Parameters:    Size  Location     Type
  7591 ;;  b               1    wreg     unsigned char 
  7592 ;;  value           1   30[COMRAM] unsigned char 
  7593 ;; Auto vars:     Size  Location     Type
  7594 ;;  b               1   31[COMRAM] unsigned char 
  7595 ;; Return value:  Size  Location     Type
  7596 ;;		None               void
  7597 ;; Registers used:
  7598 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7599 ;; Tracked objects:
  7600 ;;		On entry : 0/0
  7601 ;;		On exit  : 0/0
  7602 ;;		Unchanged: 0/0
  7603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7604 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7605 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7607 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7608 ;;Total ram usage:        2 bytes
  7609 ;; Hardware stack levels used:    1
  7610 ;; Hardware stack levels required when called:    3
  7611 ;; This function calls:
  7612 ;;		Nothing
  7613 ;; This function is called by:
  7614 ;;		_port_button_loop
  7615 ;;		_sleep_loop
  7616 ;;		_main
  7617 ;; This function uses a non-reentrant model
  7618 ;;
  7619                           
  7620                           	psect	text15
  7621  0000'                    __ptext15:
  7622                           	opt stack 0
  7623  0000'                    _LED_OUT:
  7624                           	opt stack 26
  7625                           
  7626                           ; BSR set to: 0
  7627                           ;incstack = 0
  7628                           ;LED_OUT@b stored from wreg
  7629  0000' 6E1F'              	movwf	LED_OUT@b,c
  7630                           
  7631                           ;tasks.h: 141: port[b].flag.led_flag = value;
  7632  0002' 501F'              	movf	LED_OUT@b,w,c
  7633  0004' 0D17               	mullw	23
  7634  0006' 0E16               	movlw	22
  7635  0008' 26F3               	addwf	prodl,f,c
  7636  000A' 0E00               	movlw	0
  7637  000C' 22F4               	addwfc	prodh,f,c
  7638  000E' 0E00'              	movlw	low _port
  7639  0010' 24F3               	addwf	prodl,w,c
  7640  0012' 6ED9               	movwf	fsr2l,c
  7641  0014' 0E00'              	movlw	high _port
  7642  0016' 20F4               	addwfc	prodh,w,c
  7643  0018' 6EDA               	movwf	fsr2h,c
  7644  001A' B01E'              	btfsc	LED_OUT@value,0,c
  7645  001C' D003               	bra	u9805
  7646  001E' 0101               	movlb	1	; () banked
  7647  0020' 96DF               	bcf	indf2,3,c
  7648  0022' D002               	bra	u9806
  7649  0024'                    u9805:
  7650  0024' 0101               	movlb	1	; () banked
  7651  0026' 86DF               	bsf	indf2,3,c
  7652  0028'                    u9806:
  7653                           
  7654                           ;tasks.h: 142: switch (b) {
  7655  0028' D012               	goto	l7949
  7656  002A'                    l711:
  7657                           
  7658                           ;tasks.h: 144: LATB7 = value;
  7659  002A' A01E'              	btfss	LED_OUT@value,0,c
  7660  002C' D002               	goto	u9810
  7661  002E' 8E8A               	bsf	3978,7,c	;volatile
  7662  0030' 0012               	return	
  7663  0032'                    u9810:
  7664  0032' 9E8A               	bcf	3978,7,c	;volatile
  7665                           
  7666                           ;tasks.h: 145: break;
  7667  0034' 0012               	return	
  7668  0036'                    l713:
  7669                           
  7670                           ;tasks.h: 147: LATB6 = value;
  7671  0036' A01E'              	btfss	LED_OUT@value,0,c
  7672  0038' D002               	goto	u9830
  7673  003A' 8C8A               	bsf	3978,6,c	;volatile
  7674  003C' 0012               	return	
  7675  003E'                    u9830:
  7676  003E' 9C8A               	bcf	3978,6,c	;volatile
  7677                           
  7678                           ;tasks.h: 148: break;
  7679  0040' 0012               	return	
  7680  0042'                    l714:
  7681                           
  7682                           ;tasks.h: 150: LATC2 = value;
  7683  0042' A01E'              	btfss	LED_OUT@value,0,c
  7684  0044' D002               	goto	u9850
  7685  0046' 848B               	bsf	3979,2,c	;volatile
  7686  0048' 0012               	return	
  7687  004A'                    u9850:
  7688  004A' 948B               	bcf	3979,2,c	;volatile
  7689                           
  7690                           ;tasks.h: 152: }
  7691                           
  7692                           ;tasks.h: 151: break;
  7693  004C' 0012               	return	
  7694  004E'                    l7949:
  7695  004E' 501F'              	movf	LED_OUT@b,w,c
  7696                           
  7697                           ; Switch size 1, requested type "space"
  7698                           ; Number of cases is 3, Range of values is 0 to 2
  7699                           ; switch strategies available:
  7700                           ; Name         Instructions Cycles
  7701                           ; simple_byte           10     6 (average)
  7702                           ;	Chosen strategy is simple_byte
  7703  0050' 0A00               	xorlw	0	; case 0
  7704  0052' B4D8               	btfsc	status,2,c
  7705  0054' D7EA               	goto	l711
  7706  0056' 0A01               	xorlw	1	; case 1
  7707  0058' B4D8               	btfsc	status,2,c
  7708  005A' D7ED               	goto	l713
  7709  005C' 0A03               	xorlw	3	; case 2
  7710  005E' A4D8               	btfss	status,2,c
  7711  0060' 0012               	return	
  7712  0062' D7EF               	goto	l714
  7713  0064'                    __end_of_LED_OUT:
  7714                           	opt stack 0
  7715                           tblptru	equ	0xFF8
  7716                           tblptrh	equ	0xFF7
  7717                           tblptrl	equ	0xFF6
  7718                           tablat	equ	0xFF5
  7719                           prodh	equ	0xFF4
  7720                           prodl	equ	0xFF3
  7721                           intcon	equ	0xFF2
  7722                           indf0	equ	0xFEF
  7723                           postinc0	equ	0xFEE
  7724                           fsr0h	equ	0xFEA
  7725                           fsr0l	equ	0xFE9
  7726                           wreg	equ	0xFE8
  7727                           postdec1	equ	0xFE5
  7728                           fsr1h	equ	0xFE2
  7729                           fsr1l	equ	0xFE1
  7730                           indf2	equ	0xFDF
  7731                           postinc2	equ	0xFDE
  7732                           postdec2	equ	0xFDD
  7733                           fsr2h	equ	0xFDA
  7734                           fsr2l	equ	0xFD9
  7735                           status	equ	0xFD8
  7736                           
  7737 ;; *************** function _display_LCD *****************
  7738 ;; Defined at:
  7739 ;;		line 250 in file "tasks.h"
  7740 ;; Parameters:    Size  Location     Type
  7741 ;;		None
  7742 ;; Auto vars:     Size  Location     Type
  7743 ;;  str            10   57[BANK0 ] unsigned char [10]
  7744 ;; Return value:  Size  Location     Type
  7745 ;;		None               void
  7746 ;; Registers used:
  7747 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7748 ;; Tracked objects:
  7749 ;;		On entry : 0/0
  7750 ;;		On exit  : 0/0
  7751 ;;		Unchanged: 0/0
  7752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7754 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7756 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7757 ;;Total ram usage:       14 bytes
  7758 ;; Hardware stack levels used:    1
  7759 ;; Hardware stack levels required when called:    8
  7760 ;; This function calls:
  7761 ;;		_I2C_LCD_Clear
  7762 ;;		_I2C_LCD_Putc
  7763 ;;		_I2C_LCD_Puts
  7764 ;;		_I2C_LCD_SetCursor
  7765 ;;		___lldiv
  7766 ;;		___llmod
  7767 ;;		___lwdiv
  7768 ;;		___lwmod
  7769 ;;		_display_port
  7770 ;;		_display_time_1602
  7771 ;;		_my_utoa
  7772 ;;		_my_utoa32
  7773 ;; This function is called by:
  7774 ;;		_normal_loop
  7775 ;; This function uses a non-reentrant model
  7776 ;;
  7777                           
  7778                           	psect	text16
  7779  0000'                    __ptext16:
  7780                           	opt stack 0
  7781  0000'                    _display_LCD:
  7782                           	opt stack 21
  7783                           
  7784                           ;tasks.h: 251: I2C_LCD_Clear();
  7785                           
  7786                           ;incstack = 0
  7787  0000' EC00' F000'        	call	_I2C_LCD_Clear	;wreg free
  7788                           
  7789                           ;tasks.h: 252: switch (pres_print_item) {
  7790  0004' D27B               	goto	l8509
  7791  0006'                    l8427:
  7792                           
  7793                           ;tasks.h: 254: I2C_LCD_SetCursor(0, 0);
  7794  0006' 0E00               	movlw	0
  7795  0008' 0100               	movlb	0	; () banked
  7796  000A' 6F00'              	movwf	I2C_LCD_SetCursor@row& (0+255),b
  7797  000C' 0E00               	movlw	0
  7798  000E' EC00' F000'        	call	_I2C_LCD_SetCursor
  7799                           
  7800                           ;tasks.h: 255: I2C_LCD_Puts("Charge Station 6");
  7801  0012' 0E00'              	movlw	low STR_23
  7802  0014' 0100               	movlb	0	; () banked
  7803  0016' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
  7804  0018' 0E00'              	movlw	high STR_23
  7805  001A' 0100               	movlb	0	; () banked
  7806  001C' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  7807  001E' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
  7808                           
  7809                           ;tasks.h: 256: I2C_LCD_SetCursor(0, 1);
  7810  0022' 0E01               	movlw	1
  7811  0024' 0100               	movlb	0	; () banked
  7812  0026' 6F00'              	movwf	I2C_LCD_SetCursor@row& (0+255),b
  7813  0028' 0E00               	movlw	0
  7814  002A' EC00' F000'        	call	_I2C_LCD_SetCursor
  7815                           
  7816                           ;tasks.h: 257: I2C_LCD_Puts("Made by KERI");
  7817  002E' 0E00'              	movlw	low STR_24
  7818  0030' 0100               	movlb	0	; () banked
  7819  0032' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
  7820  0034' 0E00'              	movlw	high STR_24
  7821  0036' 0100               	movlb	0	; () banked
  7822  0038' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  7823  003A' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
  7824                           
  7825                           ;tasks.h: 258: break;
  7826  003E' 0012               	return	
  7827  0040'                    l8433:
  7828                           
  7829                           ;tasks.h: 260: display_time_1602(&caltime_now, &epoch_now);
  7830  0040' 0E00'              	movlw	low _caltime_now
  7831  0042' 0100               	movlb	0	; () banked
  7832  0044' 6F00'              	movwf	display_time_1602@ct& (0+255),b
  7833  0046' 0E00'              	movlw	high _caltime_now
  7834  0048' 0100               	movlb	0	; () banked
  7835  004A' 6F00'              	movwf	(display_time_1602@ct+1)& (0+255),b
  7836  004C' 0E00'              	movlw	low _epoch_now
  7837  004E' 0100               	movlb	0	; () banked
  7838  0050' 6F00'              	movwf	display_time_1602@ep& (0+255),b
  7839  0052' 0E00'              	movlw	high _epoch_now
  7840  0054' 0100               	movlb	0	; () banked
  7841  0056' 6F00'              	movwf	(display_time_1602@ep+1)& (0+255),b
  7842  0058' EC00' F000'        	call	_display_time_1602	;wreg free
  7843                           
  7844                           ;tasks.h: 261: break;
  7845  005C' 0012               	return	
  7846  005E'                    l8435:
  7847                           
  7848                           ;tasks.h: 263: display_port();
  7849  005E' EC00' F000'        	call	_display_port	;wreg free
  7850                           
  7851                           ;tasks.h: 264: I2C_LCD_SetCursor(0, 1);
  7852  0062' 0E01               	movlw	1
  7853  0064' 0100               	movlb	0	; () banked
  7854  0066' 6F00'              	movwf	I2C_LCD_SetCursor@row& (0+255),b
  7855  0068' 0E00               	movlw	0
  7856  006A' EC00' F000'        	call	_I2C_LCD_SetCursor
  7857                           
  7858                           ;tasks.h: 265: I2C_LCD_Puts("Start Charging");
  7859  006E' 0E00'              	movlw	low STR_25
  7860  0070' 0100               	movlb	0	; () banked
  7861  0072' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
  7862  0074' 0E00'              	movlw	high STR_25
  7863  0076' 0100               	movlb	0	; () banked
  7864  0078' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  7865  007A' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
  7866                           
  7867                           ;tasks.h: 266: break;
  7868  007E' 0012               	return	
  7869  0080'                    l8441:
  7870                           
  7871                           ;tasks.h: 270: display_port();
  7872  0080' EC00' F000'        	call	_display_port	;wreg free
  7873                           
  7874                           ;tasks.h: 271: I2C_LCD_SetCursor(0, 1);
  7875  0084' 0E01               	movlw	1
  7876  0086' 0100               	movlb	0	; () banked
  7877  0088' 6F00'              	movwf	I2C_LCD_SetCursor@row& (0+255),b
  7878  008A' 0E00               	movlw	0
  7879  008C' EC00' F000'        	call	_I2C_LCD_SetCursor
  7880                           
  7881                           ;tasks.h: 272: I2C_LCD_Putc((port[print_port].current % 10000) / 1000 + '0');
  7882  0090' 0E27               	movlw	39
  7883  0092' 6E21'              	movwf	___lwmod@divisor+1,c
  7884  0094' 0E10               	movlw	16
  7885  0096' 6E20'              	movwf	___lwmod@divisor,c
  7886  0098' 500F'              	movf	_print_port,w,c
  7887  009A' 0D17               	mullw	23
  7888  009C' 0E06               	movlw	6
  7889  009E' 26F3               	addwf	prodl,f,c
  7890  00A0' 0E00               	movlw	0
  7891  00A2' 22F4               	addwfc	prodh,f,c
  7892  00A4' 0E00'              	movlw	low _port
  7893  00A6' 24F3               	addwf	prodl,w,c
  7894  00A8' 6ED9               	movwf	fsr2l,c
  7895  00AA' 0E00'              	movlw	high _port
  7896  00AC' 20F4               	addwfc	prodh,w,c
  7897  00AE' 6EDA               	movwf	fsr2h,c
  7898  00B0' CFDE F01E'         	movff	postinc2,___lwmod@dividend
  7899  00B4' CFDD F01F'         	movff	postdec2,___lwmod@dividend+1
  7900  00B8' EC00' F000'        	call	___lwmod	;wreg free
  7901  00BC' C01E' F019'        	movff	?___lwmod,___lwdiv@dividend
  7902  00C0' C01F' F01A'        	movff	?___lwmod+1,___lwdiv@dividend+1
  7903  00C4' 0E03               	movlw	3
  7904  00C6' 0100               	movlb	0	; () banked
  7905  00C8' 6F00'              	movwf	(___lwdiv@divisor+1)& (0+255),b
  7906  00CA' 0EE8               	movlw	232
  7907  00CC' 6F00'              	movwf	___lwdiv@divisor& (0+255),b
  7908  00CE' EC00' F000'        	call	___lwdiv	;wreg free
  7909  00D2' 0100               	movlb	0	; () banked
  7910  00D4' 5100'              	movf	?___lwdiv& (0+255),w,b
  7911  00D6' 0F30               	addlw	48
  7912  00D8' EC00' F000'        	call	_I2C_LCD_Putc
  7913                           
  7914                           ;tasks.h: 273: I2C_LCD_Putc('.');
  7915  00DC' 0E2E               	movlw	46
  7916  00DE' EC00' F000'        	call	_I2C_LCD_Putc
  7917                           
  7918                           ;tasks.h: 274: I2C_LCD_Putc((port[print_port].current % 1000) / 100 + '0');
  7919  00E2' 0E03               	movlw	3
  7920  00E4' 6E21'              	movwf	___lwmod@divisor+1,c
  7921  00E6' 0EE8               	movlw	232
  7922  00E8' 6E20'              	movwf	___lwmod@divisor,c
  7923  00EA' 500F'              	movf	_print_port,w,c
  7924  00EC' 0D17               	mullw	23
  7925  00EE' 0E06               	movlw	6
  7926  00F0' 26F3               	addwf	prodl,f,c
  7927  00F2' 0E00               	movlw	0
  7928  00F4' 22F4               	addwfc	prodh,f,c
  7929  00F6' 0E00'              	movlw	low _port
  7930  00F8' 24F3               	addwf	prodl,w,c
  7931  00FA' 6ED9               	movwf	fsr2l,c
  7932  00FC' 0E00'              	movlw	high _port
  7933  00FE' 20F4               	addwfc	prodh,w,c
  7934  0100' 6EDA               	movwf	fsr2h,c
  7935  0102' CFDE F01E'         	movff	postinc2,___lwmod@dividend
  7936  0106' CFDD F01F'         	movff	postdec2,___lwmod@dividend+1
  7937  010A' EC00' F000'        	call	___lwmod	;wreg free
  7938  010E' C01E' F019'        	movff	?___lwmod,___lwdiv@dividend
  7939  0112' C01F' F01A'        	movff	?___lwmod+1,___lwdiv@dividend+1
  7940  0116' 0E00               	movlw	0
  7941  0118' 0100               	movlb	0	; () banked
  7942  011A' 6F00'              	movwf	(___lwdiv@divisor+1)& (0+255),b
  7943  011C' 0E64               	movlw	100
  7944  011E' 6F00'              	movwf	___lwdiv@divisor& (0+255),b
  7945  0120' EC00' F000'        	call	___lwdiv	;wreg free
  7946  0124' 0100               	movlb	0	; () banked
  7947  0126' 5100'              	movf	?___lwdiv& (0+255),w,b
  7948  0128' 0F30               	addlw	48
  7949  012A' EC00' F000'        	call	_I2C_LCD_Putc
  7950                           
  7951                           ;tasks.h: 275: I2C_LCD_Putc((port[print_port].current % 100) / 10 + '0');
  7952  012E' 0E00               	movlw	0
  7953  0130' 6E21'              	movwf	___lwmod@divisor+1,c
  7954  0132' 0E64               	movlw	100
  7955  0134' 6E20'              	movwf	___lwmod@divisor,c
  7956  0136' 500F'              	movf	_print_port,w,c
  7957  0138' 0D17               	mullw	23
  7958  013A' 0E06               	movlw	6
  7959  013C' 26F3               	addwf	prodl,f,c
  7960  013E' 0E00               	movlw	0
  7961  0140' 22F4               	addwfc	prodh,f,c
  7962  0142' 0E00'              	movlw	low _port
  7963  0144' 24F3               	addwf	prodl,w,c
  7964  0146' 6ED9               	movwf	fsr2l,c
  7965  0148' 0E00'              	movlw	high _port
  7966  014A' 20F4               	addwfc	prodh,w,c
  7967  014C' 6EDA               	movwf	fsr2h,c
  7968  014E' CFDE F01E'         	movff	postinc2,___lwmod@dividend
  7969  0152' CFDD F01F'         	movff	postdec2,___lwmod@dividend+1
  7970  0156' EC00' F000'        	call	___lwmod	;wreg free
  7971  015A' C01E' F019'        	movff	?___lwmod,___lwdiv@dividend
  7972  015E' C01F' F01A'        	movff	?___lwmod+1,___lwdiv@dividend+1
  7973  0162' 0E00               	movlw	0
  7974  0164' 0100               	movlb	0	; () banked
  7975  0166' 6F00'              	movwf	(___lwdiv@divisor+1)& (0+255),b
  7976  0168' 0E0A               	movlw	10
  7977  016A' 6F00'              	movwf	___lwdiv@divisor& (0+255),b
  7978  016C' EC00' F000'        	call	___lwdiv	;wreg free
  7979  0170' 0100               	movlb	0	; () banked
  7980  0172' 5100'              	movf	?___lwdiv& (0+255),w,b
  7981  0174' 0F30               	addlw	48
  7982  0176' EC00' F000'        	call	_I2C_LCD_Putc
  7983                           
  7984                           ;tasks.h: 276: I2C_LCD_Putc((port[print_port].current % 10) / 1 + '0');
  7985  017A' 500F'              	movf	_print_port,w,c
  7986  017C' 0D17               	mullw	23
  7987  017E' 0E06               	movlw	6
  7988  0180' 26F3               	addwf	prodl,f,c
  7989  0182' 0E00               	movlw	0
  7990  0184' 22F4               	addwfc	prodh,f,c
  7991  0186' 0E00'              	movlw	low _port
  7992  0188' 24F3               	addwf	prodl,w,c
  7993  018A' 6ED9               	movwf	fsr2l,c
  7994  018C' 0E00'              	movlw	high _port
  7995  018E' 20F4               	addwfc	prodh,w,c
  7996  0190' 6EDA               	movwf	fsr2h,c
  7997  0192' CFDE F01E'         	movff	postinc2,___lwmod@dividend
  7998  0196' CFDD F01F'         	movff	postdec2,___lwmod@dividend+1
  7999  019A' 0E00               	movlw	0
  8000  019C' 6E21'              	movwf	___lwmod@divisor+1,c
  8001  019E' 0E0A               	movlw	10
  8002  01A0' 6E20'              	movwf	___lwmod@divisor,c
  8003  01A2' EC00' F000'        	call	___lwmod	;wreg free
  8004  01A6' 501E'              	movf	?___lwmod,w,c
  8005  01A8' 0F30               	addlw	48
  8006  01AA' EC00' F000'        	call	_I2C_LCD_Putc
  8007                           
  8008                           ;tasks.h: 277: I2C_LCD_Putc('A');
  8009  01AE' 0E41               	movlw	65
  8010  01B0' EC00' F000'        	call	_I2C_LCD_Putc
  8011                           
  8012                           ;tasks.h: 278: break;
  8013  01B4' 0012               	return	
  8014  01B6'                    l8457:
  8015                           
  8016                           ;tasks.h: 280: display_port();
  8017  01B6' EC00' F000'        	call	_display_port	;wreg free
  8018                           
  8019                           ;tasks.h: 281: I2C_LCD_SetCursor(0, 1);
  8020  01BA' 0E01               	movlw	1
  8021  01BC' 0100               	movlb	0	; () banked
  8022  01BE' 6F00'              	movwf	I2C_LCD_SetCursor@row& (0+255),b
  8023  01C0' 0E00               	movlw	0
  8024  01C2' EC00' F000'        	call	_I2C_LCD_SetCursor
  8025                           
  8026                           ;tasks.h: 282: char str[10];
  8027                           ;tasks.h: 283: my_utoa32(str, port[print_port].integrated_current, 7);
  8028  01C6' 0E00'              	movlw	low display_LCD@str
  8029  01C8' 0100               	movlb	0	; () banked
  8030  01CA' 6F00'              	movwf	my_utoa32@str& (0+255),b
  8031  01CC' 0E00'              	movlw	high display_LCD@str
  8032  01CE' 0100               	movlb	0	; () banked
  8033  01D0' 6F00'              	movwf	(my_utoa32@str+1)& (0+255),b
  8034  01D2' 500F'              	movf	_print_port,w,c
  8035  01D4' 0D17               	mullw	23
  8036  01D6' 0E0C               	movlw	12
  8037  01D8' 26F3               	addwf	prodl,f,c
  8038  01DA' 0E00               	movlw	0
  8039  01DC' 22F4               	addwfc	prodh,f,c
  8040  01DE' 0E00'              	movlw	low _port
  8041  01E0' 24F3               	addwf	prodl,w,c
  8042  01E2' 6ED9               	movwf	fsr2l,c
  8043  01E4' 0E00'              	movlw	high _port
  8044  01E6' 20F4               	addwfc	prodh,w,c
  8045  01E8' 6EDA               	movwf	fsr2h,c
  8046  01EA' CFDE F017'         	movff	postinc2,my_utoa32@value
  8047  01EE' CFDE F018'         	movff	postinc2,my_utoa32@value+1
  8048  01F2' CFDE F019'         	movff	postinc2,my_utoa32@value+2
  8049  01F6' CFDE F01A'         	movff	postinc2,my_utoa32@value+3
  8050  01FA' 0E07               	movlw	7
  8051  01FC' 0100               	movlb	0	; () banked
  8052  01FE' 6F00'              	movwf	my_utoa32@digits& (0+255),b
  8053  0200' EC00' F000'        	call	_my_utoa32	;wreg free
  8054                           
  8055                           ;tasks.h: 284: I2C_LCD_Puts(str);
  8056  0204' 0E00'              	movlw	low display_LCD@str
  8057  0206' 0100               	movlb	0	; () banked
  8058  0208' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
  8059  020A' 0E00'              	movlw	high display_LCD@str
  8060  020C' 0100               	movlb	0	; () banked
  8061  020E' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  8062  0210' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
  8063                           
  8064                           ;tasks.h: 285: I2C_LCD_Puts("mAh");
  8065  0214' 0E00'              	movlw	low STR_26
  8066  0216' 0100               	movlb	0	; () banked
  8067  0218' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
  8068  021A' 0E00'              	movlw	high STR_26
  8069  021C' 0100               	movlb	0	; () banked
  8070  021E' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  8071  0220' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
  8072                           
  8073                           ;tasks.h: 286: break;
  8074  0224' 0012               	return	
  8075  0226'                    l8467:
  8076                           
  8077                           ;tasks.h: 288: display_port();
  8078  0226' EC00' F000'        	call	_display_port	;wreg free
  8079                           
  8080                           ;tasks.h: 289: char str[10];
  8081                           ;tasks.h: 290: I2C_LCD_SetCursor(0, 1);
  8082  022A' 0E01               	movlw	1
  8083  022C' 0100               	movlb	0	; () banked
  8084  022E' 6F00'              	movwf	I2C_LCD_SetCursor@row& (0+255),b
  8085  0230' 0E00               	movlw	0
  8086  0232' EC00' F000'        	call	_I2C_LCD_SetCursor
  8087                           
  8088                           ;tasks.h: 291: my_utoa(str, port[print_port].integrated_time / 3600 / 24, 2);
  8089  0236' 0E10               	movlw	16
  8090  0238' 0100               	movlb	0	; () banked
  8091  023A' 6F00'              	movwf	___lldiv@divisor& (0+255),b
  8092  023C' 0E0E               	movlw	14
  8093  023E' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
  8094  0240' 0E00               	movlw	0
  8095  0242' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
  8096  0244' 0E00               	movlw	0
  8097  0246' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
  8098  0248' 500F'              	movf	_print_port,w,c
  8099  024A' 0D17               	mullw	23
  8100  024C' 0E10               	movlw	16
  8101  024E' 26F3               	addwf	prodl,f,c
  8102  0250' 0E00               	movlw	0
  8103  0252' 22F4               	addwfc	prodh,f,c
  8104  0254' 0E00'              	movlw	low _port
  8105  0256' 24F3               	addwf	prodl,w,c
  8106  0258' 6ED9               	movwf	fsr2l,c
  8107  025A' 0E00'              	movlw	high _port
  8108  025C' 20F4               	addwfc	prodh,w,c
  8109  025E' 6EDA               	movwf	fsr2h,c
  8110  0260' CFDE F000'         	movff	postinc2,___lldiv@dividend
  8111  0264' CFDE F001'         	movff	postinc2,___lldiv@dividend+1
  8112  0268' CFDE F002'         	movff	postinc2,___lldiv@dividend+2
  8113  026C' CFDE F003'         	movff	postinc2,___lldiv@dividend+3
  8114  0270' EC00' F000'        	call	___lldiv	;wreg free
  8115  0274' C000' F043'        	movff	?___lldiv,_display_LCD$3371
  8116  0278' C001' F044'        	movff	?___lldiv+1,_display_LCD$3371+1
  8117  027C' C002' F045'        	movff	?___lldiv+2,_display_LCD$3371+2
  8118  0280' C003' F046'        	movff	?___lldiv+3,_display_LCD$3371+3
  8119                           
  8120                           ;tasks.h: 291: my_utoa(str, port[print_port].integrated_time / 3600 / 24, 2);
  8121  0284' 0E00'              	movlw	low display_LCD@str
  8122  0286' 0100               	movlb	0	; () banked
  8123  0288' 6F00'              	movwf	my_utoa@str& (0+255),b
  8124  028A' 0E00'              	movlw	high display_LCD@str
  8125  028C' 0100               	movlb	0	; () banked
  8126  028E' 6F00'              	movwf	(my_utoa@str+1)& (0+255),b
  8127  0290' C043' F000'        	movff	_display_LCD$3371,___lldiv@dividend
  8128  0294' C044' F001'        	movff	_display_LCD$3371+1,___lldiv@dividend+1
  8129  0298' C045' F002'        	movff	_display_LCD$3371+2,___lldiv@dividend+2
  8130  029C' C046' F003'        	movff	_display_LCD$3371+3,___lldiv@dividend+3
  8131  02A0' 0E18               	movlw	24
  8132  02A2' 0100               	movlb	0	; () banked
  8133  02A4' 6F00'              	movwf	___lldiv@divisor& (0+255),b
  8134  02A6' 0E00               	movlw	0
  8135  02A8' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
  8136  02AA' 0E00               	movlw	0
  8137  02AC' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
  8138  02AE' 0E00               	movlw	0
  8139  02B0' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
  8140  02B2' EC00' F000'        	call	___lldiv	;wreg free
  8141  02B6' C000' F022'        	movff	?___lldiv,my_utoa@value
  8142  02BA' C001' F023'        	movff	?___lldiv+1,my_utoa@value+1
  8143  02BE' 0E02               	movlw	2
  8144  02C0' 0100               	movlb	0	; () banked
  8145  02C2' 6F00'              	movwf	my_utoa@digits& (0+255),b
  8146  02C4' EC00' F000'        	call	_my_utoa	;wreg free
  8147                           
  8148                           ;tasks.h: 292: I2C_LCD_Puts(str);
  8149  02C8' 0E00'              	movlw	low display_LCD@str
  8150  02CA' 0100               	movlb	0	; () banked
  8151  02CC' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
  8152  02CE' 0E00'              	movlw	high display_LCD@str
  8153  02D0' 0100               	movlb	0	; () banked
  8154  02D2' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  8155  02D4' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
  8156                           
  8157                           ;tasks.h: 293: I2C_LCD_Puts("d ");
  8158  02D8' 0E00'              	movlw	low STR_27
  8159  02DA' 0100               	movlb	0	; () banked
  8160  02DC' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
  8161  02DE' 0E00'              	movlw	high STR_27
  8162  02E0' 0100               	movlb	0	; () banked
  8163  02E2' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  8164  02E4' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
  8165                           
  8166                           ;tasks.h: 294: my_utoa(str, (port[print_port].integrated_time / 3600) % 24, 2);
  8167  02E8' 0E00'              	movlw	low display_LCD@str
  8168  02EA' 0100               	movlb	0	; () banked
  8169  02EC' 6F00'              	movwf	my_utoa@str& (0+255),b
  8170  02EE' 0E00'              	movlw	high display_LCD@str
  8171  02F0' 0100               	movlb	0	; () banked
  8172  02F2' 6F00'              	movwf	(my_utoa@str+1)& (0+255),b
  8173  02F4' 0E10               	movlw	16
  8174  02F6' 0100               	movlb	0	; () banked
  8175  02F8' 6F00'              	movwf	___lldiv@divisor& (0+255),b
  8176  02FA' 0E0E               	movlw	14
  8177  02FC' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
  8178  02FE' 0E00               	movlw	0
  8179  0300' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
  8180  0302' 0E00               	movlw	0
  8181  0304' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
  8182  0306' 500F'              	movf	_print_port,w,c
  8183  0308' 0D17               	mullw	23
  8184  030A' 0E10               	movlw	16
  8185  030C' 26F3               	addwf	prodl,f,c
  8186  030E' 0E00               	movlw	0
  8187  0310' 22F4               	addwfc	prodh,f,c
  8188  0312' 0E00'              	movlw	low _port
  8189  0314' 24F3               	addwf	prodl,w,c
  8190  0316' 6ED9               	movwf	fsr2l,c
  8191  0318' 0E00'              	movlw	high _port
  8192  031A' 20F4               	addwfc	prodh,w,c
  8193  031C' 6EDA               	movwf	fsr2h,c
  8194  031E' CFDE F000'         	movff	postinc2,___lldiv@dividend
  8195  0322' CFDE F001'         	movff	postinc2,___lldiv@dividend+1
  8196  0326' CFDE F002'         	movff	postinc2,___lldiv@dividend+2
  8197  032A' CFDE F003'         	movff	postinc2,___lldiv@dividend+3
  8198  032E' EC00' F000'        	call	___lldiv	;wreg free
  8199  0332' C000' F00D'        	movff	?___lldiv,___llmod@dividend
  8200  0336' C001' F00E'        	movff	?___lldiv+1,___llmod@dividend+1
  8201  033A' C002' F00F'        	movff	?___lldiv+2,___llmod@dividend+2
  8202  033E' C003' F010'        	movff	?___lldiv+3,___llmod@dividend+3
  8203  0342' 0E18               	movlw	24
  8204  0344' 0100               	movlb	0	; () banked
  8205  0346' 6F00'              	movwf	___llmod@divisor& (0+255),b
  8206  0348' 0E00               	movlw	0
  8207  034A' 6F00'              	movwf	(___llmod@divisor+1)& (0+255),b
  8208  034C' 0E00               	movlw	0
  8209  034E' 6F00'              	movwf	(___llmod@divisor+2)& (0+255),b
  8210  0350' 0E00               	movlw	0
  8211  0352' 6F00'              	movwf	(___llmod@divisor+3)& (0+255),b
  8212  0354' EC00' F000'        	call	___llmod	;wreg free
  8213  0358' C00D' F022'        	movff	?___llmod,my_utoa@value
  8214  035C' C00E' F023'        	movff	?___llmod+1,my_utoa@value+1
  8215  0360' 0E02               	movlw	2
  8216  0362' 0100               	movlb	0	; () banked
  8217  0364' 6F00'              	movwf	my_utoa@digits& (0+255),b
  8218  0366' EC00' F000'        	call	_my_utoa	;wreg free
  8219                           
  8220                           ;tasks.h: 295: I2C_LCD_Puts(str);
  8221  036A' 0E00'              	movlw	low display_LCD@str
  8222  036C' 0100               	movlb	0	; () banked
  8223  036E' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
  8224  0370' 0E00'              	movlw	high display_LCD@str
  8225  0372' 0100               	movlb	0	; () banked
  8226  0374' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  8227  0376' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
  8228                           
  8229                           ;tasks.h: 296: I2C_LCD_Puts("h ");
  8230  037A' 0E00'              	movlw	low STR_28
  8231  037C' 0100               	movlb	0	; () banked
  8232  037E' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
  8233  0380' 0E00'              	movlw	high STR_28
  8234  0382' 0100               	movlb	0	; () banked
  8235  0384' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  8236  0386' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
  8237                           
  8238                           ;tasks.h: 297: my_utoa(str, (port[print_port].integrated_time / 60) % 60, 2);
  8239  038A' 0E00'              	movlw	low display_LCD@str
  8240  038C' 0100               	movlb	0	; () banked
  8241  038E' 6F00'              	movwf	my_utoa@str& (0+255),b
  8242  0390' 0E00'              	movlw	high display_LCD@str
  8243  0392' 0100               	movlb	0	; () banked
  8244  0394' 6F00'              	movwf	(my_utoa@str+1)& (0+255),b
  8245  0396' 0E3C               	movlw	60
  8246  0398' 0100               	movlb	0	; () banked
  8247  039A' 6F00'              	movwf	___lldiv@divisor& (0+255),b
  8248  039C' 0E00               	movlw	0
  8249  039E' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
  8250  03A0' 0E00               	movlw	0
  8251  03A2' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
  8252  03A4' 0E00               	movlw	0
  8253  03A6' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
  8254  03A8' 500F'              	movf	_print_port,w,c
  8255  03AA' 0D17               	mullw	23
  8256  03AC' 0E10               	movlw	16
  8257  03AE' 26F3               	addwf	prodl,f,c
  8258  03B0' 0E00               	movlw	0
  8259  03B2' 22F4               	addwfc	prodh,f,c
  8260  03B4' 0E00'              	movlw	low _port
  8261  03B6' 24F3               	addwf	prodl,w,c
  8262  03B8' 6ED9               	movwf	fsr2l,c
  8263  03BA' 0E00'              	movlw	high _port
  8264  03BC' 20F4               	addwfc	prodh,w,c
  8265  03BE' 6EDA               	movwf	fsr2h,c
  8266  03C0' CFDE F000'         	movff	postinc2,___lldiv@dividend
  8267  03C4' CFDE F001'         	movff	postinc2,___lldiv@dividend+1
  8268  03C8' CFDE F002'         	movff	postinc2,___lldiv@dividend+2
  8269  03CC' CFDE F003'         	movff	postinc2,___lldiv@dividend+3
  8270  03D0' EC00' F000'        	call	___lldiv	;wreg free
  8271  03D4' C000' F00D'        	movff	?___lldiv,___llmod@dividend
  8272  03D8' C001' F00E'        	movff	?___lldiv+1,___llmod@dividend+1
  8273  03DC' C002' F00F'        	movff	?___lldiv+2,___llmod@dividend+2
  8274  03E0' C003' F010'        	movff	?___lldiv+3,___llmod@dividend+3
  8275  03E4' 0E3C               	movlw	60
  8276  03E6' 0100               	movlb	0	; () banked
  8277  03E8' 6F00'              	movwf	___llmod@divisor& (0+255),b
  8278  03EA' 0E00               	movlw	0
  8279  03EC' 6F00'              	movwf	(___llmod@divisor+1)& (0+255),b
  8280  03EE' 0E00               	movlw	0
  8281  03F0' 6F00'              	movwf	(___llmod@divisor+2)& (0+255),b
  8282  03F2' 0E00               	movlw	0
  8283  03F4' 6F00'              	movwf	(___llmod@divisor+3)& (0+255),b
  8284  03F6' EC00' F000'        	call	___llmod	;wreg free
  8285  03FA' C00D' F022'        	movff	?___llmod,my_utoa@value
  8286  03FE' C00E' F023'        	movff	?___llmod+1,my_utoa@value+1
  8287  0402' 0E02               	movlw	2
  8288  0404' 0100               	movlb	0	; () banked
  8289  0406' 6F00'              	movwf	my_utoa@digits& (0+255),b
  8290  0408' EC00' F000'        	call	_my_utoa	;wreg free
  8291                           
  8292                           ;tasks.h: 298: I2C_LCD_Puts(str);
  8293  040C' 0E00'              	movlw	low display_LCD@str
  8294  040E' 0100               	movlb	0	; () banked
  8295  0410' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
  8296  0412' 0E00'              	movlw	high display_LCD@str
  8297  0414' 0100               	movlb	0	; () banked
  8298  0416' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  8299  0418' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
  8300                           
  8301                           ;tasks.h: 299: I2C_LCD_Puts("m ");
  8302  041C' 0E00'              	movlw	low STR_29
  8303  041E' 0100               	movlb	0	; () banked
  8304  0420' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
  8305  0422' 0E00'              	movlw	high STR_29
  8306  0424' 0100               	movlb	0	; () banked
  8307  0426' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  8308  0428' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
  8309                           
  8310                           ;tasks.h: 300: my_utoa(str, port[print_port].integrated_time % 60, 2);
  8311  042C' 0E00'              	movlw	low display_LCD@str
  8312  042E' 0100               	movlb	0	; () banked
  8313  0430' 6F00'              	movwf	my_utoa@str& (0+255),b
  8314  0432' 0E00'              	movlw	high display_LCD@str
  8315  0434' 0100               	movlb	0	; () banked
  8316  0436' 6F00'              	movwf	(my_utoa@str+1)& (0+255),b
  8317  0438' 500F'              	movf	_print_port,w,c
  8318  043A' 0D17               	mullw	23
  8319  043C' 0E10               	movlw	16
  8320  043E' 26F3               	addwf	prodl,f,c
  8321  0440' 0E00               	movlw	0
  8322  0442' 22F4               	addwfc	prodh,f,c
  8323  0444' 0E00'              	movlw	low _port
  8324  0446' 24F3               	addwf	prodl,w,c
  8325  0448' 6ED9               	movwf	fsr2l,c
  8326  044A' 0E00'              	movlw	high _port
  8327  044C' 20F4               	addwfc	prodh,w,c
  8328  044E' 6EDA               	movwf	fsr2h,c
  8329  0450' CFDE F00D'         	movff	postinc2,___llmod@dividend
  8330  0454' CFDE F00E'         	movff	postinc2,___llmod@dividend+1
  8331  0458' CFDE F00F'         	movff	postinc2,___llmod@dividend+2
  8332  045C' CFDE F010'         	movff	postinc2,___llmod@dividend+3
  8333  0460' 0E3C               	movlw	60
  8334  0462' 0100               	movlb	0	; () banked
  8335  0464' 6F00'              	movwf	___llmod@divisor& (0+255),b
  8336  0466' 0E00               	movlw	0
  8337  0468' 6F00'              	movwf	(___llmod@divisor+1)& (0+255),b
  8338  046A' 0E00               	movlw	0
  8339  046C' 6F00'              	movwf	(___llmod@divisor+2)& (0+255),b
  8340  046E' 0E00               	movlw	0
  8341  0470' 6F00'              	movwf	(___llmod@divisor+3)& (0+255),b
  8342  0472' EC00' F000'        	call	___llmod	;wreg free
  8343  0476' C00D' F022'        	movff	?___llmod,my_utoa@value
  8344  047A' C00E' F023'        	movff	?___llmod+1,my_utoa@value+1
  8345  047E' 0E02               	movlw	2
  8346  0480' 0100               	movlb	0	; () banked
  8347  0482' 6F00'              	movwf	my_utoa@digits& (0+255),b
  8348  0484' EC00' F000'        	call	_my_utoa	;wreg free
  8349                           
  8350                           ;tasks.h: 301: I2C_LCD_Puts(str);
  8351  0488' 0E00'              	movlw	low display_LCD@str
  8352  048A' 0100               	movlb	0	; () banked
  8353  048C' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
  8354  048E' 0E00'              	movlw	high display_LCD@str
  8355  0490' 0100               	movlb	0	; () banked
  8356  0492' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  8357  0494' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
  8358                           
  8359                           ;tasks.h: 302: I2C_LCD_Puts("s");
  8360  0498' 0E00'              	movlw	low (STR_96+7)
  8361  049A' 0100               	movlb	0	; () banked
  8362  049C' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
  8363  049E' 0E00'              	movlw	high (STR_96+7)
  8364  04A0' 0100               	movlb	0	; () banked
  8365  04A2' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  8366  04A4' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
  8367                           
  8368                           ;tasks.h: 304: }
  8369                           
  8370                           ;tasks.h: 303: break;
  8371  04A8' 0012               	return	
  8372  04AA'                    l8499:
  8373  04AA' 0100               	movlb	0	; () banked
  8374  04AC' 5100'              	movf	_print_data& (0+255),w,b
  8375                           
  8376                           ; Switch size 1, requested type "space"
  8377                           ; Number of cases is 3, Range of values is 0 to 2
  8378                           ; switch strategies available:
  8379                           ; Name         Instructions Cycles
  8380                           ; simple_byte           10     6 (average)
  8381                           ;	Chosen strategy is simple_byte
  8382  04AE' 0A00               	xorlw	0	; case 0
  8383  04B0' B4D8               	btfsc	status,2,c
  8384  04B2' D5E6               	goto	l8441
  8385  04B4' 0A01               	xorlw	1	; case 1
  8386  04B6' B4D8               	btfsc	status,2,c
  8387  04B8' D67E               	goto	l8457
  8388  04BA' 0A03               	xorlw	3	; case 2
  8389  04BC' A4D8               	btfss	status,2,c
  8390                           
  8391                           ; BSR set to: 0
  8392                           ;tasks.h: 305: break;
  8393  04BE' 0012               	return	
  8394  04C0' D6B2               	goto	l8467
  8395  04C2'                    l8501:
  8396                           
  8397                           ; BSR set to: 0
  8398                           ;tasks.h: 307: I2C_LCD_SetCursor(0, 0);
  8399  04C2' 0E00               	movlw	0
  8400  04C4' 0100               	movlb	0	; () banked
  8401  04C6' 6F00'              	movwf	I2C_LCD_SetCursor@row& (0+255),b
  8402  04C8' 0E00               	movlw	0
  8403  04CA' EC00' F000'        	call	_I2C_LCD_SetCursor
  8404                           
  8405                           ;tasks.h: 308: I2C_LCD_Puts(display_char[0]);
  8406  04CE' 0E00'              	movlw	low _display_char
  8407  04D0' 0100               	movlb	0	; () banked
  8408  04D2' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
  8409  04D4' 0E00'              	movlw	high _display_char
  8410  04D6' 0100               	movlb	0	; () banked
  8411  04D8' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  8412  04DA' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
  8413                           
  8414                           ;tasks.h: 309: I2C_LCD_SetCursor(0, 1);
  8415  04DE' 0E01               	movlw	1
  8416  04E0' 0100               	movlb	0	; () banked
  8417  04E2' 6F00'              	movwf	I2C_LCD_SetCursor@row& (0+255),b
  8418  04E4' 0E00               	movlw	0
  8419  04E6' EC00' F000'        	call	_I2C_LCD_SetCursor
  8420                           
  8421                           ;tasks.h: 310: I2C_LCD_Puts(display_char[1]);
  8422  04EA' 0E00'              	movlw	low (_display_char+20)
  8423  04EC' 0100               	movlb	0	; () banked
  8424  04EE' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
  8425  04F0' 0E00'              	movlw	high (_display_char+20)
  8426  04F2' 0100               	movlb	0	; () banked
  8427  04F4' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  8428  04F6' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
  8429                           
  8430                           ;tasks.h: 312: }
  8431                           
  8432                           ;tasks.h: 311: break;
  8433  04FA' 0012               	return	
  8434  04FC'                    l8509:
  8435  04FC' 0100               	movlb	0	; () banked
  8436  04FE' 5100'              	movf	_pres_print_item& (0+255),w,b
  8437                           
  8438                           ; Switch size 1, requested type "space"
  8439                           ; Number of cases is 5, Range of values is 0 to 4
  8440                           ; switch strategies available:
  8441                           ; Name         Instructions Cycles
  8442                           ; simple_byte           16     9 (average)
  8443                           ;	Chosen strategy is simple_byte
  8444  0500' 0A00               	xorlw	0	; case 0
  8445  0502' B4D8               	btfsc	status,2,c
  8446  0504' D580               	goto	l8427
  8447  0506' 0A01               	xorlw	1	; case 1
  8448  0508' B4D8               	btfsc	status,2,c
  8449  050A' D59A               	goto	l8433
  8450  050C' 0A03               	xorlw	3	; case 2
  8451  050E' B4D8               	btfsc	status,2,c
  8452  0510' D5A6               	goto	l8435
  8453  0512' 0A01               	xorlw	1	; case 3
  8454  0514' B4D8               	btfsc	status,2,c
  8455  0516' D7C9               	goto	l8499
  8456  0518' 0A07               	xorlw	7	; case 4
  8457  051A' A4D8               	btfss	status,2,c
  8458  051C' 0012               	return	
  8459  051E' D7D1               	goto	l8501
  8460  0520'                    __end_of_display_LCD:
  8461                           	opt stack 0
  8462                           tblptru	equ	0xFF8
  8463                           tblptrh	equ	0xFF7
  8464                           tblptrl	equ	0xFF6
  8465                           tablat	equ	0xFF5
  8466                           prodh	equ	0xFF4
  8467                           prodl	equ	0xFF3
  8468                           intcon	equ	0xFF2
  8469                           indf0	equ	0xFEF
  8470                           postinc0	equ	0xFEE
  8471                           fsr0h	equ	0xFEA
  8472                           fsr0l	equ	0xFE9
  8473                           wreg	equ	0xFE8
  8474                           postdec1	equ	0xFE5
  8475                           fsr1h	equ	0xFE2
  8476                           fsr1l	equ	0xFE1
  8477                           indf2	equ	0xFDF
  8478                           postinc2	equ	0xFDE
  8479                           postdec2	equ	0xFDD
  8480                           fsr2h	equ	0xFDA
  8481                           fsr2l	equ	0xFD9
  8482                           status	equ	0xFD8
  8483                           
  8484 ;; *************** function _my_utoa32 *****************
  8485 ;; Defined at:
  8486 ;;		line 26 in file "../My_header\My_stdlib.h"
  8487 ;; Parameters:    Size  Location     Type
  8488 ;;  str             2   21[BANK0 ] PTR unsigned char 
  8489 ;;		 -> normal_loop@str(15), display_LCD@str(10), 
  8490 ;;  value           4   23[BANK0 ] unsigned long 
  8491 ;;  digits          1   27[BANK0 ] unsigned char 
  8492 ;; Auto vars:     Size  Location     Type
  8493 ;;  v               4   29[BANK0 ] unsigned long 
  8494 ;;  d               1   28[BANK0 ] unsigned char 
  8495 ;; Return value:  Size  Location     Type
  8496 ;;		None               void
  8497 ;; Registers used:
  8498 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8499 ;; Tracked objects:
  8500 ;;		On entry : 0/0
  8501 ;;		On exit  : 0/0
  8502 ;;		Unchanged: 0/0
  8503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8504 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8505 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8507 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8508 ;;Total ram usage:       12 bytes
  8509 ;; Hardware stack levels used:    1
  8510 ;; Hardware stack levels required when called:    4
  8511 ;; This function calls:
  8512 ;;		___lldiv
  8513 ;;		___llmod
  8514 ;; This function is called by:
  8515 ;;		_display_LCD
  8516 ;;		_normal_loop
  8517 ;; This function uses a non-reentrant model
  8518 ;;
  8519                           
  8520                           	psect	text17
  8521  0000'                    __ptext17:
  8522                           	opt stack 0
  8523  0000'                    _my_utoa32:
  8524                           	opt stack 25
  8525                           
  8526                           ;My_header\My_stdlib.h: 27: uint32_t v;
  8527                           ;My_header\My_stdlib.h: 28: uint8_t d;
  8528                           ;My_header\My_stdlib.h: 29: while (digits--) {
  8529                           
  8530                           ;incstack = 0
  8531  0000' D052               	goto	l7707
  8532  0002'                    l468:
  8533                           
  8534                           ; BSR set to: 0
  8535                           ;My_header\My_stdlib.h: 30: v = (uint32_t) value;
  8536  0002' C017' F01D'        	movff	my_utoa32@value,my_utoa32@v
  8537  0006' C018' F01E'        	movff	my_utoa32@value+1,my_utoa32@v+1
  8538  000A' C019' F01F'        	movff	my_utoa32@value+2,my_utoa32@v+2
  8539  000E' C01A' F020'        	movff	my_utoa32@value+3,my_utoa32@v+3
  8540                           
  8541                           ;My_header\My_stdlib.h: 31: d = digits;
  8542  0012' C01B' F01C'        	movff	my_utoa32@digits,my_utoa32@d
  8543                           
  8544                           ;My_header\My_stdlib.h: 32: while (d--) {
  8545  0016' D01B               	goto	l7699
  8546  0018'                    l7697:
  8547                           
  8548                           ; BSR set to: 0
  8549                           ;My_header\My_stdlib.h: 33: v /= 10;
  8550  0018' C01D' F000'        	movff	my_utoa32@v,___lldiv@dividend
  8551  001C' C01E' F001'        	movff	my_utoa32@v+1,___lldiv@dividend+1
  8552  0020' C01F' F002'        	movff	my_utoa32@v+2,___lldiv@dividend+2
  8553  0024' C020' F003'        	movff	my_utoa32@v+3,___lldiv@dividend+3
  8554  0028' 0E0A               	movlw	10
  8555  002A' 0100               	movlb	0	; () banked
  8556  002C' 6F00'              	movwf	___lldiv@divisor& (0+255),b
  8557  002E' 0E00               	movlw	0
  8558  0030' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
  8559  0032' 0E00               	movlw	0
  8560  0034' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
  8561  0036' 0E00               	movlw	0
  8562  0038' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
  8563  003A' EC00' F000'        	call	___lldiv	;wreg free
  8564  003E' C000' F01D'        	movff	?___lldiv,my_utoa32@v
  8565  0042' C001' F01E'        	movff	?___lldiv+1,my_utoa32@v+1
  8566  0046' C002' F01F'        	movff	?___lldiv+2,my_utoa32@v+2
  8567  004A' C003' F020'        	movff	?___lldiv+3,my_utoa32@v+3
  8568  004E'                    l7699:
  8569  004E' 0100               	movlb	0	; () banked
  8570  0050' 0700'              	decf	my_utoa32@d& (0+255),f,b
  8571  0052' 0100               	movlb	0	; () banked
  8572  0054' 2900'              	incf	my_utoa32@d& (0+255),w,b
  8573  0056' A4D8               	btfss	status,2,c
  8574  0058' D7DF               	goto	l7697
  8575                           
  8576                           ; BSR set to: 0
  8577                           ;My_header\My_stdlib.h: 34: }
  8578                           ;My_header\My_stdlib.h: 35: v %= 10;
  8579                           
  8580                           ; BSR set to: 0
  8581  005A' C01D' F00D'        	movff	my_utoa32@v,___llmod@dividend
  8582  005E' C01E' F00E'        	movff	my_utoa32@v+1,___llmod@dividend+1
  8583  0062' C01F' F00F'        	movff	my_utoa32@v+2,___llmod@dividend+2
  8584  0066' C020' F010'        	movff	my_utoa32@v+3,___llmod@dividend+3
  8585  006A' 0E0A               	movlw	10
  8586  006C' 0100               	movlb	0	; () banked
  8587  006E' 6F00'              	movwf	___llmod@divisor& (0+255),b
  8588  0070' 0E00               	movlw	0
  8589  0072' 6F00'              	movwf	(___llmod@divisor+1)& (0+255),b
  8590  0074' 0E00               	movlw	0
  8591  0076' 6F00'              	movwf	(___llmod@divisor+2)& (0+255),b
  8592  0078' 0E00               	movlw	0
  8593  007A' 6F00'              	movwf	(___llmod@divisor+3)& (0+255),b
  8594  007C' EC00' F000'        	call	___llmod	;wreg free
  8595  0080' C00D' F01D'        	movff	?___llmod,my_utoa32@v
  8596  0084' C00E' F01E'        	movff	?___llmod+1,my_utoa32@v+1
  8597  0088' C00F' F01F'        	movff	?___llmod+2,my_utoa32@v+2
  8598  008C' C010' F020'        	movff	?___llmod+3,my_utoa32@v+3
  8599                           
  8600                           ;My_header\My_stdlib.h: 36: *str++ = '0' + v;
  8601  0090' 0100               	movlb	0	; () banked
  8602  0092' 5100'              	movf	my_utoa32@v& (0+255),w,b
  8603  0094' 0F30               	addlw	48
  8604  0096' C015' FFD9         	movff	my_utoa32@str,fsr2l
  8605  009A' C016' FFDA         	movff	my_utoa32@str+1,fsr2h
  8606  009E' 6EDF               	movwf	indf2,c
  8607                           
  8608                           ; BSR set to: 0
  8609  00A0' 0100               	movlb	0	; () banked
  8610  00A2' 4B00'              	infsnz	my_utoa32@str& (0+255),f,b
  8611  00A4' 2B00'              	incf	(my_utoa32@str+1)& (0+255),f,b
  8612  00A6'                    l7707:
  8613  00A6' 0100               	movlb	0	; () banked
  8614  00A8' 0700'              	decf	my_utoa32@digits& (0+255),f,b
  8615  00AA' 0100               	movlb	0	; () banked
  8616  00AC' 2900'              	incf	my_utoa32@digits& (0+255),w,b
  8617  00AE' A4D8               	btfss	status,2,c
  8618  00B0' D7A8               	goto	l468
  8619                           
  8620                           ; BSR set to: 0
  8621                           ;My_header\My_stdlib.h: 37: }
  8622                           ;My_header\My_stdlib.h: 38: *str = '\0';
  8623                           
  8624                           ; BSR set to: 0
  8625  00B2' C015' FFD9         	movff	my_utoa32@str,fsr2l
  8626  00B6' C016' FFDA         	movff	my_utoa32@str+1,fsr2h
  8627  00BA' 0E00               	movlw	0
  8628  00BC' 6EDF               	movwf	indf2,c
  8629                           
  8630                           ; BSR set to: 0
  8631  00BE' 0012               	return		;funcret
  8632  00C0'                    __end_of_my_utoa32:
  8633                           	opt stack 0
  8634                           tblptru	equ	0xFF8
  8635                           tblptrh	equ	0xFF7
  8636                           tblptrl	equ	0xFF6
  8637                           tablat	equ	0xFF5
  8638                           prodh	equ	0xFF4
  8639                           prodl	equ	0xFF3
  8640                           intcon	equ	0xFF2
  8641                           indf0	equ	0xFEF
  8642                           postinc0	equ	0xFEE
  8643                           fsr0h	equ	0xFEA
  8644                           fsr0l	equ	0xFE9
  8645                           wreg	equ	0xFE8
  8646                           postdec1	equ	0xFE5
  8647                           fsr1h	equ	0xFE2
  8648                           fsr1l	equ	0xFE1
  8649                           indf2	equ	0xFDF
  8650                           postinc2	equ	0xFDE
  8651                           postdec2	equ	0xFDD
  8652                           fsr2h	equ	0xFDA
  8653                           fsr2l	equ	0xFD9
  8654                           status	equ	0xFD8
  8655                           
  8656 ;; *************** function _display_time_1602 *****************
  8657 ;; Defined at:
  8658 ;;		line 278 in file "../My_header\My_RTCC.h"
  8659 ;; Parameters:    Size  Location     Type
  8660 ;;  ct              2   52[BANK0 ] PTR struct .
  8661 ;;		 -> caltime_now(7), 
  8662 ;;  ep              2   54[BANK0 ] PTR unsigned long 
  8663 ;;		 -> epoch_now(4), 
  8664 ;; Auto vars:     Size  Location     Type
  8665 ;;		None
  8666 ;; Return value:  Size  Location     Type
  8667 ;;		None               void
  8668 ;; Registers used:
  8669 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8670 ;; Tracked objects:
  8671 ;;		On entry : 0/0
  8672 ;;		On exit  : 0/0
  8673 ;;		Unchanged: 0/0
  8674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8675 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8677 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8678 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8679 ;;Total ram usage:        5 bytes
  8680 ;; Hardware stack levels used:    1
  8681 ;; Hardware stack levels required when called:    7
  8682 ;; This function calls:
  8683 ;;		_I2C_LCD_Putc
  8684 ;;		_I2C_LCD_Puts
  8685 ;;		_I2C_LCD_SetCursor
  8686 ;;		_RTCC_from_RTCC
  8687 ;;		_display_dec
  8688 ;; This function is called by:
  8689 ;;		_display_LCD
  8690 ;; This function uses a non-reentrant model
  8691 ;;
  8692                           
  8693                           	psect	text18
  8694  0000'                    __ptext18:
  8695                           	opt stack 0
  8696  0000'                    _display_time_1602:
  8697                           	opt stack 21
  8698                           
  8699                           ;My_header\My_RTCC.h: 279: RTCC_from_RTCC(ct, ep);
  8700                           
  8701                           ; BSR set to: 0
  8702                           ;incstack = 0
  8703  0000' C034' F028'        	movff	display_time_1602@ct,RTCC_from_RTCC@ct
  8704  0004' C035' F029'        	movff	display_time_1602@ct+1,RTCC_from_RTCC@ct+1
  8705  0008' C036' F02A'        	movff	display_time_1602@ep,RTCC_from_RTCC@ep
  8706  000C' C037' F02B'        	movff	display_time_1602@ep+1,RTCC_from_RTCC@ep+1
  8707  0010' EC00' F000'        	call	_RTCC_from_RTCC	;wreg free
  8708                           
  8709                           ;My_header\My_RTCC.h: 281: I2C_LCD_SetCursor(0, 0);
  8710  0014' 0E00               	movlw	0
  8711  0016' 0100               	movlb	0	; () banked
  8712  0018' 6F00'              	movwf	I2C_LCD_SetCursor@row& (0+255),b
  8713  001A' 0E00               	movlw	0
  8714  001C' EC00' F000'        	call	_I2C_LCD_SetCursor
  8715                           
  8716                           ;My_header\My_RTCC.h: 282: display_dec(20, edit_flag.flag.YY);
  8717  0020' 0E00               	movlw	0
  8718  0022' BB00'              	btfsc	_edit_flag& (0+255),5,b
  8719  0024' 0E01               	movlw	1
  8720  0026' 0100               	movlb	0	; () banked
  8721  0028' 6F00'              	movwf	display_dec@edit& (0+255),b
  8722  002A' 0E14               	movlw	20
  8723  002C' EC00' F000'        	call	_display_dec
  8724                           
  8725                           ;My_header\My_RTCC.h: 283: display_dec(ct->YY, edit_flag.flag.YY);
  8726  0030' 0E00               	movlw	0
  8727  0032' BB00'              	btfsc	_edit_flag& (0+255),5,b
  8728  0034' 0E01               	movlw	1
  8729  0036' 0100               	movlb	0	; () banked
  8730  0038' 6F00'              	movwf	display_dec@edit& (0+255),b
  8731  003A' 0100               	movlb	0	; () banked
  8732  003C' EE20 F006          	lfsr	2,6
  8733  0040' 5100'              	movf	display_time_1602@ct& (0+255),w,b
  8734  0042' 26D9               	addwf	fsr2l,f,c
  8735  0044' 5100'              	movf	(display_time_1602@ct+1)& (0+255),w,b
  8736  0046' 22DA               	addwfc	fsr2h,f,c
  8737  0048' 50DF               	movf	indf2,w,c
  8738  004A' EC00' F000'        	call	_display_dec
  8739                           
  8740                           ;My_header\My_RTCC.h: 284: I2C_LCD_Putc('/');
  8741  004E' 0E2F               	movlw	47
  8742  0050' EC00' F000'        	call	_I2C_LCD_Putc
  8743                           
  8744                           ;My_header\My_RTCC.h: 285: display_dec(ct->MM, edit_flag.flag.MM);
  8745  0054' 0E00               	movlw	0
  8746  0056' B900'              	btfsc	_edit_flag& (0+255),4,b
  8747  0058' 0E01               	movlw	1
  8748  005A' 0100               	movlb	0	; () banked
  8749  005C' 6F00'              	movwf	display_dec@edit& (0+255),b
  8750  005E' 0100               	movlb	0	; () banked
  8751  0060' EE20 F005          	lfsr	2,5
  8752  0064' 5100'              	movf	display_time_1602@ct& (0+255),w,b
  8753  0066' 26D9               	addwf	fsr2l,f,c
  8754  0068' 5100'              	movf	(display_time_1602@ct+1)& (0+255),w,b
  8755  006A' 22DA               	addwfc	fsr2h,f,c
  8756  006C' 50DF               	movf	indf2,w,c
  8757  006E' EC00' F000'        	call	_display_dec
  8758                           
  8759                           ;My_header\My_RTCC.h: 286: I2C_LCD_Putc('/');
  8760  0072' 0E2F               	movlw	47
  8761  0074' EC00' F000'        	call	_I2C_LCD_Putc
  8762                           
  8763                           ;My_header\My_RTCC.h: 287: display_dec(ct->DD, edit_flag.flag.DD);
  8764  0078' 0E00               	movlw	0
  8765  007A' B700'              	btfsc	_edit_flag& (0+255),3,b
  8766  007C' 0E01               	movlw	1
  8767  007E' 0100               	movlb	0	; () banked
  8768  0080' 6F00'              	movwf	display_dec@edit& (0+255),b
  8769  0082' 0100               	movlb	0	; () banked
  8770  0084' EE20 F004          	lfsr	2,4
  8771  0088' 5100'              	movf	display_time_1602@ct& (0+255),w,b
  8772  008A' 26D9               	addwf	fsr2l,f,c
  8773  008C' 5100'              	movf	(display_time_1602@ct+1)& (0+255),w,b
  8774  008E' 22DA               	addwfc	fsr2h,f,c
  8775  0090' 50DF               	movf	indf2,w,c
  8776  0092' EC00' F000'        	call	_display_dec
  8777                           
  8778                           ;My_header\My_RTCC.h: 288: I2C_LCD_Putc('(');
  8779  0096' 0E28               	movlw	40
  8780  0098' EC00' F000'        	call	_I2C_LCD_Putc
  8781                           
  8782                           ;My_header\My_RTCC.h: 289: I2C_LCD_Puts(weekday_3char[ct->EE]);
  8783  009C' 0100               	movlb	0	; () banked
  8784  009E' EE20 F003          	lfsr	2,3
  8785  00A2' 5100'              	movf	display_time_1602@ct& (0+255),w,b
  8786  00A4' 26D9               	addwf	fsr2l,f,c
  8787  00A6' 5100'              	movf	(display_time_1602@ct+1)& (0+255),w,b
  8788  00A8' 22DA               	addwfc	fsr2h,f,c
  8789  00AA' 50DF               	movf	indf2,w,c
  8790  00AC' 0100               	movlb	0	; () banked
  8791  00AE' 6F00'              	movwf	??_display_time_1602& (0+255),b
  8792  00B0' 0100               	movlb	0	; () banked
  8793  00B2' 5100'              	movf	??_display_time_1602& (0+255),w,b
  8794  00B4' 0D04               	mullw	4
  8795  00B6' 0E00'              	movlw	low _weekday_3char
  8796  00B8' 24F3               	addwf	prodl,w,c
  8797  00BA' 0100               	movlb	0	; () banked
  8798  00BC' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
  8799  00BE' 0E00'              	movlw	high _weekday_3char
  8800  00C0' 20F4               	addwfc	prodh,w,c
  8801  00C2' 0100               	movlb	0	; () banked
  8802  00C4' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  8803  00C6' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
  8804                           
  8805                           ;My_header\My_RTCC.h: 290: I2C_LCD_Putc(')');
  8806  00CA' 0E29               	movlw	41
  8807  00CC' EC00' F000'        	call	_I2C_LCD_Putc
  8808                           
  8809                           ;My_header\My_RTCC.h: 291: I2C_LCD_SetCursor(8, 1);
  8810  00D0' 0E01               	movlw	1
  8811  00D2' 0100               	movlb	0	; () banked
  8812  00D4' 6F00'              	movwf	I2C_LCD_SetCursor@row& (0+255),b
  8813  00D6' 0E08               	movlw	8
  8814  00D8' EC00' F000'        	call	_I2C_LCD_SetCursor
  8815                           
  8816                           ;My_header\My_RTCC.h: 292: display_dec(ct->hh, edit_flag.flag.hh);
  8817  00DC' 0E00               	movlw	0
  8818  00DE' B500'              	btfsc	_edit_flag& (0+255),2,b
  8819  00E0' 0E01               	movlw	1
  8820  00E2' 0100               	movlb	0	; () banked
  8821  00E4' 6F00'              	movwf	display_dec@edit& (0+255),b
  8822  00E6' 0100               	movlb	0	; () banked
  8823  00E8' EE20 F002          	lfsr	2,2
  8824  00EC' 5100'              	movf	display_time_1602@ct& (0+255),w,b
  8825  00EE' 26D9               	addwf	fsr2l,f,c
  8826  00F0' 5100'              	movf	(display_time_1602@ct+1)& (0+255),w,b
  8827  00F2' 22DA               	addwfc	fsr2h,f,c
  8828  00F4' 50DF               	movf	indf2,w,c
  8829  00F6' EC00' F000'        	call	_display_dec
  8830                           
  8831                           ;My_header\My_RTCC.h: 293: if (colon) I2C_LCD_Putc(':');
  8832  00FA' 0100               	movlb	0	; () banked
  8833  00FC' 5100'              	movf	_colon& (0+255),w,b
  8834  00FE' B4D8               	btfsc	status,2,c
  8835  0100' D004               	goto	l7739
  8836                           
  8837                           ; BSR set to: 0
  8838  0102' 0E3A               	movlw	58
  8839  0104' EC00' F000'        	call	_I2C_LCD_Putc
  8840  0108' D003               	goto	l7741
  8841  010A'                    l7739:
  8842                           
  8843                           ;My_header\My_RTCC.h: 294: else I2C_LCD_Putc(' ');
  8844  010A' 0E20               	movlw	32
  8845  010C' EC00' F000'        	call	_I2C_LCD_Putc
  8846  0110'                    l7741:
  8847                           
  8848                           ;My_header\My_RTCC.h: 295: display_dec(ct->mm, edit_flag.flag.mm);
  8849  0110' 0E00               	movlw	0
  8850  0112' B300'              	btfsc	_edit_flag& (0+255),1,b
  8851  0114' 0E01               	movlw	1
  8852  0116' 0100               	movlb	0	; () banked
  8853  0118' 6F00'              	movwf	display_dec@edit& (0+255),b
  8854  011A' 0100               	movlb	0	; () banked
  8855  011C' EE20 F001          	lfsr	2,1
  8856  0120' 5100'              	movf	display_time_1602@ct& (0+255),w,b
  8857  0122' 26D9               	addwf	fsr2l,f,c
  8858  0124' 5100'              	movf	(display_time_1602@ct+1)& (0+255),w,b
  8859  0126' 22DA               	addwfc	fsr2h,f,c
  8860  0128' 50DF               	movf	indf2,w,c
  8861  012A' EC00' F000'        	call	_display_dec
  8862                           
  8863                           ;My_header\My_RTCC.h: 296: I2C_LCD_Putc('-');
  8864  012E' 0E2D               	movlw	45
  8865  0130' EC00' F000'        	call	_I2C_LCD_Putc
  8866                           
  8867                           ;My_header\My_RTCC.h: 297: display_dec(ct->ss, edit_flag.flag.ss);
  8868  0134' 0E00               	movlw	0
  8869  0136' B100'              	btfsc	_edit_flag& (0+255),0,b
  8870  0138' 0E01               	movlw	1
  8871  013A' 0100               	movlb	0	; () banked
  8872  013C' 6F00'              	movwf	display_dec@edit& (0+255),b
  8873  013E' C034' FFD9         	movff	display_time_1602@ct,fsr2l
  8874  0142' C035' FFDA         	movff	display_time_1602@ct+1,fsr2h
  8875  0146' 50DF               	movf	indf2,w,c
  8876  0148' EC00' F000'        	call	_display_dec
  8877  014C' 0012               	return		;funcret
  8878  014E'                    __end_of_display_time_1602:
  8879                           	opt stack 0
  8880                           tblptru	equ	0xFF8
  8881                           tblptrh	equ	0xFF7
  8882                           tblptrl	equ	0xFF6
  8883                           tablat	equ	0xFF5
  8884                           prodh	equ	0xFF4
  8885                           prodl	equ	0xFF3
  8886                           intcon	equ	0xFF2
  8887                           indf0	equ	0xFEF
  8888                           postinc0	equ	0xFEE
  8889                           fsr0h	equ	0xFEA
  8890                           fsr0l	equ	0xFE9
  8891                           wreg	equ	0xFE8
  8892                           postdec1	equ	0xFE5
  8893                           fsr1h	equ	0xFE2
  8894                           fsr1l	equ	0xFE1
  8895                           indf2	equ	0xFDF
  8896                           postinc2	equ	0xFDE
  8897                           postdec2	equ	0xFDD
  8898                           fsr2h	equ	0xFDA
  8899                           fsr2l	equ	0xFD9
  8900                           status	equ	0xFD8
  8901                           
  8902 ;; *************** function _display_dec *****************
  8903 ;; Defined at:
  8904 ;;		line 251 in file "../My_header\My_RTCC.h"
  8905 ;; Parameters:    Size  Location     Type
  8906 ;;  dec             1    wreg     unsigned char 
  8907 ;;  edit            1   40[BANK0 ] unsigned char 
  8908 ;; Auto vars:     Size  Location     Type
  8909 ;;  dec             1   51[BANK0 ] unsigned char 
  8910 ;;  str            10   41[BANK0 ] unsigned char [10]
  8911 ;; Return value:  Size  Location     Type
  8912 ;;		None               void
  8913 ;; Registers used:
  8914 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8915 ;; Tracked objects:
  8916 ;;		On entry : 0/0
  8917 ;;		On exit  : 0/0
  8918 ;;		Unchanged: 0/0
  8919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8920 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8921 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8923 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8924 ;;Total ram usage:       12 bytes
  8925 ;; Hardware stack levels used:    1
  8926 ;; Hardware stack levels required when called:    6
  8927 ;; This function calls:
  8928 ;;		_I2C_LCD_Puts
  8929 ;;		_my_utoa
  8930 ;; This function is called by:
  8931 ;;		_display_time_1602
  8932 ;;		_display_time_0802
  8933 ;; This function uses a non-reentrant model
  8934 ;;
  8935                           
  8936                           	psect	text19
  8937  0000'                    __ptext19:
  8938                           	opt stack 0
  8939  0000'                    _display_dec:
  8940                           	opt stack 21
  8941                           
  8942                           ;incstack = 0
  8943                           ;display_dec@dec stored from wreg
  8944  0000' 0100               	movlb	0	; () banked
  8945  0002' 6F00'              	movwf	display_dec@dec& (0+255),b
  8946                           
  8947                           ;My_header\My_RTCC.h: 252: char str[10];
  8948                           ;My_header\My_RTCC.h: 253: my_utoa(str, dec, 2);
  8949  0004' 0E00'              	movlw	low display_dec@str
  8950  0006' 0100               	movlb	0	; () banked
  8951  0008' 6F00'              	movwf	my_utoa@str& (0+255),b
  8952  000A' 0E00'              	movlw	high display_dec@str
  8953  000C' 0100               	movlb	0	; () banked
  8954  000E' 6F00'              	movwf	(my_utoa@str+1)& (0+255),b
  8955  0010' C033' F022'        	movff	display_dec@dec,my_utoa@value
  8956  0014' 0100               	movlb	0	; () banked
  8957  0016' 6B00'              	clrf	(my_utoa@value+1)& (0+255),b
  8958  0018' 0E02               	movlw	2
  8959  001A' 0100               	movlb	0	; () banked
  8960  001C' 6F00'              	movwf	my_utoa@digits& (0+255),b
  8961  001E' EC00' F000'        	call	_my_utoa	;wreg free
  8962                           
  8963                           ;My_header\My_RTCC.h: 254: if (edit && halfsec)I2C_LCD_Puts("  ");
  8964  0022' 0100               	movlb	0	; () banked
  8965  0024' 5100'              	movf	display_dec@edit& (0+255),w,b
  8966  0026' 0100               	movlb	0	; () banked
  8967  0028' B4D8               	btfsc	status,2,c
  8968  002A' D00C               	goto	l7649
  8969                           
  8970                           ; BSR set to: 0
  8971  002C' 500E'              	movf	_halfsec,w,c
  8972  002E' B4D8               	btfsc	status,2,c
  8973  0030' D009               	goto	l7649
  8974                           
  8975                           ; BSR set to: 0
  8976  0032' 0E00'              	movlw	low (STR_125+3)
  8977  0034' 0100               	movlb	0	; () banked
  8978  0036' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
  8979  0038' 0E00'              	movlw	high (STR_125+3)
  8980  003A' 0100               	movlb	0	; () banked
  8981  003C' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  8982  003E' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
  8983  0042' 0012               	return	
  8984  0044'                    l7649:
  8985                           
  8986                           ;My_header\My_RTCC.h: 255: else I2C_LCD_Puts(str);
  8987  0044' 0E00'              	movlw	low display_dec@str
  8988  0046' 0100               	movlb	0	; () banked
  8989  0048' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
  8990  004A' 0E00'              	movlw	high display_dec@str
  8991  004C' 0100               	movlb	0	; () banked
  8992  004E' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  8993  0050' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
  8994  0054' 0012               	return	
  8995  0056'                    __end_of_display_dec:
  8996                           	opt stack 0
  8997                           tblptru	equ	0xFF8
  8998                           tblptrh	equ	0xFF7
  8999                           tblptrl	equ	0xFF6
  9000                           tablat	equ	0xFF5
  9001                           prodh	equ	0xFF4
  9002                           prodl	equ	0xFF3
  9003                           intcon	equ	0xFF2
  9004                           indf0	equ	0xFEF
  9005                           postinc0	equ	0xFEE
  9006                           fsr0h	equ	0xFEA
  9007                           fsr0l	equ	0xFE9
  9008                           wreg	equ	0xFE8
  9009                           postdec1	equ	0xFE5
  9010                           fsr1h	equ	0xFE2
  9011                           fsr1l	equ	0xFE1
  9012                           indf2	equ	0xFDF
  9013                           postinc2	equ	0xFDE
  9014                           postdec2	equ	0xFDD
  9015                           fsr2h	equ	0xFDA
  9016                           fsr2l	equ	0xFD9
  9017                           status	equ	0xFD8
  9018                           
  9019 ;; *************** function _I2C_LCD_Putc *****************
  9020 ;; Defined at:
  9021 ;;		line 118 in file "../My_header\My_I2C.h"
  9022 ;; Parameters:    Size  Location     Type
  9023 ;;  c               1    wreg     unsigned char 
  9024 ;; Auto vars:     Size  Location     Type
  9025 ;;  c               1    0[BANK0 ] unsigned char 
  9026 ;;  ans             1    1[BANK0 ] unsigned char 
  9027 ;; Return value:  Size  Location     Type
  9028 ;;		None               void
  9029 ;; Registers used:
  9030 ;;		wreg, status,2, status,0, cstack
  9031 ;; Tracked objects:
  9032 ;;		On entry : 0/0
  9033 ;;		On exit  : 0/0
  9034 ;;		Unchanged: 0/0
  9035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9037 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9039 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9040 ;;Total ram usage:        2 bytes
  9041 ;; Hardware stack levels used:    1
  9042 ;; Hardware stack levels required when called:    5
  9043 ;; This function calls:
  9044 ;;		_I2C_Send
  9045 ;;		_I2C_Start
  9046 ;;		_I2C_Stop
  9047 ;; This function is called by:
  9048 ;;		_display_time_1602
  9049 ;;		_display_LCD
  9050 ;;		_display_time_0802
  9051 ;; This function uses a non-reentrant model
  9052 ;;
  9053                           
  9054                           	psect	text20
  9055  0000'                    __ptext20:
  9056                           	opt stack 0
  9057  0000'                    _I2C_LCD_Putc:
  9058                           	opt stack 22
  9059                           
  9060                           ;incstack = 0
  9061                           ;I2C_LCD_Putc@c stored from wreg
  9062  0000' 0100               	movlb	0	; () banked
  9063  0002' 6F00'              	movwf	I2C_LCD_Putc@c& (0+255),b
  9064                           
  9065                           ;My_header\My_I2C.h: 119: uint8_t ans;
  9066                           ;My_header\My_I2C.h: 121: ans = I2C_Start(0x3E, 0);
  9067  0004' 0E00               	movlw	0
  9068  0006' 6E20'              	movwf	I2C_Start@rw,c
  9069  0008' 0E3E               	movlw	62
  9070  000A' EC00' F000'        	call	_I2C_Start
  9071  000E' 0100               	movlb	0	; () banked
  9072  0010' 6F00'              	movwf	I2C_LCD_Putc@ans& (0+255),b
  9073                           
  9074                           ; BSR set to: 0
  9075                           ;My_header\My_I2C.h: 122: if (ans == 0) {
  9076  0012' 0100               	movlb	0	; () banked
  9077  0014' 5100'              	movf	I2C_LCD_Putc@ans& (0+255),w,b
  9078  0016' 0100               	movlb	0	; () banked
  9079  0018' A4D8               	btfss	status,2,c
  9080  001A' D007               	goto	l359
  9081                           
  9082                           ; BSR set to: 0
  9083                           ;My_header\My_I2C.h: 124: I2C_Send(0b11000000);
  9084  001C' 0EC0               	movlw	192
  9085  001E' EC00' F000'        	call	_I2C_Send
  9086                           
  9087                           ;My_header\My_I2C.h: 125: I2C_Send(c);
  9088  0022' 0100               	movlb	0	; () banked
  9089  0024' 5100'              	movf	I2C_LCD_Putc@c& (0+255),w,b
  9090  0026' EC00' F000'        	call	_I2C_Send
  9091  002A'                    l359:
  9092                           
  9093                           ;My_header\My_I2C.h: 126: }
  9094                           ;My_header\My_I2C.h: 127: I2C_Stop();
  9095  002A' EC00' F000'        	call	_I2C_Stop	;wreg free
  9096                           
  9097                           ;My_header\My_I2C.h: 128: _delay((unsigned long)((26)*(48000000/4000000.0)));
  9098  002E' 0E68               	movlw	104
  9099  0030'                    u11887:
  9100  0030' 2EE8               	decfsz	wreg,f,c
  9101  0032' D7FE               	goto	u11887
  9102  0034' 0012               	return		;funcret
  9103  0036'                    __end_of_I2C_LCD_Putc:
  9104                           	opt stack 0
  9105                           tblptru	equ	0xFF8
  9106                           tblptrh	equ	0xFF7
  9107                           tblptrl	equ	0xFF6
  9108                           tablat	equ	0xFF5
  9109                           prodh	equ	0xFF4
  9110                           prodl	equ	0xFF3
  9111                           intcon	equ	0xFF2
  9112                           indf0	equ	0xFEF
  9113                           postinc0	equ	0xFEE
  9114                           fsr0h	equ	0xFEA
  9115                           fsr0l	equ	0xFE9
  9116                           wreg	equ	0xFE8
  9117                           postdec1	equ	0xFE5
  9118                           fsr1h	equ	0xFE2
  9119                           fsr1l	equ	0xFE1
  9120                           indf2	equ	0xFDF
  9121                           postinc2	equ	0xFDE
  9122                           postdec2	equ	0xFDD
  9123                           fsr2h	equ	0xFDA
  9124                           fsr2l	equ	0xFD9
  9125                           status	equ	0xFD8
  9126                           
  9127 ;; *************** function _display_port *****************
  9128 ;; Defined at:
  9129 ;;		line 225 in file "tasks.h"
  9130 ;; Parameters:    Size  Location     Type
  9131 ;;		None
  9132 ;; Auto vars:     Size  Location     Type
  9133 ;;		None
  9134 ;; Return value:  Size  Location     Type
  9135 ;;		None               void
  9136 ;; Registers used:
  9137 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9138 ;; Tracked objects:
  9139 ;;		On entry : 0/0
  9140 ;;		On exit  : 0/0
  9141 ;;		Unchanged: 0/0
  9142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9145 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9146 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9147 ;;Total ram usage:        3 bytes
  9148 ;; Hardware stack levels used:    1
  9149 ;; Hardware stack levels required when called:    7
  9150 ;; This function calls:
  9151 ;;		_I2C_LCD_Puts
  9152 ;;		_I2C_LCD_SetCursor
  9153 ;; This function is called by:
  9154 ;;		_display_LCD
  9155 ;; This function uses a non-reentrant model
  9156 ;;
  9157                           
  9158                           	psect	text21
  9159  0000'                    __ptext21:
  9160                           	opt stack 0
  9161  0000'                    _display_port:
  9162                           	opt stack 21
  9163                           
  9164                           ;tasks.h: 226: static const char port_char[2][3][20] = {
  9165                           ;tasks.h: 227: {"LEFT PORT", "CENTER PORT", "RIGHT PORT"},
  9166                           ;tasks.h: 228: {"Left Port", "Center Port", "Right Port"}
  9167                           ;tasks.h: 229: };
  9168                           ;tasks.h: 230: static const char onoff[2][5] = {"OFF", "ON"};
  9169                           ;tasks.h: 231: I2C_LCD_SetCursor(0, 0);
  9170                           
  9171                           ;incstack = 0
  9172  0000' 0E00               	movlw	0
  9173  0002' 0100               	movlb	0	; () banked
  9174  0004' 6F00'              	movwf	I2C_LCD_SetCursor@row& (0+255),b
  9175  0006' 0E00               	movlw	0
  9176  0008' EC00' F000'        	call	_I2C_LCD_SetCursor
  9177                           
  9178                           ;tasks.h: 232: I2C_LCD_Puts(port_char[port[print_port].flag.auto_cut_ON][print_port]);
  9179  000C' 500F'              	movf	_print_port,w,c
  9180  000E' 0D17               	mullw	23
  9181  0010' 0E16               	movlw	22
  9182  0012' 26F3               	addwf	prodl,f,c
  9183  0014' 0E00               	movlw	0
  9184  0016' 22F4               	addwfc	prodh,f,c
  9185  0018' 0E00'              	movlw	low _port
  9186  001A' 24F3               	addwf	prodl,w,c
  9187  001C' 6ED9               	movwf	fsr2l,c
  9188  001E' 0E00'              	movlw	high _port
  9189  0020' 20F4               	addwfc	prodh,w,c
  9190  0022' 6EDA               	movwf	fsr2h,c
  9191  0024' 0101               	movlb	1	; () banked
  9192  0026' A0DF               	btfss	indf2,0,c
  9193  0028' D004               	goto	u9870
  9194  002A' 0100               	movlb	0	; () banked
  9195  002C' 6B00'              	clrf	??_display_port& (0+255),b
  9196  002E' 2B00'              	incf	??_display_port& (0+255),f,b
  9197  0030' D002               	goto	u9878
  9198  0032'                    u9870:
  9199  0032' 0100               	movlb	0	; () banked
  9200  0034' 6B00'              	clrf	??_display_port& (0+255),b
  9201  0036'                    u9878:
  9202  0036' 0100               	movlb	0	; () banked
  9203  0038' 5100'              	movf	??_display_port& (0+255),w,b
  9204  003A' 0D3C               	mullw	60
  9205  003C' 0E00'              	movlw	low display_port@port_char
  9206  003E' 0100               	movlb	0	; () banked
  9207  0040' 6F00'              	movwf	(??_display_port+1)& (0+255),b
  9208  0042' 0E00'              	movlw	high display_port@port_char
  9209  0044' 0100               	movlb	0	; () banked
  9210  0046' 6F00'              	movwf	(??_display_port+2)& (0+255),b
  9211  0048' 50F3               	movf	prodl,w,c
  9212  004A' 0100               	movlb	0	; () banked
  9213  004C' 2700'              	addwf	(??_display_port+1)& (0+255),f,b
  9214  004E' 50F4               	movf	prodh,w,c
  9215  0050' 0100               	movlb	0	; () banked
  9216  0052' 2300'              	addwfc	(??_display_port+2)& (0+255),f,b
  9217  0054' 500F'              	movf	_print_port,w,c
  9218  0056' 0D14               	mullw	20
  9219  0058' 50F3               	movf	prodl,w,c
  9220  005A' 0100               	movlb	0	; () banked
  9221  005C' 2500'              	addwf	(??_display_port+1)& (0+255),w,b
  9222  005E' 0100               	movlb	0	; () banked
  9223  0060' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
  9224  0062' 50F4               	movf	prodh,w,c
  9225  0064' 0100               	movlb	0	; () banked
  9226  0066' 2100'              	addwfc	(??_display_port+2)& (0+255),w,b
  9227  0068' 0100               	movlb	0	; () banked
  9228  006A' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  9229  006C' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
  9230                           
  9231                           ;tasks.h: 233: I2C_LCD_SetCursor(13, 0);
  9232  0070' 0E00               	movlw	0
  9233  0072' 0100               	movlb	0	; () banked
  9234  0074' 6F00'              	movwf	I2C_LCD_SetCursor@row& (0+255),b
  9235  0076' 0E0D               	movlw	13
  9236  0078' EC00' F000'        	call	_I2C_LCD_SetCursor
  9237                           
  9238                           ;tasks.h: 234: I2C_LCD_Puts(onoff[port[print_port].flag.out_flag]);
  9239  007C' 500F'              	movf	_print_port,w,c
  9240  007E' 0D17               	mullw	23
  9241  0080' 0E16               	movlw	22
  9242  0082' 26F3               	addwf	prodl,f,c
  9243  0084' 0E00               	movlw	0
  9244  0086' 22F4               	addwfc	prodh,f,c
  9245  0088' 0E00'              	movlw	low _port
  9246  008A' 24F3               	addwf	prodl,w,c
  9247  008C' 6ED9               	movwf	fsr2l,c
  9248  008E' 0E00'              	movlw	high _port
  9249  0090' 20F4               	addwfc	prodh,w,c
  9250  0092' 6EDA               	movwf	fsr2h,c
  9251  0094' 0101               	movlb	1	; () banked
  9252  0096' A4DF               	btfss	indf2,2,c
  9253  0098' D004               	goto	u9880
  9254  009A' 0100               	movlb	0	; () banked
  9255  009C' 6B00'              	clrf	??_display_port& (0+255),b
  9256  009E' 2B00'              	incf	??_display_port& (0+255),f,b
  9257  00A0' D002               	goto	u9888
  9258  00A2'                    u9880:
  9259  00A2' 0100               	movlb	0	; () banked
  9260  00A4' 6B00'              	clrf	??_display_port& (0+255),b
  9261  00A6'                    u9888:
  9262  00A6' 0100               	movlb	0	; () banked
  9263  00A8' 5100'              	movf	??_display_port& (0+255),w,b
  9264  00AA' 0D05               	mullw	5
  9265  00AC' 0E00'              	movlw	low display_port@onoff
  9266  00AE' 24F3               	addwf	prodl,w,c
  9267  00B0' 0100               	movlb	0	; () banked
  9268  00B2' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
  9269  00B4' 0E00'              	movlw	high display_port@onoff
  9270  00B6' 20F4               	addwfc	prodh,w,c
  9271  00B8' 0100               	movlb	0	; () banked
  9272  00BA' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  9273  00BC' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
  9274  00C0' 0012               	return		;funcret
  9275  00C2'                    __end_of_display_port:
  9276                           	opt stack 0
  9277                           tblptru	equ	0xFF8
  9278                           tblptrh	equ	0xFF7
  9279                           tblptrl	equ	0xFF6
  9280                           tablat	equ	0xFF5
  9281                           prodh	equ	0xFF4
  9282                           prodl	equ	0xFF3
  9283                           intcon	equ	0xFF2
  9284                           indf0	equ	0xFEF
  9285                           postinc0	equ	0xFEE
  9286                           fsr0h	equ	0xFEA
  9287                           fsr0l	equ	0xFE9
  9288                           wreg	equ	0xFE8
  9289                           postdec1	equ	0xFE5
  9290                           fsr1h	equ	0xFE2
  9291                           fsr1l	equ	0xFE1
  9292                           indf2	equ	0xFDF
  9293                           postinc2	equ	0xFDE
  9294                           postdec2	equ	0xFDD
  9295                           fsr2h	equ	0xFDA
  9296                           fsr2l	equ	0xFD9
  9297                           status	equ	0xFD8
  9298                           
  9299 ;; *************** function _Auto_cut *****************
  9300 ;; Defined at:
  9301 ;;		line 182 in file "tasks.h"
  9302 ;; Parameters:    Size  Location     Type
  9303 ;;		None
  9304 ;; Auto vars:     Size  Location     Type
  9305 ;;  i               1   27[BANK0 ] unsigned char 
  9306 ;; Return value:  Size  Location     Type
  9307 ;;		None               void
  9308 ;; Registers used:
  9309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9310 ;; Tracked objects:
  9311 ;;		On entry : 0/0
  9312 ;;		On exit  : 0/0
  9313 ;;		Unchanged: 0/0
  9314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9316 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9317 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9318 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9319 ;;Total ram usage:        3 bytes
  9320 ;; Hardware stack levels used:    1
  9321 ;; Hardware stack levels required when called:    4
  9322 ;; This function calls:
  9323 ;;		_ADC
  9324 ;;		_ANALOG_IN
  9325 ;;		_OUT
  9326 ;;		___wmul
  9327 ;; This function is called by:
  9328 ;;		_normal_loop
  9329 ;; This function uses a non-reentrant model
  9330 ;;
  9331                           
  9332                           	psect	text22
  9333  0000'                    __ptext22:
  9334                           	opt stack 0
  9335  0000'                    _Auto_cut:
  9336                           	opt stack 25
  9337                           
  9338                           ;tasks.h: 183: for (uint8_t i = 0; i < 3; i++) {
  9339                           
  9340                           ;incstack = 0
  9341  0000' 0E00               	movlw	0
  9342  0002' 0100               	movlb	0	; () banked
  9343  0004' 6F00'              	movwf	Auto_cut@i& (0+255),b
  9344  0006'                    l8405:
  9345                           
  9346                           ; BSR set to: 0
  9347  0006' 0E02               	movlw	2
  9348  0008' 0100               	movlb	0	; () banked
  9349  000A' 6500'              	cpfsgt	Auto_cut@i& (0+255),b
  9350  000C' D001               	goto	l8409
  9351  000E' 0012               	return	
  9352  0010'                    l8409:
  9353                           
  9354                           ; BSR set to: 0
  9355                           ;tasks.h: 184: port[i].current = 13 * ADC(ANALOG_IN(i)) / 16;
  9356  0010' 0100               	movlb	0	; () banked
  9357  0012' 5100'              	movf	Auto_cut@i& (0+255),w,b
  9358  0014' EC00' F000'        	call	_ANALOG_IN
  9359  0018' EC00' F000'        	call	_ADC
  9360  001C' C01E' F013'        	movff	?_ADC,___wmul@multiplier
  9361  0020' C01F' F014'        	movff	?_ADC+1,___wmul@multiplier+1
  9362  0024' 0E00               	movlw	0
  9363  0026' 0100               	movlb	0	; () banked
  9364  0028' 6F00'              	movwf	(___wmul@multiplicand+1)& (0+255),b
  9365  002A' 0E0D               	movlw	13
  9366  002C' 6F00'              	movwf	___wmul@multiplicand& (0+255),b
  9367  002E' EC00' F000'        	call	___wmul	;wreg free
  9368  0032' 0E04               	movlw	4
  9369  0034' 0100               	movlb	0	; () banked
  9370  0036' 6F00'              	movwf	??_Auto_cut& (0+255),b
  9371  0038'                    u10685:
  9372  0038' 0100               	movlb	0	; () banked
  9373  003A' 90D8               	bcf	status,0,c
  9374  003C' 3300'              	rrcf	(?___wmul+1)& (0+255),f,b
  9375  003E' 3300'              	rrcf	?___wmul& (0+255),f,b
  9376  0040' 0100               	movlb	0	; () banked
  9377  0042' 2F00'              	decfsz	??_Auto_cut& (0+255),f,b
  9378  0044' D7F9               	goto	u10685
  9379  0046' 0100               	movlb	0	; () banked
  9380  0048' 5100'              	movf	Auto_cut@i& (0+255),w,b
  9381  004A' 0D17               	mullw	23
  9382  004C' 0E06               	movlw	6
  9383  004E' 26F3               	addwf	prodl,f,c
  9384  0050' 0E00               	movlw	0
  9385  0052' 22F4               	addwfc	prodh,f,c
  9386  0054' 0E00'              	movlw	low _port
  9387  0056' 24F3               	addwf	prodl,w,c
  9388  0058' 6ED9               	movwf	fsr2l,c
  9389  005A' 0E00'              	movlw	high _port
  9390  005C' 20F4               	addwfc	prodh,w,c
  9391  005E' 6EDA               	movwf	fsr2h,c
  9392  0060' 0100               	movlb	0	; () banked
  9393  0062' C013' FFDE         	movff	?___wmul,postinc2
  9394  0066' 0100               	movlb	0	; () banked
  9395  0068' C014' FFDD         	movff	?___wmul+1,postdec2
  9396                           
  9397                           ; BSR set to: 0
  9398                           ;tasks.h: 185: if (port[i].flag.auto_cut_ON) {
  9399  006C' 0100               	movlb	0	; () banked
  9400  006E' 5100'              	movf	Auto_cut@i& (0+255),w,b
  9401  0070' 0D17               	mullw	23
  9402  0072' 0E16               	movlw	22
  9403  0074' 26F3               	addwf	prodl,f,c
  9404  0076' 0E00               	movlw	0
  9405  0078' 22F4               	addwfc	prodh,f,c
  9406  007A' 0E00'              	movlw	low _port
  9407  007C' 24F3               	addwf	prodl,w,c
  9408  007E' 6ED9               	movwf	fsr2l,c
  9409  0080' 0E00'              	movlw	high _port
  9410  0082' 20F4               	addwfc	prodh,w,c
  9411  0084' 6EDA               	movwf	fsr2h,c
  9412  0086' 0101               	movlb	1	; () banked
  9413  0088' A0DF               	btfss	indf2,0,c
  9414  008A' D050               	goto	l8421
  9415                           
  9416                           ; BSR set to: 1
  9417                           ;tasks.h: 186: if (port[i].current < 100) {
  9418  008C' 0100               	movlb	0	; () banked
  9419  008E' 5100'              	movf	Auto_cut@i& (0+255),w,b
  9420  0090' 0D17               	mullw	23
  9421  0092' 0E06               	movlw	6
  9422  0094' 26F3               	addwf	prodl,f,c
  9423  0096' 0E00               	movlw	0
  9424  0098' 22F4               	addwfc	prodh,f,c
  9425  009A' 0E00'              	movlw	low _port
  9426  009C' 24F3               	addwf	prodl,w,c
  9427  009E' 6ED9               	movwf	fsr2l,c
  9428  00A0' 0E00'              	movlw	high _port
  9429  00A2' 20F4               	addwfc	prodh,w,c
  9430  00A4' 6EDA               	movwf	fsr2h,c
  9431  00A6' 0E01               	movlw	1
  9432  00A8' 50DB               	movf	plusw2,w,c
  9433  00AA' E12F               	bnz	l8419
  9434  00AC' 0E64               	movlw	100
  9435  00AE' 5CDE               	subwf	postinc2,w,c
  9436  00B0' B0D8               	btfsc	status,0,c
  9437  00B2' D02B               	goto	l8419
  9438                           
  9439                           ; BSR set to: 0
  9440                           ;tasks.h: 187: port[i].cut_cnt++;
  9441  00B4' 0100               	movlb	0	; () banked
  9442  00B6' 5100'              	movf	Auto_cut@i& (0+255),w,b
  9443  00B8' 0D17               	mullw	23
  9444  00BA' 0E14               	movlw	20
  9445  00BC' 26F3               	addwf	prodl,f,c
  9446  00BE' 0E00               	movlw	0
  9447  00C0' 22F4               	addwfc	prodh,f,c
  9448  00C2' 0E00'              	movlw	low _port
  9449  00C4' 24F3               	addwf	prodl,w,c
  9450  00C6' 6ED9               	movwf	fsr2l,c
  9451  00C8' 0E00'              	movlw	high _port
  9452  00CA' 20F4               	addwfc	prodh,w,c
  9453  00CC' 6EDA               	movwf	fsr2h,c
  9454  00CE' 2ADE               	incf	postinc2,f,c
  9455  00D0' 0E00               	movlw	0
  9456  00D2' 22DD               	addwfc	postdec2,f,c
  9457                           
  9458                           ;tasks.h: 188: if (port[i].cut_cnt > 6) {
  9459  00D4' 0100               	movlb	0	; () banked
  9460  00D6' 5100'              	movf	Auto_cut@i& (0+255),w,b
  9461  00D8' 0D17               	mullw	23
  9462  00DA' 0E14               	movlw	20
  9463  00DC' 26F3               	addwf	prodl,f,c
  9464  00DE' 0E00               	movlw	0
  9465  00E0' 22F4               	addwfc	prodh,f,c
  9466  00E2' 0E00'              	movlw	low _port
  9467  00E4' 24F3               	addwf	prodl,w,c
  9468  00E6' 6ED9               	movwf	fsr2l,c
  9469  00E8' 0E00'              	movlw	high _port
  9470  00EA' 20F4               	addwfc	prodh,w,c
  9471  00EC' 6EDA               	movwf	fsr2h,c
  9472  00EE' 0E01               	movlw	1
  9473  00F0' 50DB               	movf	plusw2,w,c
  9474  00F2' E104               	bnz	u10710
  9475  00F4' 0E07               	movlw	7
  9476  00F6' 5CDE               	subwf	postinc2,w,c
  9477  00F8' A0D8               	btfss	status,0,c
  9478  00FA' D018               	goto	l8421
  9479  00FC'                    u10710:
  9480                           
  9481                           ; BSR set to: 0
  9482                           ;tasks.h: 189: OUT(i, 0);
  9483  00FC' 0E00               	movlw	0
  9484  00FE' 6E1E'              	movwf	OUT@value,c
  9485  0100' 0100               	movlb	0	; () banked
  9486  0102' 5100'              	movf	Auto_cut@i& (0+255),w,b
  9487  0104' EC00' F000'        	call	_OUT
  9488                           
  9489                           ;tasks.h: 190: }
  9490                           ;tasks.h: 191: } else {
  9491  0108' D011               	goto	l8421
  9492  010A'                    l8419:
  9493                           
  9494                           ;tasks.h: 192: port[i].cut_cnt = 0;
  9495  010A' 0100               	movlb	0	; () banked
  9496  010C' 5100'              	movf	Auto_cut@i& (0+255),w,b
  9497  010E' 0D17               	mullw	23
  9498  0110' 0E14               	movlw	20
  9499  0112' 26F3               	addwf	prodl,f,c
  9500  0114' 0E00               	movlw	0
  9501  0116' 22F4               	addwfc	prodh,f,c
  9502  0118' 0E00'              	movlw	low _port
  9503  011A' 24F3               	addwf	prodl,w,c
  9504  011C' 6ED9               	movwf	fsr2l,c
  9505  011E' 0E00'              	movlw	high _port
  9506  0120' 20F4               	addwfc	prodh,w,c
  9507  0122' 6EDA               	movwf	fsr2h,c
  9508  0124' 0E00               	movlw	0
  9509  0126' 6EDE               	movwf	postinc2,c
  9510  0128' 0E00               	movlw	0
  9511  012A' 6EDD               	movwf	postdec2,c
  9512  012C'                    l8421:
  9513  012C' 0100               	movlb	0	; () banked
  9514  012E' 2B00'              	incf	Auto_cut@i& (0+255),f,b
  9515  0130' D76A               	goto	l8405
  9516  0132'                    __end_of_Auto_cut:
  9517                           	opt stack 0
  9518                           tblptru	equ	0xFF8
  9519                           tblptrh	equ	0xFF7
  9520                           tblptrl	equ	0xFF6
  9521                           tablat	equ	0xFF5
  9522                           prodh	equ	0xFF4
  9523                           prodl	equ	0xFF3
  9524                           intcon	equ	0xFF2
  9525                           indf0	equ	0xFEF
  9526                           postinc0	equ	0xFEE
  9527                           fsr0h	equ	0xFEA
  9528                           fsr0l	equ	0xFE9
  9529                           wreg	equ	0xFE8
  9530                           postdec1	equ	0xFE5
  9531                           fsr1h	equ	0xFE2
  9532                           fsr1l	equ	0xFE1
  9533                           indf2	equ	0xFDF
  9534                           postinc2	equ	0xFDE
  9535                           postdec2	equ	0xFDD
  9536                           plusw2	equ	0xFDB
  9537                           fsr2h	equ	0xFDA
  9538                           fsr2l	equ	0xFD9
  9539                           status	equ	0xFD8
  9540                           
  9541 ;; *************** function _OUT *****************
  9542 ;; Defined at:
  9543 ;;		line 113 in file "tasks.h"
  9544 ;; Parameters:    Size  Location     Type
  9545 ;;  b               1    wreg     unsigned char 
  9546 ;;  value           1   30[COMRAM] unsigned char 
  9547 ;; Auto vars:     Size  Location     Type
  9548 ;;  b               1   31[COMRAM] unsigned char 
  9549 ;; Return value:  Size  Location     Type
  9550 ;;		None               void
  9551 ;; Registers used:
  9552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9553 ;; Tracked objects:
  9554 ;;		On entry : 0/0
  9555 ;;		On exit  : 0/0
  9556 ;;		Unchanged: 0/0
  9557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9558 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9559 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9561 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9562 ;;Total ram usage:        2 bytes
  9563 ;; Hardware stack levels used:    1
  9564 ;; Hardware stack levels required when called:    3
  9565 ;; This function calls:
  9566 ;;		Nothing
  9567 ;; This function is called by:
  9568 ;;		_Auto_cut
  9569 ;;		_port_button_loop
  9570 ;;		_sleep_loop
  9571 ;;		_main
  9572 ;; This function uses a non-reentrant model
  9573 ;;
  9574                           
  9575                           	psect	text23
  9576  0000'                    __ptext23:
  9577                           	opt stack 0
  9578  0000'                    _OUT:
  9579                           	opt stack 26
  9580                           
  9581                           ; BSR set to: 0
  9582                           ;incstack = 0
  9583                           ;OUT@b stored from wreg
  9584  0000' 6E1F'              	movwf	OUT@b,c
  9585                           
  9586                           ;tasks.h: 114: port[b].flag.out_flag = value;
  9587  0002' 501F'              	movf	OUT@b,w,c
  9588  0004' 0D17               	mullw	23
  9589  0006' 0E16               	movlw	22
  9590  0008' 26F3               	addwf	prodl,f,c
  9591  000A' 0E00               	movlw	0
  9592  000C' 22F4               	addwfc	prodh,f,c
  9593  000E' 0E00'              	movlw	low _port
  9594  0010' 24F3               	addwf	prodl,w,c
  9595  0012' 6ED9               	movwf	fsr2l,c
  9596  0014' 0E00'              	movlw	high _port
  9597  0016' 20F4               	addwfc	prodh,w,c
  9598  0018' 6EDA               	movwf	fsr2h,c
  9599  001A' B01E'              	btfsc	OUT@value,0,c
  9600  001C' D003               	bra	u9735
  9601  001E' 0101               	movlb	1	; () banked
  9602  0020' 94DF               	bcf	indf2,2,c
  9603  0022' D002               	bra	u9736
  9604  0024'                    u9735:
  9605  0024' 0101               	movlb	1	; () banked
  9606  0026' 84DF               	bsf	indf2,2,c
  9607  0028'                    u9736:
  9608                           
  9609                           ;tasks.h: 115: switch (b) {
  9610  0028' D012               	goto	l7921
  9611  002A'                    l695:
  9612                           
  9613                           ;tasks.h: 117: LATA5 = value;
  9614  002A' A01E'              	btfss	OUT@value,0,c
  9615  002C' D002               	goto	u9740
  9616  002E' 8A89               	bsf	3977,5,c	;volatile
  9617  0030' 0012               	return	
  9618  0032'                    u9740:
  9619  0032' 9A89               	bcf	3977,5,c	;volatile
  9620                           
  9621                           ;tasks.h: 118: break;
  9622  0034' 0012               	return	
  9623  0036'                    l697:
  9624                           
  9625                           ;tasks.h: 120: LATA6 = value;
  9626  0036' A01E'              	btfss	OUT@value,0,c
  9627  0038' D002               	goto	u9760
  9628  003A' 8C89               	bsf	3977,6,c	;volatile
  9629  003C' 0012               	return	
  9630  003E'                    u9760:
  9631  003E' 9C89               	bcf	3977,6,c	;volatile
  9632                           
  9633                           ;tasks.h: 121: break;
  9634  0040' 0012               	return	
  9635  0042'                    l698:
  9636                           
  9637                           ;tasks.h: 123: LATA7 = value;
  9638  0042' A01E'              	btfss	OUT@value,0,c
  9639  0044' D002               	goto	u9780
  9640  0046' 8E89               	bsf	3977,7,c	;volatile
  9641  0048' 0012               	return	
  9642  004A'                    u9780:
  9643  004A' 9E89               	bcf	3977,7,c	;volatile
  9644                           
  9645                           ;tasks.h: 125: }
  9646                           
  9647                           ;tasks.h: 124: break;
  9648  004C' 0012               	return	
  9649  004E'                    l7921:
  9650  004E' 501F'              	movf	OUT@b,w,c
  9651                           
  9652                           ; Switch size 1, requested type "space"
  9653                           ; Number of cases is 3, Range of values is 0 to 2
  9654                           ; switch strategies available:
  9655                           ; Name         Instructions Cycles
  9656                           ; simple_byte           10     6 (average)
  9657                           ;	Chosen strategy is simple_byte
  9658  0050' 0A00               	xorlw	0	; case 0
  9659  0052' B4D8               	btfsc	status,2,c
  9660  0054' D7EA               	goto	l695
  9661  0056' 0A01               	xorlw	1	; case 1
  9662  0058' B4D8               	btfsc	status,2,c
  9663  005A' D7ED               	goto	l697
  9664  005C' 0A03               	xorlw	3	; case 2
  9665  005E' A4D8               	btfss	status,2,c
  9666  0060' 0012               	return	
  9667  0062' D7EF               	goto	l698
  9668  0064'                    __end_of_OUT:
  9669                           	opt stack 0
  9670                           tblptru	equ	0xFF8
  9671                           tblptrh	equ	0xFF7
  9672                           tblptrl	equ	0xFF6
  9673                           tablat	equ	0xFF5
  9674                           prodh	equ	0xFF4
  9675                           prodl	equ	0xFF3
  9676                           intcon	equ	0xFF2
  9677                           indf0	equ	0xFEF
  9678                           postinc0	equ	0xFEE
  9679                           fsr0h	equ	0xFEA
  9680                           fsr0l	equ	0xFE9
  9681                           wreg	equ	0xFE8
  9682                           postdec1	equ	0xFE5
  9683                           fsr1h	equ	0xFE2
  9684                           fsr1l	equ	0xFE1
  9685                           indf2	equ	0xFDF
  9686                           postinc2	equ	0xFDE
  9687                           postdec2	equ	0xFDD
  9688                           plusw2	equ	0xFDB
  9689                           fsr2h	equ	0xFDA
  9690                           fsr2l	equ	0xFD9
  9691                           status	equ	0xFD8
  9692                           
  9693 ;; *************** function _ANALOG_IN *****************
  9694 ;; Defined at:
  9695 ;;		line 128 in file "tasks.h"
  9696 ;; Parameters:    Size  Location     Type
  9697 ;;  b               1    wreg     unsigned char 
  9698 ;; Auto vars:     Size  Location     Type
  9699 ;;  b               1   30[COMRAM] unsigned char 
  9700 ;; Return value:  Size  Location     Type
  9701 ;;                  1    wreg      unsigned char 
  9702 ;; Registers used:
  9703 ;;		wreg, status,2, status,0
  9704 ;; Tracked objects:
  9705 ;;		On entry : 0/0
  9706 ;;		On exit  : 0/0
  9707 ;;		Unchanged: 0/0
  9708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9710 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9712 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9713 ;;Total ram usage:        1 bytes
  9714 ;; Hardware stack levels used:    1
  9715 ;; Hardware stack levels required when called:    3
  9716 ;; This function calls:
  9717 ;;		Nothing
  9718 ;; This function is called by:
  9719 ;;		_Auto_cut
  9720 ;; This function uses a non-reentrant model
  9721 ;;
  9722                           
  9723                           	psect	text24
  9724  0000'                    __ptext24:
  9725                           	opt stack 0
  9726  0000'                    _ANALOG_IN:
  9727                           	opt stack 25
  9728                           
  9729                           ;incstack = 0
  9730                           ;ANALOG_IN@b stored from wreg
  9731  0000' 6E1E'              	movwf	ANALOG_IN@b,c
  9732                           
  9733                           ;tasks.h: 129: switch (b) {
  9734  0002' D006               	goto	l7939
  9735  0004'                    l7925:
  9736                           
  9737                           ;tasks.h: 131: return 8;
  9738  0004' 0E08               	movlw	8
  9739  0006' 0012               	return	
  9740  0008'                    l7929:
  9741                           
  9742                           ;tasks.h: 133: return 9;
  9743  0008' 0E09               	movlw	9
  9744  000A' 0012               	return	
  9745  000C'                    l7933:
  9746                           
  9747                           ;tasks.h: 135: return 10;
  9748  000C' 0E0A               	movlw	10
  9749  000E' 0012               	return	
  9750  0010'                    l7939:
  9751  0010' 501E'              	movf	ANALOG_IN@b,w,c
  9752                           
  9753                           ; Switch size 1, requested type "space"
  9754                           ; Number of cases is 3, Range of values is 0 to 2
  9755                           ; switch strategies available:
  9756                           ; Name         Instructions Cycles
  9757                           ; simple_byte           10     6 (average)
  9758                           ;	Chosen strategy is simple_byte
  9759  0012' 0A00               	xorlw	0	; case 0
  9760  0014' B4D8               	btfsc	status,2,c
  9761  0016' D7F6               	goto	l7925
  9762  0018' 0A01               	xorlw	1	; case 1
  9763  001A' B4D8               	btfsc	status,2,c
  9764  001C' D7F5               	goto	l7929
  9765  001E' 0A03               	xorlw	3	; case 2
  9766  0020' B4D8               	btfsc	status,2,c
  9767  0022' D7F4               	goto	l7933
  9768                           
  9769                           ;tasks.h: 137: return 0;
  9770  0024' 0E00               	movlw	0
  9771  0026' 0012               	return	
  9772  0028'                    __end_of_ANALOG_IN:
  9773                           	opt stack 0
  9774                           tblptru	equ	0xFF8
  9775                           tblptrh	equ	0xFF7
  9776                           tblptrl	equ	0xFF6
  9777                           tablat	equ	0xFF5
  9778                           prodh	equ	0xFF4
  9779                           prodl	equ	0xFF3
  9780                           intcon	equ	0xFF2
  9781                           indf0	equ	0xFEF
  9782                           postinc0	equ	0xFEE
  9783                           fsr0h	equ	0xFEA
  9784                           fsr0l	equ	0xFE9
  9785                           wreg	equ	0xFE8
  9786                           postdec1	equ	0xFE5
  9787                           fsr1h	equ	0xFE2
  9788                           fsr1l	equ	0xFE1
  9789                           indf2	equ	0xFDF
  9790                           postinc2	equ	0xFDE
  9791                           postdec2	equ	0xFDD
  9792                           plusw2	equ	0xFDB
  9793                           fsr2h	equ	0xFDA
  9794                           fsr2l	equ	0xFD9
  9795                           status	equ	0xFD8
  9796                           
  9797 ;; *************** function _ADC *****************
  9798 ;; Defined at:
  9799 ;;		line 172 in file "../My_header\My_header.h"
  9800 ;; Parameters:    Size  Location     Type
  9801 ;;  ch              1    wreg     unsigned char 
  9802 ;; Auto vars:     Size  Location     Type
  9803 ;;  ch              1   33[COMRAM] unsigned char 
  9804 ;; Return value:  Size  Location     Type
  9805 ;;                  2   30[COMRAM] unsigned int 
  9806 ;; Registers used:
  9807 ;;		wreg, status,2, status,0
  9808 ;; Tracked objects:
  9809 ;;		On entry : 0/0
  9810 ;;		On exit  : 0/0
  9811 ;;		Unchanged: 0/0
  9812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9813 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9814 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9815 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9816 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9817 ;;Total ram usage:        4 bytes
  9818 ;; Hardware stack levels used:    1
  9819 ;; Hardware stack levels required when called:    3
  9820 ;; This function calls:
  9821 ;;		Nothing
  9822 ;; This function is called by:
  9823 ;;		_Auto_cut
  9824 ;;		_sleep_loop
  9825 ;; This function uses a non-reentrant model
  9826 ;;
  9827                           
  9828                           	psect	text25
  9829  0000'                    __ptext25:
  9830                           	opt stack 0
  9831  0000'                    _ADC:
  9832                           	opt stack 26
  9833                           
  9834                           ;incstack = 0
  9835                           ;ADC@ch stored from wreg
  9836  0000' 6E21'              	movwf	ADC@ch,c
  9837                           
  9838                           ;My_header\My_header.h: 173: ADCON0bits.CHS = ch;
  9839  0002' C021' F020'        	movff	ADC@ch,??_ADC
  9840  0006' 4620'              	rlncf	??_ADC,f,c
  9841  0008' 4620'              	rlncf	??_ADC,f,c
  9842  000A' 50C2               	movf	4034,w,c	;volatile
  9843  000C' 1820'              	xorwf	??_ADC,w,c
  9844  000E' 0BC3               	andlw	-61
  9845  0010' 1820'              	xorwf	??_ADC,w,c
  9846  0012' 6EC2               	movwf	4034,c	;volatile
  9847                           
  9848                           ;My_header\My_header.h: 174: ADCON0bits.ADON = 1;
  9849  0014' 80C2               	bsf	4034,0,c	;volatile
  9850                           
  9851                           ;My_header\My_header.h: 176: PIR1bits.ADIF = 0;
  9852  0016' 9C9E               	bcf	3998,6,c	;volatile
  9853                           
  9854                           ;My_header\My_header.h: 177: ADCON0bits.GO_nDONE = 1;
  9855  0018' 82C2               	bsf	4034,1,c	;volatile
  9856  001A'                    l163:
  9857  001A' AC9E               	btfss	3998,6,c	;volatile
  9858  001C' D7FE               	goto	l163
  9859                           
  9860                           ;My_header\My_header.h: 179: return ADRES;
  9861  001E' CFC3 F01E'         	movff	4035,?_ADC	;volatile
  9862  0022' CFC4 F01F'         	movff	4036,?_ADC+1	;volatile
  9863  0026' 0012               	return		;funcret
  9864  0028'                    __end_of_ADC:
  9865                           	opt stack 0
  9866                           tblptru	equ	0xFF8
  9867                           tblptrh	equ	0xFF7
  9868                           tblptrl	equ	0xFF6
  9869                           tablat	equ	0xFF5
  9870                           prodh	equ	0xFF4
  9871                           prodl	equ	0xFF3
  9872                           intcon	equ	0xFF2
  9873                           indf0	equ	0xFEF
  9874                           postinc0	equ	0xFEE
  9875                           fsr0h	equ	0xFEA
  9876                           fsr0l	equ	0xFE9
  9877                           wreg	equ	0xFE8
  9878                           postdec1	equ	0xFE5
  9879                           fsr1h	equ	0xFE2
  9880                           fsr1l	equ	0xFE1
  9881                           indf2	equ	0xFDF
  9882                           postinc2	equ	0xFDE
  9883                           postdec2	equ	0xFDD
  9884                           plusw2	equ	0xFDB
  9885                           fsr2h	equ	0xFDA
  9886                           fsr2l	equ	0xFD9
  9887                           status	equ	0xFD8
  9888                           
  9889 ;; *************** function _my_terminal_loop *****************
  9890 ;; Defined at:
  9891 ;;		line 22 in file "../My_header\My_terminal.h"
  9892 ;; Parameters:    Size  Location     Type
  9893 ;;  tx              2   20[BANK1 ] PTR struct ringbuf
  9894 ;;		 -> usb_tx(8), 
  9895 ;;  rx              2   22[BANK1 ] PTR struct ringbuf
  9896 ;;		 -> usb_rx(8), 
  9897 ;; Auto vars:     Size  Location     Type
  9898 ;;  i               1  102[BANK3 ] unsigned char 
  9899 ;;  i               1  104[BANK3 ] unsigned char 
  9900 ;;  ascii           1  103[BANK3 ] unsigned char 
  9901 ;;  buf           100    0[BANK3 ] unsigned char [100]
  9902 ;; Return value:  Size  Location     Type
  9903 ;;		None               void
  9904 ;; Registers used:
  9905 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9906 ;; Tracked objects:
  9907 ;;		On entry : 0/0
  9908 ;;		On exit  : 0/0
  9909 ;;		Unchanged: 0/0
  9910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9911 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9912 ;;      Locals:         0       0       0       0     105       0       0       0       0       0       0       0       
      +0       0       0       0
  9913 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9914 ;;      Totals:         0       0       6       0     105       0       0       0       0       0       0       0       
      +0       0       0       0
  9915 ;;Total ram usage:      111 bytes
  9916 ;; Hardware stack levels used:    1
  9917 ;; Hardware stack levels required when called:   11
  9918 ;; This function calls:
  9919 ;;		_command_operation
  9920 ;;		_ringbuf_backspace
  9921 ;;		_ringbuf_delete
  9922 ;;		_ringbuf_init
  9923 ;;		_ringbuf_num
  9924 ;;		_ringbuf_pop
  9925 ;;		_ringbuf_put
  9926 ;;		_ringbuf_put_num
  9927 ;;		_ringbuf_put_str
  9928 ;; This function is called by:
  9929 ;;		_main
  9930 ;; This function uses a non-reentrant model
  9931 ;;
  9932                           
  9933                           	psect	text26
  9934  0000'                    __ptext26:
  9935                           	opt stack 0
  9936  0000'                    _my_terminal_loop:
  9937                           	opt stack 19
  9938                           
  9939                           ;My_header\My_terminal.h: 23: static ringbuf_t command;
  9940                           ;My_header\My_terminal.h: 24: static uint8_t command_init = 0;
  9941                           ;My_header\My_terminal.h: 25: if (command_init == 0) {
  9942                           
  9943                           ;incstack = 0
  9944  0000' 0100               	movlb	0	; () banked
  9945  0002' 5100'              	movf	my_terminal_loop@command_init& (0+255),w,b
  9946  0004' 0100               	movlb	0	; () banked
  9947  0006' A4D8               	btfss	status,2,c
  9948  0008' D016               	goto	l8837
  9949                           
  9950                           ; BSR set to: 0
  9951                           ;My_header\My_terminal.h: 26: command_init = 1;
  9952  000A' 0E01               	movlw	1
  9953  000C' 0100               	movlb	0	; () banked
  9954  000E' 6F00'              	movwf	my_terminal_loop@command_init& (0+255),b
  9955                           
  9956                           ; BSR set to: 0
  9957                           ;My_header\My_terminal.h: 27: char buf[100];
  9958                           ;My_header\My_terminal.h: 28: ringbuf_init(&command, buf, sizeof (buf));
  9959  0010' 0E00'              	movlw	low my_terminal_loop@command
  9960  0012' 0100               	movlb	0	; () banked
  9961  0014' 6F00'              	movwf	ringbuf_init@rb& (0+255),b
  9962  0016' 0E00'              	movlw	high my_terminal_loop@command
  9963  0018' 0100               	movlb	0	; () banked
  9964  001A' 6F00'              	movwf	(ringbuf_init@rb+1)& (0+255),b
  9965  001C' 0E00'              	movlw	low my_terminal_loop@buf
  9966  001E' 0100               	movlb	0	; () banked
  9967  0020' 6F00'              	movwf	ringbuf_init@internal_buf& (0+255),b
  9968  0022' 0E00'              	movlw	high my_terminal_loop@buf
  9969  0024' 0100               	movlb	0	; () banked
  9970  0026' 6F00'              	movwf	(ringbuf_init@internal_buf+1)& (0+255),b
  9971  0028' 0E00               	movlw	0
  9972  002A' 0100               	movlb	0	; () banked
  9973  002C' 6F00'              	movwf	(ringbuf_init@bufsize+1)& (0+255),b
  9974  002E' 0E64               	movlw	100
  9975  0030' 6F00'              	movwf	ringbuf_init@bufsize& (0+255),b
  9976  0032' EC00' F000'        	call	_ringbuf_init	;wreg free
  9977  0036'                    l8837:
  9978                           
  9979                           ;My_header\My_terminal.h: 29: }
  9980                           ;My_header\My_terminal.h: 30: if (ringbuf_num(rx)) {
  9981  0036' C016' F01E'        	movff	my_terminal_loop@rx,ringbuf_num@rb
  9982  003A' C017' F01F'        	movff	my_terminal_loop@rx+1,ringbuf_num@rb+1
  9983  003E' EC00' F000'        	call	_ringbuf_num	;wreg free
  9984  0042' 501E'              	movf	?_ringbuf_num,w,c
  9985  0044' 101F'              	iorwf	?_ringbuf_num+1,w,c
  9986  0046' B4D8               	btfsc	status,2,c
  9987  0048' 0012               	return	
  9988                           
  9989                           ;My_header\My_terminal.h: 31: char ascii = ringbuf_pop(rx);
  9990  004A' C016' F020'        	movff	my_terminal_loop@rx,ringbuf_pop@rb
  9991  004E' C017' F021'        	movff	my_terminal_loop@rx+1,ringbuf_pop@rb+1
  9992  0052' EC00' F000'        	call	_ringbuf_pop	;wreg free
  9993  0056' 0103               	movlb	3	; () banked
  9994  0058' 6F00'              	movwf	my_terminal_loop@ascii& (0+255),b
  9995                           
  9996                           ;My_header\My_terminal.h: 32: switch (ascii) {
  9997  005A' D162               	goto	l8901
  9998  005C'                    l8841:
  9999                           
 10000                           ; BSR set to: 3
 10001                           ;My_header\My_terminal.h: 34: ringbuf_put(&command, '\0');
 10002  005C' 0E00'              	movlw	low my_terminal_loop@command
 10003  005E' 0100               	movlb	0	; () banked
 10004  0060' 6F00'              	movwf	ringbuf_put@rb& (0+255),b
 10005  0062' 0E00'              	movlw	high my_terminal_loop@command
 10006  0064' 0100               	movlb	0	; () banked
 10007  0066' 6F00'              	movwf	(ringbuf_put@rb+1)& (0+255),b
 10008  0068' 0E00               	movlw	0
 10009  006A' 0100               	movlb	0	; () banked
 10010  006C' 6F00'              	movwf	ringbuf_put@asciicode& (0+255),b
 10011  006E' EC00' F000'        	call	_ringbuf_put	;wreg free
 10012                           
 10013                           ;My_header\My_terminal.h: 35: ringbuf_put(tx, '\t');
 10014  0072' C014' F020'        	movff	my_terminal_loop@tx,ringbuf_put@rb
 10015  0076' C015' F021'        	movff	my_terminal_loop@tx+1,ringbuf_put@rb+1
 10016  007A' 0E09               	movlw	9
 10017  007C' 0100               	movlb	0	; () banked
 10018  007E' 6F00'              	movwf	ringbuf_put@asciicode& (0+255),b
 10019  0080' EC00' F000'        	call	_ringbuf_put	;wreg free
 10020                           
 10021                           ;My_header\My_terminal.h: 36: ringbuf_put_num(tx, ringbuf_num(&command) - 1, 2);
 10022  0084' 0E00'              	movlw	low my_terminal_loop@command
 10023  0086' 6E1E'              	movwf	ringbuf_num@rb,c
 10024  0088' 0E00'              	movlw	high my_terminal_loop@command
 10025  008A' 6E1F'              	movwf	ringbuf_num@rb+1,c
 10026  008C' EC00' F000'        	call	_ringbuf_num	;wreg free
 10027  0090' 0EFF               	movlw	255
 10028  0092' 241E'              	addwf	?_ringbuf_num,w,c
 10029  0094' 0103               	movlb	3	; () banked
 10030  0096' 6F00'              	movwf	_my_terminal_loop$3369& (0+255),b
 10031  0098' 0EFF               	movlw	255
 10032  009A' 201F'              	addwfc	?_ringbuf_num+1,w,c
 10033  009C' 0103               	movlb	3	; () banked
 10034  009E' 6F00'              	movwf	(_my_terminal_loop$3369+1)& (0+255),b
 10035                           
 10036                           ;My_header\My_terminal.h: 36: ringbuf_put_num(tx, ringbuf_num(&command) - 1, 2);
 10037  00A0' C014' F027'        	movff	my_terminal_loop@tx,ringbuf_put_num@rb
 10038  00A4' C015' F028'        	movff	my_terminal_loop@tx+1,ringbuf_put_num@rb+1
 10039  00A8' C064' F029'        	movff	_my_terminal_loop$3369,ringbuf_put_num@value
 10040  00AC' C065' F02A'        	movff	_my_terminal_loop$3369+1,ringbuf_put_num@value+1
 10041  00B0' 0E02               	movlw	2
 10042  00B2' 0100               	movlb	0	; () banked
 10043  00B4' 6F00'              	movwf	ringbuf_put_num@digits& (0+255),b
 10044  00B6' EC00' F000'        	call	_ringbuf_put_num	;wreg free
 10045                           
 10046                           ;My_header\My_terminal.h: 37: ringbuf_put(tx, '\n');
 10047  00BA' C014' F020'        	movff	my_terminal_loop@tx,ringbuf_put@rb
 10048  00BE' C015' F021'        	movff	my_terminal_loop@tx+1,ringbuf_put@rb+1
 10049  00C2' 0E0A               	movlw	10
 10050  00C4' 0100               	movlb	0	; () banked
 10051  00C6' 6F00'              	movwf	ringbuf_put@asciicode& (0+255),b
 10052  00C8' EC00' F000'        	call	_ringbuf_put	;wreg free
 10053                           
 10054                           ;My_header\My_terminal.h: 38: static char op0[20];
 10055                           ;My_header\My_terminal.h: 39: static char op1[20];
 10056                           ;My_header\My_terminal.h: 40: static char op2[20];
 10057                           ;My_header\My_terminal.h: 41: static char op3[20];
 10058                           ;My_header\My_terminal.h: 42: uint8_t i;
 10059                           ;My_header\My_terminal.h: 43: for (i = 0; op0[i] = ringbuf_pop(&command); i++);
 10060  00CC' 0E00               	movlw	0
 10061  00CE' 0103               	movlb	3	; () banked
 10062  00D0' 6F00'              	movwf	my_terminal_loop@i& (0+255),b
 10063  00D2' D002               	goto	l8847
 10064  00D4'                    l8845:
 10065                           
 10066                           ; BSR set to: 3
 10067  00D4' 0103               	movlb	3	; () banked
 10068  00D6' 2B00'              	incf	my_terminal_loop@i& (0+255),f,b
 10069  00D8'                    l8847:
 10070                           
 10071                           ; BSR set to: 3
 10072  00D8' 0E00'              	movlw	low my_terminal_loop@command
 10073  00DA' 6E20'              	movwf	ringbuf_pop@rb,c
 10074  00DC' 0E00'              	movlw	high my_terminal_loop@command
 10075  00DE' 6E21'              	movwf	ringbuf_pop@rb+1,c
 10076  00E0' EC00' F000'        	call	_ringbuf_pop	;wreg free
 10077  00E4' 0101               	movlb	1	; () banked
 10078  00E6' 6F00'              	movwf	??_my_terminal_loop& (0+255),b
 10079  00E8' 0103               	movlb	3	; () banked
 10080  00EA' 5100'              	movf	my_terminal_loop@i& (0+255),w,b
 10081  00EC' 0D01               	mullw	1
 10082  00EE' 0E00'              	movlw	low my_terminal_loop@op0
 10083  00F0' 24F3               	addwf	prodl,w,c
 10084  00F2' 6ED9               	movwf	fsr2l,c
 10085  00F4' 0E00'              	movlw	high my_terminal_loop@op0
 10086  00F6' 20F4               	addwfc	prodh,w,c
 10087  00F8' 6EDA               	movwf	fsr2h,c
 10088  00FA' C018' FFDF         	movff	??_my_terminal_loop,indf2
 10089  00FE' 50DF               	movf	indf2,w,c
 10090  0100' A4D8               	btfss	status,2,c
 10091  0102' D7E8               	goto	l8845
 10092                           
 10093                           ; BSR set to: 3
 10094                           ;My_header\My_terminal.h: 44: op0[i] = '\0';
 10095                           
 10096                           ; BSR set to: 3
 10097  0104' 0103               	movlb	3	; () banked
 10098  0106' 5100'              	movf	my_terminal_loop@i& (0+255),w,b
 10099  0108' 0D01               	mullw	1
 10100  010A' 0E00'              	movlw	low my_terminal_loop@op0
 10101  010C' 24F3               	addwf	prodl,w,c
 10102  010E' 6ED9               	movwf	fsr2l,c
 10103  0110' 0E00'              	movlw	high my_terminal_loop@op0
 10104  0112' 20F4               	addwfc	prodh,w,c
 10105  0114' 6EDA               	movwf	fsr2h,c
 10106  0116' 0E00               	movlw	0
 10107  0118' 6EDF               	movwf	indf2,c
 10108                           
 10109                           ; BSR set to: 3
 10110                           ;My_header\My_terminal.h: 45: for (i = 0; op1[i] = ringbuf_pop(&command); i++);
 10111  011A' 0E00               	movlw	0
 10112  011C' 0103               	movlb	3	; () banked
 10113  011E' 6F00'              	movwf	my_terminal_loop@i& (0+255),b
 10114  0120' D002               	goto	l8855
 10115  0122'                    l8853:
 10116                           
 10117                           ; BSR set to: 3
 10118  0122' 0103               	movlb	3	; () banked
 10119  0124' 2B00'              	incf	my_terminal_loop@i& (0+255),f,b
 10120  0126'                    l8855:
 10121                           
 10122                           ; BSR set to: 3
 10123  0126' 0E00'              	movlw	low my_terminal_loop@command
 10124  0128' 6E20'              	movwf	ringbuf_pop@rb,c
 10125  012A' 0E00'              	movlw	high my_terminal_loop@command
 10126  012C' 6E21'              	movwf	ringbuf_pop@rb+1,c
 10127  012E' EC00' F000'        	call	_ringbuf_pop	;wreg free
 10128  0132' 0101               	movlb	1	; () banked
 10129  0134' 6F00'              	movwf	??_my_terminal_loop& (0+255),b
 10130  0136' 0103               	movlb	3	; () banked
 10131  0138' 5100'              	movf	my_terminal_loop@i& (0+255),w,b
 10132  013A' 0D01               	mullw	1
 10133  013C' 0E00'              	movlw	low my_terminal_loop@op1
 10134  013E' 24F3               	addwf	prodl,w,c
 10135  0140' 6ED9               	movwf	fsr2l,c
 10136  0142' 0E00'              	movlw	high my_terminal_loop@op1
 10137  0144' 20F4               	addwfc	prodh,w,c
 10138  0146' 6EDA               	movwf	fsr2h,c
 10139  0148' C018' FFDF         	movff	??_my_terminal_loop,indf2
 10140  014C' 50DF               	movf	indf2,w,c
 10141  014E' A4D8               	btfss	status,2,c
 10142  0150' D7E8               	goto	l8853
 10143                           
 10144                           ; BSR set to: 3
 10145                           ;My_header\My_terminal.h: 46: op1[i] = '\0';
 10146                           
 10147                           ; BSR set to: 3
 10148  0152' 0103               	movlb	3	; () banked
 10149  0154' 5100'              	movf	my_terminal_loop@i& (0+255),w,b
 10150  0156' 0D01               	mullw	1
 10151  0158' 0E00'              	movlw	low my_terminal_loop@op1
 10152  015A' 24F3               	addwf	prodl,w,c
 10153  015C' 6ED9               	movwf	fsr2l,c
 10154  015E' 0E00'              	movlw	high my_terminal_loop@op1
 10155  0160' 20F4               	addwfc	prodh,w,c
 10156  0162' 6EDA               	movwf	fsr2h,c
 10157  0164' 0E00               	movlw	0
 10158  0166' 6EDF               	movwf	indf2,c
 10159                           
 10160                           ; BSR set to: 3
 10161                           ;My_header\My_terminal.h: 47: for (i = 0; op2[i] = ringbuf_pop(&command); i++);
 10162  0168' 0E00               	movlw	0
 10163  016A' 0103               	movlb	3	; () banked
 10164  016C' 6F00'              	movwf	my_terminal_loop@i& (0+255),b
 10165  016E' D002               	goto	l8863
 10166  0170'                    l8861:
 10167                           
 10168                           ; BSR set to: 3
 10169  0170' 0103               	movlb	3	; () banked
 10170  0172' 2B00'              	incf	my_terminal_loop@i& (0+255),f,b
 10171  0174'                    l8863:
 10172                           
 10173                           ; BSR set to: 3
 10174  0174' 0E00'              	movlw	low my_terminal_loop@command
 10175  0176' 6E20'              	movwf	ringbuf_pop@rb,c
 10176  0178' 0E00'              	movlw	high my_terminal_loop@command
 10177  017A' 6E21'              	movwf	ringbuf_pop@rb+1,c
 10178  017C' EC00' F000'        	call	_ringbuf_pop	;wreg free
 10179  0180' 0101               	movlb	1	; () banked
 10180  0182' 6F00'              	movwf	??_my_terminal_loop& (0+255),b
 10181  0184' 0103               	movlb	3	; () banked
 10182  0186' 5100'              	movf	my_terminal_loop@i& (0+255),w,b
 10183  0188' 0D01               	mullw	1
 10184  018A' 0E00'              	movlw	low my_terminal_loop@op2
 10185  018C' 24F3               	addwf	prodl,w,c
 10186  018E' 6ED9               	movwf	fsr2l,c
 10187  0190' 0E00'              	movlw	high my_terminal_loop@op2
 10188  0192' 20F4               	addwfc	prodh,w,c
 10189  0194' 6EDA               	movwf	fsr2h,c
 10190  0196' C018' FFDF         	movff	??_my_terminal_loop,indf2
 10191  019A' 50DF               	movf	indf2,w,c
 10192  019C' A4D8               	btfss	status,2,c
 10193  019E' D7E8               	goto	l8861
 10194                           
 10195                           ; BSR set to: 3
 10196                           ;My_header\My_terminal.h: 48: op2[i] = '\0';
 10197                           
 10198                           ; BSR set to: 3
 10199  01A0' 0103               	movlb	3	; () banked
 10200  01A2' 5100'              	movf	my_terminal_loop@i& (0+255),w,b
 10201  01A4' 0D01               	mullw	1
 10202  01A6' 0E00'              	movlw	low my_terminal_loop@op2
 10203  01A8' 24F3               	addwf	prodl,w,c
 10204  01AA' 6ED9               	movwf	fsr2l,c
 10205  01AC' 0E00'              	movlw	high my_terminal_loop@op2
 10206  01AE' 20F4               	addwfc	prodh,w,c
 10207  01B0' 6EDA               	movwf	fsr2h,c
 10208  01B2' 0E00               	movlw	0
 10209  01B4' 6EDF               	movwf	indf2,c
 10210                           
 10211                           ; BSR set to: 3
 10212                           ;My_header\My_terminal.h: 49: for (i = 0; op3[i] = ringbuf_pop(&command); i++);
 10213  01B6' 0E00               	movlw	0
 10214  01B8' 0103               	movlb	3	; () banked
 10215  01BA' 6F00'              	movwf	my_terminal_loop@i& (0+255),b
 10216  01BC' D002               	goto	l8871
 10217  01BE'                    l8869:
 10218                           
 10219                           ; BSR set to: 3
 10220  01BE' 0103               	movlb	3	; () banked
 10221  01C0' 2B00'              	incf	my_terminal_loop@i& (0+255),f,b
 10222  01C2'                    l8871:
 10223                           
 10224                           ; BSR set to: 3
 10225  01C2' 0E00'              	movlw	low my_terminal_loop@command
 10226  01C4' 6E20'              	movwf	ringbuf_pop@rb,c
 10227  01C6' 0E00'              	movlw	high my_terminal_loop@command
 10228  01C8' 6E21'              	movwf	ringbuf_pop@rb+1,c
 10229  01CA' EC00' F000'        	call	_ringbuf_pop	;wreg free
 10230  01CE' 0101               	movlb	1	; () banked
 10231  01D0' 6F00'              	movwf	??_my_terminal_loop& (0+255),b
 10232  01D2' 0103               	movlb	3	; () banked
 10233  01D4' 5100'              	movf	my_terminal_loop@i& (0+255),w,b
 10234  01D6' 0D01               	mullw	1
 10235  01D8' 0E00'              	movlw	low my_terminal_loop@op3
 10236  01DA' 24F3               	addwf	prodl,w,c
 10237  01DC' 6ED9               	movwf	fsr2l,c
 10238  01DE' 0E00'              	movlw	high my_terminal_loop@op3
 10239  01E0' 20F4               	addwfc	prodh,w,c
 10240  01E2' 6EDA               	movwf	fsr2h,c
 10241  01E4' C018' FFDF         	movff	??_my_terminal_loop,indf2
 10242  01E8' 50DF               	movf	indf2,w,c
 10243  01EA' A4D8               	btfss	status,2,c
 10244  01EC' D7E8               	goto	l8869
 10245                           
 10246                           ; BSR set to: 3
 10247                           ;My_header\My_terminal.h: 50: op3[i] = '\0';
 10248                           
 10249                           ; BSR set to: 3
 10250  01EE' 0103               	movlb	3	; () banked
 10251  01F0' 5100'              	movf	my_terminal_loop@i& (0+255),w,b
 10252  01F2' 0D01               	mullw	1
 10253  01F4' 0E00'              	movlw	low my_terminal_loop@op3
 10254  01F6' 24F3               	addwf	prodl,w,c
 10255  01F8' 6ED9               	movwf	fsr2l,c
 10256  01FA' 0E00'              	movlw	high my_terminal_loop@op3
 10257  01FC' 20F4               	addwfc	prodh,w,c
 10258  01FE' 6EDA               	movwf	fsr2h,c
 10259  0200' 0E00               	movlw	0
 10260  0202' 6EDF               	movwf	indf2,c
 10261                           
 10262                           ; BSR set to: 3
 10263                           ;My_header\My_terminal.h: 51: command_operation(tx, op0, op1, op2, op3);
 10264  0204' C014' F009'        	movff	my_terminal_loop@tx,command_operation@tx
 10265  0208' C015' F00A'        	movff	my_terminal_loop@tx+1,command_operation@tx+1
 10266  020C' 0E00'              	movlw	low my_terminal_loop@op0
 10267  020E' 0101               	movlb	1	; () banked
 10268  0210' 6F00'              	movwf	command_operation@op0& (0+255),b
 10269  0212' 0E00'              	movlw	high my_terminal_loop@op0
 10270  0214' 0101               	movlb	1	; () banked
 10271  0216' 6F00'              	movwf	(command_operation@op0+1)& (0+255),b
 10272  0218' 0E00'              	movlw	low my_terminal_loop@op1
 10273  021A' 0101               	movlb	1	; () banked
 10274  021C' 6F00'              	movwf	command_operation@op1& (0+255),b
 10275  021E' 0E00'              	movlw	high my_terminal_loop@op1
 10276  0220' 0101               	movlb	1	; () banked
 10277  0222' 6F00'              	movwf	(command_operation@op1+1)& (0+255),b
 10278  0224' 0E00'              	movlw	low my_terminal_loop@op2
 10279  0226' 0101               	movlb	1	; () banked
 10280  0228' 6F00'              	movwf	command_operation@op2& (0+255),b
 10281  022A' 0E00'              	movlw	high my_terminal_loop@op2
 10282  022C' 0101               	movlb	1	; () banked
 10283  022E' 6F00'              	movwf	(command_operation@op2+1)& (0+255),b
 10284  0230' 0E00'              	movlw	low my_terminal_loop@op3
 10285  0232' 0101               	movlb	1	; () banked
 10286  0234' 6F00'              	movwf	command_operation@op3& (0+255),b
 10287  0236' 0E00'              	movlw	high my_terminal_loop@op3
 10288  0238' 0101               	movlb	1	; () banked
 10289  023A' 6F00'              	movwf	(command_operation@op3+1)& (0+255),b
 10290  023C' EC00' F000'        	call	_command_operation	;wreg free
 10291                           
 10292                           ;My_header\My_terminal.h: 52: break;
 10293  0240' 0012               	return	
 10294  0242'                    l8877:
 10295                           
 10296                           ;My_header\My_terminal.h: 54: ringbuf_put(&command, '\0');
 10297  0242' 0E00'              	movlw	low my_terminal_loop@command
 10298  0244' 0100               	movlb	0	; () banked
 10299  0246' 6F00'              	movwf	ringbuf_put@rb& (0+255),b
 10300  0248' 0E00'              	movlw	high my_terminal_loop@command
 10301  024A' 0100               	movlb	0	; () banked
 10302  024C' 6F00'              	movwf	(ringbuf_put@rb+1)& (0+255),b
 10303  024E' 0E00               	movlw	0
 10304  0250' 0100               	movlb	0	; () banked
 10305  0252' 6F00'              	movwf	ringbuf_put@asciicode& (0+255),b
 10306  0254' EC00' F000'        	call	_ringbuf_put	;wreg free
 10307                           
 10308                           ;My_header\My_terminal.h: 55: ringbuf_put(tx, ' ');
 10309  0258' C014' F020'        	movff	my_terminal_loop@tx,ringbuf_put@rb
 10310  025C' C015' F021'        	movff	my_terminal_loop@tx+1,ringbuf_put@rb+1
 10311  0260' 0E20               	movlw	32
 10312  0262' 0100               	movlb	0	; () banked
 10313  0264' 6F00'              	movwf	ringbuf_put@asciicode& (0+255),b
 10314  0266' EC00' F000'        	call	_ringbuf_put	;wreg free
 10315                           
 10316                           ;My_header\My_terminal.h: 56: break;
 10317  026A' 0012               	return	
 10318  026C'                    l8879:
 10319                           
 10320                           ;My_header\My_terminal.h: 58: ringbuf_backspace(&command);
 10321  026C' 0E00'              	movlw	low my_terminal_loop@command
 10322  026E' 6E20'              	movwf	ringbuf_backspace@rb,c
 10323  0270' 0E00'              	movlw	high my_terminal_loop@command
 10324  0272' 6E21'              	movwf	ringbuf_backspace@rb+1,c
 10325  0274' EC00' F000'        	call	_ringbuf_backspace	;wreg free
 10326                           
 10327                           ;My_header\My_terminal.h: 59: ringbuf_put_str(tx, "\b \b");
 10328  0278' C014' F027'        	movff	my_terminal_loop@tx,ringbuf_put_str@rb
 10329  027C' C015' F028'        	movff	my_terminal_loop@tx+1,ringbuf_put_str@rb+1
 10330  0280' 0E00'              	movlw	low STR_2
 10331  0282' 0100               	movlb	0	; () banked
 10332  0284' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 10333  0286' 0E00'              	movlw	high STR_2
 10334  0288' 0100               	movlb	0	; () banked
 10335  028A' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 10336  028C' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 10337                           
 10338                           ;My_header\My_terminal.h: 60: break;
 10339  0290' 0012               	return	
 10340  0292'                    l8883:
 10341                           
 10342                           ;My_header\My_terminal.h: 62: for (uint8_t i = 0; i < ringbuf_num(&command); i++) ringbu
      +                          f_put_str(tx, "\b \b");
 10343  0292' 0E00               	movlw	0
 10344  0294' 0103               	movlb	3	; () banked
 10345  0296' 6F00'              	movwf	my_terminal_loop@i_2176& (0+255),b
 10346  0298' D00E               	goto	l8889
 10347  029A'                    l8885:
 10348  029A' C014' F027'        	movff	my_terminal_loop@tx,ringbuf_put_str@rb
 10349  029E' C015' F028'        	movff	my_terminal_loop@tx+1,ringbuf_put_str@rb+1
 10350  02A2' 0E00'              	movlw	low STR_2
 10351  02A4' 0100               	movlb	0	; () banked
 10352  02A6' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 10353  02A8' 0E00'              	movlw	high STR_2
 10354  02AA' 0100               	movlb	0	; () banked
 10355  02AC' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 10356  02AE' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 10357  02B2' 0103               	movlb	3	; () banked
 10358  02B4' 2B00'              	incf	my_terminal_loop@i_2176& (0+255),f,b
 10359  02B6'                    l8889:
 10360                           
 10361                           ; BSR set to: 3
 10362  02B6' 0E00'              	movlw	low my_terminal_loop@command
 10363  02B8' 6E1E'              	movwf	ringbuf_num@rb,c
 10364  02BA' 0E00'              	movlw	high my_terminal_loop@command
 10365  02BC' 6E1F'              	movwf	ringbuf_num@rb+1,c
 10366  02BE' EC00' F000'        	call	_ringbuf_num	;wreg free
 10367  02C2' 0103               	movlb	3	; () banked
 10368  02C4' 5100'              	movf	my_terminal_loop@i_2176& (0+255),w,b
 10369  02C6' 0101               	movlb	1	; () banked
 10370  02C8' 6F00'              	movwf	??_my_terminal_loop& (0+255),b
 10371  02CA' 6B00'              	clrf	(??_my_terminal_loop+1)& (0+255),b
 10372  02CC' 501E'              	movf	?_ringbuf_num,w,c
 10373  02CE' 0101               	movlb	1	; () banked
 10374  02D0' 5D00'              	subwf	??_my_terminal_loop& (0+255),w,b
 10375  02D2' 501F'              	movf	?_ringbuf_num+1,w,c
 10376  02D4' 0101               	movlb	1	; () banked
 10377  02D6' 5900'              	subwfb	(??_my_terminal_loop+1)& (0+255),w,b
 10378  02D8' A0D8               	btfss	status,0,c
 10379  02DA' D7DF               	goto	l8885
 10380                           
 10381                           ; BSR set to: 1
 10382                           ;My_header\My_terminal.h: 63: ringbuf_delete(&command);
 10383                           
 10384                           ; BSR set to: 1
 10385  02DC' 0E00'              	movlw	low my_terminal_loop@command
 10386  02DE' 6E1E'              	movwf	ringbuf_delete@rb,c
 10387  02E0' 0E00'              	movlw	high my_terminal_loop@command
 10388  02E2' 6E1F'              	movwf	ringbuf_delete@rb+1,c
 10389  02E4' EC00' F000'        	call	_ringbuf_delete	;wreg free
 10390                           
 10391                           ;My_header\My_terminal.h: 64: break;
 10392  02E8' 0012               	return	
 10393  02EA'                    l8893:
 10394                           
 10395                           ;My_header\My_terminal.h: 66: if (ascii >= ' ' && ascii <= '~') {
 10396  02EA' 0E1F               	movlw	31
 10397  02EC' 0103               	movlb	3	; () banked
 10398  02EE' 6500'              	cpfsgt	my_terminal_loop@ascii& (0+255),b
 10399  02F0' 0012               	return	
 10400                           
 10401                           ; BSR set to: 3
 10402  02F2' 0E7F               	movlw	127
 10403  02F4' 0103               	movlb	3	; () banked
 10404  02F6' 6100'              	cpfslt	my_terminal_loop@ascii& (0+255),b
 10405  02F8' 0012               	return	
 10406                           
 10407                           ; BSR set to: 3
 10408                           ;My_header\My_terminal.h: 67: ringbuf_put(&command, ascii);
 10409  02FA' 0E00'              	movlw	low my_terminal_loop@command
 10410  02FC' 0100               	movlb	0	; () banked
 10411  02FE' 6F00'              	movwf	ringbuf_put@rb& (0+255),b
 10412  0300' 0E00'              	movlw	high my_terminal_loop@command
 10413  0302' 0100               	movlb	0	; () banked
 10414  0304' 6F00'              	movwf	(ringbuf_put@rb+1)& (0+255),b
 10415  0306' C067' F022'        	movff	my_terminal_loop@ascii,ringbuf_put@asciicode
 10416  030A' EC00' F000'        	call	_ringbuf_put	;wreg free
 10417                           
 10418                           ;My_header\My_terminal.h: 68: ringbuf_put(tx, ascii);
 10419  030E' C014' F020'        	movff	my_terminal_loop@tx,ringbuf_put@rb
 10420  0312' C015' F021'        	movff	my_terminal_loop@tx+1,ringbuf_put@rb+1
 10421  0316' C067' F022'        	movff	my_terminal_loop@ascii,ringbuf_put@asciicode
 10422  031A' EC00' F000'        	call	_ringbuf_put	;wreg free
 10423                           
 10424                           ;My_header\My_terminal.h: 71: }
 10425                           
 10426                           ;My_header\My_terminal.h: 69: }
 10427                           ;My_header\My_terminal.h: 70: break;
 10428  031E' 0012               	return	
 10429  0320'                    l8901:
 10430  0320' 0103               	movlb	3	; () banked
 10431  0322' 5100'              	movf	my_terminal_loop@ascii& (0+255),w,b
 10432                           
 10433                           ; Switch size 1, requested type "space"
 10434                           ; Number of cases is 4, Range of values is 8 to 127
 10435                           ; switch strategies available:
 10436                           ; Name         Instructions Cycles
 10437                           ; simple_byte           13     7 (average)
 10438                           ;	Chosen strategy is simple_byte
 10439  0324' 0A08               	xorlw	8	; case 8
 10440  0326' B4D8               	btfsc	status,2,c
 10441  0328' D7A1               	goto	l8879
 10442  032A' 0A05               	xorlw	5	; case 13
 10443  032C' B4D8               	btfsc	status,2,c
 10444  032E' D696               	goto	l8841
 10445  0330' 0A2D               	xorlw	45	; case 32
 10446  0332' B4D8               	btfsc	status,2,c
 10447  0334' D786               	goto	l8877
 10448  0336' 0A5F               	xorlw	95	; case 127
 10449  0338' B4D8               	btfsc	status,2,c
 10450  033A' D7AB               	goto	l8883
 10451  033C' D7D6               	goto	l8893
 10452  033E'                    __end_of_my_terminal_loop:
 10453                           	opt stack 0
 10454                           tblptru	equ	0xFF8
 10455                           tblptrh	equ	0xFF7
 10456                           tblptrl	equ	0xFF6
 10457                           tablat	equ	0xFF5
 10458                           prodh	equ	0xFF4
 10459                           prodl	equ	0xFF3
 10460                           intcon	equ	0xFF2
 10461                           indf0	equ	0xFEF
 10462                           postinc0	equ	0xFEE
 10463                           fsr0h	equ	0xFEA
 10464                           fsr0l	equ	0xFE9
 10465                           wreg	equ	0xFE8
 10466                           postdec1	equ	0xFE5
 10467                           fsr1h	equ	0xFE2
 10468                           fsr1l	equ	0xFE1
 10469                           indf2	equ	0xFDF
 10470                           postinc2	equ	0xFDE
 10471                           postdec2	equ	0xFDD
 10472                           plusw2	equ	0xFDB
 10473                           fsr2h	equ	0xFDA
 10474                           fsr2l	equ	0xFD9
 10475                           status	equ	0xFD8
 10476                           
 10477 ;; *************** function _ringbuf_delete *****************
 10478 ;; Defined at:
 10479 ;;		line 85 in file "../My_header\My_ringbuf.h"
 10480 ;; Parameters:    Size  Location     Type
 10481 ;;  rb              2   30[COMRAM] PTR struct ringbuf
 10482 ;;		 -> my_terminal_loop@command(8), 
 10483 ;; Auto vars:     Size  Location     Type
 10484 ;;		None
 10485 ;; Return value:  Size  Location     Type
 10486 ;;		None               void
 10487 ;; Registers used:
 10488 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10489 ;; Tracked objects:
 10490 ;;		On entry : 0/0
 10491 ;;		On exit  : 0/0
 10492 ;;		Unchanged: 0/0
 10493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10494 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10497 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10498 ;;Total ram usage:        2 bytes
 10499 ;; Hardware stack levels used:    1
 10500 ;; Hardware stack levels required when called:    3
 10501 ;; This function calls:
 10502 ;;		Nothing
 10503 ;; This function is called by:
 10504 ;;		_my_terminal_loop
 10505 ;; This function uses a non-reentrant model
 10506 ;;
 10507                           
 10508                           	psect	text27
 10509  0000'                    __ptext27:
 10510                           	opt stack 0
 10511  0000'                    _ringbuf_delete:
 10512                           	opt stack 26
 10513                           
 10514                           ;My_header\My_ringbuf.h: 86: rb->head = rb->tail;
 10515                           
 10516                           ;incstack = 0
 10517  0000' EE20 F006          	lfsr	2,6
 10518  0004' 501E'              	movf	ringbuf_delete@rb,w,c
 10519  0006' 26D9               	addwf	fsr2l,f,c
 10520  0008' 501F'              	movf	ringbuf_delete@rb+1,w,c
 10521  000A' 22DA               	addwfc	fsr2h,f,c
 10522  000C' EE10 F004          	lfsr	1,4
 10523  0010' 501E'              	movf	ringbuf_delete@rb,w,c
 10524  0012' 26E1               	addwf	fsr1l,f,c
 10525  0014' 501F'              	movf	ringbuf_delete@rb+1,w,c
 10526  0016' 22E2               	addwfc	fsr1h,f,c
 10527  0018' CFDE FFE6          	movff	postinc2,postinc1
 10528  001C' CFDD FFE5          	movff	postdec2,postdec1
 10529  0020' 0012               	return		;funcret
 10530  0022'                    __end_of_ringbuf_delete:
 10531                           	opt stack 0
 10532                           tblptru	equ	0xFF8
 10533                           tblptrh	equ	0xFF7
 10534                           tblptrl	equ	0xFF6
 10535                           tablat	equ	0xFF5
 10536                           prodh	equ	0xFF4
 10537                           prodl	equ	0xFF3
 10538                           intcon	equ	0xFF2
 10539                           indf0	equ	0xFEF
 10540                           postinc0	equ	0xFEE
 10541                           fsr0h	equ	0xFEA
 10542                           fsr0l	equ	0xFE9
 10543                           wreg	equ	0xFE8
 10544                           postinc1	equ	0xFE6
 10545                           postdec1	equ	0xFE5
 10546                           fsr1h	equ	0xFE2
 10547                           fsr1l	equ	0xFE1
 10548                           indf2	equ	0xFDF
 10549                           postinc2	equ	0xFDE
 10550                           postdec2	equ	0xFDD
 10551                           plusw2	equ	0xFDB
 10552                           fsr2h	equ	0xFDA
 10553                           fsr2l	equ	0xFD9
 10554                           status	equ	0xFD8
 10555                           
 10556 ;; *************** function _ringbuf_backspace *****************
 10557 ;; Defined at:
 10558 ;;		line 78 in file "../My_header\My_ringbuf.h"
 10559 ;; Parameters:    Size  Location     Type
 10560 ;;  rb              2   32[COMRAM] PTR struct ringbuf
 10561 ;;		 -> my_terminal_loop@command(8), 
 10562 ;; Auto vars:     Size  Location     Type
 10563 ;;		None
 10564 ;; Return value:  Size  Location     Type
 10565 ;;		None               void
 10566 ;; Registers used:
 10567 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10568 ;; Tracked objects:
 10569 ;;		On entry : 0/0
 10570 ;;		On exit  : 0/0
 10571 ;;		Unchanged: 0/0
 10572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10573 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10575 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10576 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10577 ;;Total ram usage:        6 bytes
 10578 ;; Hardware stack levels used:    1
 10579 ;; Hardware stack levels required when called:    4
 10580 ;; This function calls:
 10581 ;;		_ringbuf_num
 10582 ;; This function is called by:
 10583 ;;		_my_terminal_loop
 10584 ;; This function uses a non-reentrant model
 10585 ;;
 10586                           
 10587                           	psect	text28
 10588  0000'                    __ptext28:
 10589                           	opt stack 0
 10590  0000'                    _ringbuf_backspace:
 10591                           	opt stack 25
 10592                           
 10593                           ;My_header\My_ringbuf.h: 79: if (ringbuf_num(rb)) {
 10594                           
 10595                           ;incstack = 0
 10596  0000' C020' F01E'        	movff	ringbuf_backspace@rb,ringbuf_num@rb
 10597  0004' C021' F01F'        	movff	ringbuf_backspace@rb+1,ringbuf_num@rb+1
 10598  0008' EC00' F000'        	call	_ringbuf_num	;wreg free
 10599  000C' 501E'              	movf	?_ringbuf_num,w,c
 10600  000E' 101F'              	iorwf	?_ringbuf_num+1,w,c
 10601  0010' B4D8               	btfsc	status,2,c
 10602  0012' 0012               	return	
 10603                           
 10604                           ;My_header\My_ringbuf.h: 80: if (rb->head) rb->head--;
 10605  0014' EE20 F004          	lfsr	2,4
 10606  0018' 5020'              	movf	ringbuf_backspace@rb,w,c
 10607  001A' 26D9               	addwf	fsr2l,f,c
 10608  001C' 5021'              	movf	ringbuf_backspace@rb+1,w,c
 10609  001E' 22DA               	addwfc	fsr2h,f,c
 10610  0020' 50DE               	movf	postinc2,w,c
 10611  0022' 10DE               	iorwf	postinc2,w,c
 10612  0024' B4D8               	btfsc	status,2,c
 10613  0026' D00A               	goto	l8161
 10614  0028' EE20 F004          	lfsr	2,4
 10615  002C' 5020'              	movf	ringbuf_backspace@rb,w,c
 10616  002E' 26D9               	addwf	fsr2l,f,c
 10617  0030' 5021'              	movf	ringbuf_backspace@rb+1,w,c
 10618  0032' 22DA               	addwfc	fsr2h,f,c
 10619  0034' 06DE               	decf	postinc2,f,c
 10620  0036' 0E00               	movlw	0
 10621  0038' 5ADD               	subwfb	postdec2,f,c
 10622  003A' 0012               	return	
 10623  003C'                    l8161:
 10624                           
 10625                           ;My_header\My_ringbuf.h: 81: else rb->head = rb->size - 1;
 10626  003C' 0EFF               	movlw	255
 10627  003E' 0100               	movlb	0	; () banked
 10628  0040' 6F00'              	movwf	??_ringbuf_backspace& (0+255),b
 10629  0042' 0EFF               	movlw	255
 10630  0044' 0100               	movlb	0	; () banked
 10631  0046' 6F00'              	movwf	(??_ringbuf_backspace+1)& (0+255),b
 10632  0048' EE20 F002          	lfsr	2,2
 10633  004C' 5020'              	movf	ringbuf_backspace@rb,w,c
 10634  004E' 26D9               	addwf	fsr2l,f,c
 10635  0050' 5021'              	movf	ringbuf_backspace@rb+1,w,c
 10636  0052' 22DA               	addwfc	fsr2h,f,c
 10637  0054' CFDE F008'         	movff	postinc2,??_ringbuf_backspace+2
 10638  0058' CFDD F009'         	movff	postdec2,??_ringbuf_backspace+3
 10639  005C' 0100               	movlb	0	; () banked
 10640  005E' 5100'              	movf	??_ringbuf_backspace& (0+255),w,b
 10641  0060' 0100               	movlb	0	; () banked
 10642  0062' 2700'              	addwf	(??_ringbuf_backspace+2)& (0+255),f,b
 10643  0064' 0100               	movlb	0	; () banked
 10644  0066' 5100'              	movf	(??_ringbuf_backspace+1)& (0+255),w,b
 10645  0068' 0100               	movlb	0	; () banked
 10646  006A' 2300'              	addwfc	(??_ringbuf_backspace+3)& (0+255),f,b
 10647  006C' EE20 F004          	lfsr	2,4
 10648  0070' 5020'              	movf	ringbuf_backspace@rb,w,c
 10649  0072' 26D9               	addwf	fsr2l,f,c
 10650  0074' 5021'              	movf	ringbuf_backspace@rb+1,w,c
 10651  0076' 22DA               	addwfc	fsr2h,f,c
 10652  0078' C008' FFDE         	movff	??_ringbuf_backspace+2,postinc2
 10653  007C' C009' FFDD         	movff	??_ringbuf_backspace+3,postdec2
 10654                           
 10655                           ; BSR set to: 0
 10656  0080' 0012               	return	
 10657  0082'                    __end_of_ringbuf_backspace:
 10658                           	opt stack 0
 10659                           tblptru	equ	0xFF8
 10660                           tblptrh	equ	0xFF7
 10661                           tblptrl	equ	0xFF6
 10662                           tablat	equ	0xFF5
 10663                           prodh	equ	0xFF4
 10664                           prodl	equ	0xFF3
 10665                           intcon	equ	0xFF2
 10666                           indf0	equ	0xFEF
 10667                           postinc0	equ	0xFEE
 10668                           fsr0h	equ	0xFEA
 10669                           fsr0l	equ	0xFE9
 10670                           wreg	equ	0xFE8
 10671                           postinc1	equ	0xFE6
 10672                           postdec1	equ	0xFE5
 10673                           fsr1h	equ	0xFE2
 10674                           fsr1l	equ	0xFE1
 10675                           indf2	equ	0xFDF
 10676                           postinc2	equ	0xFDE
 10677                           postdec2	equ	0xFDD
 10678                           plusw2	equ	0xFDB
 10679                           fsr2h	equ	0xFDA
 10680                           fsr2l	equ	0xFD9
 10681                           status	equ	0xFD8
 10682                           
 10683 ;; *************** function _command_operation *****************
 10684 ;; Defined at:
 10685 ;;		line 366 in file "tasks.h"
 10686 ;; Parameters:    Size  Location     Type
 10687 ;;  tx              2    9[BANK1 ] PTR struct ringbuf
 10688 ;;		 -> usb_tx(8), 
 10689 ;;  op0             2   11[BANK1 ] PTR unsigned char 
 10690 ;;		 -> my_terminal_loop@op0(20), 
 10691 ;;  op1             2   13[BANK1 ] PTR unsigned char 
 10692 ;;		 -> my_terminal_loop@op1(20), 
 10693 ;;  op2             2   15[BANK1 ] PTR unsigned char 
 10694 ;;		 -> my_terminal_loop@op2(20), 
 10695 ;;  op3             2   17[BANK1 ] PTR unsigned char 
 10696 ;;		 -> my_terminal_loop@op3(20), 
 10697 ;; Auto vars:     Size  Location     Type
 10698 ;;  percentage      1   19[BANK1 ] unsigned char 
 10699 ;; Return value:  Size  Location     Type
 10700 ;;		None               void
 10701 ;; Registers used:
 10702 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10703 ;; Tracked objects:
 10704 ;;		On entry : 0/0
 10705 ;;		On exit  : 0/0
 10706 ;;		Unchanged: 0/0
 10707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10708 ;;      Params:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10709 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10711 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10712 ;;Total ram usage:       11 bytes
 10713 ;; Hardware stack levels used:    1
 10714 ;; Hardware stack levels required when called:   10
 10715 ;; This function calls:
 10716 ;;		_bootload
 10717 ;;		_command_get_data
 10718 ;;		_command_time
 10719 ;;		_ctmu_set_ratio
 10720 ;;		_my_atoi
 10721 ;;		_my_strcmp
 10722 ;;		_ringbuf_put_str
 10723 ;; This function is called by:
 10724 ;;		_my_terminal_loop
 10725 ;; This function uses a non-reentrant model
 10726 ;;
 10727                           
 10728                           	psect	text29
 10729  0000'                    __ptext29:
 10730                           	opt stack 0
 10731  0000'                    _command_operation:
 10732                           	opt stack 19
 10733                           
 10734                           ;tasks.h: 367: if (!my_strcmp(op0, "help") || !my_strcmp(op0, "?")) {
 10735                           
 10736                           ;incstack = 0
 10737  0000' C00B' F01E'        	movff	command_operation@op0,my_strcmp@str1
 10738  0004' C00C' F01F'        	movff	command_operation@op0+1,my_strcmp@str1+1
 10739  0008' 0E00'              	movlw	low STR_42
 10740  000A' 6E20'              	movwf	my_strcmp@str2,c
 10741  000C' 0E00'              	movlw	high STR_42
 10742  000E' 6E21'              	movwf	my_strcmp@str2+1,c
 10743  0010' EC00' F000'        	call	_my_strcmp	;wreg free
 10744  0014' 0900               	iorlw	0
 10745  0016' B4D8               	btfsc	status,2,c
 10746  0018' D00D               	goto	l8261
 10747  001A' C00B' F01E'        	movff	command_operation@op0,my_strcmp@str1
 10748  001E' C00C' F01F'        	movff	command_operation@op0+1,my_strcmp@str1+1
 10749  0022' 0E00'              	movlw	low STR_43
 10750  0024' 6E20'              	movwf	my_strcmp@str2,c
 10751  0026' 0E00'              	movlw	high STR_43
 10752  0028' 6E21'              	movwf	my_strcmp@str2+1,c
 10753  002A' EC00' F000'        	call	_my_strcmp	;wreg free
 10754  002E' 0900               	iorlw	0
 10755  0030' A4D8               	btfss	status,2,c
 10756  0032' D00C               	goto	l8263
 10757  0034'                    l8261:
 10758                           
 10759                           ;tasks.h: 368: ringbuf_put_str(tx,
 10760                           ;tasks.h: 369: "\t****************************\n"
 10761                           ;tasks.h: 370: "\t**** Charge Station 6.7 ****\n"
 10762                           ;tasks.h: 371: "\t**** Made by @Ryokeri   ****\n"
 10763                           ;tasks.h: 372: "\t****************************\n\n"
 10764                           ;tasks.h: 373: "\tcommand \topeland1\topeland2\n\n"
 10765                           ;tasks.h: 374: "\tprint_time(t)\n"
 10766                           ;tasks.h: 375: "\tadjust_time(at) [hand:y,M,d,h,m,s] [value(decimal)]\n"
 10767                           ;tasks.h: 376: "\tsettings(set) [port:left(l),center(c),right(r)]\n\t\t[auto_stop(as),al
      +                          ways_on(ao),integrating_reset(ir)]\n"
 10768  0034' C009' F027'        	movff	command_operation@tx,ringbuf_put_str@rb
 10769  0038' C00A' F028'        	movff	command_operation@tx+1,ringbuf_put_str@rb+1
 10770  003C' 0E00'              	movlw	low STR_44
 10771  003E' 0100               	movlb	0	; () banked
 10772  0040' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 10773  0042' 0E00'              	movlw	high STR_44
 10774  0044' 0100               	movlb	0	; () banked
 10775  0046' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 10776  0048' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 10777  004C'                    l8263:
 10778                           
 10779                           ;tasks.h: 384: }
 10780                           ;tasks.h: 385: if (!my_strcmp(op0, "RESET();")) {
 10781  004C' C00B' F01E'        	movff	command_operation@op0,my_strcmp@str1
 10782  0050' C00C' F01F'        	movff	command_operation@op0+1,my_strcmp@str1+1
 10783  0054' 0E00'              	movlw	low STR_45
 10784  0056' 6E20'              	movwf	my_strcmp@str2,c
 10785  0058' 0E00'              	movlw	high STR_45
 10786  005A' 6E21'              	movwf	my_strcmp@str2+1,c
 10787  005C' EC00' F000'        	call	_my_strcmp	;wreg free
 10788  0060' 0900               	iorlw	0
 10789  0062' B4D8               	btfsc	status,2,c
 10790  0064' 00FF               	reset		;# 
 10791                           
 10792                           ;tasks.h: 387: }
 10793                           ;tasks.h: 388: if (!my_strcmp(op0, "bootload")) {
 10794  0066' C00B' F01E'        	movff	command_operation@op0,my_strcmp@str1
 10795  006A' C00C' F01F'        	movff	command_operation@op0+1,my_strcmp@str1+1
 10796  006E' 0E00'              	movlw	low STR_46
 10797  0070' 6E20'              	movwf	my_strcmp@str2,c
 10798  0072' 0E00'              	movlw	high STR_46
 10799  0074' 6E21'              	movwf	my_strcmp@str2+1,c
 10800  0076' EC00' F000'        	call	_my_strcmp	;wreg free
 10801  007A' 0900               	iorlw	0
 10802  007C' B4D8               	btfsc	status,2,c
 10803                           
 10804                           ;tasks.h: 389: bootload();
 10805  007E' EC00' F000'        	call	_bootload	;wreg free
 10806                           
 10807                           ;tasks.h: 390: }
 10808                           ;tasks.h: 391: if (!my_strcmp(op0, "od") || !my_strcmp(op0, "output_data")) {
 10809  0082' C00B' F01E'        	movff	command_operation@op0,my_strcmp@str1
 10810  0086' C00C' F01F'        	movff	command_operation@op0+1,my_strcmp@str1+1
 10811  008A' 0E00'              	movlw	low STR_47
 10812  008C' 6E20'              	movwf	my_strcmp@str2,c
 10813  008E' 0E00'              	movlw	high STR_47
 10814  0090' 6E21'              	movwf	my_strcmp@str2+1,c
 10815  0092' EC00' F000'        	call	_my_strcmp	;wreg free
 10816  0096' 0900               	iorlw	0
 10817  0098' B4D8               	btfsc	status,2,c
 10818  009A' D00D               	goto	l8275
 10819  009C' C00B' F01E'        	movff	command_operation@op0,my_strcmp@str1
 10820  00A0' C00C' F01F'        	movff	command_operation@op0+1,my_strcmp@str1+1
 10821  00A4' 0E00'              	movlw	low STR_48
 10822  00A6' 6E20'              	movwf	my_strcmp@str2,c
 10823  00A8' 0E00'              	movlw	high STR_48
 10824  00AA' 6E21'              	movwf	my_strcmp@str2+1,c
 10825  00AC' EC00' F000'        	call	_my_strcmp	;wreg free
 10826  00B0' 0900               	iorlw	0
 10827  00B2' A4D8               	btfss	status,2,c
 10828  00B4' D003               	goto	l8277
 10829  00B6'                    l8275:
 10830                           
 10831                           ;tasks.h: 392: data_out = 1;
 10832  00B6' 0E01               	movlw	1
 10833  00B8' 0100               	movlb	0	; () banked
 10834  00BA' 6F00'              	movwf	_data_out& (0+255),b
 10835  00BC'                    l8277:
 10836                           
 10837                           ;tasks.h: 393: }
 10838                           ;tasks.h: 394: if (!my_strcmp(op0, "")) {
 10839  00BC' C00B' F01E'        	movff	command_operation@op0,my_strcmp@str1
 10840  00C0' C00C' F01F'        	movff	command_operation@op0+1,my_strcmp@str1+1
 10841  00C4' 0E00'              	movlw	low (STR_2+3)
 10842  00C6' 6E20'              	movwf	my_strcmp@str2,c
 10843  00C8' 0E00'              	movlw	high (STR_2+3)
 10844  00CA' 6E21'              	movwf	my_strcmp@str2+1,c
 10845  00CC' EC00' F000'        	call	_my_strcmp	;wreg free
 10846  00D0' 0900               	iorlw	0
 10847  00D2' A4D8               	btfss	status,2,c
 10848  00D4' D003               	goto	l8281
 10849                           
 10850                           ;tasks.h: 395: data_out = 0;
 10851  00D6' 0E00               	movlw	0
 10852  00D8' 0100               	movlb	0	; () banked
 10853  00DA' 6F00'              	movwf	_data_out& (0+255),b
 10854  00DC'                    l8281:
 10855                           
 10856                           ;tasks.h: 396: }
 10857                           ;tasks.h: 397: command_time(tx, op0, op1, op2);
 10858  00DC' C009' F000'        	movff	command_operation@tx,command_time@tx
 10859  00E0' C00A' F001'        	movff	command_operation@tx+1,command_time@tx+1
 10860  00E4' C00B' F002'        	movff	command_operation@op0,command_time@op0
 10861  00E8' C00C' F003'        	movff	command_operation@op0+1,command_time@op0+1
 10862  00EC' C00D' F004'        	movff	command_operation@op1,command_time@op1
 10863  00F0' C00E' F005'        	movff	command_operation@op1+1,command_time@op1+1
 10864  00F4' C00F' F006'        	movff	command_operation@op2,command_time@op2
 10865  00F8' C010' F007'        	movff	command_operation@op2+1,command_time@op2+1
 10866  00FC' EC00' F000'        	call	_command_time	;wreg free
 10867                           
 10868                           ;tasks.h: 398: if (!my_strcmp(op0, "touch")) {
 10869  0100' C00B' F01E'        	movff	command_operation@op0,my_strcmp@str1
 10870  0104' C00C' F01F'        	movff	command_operation@op0+1,my_strcmp@str1+1
 10871  0108' 0E00'              	movlw	low STR_50
 10872  010A' 6E20'              	movwf	my_strcmp@str2,c
 10873  010C' 0E00'              	movlw	high STR_50
 10874  010E' 6E21'              	movwf	my_strcmp@str2+1,c
 10875  0110' EC00' F000'        	call	_my_strcmp	;wreg free
 10876  0114' 0900               	iorlw	0
 10877  0116' A4D8               	btfss	status,2,c
 10878  0118' D071               	goto	l8309
 10879                           
 10880                           ;tasks.h: 399: if (!my_strcmp(op1, "initialize") || !my_strcmp(op1, "init")) {
 10881  011A' C00D' F01E'        	movff	command_operation@op1,my_strcmp@str1
 10882  011E' C00E' F01F'        	movff	command_operation@op1+1,my_strcmp@str1+1
 10883  0122' 0E00'              	movlw	low STR_51
 10884  0124' 6E20'              	movwf	my_strcmp@str2,c
 10885  0126' 0E00'              	movlw	high STR_51
 10886  0128' 6E21'              	movwf	my_strcmp@str2+1,c
 10887  012A' EC00' F000'        	call	_my_strcmp	;wreg free
 10888  012E' 0900               	iorlw	0
 10889  0130' B4D8               	btfsc	status,2,c
 10890  0132' D00D               	goto	l8289
 10891  0134' C00D' F01E'        	movff	command_operation@op1,my_strcmp@str1
 10892  0138' C00E' F01F'        	movff	command_operation@op1+1,my_strcmp@str1+1
 10893  013C' 0E00'              	movlw	low STR_52
 10894  013E' 6E20'              	movwf	my_strcmp@str2,c
 10895  0140' 0E00'              	movlw	high STR_52
 10896  0142' 6E21'              	movwf	my_strcmp@str2+1,c
 10897  0144' EC00' F000'        	call	_my_strcmp	;wreg free
 10898  0148' 0900               	iorlw	0
 10899  014A' A4D8               	btfss	status,2,c
 10900  014C' D02D               	goto	l8301
 10901  014E'                    l8289:
 10902                           
 10903                           ;tasks.h: 400: uint8_t percentage = my_atoi(op2);
 10904  014E' C00F' F019'        	movff	command_operation@op2,my_atoi@str
 10905  0152' C010' F01A'        	movff	command_operation@op2+1,my_atoi@str+1
 10906  0156' EC00' F000'        	call	_my_atoi	;wreg free
 10907  015A' 0100               	movlb	0	; () banked
 10908  015C' 5100'              	movf	?_my_atoi& (0+255),w,b
 10909  015E' 0101               	movlb	1	; () banked
 10910  0160' 6F00'              	movwf	command_operation@percentage& (0+255),b
 10911                           
 10912                           ; BSR set to: 1
 10913                           ;tasks.h: 401: if (percentage <= 100) {
 10914  0162' 0E65               	movlw	101
 10915  0164' 0101               	movlb	1	; () banked
 10916  0166' 6100'              	cpfslt	command_operation@percentage& (0+255),b
 10917  0168' D013               	goto	l8299
 10918                           
 10919                           ; BSR set to: 1
 10920                           ;tasks.h: 402: ctmu_ratio = percentage;
 10921  016A' C013' F007'        	movff	command_operation@percentage,_ctmu_ratio
 10922                           
 10923                           ; BSR set to: 1
 10924                           ;tasks.h: 403: ctmu_set_ratio(ctmu_ratio);
 10925  016E' 0100               	movlb	0	; () banked
 10926  0170' 5100'              	movf	_ctmu_ratio& (0+255),w,b
 10927  0172' EC00' F000'        	call	_ctmu_set_ratio
 10928                           
 10929                           ;tasks.h: 404: ringbuf_put_str(tx, "\tinitializing complete\n");
 10930  0176' C009' F027'        	movff	command_operation@tx,ringbuf_put_str@rb
 10931  017A' C00A' F028'        	movff	command_operation@tx+1,ringbuf_put_str@rb+1
 10932  017E' 0E00'              	movlw	low STR_53
 10933  0180' 0100               	movlb	0	; () banked
 10934  0182' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 10935  0184' 0E00'              	movlw	high STR_53
 10936  0186' 0100               	movlb	0	; () banked
 10937  0188' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 10938  018A' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 10939                           
 10940                           ;tasks.h: 405: } else {
 10941  018E' D00C               	goto	l8301
 10942  0190'                    l8299:
 10943                           
 10944                           ;tasks.h: 406: ringbuf_put_str(tx, "\tinvalid data\n\tinitializing failed\n");
 10945  0190' C009' F027'        	movff	command_operation@tx,ringbuf_put_str@rb
 10946  0194' C00A' F028'        	movff	command_operation@tx+1,ringbuf_put_str@rb+1
 10947  0198' 0E00'              	movlw	low STR_54
 10948  019A' 0100               	movlb	0	; () banked
 10949  019C' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 10950  019E' 0E00'              	movlw	high STR_54
 10951  01A0' 0100               	movlb	0	; () banked
 10952  01A2' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 10953  01A4' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 10954  01A8'                    l8301:
 10955                           
 10956                           ;tasks.h: 407: }
 10957                           ;tasks.h: 408: }
 10958                           ;tasks.h: 409: if (!my_strcmp(op1, "reset") || !my_strcmp(op1, "r")) {
 10959  01A8' C00D' F01E'        	movff	command_operation@op1,my_strcmp@str1
 10960  01AC' C00E' F01F'        	movff	command_operation@op1+1,my_strcmp@str1+1
 10961  01B0' 0E00'              	movlw	low STR_55
 10962  01B2' 6E20'              	movwf	my_strcmp@str2,c
 10963  01B4' 0E00'              	movlw	high STR_55
 10964  01B6' 6E21'              	movwf	my_strcmp@str2+1,c
 10965  01B8' EC00' F000'        	call	_my_strcmp	;wreg free
 10966  01BC' 0900               	iorlw	0
 10967  01BE' B4D8               	btfsc	status,2,c
 10968  01C0' D00D               	goto	l8305
 10969  01C2' C00D' F01E'        	movff	command_operation@op1,my_strcmp@str1
 10970  01C6' C00E' F01F'        	movff	command_operation@op1+1,my_strcmp@str1+1
 10971  01CA' 0E00'              	movlw	low (STR_12+3)
 10972  01CC' 6E20'              	movwf	my_strcmp@str2,c
 10973  01CE' 0E00'              	movlw	high (STR_12+3)
 10974  01D0' 6E21'              	movwf	my_strcmp@str2+1,c
 10975  01D2' EC00' F000'        	call	_my_strcmp	;wreg free
 10976  01D6' 0900               	iorlw	0
 10977  01D8' A4D8               	btfss	status,2,c
 10978  01DA' D010               	goto	l8309
 10979  01DC'                    l8305:
 10980                           
 10981                           ;tasks.h: 410: ctmu_set_ratio(ctmu_ratio);
 10982  01DC' 0100               	movlb	0	; () banked
 10983  01DE' 5100'              	movf	_ctmu_ratio& (0+255),w,b
 10984  01E0' EC00' F000'        	call	_ctmu_set_ratio
 10985                           
 10986                           ;tasks.h: 411: ringbuf_put_str(tx, "\tseting complete\n");
 10987  01E4' C009' F027'        	movff	command_operation@tx,ringbuf_put_str@rb
 10988  01E8' C00A' F028'        	movff	command_operation@tx+1,ringbuf_put_str@rb+1
 10989  01EC' 0E00'              	movlw	low STR_57
 10990  01EE' 0100               	movlb	0	; () banked
 10991  01F0' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 10992  01F2' 0E00'              	movlw	high STR_57
 10993  01F4' 0100               	movlb	0	; () banked
 10994  01F6' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 10995  01F8' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 10996  01FC'                    l8309:
 10997                           
 10998                           ;tasks.h: 412: }
 10999                           ;tasks.h: 413: }
 11000                           ;tasks.h: 414: if (!my_strcmp(op0, "display") || !my_strcmp(op0, "d")) {
 11001  01FC' C00B' F01E'        	movff	command_operation@op0,my_strcmp@str1
 11002  0200' C00C' F01F'        	movff	command_operation@op0+1,my_strcmp@str1+1
 11003  0204' 0E00'              	movlw	low STR_58
 11004  0206' 6E20'              	movwf	my_strcmp@str2,c
 11005  0208' 0E00'              	movlw	high STR_58
 11006  020A' 6E21'              	movwf	my_strcmp@str2+1,c
 11007  020C' EC00' F000'        	call	_my_strcmp	;wreg free
 11008  0210' 0900               	iorlw	0
 11009  0212' B4D8               	btfsc	status,2,c
 11010  0214' D00D               	goto	l8313
 11011  0216' C00B' F01E'        	movff	command_operation@op0,my_strcmp@str1
 11012  021A' C00C' F01F'        	movff	command_operation@op0+1,my_strcmp@str1+1
 11013  021E' 0E00'              	movlw	low (STR_46+7)
 11014  0220' 6E20'              	movwf	my_strcmp@str2,c
 11015  0222' 0E00'              	movlw	high (STR_46+7)
 11016  0224' 6E21'              	movwf	my_strcmp@str2+1,c
 11017  0226' EC00' F000'        	call	_my_strcmp	;wreg free
 11018  022A' 0900               	iorlw	0
 11019  022C' A4D8               	btfss	status,2,c
 11020  022E' 0012               	return	
 11021  0230'                    l8313:
 11022                           
 11023                           ;tasks.h: 415: if (!my_strcmp(op1, "help") || !my_strcmp(op1, "?")) {
 11024  0230' C00D' F01E'        	movff	command_operation@op1,my_strcmp@str1
 11025  0234' C00E' F01F'        	movff	command_operation@op1+1,my_strcmp@str1+1
 11026  0238' 0E00'              	movlw	low STR_42
 11027  023A' 6E20'              	movwf	my_strcmp@str2,c
 11028  023C' 0E00'              	movlw	high STR_42
 11029  023E' 6E21'              	movwf	my_strcmp@str2+1,c
 11030  0240' EC00' F000'        	call	_my_strcmp	;wreg free
 11031  0244' 0900               	iorlw	0
 11032  0246' B4D8               	btfsc	status,2,c
 11033  0248' D00D               	goto	l8317
 11034  024A' C00D' F01E'        	movff	command_operation@op1,my_strcmp@str1
 11035  024E' C00E' F01F'        	movff	command_operation@op1+1,my_strcmp@str1+1
 11036  0252' 0E00'              	movlw	low STR_43
 11037  0254' 6E20'              	movwf	my_strcmp@str2,c
 11038  0256' 0E00'              	movlw	high STR_43
 11039  0258' 6E21'              	movwf	my_strcmp@str2+1,c
 11040  025A' EC00' F000'        	call	_my_strcmp	;wreg free
 11041  025E' 0900               	iorlw	0
 11042  0260' A4D8               	btfss	status,2,c
 11043  0262' D00C               	goto	l8319
 11044  0264'                    l8317:
 11045                           
 11046                           ;tasks.h: 416: ringbuf_put_str(tx, "\tleft(l) or center(c) or right(r)\n");
 11047  0264' C009' F027'        	movff	command_operation@tx,ringbuf_put_str@rb
 11048  0268' C00A' F028'        	movff	command_operation@tx+1,ringbuf_put_str@rb+1
 11049  026C' 0E00'              	movlw	low STR_62
 11050  026E' 0100               	movlb	0	; () banked
 11051  0270' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 11052  0272' 0E00'              	movlw	high STR_62
 11053  0274' 0100               	movlb	0	; () banked
 11054  0276' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 11055  0278' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 11056  027C'                    l8319:
 11057                           
 11058                           ;tasks.h: 417: }
 11059                           ;tasks.h: 418: if (!my_strcmp(op1, "left") || !my_strcmp(op1, "l")) {
 11060  027C' C00D' F01E'        	movff	command_operation@op1,my_strcmp@str1
 11061  0280' C00E' F01F'        	movff	command_operation@op1+1,my_strcmp@str1+1
 11062  0284' 0E00'              	movlw	low STR_63
 11063  0286' 6E20'              	movwf	my_strcmp@str2,c
 11064  0288' 0E00'              	movlw	high STR_63
 11065  028A' 6E21'              	movwf	my_strcmp@str2+1,c
 11066  028C' EC00' F000'        	call	_my_strcmp	;wreg free
 11067  0290' 0900               	iorlw	0
 11068  0292' B4D8               	btfsc	status,2,c
 11069  0294' D00D               	goto	l8323
 11070  0296' C00D' F01E'        	movff	command_operation@op1,my_strcmp@str1
 11071  029A' C00E' F01F'        	movff	command_operation@op1+1,my_strcmp@str1+1
 11072  029E' 0E00'              	movlw	low STR_64
 11073  02A0' 6E20'              	movwf	my_strcmp@str2,c
 11074  02A2' 0E00'              	movlw	high STR_64
 11075  02A4' 6E21'              	movwf	my_strcmp@str2+1,c
 11076  02A6' EC00' F000'        	call	_my_strcmp	;wreg free
 11077  02AA' 0900               	iorlw	0
 11078  02AC' A4D8               	btfss	status,2,c
 11079  02AE' D098               	goto	l8347
 11080  02B0'                    l8323:
 11081                           
 11082                           ;tasks.h: 419: if (!my_strcmp(op2, "help") || !my_strcmp(op2, "?")) {
 11083  02B0' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11084  02B4' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11085  02B8' 0E00'              	movlw	low STR_42
 11086  02BA' 6E20'              	movwf	my_strcmp@str2,c
 11087  02BC' 0E00'              	movlw	high STR_42
 11088  02BE' 6E21'              	movwf	my_strcmp@str2+1,c
 11089  02C0' EC00' F000'        	call	_my_strcmp	;wreg free
 11090  02C4' 0900               	iorlw	0
 11091  02C6' B4D8               	btfsc	status,2,c
 11092  02C8' D00D               	goto	l8327
 11093  02CA' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11094  02CE' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11095  02D2' 0E00'              	movlw	low STR_43
 11096  02D4' 6E20'              	movwf	my_strcmp@str2,c
 11097  02D6' 0E00'              	movlw	high STR_43
 11098  02D8' 6E21'              	movwf	my_strcmp@str2+1,c
 11099  02DA' EC00' F000'        	call	_my_strcmp	;wreg free
 11100  02DE' 0900               	iorlw	0
 11101  02E0' A4D8               	btfss	status,2,c
 11102  02E2' D00C               	goto	l8329
 11103  02E4'                    l8327:
 11104                           
 11105                           ;tasks.h: 420: ringbuf_put_str(tx, "\tcurrent(c) or integrated_current(ic) or integrated
      +                          _time(it)\n");
 11106  02E4' C009' F027'        	movff	command_operation@tx,ringbuf_put_str@rb
 11107  02E8' C00A' F028'        	movff	command_operation@tx+1,ringbuf_put_str@rb+1
 11108  02EC' 0E00'              	movlw	low STR_67
 11109  02EE' 0100               	movlb	0	; () banked
 11110  02F0' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 11111  02F2' 0E00'              	movlw	high STR_67
 11112  02F4' 0100               	movlb	0	; () banked
 11113  02F6' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 11114  02F8' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 11115  02FC'                    l8329:
 11116                           
 11117                           ;tasks.h: 421: }
 11118                           ;tasks.h: 422: if (!my_strcmp(op2, "current") || !my_strcmp(op2, "c")) {
 11119  02FC' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11120  0300' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11121  0304' 0E00'              	movlw	low (STR_70+11)
 11122  0306' 6E20'              	movwf	my_strcmp@str2,c
 11123  0308' 0E00'              	movlw	high (STR_70+11)
 11124  030A' 6E21'              	movwf	my_strcmp@str2+1,c
 11125  030C' EC00' F000'        	call	_my_strcmp	;wreg free
 11126  0310' 0900               	iorlw	0
 11127  0312' B4D8               	btfsc	status,2,c
 11128  0314' D00D               	goto	l8333
 11129  0316' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11130  031A' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11131  031E' 0E00'              	movlw	low (STR_71+1)
 11132  0320' 6E20'              	movwf	my_strcmp@str2,c
 11133  0322' 0E00'              	movlw	high (STR_71+1)
 11134  0324' 6E21'              	movwf	my_strcmp@str2+1,c
 11135  0326' EC00' F000'        	call	_my_strcmp	;wreg free
 11136  032A' 0900               	iorlw	0
 11137  032C' A4D8               	btfss	status,2,c
 11138  032E' D00C               	goto	l8335
 11139  0330'                    l8333:
 11140                           
 11141                           ;tasks.h: 423: command_get_data(tx, CURRENT, 0);
 11142  0330' C009' F02F'        	movff	command_operation@tx,command_get_data@tx
 11143  0334' C00A' F030'        	movff	command_operation@tx+1,command_get_data@tx+1
 11144  0338' 0E00               	movlw	0
 11145  033A' 0100               	movlb	0	; () banked
 11146  033C' 6F00'              	movwf	command_get_data@item& (0+255),b
 11147  033E' 0E00               	movlw	0
 11148  0340' 0100               	movlb	0	; () banked
 11149  0342' 6F00'              	movwf	command_get_data@i& (0+255),b
 11150  0344' EC00' F000'        	call	_command_get_data	;wreg free
 11151  0348'                    l8335:
 11152                           
 11153                           ;tasks.h: 424: }
 11154                           ;tasks.h: 425: if (!my_strcmp(op2, "integrated_current") || !my_strcmp(op2, "ic")) {
 11155  0348' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11156  034C' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11157  0350' 0E00'              	movlw	low STR_70
 11158  0352' 6E20'              	movwf	my_strcmp@str2,c
 11159  0354' 0E00'              	movlw	high STR_70
 11160  0356' 6E21'              	movwf	my_strcmp@str2+1,c
 11161  0358' EC00' F000'        	call	_my_strcmp	;wreg free
 11162  035C' 0900               	iorlw	0
 11163  035E' B4D8               	btfsc	status,2,c
 11164  0360' D00D               	goto	l8339
 11165  0362' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11166  0366' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11167  036A' 0E00'              	movlw	low STR_71
 11168  036C' 6E20'              	movwf	my_strcmp@str2,c
 11169  036E' 0E00'              	movlw	high STR_71
 11170  0370' 6E21'              	movwf	my_strcmp@str2+1,c
 11171  0372' EC00' F000'        	call	_my_strcmp	;wreg free
 11172  0376' 0900               	iorlw	0
 11173  0378' A4D8               	btfss	status,2,c
 11174  037A' D00C               	goto	l8341
 11175  037C'                    l8339:
 11176                           
 11177                           ;tasks.h: 426: command_get_data(tx, INTEGRATED_CURRENT, 0);
 11178  037C' C009' F02F'        	movff	command_operation@tx,command_get_data@tx
 11179  0380' C00A' F030'        	movff	command_operation@tx+1,command_get_data@tx+1
 11180  0384' 0E01               	movlw	1
 11181  0386' 0100               	movlb	0	; () banked
 11182  0388' 6F00'              	movwf	command_get_data@item& (0+255),b
 11183  038A' 0E00               	movlw	0
 11184  038C' 0100               	movlb	0	; () banked
 11185  038E' 6F00'              	movwf	command_get_data@i& (0+255),b
 11186  0390' EC00' F000'        	call	_command_get_data	;wreg free
 11187  0394'                    l8341:
 11188                           
 11189                           ;tasks.h: 427: }
 11190                           ;tasks.h: 428: if (!my_strcmp(op2, "integrated_time") || !my_strcmp(op2, "it")) {
 11191  0394' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11192  0398' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11193  039C' 0E00'              	movlw	low STR_72
 11194  039E' 6E20'              	movwf	my_strcmp@str2,c
 11195  03A0' 0E00'              	movlw	high STR_72
 11196  03A2' 6E21'              	movwf	my_strcmp@str2+1,c
 11197  03A4' EC00' F000'        	call	_my_strcmp	;wreg free
 11198  03A8' 0900               	iorlw	0
 11199  03AA' B4D8               	btfsc	status,2,c
 11200  03AC' D00D               	goto	l8345
 11201  03AE' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11202  03B2' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11203  03B6' 0E00'              	movlw	low (STR_52+2)
 11204  03B8' 6E20'              	movwf	my_strcmp@str2,c
 11205  03BA' 0E00'              	movlw	high (STR_52+2)
 11206  03BC' 6E21'              	movwf	my_strcmp@str2+1,c
 11207  03BE' EC00' F000'        	call	_my_strcmp	;wreg free
 11208  03C2' 0900               	iorlw	0
 11209  03C4' A4D8               	btfss	status,2,c
 11210  03C6' D00C               	goto	l8347
 11211  03C8'                    l8345:
 11212                           
 11213                           ;tasks.h: 429: command_get_data(tx, INTEGRATED_TIME, 0);
 11214  03C8' C009' F02F'        	movff	command_operation@tx,command_get_data@tx
 11215  03CC' C00A' F030'        	movff	command_operation@tx+1,command_get_data@tx+1
 11216  03D0' 0E02               	movlw	2
 11217  03D2' 0100               	movlb	0	; () banked
 11218  03D4' 6F00'              	movwf	command_get_data@item& (0+255),b
 11219  03D6' 0E00               	movlw	0
 11220  03D8' 0100               	movlb	0	; () banked
 11221  03DA' 6F00'              	movwf	command_get_data@i& (0+255),b
 11222  03DC' EC00' F000'        	call	_command_get_data	;wreg free
 11223  03E0'                    l8347:
 11224                           
 11225                           ;tasks.h: 430: }
 11226                           ;tasks.h: 431: }
 11227                           ;tasks.h: 432: if (!my_strcmp(op1, "center") || !my_strcmp(op1, "c")) {
 11228  03E0' C00D' F01E'        	movff	command_operation@op1,my_strcmp@str1
 11229  03E4' C00E' F01F'        	movff	command_operation@op1+1,my_strcmp@str1+1
 11230  03E8' 0E00'              	movlw	low STR_74
 11231  03EA' 6E20'              	movwf	my_strcmp@str2,c
 11232  03EC' 0E00'              	movlw	high STR_74
 11233  03EE' 6E21'              	movwf	my_strcmp@str2+1,c
 11234  03F0' EC00' F000'        	call	_my_strcmp	;wreg free
 11235  03F4' 0900               	iorlw	0
 11236  03F6' B4D8               	btfsc	status,2,c
 11237  03F8' D00D               	goto	l8351
 11238  03FA' C00D' F01E'        	movff	command_operation@op1,my_strcmp@str1
 11239  03FE' C00E' F01F'        	movff	command_operation@op1+1,my_strcmp@str1+1
 11240  0402' 0E00'              	movlw	low (STR_71+1)
 11241  0404' 6E20'              	movwf	my_strcmp@str2,c
 11242  0406' 0E00'              	movlw	high (STR_71+1)
 11243  0408' 6E21'              	movwf	my_strcmp@str2+1,c
 11244  040A' EC00' F000'        	call	_my_strcmp	;wreg free
 11245  040E' 0900               	iorlw	0
 11246  0410' A4D8               	btfss	status,2,c
 11247  0412' D098               	goto	l8375
 11248  0414'                    l8351:
 11249                           
 11250                           ;tasks.h: 433: if (!my_strcmp(op2, "help") || !my_strcmp(op2, "?")) {
 11251  0414' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11252  0418' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11253  041C' 0E00'              	movlw	low STR_42
 11254  041E' 6E20'              	movwf	my_strcmp@str2,c
 11255  0420' 0E00'              	movlw	high STR_42
 11256  0422' 6E21'              	movwf	my_strcmp@str2+1,c
 11257  0424' EC00' F000'        	call	_my_strcmp	;wreg free
 11258  0428' 0900               	iorlw	0
 11259  042A' B4D8               	btfsc	status,2,c
 11260  042C' D00D               	goto	l8355
 11261  042E' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11262  0432' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11263  0436' 0E00'              	movlw	low STR_43
 11264  0438' 6E20'              	movwf	my_strcmp@str2,c
 11265  043A' 0E00'              	movlw	high STR_43
 11266  043C' 6E21'              	movwf	my_strcmp@str2+1,c
 11267  043E' EC00' F000'        	call	_my_strcmp	;wreg free
 11268  0442' 0900               	iorlw	0
 11269  0444' A4D8               	btfss	status,2,c
 11270  0446' D00C               	goto	l8357
 11271  0448'                    l8355:
 11272                           
 11273                           ;tasks.h: 434: ringbuf_put_str(tx, "\tcurrent(c) or integrated_current(ic) or integrated
      +                          _time(it)\n");
 11274  0448' C009' F027'        	movff	command_operation@tx,ringbuf_put_str@rb
 11275  044C' C00A' F028'        	movff	command_operation@tx+1,ringbuf_put_str@rb+1
 11276  0450' 0E00'              	movlw	low STR_67
 11277  0452' 0100               	movlb	0	; () banked
 11278  0454' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 11279  0456' 0E00'              	movlw	high STR_67
 11280  0458' 0100               	movlb	0	; () banked
 11281  045A' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 11282  045C' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 11283  0460'                    l8357:
 11284                           
 11285                           ;tasks.h: 435: }
 11286                           ;tasks.h: 436: if (!my_strcmp(op2, "current") || !my_strcmp(op2, "c")) {
 11287  0460' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11288  0464' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11289  0468' 0E00'              	movlw	low (STR_70+11)
 11290  046A' 6E20'              	movwf	my_strcmp@str2,c
 11291  046C' 0E00'              	movlw	high (STR_70+11)
 11292  046E' 6E21'              	movwf	my_strcmp@str2+1,c
 11293  0470' EC00' F000'        	call	_my_strcmp	;wreg free
 11294  0474' 0900               	iorlw	0
 11295  0476' B4D8               	btfsc	status,2,c
 11296  0478' D00D               	goto	l8361
 11297  047A' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11298  047E' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11299  0482' 0E00'              	movlw	low (STR_71+1)
 11300  0484' 6E20'              	movwf	my_strcmp@str2,c
 11301  0486' 0E00'              	movlw	high (STR_71+1)
 11302  0488' 6E21'              	movwf	my_strcmp@str2+1,c
 11303  048A' EC00' F000'        	call	_my_strcmp	;wreg free
 11304  048E' 0900               	iorlw	0
 11305  0490' A4D8               	btfss	status,2,c
 11306  0492' D00C               	goto	l8363
 11307  0494'                    l8361:
 11308                           
 11309                           ;tasks.h: 437: command_get_data(tx, CURRENT, 1);
 11310  0494' C009' F02F'        	movff	command_operation@tx,command_get_data@tx
 11311  0498' C00A' F030'        	movff	command_operation@tx+1,command_get_data@tx+1
 11312  049C' 0E00               	movlw	0
 11313  049E' 0100               	movlb	0	; () banked
 11314  04A0' 6F00'              	movwf	command_get_data@item& (0+255),b
 11315  04A2' 0E01               	movlw	1
 11316  04A4' 0100               	movlb	0	; () banked
 11317  04A6' 6F00'              	movwf	command_get_data@i& (0+255),b
 11318  04A8' EC00' F000'        	call	_command_get_data	;wreg free
 11319  04AC'                    l8363:
 11320                           
 11321                           ;tasks.h: 438: }
 11322                           ;tasks.h: 439: if (!my_strcmp(op2, "integrated_current") || !my_strcmp(op2, "ic")) {
 11323  04AC' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11324  04B0' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11325  04B4' 0E00'              	movlw	low STR_70
 11326  04B6' 6E20'              	movwf	my_strcmp@str2,c
 11327  04B8' 0E00'              	movlw	high STR_70
 11328  04BA' 6E21'              	movwf	my_strcmp@str2+1,c
 11329  04BC' EC00' F000'        	call	_my_strcmp	;wreg free
 11330  04C0' 0900               	iorlw	0
 11331  04C2' B4D8               	btfsc	status,2,c
 11332  04C4' D00D               	goto	l8367
 11333  04C6' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11334  04CA' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11335  04CE' 0E00'              	movlw	low STR_71
 11336  04D0' 6E20'              	movwf	my_strcmp@str2,c
 11337  04D2' 0E00'              	movlw	high STR_71
 11338  04D4' 6E21'              	movwf	my_strcmp@str2+1,c
 11339  04D6' EC00' F000'        	call	_my_strcmp	;wreg free
 11340  04DA' 0900               	iorlw	0
 11341  04DC' A4D8               	btfss	status,2,c
 11342  04DE' D00C               	goto	l8369
 11343  04E0'                    l8367:
 11344                           
 11345                           ;tasks.h: 440: command_get_data(tx, INTEGRATED_CURRENT, 1);
 11346  04E0' C009' F02F'        	movff	command_operation@tx,command_get_data@tx
 11347  04E4' C00A' F030'        	movff	command_operation@tx+1,command_get_data@tx+1
 11348  04E8' 0E01               	movlw	1
 11349  04EA' 0100               	movlb	0	; () banked
 11350  04EC' 6F00'              	movwf	command_get_data@item& (0+255),b
 11351  04EE' 0E01               	movlw	1
 11352  04F0' 0100               	movlb	0	; () banked
 11353  04F2' 6F00'              	movwf	command_get_data@i& (0+255),b
 11354  04F4' EC00' F000'        	call	_command_get_data	;wreg free
 11355  04F8'                    l8369:
 11356                           
 11357                           ;tasks.h: 441: }
 11358                           ;tasks.h: 442: if (!my_strcmp(op2, "integrated_time") || !my_strcmp(op2, "it")) {
 11359  04F8' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11360  04FC' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11361  0500' 0E00'              	movlw	low STR_72
 11362  0502' 6E20'              	movwf	my_strcmp@str2,c
 11363  0504' 0E00'              	movlw	high STR_72
 11364  0506' 6E21'              	movwf	my_strcmp@str2+1,c
 11365  0508' EC00' F000'        	call	_my_strcmp	;wreg free
 11366  050C' 0900               	iorlw	0
 11367  050E' B4D8               	btfsc	status,2,c
 11368  0510' D00D               	goto	l8373
 11369  0512' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11370  0516' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11371  051A' 0E00'              	movlw	low (STR_52+2)
 11372  051C' 6E20'              	movwf	my_strcmp@str2,c
 11373  051E' 0E00'              	movlw	high (STR_52+2)
 11374  0520' 6E21'              	movwf	my_strcmp@str2+1,c
 11375  0522' EC00' F000'        	call	_my_strcmp	;wreg free
 11376  0526' 0900               	iorlw	0
 11377  0528' A4D8               	btfss	status,2,c
 11378  052A' D00C               	goto	l8375
 11379  052C'                    l8373:
 11380                           
 11381                           ;tasks.h: 443: command_get_data(tx, INTEGRATED_TIME, 1);
 11382  052C' C009' F02F'        	movff	command_operation@tx,command_get_data@tx
 11383  0530' C00A' F030'        	movff	command_operation@tx+1,command_get_data@tx+1
 11384  0534' 0E02               	movlw	2
 11385  0536' 0100               	movlb	0	; () banked
 11386  0538' 6F00'              	movwf	command_get_data@item& (0+255),b
 11387  053A' 0E01               	movlw	1
 11388  053C' 0100               	movlb	0	; () banked
 11389  053E' 6F00'              	movwf	command_get_data@i& (0+255),b
 11390  0540' EC00' F000'        	call	_command_get_data	;wreg free
 11391  0544'                    l8375:
 11392                           
 11393                           ;tasks.h: 444: }
 11394                           ;tasks.h: 445: }
 11395                           ;tasks.h: 446: if (!my_strcmp(op1, "right") || !my_strcmp(op1, "r")) {
 11396  0544' C00D' F01E'        	movff	command_operation@op1,my_strcmp@str1
 11397  0548' C00E' F01F'        	movff	command_operation@op1+1,my_strcmp@str1+1
 11398  054C' 0E00'              	movlw	low STR_85
 11399  054E' 6E20'              	movwf	my_strcmp@str2,c
 11400  0550' 0E00'              	movlw	high STR_85
 11401  0552' 6E21'              	movwf	my_strcmp@str2+1,c
 11402  0554' EC00' F000'        	call	_my_strcmp	;wreg free
 11403  0558' 0900               	iorlw	0
 11404  055A' B4D8               	btfsc	status,2,c
 11405  055C' D00D               	goto	l8379
 11406  055E' C00D' F01E'        	movff	command_operation@op1,my_strcmp@str1
 11407  0562' C00E' F01F'        	movff	command_operation@op1+1,my_strcmp@str1+1
 11408  0566' 0E00'              	movlw	low (STR_12+3)
 11409  0568' 6E20'              	movwf	my_strcmp@str2,c
 11410  056A' 0E00'              	movlw	high (STR_12+3)
 11411  056C' 6E21'              	movwf	my_strcmp@str2+1,c
 11412  056E' EC00' F000'        	call	_my_strcmp	;wreg free
 11413  0572' 0900               	iorlw	0
 11414  0574' A4D8               	btfss	status,2,c
 11415  0576' 0012               	return	
 11416  0578'                    l8379:
 11417                           
 11418                           ;tasks.h: 447: if (!my_strcmp(op2, "help") || !my_strcmp(op2, "?")) {
 11419  0578' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11420  057C' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11421  0580' 0E00'              	movlw	low STR_42
 11422  0582' 6E20'              	movwf	my_strcmp@str2,c
 11423  0584' 0E00'              	movlw	high STR_42
 11424  0586' 6E21'              	movwf	my_strcmp@str2+1,c
 11425  0588' EC00' F000'        	call	_my_strcmp	;wreg free
 11426  058C' 0900               	iorlw	0
 11427  058E' B4D8               	btfsc	status,2,c
 11428  0590' D00D               	goto	l8383
 11429  0592' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11430  0596' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11431  059A' 0E00'              	movlw	low STR_43
 11432  059C' 6E20'              	movwf	my_strcmp@str2,c
 11433  059E' 0E00'              	movlw	high STR_43
 11434  05A0' 6E21'              	movwf	my_strcmp@str2+1,c
 11435  05A2' EC00' F000'        	call	_my_strcmp	;wreg free
 11436  05A6' 0900               	iorlw	0
 11437  05A8' A4D8               	btfss	status,2,c
 11438  05AA' D00C               	goto	l8385
 11439  05AC'                    l8383:
 11440                           
 11441                           ;tasks.h: 448: ringbuf_put_str(tx, "\tcurrent(c) or integrated_current(ic) or integrated
      +                          _time(it)\n");
 11442  05AC' C009' F027'        	movff	command_operation@tx,ringbuf_put_str@rb
 11443  05B0' C00A' F028'        	movff	command_operation@tx+1,ringbuf_put_str@rb+1
 11444  05B4' 0E00'              	movlw	low STR_67
 11445  05B6' 0100               	movlb	0	; () banked
 11446  05B8' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 11447  05BA' 0E00'              	movlw	high STR_67
 11448  05BC' 0100               	movlb	0	; () banked
 11449  05BE' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 11450  05C0' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 11451  05C4'                    l8385:
 11452                           
 11453                           ;tasks.h: 449: }
 11454                           ;tasks.h: 450: if (!my_strcmp(op2, "current") || !my_strcmp(op2, "c")) {
 11455  05C4' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11456  05C8' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11457  05CC' 0E00'              	movlw	low (STR_70+11)
 11458  05CE' 6E20'              	movwf	my_strcmp@str2,c
 11459  05D0' 0E00'              	movlw	high (STR_70+11)
 11460  05D2' 6E21'              	movwf	my_strcmp@str2+1,c
 11461  05D4' EC00' F000'        	call	_my_strcmp	;wreg free
 11462  05D8' 0900               	iorlw	0
 11463  05DA' B4D8               	btfsc	status,2,c
 11464  05DC' D00D               	goto	l8389
 11465  05DE' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11466  05E2' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11467  05E6' 0E00'              	movlw	low (STR_71+1)
 11468  05E8' 6E20'              	movwf	my_strcmp@str2,c
 11469  05EA' 0E00'              	movlw	high (STR_71+1)
 11470  05EC' 6E21'              	movwf	my_strcmp@str2+1,c
 11471  05EE' EC00' F000'        	call	_my_strcmp	;wreg free
 11472  05F2' 0900               	iorlw	0
 11473  05F4' A4D8               	btfss	status,2,c
 11474  05F6' D00C               	goto	l8391
 11475  05F8'                    l8389:
 11476                           
 11477                           ;tasks.h: 451: command_get_data(tx, CURRENT, 2);
 11478  05F8' C009' F02F'        	movff	command_operation@tx,command_get_data@tx
 11479  05FC' C00A' F030'        	movff	command_operation@tx+1,command_get_data@tx+1
 11480  0600' 0E00               	movlw	0
 11481  0602' 0100               	movlb	0	; () banked
 11482  0604' 6F00'              	movwf	command_get_data@item& (0+255),b
 11483  0606' 0E02               	movlw	2
 11484  0608' 0100               	movlb	0	; () banked
 11485  060A' 6F00'              	movwf	command_get_data@i& (0+255),b
 11486  060C' EC00' F000'        	call	_command_get_data	;wreg free
 11487  0610'                    l8391:
 11488                           
 11489                           ;tasks.h: 452: }
 11490                           ;tasks.h: 453: if (!my_strcmp(op2, "integrated_current") || !my_strcmp(op2, "ic")) {
 11491  0610' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11492  0614' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11493  0618' 0E00'              	movlw	low STR_70
 11494  061A' 6E20'              	movwf	my_strcmp@str2,c
 11495  061C' 0E00'              	movlw	high STR_70
 11496  061E' 6E21'              	movwf	my_strcmp@str2+1,c
 11497  0620' EC00' F000'        	call	_my_strcmp	;wreg free
 11498  0624' 0900               	iorlw	0
 11499  0626' B4D8               	btfsc	status,2,c
 11500  0628' D00D               	goto	l8395
 11501  062A' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11502  062E' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11503  0632' 0E00'              	movlw	low STR_71
 11504  0634' 6E20'              	movwf	my_strcmp@str2,c
 11505  0636' 0E00'              	movlw	high STR_71
 11506  0638' 6E21'              	movwf	my_strcmp@str2+1,c
 11507  063A' EC00' F000'        	call	_my_strcmp	;wreg free
 11508  063E' 0900               	iorlw	0
 11509  0640' A4D8               	btfss	status,2,c
 11510  0642' D00C               	goto	l8397
 11511  0644'                    l8395:
 11512                           
 11513                           ;tasks.h: 454: command_get_data(tx, INTEGRATED_CURRENT, 2);
 11514  0644' C009' F02F'        	movff	command_operation@tx,command_get_data@tx
 11515  0648' C00A' F030'        	movff	command_operation@tx+1,command_get_data@tx+1
 11516  064C' 0E01               	movlw	1
 11517  064E' 0100               	movlb	0	; () banked
 11518  0650' 6F00'              	movwf	command_get_data@item& (0+255),b
 11519  0652' 0E02               	movlw	2
 11520  0654' 0100               	movlb	0	; () banked
 11521  0656' 6F00'              	movwf	command_get_data@i& (0+255),b
 11522  0658' EC00' F000'        	call	_command_get_data	;wreg free
 11523  065C'                    l8397:
 11524                           
 11525                           ;tasks.h: 455: }
 11526                           ;tasks.h: 456: if (!my_strcmp(op2, "integrated_time") || !my_strcmp(op2, "it")) {
 11527  065C' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11528  0660' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11529  0664' 0E00'              	movlw	low STR_72
 11530  0666' 6E20'              	movwf	my_strcmp@str2,c
 11531  0668' 0E00'              	movlw	high STR_72
 11532  066A' 6E21'              	movwf	my_strcmp@str2+1,c
 11533  066C' EC00' F000'        	call	_my_strcmp	;wreg free
 11534  0670' 0900               	iorlw	0
 11535  0672' B4D8               	btfsc	status,2,c
 11536  0674' D00D               	goto	l8401
 11537  0676' C00F' F01E'        	movff	command_operation@op2,my_strcmp@str1
 11538  067A' C010' F01F'        	movff	command_operation@op2+1,my_strcmp@str1+1
 11539  067E' 0E00'              	movlw	low (STR_52+2)
 11540  0680' 6E20'              	movwf	my_strcmp@str2,c
 11541  0682' 0E00'              	movlw	high (STR_52+2)
 11542  0684' 6E21'              	movwf	my_strcmp@str2+1,c
 11543  0686' EC00' F000'        	call	_my_strcmp	;wreg free
 11544  068A' 0900               	iorlw	0
 11545  068C' A4D8               	btfss	status,2,c
 11546  068E' 0012               	return	
 11547  0690'                    l8401:
 11548                           
 11549                           ;tasks.h: 457: command_get_data(tx, INTEGRATED_TIME, 2);
 11550  0690' C009' F02F'        	movff	command_operation@tx,command_get_data@tx
 11551  0694' C00A' F030'        	movff	command_operation@tx+1,command_get_data@tx+1
 11552  0698' 0E02               	movlw	2
 11553  069A' 0100               	movlb	0	; () banked
 11554  069C' 6F00'              	movwf	command_get_data@item& (0+255),b
 11555  069E' 0E02               	movlw	2
 11556  06A0' 0100               	movlb	0	; () banked
 11557  06A2' 6F00'              	movwf	command_get_data@i& (0+255),b
 11558  06A4' EC00' F000'        	call	_command_get_data	;wreg free
 11559  06A8' 0012               	return	
 11560  06AA'                    __end_of_command_operation:
 11561                           	opt stack 0
 11562                           tblptru	equ	0xFF8
 11563                           tblptrh	equ	0xFF7
 11564                           tblptrl	equ	0xFF6
 11565                           tablat	equ	0xFF5
 11566                           prodh	equ	0xFF4
 11567                           prodl	equ	0xFF3
 11568                           intcon	equ	0xFF2
 11569                           indf0	equ	0xFEF
 11570                           postinc0	equ	0xFEE
 11571                           fsr0h	equ	0xFEA
 11572                           fsr0l	equ	0xFE9
 11573                           wreg	equ	0xFE8
 11574                           postinc1	equ	0xFE6
 11575                           postdec1	equ	0xFE5
 11576                           fsr1h	equ	0xFE2
 11577                           fsr1l	equ	0xFE1
 11578                           indf2	equ	0xFDF
 11579                           postinc2	equ	0xFDE
 11580                           postdec2	equ	0xFDD
 11581                           plusw2	equ	0xFDB
 11582                           fsr2h	equ	0xFDA
 11583                           fsr2l	equ	0xFD9
 11584                           status	equ	0xFD8
 11585                           
 11586 ;; *************** function _ctmu_set_ratio *****************
 11587 ;; Defined at:
 11588 ;;		line 315 in file "tasks.h"
 11589 ;; Parameters:    Size  Location     Type
 11590 ;;  percentage      1    wreg     unsigned char 
 11591 ;; Auto vars:     Size  Location     Type
 11592 ;;  percentage      1   32[BANK0 ] unsigned char 
 11593 ;; Return value:  Size  Location     Type
 11594 ;;		None               void
 11595 ;; Registers used:
 11596 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11597 ;; Tracked objects:
 11598 ;;		On entry : 0/0
 11599 ;;		On exit  : 0/0
 11600 ;;		Unchanged: 0/0
 11601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11603 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11605 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11606 ;;Total ram usage:        1 bytes
 11607 ;; Hardware stack levels used:    1
 11608 ;; Hardware stack levels required when called:    5
 11609 ;; This function calls:
 11610 ;;		_CTMU_read
 11611 ;;		___lwdiv
 11612 ;;		___wmul
 11613 ;; This function is called by:
 11614 ;;		_command_operation
 11615 ;;		_main
 11616 ;; This function uses a non-reentrant model
 11617 ;;
 11618                           
 11619                           	psect	text30
 11620  0000'                    __ptext30:
 11621                           	opt stack 0
 11622  0000'                    _ctmu_set_ratio:
 11623                           	opt stack 23
 11624                           
 11625                           ;incstack = 0
 11626                           ;ctmu_set_ratio@percentage stored from wreg
 11627  0000' 0100               	movlb	0	; () banked
 11628  0002' 6F00'              	movwf	ctmu_set_ratio@percentage& (0+255),b
 11629                           
 11630                           ;tasks.h: 316: port[0].ctmu_value = (uint16_t) percentage * CTMU_read(0) / 100;
 11631  0004' C020' F013'        	movff	ctmu_set_ratio@percentage,___wmul@multiplier
 11632  0008' 0100               	movlb	0	; () banked
 11633  000A' 6B00'              	clrf	(___wmul@multiplier+1)& (0+255),b
 11634  000C' 0E00               	movlw	0
 11635  000E' EC00' F000'        	call	_CTMU_read
 11636  0012' C01E' F015'        	movff	?_CTMU_read,___wmul@multiplicand
 11637  0016' C01F' F016'        	movff	?_CTMU_read+1,___wmul@multiplicand+1
 11638  001A' EC00' F000'        	call	___wmul	;wreg free
 11639  001E' C013' F019'        	movff	?___wmul,___lwdiv@dividend
 11640  0022' C014' F01A'        	movff	?___wmul+1,___lwdiv@dividend+1
 11641  0026' 0E00               	movlw	0
 11642  0028' 0100               	movlb	0	; () banked
 11643  002A' 6F00'              	movwf	(___lwdiv@divisor+1)& (0+255),b
 11644  002C' 0E64               	movlw	100
 11645  002E' 6F00'              	movwf	___lwdiv@divisor& (0+255),b
 11646  0030' EC00' F000'        	call	___lwdiv	;wreg free
 11647  0034' C019' F008'        	movff	?___lwdiv,_port+4
 11648  0038' C01A' F009'        	movff	?___lwdiv+1,_port+5
 11649                           
 11650                           ;tasks.h: 317: port[1].ctmu_value = (uint16_t) percentage * CTMU_read(1) / 100;
 11651  003C' C020' F013'        	movff	ctmu_set_ratio@percentage,___wmul@multiplier
 11652  0040' 0100               	movlb	0	; () banked
 11653  0042' 6B00'              	clrf	(___wmul@multiplier+1)& (0+255),b
 11654  0044' 0E01               	movlw	1
 11655  0046' EC00' F000'        	call	_CTMU_read
 11656  004A' C01E' F015'        	movff	?_CTMU_read,___wmul@multiplicand
 11657  004E' C01F' F016'        	movff	?_CTMU_read+1,___wmul@multiplicand+1
 11658  0052' EC00' F000'        	call	___wmul	;wreg free
 11659  0056' C013' F019'        	movff	?___wmul,___lwdiv@dividend
 11660  005A' C014' F01A'        	movff	?___wmul+1,___lwdiv@dividend+1
 11661  005E' 0E00               	movlw	0
 11662  0060' 0100               	movlb	0	; () banked
 11663  0062' 6F00'              	movwf	(___lwdiv@divisor+1)& (0+255),b
 11664  0064' 0E64               	movlw	100
 11665  0066' 6F00'              	movwf	___lwdiv@divisor& (0+255),b
 11666  0068' EC00' F000'        	call	___lwdiv	;wreg free
 11667  006C' C019' F01F'        	movff	?___lwdiv,_port+27
 11668  0070' C01A' F020'        	movff	?___lwdiv+1,_port+28
 11669                           
 11670                           ;tasks.h: 318: port[2].ctmu_value = (uint16_t) percentage * CTMU_read(2) / 100;
 11671  0074' C020' F013'        	movff	ctmu_set_ratio@percentage,___wmul@multiplier
 11672  0078' 0100               	movlb	0	; () banked
 11673  007A' 6B00'              	clrf	(___wmul@multiplier+1)& (0+255),b
 11674  007C' 0E02               	movlw	2
 11675  007E' EC00' F000'        	call	_CTMU_read
 11676  0082' C01E' F015'        	movff	?_CTMU_read,___wmul@multiplicand
 11677  0086' C01F' F016'        	movff	?_CTMU_read+1,___wmul@multiplicand+1
 11678  008A' EC00' F000'        	call	___wmul	;wreg free
 11679  008E' C013' F019'        	movff	?___wmul,___lwdiv@dividend
 11680  0092' C014' F01A'        	movff	?___wmul+1,___lwdiv@dividend+1
 11681  0096' 0E00               	movlw	0
 11682  0098' 0100               	movlb	0	; () banked
 11683  009A' 6F00'              	movwf	(___lwdiv@divisor+1)& (0+255),b
 11684  009C' 0E64               	movlw	100
 11685  009E' 6F00'              	movwf	___lwdiv@divisor& (0+255),b
 11686  00A0' EC00' F000'        	call	___lwdiv	;wreg free
 11687  00A4' C019' F036'        	movff	?___lwdiv,_port+50
 11688  00A8' C01A' F037'        	movff	?___lwdiv+1,_port+51
 11689                           
 11690                           ;tasks.h: 319: ctmu_value_m = (uint16_t) percentage * CTMU_read(3) / 100;
 11691  00AC' C020' F013'        	movff	ctmu_set_ratio@percentage,___wmul@multiplier
 11692  00B0' 0100               	movlb	0	; () banked
 11693  00B2' 6B00'              	clrf	(___wmul@multiplier+1)& (0+255),b
 11694  00B4' 0E03               	movlw	3
 11695  00B6' EC00' F000'        	call	_CTMU_read
 11696  00BA' C01E' F015'        	movff	?_CTMU_read,___wmul@multiplicand
 11697  00BE' C01F' F016'        	movff	?_CTMU_read+1,___wmul@multiplicand+1
 11698  00C2' EC00' F000'        	call	___wmul	;wreg free
 11699  00C6' C013' F019'        	movff	?___wmul,___lwdiv@dividend
 11700  00CA' C014' F01A'        	movff	?___wmul+1,___lwdiv@dividend+1
 11701  00CE' 0E00               	movlw	0
 11702  00D0' 0100               	movlb	0	; () banked
 11703  00D2' 6F00'              	movwf	(___lwdiv@divisor+1)& (0+255),b
 11704  00D4' 0E64               	movlw	100
 11705  00D6' 6F00'              	movwf	___lwdiv@divisor& (0+255),b
 11706  00D8' EC00' F000'        	call	___lwdiv	;wreg free
 11707  00DC' C019' F000'        	movff	?___lwdiv,_ctmu_value_m
 11708  00E0' C01A' F001'        	movff	?___lwdiv+1,_ctmu_value_m+1
 11709  00E4' 0012               	return		;funcret
 11710  00E6'                    __end_of_ctmu_set_ratio:
 11711                           	opt stack 0
 11712                           tblptru	equ	0xFF8
 11713                           tblptrh	equ	0xFF7
 11714                           tblptrl	equ	0xFF6
 11715                           tablat	equ	0xFF5
 11716                           prodh	equ	0xFF4
 11717                           prodl	equ	0xFF3
 11718                           intcon	equ	0xFF2
 11719                           indf0	equ	0xFEF
 11720                           postinc0	equ	0xFEE
 11721                           fsr0h	equ	0xFEA
 11722                           fsr0l	equ	0xFE9
 11723                           wreg	equ	0xFE8
 11724                           postinc1	equ	0xFE6
 11725                           postdec1	equ	0xFE5
 11726                           fsr1h	equ	0xFE2
 11727                           fsr1l	equ	0xFE1
 11728                           indf2	equ	0xFDF
 11729                           postinc2	equ	0xFDE
 11730                           postdec2	equ	0xFDD
 11731                           plusw2	equ	0xFDB
 11732                           fsr2h	equ	0xFDA
 11733                           fsr2l	equ	0xFD9
 11734                           status	equ	0xFD8
 11735                           
 11736 ;; *************** function _command_time *****************
 11737 ;; Defined at:
 11738 ;;		line 107 in file "../My_header\My_terminal.h"
 11739 ;; Parameters:    Size  Location     Type
 11740 ;;  tx              2    0[BANK1 ] PTR struct ringbuf
 11741 ;;		 -> usb_tx(8), 
 11742 ;;  op0             2    2[BANK1 ] PTR unsigned char 
 11743 ;;		 -> my_terminal_loop@op0(20), 
 11744 ;;  op1             2    4[BANK1 ] PTR unsigned char 
 11745 ;;		 -> my_terminal_loop@op1(20), 
 11746 ;;  op2             2    6[BANK1 ] PTR unsigned char 
 11747 ;;		 -> my_terminal_loop@op2(20), 
 11748 ;; Auto vars:     Size  Location     Type
 11749 ;;		None
 11750 ;; Return value:  Size  Location     Type
 11751 ;;		None               void
 11752 ;; Registers used:
 11753 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11754 ;; Tracked objects:
 11755 ;;		On entry : 0/0
 11756 ;;		On exit  : 0/0
 11757 ;;		Unchanged: 0/0
 11758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11759 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11760 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11762 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11763 ;;Total ram usage:        9 bytes
 11764 ;; Hardware stack levels used:    1
 11765 ;; Hardware stack levels required when called:    9
 11766 ;; This function calls:
 11767 ;;		_command_at_hand
 11768 ;;		_month_length
 11769 ;;		_my_atoi
 11770 ;;		_my_strcmp
 11771 ;;		_print_time
 11772 ;; This function is called by:
 11773 ;;		_command_operation
 11774 ;; This function uses a non-reentrant model
 11775 ;;
 11776                           
 11777                           	psect	text31
 11778  0000'                    __ptext31:
 11779                           	opt stack 0
 11780  0000'                    _command_time:
 11781                           	opt stack 19
 11782                           
 11783                           ;My_header\My_terminal.h: 108: if (!my_strcmp(op0, "print_time") || !my_strcmp(op0, "t")
      +                          ) {
 11784                           
 11785                           ;incstack = 0
 11786  0000' C002' F01E'        	movff	command_time@op0,my_strcmp@str1
 11787  0004' C003' F01F'        	movff	command_time@op0+1,my_strcmp@str1+1
 11788  0008' 0E00'              	movlw	low STR_7
 11789  000A' 6E20'              	movwf	my_strcmp@str2,c
 11790  000C' 0E00'              	movlw	high STR_7
 11791  000E' 6E21'              	movwf	my_strcmp@str2+1,c
 11792  0010' EC00' F000'        	call	_my_strcmp	;wreg free
 11793  0014' 0900               	iorlw	0
 11794  0016' B4D8               	btfsc	status,2,c
 11795  0018' D00D               	goto	l7873
 11796  001A' C002' F01E'        	movff	command_time@op0,my_strcmp@str1
 11797  001E' C003' F01F'        	movff	command_time@op0+1,my_strcmp@str1+1
 11798  0022' 0E00'              	movlw	low (STR_9+1)
 11799  0024' 6E20'              	movwf	my_strcmp@str2,c
 11800  0026' 0E00'              	movlw	high (STR_9+1)
 11801  0028' 6E21'              	movwf	my_strcmp@str2+1,c
 11802  002A' EC00' F000'        	call	_my_strcmp	;wreg free
 11803  002E' 0900               	iorlw	0
 11804  0030' A4D8               	btfss	status,2,c
 11805  0032' D006               	goto	l7875
 11806  0034'                    l7873:
 11807                           
 11808                           ;My_header\My_terminal.h: 109: print_time(tx);
 11809  0034' C000' F043'        	movff	command_time@tx,print_time@tx
 11810  0038' C001' F044'        	movff	command_time@tx+1,print_time@tx+1
 11811  003C' EC00' F000'        	call	_print_time	;wreg free
 11812  0040'                    l7875:
 11813                           
 11814                           ;My_header\My_terminal.h: 110: }
 11815                           ;My_header\My_terminal.h: 111: if (!my_strcmp(op0, "at") || !my_strcmp(op0, "adjust_time
      +                          ")) {
 11816  0040' C002' F01E'        	movff	command_time@op0,my_strcmp@str1
 11817  0044' C003' F01F'        	movff	command_time@op0+1,my_strcmp@str1+1
 11818  0048' 0E00'              	movlw	low STR_9
 11819  004A' 6E20'              	movwf	my_strcmp@str2,c
 11820  004C' 0E00'              	movlw	high STR_9
 11821  004E' 6E21'              	movwf	my_strcmp@str2+1,c
 11822  0050' EC00' F000'        	call	_my_strcmp	;wreg free
 11823  0054' 0900               	iorlw	0
 11824  0056' B4D8               	btfsc	status,2,c
 11825  0058' D00D               	goto	l7879
 11826  005A' C002' F01E'        	movff	command_time@op0,my_strcmp@str1
 11827  005E' C003' F01F'        	movff	command_time@op0+1,my_strcmp@str1+1
 11828  0062' 0E00'              	movlw	low STR_10
 11829  0064' 6E20'              	movwf	my_strcmp@str2,c
 11830  0066' 0E00'              	movlw	high STR_10
 11831  0068' 6E21'              	movwf	my_strcmp@str2+1,c
 11832  006A' EC00' F000'        	call	_my_strcmp	;wreg free
 11833  006E' 0900               	iorlw	0
 11834  0070' A4D8               	btfss	status,2,c
 11835  0072' 0012               	return	
 11836  0074'                    l7879:
 11837                           
 11838                           ;My_header\My_terminal.h: 112: if (!my_strcmp(op1, "y") || !my_strcmp(op1, "year")) {
 11839  0074' C004' F01E'        	movff	command_time@op1,my_strcmp@str1
 11840  0078' C005' F01F'        	movff	command_time@op1+1,my_strcmp@str1+1
 11841  007C' 0E00'              	movlw	low (STR_16+2)
 11842  007E' 6E20'              	movwf	my_strcmp@str2,c
 11843  0080' 0E00'              	movlw	high (STR_16+2)
 11844  0082' 6E21'              	movwf	my_strcmp@str2+1,c
 11845  0084' EC00' F000'        	call	_my_strcmp	;wreg free
 11846  0088' 0900               	iorlw	0
 11847  008A' B4D8               	btfsc	status,2,c
 11848  008C' D00D               	goto	l7883
 11849  008E' C004' F01E'        	movff	command_time@op1,my_strcmp@str1
 11850  0092' C005' F01F'        	movff	command_time@op1+1,my_strcmp@str1+1
 11851  0096' 0E00'              	movlw	low STR_12
 11852  0098' 6E20'              	movwf	my_strcmp@str2,c
 11853  009A' 0E00'              	movlw	high STR_12
 11854  009C' 6E21'              	movwf	my_strcmp@str2+1,c
 11855  009E' EC00' F000'        	call	_my_strcmp	;wreg free
 11856  00A2' 0900               	iorlw	0
 11857  00A4' A4D8               	btfss	status,2,c
 11858  00A6' D01C               	goto	l7885
 11859  00A8'                    l7883:
 11860                           
 11861                           ;My_header\My_terminal.h: 113: command_at_hand(tx, &caltime_now.YY, 0, 99, my_atoi(op2))
      +                          ;
 11862  00A8' C000' F063'        	movff	command_time@tx,command_at_hand@tx
 11863  00AC' C001' F064'        	movff	command_time@tx+1,command_at_hand@tx+1
 11864  00B0' 0E00'              	movlw	low (_caltime_now+6)
 11865  00B2' 0100               	movlb	0	; () banked
 11866  00B4' 6F00'              	movwf	command_at_hand@hand& (0+255),b
 11867  00B6' 0E00'              	movlw	high (_caltime_now+6)
 11868  00B8' 0100               	movlb	0	; () banked
 11869  00BA' 6F00'              	movwf	(command_at_hand@hand+1)& (0+255),b
 11870  00BC' 0E00               	movlw	0
 11871  00BE' 0100               	movlb	0	; () banked
 11872  00C0' 6F00'              	movwf	command_at_hand@min& (0+255),b
 11873  00C2' 0E63               	movlw	99
 11874  00C4' 0100               	movlb	0	; () banked
 11875  00C6' 6F00'              	movwf	command_at_hand@max& (0+255),b
 11876  00C8' C006' F019'        	movff	command_time@op2,my_atoi@str
 11877  00CC' C007' F01A'        	movff	command_time@op2+1,my_atoi@str+1
 11878  00D0' EC00' F000'        	call	_my_atoi	;wreg free
 11879  00D4' 0100               	movlb	0	; () banked
 11880  00D6' 5100'              	movf	?_my_atoi& (0+255),w,b
 11881  00D8' 0100               	movlb	0	; () banked
 11882  00DA' 6F00'              	movwf	command_at_hand@value& (0+255),b
 11883  00DC' EC00' F000'        	call	_command_at_hand	;wreg free
 11884  00E0'                    l7885:
 11885                           
 11886                           ;My_header\My_terminal.h: 114: }
 11887                           ;My_header\My_terminal.h: 115: if (!my_strcmp(op1, "M") || !my_strcmp(op1, "month")) {
 11888  00E0' C004' F01E'        	movff	command_time@op1,my_strcmp@str1
 11889  00E4' C005' F01F'        	movff	command_time@op1+1,my_strcmp@str1+1
 11890  00E8' 0E00'              	movlw	low STR_13
 11891  00EA' 6E20'              	movwf	my_strcmp@str2,c
 11892  00EC' 0E00'              	movlw	high STR_13
 11893  00EE' 6E21'              	movwf	my_strcmp@str2+1,c
 11894  00F0' EC00' F000'        	call	_my_strcmp	;wreg free
 11895  00F4' 0900               	iorlw	0
 11896  00F6' B4D8               	btfsc	status,2,c
 11897  00F8' D00D               	goto	l7889
 11898  00FA' C004' F01E'        	movff	command_time@op1,my_strcmp@str1
 11899  00FE' C005' F01F'        	movff	command_time@op1+1,my_strcmp@str1+1
 11900  0102' 0E00'              	movlw	low STR_14
 11901  0104' 6E20'              	movwf	my_strcmp@str2,c
 11902  0106' 0E00'              	movlw	high STR_14
 11903  0108' 6E21'              	movwf	my_strcmp@str2+1,c
 11904  010A' EC00' F000'        	call	_my_strcmp	;wreg free
 11905  010E' 0900               	iorlw	0
 11906  0110' A4D8               	btfss	status,2,c
 11907  0112' D01C               	goto	l7891
 11908  0114'                    l7889:
 11909                           
 11910                           ;My_header\My_terminal.h: 116: command_at_hand(tx, &caltime_now.MM, 1, 12, my_atoi(op2))
      +                          ;
 11911  0114' C000' F063'        	movff	command_time@tx,command_at_hand@tx
 11912  0118' C001' F064'        	movff	command_time@tx+1,command_at_hand@tx+1
 11913  011C' 0E00'              	movlw	low (_caltime_now+5)
 11914  011E' 0100               	movlb	0	; () banked
 11915  0120' 6F00'              	movwf	command_at_hand@hand& (0+255),b
 11916  0122' 0E00'              	movlw	high (_caltime_now+5)
 11917  0124' 0100               	movlb	0	; () banked
 11918  0126' 6F00'              	movwf	(command_at_hand@hand+1)& (0+255),b
 11919  0128' 0E01               	movlw	1
 11920  012A' 0100               	movlb	0	; () banked
 11921  012C' 6F00'              	movwf	command_at_hand@min& (0+255),b
 11922  012E' 0E0C               	movlw	12
 11923  0130' 0100               	movlb	0	; () banked
 11924  0132' 6F00'              	movwf	command_at_hand@max& (0+255),b
 11925  0134' C006' F019'        	movff	command_time@op2,my_atoi@str
 11926  0138' C007' F01A'        	movff	command_time@op2+1,my_atoi@str+1
 11927  013C' EC00' F000'        	call	_my_atoi	;wreg free
 11928  0140' 0100               	movlb	0	; () banked
 11929  0142' 5100'              	movf	?_my_atoi& (0+255),w,b
 11930  0144' 0100               	movlb	0	; () banked
 11931  0146' 6F00'              	movwf	command_at_hand@value& (0+255),b
 11932  0148' EC00' F000'        	call	_command_at_hand	;wreg free
 11933  014C'                    l7891:
 11934                           
 11935                           ;My_header\My_terminal.h: 117: }
 11936                           ;My_header\My_terminal.h: 118: if (!my_strcmp(op1, "d") || !my_strcmp(op1, "day")) {
 11937  014C' C004' F01E'        	movff	command_time@op1,my_strcmp@str1
 11938  0150' C005' F01F'        	movff	command_time@op1+1,my_strcmp@str1+1
 11939  0154' 0E00'              	movlw	low (STR_46+7)
 11940  0156' 6E20'              	movwf	my_strcmp@str2,c
 11941  0158' 0E00'              	movlw	high (STR_46+7)
 11942  015A' 6E21'              	movwf	my_strcmp@str2+1,c
 11943  015C' EC00' F000'        	call	_my_strcmp	;wreg free
 11944  0160' 0900               	iorlw	0
 11945  0162' B4D8               	btfsc	status,2,c
 11946  0164' D00D               	goto	l7895
 11947  0166' C004' F01E'        	movff	command_time@op1,my_strcmp@str1
 11948  016A' C005' F01F'        	movff	command_time@op1+1,my_strcmp@str1+1
 11949  016E' 0E00'              	movlw	low STR_16
 11950  0170' 6E20'              	movwf	my_strcmp@str2,c
 11951  0172' 0E00'              	movlw	high STR_16
 11952  0174' 6E21'              	movwf	my_strcmp@str2+1,c
 11953  0176' EC00' F000'        	call	_my_strcmp	;wreg free
 11954  017A' 0900               	iorlw	0
 11955  017C' A4D8               	btfss	status,2,c
 11956  017E' D023               	goto	l7899
 11957  0180'                    l7895:
 11958                           
 11959                           ;My_header\My_terminal.h: 119: command_at_hand(tx, &caltime_now.DD, 1, month_length(calt
      +                          ime_now.YY, caltime_now.MM), my_atoi(op2));
 11960  0180' C02B' F002'        	movff	_caltime_now+5,month_length@month
 11961  0184' 0100               	movlb	0	; () banked
 11962  0186' 5100'              	movf	(_caltime_now+6)& (0+255),w,b
 11963  0188' EC00' F000'        	call	_month_length
 11964  018C' 0101               	movlb	1	; () banked
 11965  018E' 6F00'              	movwf	_command_time$3370& (0+255),b
 11966                           
 11967                           ; BSR set to: 1
 11968                           ;My_header\My_terminal.h: 119: command_at_hand(tx, &caltime_now.DD, 1, month_length(calt
      +                          ime_now.YY, caltime_now.MM), my_atoi(op2));
 11969  0190' C000' F063'        	movff	command_time@tx,command_at_hand@tx
 11970  0194' C001' F064'        	movff	command_time@tx+1,command_at_hand@tx+1
 11971  0198' 0E00'              	movlw	low (_caltime_now+4)
 11972  019A' 0100               	movlb	0	; () banked
 11973  019C' 6F00'              	movwf	command_at_hand@hand& (0+255),b
 11974  019E' 0E00'              	movlw	high (_caltime_now+4)
 11975  01A0' 0100               	movlb	0	; () banked
 11976  01A2' 6F00'              	movwf	(command_at_hand@hand+1)& (0+255),b
 11977  01A4' 0E01               	movlw	1
 11978  01A6' 0100               	movlb	0	; () banked
 11979  01A8' 6F00'              	movwf	command_at_hand@min& (0+255),b
 11980  01AA' C008' F068'        	movff	_command_time$3370,command_at_hand@max
 11981  01AE' C006' F019'        	movff	command_time@op2,my_atoi@str
 11982  01B2' C007' F01A'        	movff	command_time@op2+1,my_atoi@str+1
 11983  01B6' EC00' F000'        	call	_my_atoi	;wreg free
 11984  01BA' 0100               	movlb	0	; () banked
 11985  01BC' 5100'              	movf	?_my_atoi& (0+255),w,b
 11986  01BE' 0100               	movlb	0	; () banked
 11987  01C0' 6F00'              	movwf	command_at_hand@value& (0+255),b
 11988  01C2' EC00' F000'        	call	_command_at_hand	;wreg free
 11989  01C6'                    l7899:
 11990                           
 11991                           ;My_header\My_terminal.h: 120: }
 11992                           ;My_header\My_terminal.h: 121: if (!my_strcmp(op1, "h") || !my_strcmp(op1, "hour")) {
 11993  01C6' C004' F01E'        	movff	command_time@op1,my_strcmp@str1
 11994  01CA' C005' F01F'        	movff	command_time@op1+1,my_strcmp@str1+1
 11995  01CE' 0E00'              	movlw	low (STR_26+2)
 11996  01D0' 6E20'              	movwf	my_strcmp@str2,c
 11997  01D2' 0E00'              	movlw	high (STR_26+2)
 11998  01D4' 6E21'              	movwf	my_strcmp@str2+1,c
 11999  01D6' EC00' F000'        	call	_my_strcmp	;wreg free
 12000  01DA' 0900               	iorlw	0
 12001  01DC' B4D8               	btfsc	status,2,c
 12002  01DE' D00D               	goto	l7903
 12003  01E0' C004' F01E'        	movff	command_time@op1,my_strcmp@str1
 12004  01E4' C005' F01F'        	movff	command_time@op1+1,my_strcmp@str1+1
 12005  01E8' 0E00'              	movlw	low STR_18
 12006  01EA' 6E20'              	movwf	my_strcmp@str2,c
 12007  01EC' 0E00'              	movlw	high STR_18
 12008  01EE' 6E21'              	movwf	my_strcmp@str2+1,c
 12009  01F0' EC00' F000'        	call	_my_strcmp	;wreg free
 12010  01F4' 0900               	iorlw	0
 12011  01F6' A4D8               	btfss	status,2,c
 12012  01F8' D01C               	goto	l7905
 12013  01FA'                    l7903:
 12014                           
 12015                           ;My_header\My_terminal.h: 122: command_at_hand(tx, &caltime_now.hh, 0, 23, my_atoi(op2))
      +                          ;
 12016  01FA' C000' F063'        	movff	command_time@tx,command_at_hand@tx
 12017  01FE' C001' F064'        	movff	command_time@tx+1,command_at_hand@tx+1
 12018  0202' 0E00'              	movlw	low (_caltime_now+2)
 12019  0204' 0100               	movlb	0	; () banked
 12020  0206' 6F00'              	movwf	command_at_hand@hand& (0+255),b
 12021  0208' 0E00'              	movlw	high (_caltime_now+2)
 12022  020A' 0100               	movlb	0	; () banked
 12023  020C' 6F00'              	movwf	(command_at_hand@hand+1)& (0+255),b
 12024  020E' 0E00               	movlw	0
 12025  0210' 0100               	movlb	0	; () banked
 12026  0212' 6F00'              	movwf	command_at_hand@min& (0+255),b
 12027  0214' 0E17               	movlw	23
 12028  0216' 0100               	movlb	0	; () banked
 12029  0218' 6F00'              	movwf	command_at_hand@max& (0+255),b
 12030  021A' C006' F019'        	movff	command_time@op2,my_atoi@str
 12031  021E' C007' F01A'        	movff	command_time@op2+1,my_atoi@str+1
 12032  0222' EC00' F000'        	call	_my_atoi	;wreg free
 12033  0226' 0100               	movlb	0	; () banked
 12034  0228' 5100'              	movf	?_my_atoi& (0+255),w,b
 12035  022A' 0100               	movlb	0	; () banked
 12036  022C' 6F00'              	movwf	command_at_hand@value& (0+255),b
 12037  022E' EC00' F000'        	call	_command_at_hand	;wreg free
 12038  0232'                    l7905:
 12039                           
 12040                           ;My_header\My_terminal.h: 123: }
 12041                           ;My_header\My_terminal.h: 124: if (!my_strcmp(op1, "m") || !my_strcmp(op1, "minute")) {
 12042  0232' C004' F01E'        	movff	command_time@op1,my_strcmp@str1
 12043  0236' C005' F01F'        	movff	command_time@op1+1,my_strcmp@str1+1
 12044  023A' 0E00'              	movlw	low STR_19
 12045  023C' 6E20'              	movwf	my_strcmp@str2,c
 12046  023E' 0E00'              	movlw	high STR_19
 12047  0240' 6E21'              	movwf	my_strcmp@str2+1,c
 12048  0242' EC00' F000'        	call	_my_strcmp	;wreg free
 12049  0246' 0900               	iorlw	0
 12050  0248' B4D8               	btfsc	status,2,c
 12051  024A' D00D               	goto	l7909
 12052  024C' C004' F01E'        	movff	command_time@op1,my_strcmp@str1
 12053  0250' C005' F01F'        	movff	command_time@op1+1,my_strcmp@str1+1
 12054  0254' 0E00'              	movlw	low STR_20
 12055  0256' 6E20'              	movwf	my_strcmp@str2,c
 12056  0258' 0E00'              	movlw	high STR_20
 12057  025A' 6E21'              	movwf	my_strcmp@str2+1,c
 12058  025C' EC00' F000'        	call	_my_strcmp	;wreg free
 12059  0260' 0900               	iorlw	0
 12060  0262' A4D8               	btfss	status,2,c
 12061  0264' D01C               	goto	l7911
 12062  0266'                    l7909:
 12063                           
 12064                           ;My_header\My_terminal.h: 125: command_at_hand(tx, &caltime_now.mm, 0, 59, my_atoi(op2))
      +                          ;
 12065  0266' C000' F063'        	movff	command_time@tx,command_at_hand@tx
 12066  026A' C001' F064'        	movff	command_time@tx+1,command_at_hand@tx+1
 12067  026E' 0E00'              	movlw	low (_caltime_now+1)
 12068  0270' 0100               	movlb	0	; () banked
 12069  0272' 6F00'              	movwf	command_at_hand@hand& (0+255),b
 12070  0274' 0E00'              	movlw	high (_caltime_now+1)
 12071  0276' 0100               	movlb	0	; () banked
 12072  0278' 6F00'              	movwf	(command_at_hand@hand+1)& (0+255),b
 12073  027A' 0E00               	movlw	0
 12074  027C' 0100               	movlb	0	; () banked
 12075  027E' 6F00'              	movwf	command_at_hand@min& (0+255),b
 12076  0280' 0E3B               	movlw	59
 12077  0282' 0100               	movlb	0	; () banked
 12078  0284' 6F00'              	movwf	command_at_hand@max& (0+255),b
 12079  0286' C006' F019'        	movff	command_time@op2,my_atoi@str
 12080  028A' C007' F01A'        	movff	command_time@op2+1,my_atoi@str+1
 12081  028E' EC00' F000'        	call	_my_atoi	;wreg free
 12082  0292' 0100               	movlb	0	; () banked
 12083  0294' 5100'              	movf	?_my_atoi& (0+255),w,b
 12084  0296' 0100               	movlb	0	; () banked
 12085  0298' 6F00'              	movwf	command_at_hand@value& (0+255),b
 12086  029A' EC00' F000'        	call	_command_at_hand	;wreg free
 12087  029E'                    l7911:
 12088                           
 12089                           ;My_header\My_terminal.h: 126: }
 12090                           ;My_header\My_terminal.h: 127: if (!my_strcmp(op1, "s") || !my_strcmp(op1, "second")) {
 12091  029E' C004' F01E'        	movff	command_time@op1,my_strcmp@str1
 12092  02A2' C005' F01F'        	movff	command_time@op1+1,my_strcmp@str1+1
 12093  02A6' 0E00'              	movlw	low (STR_96+7)
 12094  02A8' 6E20'              	movwf	my_strcmp@str2,c
 12095  02AA' 0E00'              	movlw	high (STR_96+7)
 12096  02AC' 6E21'              	movwf	my_strcmp@str2+1,c
 12097  02AE' EC00' F000'        	call	_my_strcmp	;wreg free
 12098  02B2' 0900               	iorlw	0
 12099  02B4' B4D8               	btfsc	status,2,c
 12100  02B6' D00D               	goto	l7915
 12101  02B8' C004' F01E'        	movff	command_time@op1,my_strcmp@str1
 12102  02BC' C005' F01F'        	movff	command_time@op1+1,my_strcmp@str1+1
 12103  02C0' 0E00'              	movlw	low STR_22
 12104  02C2' 6E20'              	movwf	my_strcmp@str2,c
 12105  02C4' 0E00'              	movlw	high STR_22
 12106  02C6' 6E21'              	movwf	my_strcmp@str2+1,c
 12107  02C8' EC00' F000'        	call	_my_strcmp	;wreg free
 12108  02CC' 0900               	iorlw	0
 12109  02CE' A4D8               	btfss	status,2,c
 12110  02D0' 0012               	return	
 12111  02D2'                    l7915:
 12112                           
 12113                           ;My_header\My_terminal.h: 128: command_at_hand(tx, &caltime_now.ss, 0, 59, my_atoi(op2))
      +                          ;
 12114  02D2' C000' F063'        	movff	command_time@tx,command_at_hand@tx
 12115  02D6' C001' F064'        	movff	command_time@tx+1,command_at_hand@tx+1
 12116  02DA' 0E00'              	movlw	low _caltime_now
 12117  02DC' 0100               	movlb	0	; () banked
 12118  02DE' 6F00'              	movwf	command_at_hand@hand& (0+255),b
 12119  02E0' 0E00'              	movlw	high _caltime_now
 12120  02E2' 0100               	movlb	0	; () banked
 12121  02E4' 6F00'              	movwf	(command_at_hand@hand+1)& (0+255),b
 12122  02E6' 0E00               	movlw	0
 12123  02E8' 0100               	movlb	0	; () banked
 12124  02EA' 6F00'              	movwf	command_at_hand@min& (0+255),b
 12125  02EC' 0E3B               	movlw	59
 12126  02EE' 0100               	movlb	0	; () banked
 12127  02F0' 6F00'              	movwf	command_at_hand@max& (0+255),b
 12128  02F2' C006' F019'        	movff	command_time@op2,my_atoi@str
 12129  02F6' C007' F01A'        	movff	command_time@op2+1,my_atoi@str+1
 12130  02FA' EC00' F000'        	call	_my_atoi	;wreg free
 12131  02FE' 0100               	movlb	0	; () banked
 12132  0300' 5100'              	movf	?_my_atoi& (0+255),w,b
 12133  0302' 0100               	movlb	0	; () banked
 12134  0304' 6F00'              	movwf	command_at_hand@value& (0+255),b
 12135  0306' EC00' F000'        	call	_command_at_hand	;wreg free
 12136  030A' 0012               	return	
 12137  030C'                    __end_of_command_time:
 12138                           	opt stack 0
 12139                           tblptru	equ	0xFF8
 12140                           tblptrh	equ	0xFF7
 12141                           tblptrl	equ	0xFF6
 12142                           tablat	equ	0xFF5
 12143                           prodh	equ	0xFF4
 12144                           prodl	equ	0xFF3
 12145                           intcon	equ	0xFF2
 12146                           indf0	equ	0xFEF
 12147                           postinc0	equ	0xFEE
 12148                           fsr0h	equ	0xFEA
 12149                           fsr0l	equ	0xFE9
 12150                           wreg	equ	0xFE8
 12151                           postinc1	equ	0xFE6
 12152                           postdec1	equ	0xFE5
 12153                           fsr1h	equ	0xFE2
 12154                           fsr1l	equ	0xFE1
 12155                           indf2	equ	0xFDF
 12156                           postinc2	equ	0xFDE
 12157                           postdec2	equ	0xFDD
 12158                           plusw2	equ	0xFDB
 12159                           fsr2h	equ	0xFDA
 12160                           fsr2l	equ	0xFD9
 12161                           status	equ	0xFD8
 12162                           
 12163 ;; *************** function _my_strcmp *****************
 12164 ;; Defined at:
 12165 ;;		line 53 in file "../My_header\My_stdlib.h"
 12166 ;; Parameters:    Size  Location     Type
 12167 ;;  str1            2   30[COMRAM] PTR const unsigned char 
 12168 ;;		 -> my_terminal_loop@op2(20), my_terminal_loop@op1(20), my_terminal_loop@op0(20), 
 12169 ;;  str2            2   32[COMRAM] PTR const unsigned char 
 12170 ;;		 -> STR_95(3), STR_94(16), STR_93(3), STR_92(19), 
 12171 ;;		 -> STR_91(2), STR_90(8), STR_88(2), STR_87(5), 
 12172 ;;		 -> STR_86(2), STR_85(6), STR_84(3), STR_83(16), 
 12173 ;;		 -> STR_82(3), STR_81(19), STR_80(2), STR_79(8), 
 12174 ;;		 -> STR_77(2), STR_76(5), STR_75(2), STR_74(7), 
 12175 ;;		 -> STR_73(3), STR_72(16), STR_71(3), STR_70(19), 
 12176 ;;		 -> STR_69(2), STR_68(8), STR_66(2), STR_65(5), 
 12177 ;;		 -> STR_64(2), STR_63(5), STR_61(2), STR_60(5), 
 12178 ;;		 -> STR_59(2), STR_58(8), STR_56(2), STR_55(6), 
 12179 ;;		 -> STR_52(5), STR_51(11), STR_50(6), STR_49(1), 
 12180 ;;		 -> STR_48(12), STR_47(3), STR_46(9), STR_45(9), 
 12181 ;;		 -> STR_43(2), STR_42(5), STR_22(7), STR_21(2), 
 12182 ;;		 -> STR_20(7), STR_19(2), STR_18(5), STR_17(2), 
 12183 ;;		 -> STR_16(4), STR_15(2), STR_14(6), STR_13(2), 
 12184 ;;		 -> STR_12(5), STR_11(2), STR_10(12), STR_9(3), 
 12185 ;;		 -> STR_8(2), STR_7(11), 
 12186 ;; Auto vars:     Size  Location     Type
 12187 ;;		None
 12188 ;; Return value:  Size  Location     Type
 12189 ;;                  1    wreg      char 
 12190 ;; Registers used:
 12191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 12192 ;; Tracked objects:
 12193 ;;		On entry : 0/0
 12194 ;;		On exit  : 0/0
 12195 ;;		Unchanged: 0/0
 12196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12197 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12199 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12200 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12201 ;;Total ram usage:        5 bytes
 12202 ;; Hardware stack levels used:    1
 12203 ;; Hardware stack levels required when called:    3
 12204 ;; This function calls:
 12205 ;;		Nothing
 12206 ;; This function is called by:
 12207 ;;		_command_time
 12208 ;;		_command_operation
 12209 ;; This function uses a non-reentrant model
 12210 ;;
 12211                           
 12212                           	psect	text32
 12213  0000'                    __ptext32:
 12214                           	opt stack 0
 12215  0000'                    _my_strcmp:
 12216                           	opt stack 25
 12217                           
 12218                           ;My_header\My_stdlib.h: 54: while (*str1 && *str2) {
 12219                           
 12220                           ;incstack = 0
 12221  0000' D02A               	goto	l7633
 12222  0002'                    l7625:
 12223                           
 12224                           ;My_header\My_stdlib.h: 55: if (*str1 != *str2)return (*str1 - *str2);
 12225  0002' C01E' FFD9         	movff	my_strcmp@str1,fsr2l
 12226  0006' C01F' FFDA         	movff	my_strcmp@str1+1,fsr2h
 12227  000A' 50DF               	movf	indf2,w,c
 12228  000C' 0100               	movlb	0	; () banked
 12229  000E' 6F00'              	movwf	??_my_strcmp& (0+255),b
 12230  0010' C020' FFF6         	movff	my_strcmp@str2,tblptrl
 12231  0014' C021' FFF7         	movff	my_strcmp@str2+1,tblptrh
 12232  0018'                    	if	0	;tblptru may be non-zero
 12233  0018'                    	endif
 12234  0018'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12235  0018' 0E00'              	movlw	low (__mediumconst shr (0+16))
 12236  001A' 6EF8               	movwf	tblptru,c
 12237  001C'                    	endif
 12238  001C' 0008               	tblrd		*
 12239  001E' 50F5               	movf	tablat,w,c
 12240  0020' 0100               	movlb	0	; () banked
 12241  0022' 1900'              	xorwf	??_my_strcmp& (0+255),w,b
 12242  0024' B4D8               	btfsc	status,2,c
 12243  0026' D013               	goto	l7631
 12244                           
 12245                           ; BSR set to: 0
 12246  0028' C01E' FFD9         	movff	my_strcmp@str1,fsr2l
 12247  002C' C01F' FFDA         	movff	my_strcmp@str1+1,fsr2h
 12248  0030' 50DF               	movf	indf2,w,c
 12249  0032' 0100               	movlb	0	; () banked
 12250  0034' 6F00'              	movwf	??_my_strcmp& (0+255),b
 12251  0036' C020' FFF6         	movff	my_strcmp@str2,tblptrl
 12252  003A' C021' FFF7         	movff	my_strcmp@str2+1,tblptrh
 12253  003E'                    	if	0	;tblptru may be non-zero
 12254  003E'                    	endif
 12255  003E'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12256  003E' 0E00'              	movlw	low (__mediumconst shr (0+16))
 12257  0040' 6EF8               	movwf	tblptru,c
 12258  0042'                    	endif
 12259  0042' 0008               	tblrd		*
 12260  0044' 50F5               	movf	tablat,w,c
 12261  0046' 0800               	sublw	0
 12262  0048' 0100               	movlb	0	; () banked
 12263  004A' 2500'              	addwf	??_my_strcmp& (0+255),w,b
 12264                           
 12265                           ; BSR set to: 0
 12266  004C' 0012               	return	
 12267  004E'                    l7631:
 12268                           
 12269                           ; BSR set to: 0
 12270                           ;My_header\My_stdlib.h: 56: str1++;
 12271  004E' 4A1E'              	infsnz	my_strcmp@str1,f,c
 12272  0050' 2A1F'              	incf	my_strcmp@str1+1,f,c
 12273                           
 12274                           ;My_header\My_stdlib.h: 57: str2++;
 12275  0052' 4A20'              	infsnz	my_strcmp@str2,f,c
 12276  0054' 2A21'              	incf	my_strcmp@str2+1,f,c
 12277  0056'                    l7633:
 12278  0056' C01E' FFD9         	movff	my_strcmp@str1,fsr2l
 12279  005A' C01F' FFDA         	movff	my_strcmp@str1+1,fsr2h
 12280  005E' 50DF               	movf	indf2,w,c
 12281  0060' B4D8               	btfsc	status,2,c
 12282  0062' D00B               	goto	l7637
 12283  0064' C020' FFF6         	movff	my_strcmp@str2,tblptrl
 12284  0068' C021' FFF7         	movff	my_strcmp@str2+1,tblptrh
 12285  006C'                    	if	0	;tblptru may be non-zero
 12286  006C'                    	endif
 12287  006C'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12288  006C' 0E00'              	movlw	low (__mediumconst shr (0+16))
 12289  006E' 6EF8               	movwf	tblptru,c
 12290  0070'                    	endif
 12291  0070' 0008               	tblrd		*
 12292  0072' 50F5               	movf	tablat,w,c
 12293  0074' 0900               	iorlw	0
 12294  0076' A4D8               	btfss	status,2,c
 12295  0078' D7C4               	goto	l7625
 12296  007A'                    l7637:
 12297                           
 12298                           ;My_header\My_stdlib.h: 58: }
 12299                           ;My_header\My_stdlib.h: 59: return (*str1 - *str2);
 12300  007A' C01E' FFD9         	movff	my_strcmp@str1,fsr2l
 12301  007E' C01F' FFDA         	movff	my_strcmp@str1+1,fsr2h
 12302  0082' 50DF               	movf	indf2,w,c
 12303  0084' 0100               	movlb	0	; () banked
 12304  0086' 6F00'              	movwf	??_my_strcmp& (0+255),b
 12305  0088' C020' FFF6         	movff	my_strcmp@str2,tblptrl
 12306  008C' C021' FFF7         	movff	my_strcmp@str2+1,tblptrh
 12307  0090'                    	if	0	;tblptru may be non-zero
 12308  0090'                    	endif
 12309  0090'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12310  0090' 0E00'              	movlw	low (__mediumconst shr (0+16))
 12311  0092' 6EF8               	movwf	tblptru,c
 12312  0094'                    	endif
 12313  0094' 0008               	tblrd		*
 12314  0096' 50F5               	movf	tablat,w,c
 12315  0098' 0800               	sublw	0
 12316  009A' 0100               	movlb	0	; () banked
 12317  009C' 2500'              	addwf	??_my_strcmp& (0+255),w,b
 12318  009E' 0012               	return	
 12319  00A0'                    __end_of_my_strcmp:
 12320                           	opt stack 0
 12321                           tblptru	equ	0xFF8
 12322                           tblptrh	equ	0xFF7
 12323                           tblptrl	equ	0xFF6
 12324                           tablat	equ	0xFF5
 12325                           prodh	equ	0xFF4
 12326                           prodl	equ	0xFF3
 12327                           intcon	equ	0xFF2
 12328                           indf0	equ	0xFEF
 12329                           postinc0	equ	0xFEE
 12330                           fsr0h	equ	0xFEA
 12331                           fsr0l	equ	0xFE9
 12332                           wreg	equ	0xFE8
 12333                           postinc1	equ	0xFE6
 12334                           postdec1	equ	0xFE5
 12335                           fsr1h	equ	0xFE2
 12336                           fsr1l	equ	0xFE1
 12337                           indf2	equ	0xFDF
 12338                           postinc2	equ	0xFDE
 12339                           postdec2	equ	0xFDD
 12340                           plusw2	equ	0xFDB
 12341                           fsr2h	equ	0xFDA
 12342                           fsr2l	equ	0xFD9
 12343                           status	equ	0xFD8
 12344                           
 12345 ;; *************** function _my_atoi *****************
 12346 ;; Defined at:
 12347 ;;		line 41 in file "../My_header\My_stdlib.h"
 12348 ;; Parameters:    Size  Location     Type
 12349 ;;  str             2   25[BANK0 ] PTR const unsigned char 
 12350 ;;		 -> my_terminal_loop@op2(20), 
 12351 ;; Auto vars:     Size  Location     Type
 12352 ;;  ret             2   31[BANK0 ] unsigned int 
 12353 ;; Return value:  Size  Location     Type
 12354 ;;                  2   25[BANK0 ] unsigned int 
 12355 ;; Registers used:
 12356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12357 ;; Tracked objects:
 12358 ;;		On entry : 0/0
 12359 ;;		On exit  : 0/0
 12360 ;;		Unchanged: 0/0
 12361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12362 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12363 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12364 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12365 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12366 ;;Total ram usage:        8 bytes
 12367 ;; Hardware stack levels used:    1
 12368 ;; Hardware stack levels required when called:    4
 12369 ;; This function calls:
 12370 ;;		___wmul
 12371 ;; This function is called by:
 12372 ;;		_command_time
 12373 ;;		_command_operation
 12374 ;; This function uses a non-reentrant model
 12375 ;;
 12376                           
 12377                           	psect	text33
 12378  0000'                    __ptext33:
 12379                           	opt stack 0
 12380  0000'                    _my_atoi:
 12381                           	opt stack 24
 12382                           
 12383                           ;My_header\My_stdlib.h: 42: uint16_t ret = 0;
 12384                           
 12385                           ; BSR set to: 0
 12386                           ;incstack = 0
 12387  0000' 0E00               	movlw	0
 12388  0002' 0100               	movlb	0	; () banked
 12389  0004' 6F00'              	movwf	(my_atoi@ret+1)& (0+255),b
 12390  0006' 0E00               	movlw	0
 12391  0008' 6F00'              	movwf	my_atoi@ret& (0+255),b
 12392                           
 12393                           ;My_header\My_stdlib.h: 43: while (*str) {
 12394  000A' D03E               	goto	l7621
 12395  000C'                    l7611:
 12396                           
 12397                           ; BSR set to: 0
 12398                           ;My_header\My_stdlib.h: 44: if (*str >= '0' && *str <= '9') {
 12399  000C' C019' FFD9         	movff	my_atoi@str,fsr2l
 12400  0010' C01A' FFDA         	movff	my_atoi@str+1,fsr2h
 12401  0014' 0E2F               	movlw	47
 12402  0016' 64DF               	cpfsgt	indf2,c
 12403  0018' D034               	goto	l7619
 12404                           
 12405                           ; BSR set to: 0
 12406  001A' C019' FFD9         	movff	my_atoi@str,fsr2l
 12407  001E' C01A' FFDA         	movff	my_atoi@str+1,fsr2h
 12408  0022' 0E3A               	movlw	58
 12409  0024' 60DF               	cpfslt	indf2,c
 12410  0026' D02D               	goto	l7619
 12411                           
 12412                           ; BSR set to: 0
 12413                           ;My_header\My_stdlib.h: 45: ret *= 10;
 12414  0028' C01F' F013'        	movff	my_atoi@ret,___wmul@multiplier
 12415  002C' C020' F014'        	movff	my_atoi@ret+1,___wmul@multiplier+1
 12416  0030' 0E00               	movlw	0
 12417  0032' 0100               	movlb	0	; () banked
 12418  0034' 6F00'              	movwf	(___wmul@multiplicand+1)& (0+255),b
 12419  0036' 0E0A               	movlw	10
 12420  0038' 6F00'              	movwf	___wmul@multiplicand& (0+255),b
 12421  003A' EC00' F000'        	call	___wmul	;wreg free
 12422  003E' C013' F01F'        	movff	?___wmul,my_atoi@ret
 12423  0042' C014' F020'        	movff	?___wmul+1,my_atoi@ret+1
 12424                           
 12425                           ;My_header\My_stdlib.h: 46: ret += *str - '0';
 12426  0046' 0ED0               	movlw	208
 12427  0048' 0100               	movlb	0	; () banked
 12428  004A' 6F00'              	movwf	??_my_atoi& (0+255),b
 12429  004C' 0EFF               	movlw	255
 12430  004E' 0100               	movlb	0	; () banked
 12431  0050' 6F00'              	movwf	(??_my_atoi+1)& (0+255),b
 12432  0052' C019' FFD9         	movff	my_atoi@str,fsr2l
 12433  0056' C01A' FFDA         	movff	my_atoi@str+1,fsr2h
 12434  005A' 50DF               	movf	indf2,w,c
 12435  005C' 0100               	movlb	0	; () banked
 12436  005E' 6F00'              	movwf	(??_my_atoi+2)& (0+255),b
 12437  0060' 6B00'              	clrf	(??_my_atoi+3)& (0+255),b
 12438  0062' 0100               	movlb	0	; () banked
 12439  0064' 5100'              	movf	??_my_atoi& (0+255),w,b
 12440  0066' 0100               	movlb	0	; () banked
 12441  0068' 2700'              	addwf	(??_my_atoi+2)& (0+255),f,b
 12442  006A' 0100               	movlb	0	; () banked
 12443  006C' 5100'              	movf	(??_my_atoi+1)& (0+255),w,b
 12444  006E' 0100               	movlb	0	; () banked
 12445  0070' 2300'              	addwfc	(??_my_atoi+3)& (0+255),f,b
 12446  0072' 0100               	movlb	0	; () banked
 12447  0074' 5100'              	movf	(??_my_atoi+2)& (0+255),w,b
 12448  0076' 0100               	movlb	0	; () banked
 12449  0078' 2700'              	addwf	my_atoi@ret& (0+255),f,b
 12450  007A' 0100               	movlb	0	; () banked
 12451  007C' 5100'              	movf	(??_my_atoi+3)& (0+255),w,b
 12452  007E' 0100               	movlb	0	; () banked
 12453  0080' 2300'              	addwfc	(my_atoi@ret+1)& (0+255),f,b
 12454  0082'                    l7619:
 12455                           
 12456                           ; BSR set to: 0
 12457                           ;My_header\My_stdlib.h: 47: }
 12458                           ;My_header\My_stdlib.h: 48: str++;
 12459  0082' 0100               	movlb	0	; () banked
 12460  0084' 4B00'              	infsnz	my_atoi@str& (0+255),f,b
 12461  0086' 2B00'              	incf	(my_atoi@str+1)& (0+255),f,b
 12462  0088'                    l7621:
 12463                           
 12464                           ; BSR set to: 0
 12465  0088' C019' FFD9         	movff	my_atoi@str,fsr2l
 12466  008C' C01A' FFDA         	movff	my_atoi@str+1,fsr2h
 12467  0090' 50DF               	movf	indf2,w,c
 12468  0092' A4D8               	btfss	status,2,c
 12469  0094' D7BB               	goto	l7611
 12470                           
 12471                           ; BSR set to: 0
 12472                           ;My_header\My_stdlib.h: 49: }
 12473                           ;My_header\My_stdlib.h: 50: return ret;
 12474  0096' C01F' F019'        	movff	my_atoi@ret,?_my_atoi
 12475  009A' C020' F01A'        	movff	my_atoi@ret+1,?_my_atoi+1
 12476                           
 12477                           ; BSR set to: 0
 12478  009E' 0012               	return		;funcret
 12479  00A0'                    __end_of_my_atoi:
 12480                           	opt stack 0
 12481                           tblptru	equ	0xFF8
 12482                           tblptrh	equ	0xFF7
 12483                           tblptrl	equ	0xFF6
 12484                           tablat	equ	0xFF5
 12485                           prodh	equ	0xFF4
 12486                           prodl	equ	0xFF3
 12487                           intcon	equ	0xFF2
 12488                           indf0	equ	0xFEF
 12489                           postinc0	equ	0xFEE
 12490                           fsr0h	equ	0xFEA
 12491                           fsr0l	equ	0xFE9
 12492                           wreg	equ	0xFE8
 12493                           postinc1	equ	0xFE6
 12494                           postdec1	equ	0xFE5
 12495                           fsr1h	equ	0xFE2
 12496                           fsr1l	equ	0xFE1
 12497                           indf2	equ	0xFDF
 12498                           postinc2	equ	0xFDE
 12499                           postdec2	equ	0xFDD
 12500                           plusw2	equ	0xFDB
 12501                           fsr2h	equ	0xFDA
 12502                           fsr2l	equ	0xFD9
 12503                           status	equ	0xFD8
 12504                           
 12505 ;; *************** function _command_at_hand *****************
 12506 ;; Defined at:
 12507 ;;		line 96 in file "../My_header\My_terminal.h"
 12508 ;; Parameters:    Size  Location     Type
 12509 ;;  tx              2   99[BANK0 ] PTR struct ringbuf
 12510 ;;		 -> usb_tx(8), 
 12511 ;;  hand            2  101[BANK0 ] PTR unsigned char 
 12512 ;;		 -> caltime_now(7), 
 12513 ;;  min             1  103[BANK0 ] unsigned char 
 12514 ;;  max             1  104[BANK0 ] unsigned char 
 12515 ;;  value           1  105[BANK0 ] unsigned char 
 12516 ;; Auto vars:     Size  Location     Type
 12517 ;;		None
 12518 ;; Return value:  Size  Location     Type
 12519 ;;		None               void
 12520 ;; Registers used:
 12521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12522 ;; Tracked objects:
 12523 ;;		On entry : 0/0
 12524 ;;		On exit  : 0/0
 12525 ;;		Unchanged: 0/0
 12526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12527 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12530 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12531 ;;Total ram usage:        7 bytes
 12532 ;; Hardware stack levels used:    1
 12533 ;; Hardware stack levels required when called:    8
 12534 ;; This function calls:
 12535 ;;		_RTCC_from_caltime
 12536 ;;		_print_time
 12537 ;;		_ringbuf_put_str
 12538 ;; This function is called by:
 12539 ;;		_command_time
 12540 ;; This function uses a non-reentrant model
 12541 ;;
 12542                           
 12543                           	psect	text34
 12544  0000'                    __ptext34:
 12545                           	opt stack 0
 12546  0000'                    _command_at_hand:
 12547                           	opt stack 19
 12548                           
 12549                           ;My_header\My_terminal.h: 97: if (value >= min && value <= max) {
 12550                           
 12551                           ; BSR set to: 0
 12552                           ;incstack = 0
 12553  0000' 0100               	movlb	0	; () banked
 12554  0002' 5100'              	movf	command_at_hand@min& (0+255),w,b
 12555  0004' 0100               	movlb	0	; () banked
 12556  0006' 5D00'              	subwf	command_at_hand@value& (0+255),w,b
 12557  0008' A0D8               	btfss	status,0,c
 12558  000A' D024               	goto	l7663
 12559                           
 12560                           ; BSR set to: 0
 12561  000C' 0100               	movlb	0	; () banked
 12562  000E' 5100'              	movf	command_at_hand@value& (0+255),w,b
 12563  0010' 0100               	movlb	0	; () banked
 12564  0012' 5D00'              	subwf	command_at_hand@max& (0+255),w,b
 12565  0014' A0D8               	btfss	status,0,c
 12566  0016' D01E               	goto	l7663
 12567                           
 12568                           ; BSR set to: 0
 12569                           ;My_header\My_terminal.h: 98: *hand = value;
 12570  0018' C065' FFD9         	movff	command_at_hand@hand,fsr2l
 12571  001C' C066' FFDA         	movff	command_at_hand@hand+1,fsr2h
 12572  0020' C069' FFDF         	movff	command_at_hand@value,indf2
 12573                           
 12574                           ; BSR set to: 0
 12575                           ;My_header\My_terminal.h: 99: RTCC_from_caltime(&caltime_now, &epoch_now);
 12576  0024' 0E00'              	movlw	low _caltime_now
 12577  0026' 0100               	movlb	0	; () banked
 12578  0028' 6F00'              	movwf	RTCC_from_caltime@ct& (0+255),b
 12579  002A' 0E00'              	movlw	high _caltime_now
 12580  002C' 0100               	movlb	0	; () banked
 12581  002E' 6F00'              	movwf	(RTCC_from_caltime@ct+1)& (0+255),b
 12582  0030' 0E00'              	movlw	low _epoch_now
 12583  0032' 0100               	movlb	0	; () banked
 12584  0034' 6F00'              	movwf	RTCC_from_caltime@ep& (0+255),b
 12585  0036' 0E00'              	movlw	high _epoch_now
 12586  0038' 0100               	movlb	0	; () banked
 12587  003A' 6F00'              	movwf	(RTCC_from_caltime@ep+1)& (0+255),b
 12588  003C' EC00' F000'        	call	_RTCC_from_caltime	;wreg free
 12589                           
 12590                           ;My_header\My_terminal.h: 100: time_change_flag = 1;
 12591  0040' 0E01               	movlw	1
 12592  0042' 0100               	movlb	0	; () banked
 12593  0044' 6F00'              	movwf	_time_change_flag& (0+255),b
 12594                           
 12595                           ; BSR set to: 0
 12596                           ;My_header\My_terminal.h: 101: print_time(tx);
 12597  0046' C063' F043'        	movff	command_at_hand@tx,print_time@tx
 12598  004A' C064' F044'        	movff	command_at_hand@tx+1,print_time@tx+1
 12599  004E' EC00' F000'        	call	_print_time	;wreg free
 12600                           
 12601                           ;My_header\My_terminal.h: 102: } else {
 12602  0052' 0012               	return	
 12603  0054'                    l7663:
 12604                           
 12605                           ;My_header\My_terminal.h: 103: ringbuf_put_str(tx, "\terror\n");
 12606  0054' C063' F027'        	movff	command_at_hand@tx,ringbuf_put_str@rb
 12607  0058' C064' F028'        	movff	command_at_hand@tx+1,ringbuf_put_str@rb+1
 12608  005C' 0E00'              	movlw	low STR_6
 12609  005E' 0100               	movlb	0	; () banked
 12610  0060' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 12611  0062' 0E00'              	movlw	high STR_6
 12612  0064' 0100               	movlb	0	; () banked
 12613  0066' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 12614  0068' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 12615  006C' 0012               	return	
 12616  006E'                    __end_of_command_at_hand:
 12617                           	opt stack 0
 12618                           tblptru	equ	0xFF8
 12619                           tblptrh	equ	0xFF7
 12620                           tblptrl	equ	0xFF6
 12621                           tablat	equ	0xFF5
 12622                           prodh	equ	0xFF4
 12623                           prodl	equ	0xFF3
 12624                           intcon	equ	0xFF2
 12625                           indf0	equ	0xFEF
 12626                           postinc0	equ	0xFEE
 12627                           fsr0h	equ	0xFEA
 12628                           fsr0l	equ	0xFE9
 12629                           wreg	equ	0xFE8
 12630                           postinc1	equ	0xFE6
 12631                           postdec1	equ	0xFE5
 12632                           fsr1h	equ	0xFE2
 12633                           fsr1l	equ	0xFE1
 12634                           indf2	equ	0xFDF
 12635                           postinc2	equ	0xFDE
 12636                           postdec2	equ	0xFDD
 12637                           plusw2	equ	0xFDB
 12638                           fsr2h	equ	0xFDA
 12639                           fsr2l	equ	0xFD9
 12640                           status	equ	0xFD8
 12641                           
 12642 ;; *************** function _print_time *****************
 12643 ;; Defined at:
 12644 ;;		line 82 in file "../My_header\My_terminal.h"
 12645 ;; Parameters:    Size  Location     Type
 12646 ;;  tx              2   67[BANK0 ] PTR struct ringbuf
 12647 ;;		 -> usb_tx(8), 
 12648 ;; Auto vars:     Size  Location     Type
 12649 ;;  str            30   69[BANK0 ] unsigned char [30]
 12650 ;; Return value:  Size  Location     Type
 12651 ;;		None               void
 12652 ;; Registers used:
 12653 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12654 ;; Tracked objects:
 12655 ;;		On entry : 0/0
 12656 ;;		On exit  : 0/0
 12657 ;;		Unchanged: 0/0
 12658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12659 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12660 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12662 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12663 ;;Total ram usage:       32 bytes
 12664 ;; Hardware stack levels used:    1
 12665 ;; Hardware stack levels required when called:    7
 12666 ;; This function calls:
 12667 ;;		_RTCC_from_RTCC
 12668 ;;		_ringbuf_put_str
 12669 ;;		_sprintf
 12670 ;; This function is called by:
 12671 ;;		_command_at_hand
 12672 ;;		_command_time
 12673 ;;		_normal_loop
 12674 ;; This function uses a non-reentrant model
 12675 ;;
 12676                           
 12677                           	psect	text35
 12678  0000'                    __ptext35:
 12679                           	opt stack 0
 12680  0000'                    _print_time:
 12681                           	opt stack 22
 12682                           
 12683                           ;My_header\My_terminal.h: 83: RTCC_from_RTCC(&caltime_now, &epoch_now);
 12684                           
 12685                           ;incstack = 0
 12686  0000' 0E00'              	movlw	low _caltime_now
 12687  0002' 0100               	movlb	0	; () banked
 12688  0004' 6F00'              	movwf	RTCC_from_RTCC@ct& (0+255),b
 12689  0006' 0E00'              	movlw	high _caltime_now
 12690  0008' 0100               	movlb	0	; () banked
 12691  000A' 6F00'              	movwf	(RTCC_from_RTCC@ct+1)& (0+255),b
 12692  000C' 0E00'              	movlw	low _epoch_now
 12693  000E' 0100               	movlb	0	; () banked
 12694  0010' 6F00'              	movwf	RTCC_from_RTCC@ep& (0+255),b
 12695  0012' 0E00'              	movlw	high _epoch_now
 12696  0014' 0100               	movlb	0	; () banked
 12697  0016' 6F00'              	movwf	(RTCC_from_RTCC@ep+1)& (0+255),b
 12698  0018' EC00' F000'        	call	_RTCC_from_RTCC	;wreg free
 12699                           
 12700                           ;My_header\My_terminal.h: 84: char str[30];
 12701                           ;My_header\My_terminal.h: 85: sprintf(str, "\t20%02d/%02d/%02d(%s)%02d:%02d-%02d\n",
 12702                           ;My_header\My_terminal.h: 86: caltime_now.YY,
 12703                           ;My_header\My_terminal.h: 87: caltime_now.MM,
 12704                           ;My_header\My_terminal.h: 88: caltime_now.DD,
 12705                           ;My_header\My_terminal.h: 89: weekday_3char[caltime_now.EE],
 12706                           ;My_header\My_terminal.h: 90: caltime_now.hh,
 12707                           ;My_header\My_terminal.h: 91: caltime_now.mm,
 12708                           ;My_header\My_terminal.h: 92: caltime_now.ss);
 12709  001C' 0E00'              	movlw	low print_time@str
 12710  001E' 0100               	movlb	0	; () banked
 12711  0020' 6F00'              	movwf	sprintf@sp& (0+255),b
 12712  0022' 0E00'              	movlw	high print_time@str
 12713  0024' 0100               	movlb	0	; () banked
 12714  0026' 6F00'              	movwf	(sprintf@sp+1)& (0+255),b
 12715  0028' 0E00'              	movlw	low STR_5
 12716  002A' 0100               	movlb	0	; () banked
 12717  002C' 6F00'              	movwf	sprintf@f& (0+255),b
 12718  002E' 0E00'              	movlw	high STR_5
 12719  0030' 0100               	movlb	0	; () banked
 12720  0032' 6F00'              	movwf	(sprintf@f+1)& (0+255),b
 12721  0034' C02C' F024'        	movff	_caltime_now+6,?_sprintf+4
 12722  0038' 0100               	movlb	0	; () banked
 12723  003A' 6B00'              	clrf	(?_sprintf+5)& (0+255),b
 12724  003C' C02B' F026'        	movff	_caltime_now+5,?_sprintf+6
 12725  0040' 0100               	movlb	0	; () banked
 12726  0042' 6B00'              	clrf	(?_sprintf+7)& (0+255),b
 12727  0044' C02A' F028'        	movff	_caltime_now+4,?_sprintf+8
 12728  0048' 0100               	movlb	0	; () banked
 12729  004A' 6B00'              	clrf	(?_sprintf+9)& (0+255),b
 12730  004C' 0100               	movlb	0	; () banked
 12731  004E' 5100'              	movf	(_caltime_now+3)& (0+255),w,b
 12732  0050' 0D04               	mullw	4
 12733  0052' 0E00'              	movlw	low _weekday_3char
 12734  0054' 24F3               	addwf	prodl,w,c
 12735  0056' 0100               	movlb	0	; () banked
 12736  0058' 6F00'              	movwf	(?_sprintf+10)& (0+255),b
 12737  005A' 0E00'              	movlw	high _weekday_3char
 12738  005C' 20F4               	addwfc	prodh,w,c
 12739  005E' 0100               	movlb	0	; () banked
 12740  0060' 6F00'              	movwf	(?_sprintf+11)& (0+255),b
 12741  0062' C028' F02C'        	movff	_caltime_now+2,?_sprintf+12
 12742  0066' 0100               	movlb	0	; () banked
 12743  0068' 6B00'              	clrf	(?_sprintf+13)& (0+255),b
 12744  006A' C027' F02E'        	movff	_caltime_now+1,?_sprintf+14
 12745  006E' 0100               	movlb	0	; () banked
 12746  0070' 6B00'              	clrf	(?_sprintf+15)& (0+255),b
 12747  0072' C026' F030'        	movff	_caltime_now,?_sprintf+16
 12748  0076' 0100               	movlb	0	; () banked
 12749  0078' 6B00'              	clrf	(?_sprintf+17)& (0+255),b
 12750  007A' EC00' F000'        	call	_sprintf	;wreg free
 12751                           
 12752                           ;My_header\My_terminal.h: 93: ringbuf_put_str(tx, str);
 12753  007E' C043' F027'        	movff	print_time@tx,ringbuf_put_str@rb
 12754  0082' C044' F028'        	movff	print_time@tx+1,ringbuf_put_str@rb+1
 12755  0086' 0E00'              	movlw	low print_time@str
 12756  0088' 0100               	movlb	0	; () banked
 12757  008A' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 12758  008C' 0E00'              	movlw	high print_time@str
 12759  008E' 0100               	movlb	0	; () banked
 12760  0090' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 12761  0092' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 12762  0096' 0012               	return		;funcret
 12763  0098'                    __end_of_print_time:
 12764                           	opt stack 0
 12765                           tblptru	equ	0xFF8
 12766                           tblptrh	equ	0xFF7
 12767                           tblptrl	equ	0xFF6
 12768                           tablat	equ	0xFF5
 12769                           prodh	equ	0xFF4
 12770                           prodl	equ	0xFF3
 12771                           intcon	equ	0xFF2
 12772                           indf0	equ	0xFEF
 12773                           postinc0	equ	0xFEE
 12774                           fsr0h	equ	0xFEA
 12775                           fsr0l	equ	0xFE9
 12776                           wreg	equ	0xFE8
 12777                           postinc1	equ	0xFE6
 12778                           postdec1	equ	0xFE5
 12779                           fsr1h	equ	0xFE2
 12780                           fsr1l	equ	0xFE1
 12781                           indf2	equ	0xFDF
 12782                           postinc2	equ	0xFDE
 12783                           postdec2	equ	0xFDD
 12784                           plusw2	equ	0xFDB
 12785                           fsr2h	equ	0xFDA
 12786                           fsr2l	equ	0xFD9
 12787                           status	equ	0xFD8
 12788                           
 12789 ;; *************** function _sprintf *****************
 12790 ;; Defined at:
 12791 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
 12792 ;; Parameters:    Size  Location     Type
 12793 ;;  sp              2   32[BANK0 ] PTR unsigned char 
 12794 ;;		 -> print_time@str(30), 
 12795 ;;  f               2   34[BANK0 ] PTR const unsigned char 
 12796 ;;		 -> STR_5(37), 
 12797 ;; Auto vars:     Size  Location     Type
 12798 ;;  tmpval          4    0        struct .
 12799 ;;  width           2   65[BANK0 ] int 
 12800 ;;  len             2   61[BANK0 ] unsigned int 
 12801 ;;  val             2   59[BANK0 ] unsigned int 
 12802 ;;  cp              2   57[BANK0 ] PTR const unsigned char 
 12803 ;;		 -> STR_147(7), weekday_3char(28), 
 12804 ;;  ap              2   55[BANK0 ] PTR void [1]
 12805 ;;		 -> ?_sprintf(2), 
 12806 ;;  c               1   64[BANK0 ] char 
 12807 ;;  flag            1   63[BANK0 ] unsigned char 
 12808 ;;  prec            1   54[BANK0 ] char 
 12809 ;; Return value:  Size  Location     Type
 12810 ;;                  2   32[BANK0 ] int 
 12811 ;; Registers used:
 12812 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12813 ;; Tracked objects:
 12814 ;;		On entry : 0/0
 12815 ;;		On exit  : 0/0
 12816 ;;		Unchanged: 0/0
 12817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12818 ;;      Params:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12819 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12820 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12821 ;;      Totals:         0      35       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12822 ;;Total ram usage:       35 bytes
 12823 ;; Hardware stack levels used:    1
 12824 ;; Hardware stack levels required when called:    4
 12825 ;; This function calls:
 12826 ;;		___lwdiv
 12827 ;;		___lwmod
 12828 ;;		___wmul
 12829 ;;		_isdigit
 12830 ;; This function is called by:
 12831 ;;		_print_time
 12832 ;; This function uses a non-reentrant model
 12833 ;;
 12834                           
 12835                           	psect	text36
 12836  0000'                    __ptext36:
 12837                           	opt stack 0
 12838  0000'                    _sprintf:
 12839                           	opt stack 24
 12840                           
 12841                           ;doprnt.c: 494: va_list ap;
 12842                           ;doprnt.c: 499: signed char c;
 12843                           ;doprnt.c: 501: int width;
 12844                           ;doprnt.c: 506: signed char prec;
 12845                           ;doprnt.c: 508: unsigned char flag;
 12846                           ;doprnt.c: 523: union {
 12847                           ;doprnt.c: 524: unsigned long vd;
 12848                           ;doprnt.c: 525: double integ;
 12849                           ;doprnt.c: 526: } tmpval;
 12850                           ;doprnt.c: 528: unsigned int val;
 12851                           ;doprnt.c: 529: unsigned len;
 12852                           ;doprnt.c: 530: const char * cp;
 12853                           ;doprnt.c: 533: *ap = __va_start();
 12854                           
 12855                           ;incstack = 0
 12856  0000' 0E00'              	movlw	low (?_sprintf+4)
 12857  0002' 0100               	movlb	0	; () banked
 12858  0004' 6F00'              	movwf	sprintf@ap& (0+255),b
 12859  0006' 0E00'              	movlw	high (?_sprintf+4)
 12860  0008' 0100               	movlb	0	; () banked
 12861  000A' 6F00'              	movwf	(sprintf@ap+1)& (0+255),b
 12862                           
 12863                           ;doprnt.c: 536: while(c = *f++) {
 12864  000C' D20D               	goto	l7475
 12865  000E'                    l7335:
 12866                           
 12867                           ; BSR set to: 0
 12868                           ;doprnt.c: 538: if(c != '%')
 12869  000E' 0E25               	movlw	37
 12870  0010' 0100               	movlb	0	; () banked
 12871  0012' 1900'              	xorwf	sprintf@c& (0+255),w,b
 12872  0014' B4D8               	btfsc	status,2,c
 12873  0016' D00A               	goto	l7341
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;doprnt.c: 540: {
 12877                           ;doprnt.c: 541: ((*sp++ = (c)));
 12878  0018' C020' FFD9         	movff	sprintf@sp,fsr2l
 12879  001C' C021' FFDA         	movff	sprintf@sp+1,fsr2h
 12880  0020' C040' FFDF         	movff	sprintf@c,indf2
 12881                           
 12882                           ; BSR set to: 0
 12883  0024' 0100               	movlb	0	; () banked
 12884  0026' 4B00'              	infsnz	sprintf@sp& (0+255),f,b
 12885  0028' 2B00'              	incf	(sprintf@sp+1)& (0+255),f,b
 12886                           
 12887                           ;doprnt.c: 542: continue;
 12888  002A' D1FE               	goto	l7475
 12889  002C'                    l7341:
 12890                           
 12891                           ; BSR set to: 0
 12892                           ;doprnt.c: 543: }
 12893                           ;doprnt.c: 546: width = 0;
 12894  002C' 0E00               	movlw	0
 12895  002E' 0100               	movlb	0	; () banked
 12896  0030' 6F00'              	movwf	(sprintf@width+1)& (0+255),b
 12897  0032' 0E00               	movlw	0
 12898  0034' 6F00'              	movwf	sprintf@width& (0+255),b
 12899                           
 12900                           ;doprnt.c: 548: flag = 0;
 12901  0036' 0E00               	movlw	0
 12902  0038' 0100               	movlb	0	; () banked
 12903  003A' 6F00'              	movwf	sprintf@flag& (0+255),b
 12904                           
 12905                           ; BSR set to: 0
 12906                           ;doprnt.c: 551: switch(*f) {
 12907                           
 12908                           ;doprnt.c: 550: for(;;) {
 12909  003C' D005               	goto	l7347
 12910  003E'                    l7343:
 12911                           
 12912                           ;doprnt.c: 580: flag |= 0x04;
 12913  003E' 0100               	movlb	0	; () banked
 12914  0040' 8500'              	bsf	sprintf@flag& (0+255),2,b
 12915                           
 12916                           ;doprnt.c: 581: f++;
 12917  0042' 0100               	movlb	0	; () banked
 12918  0044' 4B00'              	infsnz	sprintf@f& (0+255),f,b
 12919  0046' 2B00'              	incf	(sprintf@f+1)& (0+255),f,b
 12920  0048'                    l7347:
 12921  0048' C022' FFF6         	movff	sprintf@f,tblptrl
 12922  004C' C023' FFF7         	movff	sprintf@f+1,tblptrh
 12923  0050'                    	if	0	;tblptru may be non-zero
 12924  0050'                    	endif
 12925  0050'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12926  0050' 0E00'              	movlw	low (__mediumconst shr (0+16))
 12927  0052' 6EF8               	movwf	tblptru,c
 12928  0054'                    	endif
 12929  0054' 0008               	tblrd		*
 12930  0056' 50F5               	movf	tablat,w,c
 12931                           
 12932                           ; Switch size 1, requested type "space"
 12933                           ; Number of cases is 1, Range of values is 48 to 48
 12934                           ; switch strategies available:
 12935                           ; Name         Instructions Cycles
 12936                           ; simple_byte            4     3 (average)
 12937                           ;	Chosen strategy is simple_byte
 12938  0058' 0A30               	xorlw	48	; case 48
 12939  005A' B4D8               	btfsc	status,2,c
 12940  005C' D7F0               	goto	l7343
 12941                           
 12942                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12943                           
 12944                           ;doprnt.c: 586: }
 12945                           
 12946                           ;doprnt.c: 585: break;
 12947  005E' C022' FFF6         	movff	sprintf@f,tblptrl
 12948  0062' C023' FFF7         	movff	sprintf@f+1,tblptrh
 12949  0066'                    	if	0	;tblptru may be non-zero
 12950  0066'                    	endif
 12951  0066'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12952  0066' 0E00'              	movlw	low (__mediumconst shr (0+16))
 12953  0068' 6EF8               	movwf	tblptru,c
 12954  006A'                    	endif
 12955  006A' 0008               	tblrd		*
 12956  006C' 50F5               	movf	tablat,w,c
 12957  006E' EC00' F000'        	call	_isdigit
 12958  0072' A0D8               	btfss	status,0,c
 12959  0074' D0CB               	goto	l7397
 12960                           
 12961                           ;doprnt.c: 598: width = 0;
 12962  0076' 0E00               	movlw	0
 12963  0078' 0100               	movlb	0	; () banked
 12964  007A' 6F00'              	movwf	(sprintf@width+1)& (0+255),b
 12965  007C' 0E00               	movlw	0
 12966  007E' 6F00'              	movwf	sprintf@width& (0+255),b
 12967  0080'                    l7353:
 12968                           
 12969                           ;doprnt.c: 600: width *= 10;
 12970  0080' C041' F013'        	movff	sprintf@width,___wmul@multiplier
 12971  0084' C042' F014'        	movff	sprintf@width+1,___wmul@multiplier+1
 12972  0088' 0E00               	movlw	0
 12973  008A' 0100               	movlb	0	; () banked
 12974  008C' 6F00'              	movwf	(___wmul@multiplicand+1)& (0+255),b
 12975  008E' 0E0A               	movlw	10
 12976  0090' 6F00'              	movwf	___wmul@multiplicand& (0+255),b
 12977  0092' EC00' F000'        	call	___wmul	;wreg free
 12978  0096' C013' F041'        	movff	?___wmul,sprintf@width
 12979  009A' C014' F042'        	movff	?___wmul+1,sprintf@width+1
 12980                           
 12981                           ;doprnt.c: 601: width += *f++ - '0';
 12982  009E' 0ED0               	movlw	208
 12983  00A0' 0100               	movlb	0	; () banked
 12984  00A2' 6F00'              	movwf	??_sprintf& (0+255),b
 12985  00A4' 0EFF               	movlw	255
 12986  00A6' 0100               	movlb	0	; () banked
 12987  00A8' 6F00'              	movwf	(??_sprintf+1)& (0+255),b
 12988  00AA' C022' FFF6         	movff	sprintf@f,tblptrl
 12989  00AE' C023' FFF7         	movff	sprintf@f+1,tblptrh
 12990  00B2'                    	if	0	;tblptru may be non-zero
 12991  00B2'                    	endif
 12992  00B2'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12993  00B2' 0E00'              	movlw	low (__mediumconst shr (0+16))
 12994  00B4' 6EF8               	movwf	tblptru,c
 12995  00B6'                    	endif
 12996  00B6' 0008               	tblrd		*
 12997  00B8' 50F5               	movf	tablat,w,c
 12998  00BA' 0100               	movlb	0	; () banked
 12999  00BC' 6F00'              	movwf	(??_sprintf+2)& (0+255),b
 13000  00BE' 6B00'              	clrf	(??_sprintf+3)& (0+255),b
 13001  00C0' 0100               	movlb	0	; () banked
 13002  00C2' 5100'              	movf	??_sprintf& (0+255),w,b
 13003  00C4' 0100               	movlb	0	; () banked
 13004  00C6' 2700'              	addwf	(??_sprintf+2)& (0+255),f,b
 13005  00C8' 0100               	movlb	0	; () banked
 13006  00CA' 5100'              	movf	(??_sprintf+1)& (0+255),w,b
 13007  00CC' 0100               	movlb	0	; () banked
 13008  00CE' 2300'              	addwfc	(??_sprintf+3)& (0+255),f,b
 13009  00D0' 0100               	movlb	0	; () banked
 13010  00D2' 5100'              	movf	(??_sprintf+2)& (0+255),w,b
 13011  00D4' 0100               	movlb	0	; () banked
 13012  00D6' 2700'              	addwf	sprintf@width& (0+255),f,b
 13013  00D8' 0100               	movlb	0	; () banked
 13014  00DA' 5100'              	movf	(??_sprintf+3)& (0+255),w,b
 13015  00DC' 0100               	movlb	0	; () banked
 13016  00DE' 2300'              	addwfc	(sprintf@width+1)& (0+255),f,b
 13017                           
 13018                           ; BSR set to: 0
 13019  00E0' 0100               	movlb	0	; () banked
 13020  00E2' 4B00'              	infsnz	sprintf@f& (0+255),f,b
 13021  00E4' 2B00'              	incf	(sprintf@f+1)& (0+255),f,b
 13022                           
 13023                           ; BSR set to: 0
 13024                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13025  00E6' C022' FFF6         	movff	sprintf@f,tblptrl
 13026  00EA' C023' FFF7         	movff	sprintf@f+1,tblptrh
 13027  00EE'                    	if	0	;tblptru may be non-zero
 13028  00EE'                    	endif
 13029  00EE'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 13030  00EE' 0E00'              	movlw	low (__mediumconst shr (0+16))
 13031  00F0' 6EF8               	movwf	tblptru,c
 13032  00F2'                    	endif
 13033  00F2' 0008               	tblrd		*
 13034  00F4' 50F5               	movf	tablat,w,c
 13035  00F6' EC00' F000'        	call	_isdigit
 13036  00FA' A0D8               	btfss	status,0,c
 13037  00FC' D087               	goto	l7397
 13038  00FE' D7C0               	goto	l7353
 13039  0100'                    l7361:
 13040                           
 13041                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13042  0100' C037' FFD9         	movff	sprintf@ap,fsr2l
 13043  0104' C038' FFDA         	movff	sprintf@ap+1,fsr2h
 13044  0108' CFDE F039'         	movff	postinc2,sprintf@cp
 13045  010C' CFDD F03A'         	movff	postdec2,sprintf@cp+1
 13046  0110' 0E02               	movlw	2
 13047  0112' 0100               	movlb	0	; () banked
 13048  0114' 2700'              	addwf	sprintf@ap& (0+255),f,b
 13049  0116' 0E00               	movlw	0
 13050  0118' 2300'              	addwfc	(sprintf@ap+1)& (0+255),f,b
 13051                           
 13052                           ; BSR set to: 0
 13053                           ;doprnt.c: 740: if(!cp)
 13054  011A' 0100               	movlb	0	; () banked
 13055  011C' 5100'              	movf	sprintf@cp& (0+255),w,b
 13056  011E' 0100               	movlb	0	; () banked
 13057  0120' 1100'              	iorwf	(sprintf@cp+1)& (0+255),w,b
 13058  0122' A4D8               	btfss	status,2,c
 13059  0124' D006               	goto	l7369
 13060                           
 13061                           ; BSR set to: 0
 13062                           ;doprnt.c: 741: cp = "(null)";
 13063  0126' 0E00'              	movlw	low STR_147
 13064  0128' 0100               	movlb	0	; () banked
 13065  012A' 6F00'              	movwf	sprintf@cp& (0+255),b
 13066  012C' 0E00'              	movlw	high STR_147
 13067  012E' 0100               	movlb	0	; () banked
 13068  0130' 6F00'              	movwf	(sprintf@cp+1)& (0+255),b
 13069  0132'                    l7369:
 13070                           
 13071                           ; BSR set to: 0
 13072                           ;doprnt.c: 745: len = 0;
 13073  0132' 0E00               	movlw	0
 13074  0134' 0100               	movlb	0	; () banked
 13075  0136' 6F00'              	movwf	(sprintf@len+1)& (0+255),b
 13076  0138' 0E00               	movlw	0
 13077  013A' 6F00'              	movwf	sprintf@len& (0+255),b
 13078                           
 13079                           ;doprnt.c: 746: while(cp[len])
 13080  013C' D003               	goto	l7373
 13081  013E'                    l7371:
 13082                           
 13083                           ; BSR set to: 0
 13084                           ;doprnt.c: 747: len++;
 13085  013E' 0100               	movlb	0	; () banked
 13086  0140' 4B00'              	infsnz	sprintf@len& (0+255),f,b
 13087  0142' 2B00'              	incf	(sprintf@len+1)& (0+255),f,b
 13088  0144'                    l7373:
 13089                           
 13090                           ; BSR set to: 0
 13091  0144' 0100               	movlb	0	; () banked
 13092  0146' 5100'              	movf	sprintf@len& (0+255),w,b
 13093  0148' 0100               	movlb	0	; () banked
 13094  014A' 2500'              	addwf	sprintf@cp& (0+255),w,b
 13095  014C' 0100               	movlb	0	; () banked
 13096  014E' 6F00'              	movwf	??_sprintf& (0+255),b
 13097  0150' 0100               	movlb	0	; () banked
 13098  0152' 5100'              	movf	(sprintf@len+1)& (0+255),w,b
 13099  0154' 0100               	movlb	0	; () banked
 13100  0156' 2100'              	addwfc	(sprintf@cp+1)& (0+255),w,b
 13101  0158' 0100               	movlb	0	; () banked
 13102  015A' 6F00'              	movwf	(??_sprintf+1)& (0+255),b
 13103  015C' C032' FFF6         	movff	??_sprintf,tblptrl
 13104  0160' C033' FFF7         	movff	??_sprintf+1,tblptrh
 13105  0164'                    	if	0	;tblptru may be non-zero
 13106  0164'                    	endif
 13107  0164'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 13108  0164' 0E00'              	movlw	low (__mediumconst shr (0+16))
 13109  0166' 6EF8               	movwf	tblptru,c
 13110  0168'                    	endif
 13111  0168' 0008               	tblrd		*
 13112  016A' 50F5               	movf	tablat,w,c
 13113  016C' 0900               	iorlw	0
 13114  016E' A4D8               	btfss	status,2,c
 13115  0170' D7E6               	goto	l7371
 13116                           
 13117                           ; BSR set to: 0
 13118                           ;doprnt.c: 757: if(width > len)
 13119                           
 13120                           ; BSR set to: 0
 13121  0172' 0100               	movlb	0	; () banked
 13122  0174' 5100'              	movf	sprintf@width& (0+255),w,b
 13123  0176' 0100               	movlb	0	; () banked
 13124  0178' 5D00'              	subwf	sprintf@len& (0+255),w,b
 13125  017A' 0100               	movlb	0	; () banked
 13126  017C' 5100'              	movf	(sprintf@width+1)& (0+255),w,b
 13127  017E' 0100               	movlb	0	; () banked
 13128  0180' 5900'              	subwfb	(sprintf@len+1)& (0+255),w,b
 13129  0182' B0D8               	btfsc	status,0,c
 13130  0184' D009               	goto	l7379
 13131                           
 13132                           ; BSR set to: 0
 13133                           ;doprnt.c: 758: width -= len;
 13134  0186' 0100               	movlb	0	; () banked
 13135  0188' 5100'              	movf	sprintf@len& (0+255),w,b
 13136  018A' 0100               	movlb	0	; () banked
 13137  018C' 5F00'              	subwf	sprintf@width& (0+255),f,b
 13138  018E' 0100               	movlb	0	; () banked
 13139  0190' 5100'              	movf	(sprintf@len+1)& (0+255),w,b
 13140  0192' 0100               	movlb	0	; () banked
 13141  0194' 5B00'              	subwfb	(sprintf@width+1)& (0+255),f,b
 13142  0196' D00F               	goto	l7385
 13143  0198'                    l7379:
 13144                           
 13145                           ; BSR set to: 0
 13146                           ;doprnt.c: 759: else
 13147                           ;doprnt.c: 760: width = 0;
 13148  0198' 0E00               	movlw	0
 13149  019A' 0100               	movlb	0	; () banked
 13150  019C' 6F00'              	movwf	(sprintf@width+1)& (0+255),b
 13151  019E' 0E00               	movlw	0
 13152  01A0' 6F00'              	movwf	sprintf@width& (0+255),b
 13153                           
 13154                           ; BSR set to: 0
 13155                           ;doprnt.c: 764: while(width--)
 13156  01A2' D009               	goto	l7385
 13157  01A4'                    l7381:
 13158                           
 13159                           ; BSR set to: 0
 13160                           ;doprnt.c: 765: ((*sp++ = (' ')));
 13161  01A4' C020' FFD9         	movff	sprintf@sp,fsr2l
 13162  01A8' C021' FFDA         	movff	sprintf@sp+1,fsr2h
 13163  01AC' 0E20               	movlw	32
 13164  01AE' 6EDF               	movwf	indf2,c
 13165                           
 13166                           ; BSR set to: 0
 13167  01B0' 0100               	movlb	0	; () banked
 13168  01B2' 4B00'              	infsnz	sprintf@sp& (0+255),f,b
 13169  01B4' 2B00'              	incf	(sprintf@sp+1)& (0+255),f,b
 13170  01B6'                    l7385:
 13171                           
 13172                           ; BSR set to: 0
 13173  01B6' 0100               	movlb	0	; () banked
 13174  01B8' 0700'              	decf	sprintf@width& (0+255),f,b
 13175  01BA' A0D8               	btfss	status,0,c
 13176  01BC' 0700'              	decf	(sprintf@width+1)& (0+255),f,b
 13177  01BE' 0100               	movlb	0	; () banked
 13178  01C0' 2900'              	incf	sprintf@width& (0+255),w,b
 13179  01C2' E1F0               	bnz	l7381
 13180  01C4' 0100               	movlb	0	; () banked
 13181  01C6' 2900'              	incf	(sprintf@width+1)& (0+255),w,b
 13182  01C8' B4D8               	btfsc	status,2,c
 13183  01CA' D014               	goto	l7393
 13184  01CC' D7EB               	goto	l7381
 13185  01CE'                    l7387:
 13186                           
 13187                           ; BSR set to: 0
 13188                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
 13189  01CE' C039' FFF6         	movff	sprintf@cp,tblptrl
 13190  01D2' C03A' FFF7         	movff	sprintf@cp+1,tblptrh
 13191  01D6'                    	if	0	;tblptru may be non-zero
 13192  01D6'                    	endif
 13193  01D6'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 13194  01D6' 0E00'              	movlw	low (__mediumconst shr (0+16))
 13195  01D8' 6EF8               	movwf	tblptru,c
 13196  01DA'                    	endif
 13197  01DA' C020' FFD9         	movff	sprintf@sp,fsr2l
 13198  01DE' C021' FFDA         	movff	sprintf@sp+1,fsr2h
 13199  01E2' 0008               	tblrd		*
 13200  01E4' CFF5 FFDF          	movff	tablat,indf2
 13201                           
 13202                           ; BSR set to: 0
 13203  01E8' 0100               	movlb	0	; () banked
 13204  01EA' 4B00'              	infsnz	sprintf@cp& (0+255),f,b
 13205  01EC' 2B00'              	incf	(sprintf@cp+1)& (0+255),f,b
 13206                           
 13207                           ; BSR set to: 0
 13208  01EE' 0100               	movlb	0	; () banked
 13209  01F0' 4B00'              	infsnz	sprintf@sp& (0+255),f,b
 13210  01F2' 2B00'              	incf	(sprintf@sp+1)& (0+255),f,b
 13211  01F4'                    l7393:
 13212                           
 13213                           ; BSR set to: 0
 13214  01F4' 0100               	movlb	0	; () banked
 13215  01F6' 0700'              	decf	sprintf@len& (0+255),f,b
 13216  01F8' A0D8               	btfss	status,0,c
 13217  01FA' 0700'              	decf	(sprintf@len+1)& (0+255),f,b
 13218  01FC' 0100               	movlb	0	; () banked
 13219  01FE' 2900'              	incf	sprintf@len& (0+255),w,b
 13220  0200' E1E6               	bnz	l7387
 13221  0202' 0100               	movlb	0	; () banked
 13222  0204' 2900'              	incf	(sprintf@len+1)& (0+255),w,b
 13223  0206' B4D8               	btfsc	status,2,c
 13224  0208' D10F               	goto	l7475
 13225  020A' D7E1               	goto	l7387
 13226  020C'                    l7397:
 13227  020C' C022' FFF6         	movff	sprintf@f,tblptrl
 13228  0210' C023' FFF7         	movff	sprintf@f+1,tblptrh
 13229  0214' 0100               	movlb	0	; () banked
 13230  0216' 4B00'              	infsnz	sprintf@f& (0+255),f,b
 13231  0218' 2B00'              	incf	(sprintf@f+1)& (0+255),f,b
 13232  021A'                    	if	0	;tblptru may be non-zero
 13233  021A'                    	endif
 13234  021A'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 13235  021A' 0E00'              	movlw	low (__mediumconst shr (0+16))
 13236  021C' 6EF8               	movwf	tblptru,c
 13237  021E'                    	endif
 13238  021E' 0008               	tblrd		*
 13239  0220' CFF5 F040'         	movff	tablat,sprintf@c
 13240  0224' 0100               	movlb	0	; () banked
 13241  0226' 5100'              	movf	sprintf@c& (0+255),w,b
 13242                           
 13243                           ; Switch size 1, requested type "space"
 13244                           ; Number of cases is 4, Range of values is 0 to 115
 13245                           ; switch strategies available:
 13246                           ; Name         Instructions Cycles
 13247                           ; simple_byte           13     7 (average)
 13248                           ;	Chosen strategy is simple_byte
 13249  0228' 0A00               	xorlw	0	; case 0
 13250  022A' B4D8               	btfsc	status,2,c
 13251  022C' D10D               	goto	l7477
 13252  022E' 0A64               	xorlw	100	; case 100
 13253  0230' B4D8               	btfsc	status,2,c
 13254  0232' D007               	goto	l7399
 13255  0234' 0A0D               	xorlw	13	; case 105
 13256  0236' B4D8               	btfsc	status,2,c
 13257  0238' D004               	goto	l7399
 13258  023A' 0A1A               	xorlw	26	; case 115
 13259  023C' B4D8               	btfsc	status,2,c
 13260  023E' D760               	goto	l7361
 13261  0240' D0F3               	goto	l7475
 13262  0242'                    l7399:
 13263                           
 13264                           ;doprnt.c: 1253: {
 13265                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13266  0242' C037' FFD9         	movff	sprintf@ap,fsr2l
 13267  0246' C038' FFDA         	movff	sprintf@ap+1,fsr2h
 13268  024A' CFDE F03B'         	movff	postinc2,sprintf@val
 13269  024E' CFDD F03C'         	movff	postdec2,sprintf@val+1
 13270  0252' 0E02               	movlw	2
 13271  0254' 0100               	movlb	0	; () banked
 13272  0256' 2700'              	addwf	sprintf@ap& (0+255),f,b
 13273  0258' 0E00               	movlw	0
 13274  025A' 2300'              	addwfc	(sprintf@ap+1)& (0+255),f,b
 13275                           
 13276                           ; BSR set to: 0
 13277                           ;doprnt.c: 1261: if((int)val < 0) {
 13278  025C' 0100               	movlb	0	; () banked
 13279  025E' AF00'              	btfss	(sprintf@val+1)& (0+255),7,b
 13280  0260' D008               	goto	l7409
 13281                           
 13282                           ; BSR set to: 0
 13283                           ;doprnt.c: 1262: flag |= 0x03;
 13284  0262' 0E03               	movlw	3
 13285  0264' 0100               	movlb	0	; () banked
 13286  0266' 1300'              	iorwf	sprintf@flag& (0+255),f,b
 13287                           
 13288                           ; BSR set to: 0
 13289                           ;doprnt.c: 1263: val = -val;
 13290  0268' 0100               	movlb	0	; () banked
 13291  026A' 6D00'              	negf	sprintf@val& (0+255),b
 13292  026C' 1F00'              	comf	(sprintf@val+1)& (0+255),f,b
 13293  026E' B0D8               	btfsc	status,0,c
 13294  0270' 2B00'              	incf	(sprintf@val+1)& (0+255),f,b
 13295  0272'                    l7409:
 13296                           
 13297                           ; BSR set to: 0
 13298                           ;doprnt.c: 1264: }
 13299                           ;doprnt.c: 1266: }
 13300                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13301  0272' 0E01               	movlw	1
 13302  0274' 0100               	movlb	0	; () banked
 13303  0276' 6F00'              	movwf	sprintf@c& (0+255),b
 13304  0278'                    l7411:
 13305                           
 13306                           ; BSR set to: 0
 13307  0278' 0E05               	movlw	5
 13308  027A' 0100               	movlb	0	; () banked
 13309  027C' 1900'              	xorwf	sprintf@c& (0+255),w,b
 13310  027E' B4D8               	btfsc	status,2,c
 13311  0280' D019               	goto	l7423
 13312                           
 13313                           ; BSR set to: 0
 13314                           ;doprnt.c: 1306: if(val < dpowers[c])
 13315                           
 13316                           ; BSR set to: 0
 13317                           
 13318                           ; BSR set to: 0
 13319  0282' 0100               	movlb	0	; () banked
 13320  0284' 5100'              	movf	sprintf@c& (0+255),w,b
 13321  0286' 0D02               	mullw	2
 13322  0288' 0E00'              	movlw	low _dpowers
 13323  028A' 24F3               	addwf	prodl,w,c
 13324  028C' 6EF6               	movwf	tblptrl,c
 13325  028E' 0E00'              	movlw	high _dpowers
 13326  0290' 20F4               	addwfc	prodh,w,c
 13327  0292' 6EF7               	movwf	tblptrh,c
 13328  0294'                    	if	1	;There are 3 active tblptr bytes
 13329  0294' 6AF8               	clrf	tblptru,c
 13330  0296' 0E00'              	movlw	low (__mediumconst shr (0+16))
 13331  0298' 22F8               	addwfc	tblptru,f,c
 13332  029A'                    	endif
 13333  029A' 0009               	tblrd		*+
 13334  029C' 50F5               	movf	tablat,w,c
 13335  029E' 0100               	movlb	0	; () banked
 13336  02A0' 5D00'              	subwf	sprintf@val& (0+255),w,b
 13337  02A2' 0009               	tblrd		*+
 13338  02A4' 50F5               	movf	tablat,w,c
 13339  02A6' 0100               	movlb	0	; () banked
 13340  02A8' 5900'              	subwfb	(sprintf@val+1)& (0+255),w,b
 13341  02AA' A0D8               	btfss	status,0,c
 13342  02AC' D003               	goto	l7423
 13343                           
 13344                           ; BSR set to: 0
 13345                           
 13346                           ; BSR set to: 0
 13347                           
 13348                           ; BSR set to: 0
 13349                           ;doprnt.c: 1307: break;
 13350  02AE' 0100               	movlb	0	; () banked
 13351  02B0' 2B00'              	incf	sprintf@c& (0+255),f,b
 13352  02B2' D7E2               	goto	l7411
 13353  02B4'                    l7423:
 13354                           
 13355                           ; BSR set to: 0
 13356                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13357  02B4' 0100               	movlb	0	; () banked
 13358  02B6' 5100'              	movf	sprintf@width& (0+255),w,b
 13359  02B8' 0100               	movlb	0	; () banked
 13360  02BA' 1100'              	iorwf	(sprintf@width+1)& (0+255),w,b
 13361  02BC' B4D8               	btfsc	status,2,c
 13362  02BE' D00B               	goto	l7429
 13363                           
 13364                           ; BSR set to: 0
 13365  02C0' C03F' F032'        	movff	sprintf@flag,??_sprintf
 13366  02C4' 0E03               	movlw	3
 13367  02C6' 0100               	movlb	0	; () banked
 13368  02C8' 1700'              	andwf	??_sprintf& (0+255),f,b
 13369  02CA' B4D8               	btfsc	status,2,c
 13370  02CC' D004               	goto	l7429
 13371                           
 13372                           ; BSR set to: 0
 13373                           ;doprnt.c: 1346: width--;
 13374  02CE' 0100               	movlb	0	; () banked
 13375  02D0' 0700'              	decf	sprintf@width& (0+255),f,b
 13376  02D2' A0D8               	btfss	status,0,c
 13377  02D4' 0700'              	decf	(sprintf@width+1)& (0+255),f,b
 13378  02D6'                    l7429:
 13379                           
 13380                           ; BSR set to: 0
 13381                           ;doprnt.c: 1381: if(width > c)
 13382  02D6' 0E80               	movlw	128
 13383  02D8' 0100               	movlb	0	; () banked
 13384  02DA' BF00'              	btfsc	sprintf@c& (0+255),7,b
 13385  02DC' 0E7F               	movlw	127
 13386  02DE' 0100               	movlb	0	; () banked
 13387  02E0' 6F00'              	movwf	??_sprintf& (0+255),b
 13388  02E2' 0100               	movlb	0	; () banked
 13389  02E4' 5100'              	movf	sprintf@width& (0+255),w,b
 13390  02E6' 0100               	movlb	0	; () banked
 13391  02E8' 5D00'              	subwf	sprintf@c& (0+255),w,b
 13392  02EA' 0100               	movlb	0	; () banked
 13393  02EC' 5100'              	movf	(sprintf@width+1)& (0+255),w,b
 13394  02EE' 0A80               	xorlw	128
 13395  02F0' 0100               	movlb	0	; () banked
 13396  02F2' 5900'              	subwfb	??_sprintf& (0+255),w,b
 13397  02F4' B0D8               	btfsc	status,0,c
 13398  02F6' D00B               	goto	l7433
 13399                           
 13400                           ; BSR set to: 0
 13401                           ;doprnt.c: 1382: width -= c;
 13402  02F8' 0100               	movlb	0	; () banked
 13403  02FA' 5100'              	movf	sprintf@c& (0+255),w,b
 13404  02FC' 0100               	movlb	0	; () banked
 13405  02FE' 5F00'              	subwf	sprintf@width& (0+255),f,b
 13406  0300' 0E00               	movlw	0
 13407  0302' 0100               	movlb	0	; () banked
 13408  0304' BF00'              	btfsc	sprintf@c& (0+255),7,b
 13409  0306' 0EFF               	movlw	255
 13410  0308' 0100               	movlb	0	; () banked
 13411  030A' 5B00'              	subwfb	(sprintf@width+1)& (0+255),f,b
 13412  030C' D005               	goto	l7435
 13413  030E'                    l7433:
 13414                           
 13415                           ; BSR set to: 0
 13416                           ;doprnt.c: 1383: else
 13417                           ;doprnt.c: 1384: width = 0;
 13418  030E' 0E00               	movlw	0
 13419  0310' 0100               	movlb	0	; () banked
 13420  0312' 6F00'              	movwf	(sprintf@width+1)& (0+255),b
 13421  0314' 0E00               	movlw	0
 13422  0316' 6F00'              	movwf	sprintf@width& (0+255),b
 13423  0318'                    l7435:
 13424                           
 13425                           ; BSR set to: 0
 13426                           ;doprnt.c: 1387: if(flag & 0x04) {
 13427  0318' 0100               	movlb	0	; () banked
 13428  031A' A500'              	btfss	sprintf@flag& (0+255),2,b
 13429  031C' D024               	goto	l7451
 13430                           
 13431                           ; BSR set to: 0
 13432                           ;doprnt.c: 1392: if(flag & 0x03)
 13433  031E' C03F' F032'        	movff	sprintf@flag,??_sprintf
 13434  0322' 0E03               	movlw	3
 13435  0324' 0100               	movlb	0	; () banked
 13436  0326' 1700'              	andwf	??_sprintf& (0+255),f,b
 13437  0328' B4D8               	btfsc	status,2,c
 13438  032A' D009               	goto	l7443
 13439                           
 13440                           ; BSR set to: 0
 13441                           ;doprnt.c: 1393: ((*sp++ = ('-')));
 13442  032C' C020' FFD9         	movff	sprintf@sp,fsr2l
 13443  0330' C021' FFDA         	movff	sprintf@sp+1,fsr2h
 13444  0334' 0E2D               	movlw	45
 13445  0336' 6EDF               	movwf	indf2,c
 13446                           
 13447                           ; BSR set to: 0
 13448  0338' 0100               	movlb	0	; () banked
 13449  033A' 4B00'              	infsnz	sprintf@sp& (0+255),f,b
 13450  033C' 2B00'              	incf	(sprintf@sp+1)& (0+255),f,b
 13451  033E'                    l7443:
 13452                           
 13453                           ; BSR set to: 0
 13454                           ;doprnt.c: 1415: if(width)
 13455  033E' 0100               	movlb	0	; () banked
 13456  0340' 5100'              	movf	sprintf@width& (0+255),w,b
 13457  0342' 0100               	movlb	0	; () banked
 13458  0344' 1100'              	iorwf	(sprintf@width+1)& (0+255),w,b
 13459  0346' B4D8               	btfsc	status,2,c
 13460  0348' D037               	goto	l7465
 13461                           
 13462                           ; BSR set to: 0
 13463                           ;doprnt.c: 1417: ((*sp++ = ('0')));
 13464                           
 13465                           ; BSR set to: 0
 13466                           
 13467                           ;doprnt.c: 1416: do
 13468  034A' C020' FFD9         	movff	sprintf@sp,fsr2l
 13469  034E' C021' FFDA         	movff	sprintf@sp+1,fsr2h
 13470  0352' 0E30               	movlw	48
 13471  0354' 6EDF               	movwf	indf2,c
 13472                           
 13473                           ; BSR set to: 0
 13474  0356' 0100               	movlb	0	; () banked
 13475  0358' 4B00'              	infsnz	sprintf@sp& (0+255),f,b
 13476  035A' 2B00'              	incf	(sprintf@sp+1)& (0+255),f,b
 13477                           
 13478                           ; BSR set to: 0
 13479                           ;doprnt.c: 1418: while(--width);
 13480  035C' 0100               	movlb	0	; () banked
 13481  035E' 0700'              	decf	sprintf@width& (0+255),f,b
 13482  0360' A0D8               	btfss	status,0,c
 13483  0362' 0700'              	decf	(sprintf@width+1)& (0+255),f,b
 13484  0364' D7EC               	goto	l7443
 13485  0366'                    l7451:
 13486                           
 13487                           ; BSR set to: 0
 13488                           ;doprnt.c: 1422: {
 13489                           ;doprnt.c: 1424: if(width
 13490                           ;doprnt.c: 1428: )
 13491  0366' 0100               	movlb	0	; () banked
 13492  0368' 5100'              	movf	sprintf@width& (0+255),w,b
 13493  036A' 0100               	movlb	0	; () banked
 13494  036C' 1100'              	iorwf	(sprintf@width+1)& (0+255),w,b
 13495  036E' B4D8               	btfsc	status,2,c
 13496  0370' D013               	goto	l7459
 13497  0372'                    l7453:
 13498                           
 13499                           ; BSR set to: 0
 13500                           ;doprnt.c: 1430: ((*sp++ = (' ')));
 13501  0372' C020' FFD9         	movff	sprintf@sp,fsr2l
 13502  0376' C021' FFDA         	movff	sprintf@sp+1,fsr2h
 13503  037A' 0E20               	movlw	32
 13504  037C' 6EDF               	movwf	indf2,c
 13505                           
 13506                           ; BSR set to: 0
 13507  037E' 0100               	movlb	0	; () banked
 13508  0380' 4B00'              	infsnz	sprintf@sp& (0+255),f,b
 13509  0382' 2B00'              	incf	(sprintf@sp+1)& (0+255),f,b
 13510                           
 13511                           ; BSR set to: 0
 13512                           ;doprnt.c: 1431: while(--width);
 13513  0384' 0100               	movlb	0	; () banked
 13514  0386' 0700'              	decf	sprintf@width& (0+255),f,b
 13515  0388' A0D8               	btfss	status,0,c
 13516  038A' 0700'              	decf	(sprintf@width+1)& (0+255),f,b
 13517  038C' 0100               	movlb	0	; () banked
 13518  038E' 5100'              	movf	sprintf@width& (0+255),w,b
 13519  0390' 0100               	movlb	0	; () banked
 13520  0392' 1100'              	iorwf	(sprintf@width+1)& (0+255),w,b
 13521  0394' A4D8               	btfss	status,2,c
 13522  0396' D7ED               	goto	l7453
 13523  0398'                    l7459:
 13524                           
 13525                           ; BSR set to: 0
 13526                           ;doprnt.c: 1438: if(flag & 0x03)
 13527  0398' C03F' F032'        	movff	sprintf@flag,??_sprintf
 13528  039C' 0E03               	movlw	3
 13529  039E' 0100               	movlb	0	; () banked
 13530  03A0' 1700'              	andwf	??_sprintf& (0+255),f,b
 13531  03A2' B4D8               	btfsc	status,2,c
 13532  03A4' D009               	goto	l7465
 13533                           
 13534                           ; BSR set to: 0
 13535                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 13536  03A6' C020' FFD9         	movff	sprintf@sp,fsr2l
 13537  03AA' C021' FFDA         	movff	sprintf@sp+1,fsr2h
 13538  03AE' 0E2D               	movlw	45
 13539  03B0' 6EDF               	movwf	indf2,c
 13540                           
 13541                           ; BSR set to: 0
 13542  03B2' 0100               	movlb	0	; () banked
 13543  03B4' 4B00'              	infsnz	sprintf@sp& (0+255),f,b
 13544  03B6' 2B00'              	incf	(sprintf@sp+1)& (0+255),f,b
 13545  03B8'                    l7465:
 13546                           
 13547                           ; BSR set to: 0
 13548                           ;doprnt.c: 1469: }
 13549                           ;doprnt.c: 1472: prec = c;
 13550  03B8' C040' F036'        	movff	sprintf@c,sprintf@prec
 13551                           
 13552                           ;doprnt.c: 1474: while(prec--) {
 13553  03BC' D02F               	goto	l7473
 13554  03BE'                    l7467:
 13555                           
 13556                           ; BSR set to: 0
 13557                           ;doprnt.c: 1478: {
 13558                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13559  03BE' 0100               	movlb	0	; () banked
 13560  03C0' 5100'              	movf	sprintf@prec& (0+255),w,b
 13561  03C2' 0D02               	mullw	2
 13562  03C4' 0E00'              	movlw	low _dpowers
 13563  03C6' 24F3               	addwf	prodl,w,c
 13564  03C8' 6EF6               	movwf	tblptrl,c
 13565  03CA' 0E00'              	movlw	high _dpowers
 13566  03CC' 20F4               	addwfc	prodh,w,c
 13567  03CE' 6EF7               	movwf	tblptrh,c
 13568  03D0'                    	if	1	;There are 3 active tblptr bytes
 13569  03D0' 6AF8               	clrf	tblptru,c
 13570  03D2' 0E00'              	movlw	low (__mediumconst shr (0+16))
 13571  03D4' 22F8               	addwfc	tblptru,f,c
 13572  03D6'                    	endif
 13573  03D6' 0009               	tblrd		*+
 13574  03D8' CFF5 F01B'         	movff	tablat,___lwdiv@divisor
 13575  03DC' 000A               	tblrd		*-
 13576  03DE' CFF5 F01C'         	movff	tablat,___lwdiv@divisor+1
 13577  03E2' C03B' F019'        	movff	sprintf@val,___lwdiv@dividend
 13578  03E6' C03C' F01A'        	movff	sprintf@val+1,___lwdiv@dividend+1
 13579  03EA' EC00' F000'        	call	___lwdiv	;wreg free
 13580  03EE' C019' F01E'        	movff	?___lwdiv,___lwmod@dividend
 13581  03F2' C01A' F01F'        	movff	?___lwdiv+1,___lwmod@dividend+1
 13582  03F6' 0E00               	movlw	0
 13583  03F8' 6E21'              	movwf	___lwmod@divisor+1,c
 13584  03FA' 0E0A               	movlw	10
 13585  03FC' 6E20'              	movwf	___lwmod@divisor,c
 13586  03FE' EC00' F000'        	call	___lwmod	;wreg free
 13587  0402' 501E'              	movf	?___lwmod,w,c
 13588  0404' 0F30               	addlw	48
 13589  0406' 0100               	movlb	0	; () banked
 13590  0408' 6F00'              	movwf	sprintf@c& (0+255),b
 13591                           
 13592                           ; BSR set to: 0
 13593                           ;doprnt.c: 1523: }
 13594                           ;doprnt.c: 1524: ((*sp++ = (c)));
 13595  040A' C020' FFD9         	movff	sprintf@sp,fsr2l
 13596  040E' C021' FFDA         	movff	sprintf@sp+1,fsr2h
 13597  0412' C040' FFDF         	movff	sprintf@c,indf2
 13598                           
 13599                           ; BSR set to: 0
 13600  0416' 0100               	movlb	0	; () banked
 13601  0418' 4B00'              	infsnz	sprintf@sp& (0+255),f,b
 13602  041A' 2B00'              	incf	(sprintf@sp+1)& (0+255),f,b
 13603  041C'                    l7473:
 13604                           
 13605                           ; BSR set to: 0
 13606  041C' 0100               	movlb	0	; () banked
 13607  041E' 0700'              	decf	sprintf@prec& (0+255),f,b
 13608  0420' 0100               	movlb	0	; () banked
 13609  0422' 2900'              	incf	sprintf@prec& (0+255),w,b
 13610  0424' A4D8               	btfss	status,2,c
 13611  0426' D7CB               	goto	l7467
 13612  0428'                    l7475:
 13613                           
 13614                           ; BSR set to: 0
 13615  0428' C022' FFF6         	movff	sprintf@f,tblptrl
 13616  042C' C023' FFF7         	movff	sprintf@f+1,tblptrh
 13617  0430' 0100               	movlb	0	; () banked
 13618  0432' 4B00'              	infsnz	sprintf@f& (0+255),f,b
 13619  0434' 2B00'              	incf	(sprintf@f+1)& (0+255),f,b
 13620  0436'                    	if	0	;tblptru may be non-zero
 13621  0436'                    	endif
 13622  0436'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 13623  0436' 0E00'              	movlw	low (__mediumconst shr (0+16))
 13624  0438' 6EF8               	movwf	tblptru,c
 13625  043A'                    	endif
 13626  043A' 0008               	tblrd		*
 13627  043C' CFF5 F040'         	movff	tablat,sprintf@c
 13628  0440' 0100               	movlb	0	; () banked
 13629  0442' 5100'              	movf	sprintf@c& (0+255),w,b
 13630  0444' A4D8               	btfss	status,2,c
 13631  0446' D5E3               	goto	l7335
 13632  0448'                    l7477:
 13633                           
 13634                           ;doprnt.c: 1538: *sp = 0;
 13635  0448' C020' FFD9         	movff	sprintf@sp,fsr2l
 13636  044C' C021' FFDA         	movff	sprintf@sp+1,fsr2h
 13637  0450' 0E00               	movlw	0
 13638  0452' 6EDF               	movwf	indf2,c
 13639  0454' 0012               	return	
 13640  0456'                    __end_of_sprintf:
 13641                           	opt stack 0
 13642                           tblptru	equ	0xFF8
 13643                           tblptrh	equ	0xFF7
 13644                           tblptrl	equ	0xFF6
 13645                           tablat	equ	0xFF5
 13646                           prodh	equ	0xFF4
 13647                           prodl	equ	0xFF3
 13648                           intcon	equ	0xFF2
 13649                           indf0	equ	0xFEF
 13650                           postinc0	equ	0xFEE
 13651                           fsr0h	equ	0xFEA
 13652                           fsr0l	equ	0xFE9
 13653                           wreg	equ	0xFE8
 13654                           postinc1	equ	0xFE6
 13655                           postdec1	equ	0xFE5
 13656                           fsr1h	equ	0xFE2
 13657                           fsr1l	equ	0xFE1
 13658                           indf2	equ	0xFDF
 13659                           postinc2	equ	0xFDE
 13660                           postdec2	equ	0xFDD
 13661                           plusw2	equ	0xFDB
 13662                           fsr2h	equ	0xFDA
 13663                           fsr2l	equ	0xFD9
 13664                           status	equ	0xFD8
 13665                           
 13666 ;; *************** function _isdigit *****************
 13667 ;; Defined at:
 13668 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
 13669 ;; Parameters:    Size  Location     Type
 13670 ;;  c               1    wreg     unsigned char 
 13671 ;; Auto vars:     Size  Location     Type
 13672 ;;  c               1   32[COMRAM] unsigned char 
 13673 ;; Return value:  Size  Location     Type
 13674 ;;		None               void
 13675 ;; Registers used:
 13676 ;;		wreg, status,2, status,0
 13677 ;; Tracked objects:
 13678 ;;		On entry : 0/0
 13679 ;;		On exit  : 0/0
 13680 ;;		Unchanged: 0/0
 13681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13683 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13684 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13685 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13686 ;;Total ram usage:        3 bytes
 13687 ;; Hardware stack levels used:    1
 13688 ;; Hardware stack levels required when called:    3
 13689 ;; This function calls:
 13690 ;;		Nothing
 13691 ;; This function is called by:
 13692 ;;		_sprintf
 13693 ;; This function uses a non-reentrant model
 13694 ;;
 13695                           
 13696                           	psect	text37
 13697  0000'                    __ptext37:
 13698                           	opt stack 0
 13699  0000'                    _isdigit:
 13700                           	opt stack 24
 13701                           
 13702                           ;incstack = 0
 13703                           ;isdigit@c stored from wreg
 13704  0000' 6E20'              	movwf	isdigit@c,c
 13705  0002' 0E00               	movlw	0
 13706  0004' 6E1F'              	movwf	_isdigit$2849,c
 13707  0006' 0E3A               	movlw	58
 13708  0008' 6020'              	cpfslt	isdigit@c,c
 13709  000A' D005               	goto	l7167
 13710  000C' 0E2F               	movlw	47
 13711  000E' 6420'              	cpfsgt	isdigit@c,c
 13712  0010' D002               	goto	l7167
 13713  0012' 0E01               	movlw	1
 13714  0014' 6E1F'              	movwf	_isdigit$2849,c
 13715  0016'                    l7167:
 13716  0016' C01F' F01E'        	movff	_isdigit$2849,??_isdigit
 13717  001A' 301E'              	rrcf	??_isdigit,w,c
 13718  001C' 0012               	return	
 13719  001E'                    __end_of_isdigit:
 13720                           	opt stack 0
 13721                           tblptru	equ	0xFF8
 13722                           tblptrh	equ	0xFF7
 13723                           tblptrl	equ	0xFF6
 13724                           tablat	equ	0xFF5
 13725                           prodh	equ	0xFF4
 13726                           prodl	equ	0xFF3
 13727                           intcon	equ	0xFF2
 13728                           indf0	equ	0xFEF
 13729                           postinc0	equ	0xFEE
 13730                           fsr0h	equ	0xFEA
 13731                           fsr0l	equ	0xFE9
 13732                           wreg	equ	0xFE8
 13733                           postinc1	equ	0xFE6
 13734                           postdec1	equ	0xFE5
 13735                           fsr1h	equ	0xFE2
 13736                           fsr1l	equ	0xFE1
 13737                           indf2	equ	0xFDF
 13738                           postinc2	equ	0xFDE
 13739                           postdec2	equ	0xFDD
 13740                           plusw2	equ	0xFDB
 13741                           fsr2h	equ	0xFDA
 13742                           fsr2l	equ	0xFD9
 13743                           status	equ	0xFD8
 13744                           
 13745 ;; *************** function ___wmul *****************
 13746 ;; Defined at:
 13747 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
 13748 ;; Parameters:    Size  Location     Type
 13749 ;;  multiplier      2   19[BANK0 ] unsigned int 
 13750 ;;  multiplicand    2   21[BANK0 ] unsigned int 
 13751 ;; Auto vars:     Size  Location     Type
 13752 ;;  product         2   23[BANK0 ] unsigned int 
 13753 ;; Return value:  Size  Location     Type
 13754 ;;                  2   19[BANK0 ] unsigned int 
 13755 ;; Registers used:
 13756 ;;		wreg, status,2, status,0, prodl, prodh
 13757 ;; Tracked objects:
 13758 ;;		On entry : 0/0
 13759 ;;		On exit  : 0/0
 13760 ;;		Unchanged: 0/0
 13761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13762 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13763 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13765 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13766 ;;Total ram usage:        6 bytes
 13767 ;; Hardware stack levels used:    1
 13768 ;; Hardware stack levels required when called:    3
 13769 ;; This function calls:
 13770 ;;		Nothing
 13771 ;; This function is called by:
 13772 ;;		_my_atoi
 13773 ;;		_Auto_cut
 13774 ;;		_ctmu_set_ratio
 13775 ;;		_sprintf
 13776 ;; This function uses a non-reentrant model
 13777 ;;
 13778                           
 13779                           	psect	text38
 13780  0000'                    __ptext38:
 13781                           	opt stack 0
 13782  0000'                    ___wmul:
 13783                           	opt stack 24
 13784                           
 13785                           ;incstack = 0
 13786  0000' 0100               	movlb	0	; () banked
 13787  0002' 5100'              	movf	___wmul@multiplier& (0+255),w,b
 13788  0004' 0100               	movlb	0	; () banked
 13789  0006' 0300'              	mulwf	___wmul@multiplicand& (0+255),b
 13790  0008' CFF3 F017'         	movff	prodl,___wmul@product
 13791  000C' CFF4 F018'         	movff	prodh,___wmul@product+1
 13792  0010' 0100               	movlb	0	; () banked
 13793  0012' 5100'              	movf	___wmul@multiplier& (0+255),w,b
 13794  0014' 0100               	movlb	0	; () banked
 13795  0016' 0300'              	mulwf	(___wmul@multiplicand+1)& (0+255),b
 13796  0018' 50F3               	movf	prodl,w,c
 13797  001A' 0100               	movlb	0	; () banked
 13798  001C' 2700'              	addwf	(___wmul@product+1)& (0+255),f,b
 13799  001E' 0100               	movlb	0	; () banked
 13800  0020' 5100'              	movf	(___wmul@multiplier+1)& (0+255),w,b
 13801  0022' 0100               	movlb	0	; () banked
 13802  0024' 0300'              	mulwf	___wmul@multiplicand& (0+255),b
 13803  0026' 50F3               	movf	prodl,w,c
 13804  0028' 0100               	movlb	0	; () banked
 13805  002A' 2700'              	addwf	(___wmul@product+1)& (0+255),f,b
 13806                           
 13807                           ; BSR set to: 0
 13808  002C' C017' F013'        	movff	___wmul@product,?___wmul
 13809  0030' C018' F014'        	movff	___wmul@product+1,?___wmul+1
 13810  0034' 0012               	return	
 13811  0036'                    __end_of___wmul:
 13812                           	opt stack 0
 13813                           tblptru	equ	0xFF8
 13814                           tblptrh	equ	0xFF7
 13815                           tblptrl	equ	0xFF6
 13816                           tablat	equ	0xFF5
 13817                           prodh	equ	0xFF4
 13818                           prodl	equ	0xFF3
 13819                           intcon	equ	0xFF2
 13820                           indf0	equ	0xFEF
 13821                           postinc0	equ	0xFEE
 13822                           fsr0h	equ	0xFEA
 13823                           fsr0l	equ	0xFE9
 13824                           wreg	equ	0xFE8
 13825                           postinc1	equ	0xFE6
 13826                           postdec1	equ	0xFE5
 13827                           fsr1h	equ	0xFE2
 13828                           fsr1l	equ	0xFE1
 13829                           indf2	equ	0xFDF
 13830                           postinc2	equ	0xFDE
 13831                           postdec2	equ	0xFDD
 13832                           plusw2	equ	0xFDB
 13833                           fsr2h	equ	0xFDA
 13834                           fsr2l	equ	0xFD9
 13835                           status	equ	0xFD8
 13836                           
 13837 ;; *************** function _RTCC_from_caltime *****************
 13838 ;; Defined at:
 13839 ;;		line 236 in file "../My_header\My_RTCC.h"
 13840 ;; Parameters:    Size  Location     Type
 13841 ;;  ct              2   49[BANK0 ] PTR struct .
 13842 ;;		 -> caltime_now(7), 
 13843 ;;  ep              2   51[BANK0 ] PTR unsigned long 
 13844 ;;		 -> epoch_now(4), 
 13845 ;; Auto vars:     Size  Location     Type
 13846 ;;		None
 13847 ;; Return value:  Size  Location     Type
 13848 ;;		None               void
 13849 ;; Registers used:
 13850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13851 ;; Tracked objects:
 13852 ;;		On entry : 0/0
 13853 ;;		On exit  : 0/0
 13854 ;;		Unchanged: 0/0
 13855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13856 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13859 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13860 ;;Total ram usage:        4 bytes
 13861 ;; Hardware stack levels used:    1
 13862 ;; Hardware stack levels required when called:    6
 13863 ;; This function calls:
 13864 ;;		_caltime_to_RTCC
 13865 ;;		_caltime_to_epoch
 13866 ;;		_epoch_to_caltime
 13867 ;; This function is called by:
 13868 ;;		_command_at_hand
 13869 ;; This function uses a non-reentrant model
 13870 ;;
 13871                           
 13872                           	psect	text39
 13873  0000'                    __ptext39:
 13874                           	opt stack 0
 13875  0000'                    _RTCC_from_caltime:
 13876                           	opt stack 20
 13877                           
 13878                           ;My_header\My_RTCC.h: 237: caltime_to_epoch(ct, ep);
 13879                           
 13880                           ; BSR set to: 0
 13881                           ;incstack = 0
 13882  0000' C031' F019'        	movff	RTCC_from_caltime@ct,caltime_to_epoch@ct
 13883  0004' C032' F01A'        	movff	RTCC_from_caltime@ct+1,caltime_to_epoch@ct+1
 13884  0008' C033' F01B'        	movff	RTCC_from_caltime@ep,caltime_to_epoch@ep
 13885  000C' C034' F01C'        	movff	RTCC_from_caltime@ep+1,caltime_to_epoch@ep+1
 13886  0010' EC00' F000'        	call	_caltime_to_epoch	;wreg free
 13887                           
 13888                           ;My_header\My_RTCC.h: 238: epoch_to_caltime(ct, ep);
 13889  0014' C031' F021'        	movff	RTCC_from_caltime@ct,epoch_to_caltime@ct
 13890  0018' C032' F022'        	movff	RTCC_from_caltime@ct+1,epoch_to_caltime@ct+1
 13891  001C' C033' F023'        	movff	RTCC_from_caltime@ep,epoch_to_caltime@ep
 13892  0020' C034' F024'        	movff	RTCC_from_caltime@ep+1,epoch_to_caltime@ep+1
 13893  0024' EC00' F000'        	call	_epoch_to_caltime	;wreg free
 13894                           
 13895                           ;My_header\My_RTCC.h: 239: caltime_to_RTCC(ct);
 13896  0028' C031' F005'        	movff	RTCC_from_caltime@ct,caltime_to_RTCC@ct
 13897  002C' C032' F006'        	movff	RTCC_from_caltime@ct+1,caltime_to_RTCC@ct+1
 13898  0030' EC00' F000'        	call	_caltime_to_RTCC	;wreg free
 13899  0034' 0012               	return		;funcret
 13900  0036'                    __end_of_RTCC_from_caltime:
 13901                           	opt stack 0
 13902                           tblptru	equ	0xFF8
 13903                           tblptrh	equ	0xFF7
 13904                           tblptrl	equ	0xFF6
 13905                           tablat	equ	0xFF5
 13906                           prodh	equ	0xFF4
 13907                           prodl	equ	0xFF3
 13908                           intcon	equ	0xFF2
 13909                           indf0	equ	0xFEF
 13910                           postinc0	equ	0xFEE
 13911                           fsr0h	equ	0xFEA
 13912                           fsr0l	equ	0xFE9
 13913                           wreg	equ	0xFE8
 13914                           postinc1	equ	0xFE6
 13915                           postdec1	equ	0xFE5
 13916                           fsr1h	equ	0xFE2
 13917                           fsr1l	equ	0xFE1
 13918                           indf2	equ	0xFDF
 13919                           postinc2	equ	0xFDE
 13920                           postdec2	equ	0xFDD
 13921                           plusw2	equ	0xFDB
 13922                           fsr2h	equ	0xFDA
 13923                           fsr2l	equ	0xFD9
 13924                           status	equ	0xFD8
 13925                           
 13926 ;; *************** function _epoch_to_caltime *****************
 13927 ;; Defined at:
 13928 ;;		line 157 in file "../My_header\My_RTCC.h"
 13929 ;; Parameters:    Size  Location     Type
 13930 ;;  ct              2   33[BANK0 ] PTR struct .
 13931 ;;		 -> caltime_now(7), 
 13932 ;;  ep              2   35[BANK0 ] PTR unsigned long 
 13933 ;;		 -> epoch_now(4), 
 13934 ;; Auto vars:     Size  Location     Type
 13935 ;;  num             4   45[BANK0 ] unsigned long 
 13936 ;;  day             2   41[BANK0 ] unsigned int 
 13937 ;;  day_since_ep    2   39[BANK0 ] unsigned int 
 13938 ;;  month           1   44[BANK0 ] unsigned char 
 13939 ;;  year            1   43[BANK0 ] unsigned char 
 13940 ;; Return value:  Size  Location     Type
 13941 ;;		None               void
 13942 ;; Registers used:
 13943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13944 ;; Tracked objects:
 13945 ;;		On entry : 0/0
 13946 ;;		On exit  : 0/0
 13947 ;;		Unchanged: 0/0
 13948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13949 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13950 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13951 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13952 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13953 ;;Total ram usage:       16 bytes
 13954 ;; Hardware stack levels used:    1
 13955 ;; Hardware stack levels required when called:    5
 13956 ;; This function calls:
 13957 ;;		_get_quot_rem
 13958 ;;		_month_length
 13959 ;; This function is called by:
 13960 ;;		_RTCC_from_caltime
 13961 ;;		_RTCC_from_epoch
 13962 ;; This function uses a non-reentrant model
 13963 ;;
 13964                           
 13965                           	psect	text40
 13966  0000'                    __ptext40:
 13967                           	opt stack 0
 13968  0000'                    _epoch_to_caltime:
 13969                           	opt stack 21
 13970                           
 13971                           ;My_header\My_RTCC.h: 160: static uint16_t day_cache = 0;
 13972                           ;My_header\My_RTCC.h: 161: static uint8_t month_cache = 1;
 13973                           ;My_header\My_RTCC.h: 162: static uint8_t year_cache = 0;
 13974                           ;My_header\My_RTCC.h: 163: uint16_t day_since_epoch;
 13975                           ;My_header\My_RTCC.h: 164: uint16_t day;
 13976                           ;My_header\My_RTCC.h: 165: uint8_t year = 0;
 13977                           
 13978                           ;incstack = 0
 13979  0000' 0E00               	movlw	0
 13980  0002' 0100               	movlb	0	; () banked
 13981  0004' 6F00'              	movwf	epoch_to_caltime@year& (0+255),b
 13982                           
 13983                           ;My_header\My_RTCC.h: 166: uint8_t month = 1;
 13984  0006' 0E01               	movlw	1
 13985  0008' 0100               	movlb	0	; () banked
 13986  000A' 6F00'              	movwf	epoch_to_caltime@month& (0+255),b
 13987                           
 13988                           ; BSR set to: 0
 13989                           ;My_header\My_RTCC.h: 167: epoch_t num;
 13990                           ;My_header\My_RTCC.h: 169: num = *ep;
 13991  000C' C023' FFD9         	movff	epoch_to_caltime@ep,fsr2l
 13992  0010' C024' FFDA         	movff	epoch_to_caltime@ep+1,fsr2h
 13993  0014' CFDE F02D'         	movff	postinc2,epoch_to_caltime@num
 13994  0018' CFDE F02E'         	movff	postinc2,epoch_to_caltime@num+1
 13995  001C' CFDE F02F'         	movff	postinc2,epoch_to_caltime@num+2
 13996  0020' CFDE F030'         	movff	postinc2,epoch_to_caltime@num+3
 13997                           
 13998                           ; BSR set to: 0
 13999                           ;My_header\My_RTCC.h: 170: ct->ss = get_quot_rem(&num, 60);
 14000  0024' 0E00'              	movlw	low epoch_to_caltime@num
 14001  0026' 0100               	movlb	0	; () banked
 14002  0028' 6F00'              	movwf	get_quot_rem@quot& (0+255),b
 14003  002A' 0E00'              	movlw	high epoch_to_caltime@num
 14004  002C' 0100               	movlb	0	; () banked
 14005  002E' 6F00'              	movwf	(get_quot_rem@quot+1)& (0+255),b
 14006  0030' 0E3C               	movlw	60
 14007  0032' 0100               	movlb	0	; () banked
 14008  0034' 6F00'              	movwf	get_quot_rem@div& (0+255),b
 14009  0036' EC00' F000'        	call	_get_quot_rem	;wreg free
 14010  003A' 0100               	movlb	0	; () banked
 14011  003C' 5100'              	movf	?_get_quot_rem& (0+255),w,b
 14012  003E' C021' FFD9         	movff	epoch_to_caltime@ct,fsr2l
 14013  0042' C022' FFDA         	movff	epoch_to_caltime@ct+1,fsr2h
 14014  0046' 6EDF               	movwf	indf2,c
 14015                           
 14016                           ; BSR set to: 0
 14017                           ;My_header\My_RTCC.h: 171: ct->mm = get_quot_rem(&num, 60);
 14018  0048' 0E00'              	movlw	low epoch_to_caltime@num
 14019  004A' 0100               	movlb	0	; () banked
 14020  004C' 6F00'              	movwf	get_quot_rem@quot& (0+255),b
 14021  004E' 0E00'              	movlw	high epoch_to_caltime@num
 14022  0050' 0100               	movlb	0	; () banked
 14023  0052' 6F00'              	movwf	(get_quot_rem@quot+1)& (0+255),b
 14024  0054' 0E3C               	movlw	60
 14025  0056' 0100               	movlb	0	; () banked
 14026  0058' 6F00'              	movwf	get_quot_rem@div& (0+255),b
 14027  005A' EC00' F000'        	call	_get_quot_rem	;wreg free
 14028  005E' 0100               	movlb	0	; () banked
 14029  0060' EE20 F001          	lfsr	2,1
 14030  0064' 5100'              	movf	epoch_to_caltime@ct& (0+255),w,b
 14031  0066' 26D9               	addwf	fsr2l,f,c
 14032  0068' 5100'              	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
 14033  006A' 22DA               	addwfc	fsr2h,f,c
 14034  006C' 0100               	movlb	0	; () banked
 14035  006E' C019' FFDF         	movff	?_get_quot_rem,indf2
 14036                           
 14037                           ; BSR set to: 0
 14038                           ;My_header\My_RTCC.h: 172: ct->hh = get_quot_rem(&num, 24);
 14039  0072' 0E00'              	movlw	low epoch_to_caltime@num
 14040  0074' 0100               	movlb	0	; () banked
 14041  0076' 6F00'              	movwf	get_quot_rem@quot& (0+255),b
 14042  0078' 0E00'              	movlw	high epoch_to_caltime@num
 14043  007A' 0100               	movlb	0	; () banked
 14044  007C' 6F00'              	movwf	(get_quot_rem@quot+1)& (0+255),b
 14045  007E' 0E18               	movlw	24
 14046  0080' 0100               	movlb	0	; () banked
 14047  0082' 6F00'              	movwf	get_quot_rem@div& (0+255),b
 14048  0084' EC00' F000'        	call	_get_quot_rem	;wreg free
 14049  0088' 0100               	movlb	0	; () banked
 14050  008A' EE20 F002          	lfsr	2,2
 14051  008E' 5100'              	movf	epoch_to_caltime@ct& (0+255),w,b
 14052  0090' 26D9               	addwf	fsr2l,f,c
 14053  0092' 5100'              	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
 14054  0094' 22DA               	addwfc	fsr2h,f,c
 14055  0096' 0100               	movlb	0	; () banked
 14056  0098' C019' FFDF         	movff	?_get_quot_rem,indf2
 14057                           
 14058                           ; BSR set to: 0
 14059                           ;My_header\My_RTCC.h: 173: day = num;
 14060  009C' C02D' F029'        	movff	epoch_to_caltime@num,epoch_to_caltime@day
 14061  00A0' C02E' F02A'        	movff	epoch_to_caltime@num+1,epoch_to_caltime@day+1
 14062                           
 14063                           ; BSR set to: 0
 14064                           ;My_header\My_RTCC.h: 174: day_since_epoch = day;
 14065  00A4' C029' F027'        	movff	epoch_to_caltime@day,epoch_to_caltime@day_since_epoch
 14066  00A8' C02A' F028'        	movff	epoch_to_caltime@day+1,epoch_to_caltime@day_since_epoch+1
 14067                           
 14068                           ; BSR set to: 0
 14069                           ;My_header\My_RTCC.h: 176: num += 6;
 14070  00AC' 0E06               	movlw	6
 14071  00AE' 0100               	movlb	0	; () banked
 14072  00B0' 2700'              	addwf	epoch_to_caltime@num& (0+255),f,b
 14073  00B2' 0E00               	movlw	0
 14074  00B4' 2300'              	addwfc	(epoch_to_caltime@num+1)& (0+255),f,b
 14075  00B6' 2300'              	addwfc	(epoch_to_caltime@num+2)& (0+255),f,b
 14076  00B8' 2300'              	addwfc	(epoch_to_caltime@num+3)& (0+255),f,b
 14077                           
 14078                           ; BSR set to: 0
 14079                           ;My_header\My_RTCC.h: 177: ct->EE = get_quot_rem(&num, 7);
 14080  00BA' 0E00'              	movlw	low epoch_to_caltime@num
 14081  00BC' 0100               	movlb	0	; () banked
 14082  00BE' 6F00'              	movwf	get_quot_rem@quot& (0+255),b
 14083  00C0' 0E00'              	movlw	high epoch_to_caltime@num
 14084  00C2' 0100               	movlb	0	; () banked
 14085  00C4' 6F00'              	movwf	(get_quot_rem@quot+1)& (0+255),b
 14086  00C6' 0E07               	movlw	7
 14087  00C8' 0100               	movlb	0	; () banked
 14088  00CA' 6F00'              	movwf	get_quot_rem@div& (0+255),b
 14089  00CC' EC00' F000'        	call	_get_quot_rem	;wreg free
 14090  00D0' 0100               	movlb	0	; () banked
 14091  00D2' EE20 F003          	lfsr	2,3
 14092  00D6' 5100'              	movf	epoch_to_caltime@ct& (0+255),w,b
 14093  00D8' 26D9               	addwf	fsr2l,f,c
 14094  00DA' 5100'              	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
 14095  00DC' 22DA               	addwfc	fsr2h,f,c
 14096  00DE' 0100               	movlb	0	; () banked
 14097  00E0' C019' FFDF         	movff	?_get_quot_rem,indf2
 14098                           
 14099                           ;My_header\My_RTCC.h: 186: while (day >= month_length(year, month)) {
 14100  00E4' D03F               	goto	l7317
 14101  00E6'                    l430:
 14102                           
 14103                           ; BSR set to: 0
 14104                           ;My_header\My_RTCC.h: 187: LATB2 = 1;
 14105  00E6' 848A               	bsf	3978,2,c	;volatile
 14106                           
 14107                           ; BSR set to: 0
 14108                           ;My_header\My_RTCC.h: 188: day = day - month_length(year, month);
 14109  00E8' C02C' F002'        	movff	epoch_to_caltime@month,month_length@month
 14110  00EC' 0100               	movlb	0	; () banked
 14111  00EE' 5100'              	movf	epoch_to_caltime@year& (0+255),w,b
 14112  00F0' EC00' F000'        	call	_month_length
 14113  00F4' 0100               	movlb	0	; () banked
 14114  00F6' 6F00'              	movwf	??_epoch_to_caltime& (0+255),b
 14115  00F8' 6B00'              	clrf	(??_epoch_to_caltime+1)& (0+255),b
 14116  00FA' 0100               	movlb	0	; () banked
 14117  00FC' 1F00'              	comf	??_epoch_to_caltime& (0+255),f,b
 14118  00FE' 1F00'              	comf	(??_epoch_to_caltime+1)& (0+255),f,b
 14119  0100' 4B00'              	infsnz	??_epoch_to_caltime& (0+255),f,b
 14120  0102' 2B00'              	incf	(??_epoch_to_caltime+1)& (0+255),f,b
 14121  0104' 0100               	movlb	0	; () banked
 14122  0106' 5100'              	movf	epoch_to_caltime@day& (0+255),w,b
 14123  0108' 0100               	movlb	0	; () banked
 14124  010A' 2500'              	addwf	??_epoch_to_caltime& (0+255),w,b
 14125  010C' 0100               	movlb	0	; () banked
 14126  010E' 6F00'              	movwf	epoch_to_caltime@day& (0+255),b
 14127  0110' 0100               	movlb	0	; () banked
 14128  0112' 5100'              	movf	(epoch_to_caltime@day+1)& (0+255),w,b
 14129  0114' 0100               	movlb	0	; () banked
 14130  0116' 2100'              	addwfc	(??_epoch_to_caltime+1)& (0+255),w,b
 14131  0118' 0100               	movlb	0	; () banked
 14132  011A' 6F00'              	movwf	(epoch_to_caltime@day+1)& (0+255),b
 14133                           
 14134                           ; BSR set to: 0
 14135                           ;My_header\My_RTCC.h: 189: if (month == 12) {
 14136  011C' 0E0C               	movlw	12
 14137  011E' 0100               	movlb	0	; () banked
 14138  0120' 1900'              	xorwf	epoch_to_caltime@month& (0+255),w,b
 14139  0122' A4D8               	btfss	status,2,c
 14140  0124' D019               	goto	l7311
 14141                           
 14142                           ; BSR set to: 0
 14143                           ;My_header\My_RTCC.h: 190: month = 1;
 14144  0126' 0E01               	movlw	1
 14145  0128' 0100               	movlb	0	; () banked
 14146  012A' 6F00'              	movwf	epoch_to_caltime@month& (0+255),b
 14147                           
 14148                           ; BSR set to: 0
 14149                           ;My_header\My_RTCC.h: 191: year++;
 14150  012C' 0100               	movlb	0	; () banked
 14151  012E' 2B00'              	incf	epoch_to_caltime@year& (0+255),f,b
 14152                           
 14153                           ; BSR set to: 0
 14154                           ;My_header\My_RTCC.h: 193: if (year >= 100) {
 14155  0130' 0E63               	movlw	99
 14156  0132' 0100               	movlb	0	; () banked
 14157  0134' 6500'              	cpfsgt	epoch_to_caltime@year& (0+255),b
 14158  0136' D012               	goto	l7313
 14159                           
 14160                           ; BSR set to: 0
 14161                           ;My_header\My_RTCC.h: 194: *ep -= 3155760000;
 14162  0138' C023' FFD9         	movff	epoch_to_caltime@ep,fsr2l
 14163  013C' C024' FFDA         	movff	epoch_to_caltime@ep+1,fsr2h
 14164  0140' 0E80               	movlw	128
 14165  0142' 5EDE               	subwf	postinc2,f,c
 14166  0144' 0E13               	movlw	19
 14167  0146' 5ADE               	subwfb	postinc2,f,c
 14168  0148' 0E19               	movlw	25
 14169  014A' 5ADE               	subwfb	postinc2,f,c
 14170  014C' 0EBC               	movlw	188
 14171  014E' 5ADE               	subwfb	postinc2,f,c
 14172                           
 14173                           ; BSR set to: 0
 14174                           ;My_header\My_RTCC.h: 195: year = 0;
 14175  0150' 0E00               	movlw	0
 14176  0152' 0100               	movlb	0	; () banked
 14177  0154' 6F00'              	movwf	epoch_to_caltime@year& (0+255),b
 14178                           
 14179                           ; BSR set to: 0
 14180                           ;My_header\My_RTCC.h: 196: }
 14181                           ;My_header\My_RTCC.h: 197: } else {
 14182  0156' D002               	goto	l7313
 14183  0158'                    l7311:
 14184                           
 14185                           ; BSR set to: 0
 14186                           ;My_header\My_RTCC.h: 198: month++;
 14187  0158' 0100               	movlb	0	; () banked
 14188  015A' 2B00'              	incf	epoch_to_caltime@month& (0+255),f,b
 14189  015C'                    l7313:
 14190                           
 14191                           ; BSR set to: 0
 14192                           ;My_header\My_RTCC.h: 199: }
 14193                           ;My_header\My_RTCC.h: 200: month_cache = month;
 14194  015C' C02C' F000'        	movff	epoch_to_caltime@month,epoch_to_caltime@month_cache
 14195                           
 14196                           ; BSR set to: 0
 14197                           ;My_header\My_RTCC.h: 201: year_cache = year;
 14198  0160' C02B' F014'        	movff	epoch_to_caltime@year,epoch_to_caltime@year_cache
 14199  0164'                    l7317:
 14200                           
 14201                           ; BSR set to: 0
 14202  0164' C02C' F002'        	movff	epoch_to_caltime@month,month_length@month
 14203  0168' 0100               	movlb	0	; () banked
 14204  016A' 5100'              	movf	epoch_to_caltime@year& (0+255),w,b
 14205  016C' EC00' F000'        	call	_month_length
 14206  0170' 0100               	movlb	0	; () banked
 14207  0172' 6F00'              	movwf	??_epoch_to_caltime& (0+255),b
 14208  0174' 0100               	movlb	0	; () banked
 14209  0176' 5100'              	movf	??_epoch_to_caltime& (0+255),w,b
 14210  0178' 0100               	movlb	0	; () banked
 14211  017A' 5D00'              	subwf	epoch_to_caltime@day& (0+255),w,b
 14212  017C' 0E00               	movlw	0
 14213  017E' 5900'              	subwfb	(epoch_to_caltime@day+1)& (0+255),w,b
 14214  0180' B0D8               	btfsc	status,0,c
 14215  0182' D7B1               	goto	l430
 14216                           
 14217                           ; BSR set to: 0
 14218                           ;My_header\My_RTCC.h: 202: }
 14219                           ;My_header\My_RTCC.h: 203: day_cache = day_since_epoch - day;
 14220                           
 14221                           ; BSR set to: 0
 14222  0184' C029' F025'        	movff	epoch_to_caltime@day,??_epoch_to_caltime
 14223  0188' C02A' F026'        	movff	epoch_to_caltime@day+1,??_epoch_to_caltime+1
 14224  018C' 0100               	movlb	0	; () banked
 14225  018E' 1F00'              	comf	??_epoch_to_caltime& (0+255),f,b
 14226  0190' 1F00'              	comf	(??_epoch_to_caltime+1)& (0+255),f,b
 14227  0192' 4B00'              	infsnz	??_epoch_to_caltime& (0+255),f,b
 14228  0194' 2B00'              	incf	(??_epoch_to_caltime+1)& (0+255),f,b
 14229  0196' 0100               	movlb	0	; () banked
 14230  0198' 5100'              	movf	epoch_to_caltime@day_since_epoch& (0+255),w,b
 14231  019A' 0100               	movlb	0	; () banked
 14232  019C' 2500'              	addwf	??_epoch_to_caltime& (0+255),w,b
 14233  019E' 0100               	movlb	0	; () banked
 14234  01A0' 6F00'              	movwf	epoch_to_caltime@day_cache& (0+255),b
 14235  01A2' 0100               	movlb	0	; () banked
 14236  01A4' 5100'              	movf	(epoch_to_caltime@day_since_epoch+1)& (0+255),w,b
 14237  01A6' 0100               	movlb	0	; () banked
 14238  01A8' 2100'              	addwfc	(??_epoch_to_caltime+1)& (0+255),w,b
 14239  01AA' 0100               	movlb	0	; () banked
 14240  01AC' 6F00'              	movwf	(epoch_to_caltime@day_cache+1)& (0+255),b
 14241                           
 14242                           ; BSR set to: 0
 14243                           ;My_header\My_RTCC.h: 204: day++;
 14244  01AE' 0100               	movlb	0	; () banked
 14245  01B0' 4B00'              	infsnz	epoch_to_caltime@day& (0+255),f,b
 14246  01B2' 2B00'              	incf	(epoch_to_caltime@day+1)& (0+255),f,b
 14247                           
 14248                           ; BSR set to: 0
 14249                           ;My_header\My_RTCC.h: 206: ct->YY = year;
 14250  01B4' 0100               	movlb	0	; () banked
 14251  01B6' EE20 F006          	lfsr	2,6
 14252  01BA' 5100'              	movf	epoch_to_caltime@ct& (0+255),w,b
 14253  01BC' 26D9               	addwf	fsr2l,f,c
 14254  01BE' 5100'              	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
 14255  01C0' 22DA               	addwfc	fsr2h,f,c
 14256  01C2' C02B' FFDF         	movff	epoch_to_caltime@year,indf2
 14257                           
 14258                           ; BSR set to: 0
 14259                           ;My_header\My_RTCC.h: 207: ct->MM = month;
 14260  01C6' 0100               	movlb	0	; () banked
 14261  01C8' EE20 F005          	lfsr	2,5
 14262  01CC' 5100'              	movf	epoch_to_caltime@ct& (0+255),w,b
 14263  01CE' 26D9               	addwf	fsr2l,f,c
 14264  01D0' 5100'              	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
 14265  01D2' 22DA               	addwfc	fsr2h,f,c
 14266  01D4' C02C' FFDF         	movff	epoch_to_caltime@month,indf2
 14267                           
 14268                           ; BSR set to: 0
 14269                           ;My_header\My_RTCC.h: 208: ct->DD = day;
 14270  01D8' 0100               	movlb	0	; () banked
 14271  01DA' EE20 F004          	lfsr	2,4
 14272  01DE' 5100'              	movf	epoch_to_caltime@ct& (0+255),w,b
 14273  01E0' 26D9               	addwf	fsr2l,f,c
 14274  01E2' 5100'              	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
 14275  01E4' 22DA               	addwfc	fsr2h,f,c
 14276  01E6' C029' FFDF         	movff	epoch_to_caltime@day,indf2
 14277                           
 14278                           ; BSR set to: 0
 14279  01EA' 0012               	return		;funcret
 14280  01EC'                    __end_of_epoch_to_caltime:
 14281                           	opt stack 0
 14282                           tblptru	equ	0xFF8
 14283                           tblptrh	equ	0xFF7
 14284                           tblptrl	equ	0xFF6
 14285                           tablat	equ	0xFF5
 14286                           prodh	equ	0xFF4
 14287                           prodl	equ	0xFF3
 14288                           intcon	equ	0xFF2
 14289                           indf0	equ	0xFEF
 14290                           postinc0	equ	0xFEE
 14291                           fsr0h	equ	0xFEA
 14292                           fsr0l	equ	0xFE9
 14293                           wreg	equ	0xFE8
 14294                           postinc1	equ	0xFE6
 14295                           postdec1	equ	0xFE5
 14296                           fsr1h	equ	0xFE2
 14297                           fsr1l	equ	0xFE1
 14298                           indf2	equ	0xFDF
 14299                           postinc2	equ	0xFDE
 14300                           postdec2	equ	0xFDD
 14301                           plusw2	equ	0xFDB
 14302                           fsr2h	equ	0xFDA
 14303                           fsr2l	equ	0xFD9
 14304                           status	equ	0xFD8
 14305                           
 14306 ;; *************** function _get_quot_rem *****************
 14307 ;; Defined at:
 14308 ;;		line 112 in file "../My_header\My_RTCC.h"
 14309 ;; Parameters:    Size  Location     Type
 14310 ;;  quot            2   25[BANK0 ] PTR unsigned long 
 14311 ;;		 -> epoch_to_caltime@num(4), 
 14312 ;;  div             1   27[BANK0 ] unsigned char 
 14313 ;; Auto vars:     Size  Location     Type
 14314 ;;  num             4   29[BANK0 ] unsigned long 
 14315 ;; Return value:  Size  Location     Type
 14316 ;;                  4   25[BANK0 ] unsigned long 
 14317 ;; Registers used:
 14318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14319 ;; Tracked objects:
 14320 ;;		On entry : 0/0
 14321 ;;		On exit  : 0/0
 14322 ;;		Unchanged: 0/0
 14323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14324 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14325 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14327 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14328 ;;Total ram usage:        8 bytes
 14329 ;; Hardware stack levels used:    1
 14330 ;; Hardware stack levels required when called:    4
 14331 ;; This function calls:
 14332 ;;		___lldiv
 14333 ;;		___lmul
 14334 ;; This function is called by:
 14335 ;;		_epoch_to_caltime
 14336 ;; This function uses a non-reentrant model
 14337 ;;
 14338                           
 14339                           	psect	text41
 14340  0000'                    __ptext41:
 14341                           	opt stack 0
 14342  0000'                    _get_quot_rem:
 14343                           	opt stack 21
 14344                           
 14345                           ;My_header\My_RTCC.h: 115: epoch_t num = *quot;
 14346                           
 14347                           ; BSR set to: 0
 14348                           ;incstack = 0
 14349  0000' C019' FFD9         	movff	get_quot_rem@quot,fsr2l
 14350  0004' C01A' FFDA         	movff	get_quot_rem@quot+1,fsr2h
 14351  0008' CFDE F01D'         	movff	postinc2,get_quot_rem@num
 14352  000C' CFDE F01E'         	movff	postinc2,get_quot_rem@num+1
 14353  0010' CFDE F01F'         	movff	postinc2,get_quot_rem@num+2
 14354  0014' CFDE F020'         	movff	postinc2,get_quot_rem@num+3
 14355                           
 14356                           ;My_header\My_RTCC.h: 116: return num - (*quot = num / div) * div;
 14357  0018' 0100               	movlb	0	; () banked
 14358  001A' 5100'              	movf	get_quot_rem@div& (0+255),w,b
 14359  001C' 0100               	movlb	0	; () banked
 14360  001E' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 14361  0020' 6B00'              	clrf	(___lldiv@divisor+1)& (0+255),b
 14362  0022' 6B00'              	clrf	(___lldiv@divisor+2)& (0+255),b
 14363  0024' 6B00'              	clrf	(___lldiv@divisor+3)& (0+255),b
 14364  0026' C01D' F000'        	movff	get_quot_rem@num,___lldiv@dividend
 14365  002A' C01E' F001'        	movff	get_quot_rem@num+1,___lldiv@dividend+1
 14366  002E' C01F' F002'        	movff	get_quot_rem@num+2,___lldiv@dividend+2
 14367  0032' C020' F003'        	movff	get_quot_rem@num+3,___lldiv@dividend+3
 14368  0036' EC00' F000'        	call	___lldiv	;wreg free
 14369  003A' C019' FFD9         	movff	get_quot_rem@quot,fsr2l
 14370  003E' C01A' FFDA         	movff	get_quot_rem@quot+1,fsr2h
 14371  0042' 0100               	movlb	0	; () banked
 14372  0044' C000' FFDE         	movff	?___lldiv,postinc2
 14373  0048' 0100               	movlb	0	; () banked
 14374  004A' C001' FFDE         	movff	?___lldiv+1,postinc2
 14375  004E' 0100               	movlb	0	; () banked
 14376  0050' C002' FFDE         	movff	?___lldiv+2,postinc2
 14377  0054' 0100               	movlb	0	; () banked
 14378  0056' C003' FFDD         	movff	?___lldiv+3,postdec2
 14379  005A' 52DD               	movf	postdec2,f,c
 14380  005C' 52DD               	movf	postdec2,f,c
 14381  005E' CFDE F00D'         	movff	postinc2,___lmul@multiplier
 14382  0062' CFDE F00E'         	movff	postinc2,___lmul@multiplier+1
 14383  0066' CFDE F00F'         	movff	postinc2,___lmul@multiplier+2
 14384  006A' CFDE F010'         	movff	postinc2,___lmul@multiplier+3
 14385  006E' 0100               	movlb	0	; () banked
 14386  0070' 5100'              	movf	get_quot_rem@div& (0+255),w,b
 14387  0072' 0100               	movlb	0	; () banked
 14388  0074' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
 14389  0076' 6B00'              	clrf	(___lmul@multiplicand+1)& (0+255),b
 14390  0078' 6B00'              	clrf	(___lmul@multiplicand+2)& (0+255),b
 14391  007A' 6B00'              	clrf	(___lmul@multiplicand+3)& (0+255),b
 14392  007C' EC00' F000'        	call	___lmul	;wreg free
 14393  0080' 0100               	movlb	0	; () banked
 14394  0082' 1F00'              	comf	?___lmul& (0+255),f,b
 14395  0084' 0100               	movlb	0	; () banked
 14396  0086' 1F00'              	comf	(?___lmul+1)& (0+255),f,b
 14397  0088' 0100               	movlb	0	; () banked
 14398  008A' 1F00'              	comf	(?___lmul+2)& (0+255),f,b
 14399  008C' 0100               	movlb	0	; () banked
 14400  008E' 1F00'              	comf	(?___lmul+3)& (0+255),f,b
 14401  0090' 0100               	movlb	0	; () banked
 14402  0092' 2B00'              	incf	?___lmul& (0+255),f,b
 14403  0094' 0E00               	movlw	0
 14404  0096' 0100               	movlb	0	; () banked
 14405  0098' 2300'              	addwfc	(?___lmul+1)& (0+255),f,b
 14406  009A' 0100               	movlb	0	; () banked
 14407  009C' 2300'              	addwfc	(?___lmul+2)& (0+255),f,b
 14408  009E' 0100               	movlb	0	; () banked
 14409  00A0' 2300'              	addwfc	(?___lmul+3)& (0+255),f,b
 14410  00A2' 0100               	movlb	0	; () banked
 14411  00A4' 5100'              	movf	get_quot_rem@num& (0+255),w,b
 14412  00A6' 0100               	movlb	0	; () banked
 14413  00A8' 2500'              	addwf	?___lmul& (0+255),w,b
 14414  00AA' 0100               	movlb	0	; () banked
 14415  00AC' 6F00'              	movwf	?_get_quot_rem& (0+255),b
 14416  00AE' 0100               	movlb	0	; () banked
 14417  00B0' 5100'              	movf	(get_quot_rem@num+1)& (0+255),w,b
 14418  00B2' 0100               	movlb	0	; () banked
 14419  00B4' 2100'              	addwfc	(?___lmul+1)& (0+255),w,b
 14420  00B6' 0100               	movlb	0	; () banked
 14421  00B8' 6F00'              	movwf	(?_get_quot_rem+1)& (0+255),b
 14422  00BA' 0100               	movlb	0	; () banked
 14423  00BC' 5100'              	movf	(get_quot_rem@num+2)& (0+255),w,b
 14424  00BE' 0100               	movlb	0	; () banked
 14425  00C0' 2100'              	addwfc	(?___lmul+2)& (0+255),w,b
 14426  00C2' 0100               	movlb	0	; () banked
 14427  00C4' 6F00'              	movwf	(?_get_quot_rem+2)& (0+255),b
 14428  00C6' 0100               	movlb	0	; () banked
 14429  00C8' 5100'              	movf	(get_quot_rem@num+3)& (0+255),w,b
 14430  00CA' 0100               	movlb	0	; () banked
 14431  00CC' 2100'              	addwfc	(?___lmul+3)& (0+255),w,b
 14432  00CE' 0100               	movlb	0	; () banked
 14433  00D0' 6F00'              	movwf	(?_get_quot_rem+3)& (0+255),b
 14434  00D2' 0012               	return	
 14435  00D4'                    __end_of_get_quot_rem:
 14436                           	opt stack 0
 14437                           tblptru	equ	0xFF8
 14438                           tblptrh	equ	0xFF7
 14439                           tblptrl	equ	0xFF6
 14440                           tablat	equ	0xFF5
 14441                           prodh	equ	0xFF4
 14442                           prodl	equ	0xFF3
 14443                           intcon	equ	0xFF2
 14444                           indf0	equ	0xFEF
 14445                           postinc0	equ	0xFEE
 14446                           fsr0h	equ	0xFEA
 14447                           fsr0l	equ	0xFE9
 14448                           wreg	equ	0xFE8
 14449                           postinc1	equ	0xFE6
 14450                           postdec1	equ	0xFE5
 14451                           fsr1h	equ	0xFE2
 14452                           fsr1l	equ	0xFE1
 14453                           indf2	equ	0xFDF
 14454                           postinc2	equ	0xFDE
 14455                           postdec2	equ	0xFDD
 14456                           plusw2	equ	0xFDB
 14457                           fsr2h	equ	0xFDA
 14458                           fsr2l	equ	0xFD9
 14459                           status	equ	0xFD8
 14460                           
 14461 ;; *************** function _caltime_to_RTCC *****************
 14462 ;; Defined at:
 14463 ;;		line 137 in file "../My_header\My_RTCC.h"
 14464 ;; Parameters:    Size  Location     Type
 14465 ;;  ct              2    5[BANK0 ] PTR struct .
 14466 ;;		 -> caltime_now(7), 
 14467 ;; Auto vars:     Size  Location     Type
 14468 ;;		None
 14469 ;; Return value:  Size  Location     Type
 14470 ;;		None               void
 14471 ;; Registers used:
 14472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14473 ;; Tracked objects:
 14474 ;;		On entry : 0/0
 14475 ;;		On exit  : 0/0
 14476 ;;		Unchanged: 0/0
 14477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14478 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14481 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14482 ;;Total ram usage:        2 bytes
 14483 ;; Hardware stack levels used:    1
 14484 ;; Hardware stack levels required when called:    5
 14485 ;; This function calls:
 14486 ;;		_d_to_x
 14487 ;; This function is called by:
 14488 ;;		_RTCC_from_caltime
 14489 ;;		_RTCC_from_epoch
 14490 ;; This function uses a non-reentrant model
 14491 ;;
 14492                           
 14493                           	psect	text42
 14494  0000'                    __ptext42:
 14495                           	opt stack 0
 14496  0000'                    _caltime_to_RTCC:
 14497                           	opt stack 21
 14498  0000'                    l417:
 14499  0000' 010F               	movlb	15	; () banked
 14500  0002' B93F               	btfsc	63,4,b	;volatile
 14501  0004' D7FD               	goto	l417
 14502                           
 14503                           ; BSR set to: 15
 14504                           ;My_header\My_RTCC.h: 139: RTCCFGbits.RTCPTR0 = 1;
 14505  0006' 010F               	movlb	15	; () banked
 14506  0008' 813F               	bsf	63,0,b	;volatile
 14507                           
 14508                           ;My_header\My_RTCC.h: 140: RTCCFGbits.RTCPTR1 = 1;
 14509  000A' 010F               	movlb	15	; () banked
 14510  000C' 833F               	bsf	63,1,b	;volatile
 14511                           
 14512                           ; BSR set to: 15
 14513                           ;My_header\My_RTCC.h: 141: RTCVALL = d_to_x(ct->YY);
 14514  000E' 0100               	movlb	0	; () banked
 14515  0010' EE20 F006          	lfsr	2,6
 14516  0014' 5100'              	movf	caltime_to_RTCC@ct& (0+255),w,b
 14517  0016' 26D9               	addwf	fsr2l,f,c
 14518  0018' 5100'              	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
 14519  001A' 22DA               	addwfc	fsr2h,f,c
 14520  001C' 50DF               	movf	indf2,w,c
 14521  001E' EC00' F000'        	call	_d_to_x
 14522  0022' 010F               	movlb	15	; () banked
 14523  0024' 6F3A               	movwf	58,b	;volatile
 14524                           
 14525                           ; BSR set to: 15
 14526                           ;My_header\My_RTCC.h: 142: RTCVALH = 0x00;
 14527  0026' 0E00               	movlw	0
 14528  0028' 010F               	movlb	15	; () banked
 14529  002A' 6F3B               	movwf	59,b	;volatile
 14530                           
 14531                           ; BSR set to: 15
 14532                           ;My_header\My_RTCC.h: 143: RTCCFGbits.RTCPTR0 = 0;
 14533  002C' 010F               	movlb	15	; () banked
 14534  002E' 913F               	bcf	63,0,b	;volatile
 14535                           
 14536                           ; BSR set to: 15
 14537                           ;My_header\My_RTCC.h: 144: RTCCFGbits.RTCPTR1 = 1;
 14538  0030' 010F               	movlb	15	; () banked
 14539  0032' 833F               	bsf	63,1,b	;volatile
 14540                           
 14541                           ; BSR set to: 15
 14542                           ;My_header\My_RTCC.h: 145: RTCVALL = d_to_x(ct->DD);
 14543  0034' 0100               	movlb	0	; () banked
 14544  0036' EE20 F004          	lfsr	2,4
 14545  003A' 5100'              	movf	caltime_to_RTCC@ct& (0+255),w,b
 14546  003C' 26D9               	addwf	fsr2l,f,c
 14547  003E' 5100'              	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
 14548  0040' 22DA               	addwfc	fsr2h,f,c
 14549  0042' 50DF               	movf	indf2,w,c
 14550  0044' EC00' F000'        	call	_d_to_x
 14551  0048' 010F               	movlb	15	; () banked
 14552  004A' 6F3A               	movwf	58,b	;volatile
 14553                           
 14554                           ; BSR set to: 15
 14555                           ;My_header\My_RTCC.h: 146: RTCVALH = d_to_x(ct->MM);
 14556  004C' 0100               	movlb	0	; () banked
 14557  004E' EE20 F005          	lfsr	2,5
 14558  0052' 5100'              	movf	caltime_to_RTCC@ct& (0+255),w,b
 14559  0054' 26D9               	addwf	fsr2l,f,c
 14560  0056' 5100'              	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
 14561  0058' 22DA               	addwfc	fsr2h,f,c
 14562  005A' 50DF               	movf	indf2,w,c
 14563  005C' EC00' F000'        	call	_d_to_x
 14564  0060' 010F               	movlb	15	; () banked
 14565  0062' 6F3B               	movwf	59,b	;volatile
 14566                           
 14567                           ; BSR set to: 15
 14568                           ;My_header\My_RTCC.h: 147: RTCCFGbits.RTCPTR0 = 1;
 14569  0064' 010F               	movlb	15	; () banked
 14570  0066' 813F               	bsf	63,0,b	;volatile
 14571                           
 14572                           ; BSR set to: 15
 14573                           ;My_header\My_RTCC.h: 148: RTCCFGbits.RTCPTR1 = 0;
 14574  0068' 010F               	movlb	15	; () banked
 14575  006A' 933F               	bcf	63,1,b	;volatile
 14576                           
 14577                           ; BSR set to: 15
 14578                           ;My_header\My_RTCC.h: 149: RTCVALL = d_to_x(ct->hh);
 14579  006C' 0100               	movlb	0	; () banked
 14580  006E' EE20 F002          	lfsr	2,2
 14581  0072' 5100'              	movf	caltime_to_RTCC@ct& (0+255),w,b
 14582  0074' 26D9               	addwf	fsr2l,f,c
 14583  0076' 5100'              	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
 14584  0078' 22DA               	addwfc	fsr2h,f,c
 14585  007A' 50DF               	movf	indf2,w,c
 14586  007C' EC00' F000'        	call	_d_to_x
 14587  0080' 010F               	movlb	15	; () banked
 14588  0082' 6F3A               	movwf	58,b	;volatile
 14589                           
 14590                           ; BSR set to: 15
 14591                           ;My_header\My_RTCC.h: 150: RTCVALH = d_to_x(ct->EE);
 14592  0084' 0100               	movlb	0	; () banked
 14593  0086' EE20 F003          	lfsr	2,3
 14594  008A' 5100'              	movf	caltime_to_RTCC@ct& (0+255),w,b
 14595  008C' 26D9               	addwf	fsr2l,f,c
 14596  008E' 5100'              	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
 14597  0090' 22DA               	addwfc	fsr2h,f,c
 14598  0092' 50DF               	movf	indf2,w,c
 14599  0094' EC00' F000'        	call	_d_to_x
 14600  0098' 010F               	movlb	15	; () banked
 14601  009A' 6F3B               	movwf	59,b	;volatile
 14602                           
 14603                           ; BSR set to: 15
 14604                           ;My_header\My_RTCC.h: 151: RTCCFGbits.RTCPTR0 = 0;
 14605  009C' 010F               	movlb	15	; () banked
 14606  009E' 913F               	bcf	63,0,b	;volatile
 14607                           
 14608                           ; BSR set to: 15
 14609                           ;My_header\My_RTCC.h: 152: RTCCFGbits.RTCPTR1 = 0;
 14610  00A0' 010F               	movlb	15	; () banked
 14611  00A2' 933F               	bcf	63,1,b	;volatile
 14612                           
 14613                           ; BSR set to: 15
 14614                           ;My_header\My_RTCC.h: 153: RTCVALL = d_to_x(ct->ss);
 14615  00A4' C005' FFD9         	movff	caltime_to_RTCC@ct,fsr2l
 14616  00A8' C006' FFDA         	movff	caltime_to_RTCC@ct+1,fsr2h
 14617  00AC' 50DF               	movf	indf2,w,c
 14618  00AE' EC00' F000'        	call	_d_to_x
 14619  00B2' 010F               	movlb	15	; () banked
 14620  00B4' 6F3A               	movwf	58,b	;volatile
 14621                           
 14622                           ; BSR set to: 15
 14623                           ;My_header\My_RTCC.h: 154: RTCVALH = d_to_x(ct->mm);
 14624  00B6' 0100               	movlb	0	; () banked
 14625  00B8' EE20 F001          	lfsr	2,1
 14626  00BC' 5100'              	movf	caltime_to_RTCC@ct& (0+255),w,b
 14627  00BE' 26D9               	addwf	fsr2l,f,c
 14628  00C0' 5100'              	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
 14629  00C2' 22DA               	addwfc	fsr2h,f,c
 14630  00C4' 50DF               	movf	indf2,w,c
 14631  00C6' EC00' F000'        	call	_d_to_x
 14632  00CA' 010F               	movlb	15	; () banked
 14633  00CC' 6F3B               	movwf	59,b	;volatile
 14634                           
 14635                           ; BSR set to: 15
 14636  00CE' 0012               	return		;funcret
 14637  00D0'                    __end_of_caltime_to_RTCC:
 14638                           	opt stack 0
 14639                           tblptru	equ	0xFF8
 14640                           tblptrh	equ	0xFF7
 14641                           tblptrl	equ	0xFF6
 14642                           tablat	equ	0xFF5
 14643                           prodh	equ	0xFF4
 14644                           prodl	equ	0xFF3
 14645                           intcon	equ	0xFF2
 14646                           indf0	equ	0xFEF
 14647                           postinc0	equ	0xFEE
 14648                           fsr0h	equ	0xFEA
 14649                           fsr0l	equ	0xFE9
 14650                           wreg	equ	0xFE8
 14651                           postinc1	equ	0xFE6
 14652                           postdec1	equ	0xFE5
 14653                           fsr1h	equ	0xFE2
 14654                           fsr1l	equ	0xFE1
 14655                           indf2	equ	0xFDF
 14656                           postinc2	equ	0xFDE
 14657                           postdec2	equ	0xFDD
 14658                           plusw2	equ	0xFDB
 14659                           fsr2h	equ	0xFDA
 14660                           fsr2l	equ	0xFD9
 14661                           status	equ	0xFD8
 14662                           
 14663 ;; *************** function _d_to_x *****************
 14664 ;; Defined at:
 14665 ;;		line 73 in file "../My_header\My_RTCC.h"
 14666 ;; Parameters:    Size  Location     Type
 14667 ;;  dec             1    wreg     unsigned char 
 14668 ;; Auto vars:     Size  Location     Type
 14669 ;;  dec             1    4[BANK0 ] unsigned char 
 14670 ;; Return value:  Size  Location     Type
 14671 ;;                  1    wreg      unsigned char 
 14672 ;; Registers used:
 14673 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 14674 ;; Tracked objects:
 14675 ;;		On entry : 0/0
 14676 ;;		On exit  : 0/0
 14677 ;;		Unchanged: 0/0
 14678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14680 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14682 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14683 ;;Total ram usage:        1 bytes
 14684 ;; Hardware stack levels used:    1
 14685 ;; Hardware stack levels required when called:    4
 14686 ;; This function calls:
 14687 ;;		___awdiv
 14688 ;; This function is called by:
 14689 ;;		_caltime_to_RTCC
 14690 ;; This function uses a non-reentrant model
 14691 ;;
 14692                           
 14693                           	psect	text43
 14694  0000'                    __ptext43:
 14695                           	opt stack 0
 14696  0000'                    _d_to_x:
 14697                           	opt stack 21
 14698                           
 14699                           ; BSR set to: 15
 14700                           ;incstack = 0
 14701                           ;d_to_x@dec stored from wreg
 14702  0000' 0100               	movlb	0	; () banked
 14703  0002' 6F00'              	movwf	d_to_x@dec& (0+255),b
 14704                           
 14705                           ;My_header\My_RTCC.h: 76: return dec / 10 * 6 + dec;
 14706  0004' C004' F01E'        	movff	d_to_x@dec,___awdiv@dividend
 14707  0008' 6A1F'              	clrf	___awdiv@dividend+1,c
 14708  000A' 0E00               	movlw	0
 14709  000C' 6E21'              	movwf	___awdiv@divisor+1,c
 14710  000E' 0E0A               	movlw	10
 14711  0010' 6E20'              	movwf	___awdiv@divisor,c
 14712  0012' EC00' F000'        	call	___awdiv	;wreg free
 14713  0016' 501E'              	movf	?___awdiv,w,c
 14714  0018' 0D06               	mullw	6
 14715  001A' 50F3               	movf	prodl,w,c
 14716  001C' 0100               	movlb	0	; () banked
 14717  001E' 2500'              	addwf	d_to_x@dec& (0+255),w,b
 14718  0020' 0012               	return	
 14719  0022'                    __end_of_d_to_x:
 14720                           	opt stack 0
 14721                           tblptru	equ	0xFF8
 14722                           tblptrh	equ	0xFF7
 14723                           tblptrl	equ	0xFF6
 14724                           tablat	equ	0xFF5
 14725                           prodh	equ	0xFF4
 14726                           prodl	equ	0xFF3
 14727                           intcon	equ	0xFF2
 14728                           indf0	equ	0xFEF
 14729                           postinc0	equ	0xFEE
 14730                           fsr0h	equ	0xFEA
 14731                           fsr0l	equ	0xFE9
 14732                           wreg	equ	0xFE8
 14733                           postinc1	equ	0xFE6
 14734                           postdec1	equ	0xFE5
 14735                           fsr1h	equ	0xFE2
 14736                           fsr1l	equ	0xFE1
 14737                           indf2	equ	0xFDF
 14738                           postinc2	equ	0xFDE
 14739                           postdec2	equ	0xFDD
 14740                           plusw2	equ	0xFDB
 14741                           fsr2h	equ	0xFDA
 14742                           fsr2l	equ	0xFD9
 14743                           status	equ	0xFD8
 14744                           
 14745 ;; *************** function ___awdiv *****************
 14746 ;; Defined at:
 14747 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
 14748 ;; Parameters:    Size  Location     Type
 14749 ;;  dividend        2   30[COMRAM] int 
 14750 ;;  divisor         2   32[COMRAM] int 
 14751 ;; Auto vars:     Size  Location     Type
 14752 ;;  quotient        2    2[BANK0 ] int 
 14753 ;;  sign            1    1[BANK0 ] unsigned char 
 14754 ;;  counter         1    0[BANK0 ] unsigned char 
 14755 ;; Return value:  Size  Location     Type
 14756 ;;                  2   30[COMRAM] int 
 14757 ;; Registers used:
 14758 ;;		wreg, status,2, status,0
 14759 ;; Tracked objects:
 14760 ;;		On entry : 0/0
 14761 ;;		On exit  : 0/0
 14762 ;;		Unchanged: 0/0
 14763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14764 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14765 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14767 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14768 ;;Total ram usage:        8 bytes
 14769 ;; Hardware stack levels used:    1
 14770 ;; Hardware stack levels required when called:    3
 14771 ;; This function calls:
 14772 ;;		Nothing
 14773 ;; This function is called by:
 14774 ;;		_d_to_x
 14775 ;; This function uses a non-reentrant model
 14776 ;;
 14777                           
 14778                           	psect	text44
 14779  0000'                    __ptext44:
 14780                           	opt stack 0
 14781  0000'                    ___awdiv:
 14782                           	opt stack 21
 14783                           
 14784                           ; BSR set to: 0
 14785                           ;incstack = 0
 14786  0000' 0E00               	movlw	0
 14787  0002' 0100               	movlb	0	; () banked
 14788  0004' 6F00'              	movwf	___awdiv@sign& (0+255),b
 14789                           
 14790                           ; BSR set to: 0
 14791  0006' AE21'              	btfss	___awdiv@divisor+1,7,c
 14792  0008' D007               	goto	l7039
 14793                           
 14794                           ; BSR set to: 0
 14795  000A' 6C20'              	negf	___awdiv@divisor,c
 14796  000C' 1E21'              	comf	___awdiv@divisor+1,f,c
 14797  000E' B0D8               	btfsc	status,0,c
 14798  0010' 2A21'              	incf	___awdiv@divisor+1,f,c
 14799                           
 14800                           ; BSR set to: 0
 14801  0012' 0E01               	movlw	1
 14802  0014' 0100               	movlb	0	; () banked
 14803  0016' 6F00'              	movwf	___awdiv@sign& (0+255),b
 14804  0018'                    l7039:
 14805                           
 14806                           ; BSR set to: 0
 14807  0018' AE1F'              	btfss	___awdiv@dividend+1,7,c
 14808  001A' D007               	goto	l7045
 14809                           
 14810                           ; BSR set to: 0
 14811  001C' 6C1E'              	negf	___awdiv@dividend,c
 14812  001E' 1E1F'              	comf	___awdiv@dividend+1,f,c
 14813  0020' B0D8               	btfsc	status,0,c
 14814  0022' 2A1F'              	incf	___awdiv@dividend+1,f,c
 14815                           
 14816                           ; BSR set to: 0
 14817  0024' 0E01               	movlw	1
 14818  0026' 0100               	movlb	0	; () banked
 14819  0028' 1B00'              	xorwf	___awdiv@sign& (0+255),f,b
 14820  002A'                    l7045:
 14821                           
 14822                           ; BSR set to: 0
 14823  002A' 0E00               	movlw	0
 14824  002C' 0100               	movlb	0	; () banked
 14825  002E' 6F00'              	movwf	(___awdiv@quotient+1)& (0+255),b
 14826  0030' 0E00               	movlw	0
 14827  0032' 6F00'              	movwf	___awdiv@quotient& (0+255),b
 14828                           
 14829                           ; BSR set to: 0
 14830  0034' 5020'              	movf	___awdiv@divisor,w,c
 14831  0036' 1021'              	iorwf	___awdiv@divisor+1,w,c
 14832  0038' B4D8               	btfsc	status,2,c
 14833  003A' D021               	goto	l7067
 14834                           
 14835                           ; BSR set to: 0
 14836  003C' 0E01               	movlw	1
 14837  003E' 0100               	movlb	0	; () banked
 14838  0040' 6F00'              	movwf	___awdiv@counter& (0+255),b
 14839  0042' D005               	goto	l7053
 14840  0044'                    l7051:
 14841                           
 14842                           ; BSR set to: 0
 14843  0044' 90D8               	bcf	status,0,c
 14844  0046' 3620'              	rlcf	___awdiv@divisor,f,c
 14845  0048' 3621'              	rlcf	___awdiv@divisor+1,f,c
 14846  004A' 0100               	movlb	0	; () banked
 14847  004C' 2B00'              	incf	___awdiv@counter& (0+255),f,b
 14848  004E'                    l7053:
 14849                           
 14850                           ; BSR set to: 0
 14851  004E' AE21'              	btfss	___awdiv@divisor+1,7,c
 14852  0050' D7F9               	goto	l7051
 14853  0052'                    l7055:
 14854                           
 14855                           ; BSR set to: 0
 14856  0052' 0100               	movlb	0	; () banked
 14857  0054' 90D8               	bcf	status,0,c
 14858  0056' 3700'              	rlcf	___awdiv@quotient& (0+255),f,b
 14859  0058' 3700'              	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 14860                           
 14861                           ; BSR set to: 0
 14862  005A' 5020'              	movf	___awdiv@divisor,w,c
 14863  005C' 5C1E'              	subwf	___awdiv@dividend,w,c
 14864  005E' 5021'              	movf	___awdiv@divisor+1,w,c
 14865  0060' 581F'              	subwfb	___awdiv@dividend+1,w,c
 14866  0062' A0D8               	btfss	status,0,c
 14867  0064' D006               	goto	l7063
 14868                           
 14869                           ; BSR set to: 0
 14870  0066' 5020'              	movf	___awdiv@divisor,w,c
 14871  0068' 5E1E'              	subwf	___awdiv@dividend,f,c
 14872  006A' 5021'              	movf	___awdiv@divisor+1,w,c
 14873  006C' 5A1F'              	subwfb	___awdiv@dividend+1,f,c
 14874                           
 14875                           ; BSR set to: 0
 14876  006E' 0100               	movlb	0	; () banked
 14877  0070' 8100'              	bsf	___awdiv@quotient& (0+255),0,b
 14878  0072'                    l7063:
 14879                           
 14880                           ; BSR set to: 0
 14881  0072' 90D8               	bcf	status,0,c
 14882  0074' 3221'              	rrcf	___awdiv@divisor+1,f,c
 14883  0076' 3220'              	rrcf	___awdiv@divisor,f,c
 14884                           
 14885                           ; BSR set to: 0
 14886  0078' 0100               	movlb	0	; () banked
 14887  007A' 2F00'              	decfsz	___awdiv@counter& (0+255),f,b
 14888  007C' D7EA               	goto	l7055
 14889  007E'                    l7067:
 14890                           
 14891                           ; BSR set to: 0
 14892  007E' 0100               	movlb	0	; () banked
 14893  0080' 5100'              	movf	___awdiv@sign& (0+255),w,b
 14894  0082' 0100               	movlb	0	; () banked
 14895  0084' B4D8               	btfsc	status,2,c
 14896  0086' D005               	goto	l7071
 14897                           
 14898                           ; BSR set to: 0
 14899  0088' 0100               	movlb	0	; () banked
 14900  008A' 6D00'              	negf	___awdiv@quotient& (0+255),b
 14901  008C' 1F00'              	comf	(___awdiv@quotient+1)& (0+255),f,b
 14902  008E' B0D8               	btfsc	status,0,c
 14903  0090' 2B00'              	incf	(___awdiv@quotient+1)& (0+255),f,b
 14904  0092'                    l7071:
 14905                           
 14906                           ; BSR set to: 0
 14907  0092' C002' F01E'        	movff	___awdiv@quotient,?___awdiv
 14908  0096' C003' F01F'        	movff	___awdiv@quotient+1,?___awdiv+1
 14909  009A' 0012               	return	
 14910  009C'                    __end_of___awdiv:
 14911                           	opt stack 0
 14912                           tblptru	equ	0xFF8
 14913                           tblptrh	equ	0xFF7
 14914                           tblptrl	equ	0xFF6
 14915                           tablat	equ	0xFF5
 14916                           prodh	equ	0xFF4
 14917                           prodl	equ	0xFF3
 14918                           intcon	equ	0xFF2
 14919                           indf0	equ	0xFEF
 14920                           postinc0	equ	0xFEE
 14921                           fsr0h	equ	0xFEA
 14922                           fsr0l	equ	0xFE9
 14923                           wreg	equ	0xFE8
 14924                           postinc1	equ	0xFE6
 14925                           postdec1	equ	0xFE5
 14926                           fsr1h	equ	0xFE2
 14927                           fsr1l	equ	0xFE1
 14928                           indf2	equ	0xFDF
 14929                           postinc2	equ	0xFDE
 14930                           postdec2	equ	0xFDD
 14931                           plusw2	equ	0xFDB
 14932                           fsr2h	equ	0xFDA
 14933                           fsr2l	equ	0xFD9
 14934                           status	equ	0xFD8
 14935                           
 14936 ;; *************** function _command_get_data *****************
 14937 ;; Defined at:
 14938 ;;		line 322 in file "tasks.h"
 14939 ;; Parameters:    Size  Location     Type
 14940 ;;  tx              2   47[BANK0 ] PTR struct ringbuf
 14941 ;;		 -> usb_tx(8), 
 14942 ;;  item            1   49[BANK0 ] enum E9651
 14943 ;;  i               1   50[BANK0 ] unsigned char 
 14944 ;; Auto vars:     Size  Location     Type
 14945 ;;  str            10   51[BANK0 ] unsigned char [10]
 14946 ;; Return value:  Size  Location     Type
 14947 ;;		None               void
 14948 ;; Registers used:
 14949 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14950 ;; Tracked objects:
 14951 ;;		On entry : 0/0
 14952 ;;		On exit  : 0/0
 14953 ;;		Unchanged: 0/0
 14954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14955 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14956 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14958 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14959 ;;Total ram usage:       18 bytes
 14960 ;; Hardware stack levels used:    1
 14961 ;; Hardware stack levels required when called:    6
 14962 ;; This function calls:
 14963 ;;		___lldiv
 14964 ;;		___llmod
 14965 ;;		___lwdiv
 14966 ;;		___lwmod
 14967 ;;		_my_utoa
 14968 ;;		_ringbuf_put
 14969 ;;		_ringbuf_put_num
 14970 ;;		_ringbuf_put_str
 14971 ;; This function is called by:
 14972 ;;		_command_operation
 14973 ;; This function uses a non-reentrant model
 14974 ;;
 14975                           
 14976                           	psect	text45
 14977  0000'                    __ptext45:
 14978                           	opt stack 0
 14979  0000'                    _command_get_data:
 14980                           	opt stack 22
 14981                           
 14982                           ;tasks.h: 323: switch (item) {
 14983                           
 14984                           ; BSR set to: 0
 14985                           ;incstack = 0
 14986  0000' D267               	goto	l8045
 14987  0002'                    l7995:
 14988                           
 14989                           ;tasks.h: 325: ringbuf_put_str(tx, "\t");
 14990  0002' C02F' F027'        	movff	command_get_data@tx,ringbuf_put_str@rb
 14991  0006' C030' F028'        	movff	command_get_data@tx+1,ringbuf_put_str@rb+1
 14992  000A' 0E00'              	movlw	low STR_31
 14993  000C' 0100               	movlb	0	; () banked
 14994  000E' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 14995  0010' 0E00'              	movlw	high STR_31
 14996  0012' 0100               	movlb	0	; () banked
 14997  0014' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 14998  0016' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 14999                           
 15000                           ;tasks.h: 326: ringbuf_put(tx, (port[i].current % 10000) / 1000 + '0');
 15001  001A' C02F' F020'        	movff	command_get_data@tx,ringbuf_put@rb
 15002  001E' C030' F021'        	movff	command_get_data@tx+1,ringbuf_put@rb+1
 15003  0022' 0E27               	movlw	39
 15004  0024' 6E21'              	movwf	___lwmod@divisor+1,c
 15005  0026' 0E10               	movlw	16
 15006  0028' 6E20'              	movwf	___lwmod@divisor,c
 15007  002A' 0100               	movlb	0	; () banked
 15008  002C' 5100'              	movf	command_get_data@i& (0+255),w,b
 15009  002E' 0D17               	mullw	23
 15010  0030' 0E06               	movlw	6
 15011  0032' 26F3               	addwf	prodl,f,c
 15012  0034' 0E00               	movlw	0
 15013  0036' 22F4               	addwfc	prodh,f,c
 15014  0038' 0E00'              	movlw	low _port
 15015  003A' 24F3               	addwf	prodl,w,c
 15016  003C' 6ED9               	movwf	fsr2l,c
 15017  003E' 0E00'              	movlw	high _port
 15018  0040' 20F4               	addwfc	prodh,w,c
 15019  0042' 6EDA               	movwf	fsr2h,c
 15020  0044' CFDE F01E'         	movff	postinc2,___lwmod@dividend
 15021  0048' CFDD F01F'         	movff	postdec2,___lwmod@dividend+1
 15022  004C' EC00' F000'        	call	___lwmod	;wreg free
 15023  0050' C01E' F019'        	movff	?___lwmod,___lwdiv@dividend
 15024  0054' C01F' F01A'        	movff	?___lwmod+1,___lwdiv@dividend+1
 15025  0058' 0E03               	movlw	3
 15026  005A' 0100               	movlb	0	; () banked
 15027  005C' 6F00'              	movwf	(___lwdiv@divisor+1)& (0+255),b
 15028  005E' 0EE8               	movlw	232
 15029  0060' 6F00'              	movwf	___lwdiv@divisor& (0+255),b
 15030  0062' EC00' F000'        	call	___lwdiv	;wreg free
 15031  0066' 0100               	movlb	0	; () banked
 15032  0068' 5100'              	movf	?___lwdiv& (0+255),w,b
 15033  006A' 0F30               	addlw	48
 15034  006C' 0100               	movlb	0	; () banked
 15035  006E' 6F00'              	movwf	ringbuf_put@asciicode& (0+255),b
 15036  0070' EC00' F000'        	call	_ringbuf_put	;wreg free
 15037                           
 15038                           ;tasks.h: 327: ringbuf_put(tx, '.');
 15039  0074' C02F' F020'        	movff	command_get_data@tx,ringbuf_put@rb
 15040  0078' C030' F021'        	movff	command_get_data@tx+1,ringbuf_put@rb+1
 15041  007C' 0E2E               	movlw	46
 15042  007E' 0100               	movlb	0	; () banked
 15043  0080' 6F00'              	movwf	ringbuf_put@asciicode& (0+255),b
 15044  0082' EC00' F000'        	call	_ringbuf_put	;wreg free
 15045                           
 15046                           ;tasks.h: 328: ringbuf_put(tx, (port[i].current % 1000) / 100 + '0');
 15047  0086' C02F' F020'        	movff	command_get_data@tx,ringbuf_put@rb
 15048  008A' C030' F021'        	movff	command_get_data@tx+1,ringbuf_put@rb+1
 15049  008E' 0E03               	movlw	3
 15050  0090' 6E21'              	movwf	___lwmod@divisor+1,c
 15051  0092' 0EE8               	movlw	232
 15052  0094' 6E20'              	movwf	___lwmod@divisor,c
 15053  0096' 0100               	movlb	0	; () banked
 15054  0098' 5100'              	movf	command_get_data@i& (0+255),w,b
 15055  009A' 0D17               	mullw	23
 15056  009C' 0E06               	movlw	6
 15057  009E' 26F3               	addwf	prodl,f,c
 15058  00A0' 0E00               	movlw	0
 15059  00A2' 22F4               	addwfc	prodh,f,c
 15060  00A4' 0E00'              	movlw	low _port
 15061  00A6' 24F3               	addwf	prodl,w,c
 15062  00A8' 6ED9               	movwf	fsr2l,c
 15063  00AA' 0E00'              	movlw	high _port
 15064  00AC' 20F4               	addwfc	prodh,w,c
 15065  00AE' 6EDA               	movwf	fsr2h,c
 15066  00B0' CFDE F01E'         	movff	postinc2,___lwmod@dividend
 15067  00B4' CFDD F01F'         	movff	postdec2,___lwmod@dividend+1
 15068  00B8' EC00' F000'        	call	___lwmod	;wreg free
 15069  00BC' C01E' F019'        	movff	?___lwmod,___lwdiv@dividend
 15070  00C0' C01F' F01A'        	movff	?___lwmod+1,___lwdiv@dividend+1
 15071  00C4' 0E00               	movlw	0
 15072  00C6' 0100               	movlb	0	; () banked
 15073  00C8' 6F00'              	movwf	(___lwdiv@divisor+1)& (0+255),b
 15074  00CA' 0E64               	movlw	100
 15075  00CC' 6F00'              	movwf	___lwdiv@divisor& (0+255),b
 15076  00CE' EC00' F000'        	call	___lwdiv	;wreg free
 15077  00D2' 0100               	movlb	0	; () banked
 15078  00D4' 5100'              	movf	?___lwdiv& (0+255),w,b
 15079  00D6' 0F30               	addlw	48
 15080  00D8' 0100               	movlb	0	; () banked
 15081  00DA' 6F00'              	movwf	ringbuf_put@asciicode& (0+255),b
 15082  00DC' EC00' F000'        	call	_ringbuf_put	;wreg free
 15083                           
 15084                           ;tasks.h: 329: ringbuf_put(tx, (port[i].current % 100) / 10 + '0');
 15085  00E0' C02F' F020'        	movff	command_get_data@tx,ringbuf_put@rb
 15086  00E4' C030' F021'        	movff	command_get_data@tx+1,ringbuf_put@rb+1
 15087  00E8' 0E00               	movlw	0
 15088  00EA' 6E21'              	movwf	___lwmod@divisor+1,c
 15089  00EC' 0E64               	movlw	100
 15090  00EE' 6E20'              	movwf	___lwmod@divisor,c
 15091  00F0' 0100               	movlb	0	; () banked
 15092  00F2' 5100'              	movf	command_get_data@i& (0+255),w,b
 15093  00F4' 0D17               	mullw	23
 15094  00F6' 0E06               	movlw	6
 15095  00F8' 26F3               	addwf	prodl,f,c
 15096  00FA' 0E00               	movlw	0
 15097  00FC' 22F4               	addwfc	prodh,f,c
 15098  00FE' 0E00'              	movlw	low _port
 15099  0100' 24F3               	addwf	prodl,w,c
 15100  0102' 6ED9               	movwf	fsr2l,c
 15101  0104' 0E00'              	movlw	high _port
 15102  0106' 20F4               	addwfc	prodh,w,c
 15103  0108' 6EDA               	movwf	fsr2h,c
 15104  010A' CFDE F01E'         	movff	postinc2,___lwmod@dividend
 15105  010E' CFDD F01F'         	movff	postdec2,___lwmod@dividend+1
 15106  0112' EC00' F000'        	call	___lwmod	;wreg free
 15107  0116' C01E' F019'        	movff	?___lwmod,___lwdiv@dividend
 15108  011A' C01F' F01A'        	movff	?___lwmod+1,___lwdiv@dividend+1
 15109  011E' 0E00               	movlw	0
 15110  0120' 0100               	movlb	0	; () banked
 15111  0122' 6F00'              	movwf	(___lwdiv@divisor+1)& (0+255),b
 15112  0124' 0E0A               	movlw	10
 15113  0126' 6F00'              	movwf	___lwdiv@divisor& (0+255),b
 15114  0128' EC00' F000'        	call	___lwdiv	;wreg free
 15115  012C' 0100               	movlb	0	; () banked
 15116  012E' 5100'              	movf	?___lwdiv& (0+255),w,b
 15117  0130' 0F30               	addlw	48
 15118  0132' 0100               	movlb	0	; () banked
 15119  0134' 6F00'              	movwf	ringbuf_put@asciicode& (0+255),b
 15120  0136' EC00' F000'        	call	_ringbuf_put	;wreg free
 15121                           
 15122                           ;tasks.h: 330: ringbuf_put(tx, (port[i].current % 10) / 1 + '0');
 15123  013A' C02F' F020'        	movff	command_get_data@tx,ringbuf_put@rb
 15124  013E' C030' F021'        	movff	command_get_data@tx+1,ringbuf_put@rb+1
 15125  0142' 0100               	movlb	0	; () banked
 15126  0144' 5100'              	movf	command_get_data@i& (0+255),w,b
 15127  0146' 0D17               	mullw	23
 15128  0148' 0E06               	movlw	6
 15129  014A' 26F3               	addwf	prodl,f,c
 15130  014C' 0E00               	movlw	0
 15131  014E' 22F4               	addwfc	prodh,f,c
 15132  0150' 0E00'              	movlw	low _port
 15133  0152' 24F3               	addwf	prodl,w,c
 15134  0154' 6ED9               	movwf	fsr2l,c
 15135  0156' 0E00'              	movlw	high _port
 15136  0158' 20F4               	addwfc	prodh,w,c
 15137  015A' 6EDA               	movwf	fsr2h,c
 15138  015C' CFDE F01E'         	movff	postinc2,___lwmod@dividend
 15139  0160' CFDD F01F'         	movff	postdec2,___lwmod@dividend+1
 15140  0164' 0E00               	movlw	0
 15141  0166' 6E21'              	movwf	___lwmod@divisor+1,c
 15142  0168' 0E0A               	movlw	10
 15143  016A' 6E20'              	movwf	___lwmod@divisor,c
 15144  016C' EC00' F000'        	call	___lwmod	;wreg free
 15145  0170' 501E'              	movf	?___lwmod,w,c
 15146  0172' 0F30               	addlw	48
 15147  0174' 0100               	movlb	0	; () banked
 15148  0176' 6F00'              	movwf	ringbuf_put@asciicode& (0+255),b
 15149  0178' EC00' F000'        	call	_ringbuf_put	;wreg free
 15150                           
 15151                           ;tasks.h: 331: ringbuf_put_str(tx, "A\n");
 15152  017C' C02F' F027'        	movff	command_get_data@tx,ringbuf_put_str@rb
 15153  0180' C030' F028'        	movff	command_get_data@tx+1,ringbuf_put_str@rb+1
 15154  0184' 0E00'              	movlw	low STR_32
 15155  0186' 0100               	movlb	0	; () banked
 15156  0188' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 15157  018A' 0E00'              	movlw	high STR_32
 15158  018C' 0100               	movlb	0	; () banked
 15159  018E' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 15160  0190' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 15161                           
 15162                           ;tasks.h: 332: break;
 15163  0194' 0012               	return	
 15164  0196'                    l8009:
 15165                           
 15166                           ;tasks.h: 334: ringbuf_put_str(tx, "\t");
 15167  0196' C02F' F027'        	movff	command_get_data@tx,ringbuf_put_str@rb
 15168  019A' C030' F028'        	movff	command_get_data@tx+1,ringbuf_put_str@rb+1
 15169  019E' 0E00'              	movlw	low STR_31
 15170  01A0' 0100               	movlb	0	; () banked
 15171  01A2' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 15172  01A4' 0E00'              	movlw	high STR_31
 15173  01A6' 0100               	movlb	0	; () banked
 15174  01A8' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 15175  01AA' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 15176                           
 15177                           ;tasks.h: 335: ringbuf_put_num(tx, port[i].integrated_current, 5);
 15178  01AE' C02F' F027'        	movff	command_get_data@tx,ringbuf_put_num@rb
 15179  01B2' C030' F028'        	movff	command_get_data@tx+1,ringbuf_put_num@rb+1
 15180  01B6' 0100               	movlb	0	; () banked
 15181  01B8' 5100'              	movf	command_get_data@i& (0+255),w,b
 15182  01BA' 0D17               	mullw	23
 15183  01BC' 0E0C               	movlw	12
 15184  01BE' 26F3               	addwf	prodl,f,c
 15185  01C0' 0E00               	movlw	0
 15186  01C2' 22F4               	addwfc	prodh,f,c
 15187  01C4' 0E00'              	movlw	low _port
 15188  01C6' 24F3               	addwf	prodl,w,c
 15189  01C8' 6ED9               	movwf	fsr2l,c
 15190  01CA' 0E00'              	movlw	high _port
 15191  01CC' 20F4               	addwfc	prodh,w,c
 15192  01CE' 6EDA               	movwf	fsr2h,c
 15193  01D0' CFDE F029'         	movff	postinc2,ringbuf_put_num@value
 15194  01D4' CFDD F02A'         	movff	postdec2,ringbuf_put_num@value+1
 15195  01D8' 0E05               	movlw	5
 15196  01DA' 0100               	movlb	0	; () banked
 15197  01DC' 6F00'              	movwf	ringbuf_put_num@digits& (0+255),b
 15198  01DE' EC00' F000'        	call	_ringbuf_put_num	;wreg free
 15199                           
 15200                           ;tasks.h: 336: ringbuf_put_str(tx, "mAh\n");
 15201  01E2' C02F' F027'        	movff	command_get_data@tx,ringbuf_put_str@rb
 15202  01E6' C030' F028'        	movff	command_get_data@tx+1,ringbuf_put_str@rb+1
 15203  01EA' 0E00'              	movlw	low STR_34
 15204  01EC' 0100               	movlb	0	; () banked
 15205  01EE' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 15206  01F0' 0E00'              	movlw	high STR_34
 15207  01F2' 0100               	movlb	0	; () banked
 15208  01F4' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 15209  01F6' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 15210                           
 15211                           ;tasks.h: 337: break;
 15212  01FA' 0012               	return	
 15213  01FC'                    l8015:
 15214                           
 15215                           ;tasks.h: 339: ringbuf_put_str(tx, "\t");
 15216  01FC' C02F' F027'        	movff	command_get_data@tx,ringbuf_put_str@rb
 15217  0200' C030' F028'        	movff	command_get_data@tx+1,ringbuf_put_str@rb+1
 15218  0204' 0E00'              	movlw	low STR_31
 15219  0206' 0100               	movlb	0	; () banked
 15220  0208' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 15221  020A' 0E00'              	movlw	high STR_31
 15222  020C' 0100               	movlb	0	; () banked
 15223  020E' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 15224  0210' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 15225                           
 15226                           ;tasks.h: 340: char str[10];
 15227                           ;tasks.h: 341: my_utoa(str, port[i].integrated_time / 3600 / 24, 2);
 15228  0214' 0E10               	movlw	16
 15229  0216' 0100               	movlb	0	; () banked
 15230  0218' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 15231  021A' 0E0E               	movlw	14
 15232  021C' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
 15233  021E' 0E00               	movlw	0
 15234  0220' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
 15235  0222' 0E00               	movlw	0
 15236  0224' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
 15237  0226' 0100               	movlb	0	; () banked
 15238  0228' 5100'              	movf	command_get_data@i& (0+255),w,b
 15239  022A' 0D17               	mullw	23
 15240  022C' 0E10               	movlw	16
 15241  022E' 26F3               	addwf	prodl,f,c
 15242  0230' 0E00               	movlw	0
 15243  0232' 22F4               	addwfc	prodh,f,c
 15244  0234' 0E00'              	movlw	low _port
 15245  0236' 24F3               	addwf	prodl,w,c
 15246  0238' 6ED9               	movwf	fsr2l,c
 15247  023A' 0E00'              	movlw	high _port
 15248  023C' 20F4               	addwfc	prodh,w,c
 15249  023E' 6EDA               	movwf	fsr2h,c
 15250  0240' CFDE F000'         	movff	postinc2,___lldiv@dividend
 15251  0244' CFDE F001'         	movff	postinc2,___lldiv@dividend+1
 15252  0248' CFDE F002'         	movff	postinc2,___lldiv@dividend+2
 15253  024C' CFDE F003'         	movff	postinc2,___lldiv@dividend+3
 15254  0250' EC00' F000'        	call	___lldiv	;wreg free
 15255  0254' C000' F03D'        	movff	?___lldiv,_command_get_data$3372
 15256  0258' C001' F03E'        	movff	?___lldiv+1,_command_get_data$3372+1
 15257  025C' C002' F03F'        	movff	?___lldiv+2,_command_get_data$3372+2
 15258  0260' C003' F040'        	movff	?___lldiv+3,_command_get_data$3372+3
 15259                           
 15260                           ;tasks.h: 340: char str[10];
 15261                           ;tasks.h: 341: my_utoa(str, port[i].integrated_time / 3600 / 24, 2);
 15262  0264' 0E00'              	movlw	low command_get_data@str
 15263  0266' 0100               	movlb	0	; () banked
 15264  0268' 6F00'              	movwf	my_utoa@str& (0+255),b
 15265  026A' 0E00'              	movlw	high command_get_data@str
 15266  026C' 0100               	movlb	0	; () banked
 15267  026E' 6F00'              	movwf	(my_utoa@str+1)& (0+255),b
 15268  0270' C03D' F000'        	movff	_command_get_data$3372,___lldiv@dividend
 15269  0274' C03E' F001'        	movff	_command_get_data$3372+1,___lldiv@dividend+1
 15270  0278' C03F' F002'        	movff	_command_get_data$3372+2,___lldiv@dividend+2
 15271  027C' C040' F003'        	movff	_command_get_data$3372+3,___lldiv@dividend+3
 15272  0280' 0E18               	movlw	24
 15273  0282' 0100               	movlb	0	; () banked
 15274  0284' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 15275  0286' 0E00               	movlw	0
 15276  0288' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
 15277  028A' 0E00               	movlw	0
 15278  028C' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
 15279  028E' 0E00               	movlw	0
 15280  0290' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
 15281  0292' EC00' F000'        	call	___lldiv	;wreg free
 15282  0296' C000' F022'        	movff	?___lldiv,my_utoa@value
 15283  029A' C001' F023'        	movff	?___lldiv+1,my_utoa@value+1
 15284  029E' 0E02               	movlw	2
 15285  02A0' 0100               	movlb	0	; () banked
 15286  02A2' 6F00'              	movwf	my_utoa@digits& (0+255),b
 15287  02A4' EC00' F000'        	call	_my_utoa	;wreg free
 15288                           
 15289                           ;tasks.h: 342: ringbuf_put_str(tx, str);
 15290  02A8' C02F' F027'        	movff	command_get_data@tx,ringbuf_put_str@rb
 15291  02AC' C030' F028'        	movff	command_get_data@tx+1,ringbuf_put_str@rb+1
 15292  02B0' 0E00'              	movlw	low command_get_data@str
 15293  02B2' 0100               	movlb	0	; () banked
 15294  02B4' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 15295  02B6' 0E00'              	movlw	high command_get_data@str
 15296  02B8' 0100               	movlb	0	; () banked
 15297  02BA' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 15298  02BC' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 15299                           
 15300                           ;tasks.h: 343: ringbuf_put_str(tx, "d ");
 15301  02C0' C02F' F027'        	movff	command_get_data@tx,ringbuf_put_str@rb
 15302  02C4' C030' F028'        	movff	command_get_data@tx+1,ringbuf_put_str@rb+1
 15303  02C8' 0E00'              	movlw	low STR_27
 15304  02CA' 0100               	movlb	0	; () banked
 15305  02CC' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 15306  02CE' 0E00'              	movlw	high STR_27
 15307  02D0' 0100               	movlb	0	; () banked
 15308  02D2' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 15309  02D4' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 15310                           
 15311                           ;tasks.h: 344: my_utoa(str, (port[i].integrated_time / 3600) % 24, 2);
 15312  02D8' 0E00'              	movlw	low command_get_data@str
 15313  02DA' 0100               	movlb	0	; () banked
 15314  02DC' 6F00'              	movwf	my_utoa@str& (0+255),b
 15315  02DE' 0E00'              	movlw	high command_get_data@str
 15316  02E0' 0100               	movlb	0	; () banked
 15317  02E2' 6F00'              	movwf	(my_utoa@str+1)& (0+255),b
 15318  02E4' 0E10               	movlw	16
 15319  02E6' 0100               	movlb	0	; () banked
 15320  02E8' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 15321  02EA' 0E0E               	movlw	14
 15322  02EC' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
 15323  02EE' 0E00               	movlw	0
 15324  02F0' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
 15325  02F2' 0E00               	movlw	0
 15326  02F4' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
 15327  02F6' 0100               	movlb	0	; () banked
 15328  02F8' 5100'              	movf	command_get_data@i& (0+255),w,b
 15329  02FA' 0D17               	mullw	23
 15330  02FC' 0E10               	movlw	16
 15331  02FE' 26F3               	addwf	prodl,f,c
 15332  0300' 0E00               	movlw	0
 15333  0302' 22F4               	addwfc	prodh,f,c
 15334  0304' 0E00'              	movlw	low _port
 15335  0306' 24F3               	addwf	prodl,w,c
 15336  0308' 6ED9               	movwf	fsr2l,c
 15337  030A' 0E00'              	movlw	high _port
 15338  030C' 20F4               	addwfc	prodh,w,c
 15339  030E' 6EDA               	movwf	fsr2h,c
 15340  0310' CFDE F000'         	movff	postinc2,___lldiv@dividend
 15341  0314' CFDE F001'         	movff	postinc2,___lldiv@dividend+1
 15342  0318' CFDE F002'         	movff	postinc2,___lldiv@dividend+2
 15343  031C' CFDE F003'         	movff	postinc2,___lldiv@dividend+3
 15344  0320' EC00' F000'        	call	___lldiv	;wreg free
 15345  0324' C000' F00D'        	movff	?___lldiv,___llmod@dividend
 15346  0328' C001' F00E'        	movff	?___lldiv+1,___llmod@dividend+1
 15347  032C' C002' F00F'        	movff	?___lldiv+2,___llmod@dividend+2
 15348  0330' C003' F010'        	movff	?___lldiv+3,___llmod@dividend+3
 15349  0334' 0E18               	movlw	24
 15350  0336' 0100               	movlb	0	; () banked
 15351  0338' 6F00'              	movwf	___llmod@divisor& (0+255),b
 15352  033A' 0E00               	movlw	0
 15353  033C' 6F00'              	movwf	(___llmod@divisor+1)& (0+255),b
 15354  033E' 0E00               	movlw	0
 15355  0340' 6F00'              	movwf	(___llmod@divisor+2)& (0+255),b
 15356  0342' 0E00               	movlw	0
 15357  0344' 6F00'              	movwf	(___llmod@divisor+3)& (0+255),b
 15358  0346' EC00' F000'        	call	___llmod	;wreg free
 15359  034A' C00D' F022'        	movff	?___llmod,my_utoa@value
 15360  034E' C00E' F023'        	movff	?___llmod+1,my_utoa@value+1
 15361  0352' 0E02               	movlw	2
 15362  0354' 0100               	movlb	0	; () banked
 15363  0356' 6F00'              	movwf	my_utoa@digits& (0+255),b
 15364  0358' EC00' F000'        	call	_my_utoa	;wreg free
 15365                           
 15366                           ;tasks.h: 345: ringbuf_put_str(tx, str);
 15367  035C' C02F' F027'        	movff	command_get_data@tx,ringbuf_put_str@rb
 15368  0360' C030' F028'        	movff	command_get_data@tx+1,ringbuf_put_str@rb+1
 15369  0364' 0E00'              	movlw	low command_get_data@str
 15370  0366' 0100               	movlb	0	; () banked
 15371  0368' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 15372  036A' 0E00'              	movlw	high command_get_data@str
 15373  036C' 0100               	movlb	0	; () banked
 15374  036E' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 15375  0370' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 15376                           
 15377                           ;tasks.h: 346: ringbuf_put_str(tx, "h ");
 15378  0374' C02F' F027'        	movff	command_get_data@tx,ringbuf_put_str@rb
 15379  0378' C030' F028'        	movff	command_get_data@tx+1,ringbuf_put_str@rb+1
 15380  037C' 0E00'              	movlw	low STR_28
 15381  037E' 0100               	movlb	0	; () banked
 15382  0380' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 15383  0382' 0E00'              	movlw	high STR_28
 15384  0384' 0100               	movlb	0	; () banked
 15385  0386' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 15386  0388' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 15387                           
 15388                           ;tasks.h: 347: my_utoa(str, (port[i].integrated_time / 60) % 60, 2);
 15389  038C' 0E00'              	movlw	low command_get_data@str
 15390  038E' 0100               	movlb	0	; () banked
 15391  0390' 6F00'              	movwf	my_utoa@str& (0+255),b
 15392  0392' 0E00'              	movlw	high command_get_data@str
 15393  0394' 0100               	movlb	0	; () banked
 15394  0396' 6F00'              	movwf	(my_utoa@str+1)& (0+255),b
 15395  0398' 0E3C               	movlw	60
 15396  039A' 0100               	movlb	0	; () banked
 15397  039C' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 15398  039E' 0E00               	movlw	0
 15399  03A0' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
 15400  03A2' 0E00               	movlw	0
 15401  03A4' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
 15402  03A6' 0E00               	movlw	0
 15403  03A8' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
 15404  03AA' 0100               	movlb	0	; () banked
 15405  03AC' 5100'              	movf	command_get_data@i& (0+255),w,b
 15406  03AE' 0D17               	mullw	23
 15407  03B0' 0E10               	movlw	16
 15408  03B2' 26F3               	addwf	prodl,f,c
 15409  03B4' 0E00               	movlw	0
 15410  03B6' 22F4               	addwfc	prodh,f,c
 15411  03B8' 0E00'              	movlw	low _port
 15412  03BA' 24F3               	addwf	prodl,w,c
 15413  03BC' 6ED9               	movwf	fsr2l,c
 15414  03BE' 0E00'              	movlw	high _port
 15415  03C0' 20F4               	addwfc	prodh,w,c
 15416  03C2' 6EDA               	movwf	fsr2h,c
 15417  03C4' CFDE F000'         	movff	postinc2,___lldiv@dividend
 15418  03C8' CFDE F001'         	movff	postinc2,___lldiv@dividend+1
 15419  03CC' CFDE F002'         	movff	postinc2,___lldiv@dividend+2
 15420  03D0' CFDE F003'         	movff	postinc2,___lldiv@dividend+3
 15421  03D4' EC00' F000'        	call	___lldiv	;wreg free
 15422  03D8' C000' F00D'        	movff	?___lldiv,___llmod@dividend
 15423  03DC' C001' F00E'        	movff	?___lldiv+1,___llmod@dividend+1
 15424  03E0' C002' F00F'        	movff	?___lldiv+2,___llmod@dividend+2
 15425  03E4' C003' F010'        	movff	?___lldiv+3,___llmod@dividend+3
 15426  03E8' 0E3C               	movlw	60
 15427  03EA' 0100               	movlb	0	; () banked
 15428  03EC' 6F00'              	movwf	___llmod@divisor& (0+255),b
 15429  03EE' 0E00               	movlw	0
 15430  03F0' 6F00'              	movwf	(___llmod@divisor+1)& (0+255),b
 15431  03F2' 0E00               	movlw	0
 15432  03F4' 6F00'              	movwf	(___llmod@divisor+2)& (0+255),b
 15433  03F6' 0E00               	movlw	0
 15434  03F8' 6F00'              	movwf	(___llmod@divisor+3)& (0+255),b
 15435  03FA' EC00' F000'        	call	___llmod	;wreg free
 15436  03FE' C00D' F022'        	movff	?___llmod,my_utoa@value
 15437  0402' C00E' F023'        	movff	?___llmod+1,my_utoa@value+1
 15438  0406' 0E02               	movlw	2
 15439  0408' 0100               	movlb	0	; () banked
 15440  040A' 6F00'              	movwf	my_utoa@digits& (0+255),b
 15441  040C' EC00' F000'        	call	_my_utoa	;wreg free
 15442                           
 15443                           ;tasks.h: 348: ringbuf_put_str(tx, str);
 15444  0410' C02F' F027'        	movff	command_get_data@tx,ringbuf_put_str@rb
 15445  0414' C030' F028'        	movff	command_get_data@tx+1,ringbuf_put_str@rb+1
 15446  0418' 0E00'              	movlw	low command_get_data@str
 15447  041A' 0100               	movlb	0	; () banked
 15448  041C' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 15449  041E' 0E00'              	movlw	high command_get_data@str
 15450  0420' 0100               	movlb	0	; () banked
 15451  0422' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 15452  0424' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 15453                           
 15454                           ;tasks.h: 349: ringbuf_put_str(tx, "m ");
 15455  0428' C02F' F027'        	movff	command_get_data@tx,ringbuf_put_str@rb
 15456  042C' C030' F028'        	movff	command_get_data@tx+1,ringbuf_put_str@rb+1
 15457  0430' 0E00'              	movlw	low STR_29
 15458  0432' 0100               	movlb	0	; () banked
 15459  0434' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 15460  0436' 0E00'              	movlw	high STR_29
 15461  0438' 0100               	movlb	0	; () banked
 15462  043A' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 15463  043C' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 15464                           
 15465                           ;tasks.h: 350: my_utoa(str, port[i].integrated_time % 60, 2);
 15466  0440' 0E00'              	movlw	low command_get_data@str
 15467  0442' 0100               	movlb	0	; () banked
 15468  0444' 6F00'              	movwf	my_utoa@str& (0+255),b
 15469  0446' 0E00'              	movlw	high command_get_data@str
 15470  0448' 0100               	movlb	0	; () banked
 15471  044A' 6F00'              	movwf	(my_utoa@str+1)& (0+255),b
 15472  044C' 0100               	movlb	0	; () banked
 15473  044E' 5100'              	movf	command_get_data@i& (0+255),w,b
 15474  0450' 0D17               	mullw	23
 15475  0452' 0E10               	movlw	16
 15476  0454' 26F3               	addwf	prodl,f,c
 15477  0456' 0E00               	movlw	0
 15478  0458' 22F4               	addwfc	prodh,f,c
 15479  045A' 0E00'              	movlw	low _port
 15480  045C' 24F3               	addwf	prodl,w,c
 15481  045E' 6ED9               	movwf	fsr2l,c
 15482  0460' 0E00'              	movlw	high _port
 15483  0462' 20F4               	addwfc	prodh,w,c
 15484  0464' 6EDA               	movwf	fsr2h,c
 15485  0466' CFDE F00D'         	movff	postinc2,___llmod@dividend
 15486  046A' CFDE F00E'         	movff	postinc2,___llmod@dividend+1
 15487  046E' CFDE F00F'         	movff	postinc2,___llmod@dividend+2
 15488  0472' CFDE F010'         	movff	postinc2,___llmod@dividend+3
 15489  0476' 0E3C               	movlw	60
 15490  0478' 0100               	movlb	0	; () banked
 15491  047A' 6F00'              	movwf	___llmod@divisor& (0+255),b
 15492  047C' 0E00               	movlw	0
 15493  047E' 6F00'              	movwf	(___llmod@divisor+1)& (0+255),b
 15494  0480' 0E00               	movlw	0
 15495  0482' 6F00'              	movwf	(___llmod@divisor+2)& (0+255),b
 15496  0484' 0E00               	movlw	0
 15497  0486' 6F00'              	movwf	(___llmod@divisor+3)& (0+255),b
 15498  0488' EC00' F000'        	call	___llmod	;wreg free
 15499  048C' C00D' F022'        	movff	?___llmod,my_utoa@value
 15500  0490' C00E' F023'        	movff	?___llmod+1,my_utoa@value+1
 15501  0494' 0E02               	movlw	2
 15502  0496' 0100               	movlb	0	; () banked
 15503  0498' 6F00'              	movwf	my_utoa@digits& (0+255),b
 15504  049A' EC00' F000'        	call	_my_utoa	;wreg free
 15505                           
 15506                           ;tasks.h: 351: ringbuf_put_str(tx, str);
 15507  049E' C02F' F027'        	movff	command_get_data@tx,ringbuf_put_str@rb
 15508  04A2' C030' F028'        	movff	command_get_data@tx+1,ringbuf_put_str@rb+1
 15509  04A6' 0E00'              	movlw	low command_get_data@str
 15510  04A8' 0100               	movlb	0	; () banked
 15511  04AA' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 15512  04AC' 0E00'              	movlw	high command_get_data@str
 15513  04AE' 0100               	movlb	0	; () banked
 15514  04B0' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 15515  04B2' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 15516                           
 15517                           ;tasks.h: 352: ringbuf_put_str(tx, "s");
 15518  04B6' C02F' F027'        	movff	command_get_data@tx,ringbuf_put_str@rb
 15519  04BA' C030' F028'        	movff	command_get_data@tx+1,ringbuf_put_str@rb+1
 15520  04BE' 0E00'              	movlw	low (STR_96+7)
 15521  04C0' 0100               	movlb	0	; () banked
 15522  04C2' 6F00'              	movwf	ringbuf_put_str@str& (0+255),b
 15523  04C4' 0E00'              	movlw	high (STR_96+7)
 15524  04C6' 0100               	movlb	0	; () banked
 15525  04C8' 6F00'              	movwf	(ringbuf_put_str@str+1)& (0+255),b
 15526  04CA' EC00' F000'        	call	_ringbuf_put_str	;wreg free
 15527                           
 15528                           ;tasks.h: 354: }
 15529                           
 15530                           ;tasks.h: 353: break;
 15531  04CE' 0012               	return	
 15532  04D0'                    l8045:
 15533  04D0' 0100               	movlb	0	; () banked
 15534  04D2' 5100'              	movf	command_get_data@item& (0+255),w,b
 15535                           
 15536                           ; Switch size 1, requested type "space"
 15537                           ; Number of cases is 3, Range of values is 0 to 2
 15538                           ; switch strategies available:
 15539                           ; Name         Instructions Cycles
 15540                           ; simple_byte           10     6 (average)
 15541                           ;	Chosen strategy is simple_byte
 15542  04D4' 0A00               	xorlw	0	; case 0
 15543  04D6' B4D8               	btfsc	status,2,c
 15544  04D8' D594               	goto	l7995
 15545  04DA' 0A01               	xorlw	1	; case 1
 15546  04DC' B4D8               	btfsc	status,2,c
 15547  04DE' D65B               	goto	l8009
 15548  04E0' 0A03               	xorlw	3	; case 2
 15549  04E2' A4D8               	btfss	status,2,c
 15550  04E4' 0012               	return	
 15551  04E6' D68A               	goto	l8015
 15552  04E8'                    __end_of_command_get_data:
 15553                           	opt stack 0
 15554                           tblptru	equ	0xFF8
 15555                           tblptrh	equ	0xFF7
 15556                           tblptrl	equ	0xFF6
 15557                           tablat	equ	0xFF5
 15558                           prodh	equ	0xFF4
 15559                           prodl	equ	0xFF3
 15560                           intcon	equ	0xFF2
 15561                           indf0	equ	0xFEF
 15562                           postinc0	equ	0xFEE
 15563                           fsr0h	equ	0xFEA
 15564                           fsr0l	equ	0xFE9
 15565                           wreg	equ	0xFE8
 15566                           postinc1	equ	0xFE6
 15567                           postdec1	equ	0xFE5
 15568                           fsr1h	equ	0xFE2
 15569                           fsr1l	equ	0xFE1
 15570                           indf2	equ	0xFDF
 15571                           postinc2	equ	0xFDE
 15572                           postdec2	equ	0xFDD
 15573                           plusw2	equ	0xFDB
 15574                           fsr2h	equ	0xFDA
 15575                           fsr2l	equ	0xFD9
 15576                           status	equ	0xFD8
 15577                           
 15578 ;; *************** function _ringbuf_put_str *****************
 15579 ;; Defined at:
 15580 ;;		line 58 in file "../My_header\My_ringbuf.h"
 15581 ;; Parameters:    Size  Location     Type
 15582 ;;  rb              2   39[BANK0 ] PTR struct ringbuf
 15583 ;;		 -> usb_tx(8), 
 15584 ;;  str             2   41[BANK0 ] PTR const unsigned char 
 15585 ;;		 -> STR_144(2), STR_143(4), STR_142(2), STR_141(2), 
 15586 ;;		 -> normal_loop@str(15), STR_140(2), STR_139(2), STR_138(2), 
 15587 ;;		 -> STR_137(2), STR_136(9), STR_89(62), STR_78(62), 
 15588 ;;		 -> STR_67(62), STR_62(35), STR_57(18), STR_54(36), 
 15589 ;;		 -> STR_53(24), STR_44(568), STR_39(2), STR_38(3), 
 15590 ;;		 -> STR_37(3), STR_36(3), command_get_data@str(10), STR_35(2), 
 15591 ;;		 -> STR_34(5), STR_33(2), STR_32(3), STR_31(2), 
 15592 ;;		 -> STR_6(8), print_time@str(30), STR_4(3), print_time_dec@str(10), 
 15593 ;;		 -> STR_3(4), STR_2(4), 
 15594 ;; Auto vars:     Size  Location     Type
 15595 ;;		None
 15596 ;; Return value:  Size  Location     Type
 15597 ;;		None               void
 15598 ;; Registers used:
 15599 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15600 ;; Tracked objects:
 15601 ;;		On entry : 0/0
 15602 ;;		On exit  : 0/0
 15603 ;;		Unchanged: 0/0
 15604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15605 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15608 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15609 ;;Total ram usage:        4 bytes
 15610 ;; Hardware stack levels used:    1
 15611 ;; Hardware stack levels required when called:    5
 15612 ;; This function calls:
 15613 ;;		_ringbuf_put
 15614 ;; This function is called by:
 15615 ;;		_my_terminal_loop
 15616 ;;		_print_time
 15617 ;;		_command_at_hand
 15618 ;;		_command_get_data
 15619 ;;		_command_operation
 15620 ;;		_normal_loop
 15621 ;;		_print_time_dec
 15622 ;; This function uses a non-reentrant model
 15623 ;;
 15624                           
 15625                           	psect	text46
 15626  0000'                    __ptext46:
 15627                           	opt stack 0
 15628  0000'                    _ringbuf_put_str:
 15629                           	opt stack 24
 15630                           
 15631                           ;My_header\My_ringbuf.h: 59: while (*str) {
 15632                           
 15633                           ;incstack = 0
 15634  0000' D01C               	goto	l7221
 15635  0002'                    l7217:
 15636                           
 15637                           ;My_header\My_ringbuf.h: 60: ringbuf_put(rb, *str++);
 15638  0002' C027' F020'        	movff	ringbuf_put_str@rb,ringbuf_put@rb
 15639  0006' C028' F021'        	movff	ringbuf_put_str@rb+1,ringbuf_put@rb+1
 15640  000A' C029' FFF6         	movff	ringbuf_put_str@str,tblptrl
 15641  000E' C02A' FFF7         	movff	ringbuf_put_str@str+1,tblptrh
 15642  0012' 0E00'              	movlw	low (__mediumconst shr (0+16))
 15643  0014' 6EF8               	movwf	tblptru,c
 15644  0016' 0EFF'              	movlw	(high __ramtop+-1)
 15645  0018' 64F7               	cpfsgt	tblptrh,c
 15646  001A' D003               	bra	u8647
 15647  001C' 0008               	tblrd		*
 15648  001E' 50F5               	movf	tablat,w,c
 15649  0020' D005               	bra	u8640
 15650  0022'                    u8647:
 15651  0022' CFF6 FFE9          	movff	tblptrl,fsr0l
 15652  0026' CFF7 FFEA          	movff	tblptrh,fsr0h
 15653  002A' 50EF               	movf	indf0,w,c
 15654  002C'                    u8640:
 15655  002C' 0100               	movlb	0	; () banked
 15656  002E' 6F00'              	movwf	ringbuf_put@asciicode& (0+255),b
 15657  0030' EC00' F000'        	call	_ringbuf_put	;wreg free
 15658  0034' 0100               	movlb	0	; () banked
 15659  0036' 4B00'              	infsnz	ringbuf_put_str@str& (0+255),f,b
 15660  0038' 2B00'              	incf	(ringbuf_put_str@str+1)& (0+255),f,b
 15661  003A'                    l7221:
 15662  003A' C029' FFF6         	movff	ringbuf_put_str@str,tblptrl
 15663  003E' C02A' FFF7         	movff	ringbuf_put_str@str+1,tblptrh
 15664  0042' 0E00'              	movlw	low (__mediumconst shr (0+16))
 15665  0044' 6EF8               	movwf	tblptru,c
 15666  0046' 0EFF'              	movlw	(high __ramtop+-1)
 15667  0048' 64F7               	cpfsgt	tblptrh,c
 15668  004A' D003               	bra	u8657
 15669  004C' 0008               	tblrd		*
 15670  004E' 50F5               	movf	tablat,w,c
 15671  0050' D005               	bra	u8650
 15672  0052'                    u8657:
 15673  0052' CFF6 FFE9          	movff	tblptrl,fsr0l
 15674  0056' CFF7 FFEA          	movff	tblptrh,fsr0h
 15675  005A' 50EF               	movf	indf0,w,c
 15676  005C'                    u8650:
 15677  005C' 0900               	iorlw	0
 15678  005E' B4D8               	btfsc	status,2,c
 15679  0060' 0012               	return	
 15680  0062' D7CF               	goto	l7217
 15681  0064'                    __end_of_ringbuf_put_str:
 15682                           	opt stack 0
 15683                           tblptru	equ	0xFF8
 15684                           tblptrh	equ	0xFF7
 15685                           tblptrl	equ	0xFF6
 15686                           tablat	equ	0xFF5
 15687                           prodh	equ	0xFF4
 15688                           prodl	equ	0xFF3
 15689                           intcon	equ	0xFF2
 15690                           indf0	equ	0xFEF
 15691                           postinc0	equ	0xFEE
 15692                           fsr0h	equ	0xFEA
 15693                           fsr0l	equ	0xFE9
 15694                           wreg	equ	0xFE8
 15695                           postinc1	equ	0xFE6
 15696                           postdec1	equ	0xFE5
 15697                           fsr1h	equ	0xFE2
 15698                           fsr1l	equ	0xFE1
 15699                           indf2	equ	0xFDF
 15700                           postinc2	equ	0xFDE
 15701                           postdec2	equ	0xFDD
 15702                           plusw2	equ	0xFDB
 15703                           fsr2h	equ	0xFDA
 15704                           fsr2l	equ	0xFD9
 15705                           status	equ	0xFD8
 15706                           
 15707 ;; *************** function _ringbuf_put_num *****************
 15708 ;; Defined at:
 15709 ;;		line 47 in file "../My_header\My_ringbuf.h"
 15710 ;; Parameters:    Size  Location     Type
 15711 ;;  rb              2   39[BANK0 ] PTR struct ringbuf
 15712 ;;		 -> usb_tx(8), 
 15713 ;;  value           2   41[BANK0 ] const unsigned int 
 15714 ;;  digits          1   43[BANK0 ] unsigned char 
 15715 ;; Auto vars:     Size  Location     Type
 15716 ;;  i               1   44[BANK0 ] unsigned char 
 15717 ;;  temp            2   45[BANK0 ] unsigned int 
 15718 ;; Return value:  Size  Location     Type
 15719 ;;		None               void
 15720 ;; Registers used:
 15721 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 15722 ;; Tracked objects:
 15723 ;;		On entry : 0/0
 15724 ;;		On exit  : 0/0
 15725 ;;		Unchanged: 0/0
 15726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15727 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15728 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15730 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15731 ;;Total ram usage:        8 bytes
 15732 ;; Hardware stack levels used:    1
 15733 ;; Hardware stack levels required when called:    5
 15734 ;; This function calls:
 15735 ;;		___lwdiv
 15736 ;;		___lwmod
 15737 ;;		_ringbuf_put
 15738 ;; This function is called by:
 15739 ;;		_my_terminal_loop
 15740 ;;		_command_get_data
 15741 ;; This function uses a non-reentrant model
 15742 ;;
 15743                           
 15744                           	psect	text47
 15745  0000'                    __ptext47:
 15746                           	opt stack 0
 15747  0000'                    _ringbuf_put_num:
 15748                           	opt stack 24
 15749                           
 15750                           ;My_header\My_ringbuf.h: 48: while (digits--) {
 15751                           
 15752                           ;incstack = 0
 15753  0000' D038               	goto	l7545
 15754  0002'                    l184:
 15755                           
 15756                           ; BSR set to: 0
 15757                           ;My_header\My_ringbuf.h: 49: uint16_t temp = value;
 15758  0002' C029' F02D'        	movff	ringbuf_put_num@value,ringbuf_put_num@temp
 15759  0006' C02A' F02E'        	movff	ringbuf_put_num@value+1,ringbuf_put_num@temp+1
 15760                           
 15761                           ; BSR set to: 0
 15762                           ;My_header\My_ringbuf.h: 50: for (uint8_t i = 0; i < digits; i++) {
 15763  000A' 0E00               	movlw	0
 15764  000C' 0100               	movlb	0	; () banked
 15765  000E' 6F00'              	movwf	ringbuf_put_num@i& (0+255),b
 15766  0010' D011               	goto	l7539
 15767  0012'                    l7535:
 15768                           
 15769                           ; BSR set to: 0
 15770                           ;My_header\My_ringbuf.h: 51: temp /= 10;
 15771  0012' C02D' F019'        	movff	ringbuf_put_num@temp,___lwdiv@dividend
 15772  0016' C02E' F01A'        	movff	ringbuf_put_num@temp+1,___lwdiv@dividend+1
 15773  001A' 0E00               	movlw	0
 15774  001C' 0100               	movlb	0	; () banked
 15775  001E' 6F00'              	movwf	(___lwdiv@divisor+1)& (0+255),b
 15776  0020' 0E0A               	movlw	10
 15777  0022' 6F00'              	movwf	___lwdiv@divisor& (0+255),b
 15778  0024' EC00' F000'        	call	___lwdiv	;wreg free
 15779  0028' C019' F02D'        	movff	?___lwdiv,ringbuf_put_num@temp
 15780  002C' C01A' F02E'        	movff	?___lwdiv+1,ringbuf_put_num@temp+1
 15781  0030' 0100               	movlb	0	; () banked
 15782  0032' 2B00'              	incf	ringbuf_put_num@i& (0+255),f,b
 15783  0034'                    l7539:
 15784                           
 15785                           ; BSR set to: 0
 15786  0034' 0100               	movlb	0	; () banked
 15787  0036' 5100'              	movf	ringbuf_put_num@digits& (0+255),w,b
 15788  0038' 0100               	movlb	0	; () banked
 15789  003A' 5D00'              	subwf	ringbuf_put_num@i& (0+255),w,b
 15790  003C' A0D8               	btfss	status,0,c
 15791  003E' D7E9               	goto	l7535
 15792                           
 15793                           ; BSR set to: 0
 15794                           ;My_header\My_ringbuf.h: 52: }
 15795                           ;My_header\My_ringbuf.h: 53: temp %= 10;
 15796                           
 15797                           ; BSR set to: 0
 15798  0040' C02D' F01E'        	movff	ringbuf_put_num@temp,___lwmod@dividend
 15799  0044' C02E' F01F'        	movff	ringbuf_put_num@temp+1,___lwmod@dividend+1
 15800  0048' 0E00               	movlw	0
 15801  004A' 6E21'              	movwf	___lwmod@divisor+1,c
 15802  004C' 0E0A               	movlw	10
 15803  004E' 6E20'              	movwf	___lwmod@divisor,c
 15804  0050' EC00' F000'        	call	___lwmod	;wreg free
 15805  0054' C01E' F02D'        	movff	?___lwmod,ringbuf_put_num@temp
 15806  0058' C01F' F02E'        	movff	?___lwmod+1,ringbuf_put_num@temp+1
 15807                           
 15808                           ;My_header\My_ringbuf.h: 54: ringbuf_put(rb, temp + '0');
 15809  005C' C027' F020'        	movff	ringbuf_put_num@rb,ringbuf_put@rb
 15810  0060' C028' F021'        	movff	ringbuf_put_num@rb+1,ringbuf_put@rb+1
 15811  0064' 0100               	movlb	0	; () banked
 15812  0066' 5100'              	movf	ringbuf_put_num@temp& (0+255),w,b
 15813  0068' 0F30               	addlw	48
 15814  006A' 0100               	movlb	0	; () banked
 15815  006C' 6F00'              	movwf	ringbuf_put@asciicode& (0+255),b
 15816  006E' EC00' F000'        	call	_ringbuf_put	;wreg free
 15817  0072'                    l7545:
 15818  0072' 0100               	movlb	0	; () banked
 15819  0074' 0700'              	decf	ringbuf_put_num@digits& (0+255),f,b
 15820  0076' 0100               	movlb	0	; () banked
 15821  0078' 2900'              	incf	ringbuf_put_num@digits& (0+255),w,b
 15822  007A' B4D8               	btfsc	status,2,c
 15823  007C' 0012               	return	
 15824  007E' D7C1               	goto	l184
 15825  0080'                    __end_of_ringbuf_put_num:
 15826                           	opt stack 0
 15827                           tblptru	equ	0xFF8
 15828                           tblptrh	equ	0xFF7
 15829                           tblptrl	equ	0xFF6
 15830                           tablat	equ	0xFF5
 15831                           prodh	equ	0xFF4
 15832                           prodl	equ	0xFF3
 15833                           intcon	equ	0xFF2
 15834                           indf0	equ	0xFEF
 15835                           postinc0	equ	0xFEE
 15836                           fsr0h	equ	0xFEA
 15837                           fsr0l	equ	0xFE9
 15838                           wreg	equ	0xFE8
 15839                           postinc1	equ	0xFE6
 15840                           postdec1	equ	0xFE5
 15841                           fsr1h	equ	0xFE2
 15842                           fsr1l	equ	0xFE1
 15843                           indf2	equ	0xFDF
 15844                           postinc2	equ	0xFDE
 15845                           postdec2	equ	0xFDD
 15846                           plusw2	equ	0xFDB
 15847                           fsr2h	equ	0xFDA
 15848                           fsr2l	equ	0xFD9
 15849                           status	equ	0xFD8
 15850                           
 15851 ;; *************** function _my_utoa *****************
 15852 ;; Defined at:
 15853 ;;		line 11 in file "../My_header\My_stdlib.h"
 15854 ;; Parameters:    Size  Location     Type
 15855 ;;  str             2   32[BANK0 ] PTR unsigned char 
 15856 ;;		 -> command_get_data@str(10), display_LCD@str(10), print_time_dec@str(10), display_dec@str(10), 
 15857 ;;  value           2   34[BANK0 ] unsigned int 
 15858 ;;  digits          1   36[BANK0 ] unsigned char 
 15859 ;; Auto vars:     Size  Location     Type
 15860 ;;  v               2   38[BANK0 ] unsigned int 
 15861 ;;  d               1   37[BANK0 ] unsigned char 
 15862 ;; Return value:  Size  Location     Type
 15863 ;;		None               void
 15864 ;; Registers used:
 15865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15866 ;; Tracked objects:
 15867 ;;		On entry : 0/0
 15868 ;;		On exit  : 0/0
 15869 ;;		Unchanged: 0/0
 15870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15871 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15872 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15874 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15875 ;;Total ram usage:        8 bytes
 15876 ;; Hardware stack levels used:    1
 15877 ;; Hardware stack levels required when called:    4
 15878 ;; This function calls:
 15879 ;;		___lwdiv
 15880 ;;		___lwmod
 15881 ;; This function is called by:
 15882 ;;		_display_dec
 15883 ;;		_display_LCD
 15884 ;;		_command_get_data
 15885 ;;		_print_time_dec
 15886 ;; This function uses a non-reentrant model
 15887 ;;
 15888                           
 15889                           	psect	text48
 15890  0000'                    __ptext48:
 15891                           	opt stack 0
 15892  0000'                    _my_utoa:
 15893                           	opt stack 24
 15894                           
 15895                           ;My_header\My_stdlib.h: 12: uint16_t v;
 15896                           ;My_header\My_stdlib.h: 13: uint8_t d;
 15897                           ;My_header\My_stdlib.h: 14: while (digits--) {
 15898                           
 15899                           ; BSR set to: 0
 15900                           ;incstack = 0
 15901  0000' D035               	goto	l7521
 15902  0002'                    l459:
 15903                           
 15904                           ; BSR set to: 0
 15905                           ;My_header\My_stdlib.h: 15: v = value;
 15906  0002' C022' F026'        	movff	my_utoa@value,my_utoa@v
 15907  0006' C023' F027'        	movff	my_utoa@value+1,my_utoa@v+1
 15908                           
 15909                           ;My_header\My_stdlib.h: 16: d = digits;
 15910  000A' C024' F025'        	movff	my_utoa@digits,my_utoa@d
 15911                           
 15912                           ;My_header\My_stdlib.h: 17: while (d--) {
 15913  000E' D00F               	goto	l7513
 15914  0010'                    l7511:
 15915                           
 15916                           ; BSR set to: 0
 15917                           ;My_header\My_stdlib.h: 18: v /= 10;
 15918  0010' C026' F019'        	movff	my_utoa@v,___lwdiv@dividend
 15919  0014' C027' F01A'        	movff	my_utoa@v+1,___lwdiv@dividend+1
 15920  0018' 0E00               	movlw	0
 15921  001A' 0100               	movlb	0	; () banked
 15922  001C' 6F00'              	movwf	(___lwdiv@divisor+1)& (0+255),b
 15923  001E' 0E0A               	movlw	10
 15924  0020' 6F00'              	movwf	___lwdiv@divisor& (0+255),b
 15925  0022' EC00' F000'        	call	___lwdiv	;wreg free
 15926  0026' C019' F026'        	movff	?___lwdiv,my_utoa@v
 15927  002A' C01A' F027'        	movff	?___lwdiv+1,my_utoa@v+1
 15928  002E'                    l7513:
 15929  002E' 0100               	movlb	0	; () banked
 15930  0030' 0700'              	decf	my_utoa@d& (0+255),f,b
 15931  0032' 0100               	movlb	0	; () banked
 15932  0034' 2900'              	incf	my_utoa@d& (0+255),w,b
 15933  0036' A4D8               	btfss	status,2,c
 15934  0038' D7EB               	goto	l7511
 15935                           
 15936                           ; BSR set to: 0
 15937                           ;My_header\My_stdlib.h: 19: }
 15938                           ;My_header\My_stdlib.h: 20: v %= 10;
 15939                           
 15940                           ; BSR set to: 0
 15941  003A' C026' F01E'        	movff	my_utoa@v,___lwmod@dividend
 15942  003E' C027' F01F'        	movff	my_utoa@v+1,___lwmod@dividend+1
 15943  0042' 0E00               	movlw	0
 15944  0044' 6E21'              	movwf	___lwmod@divisor+1,c
 15945  0046' 0E0A               	movlw	10
 15946  0048' 6E20'              	movwf	___lwmod@divisor,c
 15947  004A' EC00' F000'        	call	___lwmod	;wreg free
 15948  004E' C01E' F026'        	movff	?___lwmod,my_utoa@v
 15949  0052' C01F' F027'        	movff	?___lwmod+1,my_utoa@v+1
 15950                           
 15951                           ;My_header\My_stdlib.h: 21: *str++ = '0' + v;
 15952  0056' 0100               	movlb	0	; () banked
 15953  0058' 5100'              	movf	my_utoa@v& (0+255),w,b
 15954  005A' 0F30               	addlw	48
 15955  005C' C020' FFD9         	movff	my_utoa@str,fsr2l
 15956  0060' C021' FFDA         	movff	my_utoa@str+1,fsr2h
 15957  0064' 6EDF               	movwf	indf2,c
 15958                           
 15959                           ; BSR set to: 0
 15960  0066' 0100               	movlb	0	; () banked
 15961  0068' 4B00'              	infsnz	my_utoa@str& (0+255),f,b
 15962  006A' 2B00'              	incf	(my_utoa@str+1)& (0+255),f,b
 15963  006C'                    l7521:
 15964  006C' 0100               	movlb	0	; () banked
 15965  006E' 0700'              	decf	my_utoa@digits& (0+255),f,b
 15966  0070' 0100               	movlb	0	; () banked
 15967  0072' 2900'              	incf	my_utoa@digits& (0+255),w,b
 15968  0074' A4D8               	btfss	status,2,c
 15969  0076' D7C5               	goto	l459
 15970                           
 15971                           ; BSR set to: 0
 15972                           ;My_header\My_stdlib.h: 22: }
 15973                           ;My_header\My_stdlib.h: 23: *str = '\0';
 15974                           
 15975                           ; BSR set to: 0
 15976  0078' C020' FFD9         	movff	my_utoa@str,fsr2l
 15977  007C' C021' FFDA         	movff	my_utoa@str+1,fsr2h
 15978  0080' 0E00               	movlw	0
 15979  0082' 6EDF               	movwf	indf2,c
 15980                           
 15981                           ; BSR set to: 0
 15982  0084' 0012               	return		;funcret
 15983  0086'                    __end_of_my_utoa:
 15984                           	opt stack 0
 15985                           tblptru	equ	0xFF8
 15986                           tblptrh	equ	0xFF7
 15987                           tblptrl	equ	0xFF6
 15988                           tablat	equ	0xFF5
 15989                           prodh	equ	0xFF4
 15990                           prodl	equ	0xFF3
 15991                           intcon	equ	0xFF2
 15992                           indf0	equ	0xFEF
 15993                           postinc0	equ	0xFEE
 15994                           fsr0h	equ	0xFEA
 15995                           fsr0l	equ	0xFE9
 15996                           wreg	equ	0xFE8
 15997                           postinc1	equ	0xFE6
 15998                           postdec1	equ	0xFE5
 15999                           fsr1h	equ	0xFE2
 16000                           fsr1l	equ	0xFE1
 16001                           indf2	equ	0xFDF
 16002                           postinc2	equ	0xFDE
 16003                           postdec2	equ	0xFDD
 16004                           plusw2	equ	0xFDB
 16005                           fsr2h	equ	0xFDA
 16006                           fsr2l	equ	0xFD9
 16007                           status	equ	0xFD8
 16008                           
 16009 ;; *************** function ___lwmod *****************
 16010 ;; Defined at:
 16011 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
 16012 ;; Parameters:    Size  Location     Type
 16013 ;;  dividend        2   30[COMRAM] unsigned int 
 16014 ;;  divisor         2   32[COMRAM] unsigned int 
 16015 ;; Auto vars:     Size  Location     Type
 16016 ;;  counter         1    0[BANK0 ] unsigned char 
 16017 ;; Return value:  Size  Location     Type
 16018 ;;                  2   30[COMRAM] unsigned int 
 16019 ;; Registers used:
 16020 ;;		wreg, status,2, status,0
 16021 ;; Tracked objects:
 16022 ;;		On entry : 0/0
 16023 ;;		On exit  : 0/0
 16024 ;;		Unchanged: 0/0
 16025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16026 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16027 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16029 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16030 ;;Total ram usage:        5 bytes
 16031 ;; Hardware stack levels used:    1
 16032 ;; Hardware stack levels required when called:    3
 16033 ;; This function calls:
 16034 ;;		Nothing
 16035 ;; This function is called by:
 16036 ;;		_ringbuf_put_num
 16037 ;;		_my_utoa
 16038 ;;		_display_LCD
 16039 ;;		_command_get_data
 16040 ;;		_normal_loop
 16041 ;;		_sprintf
 16042 ;;		_tx_sendn
 16043 ;; This function uses a non-reentrant model
 16044 ;;
 16045                           
 16046                           	psect	text49
 16047  0000'                    __ptext49:
 16048                           	opt stack 0
 16049  0000'                    ___lwmod:
 16050                           	opt stack 24
 16051                           
 16052                           ; BSR set to: 0
 16053                           ;incstack = 0
 16054  0000' 5020'              	movf	___lwmod@divisor,w,c
 16055  0002' 1021'              	iorwf	___lwmod@divisor+1,w,c
 16056  0004' B4D8               	btfsc	status,2,c
 16057  0006' D01B               	goto	l1532
 16058  0008' 0E01               	movlw	1
 16059  000A' 0100               	movlb	0	; () banked
 16060  000C' 6F00'              	movwf	___lwmod@counter& (0+255),b
 16061  000E' D005               	goto	l7205
 16062  0010'                    l7203:
 16063                           
 16064                           ; BSR set to: 0
 16065  0010' 90D8               	bcf	status,0,c
 16066  0012' 3620'              	rlcf	___lwmod@divisor,f,c
 16067  0014' 3621'              	rlcf	___lwmod@divisor+1,f,c
 16068  0016' 0100               	movlb	0	; () banked
 16069  0018' 2B00'              	incf	___lwmod@counter& (0+255),f,b
 16070  001A'                    l7205:
 16071                           
 16072                           ; BSR set to: 0
 16073  001A' AE21'              	btfss	___lwmod@divisor+1,7,c
 16074  001C' D7F9               	goto	l7203
 16075  001E'                    l7207:
 16076                           
 16077                           ; BSR set to: 0
 16078  001E' 5020'              	movf	___lwmod@divisor,w,c
 16079  0020' 5C1E'              	subwf	___lwmod@dividend,w,c
 16080  0022' 5021'              	movf	___lwmod@divisor+1,w,c
 16081  0024' 581F'              	subwfb	___lwmod@dividend+1,w,c
 16082  0026' A0D8               	btfss	status,0,c
 16083  0028' D004               	goto	l7211
 16084                           
 16085                           ; BSR set to: 0
 16086  002A' 5020'              	movf	___lwmod@divisor,w,c
 16087  002C' 5E1E'              	subwf	___lwmod@dividend,f,c
 16088  002E' 5021'              	movf	___lwmod@divisor+1,w,c
 16089  0030' 5A1F'              	subwfb	___lwmod@dividend+1,f,c
 16090  0032'                    l7211:
 16091                           
 16092                           ; BSR set to: 0
 16093  0032' 90D8               	bcf	status,0,c
 16094  0034' 3221'              	rrcf	___lwmod@divisor+1,f,c
 16095  0036' 3220'              	rrcf	___lwmod@divisor,f,c
 16096                           
 16097                           ; BSR set to: 0
 16098  0038' 0100               	movlb	0	; () banked
 16099  003A' 2F00'              	decfsz	___lwmod@counter& (0+255),f,b
 16100  003C' D7F0               	goto	l7207
 16101  003E'                    l1532:
 16102  003E' C01E' F01E'        	movff	___lwmod@dividend,?___lwmod
 16103  0042' C01F' F01F'        	movff	___lwmod@dividend+1,?___lwmod+1
 16104  0046' 0012               	return		;funcret
 16105  0048'                    __end_of___lwmod:
 16106                           	opt stack 0
 16107                           tblptru	equ	0xFF8
 16108                           tblptrh	equ	0xFF7
 16109                           tblptrl	equ	0xFF6
 16110                           tablat	equ	0xFF5
 16111                           prodh	equ	0xFF4
 16112                           prodl	equ	0xFF3
 16113                           intcon	equ	0xFF2
 16114                           indf0	equ	0xFEF
 16115                           postinc0	equ	0xFEE
 16116                           fsr0h	equ	0xFEA
 16117                           fsr0l	equ	0xFE9
 16118                           wreg	equ	0xFE8
 16119                           postinc1	equ	0xFE6
 16120                           postdec1	equ	0xFE5
 16121                           fsr1h	equ	0xFE2
 16122                           fsr1l	equ	0xFE1
 16123                           indf2	equ	0xFDF
 16124                           postinc2	equ	0xFDE
 16125                           postdec2	equ	0xFDD
 16126                           plusw2	equ	0xFDB
 16127                           fsr2h	equ	0xFDA
 16128                           fsr2l	equ	0xFD9
 16129                           status	equ	0xFD8
 16130                           
 16131 ;; *************** function ___llmod *****************
 16132 ;; Defined at:
 16133 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\llmod.c"
 16134 ;; Parameters:    Size  Location     Type
 16135 ;;  dividend        4   13[BANK0 ] unsigned long 
 16136 ;;  divisor         4   17[BANK0 ] unsigned long 
 16137 ;; Auto vars:     Size  Location     Type
 16138 ;;  counter         1   30[COMRAM] unsigned char 
 16139 ;; Return value:  Size  Location     Type
 16140 ;;                  4   13[BANK0 ] unsigned long 
 16141 ;; Registers used:
 16142 ;;		wreg, status,2, status,0
 16143 ;; Tracked objects:
 16144 ;;		On entry : 0/0
 16145 ;;		On exit  : 0/0
 16146 ;;		Unchanged: 0/0
 16147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16148 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16149 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16151 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16152 ;;Total ram usage:        9 bytes
 16153 ;; Hardware stack levels used:    1
 16154 ;; Hardware stack levels required when called:    3
 16155 ;; This function calls:
 16156 ;;		Nothing
 16157 ;; This function is called by:
 16158 ;;		_my_utoa32
 16159 ;;		_display_LCD
 16160 ;;		_command_get_data
 16161 ;; This function uses a non-reentrant model
 16162 ;;
 16163                           
 16164                           	psect	text50
 16165  0000'                    __ptext50:
 16166                           	opt stack 0
 16167  0000'                    ___llmod:
 16168                           	opt stack 25
 16169                           
 16170                           ;incstack = 0
 16171  0000' 0100               	movlb	0	; () banked
 16172  0002' 5100'              	movf	___llmod@divisor& (0+255),w,b
 16173  0004' 0100               	movlb	0	; () banked
 16174  0006' 1100'              	iorwf	(___llmod@divisor+1)& (0+255),w,b
 16175  0008' 0100               	movlb	0	; () banked
 16176  000A' 1100'              	iorwf	(___llmod@divisor+2)& (0+255),w,b
 16177  000C' 0100               	movlb	0	; () banked
 16178  000E' 1100'              	iorwf	(___llmod@divisor+3)& (0+255),w,b
 16179  0010' B4D8               	btfsc	status,2,c
 16180  0012' D037               	goto	l1479
 16181                           
 16182                           ; BSR set to: 0
 16183  0014' 0E01               	movlw	1
 16184  0016' 6E1E'              	movwf	___llmod@counter,c
 16185  0018' D007               	goto	l7671
 16186  001A'                    l7669:
 16187                           
 16188                           ; BSR set to: 0
 16189  001A' 0100               	movlb	0	; () banked
 16190  001C' 90D8               	bcf	status,0,c
 16191  001E' 3700'              	rlcf	___llmod@divisor& (0+255),f,b
 16192  0020' 3700'              	rlcf	(___llmod@divisor+1)& (0+255),f,b
 16193  0022' 3700'              	rlcf	(___llmod@divisor+2)& (0+255),f,b
 16194  0024' 3700'              	rlcf	(___llmod@divisor+3)& (0+255),f,b
 16195  0026' 2A1E'              	incf	___llmod@counter,f,c
 16196  0028'                    l7671:
 16197                           
 16198                           ; BSR set to: 0
 16199  0028' 0100               	movlb	0	; () banked
 16200  002A' AF00'              	btfss	(___llmod@divisor+3)& (0+255),7,b
 16201  002C' D7F6               	goto	l7669
 16202  002E'                    l7673:
 16203                           
 16204                           ; BSR set to: 0
 16205  002E' 0100               	movlb	0	; () banked
 16206  0030' 5100'              	movf	___llmod@divisor& (0+255),w,b
 16207  0032' 0100               	movlb	0	; () banked
 16208  0034' 5D00'              	subwf	___llmod@dividend& (0+255),w,b
 16209  0036' 0100               	movlb	0	; () banked
 16210  0038' 5100'              	movf	(___llmod@divisor+1)& (0+255),w,b
 16211  003A' 0100               	movlb	0	; () banked
 16212  003C' 5900'              	subwfb	(___llmod@dividend+1)& (0+255),w,b
 16213  003E' 0100               	movlb	0	; () banked
 16214  0040' 5100'              	movf	(___llmod@divisor+2)& (0+255),w,b
 16215  0042' 0100               	movlb	0	; () banked
 16216  0044' 5900'              	subwfb	(___llmod@dividend+2)& (0+255),w,b
 16217  0046' 0100               	movlb	0	; () banked
 16218  0048' 5100'              	movf	(___llmod@divisor+3)& (0+255),w,b
 16219  004A' 0100               	movlb	0	; () banked
 16220  004C' 5900'              	subwfb	(___llmod@dividend+3)& (0+255),w,b
 16221  004E' A0D8               	btfss	status,0,c
 16222  0050' D010               	goto	l7677
 16223                           
 16224                           ; BSR set to: 0
 16225  0052' 0100               	movlb	0	; () banked
 16226  0054' 5100'              	movf	___llmod@divisor& (0+255),w,b
 16227  0056' 0100               	movlb	0	; () banked
 16228  0058' 5F00'              	subwf	___llmod@dividend& (0+255),f,b
 16229  005A' 0100               	movlb	0	; () banked
 16230  005C' 5100'              	movf	(___llmod@divisor+1)& (0+255),w,b
 16231  005E' 0100               	movlb	0	; () banked
 16232  0060' 5B00'              	subwfb	(___llmod@dividend+1)& (0+255),f,b
 16233  0062' 0100               	movlb	0	; () banked
 16234  0064' 5100'              	movf	(___llmod@divisor+2)& (0+255),w,b
 16235  0066' 0100               	movlb	0	; () banked
 16236  0068' 5B00'              	subwfb	(___llmod@dividend+2)& (0+255),f,b
 16237  006A' 0100               	movlb	0	; () banked
 16238  006C' 5100'              	movf	(___llmod@divisor+3)& (0+255),w,b
 16239  006E' 0100               	movlb	0	; () banked
 16240  0070' 5B00'              	subwfb	(___llmod@dividend+3)& (0+255),f,b
 16241  0072'                    l7677:
 16242                           
 16243                           ; BSR set to: 0
 16244  0072' 0100               	movlb	0	; () banked
 16245  0074' 90D8               	bcf	status,0,c
 16246  0076' 3300'              	rrcf	(___llmod@divisor+3)& (0+255),f,b
 16247  0078' 3300'              	rrcf	(___llmod@divisor+2)& (0+255),f,b
 16248  007A' 3300'              	rrcf	(___llmod@divisor+1)& (0+255),f,b
 16249  007C' 3300'              	rrcf	___llmod@divisor& (0+255),f,b
 16250                           
 16251                           ; BSR set to: 0
 16252  007E' 2E1E'              	decfsz	___llmod@counter,f,c
 16253  0080' D7D6               	goto	l7673
 16254  0082'                    l1479:
 16255                           
 16256                           ; BSR set to: 0
 16257  0082' C00D' F00D'        	movff	___llmod@dividend,?___llmod
 16258  0086' C00E' F00E'        	movff	___llmod@dividend+1,?___llmod+1
 16259  008A' C00F' F00F'        	movff	___llmod@dividend+2,?___llmod+2
 16260  008E' C010' F010'        	movff	___llmod@dividend+3,?___llmod+3
 16261                           
 16262                           ; BSR set to: 0
 16263  0092' 0012               	return		;funcret
 16264  0094'                    __end_of___llmod:
 16265                           	opt stack 0
 16266                           tblptru	equ	0xFF8
 16267                           tblptrh	equ	0xFF7
 16268                           tblptrl	equ	0xFF6
 16269                           tablat	equ	0xFF5
 16270                           prodh	equ	0xFF4
 16271                           prodl	equ	0xFF3
 16272                           intcon	equ	0xFF2
 16273                           indf0	equ	0xFEF
 16274                           postinc0	equ	0xFEE
 16275                           fsr0h	equ	0xFEA
 16276                           fsr0l	equ	0xFE9
 16277                           wreg	equ	0xFE8
 16278                           postinc1	equ	0xFE6
 16279                           postdec1	equ	0xFE5
 16280                           fsr1h	equ	0xFE2
 16281                           fsr1l	equ	0xFE1
 16282                           indf2	equ	0xFDF
 16283                           postinc2	equ	0xFDE
 16284                           postdec2	equ	0xFDD
 16285                           plusw2	equ	0xFDB
 16286                           fsr2h	equ	0xFDA
 16287                           fsr2l	equ	0xFD9
 16288                           status	equ	0xFD8
 16289                           
 16290 ;; *************** function _bootload *****************
 16291 ;; Defined at:
 16292 ;;		line 357 in file "tasks.h"
 16293 ;; Parameters:    Size  Location     Type
 16294 ;;		None
 16295 ;; Auto vars:     Size  Location     Type
 16296 ;;		None
 16297 ;; Return value:  Size  Location     Type
 16298 ;;		None               void
 16299 ;; Registers used:
 16300 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16301 ;; Tracked objects:
 16302 ;;		On entry : 0/0
 16303 ;;		On exit  : 0/0
 16304 ;;		Unchanged: 0/0
 16305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16310 ;;Total ram usage:        0 bytes
 16311 ;; Hardware stack levels used:    1
 16312 ;; Hardware stack levels required when called:    7
 16313 ;; This function calls:
 16314 ;;		_I2C_LCD_Clear
 16315 ;;		_I2C_LCD_Puts
 16316 ;;		_I2C_LCD_SetCursor
 16317 ;; This function is called by:
 16318 ;;		_command_operation
 16319 ;;		_main
 16320 ;; This function uses a non-reentrant model
 16321 ;;
 16322                           
 16323                           	psect	text51
 16324  0000'                    __ptext51:
 16325                           	opt stack 0
 16326  0000'                    _bootload:
 16327                           	opt stack 21
 16328                           
 16329                           ;tasks.h: 358: I2C_LCD_Clear();
 16330                           
 16331                           ; BSR set to: 0
 16332                           ;incstack = 0
 16333  0000' EC00' F000'        	call	_I2C_LCD_Clear	;wreg free
 16334                           
 16335                           ;tasks.h: 359: I2C_LCD_SetCursor(0, 0);
 16336  0004' 0E00               	movlw	0
 16337  0006' 0100               	movlb	0	; () banked
 16338  0008' 6F00'              	movwf	I2C_LCD_SetCursor@row& (0+255),b
 16339  000A' 0E00               	movlw	0
 16340  000C' EC00' F000'        	call	_I2C_LCD_SetCursor
 16341                           
 16342                           ;tasks.h: 360: I2C_LCD_Puts("PIC18F27J53");
 16343  0010' 0E00'              	movlw	low STR_40
 16344  0012' 0100               	movlb	0	; () banked
 16345  0014' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
 16346  0016' 0E00'              	movlw	high STR_40
 16347  0018' 0100               	movlb	0	; () banked
 16348  001A' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
 16349  001C' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
 16350                           
 16351                           ;tasks.h: 361: I2C_LCD_SetCursor(0, 1);
 16352  0020' 0E01               	movlw	1
 16353  0022' 0100               	movlb	0	; () banked
 16354  0024' 6F00'              	movwf	I2C_LCD_SetCursor@row& (0+255),b
 16355  0026' 0E00               	movlw	0
 16356  0028' EC00' F000'        	call	_I2C_LCD_SetCursor
 16357                           
 16358                           ;tasks.h: 362: I2C_LCD_Puts("Bootloader mode");
 16359  002C' 0E00'              	movlw	low STR_41
 16360  002E' 0100               	movlb	0	; () banked
 16361  0030' 6F00'              	movwf	I2C_LCD_Puts@s& (0+255),b
 16362  0032' 0E00'              	movlw	high STR_41
 16363  0034' 0100               	movlb	0	; () banked
 16364  0036' 6F00'              	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
 16365  0038' EC00' F000'        	call	_I2C_LCD_Puts	;wreg free
 16366  003C' EF0E F000          	goto	28	;# 
 16367  0040' 0012               	return		;funcret
 16368  0042'                    __end_of_bootload:
 16369                           	opt stack 0
 16370                           tblptru	equ	0xFF8
 16371                           tblptrh	equ	0xFF7
 16372                           tblptrl	equ	0xFF6
 16373                           tablat	equ	0xFF5
 16374                           prodh	equ	0xFF4
 16375                           prodl	equ	0xFF3
 16376                           intcon	equ	0xFF2
 16377                           indf0	equ	0xFEF
 16378                           postinc0	equ	0xFEE
 16379                           fsr0h	equ	0xFEA
 16380                           fsr0l	equ	0xFE9
 16381                           wreg	equ	0xFE8
 16382                           postinc1	equ	0xFE6
 16383                           postdec1	equ	0xFE5
 16384                           fsr1h	equ	0xFE2
 16385                           fsr1l	equ	0xFE1
 16386                           indf2	equ	0xFDF
 16387                           postinc2	equ	0xFDE
 16388                           postdec2	equ	0xFDD
 16389                           plusw2	equ	0xFDB
 16390                           fsr2h	equ	0xFDA
 16391                           fsr2l	equ	0xFD9
 16392                           status	equ	0xFD8
 16393                           
 16394 ;; *************** function _I2C_LCD_SetCursor *****************
 16395 ;; Defined at:
 16396 ;;		line 112 in file "../My_header\My_I2C.h"
 16397 ;; Parameters:    Size  Location     Type
 16398 ;;  col             1    wreg     unsigned char 
 16399 ;;  row             1    2[BANK0 ] unsigned char 
 16400 ;; Auto vars:     Size  Location     Type
 16401 ;;  col             1    5[BANK0 ] unsigned char 
 16402 ;;  row_offsets     2    3[BANK0 ] unsigned char [2]
 16403 ;; Return value:  Size  Location     Type
 16404 ;;		None               void
 16405 ;; Registers used:
 16406 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16407 ;; Tracked objects:
 16408 ;;		On entry : 0/0
 16409 ;;		On exit  : 0/0
 16410 ;;		Unchanged: 0/0
 16411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16412 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16413 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16415 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16416 ;;Total ram usage:        4 bytes
 16417 ;; Hardware stack levels used:    1
 16418 ;; Hardware stack levels required when called:    6
 16419 ;; This function calls:
 16420 ;;		_I2C_LCD_Command
 16421 ;; This function is called by:
 16422 ;;		_display_time_1602
 16423 ;;		_display_port
 16424 ;;		_display_LCD
 16425 ;;		_bootload
 16426 ;;		_sleep_loop
 16427 ;;		_display_time_0802
 16428 ;; This function uses a non-reentrant model
 16429 ;;
 16430                           
 16431                           	psect	text52
 16432  0000'                    __ptext52:
 16433                           	opt stack 0
 16434  0000'                    _I2C_LCD_SetCursor:
 16435                           	opt stack 23
 16436                           
 16437                           ;incstack = 0
 16438                           ;I2C_LCD_SetCursor@col stored from wreg
 16439  0000' 0100               	movlb	0	; () banked
 16440  0002' 6F00'              	movwf	I2C_LCD_SetCursor@col& (0+255),b
 16441                           
 16442                           ;My_header\My_I2C.h: 113: uint8_t row_offsets[] = {0x00, 0x40};
 16443  0004' C000' F003'        	movff	I2C_LCD_SetCursor@F8672,I2C_LCD_SetCursor@row_offsets
 16444  0008' C001' F004'        	movff	I2C_LCD_SetCursor@F8672+1,I2C_LCD_SetCursor@row_offsets+1
 16445                           
 16446                           ;My_header\My_I2C.h: 115: I2C_LCD_Command(0x80 | (col + row_offsets[row]));
 16447  000C' 0100               	movlb	0	; () banked
 16448  000E' 5100'              	movf	I2C_LCD_SetCursor@row& (0+255),w,b
 16449  0010' 0D01               	mullw	1
 16450  0012' 0E00'              	movlw	low I2C_LCD_SetCursor@row_offsets
 16451  0014' 24F3               	addwf	prodl,w,c
 16452  0016' 6ED9               	movwf	fsr2l,c
 16453  0018' 0E00'              	movlw	high I2C_LCD_SetCursor@row_offsets
 16454  001A' 20F4               	addwfc	prodh,w,c
 16455  001C' 6EDA               	movwf	fsr2h,c
 16456  001E' 50DF               	movf	indf2,w,c
 16457  0020' 0100               	movlb	0	; () banked
 16458  0022' 2500'              	addwf	I2C_LCD_SetCursor@col& (0+255),w,b
 16459  0024' 0980               	iorlw	128
 16460  0026' EC00' F000'        	call	_I2C_LCD_Command
 16461  002A' 0012               	return		;funcret
 16462  002C'                    __end_of_I2C_LCD_SetCursor:
 16463                           	opt stack 0
 16464                           tblptru	equ	0xFF8
 16465                           tblptrh	equ	0xFF7
 16466                           tblptrl	equ	0xFF6
 16467                           tablat	equ	0xFF5
 16468                           prodh	equ	0xFF4
 16469                           prodl	equ	0xFF3
 16470                           intcon	equ	0xFF2
 16471                           indf0	equ	0xFEF
 16472                           postinc0	equ	0xFEE
 16473                           fsr0h	equ	0xFEA
 16474                           fsr0l	equ	0xFE9
 16475                           wreg	equ	0xFE8
 16476                           postinc1	equ	0xFE6
 16477                           postdec1	equ	0xFE5
 16478                           fsr1h	equ	0xFE2
 16479                           fsr1l	equ	0xFE1
 16480                           indf2	equ	0xFDF
 16481                           postinc2	equ	0xFDE
 16482                           postdec2	equ	0xFDD
 16483                           plusw2	equ	0xFDB
 16484                           fsr2h	equ	0xFDA
 16485                           fsr2l	equ	0xFD9
 16486                           status	equ	0xFD8
 16487                           
 16488 ;; *************** function _I2C_LCD_Puts *****************
 16489 ;; Defined at:
 16490 ;;		line 131 in file "../My_header\My_I2C.h"
 16491 ;; Parameters:    Size  Location     Type
 16492 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 16493 ;;		 -> STR_146(13), STR_145(17), STR_41(16), STR_40(12), 
 16494 ;;		 -> STR_30(2), STR_29(3), STR_28(3), STR_27(3), 
 16495 ;;		 -> STR_26(4), display_LCD@str(10), STR_25(15), STR_24(13), 
 16496 ;;		 -> STR_23(17), display_char(40), display_port@onoff(10), display_port@port_char(120), 
 16497 ;;		 -> weekday_3char(28), STR_1(3), display_dec@str(10), 
 16498 ;; Auto vars:     Size  Location     Type
 16499 ;;  ans             2    3[BANK0 ] int 
 16500 ;; Return value:  Size  Location     Type
 16501 ;;		None               void
 16502 ;; Registers used:
 16503 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16504 ;; Tracked objects:
 16505 ;;		On entry : 0/0
 16506 ;;		On exit  : 0/0
 16507 ;;		Unchanged: 0/0
 16508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16509 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16510 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16511 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16512 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16513 ;;Total ram usage:        5 bytes
 16514 ;; Hardware stack levels used:    1
 16515 ;; Hardware stack levels required when called:    5
 16516 ;; This function calls:
 16517 ;;		_I2C_Send
 16518 ;;		_I2C_Start
 16519 ;;		_I2C_Stop
 16520 ;; This function is called by:
 16521 ;;		_display_dec
 16522 ;;		_display_time_1602
 16523 ;;		_display_port
 16524 ;;		_display_LCD
 16525 ;;		_bootload
 16526 ;;		_sleep_loop
 16527 ;;		_display_time_0802
 16528 ;; This function uses a non-reentrant model
 16529 ;;
 16530                           
 16531                           	psect	text53
 16532  0000'                    __ptext53:
 16533                           	opt stack 0
 16534  0000'                    _I2C_LCD_Puts:
 16535                           	opt stack 24
 16536                           
 16537                           ;My_header\My_I2C.h: 132: int ans;
 16538                           ;My_header\My_I2C.h: 134: ans = I2C_Start(0x3E, 0);
 16539                           
 16540                           ;incstack = 0
 16541  0000' 0E00               	movlw	0
 16542  0002' 6E20'              	movwf	I2C_Start@rw,c
 16543  0004' 0E3E               	movlw	62
 16544  0006' EC00' F000'        	call	_I2C_Start
 16545  000A' 0100               	movlb	0	; () banked
 16546  000C' 6F00'              	movwf	??_I2C_LCD_Puts& (0+255),b
 16547  000E' 0100               	movlb	0	; () banked
 16548  0010' 5100'              	movf	??_I2C_LCD_Puts& (0+255),w,b
 16549  0012' 0100               	movlb	0	; () banked
 16550  0014' 6F00'              	movwf	I2C_LCD_Puts@ans& (0+255),b
 16551  0016' 6B00'              	clrf	(I2C_LCD_Puts@ans+1)& (0+255),b
 16552                           
 16553                           ; BSR set to: 0
 16554                           ;My_header\My_I2C.h: 135: if (ans == 0) {
 16555  0018' 0100               	movlb	0	; () banked
 16556  001A' 5100'              	movf	I2C_LCD_Puts@ans& (0+255),w,b
 16557  001C' 0100               	movlb	0	; () banked
 16558  001E' 1100'              	iorwf	(I2C_LCD_Puts@ans+1)& (0+255),w,b
 16559  0020' A4D8               	btfss	status,2,c
 16560  0022' D031               	goto	l7503
 16561                           
 16562                           ; BSR set to: 0
 16563                           ;My_header\My_I2C.h: 136: I2C_Send(0b01000000);
 16564  0024' 0E40               	movlw	64
 16565  0026' EC00' F000'        	call	_I2C_Send
 16566                           
 16567                           ;My_header\My_I2C.h: 137: while (*s) {
 16568  002A' D019               	goto	l7501
 16569  002C'                    l7495:
 16570                           
 16571                           ;My_header\My_I2C.h: 138: I2C_Send(*s++);
 16572  002C' C000' FFF6         	movff	I2C_LCD_Puts@s,tblptrl
 16573  0030' C001' FFF7         	movff	I2C_LCD_Puts@s+1,tblptrh
 16574  0034' 0E00'              	movlw	low (__mediumconst shr (0+16))
 16575  0036' 6EF8               	movwf	tblptru,c
 16576  0038' 0EFF'              	movlw	(high __ramtop+-1)
 16577  003A' 64F7               	cpfsgt	tblptrh,c
 16578  003C' D003               	bra	u9007
 16579  003E' 0008               	tblrd		*
 16580  0040' 50F5               	movf	tablat,w,c
 16581  0042' D005               	bra	u9000
 16582  0044'                    u9007:
 16583  0044' CFF6 FFE9          	movff	tblptrl,fsr0l
 16584  0048' CFF7 FFEA          	movff	tblptrh,fsr0h
 16585  004C' 50EF               	movf	indf0,w,c
 16586  004E'                    u9000:
 16587  004E' EC00' F000'        	call	_I2C_Send
 16588  0052' 0100               	movlb	0	; () banked
 16589  0054' 4B00'              	infsnz	I2C_LCD_Puts@s& (0+255),f,b
 16590  0056' 2B00'              	incf	(I2C_LCD_Puts@s+1)& (0+255),f,b
 16591                           
 16592                           ; BSR set to: 0
 16593                           ;My_header\My_I2C.h: 139: _delay((unsigned long)((26)*(48000000/4000000.0)));
 16594  0058' 0E68               	movlw	104
 16595  005A'                    u11897:
 16596  005A' 2EE8               	decfsz	wreg,f,c
 16597  005C' D7FE               	goto	u11897
 16598  005E'                    l7501:
 16599  005E' C000' FFF6         	movff	I2C_LCD_Puts@s,tblptrl
 16600  0062' C001' FFF7         	movff	I2C_LCD_Puts@s+1,tblptrh
 16601  0066' 0E00'              	movlw	low (__mediumconst shr (0+16))
 16602  0068' 6EF8               	movwf	tblptru,c
 16603  006A' 0EFF'              	movlw	(high __ramtop+-1)
 16604  006C' 64F7               	cpfsgt	tblptrh,c
 16605  006E' D003               	bra	u9017
 16606  0070' 0008               	tblrd		*
 16607  0072' 50F5               	movf	tablat,w,c
 16608  0074' D005               	bra	u9010
 16609  0076'                    u9017:
 16610  0076' CFF6 FFE9          	movff	tblptrl,fsr0l
 16611  007A' CFF7 FFEA          	movff	tblptrh,fsr0h
 16612  007E' 50EF               	movf	indf0,w,c
 16613  0080'                    u9010:
 16614  0080' 0900               	iorlw	0
 16615  0082' A4D8               	btfss	status,2,c
 16616  0084' D7D3               	goto	l7495
 16617  0086'                    l7503:
 16618                           
 16619                           ;My_header\My_I2C.h: 140: }
 16620                           ;My_header\My_I2C.h: 141: }
 16621                           ;My_header\My_I2C.h: 142: I2C_Stop();
 16622  0086' EC00' F000'        	call	_I2C_Stop	;wreg free
 16623  008A' 0012               	return		;funcret
 16624  008C'                    __end_of_I2C_LCD_Puts:
 16625                           	opt stack 0
 16626                           tblptru	equ	0xFF8
 16627                           tblptrh	equ	0xFF7
 16628                           tblptrl	equ	0xFF6
 16629                           tablat	equ	0xFF5
 16630                           prodh	equ	0xFF4
 16631                           prodl	equ	0xFF3
 16632                           intcon	equ	0xFF2
 16633                           indf0	equ	0xFEF
 16634                           postinc0	equ	0xFEE
 16635                           fsr0h	equ	0xFEA
 16636                           fsr0l	equ	0xFE9
 16637                           wreg	equ	0xFE8
 16638                           postinc1	equ	0xFE6
 16639                           postdec1	equ	0xFE5
 16640                           fsr1h	equ	0xFE2
 16641                           fsr1l	equ	0xFE1
 16642                           indf2	equ	0xFDF
 16643                           postinc2	equ	0xFDE
 16644                           postdec2	equ	0xFDD
 16645                           plusw2	equ	0xFDB
 16646                           fsr2h	equ	0xFDA
 16647                           fsr2l	equ	0xFD9
 16648                           status	equ	0xFD8
 16649                           
 16650 ;; *************** function _main_init *****************
 16651 ;; Defined at:
 16652 ;;		line 84 in file "main.c"
 16653 ;; Parameters:    Size  Location     Type
 16654 ;;		None
 16655 ;; Auto vars:     Size  Location     Type
 16656 ;;		None
 16657 ;; Return value:  Size  Location     Type
 16658 ;;		None               void
 16659 ;; Registers used:
 16660 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
 16661 ;; Tracked objects:
 16662 ;;		On entry : 0/0
 16663 ;;		On exit  : 0/0
 16664 ;;		Unchanged: 0/0
 16665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16670 ;;Total ram usage:        0 bytes
 16671 ;; Hardware stack levels used:    1
 16672 ;; Hardware stack levels required when called:    8
 16673 ;; This function calls:
 16674 ;;		_ADC_init
 16675 ;;		_CTMU_init
 16676 ;;		_I2C_LCD_init
 16677 ;;		_I2C_init
 16678 ;;		_RTCC_init
 16679 ;;		_USB_init
 16680 ;;		_ringbuf_init
 16681 ;;		_timer0_init
 16682 ;;		_timer1_init
 16683 ;;		_timer3_init
 16684 ;; This function is called by:
 16685 ;;		_main
 16686 ;; This function uses a non-reentrant model
 16687 ;;
 16688                           
 16689                           	psect	text54
 16690  0000'                    __ptext54:
 16691                           	opt stack 0
 16692  0000'                    _main_init:
 16693                           	opt stack 22
 16694                           
 16695                           ;main.c: 85: OSCCONbits.IRCF = 7;
 16696                           
 16697                           ;incstack = 0
 16698  0000' 88D3               	bsf	4051,4,c	;volatile
 16699  0002' 8AD3               	bsf	4051,5,c	;volatile
 16700  0004' 8CD3               	bsf	4051,6,c	;volatile
 16701                           
 16702                           ;main.c: 86: OSCTUNEbits.PLLEN = 1;
 16703  0006' 8C9B               	bsf	3995,6,c	;volatile
 16704                           
 16705                           ;main.c: 87: OSCCONbits.SCS = 0;
 16706  0008' 0EFC               	movlw	-4
 16707  000A' 16D3               	andwf	4051,f,c	;volatile
 16708                           
 16709                           ;main.c: 88: TRISA = 0b00011111;
 16710  000C' 0E1F               	movlw	31
 16711  000E' 6E92               	movwf	3986,c	;volatile
 16712                           
 16713                           ;main.c: 89: TRISB = 0b00111111;
 16714  0010' 0E3F               	movlw	63
 16715  0012' 6E93               	movwf	3987,c	;volatile
 16716                           
 16717                           ;main.c: 90: TRISC = 0b10110010;
 16718  0014' 0EB2               	movlw	178
 16719  0016' 6E94               	movwf	3988,c	;volatile
 16720                           
 16721                           ;main.c: 91: ANCON0 = 0b11110000;
 16722  0018' 0EF0               	movlw	240
 16723  001A' 010F               	movlb	15	; () banked
 16724  001C' 6F48               	movwf	72,b	;volatile
 16725                           
 16726                           ;main.c: 92: ANCON1 = 0b00001000;
 16727  001E' 0E08               	movlw	8
 16728  0020' 010F               	movlb	15	; () banked
 16729  0022' 6F49               	movwf	73,b	;volatile
 16730                           
 16731                           ; BSR set to: 15
 16732                           ;main.c: 93: INTCON2bits.RBPU = 0;
 16733  0024' 9EF1               	bcf	intcon2,7,c	;volatile
 16734                           
 16735                           ; BSR set to: 15
 16736                           ;main.c: 95: timer0_init(6);
 16737  0026' 0E06               	movlw	6
 16738  0028' EC00' F000'        	call	_timer0_init
 16739                           
 16740                           ;main.c: 96: timer1_init(0, 2);
 16741  002C' 0E02               	movlw	2
 16742  002E' 6E1E'              	movwf	timer1_init@clock_select,c
 16743  0030' 0E00               	movlw	0
 16744  0032' EC00' F000'        	call	_timer1_init
 16745                           
 16746                           ;main.c: 97: timer3_init(2);
 16747  0036' 0E02               	movlw	2
 16748  0038' EC00' F000'        	call	_timer3_init
 16749                           
 16750                           ;main.c: 98: I2C_init();
 16751  003C' EC00' F000'        	call	_I2C_init	;wreg free
 16752                           
 16753                           ;main.c: 99: I2C_LCD_init();
 16754  0040' EC00' F000'        	call	_I2C_LCD_init	;wreg free
 16755                           
 16756                           ;main.c: 100: RTCC_init();
 16757  0044' EC00' F000'        	call	_RTCC_init	;wreg free
 16758                           
 16759                           ;main.c: 101: ADC_init(0);
 16760  0048' 0E00               	movlw	0
 16761  004A' EC00' F000'        	call	_ADC_init
 16762                           
 16763                           ;main.c: 102: CTMU_init();
 16764  004E' EC00' F000'        	call	_CTMU_init	;wreg free
 16765                           
 16766                           ;main.c: 104: USB_init();
 16767  0052' EC00' F000'        	call	_USB_init	;wreg free
 16768                           
 16769                           ;main.c: 105: static uint8_t usbtx[2000];
 16770                           ;main.c: 106: ringbuf_init(&usb_tx, usbtx, sizeof (usbtx));
 16771  0056' 0E00'              	movlw	low _usb_tx
 16772  0058' 0100               	movlb	0	; () banked
 16773  005A' 6F00'              	movwf	ringbuf_init@rb& (0+255),b
 16774  005C' 0E00'              	movlw	high _usb_tx
 16775  005E' 0100               	movlb	0	; () banked
 16776  0060' 6F00'              	movwf	(ringbuf_init@rb+1)& (0+255),b
 16777  0062' 0E00'              	movlw	low main_init@usbtx
 16778  0064' 0100               	movlb	0	; () banked
 16779  0066' 6F00'              	movwf	ringbuf_init@internal_buf& (0+255),b
 16780  0068' 0E00'              	movlw	high main_init@usbtx
 16781  006A' 0100               	movlb	0	; () banked
 16782  006C' 6F00'              	movwf	(ringbuf_init@internal_buf+1)& (0+255),b
 16783  006E' 0E07               	movlw	7
 16784  0070' 0100               	movlb	0	; () banked
 16785  0072' 6F00'              	movwf	(ringbuf_init@bufsize+1)& (0+255),b
 16786  0074' 0ED0               	movlw	208
 16787  0076' 6F00'              	movwf	ringbuf_init@bufsize& (0+255),b
 16788  0078' EC00' F000'        	call	_ringbuf_init	;wreg free
 16789                           
 16790                           ;main.c: 107: static uint8_t usbrx[100];
 16791                           ;main.c: 108: ringbuf_init(&usb_rx, usbrx, sizeof (usbrx));
 16792  007C' 0E00'              	movlw	low _usb_rx
 16793  007E' 0100               	movlb	0	; () banked
 16794  0080' 6F00'              	movwf	ringbuf_init@rb& (0+255),b
 16795  0082' 0E00'              	movlw	high _usb_rx
 16796  0084' 0100               	movlb	0	; () banked
 16797  0086' 6F00'              	movwf	(ringbuf_init@rb+1)& (0+255),b
 16798  0088' 0E00'              	movlw	low main_init@usbrx
 16799  008A' 0100               	movlb	0	; () banked
 16800  008C' 6F00'              	movwf	ringbuf_init@internal_buf& (0+255),b
 16801  008E' 0E00'              	movlw	high main_init@usbrx
 16802  0090' 0100               	movlb	0	; () banked
 16803  0092' 6F00'              	movwf	(ringbuf_init@internal_buf+1)& (0+255),b
 16804  0094' 0E00               	movlw	0
 16805  0096' 0100               	movlb	0	; () banked
 16806  0098' 6F00'              	movwf	(ringbuf_init@bufsize+1)& (0+255),b
 16807  009A' 0E64               	movlw	100
 16808  009C' 6F00'              	movwf	ringbuf_init@bufsize& (0+255),b
 16809  009E' EC00' F000'        	call	_ringbuf_init	;wreg free
 16810  00A2' 0012               	return		;funcret
 16811  00A4'                    __end_of_main_init:
 16812                           	opt stack 0
 16813                           tblptru	equ	0xFF8
 16814                           tblptrh	equ	0xFF7
 16815                           tblptrl	equ	0xFF6
 16816                           tablat	equ	0xFF5
 16817                           prodh	equ	0xFF4
 16818                           prodl	equ	0xFF3
 16819                           intcon	equ	0xFF2
 16820                           intcon2	equ	0xFF1
 16821                           indf0	equ	0xFEF
 16822                           postinc0	equ	0xFEE
 16823                           fsr0h	equ	0xFEA
 16824                           fsr0l	equ	0xFE9
 16825                           wreg	equ	0xFE8
 16826                           postinc1	equ	0xFE6
 16827                           postdec1	equ	0xFE5
 16828                           fsr1h	equ	0xFE2
 16829                           fsr1l	equ	0xFE1
 16830                           indf2	equ	0xFDF
 16831                           postinc2	equ	0xFDE
 16832                           postdec2	equ	0xFDD
 16833                           plusw2	equ	0xFDB
 16834                           fsr2h	equ	0xFDA
 16835                           fsr2l	equ	0xFD9
 16836                           status	equ	0xFD8
 16837                           
 16838 ;; *************** function _timer3_init *****************
 16839 ;; Defined at:
 16840 ;;		line 85 in file "../My_header\My_header.h"
 16841 ;; Parameters:    Size  Location     Type
 16842 ;;  prescaler       1    wreg     unsigned char 
 16843 ;; Auto vars:     Size  Location     Type
 16844 ;;  prescaler       1   31[COMRAM] unsigned char 
 16845 ;; Return value:  Size  Location     Type
 16846 ;;		None               void
 16847 ;; Registers used:
 16848 ;;		wreg, status,2, status,0
 16849 ;; Tracked objects:
 16850 ;;		On entry : 0/0
 16851 ;;		On exit  : 0/0
 16852 ;;		Unchanged: 0/0
 16853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16855 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16856 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16857 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16858 ;;Total ram usage:        2 bytes
 16859 ;; Hardware stack levels used:    1
 16860 ;; Hardware stack levels required when called:    3
 16861 ;; This function calls:
 16862 ;;		Nothing
 16863 ;; This function is called by:
 16864 ;;		_main_init
 16865 ;; This function uses a non-reentrant model
 16866 ;;
 16867                           
 16868                           	psect	text55
 16869  0000'                    __ptext55:
 16870                           	opt stack 0
 16871  0000'                    _timer3_init:
 16872                           	opt stack 26
 16873                           
 16874                           ;incstack = 0
 16875                           ;timer3_init@prescaler stored from wreg
 16876  0000' 6E1F'              	movwf	timer3_init@prescaler,c
 16877                           
 16878                           ;My_header\My_header.h: 86: T3CONbits.TMR3CS = 0;
 16879  0002' 0E3F               	movlw	-193
 16880  0004' 1679               	andwf	3961,f,c	;volatile
 16881                           
 16882                           ;My_header\My_header.h: 87: T3CONbits.T3OSCEN = 0;
 16883  0006' 9679               	bcf	3961,3,c	;volatile
 16884                           
 16885                           ;My_header\My_header.h: 88: T3CONbits.T3CKPS = prescaler;
 16886  0008' C01F' F01E'        	movff	timer3_init@prescaler,??_timer3_init
 16887  000C' 3A1E'              	swapf	??_timer3_init,f,c
 16888  000E' 5079               	movf	3961,w,c	;volatile
 16889  0010' 181E'              	xorwf	??_timer3_init,w,c
 16890  0012' 0BCF               	andlw	-49
 16891  0014' 181E'              	xorwf	??_timer3_init,w,c
 16892  0016' 6E79               	movwf	3961,c	;volatile
 16893                           
 16894                           ;My_header\My_header.h: 89: T3CONbits.RD163 = 0;
 16895  0018' 9E79               	bcf	3961,7,c	;volatile
 16896                           
 16897                           ;My_header\My_header.h: 90: T3CONbits.TMR3ON = 1;
 16898  001A' 8079               	bsf	3961,0,c	;volatile
 16899                           
 16900                           ;My_header\My_header.h: 91: IPR2bits.TMR3IP = 0;
 16901  001C' 92A2               	bcf	4002,1,c	;volatile
 16902                           
 16903                           ;My_header\My_header.h: 92: PIR2bits.TMR3IF = 0;
 16904  001E' 92A1               	bcf	4001,1,c	;volatile
 16905                           
 16906                           ;My_header\My_header.h: 93: PIE2bits.TMR3IE = 1;
 16907  0020' 82A0               	bsf	4000,1,c	;volatile
 16908                           
 16909                           ;My_header\My_header.h: 94: INTCONbits.PEIE = 1;
 16910  0022' 8CF2               	bsf	intcon,6,c	;volatile
 16911  0024' 0012               	return		;funcret
 16912  0026'                    __end_of_timer3_init:
 16913                           	opt stack 0
 16914                           tblptru	equ	0xFF8
 16915                           tblptrh	equ	0xFF7
 16916                           tblptrl	equ	0xFF6
 16917                           tablat	equ	0xFF5
 16918                           prodh	equ	0xFF4
 16919                           prodl	equ	0xFF3
 16920                           intcon	equ	0xFF2
 16921                           intcon2	equ	0xFF1
 16922                           indf0	equ	0xFEF
 16923                           postinc0	equ	0xFEE
 16924                           fsr0h	equ	0xFEA
 16925                           fsr0l	equ	0xFE9
 16926                           wreg	equ	0xFE8
 16927                           postinc1	equ	0xFE6
 16928                           postdec1	equ	0xFE5
 16929                           fsr1h	equ	0xFE2
 16930                           fsr1l	equ	0xFE1
 16931                           indf2	equ	0xFDF
 16932                           postinc2	equ	0xFDE
 16933                           postdec2	equ	0xFDD
 16934                           plusw2	equ	0xFDB
 16935                           fsr2h	equ	0xFDA
 16936                           fsr2l	equ	0xFD9
 16937                           status	equ	0xFD8
 16938                           
 16939 ;; *************** function _timer1_init *****************
 16940 ;; Defined at:
 16941 ;;		line 54 in file "../My_header\My_header.h"
 16942 ;; Parameters:    Size  Location     Type
 16943 ;;  prescaler       1    wreg     unsigned char 
 16944 ;;  clock_select    1   30[COMRAM] unsigned char 
 16945 ;; Auto vars:     Size  Location     Type
 16946 ;;  prescaler       1   32[COMRAM] unsigned char 
 16947 ;; Return value:  Size  Location     Type
 16948 ;;		None               void
 16949 ;; Registers used:
 16950 ;;		wreg, status,2, status,0
 16951 ;; Tracked objects:
 16952 ;;		On entry : 0/0
 16953 ;;		On exit  : 0/0
 16954 ;;		Unchanged: 0/0
 16955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16956 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16957 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16958 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16959 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16960 ;;Total ram usage:        3 bytes
 16961 ;; Hardware stack levels used:    1
 16962 ;; Hardware stack levels required when called:    3
 16963 ;; This function calls:
 16964 ;;		Nothing
 16965 ;; This function is called by:
 16966 ;;		_main_init
 16967 ;; This function uses a non-reentrant model
 16968 ;;
 16969                           
 16970                           	psect	text56
 16971  0000'                    __ptext56:
 16972                           	opt stack 0
 16973  0000'                    _timer1_init:
 16974                           	opt stack 26
 16975                           
 16976                           ;incstack = 0
 16977                           ;timer1_init@prescaler stored from wreg
 16978  0000' 6E20'              	movwf	timer1_init@prescaler,c
 16979                           
 16980                           ;My_header\My_header.h: 55: T1CONbits.TMR1CS = clock_select;
 16981  0002' C01E' F01F'        	movff	timer1_init@clock_select,??_timer1_init
 16982  0006' 3A1F'              	swapf	??_timer1_init,f,c
 16983  0008' 461F'              	rlncf	??_timer1_init,f,c
 16984  000A' 461F'              	rlncf	??_timer1_init,f,c
 16985  000C' 50CD               	movf	4045,w,c	;volatile
 16986  000E' 181F'              	xorwf	??_timer1_init,w,c
 16987  0010' 0B3F               	andlw	-193
 16988  0012' 181F'              	xorwf	??_timer1_init,w,c
 16989  0014' 6ECD               	movwf	4045,c	;volatile
 16990                           
 16991                           ;My_header\My_header.h: 56: if (clock_select == 2) T1CONbits.T1OSCEN = 1;
 16992  0016' 0E02               	movlw	2
 16993  0018' 181E'              	xorwf	timer1_init@clock_select,w,c
 16994  001A' A4D8               	btfss	status,2,c
 16995  001C' D002               	goto	l146
 16996  001E' 86CD               	bsf	4045,3,c	;volatile
 16997  0020' D001               	goto	l8083
 16998  0022'                    l146:
 16999                           
 17000                           ;My_header\My_header.h: 57: else T1CONbits.T1OSCEN = 0;
 17001  0022' 96CD               	bcf	4045,3,c	;volatile
 17002  0024'                    l8083:
 17003                           
 17004                           ;My_header\My_header.h: 58: T1CONbits.T1CKPS = prescaler;
 17005  0024' C020' F01F'        	movff	timer1_init@prescaler,??_timer1_init
 17006  0028' 3A1F'              	swapf	??_timer1_init,f,c
 17007  002A' 50CD               	movf	4045,w,c	;volatile
 17008  002C' 181F'              	xorwf	??_timer1_init,w,c
 17009  002E' 0BCF               	andlw	-49
 17010  0030' 181F'              	xorwf	??_timer1_init,w,c
 17011  0032' 6ECD               	movwf	4045,c	;volatile
 17012                           
 17013                           ;My_header\My_header.h: 59: T1CONbits.nT1SYNC = 1;
 17014  0034' 84CD               	bsf	4045,2,c	;volatile
 17015                           
 17016                           ;My_header\My_header.h: 60: T1CONbits.RD16 = 0;
 17017  0036' 92CD               	bcf	4045,1,c	;volatile
 17018                           
 17019                           ;My_header\My_header.h: 61: T1CONbits.TMR1ON = 1;
 17020  0038' 80CD               	bsf	4045,0,c	;volatile
 17021                           
 17022                           ;My_header\My_header.h: 62: IPR1bits.TMR1IP = 0;
 17023  003A' 909F               	bcf	3999,0,c	;volatile
 17024                           
 17025                           ;My_header\My_header.h: 63: PIR1bits.TMR1IF = 0;
 17026  003C' 909E               	bcf	3998,0,c	;volatile
 17027                           
 17028                           ;My_header\My_header.h: 64: PIE1bits.TMR1IE = 1;
 17029  003E' 809D               	bsf	3997,0,c	;volatile
 17030                           
 17031                           ;My_header\My_header.h: 65: INTCONbits.PEIE = 1;
 17032  0040' 8CF2               	bsf	intcon,6,c	;volatile
 17033  0042' 0012               	return		;funcret
 17034  0044'                    __end_of_timer1_init:
 17035                           	opt stack 0
 17036                           tblptru	equ	0xFF8
 17037                           tblptrh	equ	0xFF7
 17038                           tblptrl	equ	0xFF6
 17039                           tablat	equ	0xFF5
 17040                           prodh	equ	0xFF4
 17041                           prodl	equ	0xFF3
 17042                           intcon	equ	0xFF2
 17043                           intcon2	equ	0xFF1
 17044                           indf0	equ	0xFEF
 17045                           postinc0	equ	0xFEE
 17046                           fsr0h	equ	0xFEA
 17047                           fsr0l	equ	0xFE9
 17048                           wreg	equ	0xFE8
 17049                           postinc1	equ	0xFE6
 17050                           postdec1	equ	0xFE5
 17051                           fsr1h	equ	0xFE2
 17052                           fsr1l	equ	0xFE1
 17053                           indf2	equ	0xFDF
 17054                           postinc2	equ	0xFDE
 17055                           postdec2	equ	0xFDD
 17056                           plusw2	equ	0xFDB
 17057                           fsr2h	equ	0xFDA
 17058                           fsr2l	equ	0xFD9
 17059                           status	equ	0xFD8
 17060                           
 17061 ;; *************** function _timer0_init *****************
 17062 ;; Defined at:
 17063 ;;		line 15 in file "../My_header\My_header.h"
 17064 ;; Parameters:    Size  Location     Type
 17065 ;;  prescaler       1    wreg     unsigned char 
 17066 ;; Auto vars:     Size  Location     Type
 17067 ;;  prescaler       1   31[COMRAM] unsigned char 
 17068 ;; Return value:  Size  Location     Type
 17069 ;;		None               void
 17070 ;; Registers used:
 17071 ;;		wreg, status,2, status,0
 17072 ;; Tracked objects:
 17073 ;;		On entry : 0/0
 17074 ;;		On exit  : 0/0
 17075 ;;		Unchanged: 0/0
 17076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17078 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17079 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17080 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17081 ;;Total ram usage:        2 bytes
 17082 ;; Hardware stack levels used:    1
 17083 ;; Hardware stack levels required when called:    3
 17084 ;; This function calls:
 17085 ;;		Nothing
 17086 ;; This function is called by:
 17087 ;;		_main_init
 17088 ;; This function uses a non-reentrant model
 17089 ;;
 17090                           
 17091                           	psect	text57
 17092  0000'                    __ptext57:
 17093                           	opt stack 0
 17094  0000'                    _timer0_init:
 17095                           	opt stack 26
 17096                           
 17097                           ;incstack = 0
 17098                           ;timer0_init@prescaler stored from wreg
 17099  0000' 6E1F'              	movwf	timer0_init@prescaler,c
 17100                           
 17101                           ;My_header\My_header.h: 16: T0CONbits.TMR0ON = 1;
 17102  0002' 8ED5               	bsf	4053,7,c	;volatile
 17103                           
 17104                           ;My_header\My_header.h: 17: T0CONbits.T08BIT = 1;
 17105  0004' 8CD5               	bsf	4053,6,c	;volatile
 17106                           
 17107                           ;My_header\My_header.h: 18: T0CONbits.T0CS = 0;
 17108  0006' 9AD5               	bcf	4053,5,c	;volatile
 17109                           
 17110                           ;My_header\My_header.h: 19: if (prescaler == 0) {
 17111  0008' 501F'              	movf	timer0_init@prescaler,w,c
 17112  000A' A4D8               	btfss	status,2,c
 17113  000C' D002               	goto	l141
 17114                           
 17115                           ;My_header\My_header.h: 20: T0CONbits.PSA = 1;
 17116  000E' 86D5               	bsf	4053,3,c	;volatile
 17117                           
 17118                           ;My_header\My_header.h: 21: } else {
 17119  0010' D00A               	goto	l8071
 17120  0012'                    l141:
 17121                           
 17122                           ;My_header\My_header.h: 22: T0CONbits.PSA = 0;
 17123  0012' 96D5               	bcf	4053,3,c	;volatile
 17124                           
 17125                           ;My_header\My_header.h: 23: T0CONbits.T0PS = prescaler - 1;
 17126  0014' C01F' F01E'        	movff	timer0_init@prescaler,??_timer0_init
 17127  0018' 0EFF               	movlw	255
 17128  001A' 261E'              	addwf	??_timer0_init,f,c
 17129  001C' 50D5               	movf	4053,w,c	;volatile
 17130  001E' 181E'              	xorwf	??_timer0_init,w,c
 17131  0020' 0BF8               	andlw	-8
 17132  0022' 181E'              	xorwf	??_timer0_init,w,c
 17133  0024' 6ED5               	movwf	4053,c	;volatile
 17134  0026'                    l8071:
 17135                           
 17136                           ;My_header\My_header.h: 24: }
 17137                           ;My_header\My_header.h: 25: INTCONbits.T0IE = 1;
 17138  0026' 8AF2               	bsf	intcon,5,c	;volatile
 17139                           
 17140                           ;My_header\My_header.h: 26: INTCONbits.TMR0IF = 0;
 17141  0028' 94F2               	bcf	intcon,2,c	;volatile
 17142                           
 17143                           ;My_header\My_header.h: 27: INTCON2bits.TMR0IP = 0;
 17144  002A' 94F1               	bcf	intcon2,2,c	;volatile
 17145                           
 17146                           ;My_header\My_header.h: 28: INTCONbits.PEIE = 1;
 17147  002C' 8CF2               	bsf	intcon,6,c	;volatile
 17148  002E' 0012               	return		;funcret
 17149  0030'                    __end_of_timer0_init:
 17150                           	opt stack 0
 17151                           tblptru	equ	0xFF8
 17152                           tblptrh	equ	0xFF7
 17153                           tblptrl	equ	0xFF6
 17154                           tablat	equ	0xFF5
 17155                           prodh	equ	0xFF4
 17156                           prodl	equ	0xFF3
 17157                           intcon	equ	0xFF2
 17158                           intcon2	equ	0xFF1
 17159                           indf0	equ	0xFEF
 17160                           postinc0	equ	0xFEE
 17161                           fsr0h	equ	0xFEA
 17162                           fsr0l	equ	0xFE9
 17163                           wreg	equ	0xFE8
 17164                           postinc1	equ	0xFE6
 17165                           postdec1	equ	0xFE5
 17166                           fsr1h	equ	0xFE2
 17167                           fsr1l	equ	0xFE1
 17168                           indf2	equ	0xFDF
 17169                           postinc2	equ	0xFDE
 17170                           postdec2	equ	0xFDD
 17171                           plusw2	equ	0xFDB
 17172                           fsr2h	equ	0xFDA
 17173                           fsr2l	equ	0xFD9
 17174                           status	equ	0xFD8
 17175                           
 17176 ;; *************** function _ringbuf_init *****************
 17177 ;; Defined at:
 17178 ;;		line 24 in file "../My_header\My_ringbuf.h"
 17179 ;; Parameters:    Size  Location     Type
 17180 ;;  rb              2    0[BANK0 ] PTR struct ringbuf
 17181 ;;		 -> usb_rx(8), usb_tx(8), my_terminal_loop@command(8), 
 17182 ;;  internal_buf    2    2[BANK0 ] PTR unsigned char 
 17183 ;;		 -> main_init@usbrx(100), main_init@usbtx(2000), my_terminal_loop@buf(100), 
 17184 ;;  bufsize         2    4[BANK0 ] unsigned int 
 17185 ;; Auto vars:     Size  Location     Type
 17186 ;;		None
 17187 ;; Return value:  Size  Location     Type
 17188 ;;		None               void
 17189 ;; Registers used:
 17190 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17191 ;; Tracked objects:
 17192 ;;		On entry : 0/0
 17193 ;;		On exit  : 0/0
 17194 ;;		Unchanged: 0/0
 17195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17196 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17199 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17200 ;;Total ram usage:        6 bytes
 17201 ;; Hardware stack levels used:    1
 17202 ;; Hardware stack levels required when called:    3
 17203 ;; This function calls:
 17204 ;;		Nothing
 17205 ;; This function is called by:
 17206 ;;		_my_terminal_loop
 17207 ;;		_main_init
 17208 ;; This function uses a non-reentrant model
 17209 ;;
 17210                           
 17211                           	psect	text58
 17212  0000'                    __ptext58:
 17213                           	opt stack 0
 17214  0000'                    _ringbuf_init:
 17215                           	opt stack 26
 17216                           
 17217                           ;My_header\My_ringbuf.h: 25: rb->buf = internal_buf;
 17218                           
 17219                           ;incstack = 0
 17220  0000' C000' FFD9         	movff	ringbuf_init@rb,fsr2l
 17221  0004' C001' FFDA         	movff	ringbuf_init@rb+1,fsr2h
 17222  0008' C002' FFDE         	movff	ringbuf_init@internal_buf,postinc2
 17223  000C' C003' FFDD         	movff	ringbuf_init@internal_buf+1,postdec2
 17224                           
 17225                           ;My_header\My_ringbuf.h: 26: rb->size = bufsize;
 17226  0010' 0100               	movlb	0	; () banked
 17227  0012' EE20 F002          	lfsr	2,2
 17228  0016' 5100'              	movf	ringbuf_init@rb& (0+255),w,b
 17229  0018' 26D9               	addwf	fsr2l,f,c
 17230  001A' 5100'              	movf	(ringbuf_init@rb+1)& (0+255),w,b
 17231  001C' 22DA               	addwfc	fsr2h,f,c
 17232  001E' C004' FFDE         	movff	ringbuf_init@bufsize,postinc2
 17233  0022' C005' FFDD         	movff	ringbuf_init@bufsize+1,postdec2
 17234                           
 17235                           ; BSR set to: 0
 17236                           ;My_header\My_ringbuf.h: 27: rb->head = 0;
 17237  0026' 0100               	movlb	0	; () banked
 17238  0028' EE20 F004          	lfsr	2,4
 17239  002C' 5100'              	movf	ringbuf_init@rb& (0+255),w,b
 17240  002E' 26D9               	addwf	fsr2l,f,c
 17241  0030' 5100'              	movf	(ringbuf_init@rb+1)& (0+255),w,b
 17242  0032' 22DA               	addwfc	fsr2h,f,c
 17243  0034' 0E00               	movlw	0
 17244  0036' 6EDE               	movwf	postinc2,c
 17245  0038' 0E00               	movlw	0
 17246  003A' 6EDD               	movwf	postdec2,c
 17247                           
 17248                           ; BSR set to: 0
 17249                           ;My_header\My_ringbuf.h: 28: rb->tail = 0;
 17250  003C' 0100               	movlb	0	; () banked
 17251  003E' EE20 F006          	lfsr	2,6
 17252  0042' 5100'              	movf	ringbuf_init@rb& (0+255),w,b
 17253  0044' 26D9               	addwf	fsr2l,f,c
 17254  0046' 5100'              	movf	(ringbuf_init@rb+1)& (0+255),w,b
 17255  0048' 22DA               	addwfc	fsr2h,f,c
 17256  004A' 0E00               	movlw	0
 17257  004C' 6EDE               	movwf	postinc2,c
 17258  004E' 0E00               	movlw	0
 17259  0050' 6EDD               	movwf	postdec2,c
 17260                           
 17261                           ; BSR set to: 0
 17262  0052' 0012               	return		;funcret
 17263  0054'                    __end_of_ringbuf_init:
 17264                           	opt stack 0
 17265                           tblptru	equ	0xFF8
 17266                           tblptrh	equ	0xFF7
 17267                           tblptrl	equ	0xFF6
 17268                           tablat	equ	0xFF5
 17269                           prodh	equ	0xFF4
 17270                           prodl	equ	0xFF3
 17271                           intcon	equ	0xFF2
 17272                           intcon2	equ	0xFF1
 17273                           indf0	equ	0xFEF
 17274                           postinc0	equ	0xFEE
 17275                           fsr0h	equ	0xFEA
 17276                           fsr0l	equ	0xFE9
 17277                           wreg	equ	0xFE8
 17278                           postinc1	equ	0xFE6
 17279                           postdec1	equ	0xFE5
 17280                           fsr1h	equ	0xFE2
 17281                           fsr1l	equ	0xFE1
 17282                           indf2	equ	0xFDF
 17283                           postinc2	equ	0xFDE
 17284                           postdec2	equ	0xFDD
 17285                           plusw2	equ	0xFDB
 17286                           fsr2h	equ	0xFDA
 17287                           fsr2l	equ	0xFD9
 17288                           status	equ	0xFD8
 17289                           
 17290 ;; *************** function _RTCC_init *****************
 17291 ;; Defined at:
 17292 ;;		line 56 in file "../My_header\My_RTCC.h"
 17293 ;; Parameters:    Size  Location     Type
 17294 ;;		None
 17295 ;; Auto vars:     Size  Location     Type
 17296 ;;		None
 17297 ;; Return value:  Size  Location     Type
 17298 ;;		None               void
 17299 ;; Registers used:
 17300 ;;		wreg, status,2
 17301 ;; Tracked objects:
 17302 ;;		On entry : 0/0
 17303 ;;		On exit  : 0/0
 17304 ;;		Unchanged: 0/0
 17305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17310 ;;Total ram usage:        0 bytes
 17311 ;; Hardware stack levels used:    1
 17312 ;; Hardware stack levels required when called:    3
 17313 ;; This function calls:
 17314 ;;		Nothing
 17315 ;; This function is called by:
 17316 ;;		_main_init
 17317 ;; This function uses a non-reentrant model
 17318 ;;
 17319                           
 17320                           	psect	text59
 17321  0000'                    __ptext59:
 17322                           	opt stack 0
 17323  0000'                    _RTCC_init:
 17324                           	opt stack 26
 17325                           
 17326                           ;My_header\My_RTCC.h: 57: RTCCFGbits.RTCWREN = 1;
 17327                           
 17328                           ; BSR set to: 0
 17329                           ;incstack = 0
 17330  0000' 010F               	movlb	15	; () banked
 17331  0002' 8B3F               	bsf	63,5,b	;volatile
 17332                           
 17333                           ;My_header\My_RTCC.h: 58: if (RTCCFGbits.RTCWREN != 1) {
 17334  0004' 010F               	movlb	15	; () banked
 17335  0006' BB3F               	btfsc	63,5,b	;volatile
 17336  0008' D006               	goto	l8249
 17337                           
 17338                           ; BSR set to: 15
 17339                           ;My_header\My_RTCC.h: 59: EECON2 = 0x55;
 17340  000A' 0E55               	movlw	85
 17341  000C' 6EA7               	movwf	4007,c	;volatile
 17342                           
 17343                           ;My_header\My_RTCC.h: 60: EECON2 = 0xAA;
 17344  000E' 0EAA               	movlw	170
 17345  0010' 6EA7               	movwf	4007,c	;volatile
 17346                           
 17347                           ; BSR set to: 15
 17348                           ;My_header\My_RTCC.h: 61: RTCCFGbits.RTCWREN = 1;
 17349  0012' 010F               	movlb	15	; () banked
 17350  0014' 8B3F               	bsf	63,5,b	;volatile
 17351  0016'                    l8249:
 17352                           
 17353                           ; BSR set to: 15
 17354                           ;My_header\My_RTCC.h: 62: }
 17355                           ;My_header\My_RTCC.h: 63: RTCCFGbits.RTCEN = 1;
 17356  0016' 010F               	movlb	15	; () banked
 17357  0018' 8F3F               	bsf	63,7,b	;volatile
 17358                           
 17359                           ; BSR set to: 15
 17360                           ;My_header\My_RTCC.h: 64: RTCCFGbits.RTCOE = 0;
 17361  001A' 010F               	movlb	15	; () banked
 17362  001C' 953F               	bcf	63,2,b	;volatile
 17363                           
 17364                           ; BSR set to: 15
 17365                           ;My_header\My_RTCC.h: 65: PADCFG1bits.RTSECSEL0 = 1;
 17366  001E' 010F               	movlb	15	; () banked
 17367  0020' 833C               	bsf	60,1,b	;volatile
 17368                           
 17369                           ; BSR set to: 15
 17370                           ;My_header\My_RTCC.h: 66: PADCFG1bits.RTSECSEL1 = 1;
 17371  0022' 010F               	movlb	15	; () banked
 17372  0024' 853C               	bsf	60,2,b	;volatile
 17373                           
 17374                           ;My_header\My_RTCC.h: 67: RTCCAL = 0x00;
 17375  0026' 0E00               	movlw	0
 17376  0028' 010F               	movlb	15	; () banked
 17377  002A' 6F3E               	movwf	62,b	;volatile
 17378                           
 17379                           ; BSR set to: 15
 17380  002C' 0012               	return		;funcret
 17381  002E'                    __end_of_RTCC_init:
 17382                           	opt stack 0
 17383                           tblptru	equ	0xFF8
 17384                           tblptrh	equ	0xFF7
 17385                           tblptrl	equ	0xFF6
 17386                           tablat	equ	0xFF5
 17387                           prodh	equ	0xFF4
 17388                           prodl	equ	0xFF3
 17389                           intcon	equ	0xFF2
 17390                           intcon2	equ	0xFF1
 17391                           indf0	equ	0xFEF
 17392                           postinc0	equ	0xFEE
 17393                           fsr0h	equ	0xFEA
 17394                           fsr0l	equ	0xFE9
 17395                           wreg	equ	0xFE8
 17396                           postinc1	equ	0xFE6
 17397                           postdec1	equ	0xFE5
 17398                           fsr1h	equ	0xFE2
 17399                           fsr1l	equ	0xFE1
 17400                           indf2	equ	0xFDF
 17401                           postinc2	equ	0xFDE
 17402                           postdec2	equ	0xFDD
 17403                           plusw2	equ	0xFDB
 17404                           fsr2h	equ	0xFDA
 17405                           fsr2l	equ	0xFD9
 17406                           status	equ	0xFD8
 17407                           
 17408 ;; *************** function _I2C_init *****************
 17409 ;; Defined at:
 17410 ;;		line 25 in file "../My_header\My_I2C.h"
 17411 ;; Parameters:    Size  Location     Type
 17412 ;;		None
 17413 ;; Auto vars:     Size  Location     Type
 17414 ;;		None
 17415 ;; Return value:  Size  Location     Type
 17416 ;;		None               void
 17417 ;; Registers used:
 17418 ;;		wreg, status,2
 17419 ;; Tracked objects:
 17420 ;;		On entry : 0/0
 17421 ;;		On exit  : 0/0
 17422 ;;		Unchanged: 0/0
 17423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17428 ;;Total ram usage:        0 bytes
 17429 ;; Hardware stack levels used:    1
 17430 ;; Hardware stack levels required when called:    3
 17431 ;; This function calls:
 17432 ;;		Nothing
 17433 ;; This function is called by:
 17434 ;;		_main_init
 17435 ;; This function uses a non-reentrant model
 17436 ;;
 17437                           
 17438                           	psect	text60
 17439  0000'                    __ptext60:
 17440                           	opt stack 0
 17441  0000'                    _I2C_init:
 17442                           	opt stack 26
 17443                           
 17444                           ;My_header\My_I2C.h: 26: SSP1STAT = 0b10000000;
 17445                           
 17446                           ; BSR set to: 15
 17447                           ;incstack = 0
 17448  0000' 0E80               	movlw	128
 17449  0002' 6EC7               	movwf	4039,c	;volatile
 17450                           
 17451                           ;My_header\My_I2C.h: 27: SSP1CON1 = 0b00101000;
 17452  0004' 0E28               	movlw	40
 17453  0006' 6EC6               	movwf	4038,c	;volatile
 17454                           
 17455                           ;My_header\My_I2C.h: 28: SSP1ADD = 0x13;
 17456  0008' 0E13               	movlw	19
 17457  000A' 6EC8               	movwf	4040,c	;volatile
 17458                           
 17459                           ;My_header\My_I2C.h: 31: SSP1IF = 0;
 17460  000C' 969E               	bcf	3998,3,c	;volatile
 17461                           
 17462                           ;My_header\My_I2C.h: 32: BCL1IF = 0;
 17463  000E' 96A1               	bcf	4001,3,c	;volatile
 17464  0010' 0012               	return		;funcret
 17465  0012'                    __end_of_I2C_init:
 17466                           	opt stack 0
 17467                           tblptru	equ	0xFF8
 17468                           tblptrh	equ	0xFF7
 17469                           tblptrl	equ	0xFF6
 17470                           tablat	equ	0xFF5
 17471                           prodh	equ	0xFF4
 17472                           prodl	equ	0xFF3
 17473                           intcon	equ	0xFF2
 17474                           intcon2	equ	0xFF1
 17475                           indf0	equ	0xFEF
 17476                           postinc0	equ	0xFEE
 17477                           fsr0h	equ	0xFEA
 17478                           fsr0l	equ	0xFE9
 17479                           wreg	equ	0xFE8
 17480                           postinc1	equ	0xFE6
 17481                           postdec1	equ	0xFE5
 17482                           fsr1h	equ	0xFE2
 17483                           fsr1l	equ	0xFE1
 17484                           indf2	equ	0xFDF
 17485                           postinc2	equ	0xFDE
 17486                           postdec2	equ	0xFDD
 17487                           plusw2	equ	0xFDB
 17488                           fsr2h	equ	0xFDA
 17489                           fsr2l	equ	0xFD9
 17490                           status	equ	0xFD8
 17491                           
 17492 ;; *************** function _I2C_LCD_init *****************
 17493 ;; Defined at:
 17494 ;;		line 164 in file "../My_header\My_I2C.h"
 17495 ;; Parameters:    Size  Location     Type
 17496 ;;		None
 17497 ;; Auto vars:     Size  Location     Type
 17498 ;;		None
 17499 ;; Return value:  Size  Location     Type
 17500 ;;		None               void
 17501 ;; Registers used:
 17502 ;;		wreg, status,2, status,0, cstack
 17503 ;; Tracked objects:
 17504 ;;		On entry : 0/0
 17505 ;;		On exit  : 0/0
 17506 ;;		Unchanged: 0/0
 17507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17512 ;;Total ram usage:        0 bytes
 17513 ;; Hardware stack levels used:    1
 17514 ;; Hardware stack levels required when called:    7
 17515 ;; This function calls:
 17516 ;;		_Delay_ms
 17517 ;;		_I2C_LCD_Clear
 17518 ;;		_I2C_LCD_Command
 17519 ;; This function is called by:
 17520 ;;		_main_init
 17521 ;; This function uses a non-reentrant model
 17522 ;;
 17523                           
 17524                           	psect	text61
 17525  0000'                    __ptext61:
 17526                           	opt stack 0
 17527  0000'                    _I2C_LCD_init:
 17528                           	opt stack 22
 17529                           
 17530                           ;My_header\My_I2C.h: 165: Delay_ms(40);
 17531                           
 17532                           ;incstack = 0
 17533  0000' 0E00               	movlw	0
 17534  0002' 6E1F'              	movwf	Delay_ms@ms+1,c
 17535  0004' 0E28               	movlw	40
 17536  0006' 6E1E'              	movwf	Delay_ms@ms,c
 17537  0008' EC00' F000'        	call	_Delay_ms	;wreg free
 17538                           
 17539                           ;My_header\My_I2C.h: 166: I2C_LCD_Command(0x38);
 17540  000C' 0E38               	movlw	56
 17541  000E' EC00' F000'        	call	_I2C_LCD_Command
 17542                           
 17543                           ;My_header\My_I2C.h: 167: I2C_LCD_Command(0x39);
 17544  0012' 0E39               	movlw	57
 17545  0014' EC00' F000'        	call	_I2C_LCD_Command
 17546                           
 17547                           ;My_header\My_I2C.h: 168: I2C_LCD_Command(0x14);
 17548  0018' 0E14               	movlw	20
 17549  001A' EC00' F000'        	call	_I2C_LCD_Command
 17550                           
 17551                           ;My_header\My_I2C.h: 169: I2C_LCD_Command(0x70);
 17552  001E' 0E70               	movlw	112
 17553  0020' EC00' F000'        	call	_I2C_LCD_Command
 17554                           
 17555                           ;My_header\My_I2C.h: 170: I2C_LCD_Command(0x56);
 17556  0024' 0E56               	movlw	86
 17557  0026' EC00' F000'        	call	_I2C_LCD_Command
 17558                           
 17559                           ;My_header\My_I2C.h: 171: I2C_LCD_Command(0x6C);
 17560  002A' 0E6C               	movlw	108
 17561  002C' EC00' F000'        	call	_I2C_LCD_Command
 17562                           
 17563                           ;My_header\My_I2C.h: 172: Delay_ms(200);
 17564  0030' 0E00               	movlw	0
 17565  0032' 6E1F'              	movwf	Delay_ms@ms+1,c
 17566  0034' 0EC8               	movlw	200
 17567  0036' 6E1E'              	movwf	Delay_ms@ms,c
 17568  0038' EC00' F000'        	call	_Delay_ms	;wreg free
 17569                           
 17570                           ;My_header\My_I2C.h: 173: I2C_LCD_Command(0x38);
 17571  003C' 0E38               	movlw	56
 17572  003E' EC00' F000'        	call	_I2C_LCD_Command
 17573                           
 17574                           ;My_header\My_I2C.h: 174: I2C_LCD_Command(0x0C);
 17575  0042' 0E0C               	movlw	12
 17576  0044' EC00' F000'        	call	_I2C_LCD_Command
 17577                           
 17578                           ;My_header\My_I2C.h: 175: I2C_LCD_Command(0x06);
 17579  0048' 0E06               	movlw	6
 17580  004A' EC00' F000'        	call	_I2C_LCD_Command
 17581                           
 17582                           ;My_header\My_I2C.h: 176: I2C_LCD_Clear();
 17583  004E' EC00' F000'        	call	_I2C_LCD_Clear	;wreg free
 17584  0052' 0012               	return		;funcret
 17585  0054'                    __end_of_I2C_LCD_init:
 17586                           	opt stack 0
 17587                           tblptru	equ	0xFF8
 17588                           tblptrh	equ	0xFF7
 17589                           tblptrl	equ	0xFF6
 17590                           tablat	equ	0xFF5
 17591                           prodh	equ	0xFF4
 17592                           prodl	equ	0xFF3
 17593                           intcon	equ	0xFF2
 17594                           intcon2	equ	0xFF1
 17595                           indf0	equ	0xFEF
 17596                           postinc0	equ	0xFEE
 17597                           fsr0h	equ	0xFEA
 17598                           fsr0l	equ	0xFE9
 17599                           wreg	equ	0xFE8
 17600                           postinc1	equ	0xFE6
 17601                           postdec1	equ	0xFE5
 17602                           fsr1h	equ	0xFE2
 17603                           fsr1l	equ	0xFE1
 17604                           indf2	equ	0xFDF
 17605                           postinc2	equ	0xFDE
 17606                           postdec2	equ	0xFDD
 17607                           plusw2	equ	0xFDB
 17608                           fsr2h	equ	0xFDA
 17609                           fsr2l	equ	0xFD9
 17610                           status	equ	0xFD8
 17611                           
 17612 ;; *************** function _I2C_LCD_Clear *****************
 17613 ;; Defined at:
 17614 ;;		line 107 in file "../My_header\My_I2C.h"
 17615 ;; Parameters:    Size  Location     Type
 17616 ;;		None
 17617 ;; Auto vars:     Size  Location     Type
 17618 ;;		None
 17619 ;; Return value:  Size  Location     Type
 17620 ;;		None               void
 17621 ;; Registers used:
 17622 ;;		wreg, status,2, status,0, cstack
 17623 ;; Tracked objects:
 17624 ;;		On entry : 0/0
 17625 ;;		On exit  : 0/0
 17626 ;;		Unchanged: 0/0
 17627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17630 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17631 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17632 ;;Total ram usage:        1 bytes
 17633 ;; Hardware stack levels used:    1
 17634 ;; Hardware stack levels required when called:    6
 17635 ;; This function calls:
 17636 ;;		_I2C_LCD_Command
 17637 ;; This function is called by:
 17638 ;;		_I2C_LCD_init
 17639 ;;		_display_LCD
 17640 ;;		_bootload
 17641 ;;		_sleep_loop
 17642 ;; This function uses a non-reentrant model
 17643 ;;
 17644                           
 17645                           	psect	text62
 17646  0000'                    __ptext62:
 17647                           	opt stack 0
 17648  0000'                    _I2C_LCD_Clear:
 17649                           	opt stack 23
 17650                           
 17651                           ;My_header\My_I2C.h: 108: I2C_LCD_Command(0x01);
 17652                           
 17653                           ;incstack = 0
 17654  0000' 0E01               	movlw	1
 17655  0002' EC00' F000'        	call	_I2C_LCD_Command
 17656                           
 17657                           ;My_header\My_I2C.h: 109: _delay((unsigned long)((1100)*(48000000/4000000.0)));
 17658  0006' 0E12               	movlw	18
 17659  0008' 0100               	movlb	0	; () banked
 17660  000A' 6F00'              	movwf	??_I2C_LCD_Clear& (0+255),b
 17661  000C' 0E23               	movlw	35
 17662  000E'                    u11907:
 17663  000E' 2EE8               	decfsz	wreg,f,c
 17664  0010' D7FE               	goto	u11907
 17665  0012' 2F00'              	decfsz	??_I2C_LCD_Clear& (0+255),f,b
 17666  0014' D7FC               	goto	u11907
 17667  0016' F000               	nop	
 17668  0018' 0012               	return		;funcret
 17669  001A'                    __end_of_I2C_LCD_Clear:
 17670                           	opt stack 0
 17671                           tblptru	equ	0xFF8
 17672                           tblptrh	equ	0xFF7
 17673                           tblptrl	equ	0xFF6
 17674                           tablat	equ	0xFF5
 17675                           prodh	equ	0xFF4
 17676                           prodl	equ	0xFF3
 17677                           intcon	equ	0xFF2
 17678                           intcon2	equ	0xFF1
 17679                           indf0	equ	0xFEF
 17680                           postinc0	equ	0xFEE
 17681                           fsr0h	equ	0xFEA
 17682                           fsr0l	equ	0xFE9
 17683                           wreg	equ	0xFE8
 17684                           postinc1	equ	0xFE6
 17685                           postdec1	equ	0xFE5
 17686                           fsr1h	equ	0xFE2
 17687                           fsr1l	equ	0xFE1
 17688                           indf2	equ	0xFDF
 17689                           postinc2	equ	0xFDE
 17690                           postdec2	equ	0xFDD
 17691                           plusw2	equ	0xFDB
 17692                           fsr2h	equ	0xFDA
 17693                           fsr2l	equ	0xFD9
 17694                           status	equ	0xFD8
 17695                           
 17696 ;; *************** function _I2C_LCD_Command *****************
 17697 ;; Defined at:
 17698 ;;		line 94 in file "../My_header\My_I2C.h"
 17699 ;; Parameters:    Size  Location     Type
 17700 ;;  c               1    wreg     unsigned char 
 17701 ;; Auto vars:     Size  Location     Type
 17702 ;;  c               1    0[BANK0 ] unsigned char 
 17703 ;;  ans             1    1[BANK0 ] unsigned char 
 17704 ;; Return value:  Size  Location     Type
 17705 ;;		None               void
 17706 ;; Registers used:
 17707 ;;		wreg, status,2, status,0, cstack
 17708 ;; Tracked objects:
 17709 ;;		On entry : 0/0
 17710 ;;		On exit  : 0/0
 17711 ;;		Unchanged: 0/0
 17712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17714 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17716 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17717 ;;Total ram usage:        2 bytes
 17718 ;; Hardware stack levels used:    1
 17719 ;; Hardware stack levels required when called:    5
 17720 ;; This function calls:
 17721 ;;		_I2C_Send
 17722 ;;		_I2C_Start
 17723 ;;		_I2C_Stop
 17724 ;; This function is called by:
 17725 ;;		_I2C_LCD_Clear
 17726 ;;		_I2C_LCD_SetCursor
 17727 ;;		_I2C_LCD_init
 17728 ;; This function uses a non-reentrant model
 17729 ;;
 17730                           
 17731                           	psect	text63
 17732  0000'                    __ptext63:
 17733                           	opt stack 0
 17734  0000'                    _I2C_LCD_Command:
 17735                           	opt stack 23
 17736                           
 17737                           ;incstack = 0
 17738                           ;I2C_LCD_Command@c stored from wreg
 17739  0000' 0100               	movlb	0	; () banked
 17740  0002' 6F00'              	movwf	I2C_LCD_Command@c& (0+255),b
 17741                           
 17742                           ;My_header\My_I2C.h: 95: uint8_t ans;
 17743                           ;My_header\My_I2C.h: 97: ans = I2C_Start(0x3E, 0);
 17744  0004' 0E00               	movlw	0
 17745  0006' 6E20'              	movwf	I2C_Start@rw,c
 17746  0008' 0E3E               	movlw	62
 17747  000A' EC00' F000'        	call	_I2C_Start
 17748  000E' 0100               	movlb	0	; () banked
 17749  0010' 6F00'              	movwf	I2C_LCD_Command@ans& (0+255),b
 17750                           
 17751                           ; BSR set to: 0
 17752                           ;My_header\My_I2C.h: 98: if (ans == 0) {
 17753  0012' 0100               	movlb	0	; () banked
 17754  0014' 5100'              	movf	I2C_LCD_Command@ans& (0+255),w,b
 17755  0016' 0100               	movlb	0	; () banked
 17756  0018' A4D8               	btfss	status,2,c
 17757  001A' D007               	goto	l347
 17758                           
 17759                           ; BSR set to: 0
 17760                           ;My_header\My_I2C.h: 100: I2C_Send(0b10000000);
 17761  001C' 0E80               	movlw	128
 17762  001E' EC00' F000'        	call	_I2C_Send
 17763                           
 17764                           ;My_header\My_I2C.h: 101: I2C_Send(c);
 17765  0022' 0100               	movlb	0	; () banked
 17766  0024' 5100'              	movf	I2C_LCD_Command@c& (0+255),w,b
 17767  0026' EC00' F000'        	call	_I2C_Send
 17768  002A'                    l347:
 17769                           
 17770                           ;My_header\My_I2C.h: 102: }
 17771                           ;My_header\My_I2C.h: 103: I2C_Stop();
 17772  002A' EC00' F000'        	call	_I2C_Stop	;wreg free
 17773                           
 17774                           ;My_header\My_I2C.h: 104: _delay((unsigned long)((26)*(48000000/4000000.0)));
 17775  002E' 0E68               	movlw	104
 17776  0030'                    u11917:
 17777  0030' 2EE8               	decfsz	wreg,f,c
 17778  0032' D7FE               	goto	u11917
 17779  0034' 0012               	return		;funcret
 17780  0036'                    __end_of_I2C_LCD_Command:
 17781                           	opt stack 0
 17782                           tblptru	equ	0xFF8
 17783                           tblptrh	equ	0xFF7
 17784                           tblptrl	equ	0xFF6
 17785                           tablat	equ	0xFF5
 17786                           prodh	equ	0xFF4
 17787                           prodl	equ	0xFF3
 17788                           intcon	equ	0xFF2
 17789                           intcon2	equ	0xFF1
 17790                           indf0	equ	0xFEF
 17791                           postinc0	equ	0xFEE
 17792                           fsr0h	equ	0xFEA
 17793                           fsr0l	equ	0xFE9
 17794                           wreg	equ	0xFE8
 17795                           postinc1	equ	0xFE6
 17796                           postdec1	equ	0xFE5
 17797                           fsr1h	equ	0xFE2
 17798                           fsr1l	equ	0xFE1
 17799                           indf2	equ	0xFDF
 17800                           postinc2	equ	0xFDE
 17801                           postdec2	equ	0xFDD
 17802                           plusw2	equ	0xFDB
 17803                           fsr2h	equ	0xFDA
 17804                           fsr2l	equ	0xFD9
 17805                           status	equ	0xFD8
 17806                           
 17807 ;; *************** function _I2C_Stop *****************
 17808 ;; Defined at:
 17809 ;;		line 59 in file "../My_header\My_I2C.h"
 17810 ;; Parameters:    Size  Location     Type
 17811 ;;		None
 17812 ;; Auto vars:     Size  Location     Type
 17813 ;;		None
 17814 ;; Return value:  Size  Location     Type
 17815 ;;		None               void
 17816 ;; Registers used:
 17817 ;;		wreg, status,2, status,0, cstack
 17818 ;; Tracked objects:
 17819 ;;		On entry : 0/0
 17820 ;;		On exit  : 0/0
 17821 ;;		Unchanged: 0/0
 17822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17827 ;;Total ram usage:        0 bytes
 17828 ;; Hardware stack levels used:    1
 17829 ;; Hardware stack levels required when called:    4
 17830 ;; This function calls:
 17831 ;;		_I2C_IdleCheck
 17832 ;; This function is called by:
 17833 ;;		_I2C_LCD_Command
 17834 ;;		_I2C_LCD_Putc
 17835 ;;		_I2C_LCD_Puts
 17836 ;;		_I2C_LCD_CreateChar
 17837 ;; This function uses a non-reentrant model
 17838 ;;
 17839                           
 17840                           	psect	text64
 17841  0000'                    __ptext64:
 17842                           	opt stack 0
 17843  0000'                    _I2C_Stop:
 17844                           	opt stack 23
 17845                           
 17846                           ;My_header\My_I2C.h: 61: I2C_IdleCheck(0x5);
 17847                           
 17848                           ;incstack = 0
 17849  0000' 0E05               	movlw	5
 17850  0002' EC00' F000'        	call	_I2C_IdleCheck
 17851                           
 17852                           ;My_header\My_I2C.h: 62: SSP1CON2bits.PEN = 1;
 17853  0006' 84C5               	bsf	4037,2,c	;volatile
 17854  0008' 0012               	return		;funcret
 17855  000A'                    __end_of_I2C_Stop:
 17856                           	opt stack 0
 17857                           tblptru	equ	0xFF8
 17858                           tblptrh	equ	0xFF7
 17859                           tblptrl	equ	0xFF6
 17860                           tablat	equ	0xFF5
 17861                           prodh	equ	0xFF4
 17862                           prodl	equ	0xFF3
 17863                           intcon	equ	0xFF2
 17864                           intcon2	equ	0xFF1
 17865                           indf0	equ	0xFEF
 17866                           postinc0	equ	0xFEE
 17867                           fsr0h	equ	0xFEA
 17868                           fsr0l	equ	0xFE9
 17869                           wreg	equ	0xFE8
 17870                           postinc1	equ	0xFE6
 17871                           postdec1	equ	0xFE5
 17872                           fsr1h	equ	0xFE2
 17873                           fsr1l	equ	0xFE1
 17874                           indf2	equ	0xFDF
 17875                           postinc2	equ	0xFDE
 17876                           postdec2	equ	0xFDD
 17877                           plusw2	equ	0xFDB
 17878                           fsr2h	equ	0xFDA
 17879                           fsr2l	equ	0xFD9
 17880                           status	equ	0xFD8
 17881                           
 17882 ;; *************** function _I2C_Start *****************
 17883 ;; Defined at:
 17884 ;;		line 35 in file "../My_header\My_I2C.h"
 17885 ;; Parameters:    Size  Location     Type
 17886 ;;  adrs            1    wreg     unsigned char 
 17887 ;;  rw              1   32[COMRAM] unsigned char 
 17888 ;; Auto vars:     Size  Location     Type
 17889 ;;  adrs            1   33[COMRAM] unsigned char 
 17890 ;; Return value:  Size  Location     Type
 17891 ;;                  1    wreg      unsigned char 
 17892 ;; Registers used:
 17893 ;;		wreg, status,2, status,0, cstack
 17894 ;; Tracked objects:
 17895 ;;		On entry : 0/0
 17896 ;;		On exit  : 0/0
 17897 ;;		Unchanged: 0/0
 17898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17899 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17900 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17902 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17903 ;;Total ram usage:        2 bytes
 17904 ;; Hardware stack levels used:    1
 17905 ;; Hardware stack levels required when called:    4
 17906 ;; This function calls:
 17907 ;;		_I2C_IdleCheck
 17908 ;; This function is called by:
 17909 ;;		_I2C_LCD_Command
 17910 ;;		_I2C_LCD_Putc
 17911 ;;		_I2C_LCD_Puts
 17912 ;;		_I2C_LCD_CreateChar
 17913 ;; This function uses a non-reentrant model
 17914 ;;
 17915                           
 17916                           	psect	text65
 17917  0000'                    __ptext65:
 17918                           	opt stack 0
 17919  0000'                    _I2C_Start:
 17920                           	opt stack 23
 17921                           
 17922                           ;incstack = 0
 17923                           ;I2C_Start@adrs stored from wreg
 17924  0000' 6E21'              	movwf	I2C_Start@adrs,c
 17925                           
 17926                           ;My_header\My_I2C.h: 37: I2C_IdleCheck(0x5);
 17927  0002' 0E05               	movlw	5
 17928  0004' EC00' F000'        	call	_I2C_IdleCheck
 17929                           
 17930                           ;My_header\My_I2C.h: 38: SSP1CON2bits.SEN = 1;
 17931  0008' 80C5               	bsf	4037,0,c	;volatile
 17932                           
 17933                           ;My_header\My_I2C.h: 40: I2C_IdleCheck(0x5);
 17934  000A' 0E05               	movlw	5
 17935  000C' EC00' F000'        	call	_I2C_IdleCheck
 17936                           
 17937                           ;My_header\My_I2C.h: 41: SSP1IF = 0;
 17938  0010' 969E               	bcf	3998,3,c	;volatile
 17939                           
 17940                           ;My_header\My_I2C.h: 42: SSP1BUF = (uint8_t) ((adrs << 1) + rw);
 17941  0012' 5021'              	movf	I2C_Start@adrs,w,c
 17942  0014' 2421'              	addwf	I2C_Start@adrs,w,c
 17943  0016' 2420'              	addwf	I2C_Start@rw,w,c
 17944  0018' 6EC9               	movwf	4041,c	;volatile
 17945  001A'                    l323:
 17946  001A' A69E               	btfss	3998,3,c	;volatile
 17947  001C' D7FE               	goto	l323
 17948                           
 17949                           ;My_header\My_I2C.h: 44: return SSP1CON2bits.ACKSTAT;
 17950  001E' ACC5               	btfss	4037,6,c	;volatile
 17951  0020' D002               	goto	u8680
 17952  0022' 0E01               	movlw	1
 17953  0024' 0012               	return	
 17954  0026'                    u8680:
 17955  0026' 0E00               	movlw	0
 17956  0028' 0012               	return	
 17957  002A'                    __end_of_I2C_Start:
 17958                           	opt stack 0
 17959                           tblptru	equ	0xFF8
 17960                           tblptrh	equ	0xFF7
 17961                           tblptrl	equ	0xFF6
 17962                           tablat	equ	0xFF5
 17963                           prodh	equ	0xFF4
 17964                           prodl	equ	0xFF3
 17965                           intcon	equ	0xFF2
 17966                           intcon2	equ	0xFF1
 17967                           indf0	equ	0xFEF
 17968                           postinc0	equ	0xFEE
 17969                           fsr0h	equ	0xFEA
 17970                           fsr0l	equ	0xFE9
 17971                           wreg	equ	0xFE8
 17972                           postinc1	equ	0xFE6
 17973                           postdec1	equ	0xFE5
 17974                           fsr1h	equ	0xFE2
 17975                           fsr1l	equ	0xFE1
 17976                           indf2	equ	0xFDF
 17977                           postinc2	equ	0xFDE
 17978                           postdec2	equ	0xFDD
 17979                           plusw2	equ	0xFDB
 17980                           fsr2h	equ	0xFDA
 17981                           fsr2l	equ	0xFD9
 17982                           status	equ	0xFD8
 17983                           
 17984 ;; *************** function _I2C_Send *****************
 17985 ;; Defined at:
 17986 ;;		line 65 in file "../My_header\My_I2C.h"
 17987 ;; Parameters:    Size  Location     Type
 17988 ;;  data            1    wreg     unsigned char 
 17989 ;; Auto vars:     Size  Location     Type
 17990 ;;  data            1   32[COMRAM] unsigned char 
 17991 ;; Return value:  Size  Location     Type
 17992 ;;                  1    wreg      unsigned char 
 17993 ;; Registers used:
 17994 ;;		wreg, status,2, status,0, cstack
 17995 ;; Tracked objects:
 17996 ;;		On entry : 0/0
 17997 ;;		On exit  : 0/0
 17998 ;;		Unchanged: 0/0
 17999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18001 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18003 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18004 ;;Total ram usage:        1 bytes
 18005 ;; Hardware stack levels used:    1
 18006 ;; Hardware stack levels required when called:    4
 18007 ;; This function calls:
 18008 ;;		_I2C_IdleCheck
 18009 ;; This function is called by:
 18010 ;;		_I2C_LCD_Command
 18011 ;;		_I2C_LCD_Putc
 18012 ;;		_I2C_LCD_Puts
 18013 ;;		_I2C_LCD_CreateChar
 18014 ;; This function uses a non-reentrant model
 18015 ;;
 18016                           
 18017                           	psect	text66
 18018  0000'                    __ptext66:
 18019                           	opt stack 0
 18020  0000'                    _I2C_Send:
 18021                           	opt stack 23
 18022                           
 18023                           ;incstack = 0
 18024                           ;I2C_Send@data stored from wreg
 18025  0000' 6E20'              	movwf	I2C_Send@data,c
 18026                           
 18027                           ;My_header\My_I2C.h: 66: I2C_IdleCheck(0x5);
 18028  0002' 0E05               	movlw	5
 18029  0004' EC00' F000'        	call	_I2C_IdleCheck
 18030                           
 18031                           ;My_header\My_I2C.h: 67: SSP1IF = 0;
 18032  0008' 969E               	bcf	3998,3,c	;volatile
 18033                           
 18034                           ;My_header\My_I2C.h: 68: SSP1BUF = data;
 18035  000A' C020' FFC9         	movff	I2C_Send@data,4041	;volatile
 18036  000E'                    l338:
 18037  000E' A69E               	btfss	3998,3,c	;volatile
 18038  0010' D7FE               	goto	l338
 18039                           
 18040                           ;My_header\My_I2C.h: 70: return SSP1CON2bits.ACKSTAT;
 18041                           ;	Return value of _I2C_Send is never used
 18042  0012' 50C5               	movf	4037,w,c	;volatile
 18043  0014' 0012               	return	
 18044  0016'                    __end_of_I2C_Send:
 18045                           	opt stack 0
 18046                           tblptru	equ	0xFF8
 18047                           tblptrh	equ	0xFF7
 18048                           tblptrl	equ	0xFF6
 18049                           tablat	equ	0xFF5
 18050                           prodh	equ	0xFF4
 18051                           prodl	equ	0xFF3
 18052                           intcon	equ	0xFF2
 18053                           intcon2	equ	0xFF1
 18054                           indf0	equ	0xFEF
 18055                           postinc0	equ	0xFEE
 18056                           fsr0h	equ	0xFEA
 18057                           fsr0l	equ	0xFE9
 18058                           wreg	equ	0xFE8
 18059                           postinc1	equ	0xFE6
 18060                           postdec1	equ	0xFE5
 18061                           fsr1h	equ	0xFE2
 18062                           fsr1l	equ	0xFE1
 18063                           indf2	equ	0xFDF
 18064                           postinc2	equ	0xFDE
 18065                           postdec2	equ	0xFDD
 18066                           plusw2	equ	0xFDB
 18067                           fsr2h	equ	0xFDA
 18068                           fsr2l	equ	0xFD9
 18069                           status	equ	0xFD8
 18070                           
 18071 ;; *************** function _I2C_IdleCheck *****************
 18072 ;; Defined at:
 18073 ;;		line 21 in file "../My_header\My_I2C.h"
 18074 ;; Parameters:    Size  Location     Type
 18075 ;;  mask            1    wreg     unsigned char 
 18076 ;; Auto vars:     Size  Location     Type
 18077 ;;  mask            1   31[COMRAM] unsigned char 
 18078 ;; Return value:  Size  Location     Type
 18079 ;;		None               void
 18080 ;; Registers used:
 18081 ;;		wreg, status,2, status,0
 18082 ;; Tracked objects:
 18083 ;;		On entry : 0/0
 18084 ;;		On exit  : 0/0
 18085 ;;		Unchanged: 0/0
 18086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18088 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18089 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18090 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18091 ;;Total ram usage:        2 bytes
 18092 ;; Hardware stack levels used:    1
 18093 ;; Hardware stack levels required when called:    3
 18094 ;; This function calls:
 18095 ;;		Nothing
 18096 ;; This function is called by:
 18097 ;;		_I2C_Start
 18098 ;;		_I2C_Stop
 18099 ;;		_I2C_Send
 18100 ;;		_I2C_rStart
 18101 ;;		_I2C_Receive
 18102 ;; This function uses a non-reentrant model
 18103 ;;
 18104                           
 18105                           	psect	text67
 18106  0000'                    __ptext67:
 18107                           	opt stack 0
 18108  0000'                    _I2C_IdleCheck:
 18109                           	opt stack 23
 18110                           
 18111                           ;incstack = 0
 18112                           ;I2C_IdleCheck@mask stored from wreg
 18113  0000' 6E1F'              	movwf	I2C_IdleCheck@mask,c
 18114  0002'                    l7109:
 18115  0002' 50C7               	movf	4039,w,c	;volatile
 18116  0004' 141F'              	andwf	I2C_IdleCheck@mask,w,c
 18117  0006' 6E00'              	movwf	??_I2C_IdleCheck& (0+255),c
 18118  0008' 50C5               	movf	4037,w,c	;volatile
 18119  000A' 0B1F               	andlw	31
 18120  000C' 101E'              	iorwf	??_I2C_IdleCheck,w,c
 18121  000E' 0900               	iorlw	0
 18122  0010' B4D8               	btfsc	status,2,c
 18123  0012' 0012               	return	
 18124  0014' D7F6               	goto	l7109
 18125  0016'                    __end_of_I2C_IdleCheck:
 18126                           	opt stack 0
 18127                           tblptru	equ	0xFF8
 18128                           tblptrh	equ	0xFF7
 18129                           tblptrl	equ	0xFF6
 18130                           tablat	equ	0xFF5
 18131                           prodh	equ	0xFF4
 18132                           prodl	equ	0xFF3
 18133                           intcon	equ	0xFF2
 18134                           intcon2	equ	0xFF1
 18135                           indf0	equ	0xFEF
 18136                           postinc0	equ	0xFEE
 18137                           fsr0h	equ	0xFEA
 18138                           fsr0l	equ	0xFE9
 18139                           wreg	equ	0xFE8
 18140                           postinc1	equ	0xFE6
 18141                           postdec1	equ	0xFE5
 18142                           fsr1h	equ	0xFE2
 18143                           fsr1l	equ	0xFE1
 18144                           indf2	equ	0xFDF
 18145                           postinc2	equ	0xFDE
 18146                           postdec2	equ	0xFDD
 18147                           plusw2	equ	0xFDB
 18148                           fsr2h	equ	0xFDA
 18149                           fsr2l	equ	0xFD9
 18150                           status	equ	0xFD8
 18151                           
 18152 ;; *************** function _Delay_ms *****************
 18153 ;; Defined at:
 18154 ;;		line 333 in file "../My_header\My_header.h"
 18155 ;; Parameters:    Size  Location     Type
 18156 ;;  ms              2   30[COMRAM] unsigned int 
 18157 ;; Auto vars:     Size  Location     Type
 18158 ;;		None
 18159 ;; Return value:  Size  Location     Type
 18160 ;;		None               void
 18161 ;; Registers used:
 18162 ;;		wreg, status,2, status,0
 18163 ;; Tracked objects:
 18164 ;;		On entry : 0/0
 18165 ;;		On exit  : 0/0
 18166 ;;		Unchanged: 0/0
 18167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18168 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18170 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18171 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18172 ;;Total ram usage:        3 bytes
 18173 ;; Hardware stack levels used:    1
 18174 ;; Hardware stack levels required when called:    3
 18175 ;; This function calls:
 18176 ;;		Nothing
 18177 ;; This function is called by:
 18178 ;;		_I2C_LCD_init
 18179 ;; This function uses a non-reentrant model
 18180 ;;
 18181                           
 18182                           	psect	text68
 18183  0000'                    __ptext68:
 18184                           	opt stack 0
 18185  0000'                    _Delay_ms:
 18186                           	opt stack 25
 18187                           
 18188                           ;My_header\My_header.h: 334: while (ms--)_delay((unsigned long)((1)*(48000000/4000.0)));
 18189                           
 18190                           ;incstack = 0
 18191  0000' D008               	goto	l7693
 18192  0002'                    l7691:
 18193  0002' 0E10               	movlw	16
 18194  0004' 6E00'              	movwf	??_Delay_ms& (0+255),c
 18195  0006' 0E94               	movlw	148
 18196  0008'                    u11927:
 18197  0008' 2EE8               	decfsz	wreg,f,c
 18198  000A' D7FE               	goto	u11927
 18199  000C' 2E00'              	decfsz	??_Delay_ms& (0+255),f,c
 18200  000E' D7FC               	goto	u11927
 18201  0010' D000               	nop2	
 18202  0012'                    l7693:
 18203  0012' 061E'              	decf	Delay_ms@ms,f,c
 18204  0014' A0D8               	btfss	status,0,c
 18205  0016' 061F'              	decf	Delay_ms@ms+1,f,c
 18206  0018' 281E'              	incf	Delay_ms@ms,w,c
 18207  001A' E1F3               	bnz	l7691
 18208  001C' 281F'              	incf	Delay_ms@ms+1,w,c
 18209  001E' B4D8               	btfsc	status,2,c
 18210  0020' 0012               	return	
 18211  0022' D7EF               	goto	l7691
 18212  0024'                    __end_of_Delay_ms:
 18213                           	opt stack 0
 18214                           tblptru	equ	0xFF8
 18215                           tblptrh	equ	0xFF7
 18216                           tblptrl	equ	0xFF6
 18217                           tablat	equ	0xFF5
 18218                           prodh	equ	0xFF4
 18219                           prodl	equ	0xFF3
 18220                           intcon	equ	0xFF2
 18221                           intcon2	equ	0xFF1
 18222                           indf0	equ	0xFEF
 18223                           postinc0	equ	0xFEE
 18224                           fsr0h	equ	0xFEA
 18225                           fsr0l	equ	0xFE9
 18226                           wreg	equ	0xFE8
 18227                           postinc1	equ	0xFE6
 18228                           postdec1	equ	0xFE5
 18229                           fsr1h	equ	0xFE2
 18230                           fsr1l	equ	0xFE1
 18231                           indf2	equ	0xFDF
 18232                           postinc2	equ	0xFDE
 18233                           postdec2	equ	0xFDD
 18234                           plusw2	equ	0xFDB
 18235                           fsr2h	equ	0xFDA
 18236                           fsr2l	equ	0xFD9
 18237                           status	equ	0xFD8
 18238                           
 18239 ;; *************** function _CTMU_init *****************
 18240 ;; Defined at:
 18241 ;;		line 289 in file "../My_header\My_header.h"
 18242 ;; Parameters:    Size  Location     Type
 18243 ;;		None
 18244 ;; Auto vars:     Size  Location     Type
 18245 ;;		None
 18246 ;; Return value:  Size  Location     Type
 18247 ;;		None               void
 18248 ;; Registers used:
 18249 ;;		wreg, status,2
 18250 ;; Tracked objects:
 18251 ;;		On entry : 0/0
 18252 ;;		On exit  : 0/0
 18253 ;;		Unchanged: 0/0
 18254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18259 ;;Total ram usage:        0 bytes
 18260 ;; Hardware stack levels used:    1
 18261 ;; Hardware stack levels required when called:    3
 18262 ;; This function calls:
 18263 ;;		Nothing
 18264 ;; This function is called by:
 18265 ;;		_main_init
 18266 ;; This function uses a non-reentrant model
 18267 ;;
 18268                           
 18269                           	psect	text69
 18270  0000'                    __ptext69:
 18271                           	opt stack 0
 18272  0000'                    _CTMU_init:
 18273                           	opt stack 26
 18274                           
 18275                           ;My_header\My_header.h: 290: CTMUCONH = 0x00;
 18276                           
 18277                           ;incstack = 0
 18278  0000' 0E00               	movlw	0
 18279  0002' 6EB3               	movwf	4019,c	;volatile
 18280                           
 18281                           ;My_header\My_header.h: 291: CTMUCONL = 0x90;
 18282  0004' 0E90               	movlw	144
 18283  0006' 6EB2               	movwf	4018,c	;volatile
 18284                           
 18285                           ;My_header\My_header.h: 292: CTMUICON = 0x01;
 18286  0008' 0E01               	movlw	1
 18287  000A' 6EB1               	movwf	4017,c	;volatile
 18288                           
 18289                           ;My_header\My_header.h: 294: ADCON1bits.ADFM = 1;
 18290  000C' 8EC1               	bsf	4033,7,c	;volatile
 18291                           
 18292                           ;My_header\My_header.h: 295: ADCON1bits.ADCAL = 0;
 18293  000E' 9CC1               	bcf	4033,6,c	;volatile
 18294                           
 18295                           ;My_header\My_header.h: 296: ADCON1bits.ACQT = 1;
 18296  0010' 50C1               	movf	4033,w,c	;volatile
 18297  0012' 0BC7               	andlw	-57
 18298  0014' 0908               	iorlw	8
 18299  0016' 6EC1               	movwf	4033,c	;volatile
 18300                           
 18301                           ;My_header\My_header.h: 297: ADCON1bits.ADCS = 6;
 18302  0018' 50C1               	movf	4033,w,c	;volatile
 18303  001A' 0BF8               	andlw	-8
 18304  001C' 0906               	iorlw	6
 18305  001E' 6EC1               	movwf	4033,c	;volatile
 18306                           
 18307                           ;My_header\My_header.h: 299: ADCON0bits.VCFG0 = 0;
 18308  0020' 9CC2               	bcf	4034,6,c	;volatile
 18309                           
 18310                           ;My_header\My_header.h: 300: ADCON0bits.VCFG1 = 0;
 18311  0022' 9EC2               	bcf	4034,7,c	;volatile
 18312                           
 18313                           ;My_header\My_header.h: 301: ADCON0bits.ADON = 1;
 18314  0024' 80C2               	bsf	4034,0,c	;volatile
 18315  0026' 0012               	return		;funcret
 18316  0028'                    __end_of_CTMU_init:
 18317                           	opt stack 0
 18318                           tblptru	equ	0xFF8
 18319                           tblptrh	equ	0xFF7
 18320                           tblptrl	equ	0xFF6
 18321                           tablat	equ	0xFF5
 18322                           prodh	equ	0xFF4
 18323                           prodl	equ	0xFF3
 18324                           intcon	equ	0xFF2
 18325                           intcon2	equ	0xFF1
 18326                           indf0	equ	0xFEF
 18327                           postinc0	equ	0xFEE
 18328                           fsr0h	equ	0xFEA
 18329                           fsr0l	equ	0xFE9
 18330                           wreg	equ	0xFE8
 18331                           postinc1	equ	0xFE6
 18332                           postdec1	equ	0xFE5
 18333                           fsr1h	equ	0xFE2
 18334                           fsr1l	equ	0xFE1
 18335                           indf2	equ	0xFDF
 18336                           postinc2	equ	0xFDE
 18337                           postdec2	equ	0xFDD
 18338                           plusw2	equ	0xFDB
 18339                           fsr2h	equ	0xFDA
 18340                           fsr2l	equ	0xFD9
 18341                           status	equ	0xFD8
 18342                           
 18343 ;; *************** function _ADC_init *****************
 18344 ;; Defined at:
 18345 ;;		line 149 in file "../My_header\My_header.h"
 18346 ;; Parameters:    Size  Location     Type
 18347 ;;  p_ref           1    wreg     unsigned char 
 18348 ;; Auto vars:     Size  Location     Type
 18349 ;;  p_ref           1   30[COMRAM] unsigned char 
 18350 ;; Return value:  Size  Location     Type
 18351 ;;		None               void
 18352 ;; Registers used:
 18353 ;;		wreg, status,2
 18354 ;; Tracked objects:
 18355 ;;		On entry : 0/0
 18356 ;;		On exit  : 0/0
 18357 ;;		Unchanged: 0/0
 18358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18360 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18362 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18363 ;;Total ram usage:        1 bytes
 18364 ;; Hardware stack levels used:    1
 18365 ;; Hardware stack levels required when called:    3
 18366 ;; This function calls:
 18367 ;;		Nothing
 18368 ;; This function is called by:
 18369 ;;		_main_init
 18370 ;; This function uses a non-reentrant model
 18371 ;;
 18372                           
 18373                           	psect	text70
 18374  0000'                    __ptext70:
 18375                           	opt stack 0
 18376  0000'                    _ADC_init:
 18377                           	opt stack 26
 18378                           
 18379                           ;incstack = 0
 18380                           ;ADC_init@p_ref stored from wreg
 18381  0000' 6E1E'              	movwf	ADC_init@p_ref,c
 18382                           
 18383                           ;My_header\My_header.h: 150: ADCON0bits.VCFG1 = 0;
 18384  0002' 9EC2               	bcf	4034,7,c	;volatile
 18385                           
 18386                           ;My_header\My_header.h: 151: ADCON0bits.VCFG0 = p_ref;
 18387  0004' B01E'              	btfsc	ADC_init@p_ref,0,c
 18388  0006' D002               	bra	u9965
 18389  0008' 9CC2               	bcf	4034,6,c	;volatile
 18390  000A' D001               	bra	u9966
 18391  000C'                    u9965:
 18392  000C' 8CC2               	bsf	4034,6,c	;volatile
 18393  000E'                    u9966:
 18394                           
 18395                           ;My_header\My_header.h: 153: ADCON1bits.ADFM = 1;
 18396  000E' 8EC1               	bsf	4033,7,c	;volatile
 18397                           
 18398                           ;My_header\My_header.h: 154: ADCON1bits.ADCAL = 0;
 18399  0010' 9CC1               	bcf	4033,6,c	;volatile
 18400                           
 18401                           ;My_header\My_header.h: 155: ADCON1bits.ADCS = 6;
 18402  0012' 50C1               	movf	4033,w,c	;volatile
 18403  0014' 0BF8               	andlw	-8
 18404  0016' 0906               	iorlw	6
 18405  0018' 6EC1               	movwf	4033,c	;volatile
 18406  001A' 0012               	return		;funcret
 18407  001C'                    __end_of_ADC_init:
 18408                           	opt stack 0
 18409                           tblptru	equ	0xFF8
 18410                           tblptrh	equ	0xFF7
 18411                           tblptrl	equ	0xFF6
 18412                           tablat	equ	0xFF5
 18413                           prodh	equ	0xFF4
 18414                           prodl	equ	0xFF3
 18415                           intcon	equ	0xFF2
 18416                           intcon2	equ	0xFF1
 18417                           indf0	equ	0xFEF
 18418                           postinc0	equ	0xFEE
 18419                           fsr0h	equ	0xFEA
 18420                           fsr0l	equ	0xFE9
 18421                           wreg	equ	0xFE8
 18422                           postinc1	equ	0xFE6
 18423                           postdec1	equ	0xFE5
 18424                           fsr1h	equ	0xFE2
 18425                           fsr1l	equ	0xFE1
 18426                           indf2	equ	0xFDF
 18427                           postinc2	equ	0xFDE
 18428                           postdec2	equ	0xFDD
 18429                           plusw2	equ	0xFDB
 18430                           fsr2h	equ	0xFDA
 18431                           fsr2l	equ	0xFD9
 18432                           status	equ	0xFD8
 18433                           
 18434 ;; *************** function _ctmu_sampling *****************
 18435 ;; Defined at:
 18436 ;;		line 465 in file "tasks.h"
 18437 ;; Parameters:    Size  Location     Type
 18438 ;;		None
 18439 ;; Auto vars:     Size  Location     Type
 18440 ;;		None
 18441 ;; Return value:  Size  Location     Type
 18442 ;;		None               void
 18443 ;; Registers used:
 18444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18445 ;; Tracked objects:
 18446 ;;		On entry : 0/0
 18447 ;;		On exit  : 0/0
 18448 ;;		Unchanged: 0/0
 18449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18454 ;;Total ram usage:        0 bytes
 18455 ;; Hardware stack levels used:    1
 18456 ;; Hardware stack levels required when called:    5
 18457 ;; This function calls:
 18458 ;;		_CTMU_read
 18459 ;;		___lwdiv
 18460 ;;		_button_timer_interrupt
 18461 ;; This function is called by:
 18462 ;;		_main
 18463 ;; This function uses a non-reentrant model
 18464 ;;
 18465                           
 18466                           	psect	text71
 18467  0000'                    __ptext71:
 18468                           	opt stack 0
 18469  0000'                    _ctmu_sampling:
 18470                           	opt stack 25
 18471                           
 18472                           ;tasks.h: 466: if (ctmu_flag) {
 18473                           
 18474                           ;incstack = 0
 18475  0000' 0100               	movlb	0	; () banked
 18476  0002' 5100'              	movf	_ctmu_flag& (0+255),w,b
 18477  0004' B4D8               	btfsc	status,2,c
 18478  0006' 0012               	return	
 18479                           
 18480                           ; BSR set to: 0
 18481                           ;tasks.h: 467: ctmu_flag = 0;
 18482  0008' 0E00               	movlw	0
 18483  000A' 0100               	movlb	0	; () banked
 18484  000C' 6F00'              	movwf	_ctmu_flag& (0+255),b
 18485                           
 18486                           ; BSR set to: 0
 18487                           ;tasks.h: 468: button_timer_interrupt(&port[0].ctmu, !(CTMU_read(0) / port[0].ctmu_value
      +                          ));
 18488  000E' 0E00'              	movlw	low _port
 18489  0010' 0100               	movlb	0	; () banked
 18490  0012' 6F00'              	movwf	button_timer_interrupt@bt& (0+255),b
 18491  0014' 0E00'              	movlw	high _port
 18492  0016' 0100               	movlb	0	; () banked
 18493  0018' 6F00'              	movwf	(button_timer_interrupt@bt+1)& (0+255),b
 18494  001A' 0E00               	movlw	0
 18495  001C' EC00' F000'        	call	_CTMU_read
 18496  0020' C01E' F019'        	movff	?_CTMU_read,___lwdiv@dividend
 18497  0024' C01F' F01A'        	movff	?_CTMU_read+1,___lwdiv@dividend+1
 18498  0028' C008' F01B'        	movff	_port+4,___lwdiv@divisor
 18499  002C' C009' F01C'        	movff	_port+5,___lwdiv@divisor+1
 18500  0030' EC00' F000'        	call	___lwdiv	;wreg free
 18501  0034' 0100               	movlb	0	; () banked
 18502  0036' 5100'              	movf	?___lwdiv& (0+255),w,b
 18503  0038' 0100               	movlb	0	; () banked
 18504  003A' 1100'              	iorwf	(?___lwdiv+1)& (0+255),w,b
 18505  003C' A4D8               	btfss	status,2,c
 18506  003E' D002               	goto	u11320
 18507  0040' 0E01               	movlw	1
 18508  0042' D001               	goto	u11330
 18509  0044'                    u11320:
 18510  0044' 0E00               	movlw	0
 18511  0046'                    u11330:
 18512  0046' 0100               	movlb	0	; () banked
 18513  0048' 6F00'              	movwf	button_timer_interrupt@sw_value& (0+255),b
 18514  004A' EC00' F000'        	call	_button_timer_interrupt	;wreg free
 18515                           
 18516                           ;tasks.h: 469: button_timer_interrupt(&port[1].ctmu, !(CTMU_read(1) / port[1].ctmu_value
      +                          ));
 18517  004E' 0E00'              	movlw	low (_port+23)
 18518  0050' 0100               	movlb	0	; () banked
 18519  0052' 6F00'              	movwf	button_timer_interrupt@bt& (0+255),b
 18520  0054' 0E00'              	movlw	high (_port+23)
 18521  0056' 0100               	movlb	0	; () banked
 18522  0058' 6F00'              	movwf	(button_timer_interrupt@bt+1)& (0+255),b
 18523  005A' 0E01               	movlw	1
 18524  005C' EC00' F000'        	call	_CTMU_read
 18525  0060' C01E' F019'        	movff	?_CTMU_read,___lwdiv@dividend
 18526  0064' C01F' F01A'        	movff	?_CTMU_read+1,___lwdiv@dividend+1
 18527  0068' C01F' F01B'        	movff	_port+27,___lwdiv@divisor
 18528  006C' C020' F01C'        	movff	_port+28,___lwdiv@divisor+1
 18529  0070' EC00' F000'        	call	___lwdiv	;wreg free
 18530  0074' 0100               	movlb	0	; () banked
 18531  0076' 5100'              	movf	?___lwdiv& (0+255),w,b
 18532  0078' 0100               	movlb	0	; () banked
 18533  007A' 1100'              	iorwf	(?___lwdiv+1)& (0+255),w,b
 18534  007C' A4D8               	btfss	status,2,c
 18535  007E' D002               	goto	u11340
 18536  0080' 0E01               	movlw	1
 18537  0082' D001               	goto	u11350
 18538  0084'                    u11340:
 18539  0084' 0E00               	movlw	0
 18540  0086'                    u11350:
 18541  0086' 0100               	movlb	0	; () banked
 18542  0088' 6F00'              	movwf	button_timer_interrupt@sw_value& (0+255),b
 18543  008A' EC00' F000'        	call	_button_timer_interrupt	;wreg free
 18544                           
 18545                           ;tasks.h: 470: button_timer_interrupt(&port[2].ctmu, !(CTMU_read(2) / port[2].ctmu_value
      +                          ));
 18546  008E' 0E00'              	movlw	low (_port+46)
 18547  0090' 0100               	movlb	0	; () banked
 18548  0092' 6F00'              	movwf	button_timer_interrupt@bt& (0+255),b
 18549  0094' 0E00'              	movlw	high (_port+46)
 18550  0096' 0100               	movlb	0	; () banked
 18551  0098' 6F00'              	movwf	(button_timer_interrupt@bt+1)& (0+255),b
 18552  009A' 0E02               	movlw	2
 18553  009C' EC00' F000'        	call	_CTMU_read
 18554  00A0' C01E' F019'        	movff	?_CTMU_read,___lwdiv@dividend
 18555  00A4' C01F' F01A'        	movff	?_CTMU_read+1,___lwdiv@dividend+1
 18556  00A8' C036' F01B'        	movff	_port+50,___lwdiv@divisor
 18557  00AC' C037' F01C'        	movff	_port+51,___lwdiv@divisor+1
 18558  00B0' EC00' F000'        	call	___lwdiv	;wreg free
 18559  00B4' 0100               	movlb	0	; () banked
 18560  00B6' 5100'              	movf	?___lwdiv& (0+255),w,b
 18561  00B8' 0100               	movlb	0	; () banked
 18562  00BA' 1100'              	iorwf	(?___lwdiv+1)& (0+255),w,b
 18563  00BC' A4D8               	btfss	status,2,c
 18564  00BE' D002               	goto	u11360
 18565  00C0' 0E01               	movlw	1
 18566  00C2' D001               	goto	u11370
 18567  00C4'                    u11360:
 18568  00C4' 0E00               	movlw	0
 18569  00C6'                    u11370:
 18570  00C6' 0100               	movlb	0	; () banked
 18571  00C8' 6F00'              	movwf	button_timer_interrupt@sw_value& (0+255),b
 18572  00CA' EC00' F000'        	call	_button_timer_interrupt	;wreg free
 18573                           
 18574                           ;tasks.h: 471: button_timer_interrupt(&ctmu_m, !(CTMU_read(3) / ctmu_value_m));
 18575  00CE' 0E00'              	movlw	low _ctmu_m
 18576  00D0' 0100               	movlb	0	; () banked
 18577  00D2' 6F00'              	movwf	button_timer_interrupt@bt& (0+255),b
 18578  00D4' 0E00'              	movlw	high _ctmu_m
 18579  00D6' 0100               	movlb	0	; () banked
 18580  00D8' 6F00'              	movwf	(button_timer_interrupt@bt+1)& (0+255),b
 18581  00DA' 0E03               	movlw	3
 18582  00DC' EC00' F000'        	call	_CTMU_read
 18583  00E0' C01E' F019'        	movff	?_CTMU_read,___lwdiv@dividend
 18584  00E4' C01F' F01A'        	movff	?_CTMU_read+1,___lwdiv@dividend+1
 18585  00E8' C000' F01B'        	movff	_ctmu_value_m,___lwdiv@divisor
 18586  00EC' C001' F01C'        	movff	_ctmu_value_m+1,___lwdiv@divisor+1
 18587  00F0' EC00' F000'        	call	___lwdiv	;wreg free
 18588  00F4' 0100               	movlb	0	; () banked
 18589  00F6' 5100'              	movf	?___lwdiv& (0+255),w,b
 18590  00F8' 0100               	movlb	0	; () banked
 18591  00FA' 1100'              	iorwf	(?___lwdiv+1)& (0+255),w,b
 18592  00FC' A4D8               	btfss	status,2,c
 18593  00FE' D002               	goto	u11380
 18594  0100' 0E01               	movlw	1
 18595  0102' D001               	goto	u11390
 18596  0104'                    u11380:
 18597  0104' 0E00               	movlw	0
 18598  0106'                    u11390:
 18599  0106' 0100               	movlb	0	; () banked
 18600  0108' 6F00'              	movwf	button_timer_interrupt@sw_value& (0+255),b
 18601  010A' EC00' F000'        	call	_button_timer_interrupt	;wreg free
 18602  010E' 0012               	return	
 18603  0110'                    __end_of_ctmu_sampling:
 18604                           	opt stack 0
 18605                           tblptru	equ	0xFF8
 18606                           tblptrh	equ	0xFF7
 18607                           tblptrl	equ	0xFF6
 18608                           tablat	equ	0xFF5
 18609                           prodh	equ	0xFF4
 18610                           prodl	equ	0xFF3
 18611                           intcon	equ	0xFF2
 18612                           intcon2	equ	0xFF1
 18613                           indf0	equ	0xFEF
 18614                           postinc0	equ	0xFEE
 18615                           fsr0h	equ	0xFEA
 18616                           fsr0l	equ	0xFE9
 18617                           wreg	equ	0xFE8
 18618                           postinc1	equ	0xFE6
 18619                           postdec1	equ	0xFE5
 18620                           fsr1h	equ	0xFE2
 18621                           fsr1l	equ	0xFE1
 18622                           indf2	equ	0xFDF
 18623                           postinc2	equ	0xFDE
 18624                           postdec2	equ	0xFDD
 18625                           plusw2	equ	0xFDB
 18626                           fsr2h	equ	0xFDA
 18627                           fsr2l	equ	0xFD9
 18628                           status	equ	0xFD8
 18629                           
 18630 ;; *************** function _button_timer_interrupt *****************
 18631 ;; Defined at:
 18632 ;;		line 51 in file "../My_header\My_button.h"
 18633 ;; Parameters:    Size  Location     Type
 18634 ;;  bt              2   32[BANK0 ] PTR struct button
 18635 ;;		 -> ctmu_m(4), port(69), 
 18636 ;;  sw_value        1   34[BANK0 ] unsigned char 
 18637 ;; Auto vars:     Size  Location     Type
 18638 ;;		None
 18639 ;; Return value:  Size  Location     Type
 18640 ;;		None               void
 18641 ;; Registers used:
 18642 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18643 ;; Tracked objects:
 18644 ;;		On entry : 0/0
 18645 ;;		On exit  : 0/0
 18646 ;;		Unchanged: 0/0
 18647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18648 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18650 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18651 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18652 ;;Total ram usage:        5 bytes
 18653 ;; Hardware stack levels used:    1
 18654 ;; Hardware stack levels required when called:    3
 18655 ;; This function calls:
 18656 ;;		Nothing
 18657 ;; This function is called by:
 18658 ;;		_ctmu_sampling
 18659 ;; This function uses a non-reentrant model
 18660 ;;
 18661                           
 18662                           	psect	text72
 18663  0000'                    __ptext72:
 18664                           	opt stack 0
 18665  0000'                    _button_timer_interrupt:
 18666                           	opt stack 26
 18667                           
 18668                           ;My_header\My_button.h: 52: if (sw_value) {
 18669                           
 18670                           ;incstack = 0
 18671  0000' 0100               	movlb	0	; () banked
 18672  0002' 5100'              	movf	button_timer_interrupt@sw_value& (0+255),w,b
 18673  0004' 0100               	movlb	0	; () banked
 18674  0006' B4D8               	btfsc	status,2,c
 18675  0008' D0A8               	goto	l8199
 18676                           
 18677                           ; BSR set to: 0
 18678                           ;My_header\My_button.h: 53: if (bt->cnt_sw == 900)bt->flag.long_holding_7 = 1;
 18679  000A' C020' FFD9         	movff	button_timer_interrupt@bt,fsr2l
 18680  000E' C021' FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 18681  0012' 0E84               	movlw	132
 18682  0014' 18DE               	xorwf	postinc2,w,c
 18683  0016' E10D               	bnz	l286
 18684  0018' 0E03               	movlw	3
 18685  001A' 18DE               	xorwf	postinc2,w,c
 18686  001C' A4D8               	btfss	status,2,c
 18687  001E' D009               	goto	l286
 18688                           
 18689                           ; BSR set to: 0
 18690  0020' 0100               	movlb	0	; () banked
 18691  0022' EE20 F003          	lfsr	2,3
 18692  0026' 5100'              	movf	button_timer_interrupt@bt& (0+255),w,b
 18693  0028' 26D9               	addwf	fsr2l,f,c
 18694  002A' 5100'              	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
 18695  002C' 22DA               	addwfc	fsr2h,f,c
 18696  002E' 0100               	movlb	0	; () banked
 18697  0030' 8EDF               	bsf	indf2,7,c
 18698  0032'                    l286:
 18699                           
 18700                           ; BSR set to: 0
 18701                           ;My_header\My_button.h: 54: if (bt->cnt_sw == 700)bt->flag.long_holding_6 = 1;
 18702  0032' C020' FFD9         	movff	button_timer_interrupt@bt,fsr2l
 18703  0036' C021' FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 18704  003A' 0EBC               	movlw	188
 18705  003C' 18DE               	xorwf	postinc2,w,c
 18706  003E' E10D               	bnz	l287
 18707  0040' 0E02               	movlw	2
 18708  0042' 18DE               	xorwf	postinc2,w,c
 18709  0044' A4D8               	btfss	status,2,c
 18710  0046' D009               	goto	l287
 18711                           
 18712                           ; BSR set to: 0
 18713  0048' 0100               	movlb	0	; () banked
 18714  004A' EE20 F003          	lfsr	2,3
 18715  004E' 5100'              	movf	button_timer_interrupt@bt& (0+255),w,b
 18716  0050' 26D9               	addwf	fsr2l,f,c
 18717  0052' 5100'              	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
 18718  0054' 22DA               	addwfc	fsr2h,f,c
 18719  0056' 0100               	movlb	0	; () banked
 18720  0058' 8CDF               	bsf	indf2,6,c
 18721  005A'                    l287:
 18722                           
 18723                           ; BSR set to: 0
 18724                           ;My_header\My_button.h: 55: if (bt->cnt_sw == 500)bt->flag.long_holding_5 = 1;
 18725  005A' C020' FFD9         	movff	button_timer_interrupt@bt,fsr2l
 18726  005E' C021' FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 18727  0062' 0EF4               	movlw	244
 18728  0064' 18DE               	xorwf	postinc2,w,c
 18729  0066' E10C               	bnz	l288
 18730  0068' 04DE               	decf	postinc2,w,c
 18731  006A' A4D8               	btfss	status,2,c
 18732  006C' D009               	goto	l288
 18733                           
 18734                           ; BSR set to: 0
 18735  006E' 0100               	movlb	0	; () banked
 18736  0070' EE20 F003          	lfsr	2,3
 18737  0074' 5100'              	movf	button_timer_interrupt@bt& (0+255),w,b
 18738  0076' 26D9               	addwf	fsr2l,f,c
 18739  0078' 5100'              	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
 18740  007A' 22DA               	addwfc	fsr2h,f,c
 18741  007C' 0100               	movlb	0	; () banked
 18742  007E' 8ADF               	bsf	indf2,5,c
 18743  0080'                    l288:
 18744                           
 18745                           ; BSR set to: 0
 18746                           ;My_header\My_button.h: 56: if (bt->cnt_sw == 300)bt->flag.long_holding_4 = 1;
 18747  0080' C020' FFD9         	movff	button_timer_interrupt@bt,fsr2l
 18748  0084' C021' FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 18749  0088' 0E2C               	movlw	44
 18750  008A' 18DE               	xorwf	postinc2,w,c
 18751  008C' E10C               	bnz	l289
 18752  008E' 04DE               	decf	postinc2,w,c
 18753  0090' A4D8               	btfss	status,2,c
 18754  0092' D009               	goto	l289
 18755                           
 18756                           ; BSR set to: 0
 18757  0094' 0100               	movlb	0	; () banked
 18758  0096' EE20 F003          	lfsr	2,3
 18759  009A' 5100'              	movf	button_timer_interrupt@bt& (0+255),w,b
 18760  009C' 26D9               	addwf	fsr2l,f,c
 18761  009E' 5100'              	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
 18762  00A0' 22DA               	addwfc	fsr2h,f,c
 18763  00A2' 0100               	movlb	0	; () banked
 18764  00A4' 88DF               	bsf	indf2,4,c
 18765  00A6'                    l289:
 18766                           
 18767                           ; BSR set to: 0
 18768                           ;My_header\My_button.h: 57: if (bt->cnt_sw == 150)bt->flag.long_holding_3 = 1;
 18769  00A6' C020' FFD9         	movff	button_timer_interrupt@bt,fsr2l
 18770  00AA' C021' FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 18771  00AE' 0E96               	movlw	150
 18772  00B0' 18DE               	xorwf	postinc2,w,c
 18773  00B2' 10DE               	iorwf	postinc2,w,c
 18774  00B4' A4D8               	btfss	status,2,c
 18775  00B6' D009               	goto	l290
 18776                           
 18777                           ; BSR set to: 0
 18778  00B8' 0100               	movlb	0	; () banked
 18779  00BA' EE20 F003          	lfsr	2,3
 18780  00BE' 5100'              	movf	button_timer_interrupt@bt& (0+255),w,b
 18781  00C0' 26D9               	addwf	fsr2l,f,c
 18782  00C2' 5100'              	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
 18783  00C4' 22DA               	addwfc	fsr2h,f,c
 18784  00C6' 0100               	movlb	0	; () banked
 18785  00C8' 86DF               	bsf	indf2,3,c
 18786  00CA'                    l290:
 18787                           
 18788                           ; BSR set to: 0
 18789                           ;My_header\My_button.h: 58: if (bt->cnt_sw == 60)bt->flag.long_holding_2 = 1;
 18790  00CA' C020' FFD9         	movff	button_timer_interrupt@bt,fsr2l
 18791  00CE' C021' FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 18792  00D2' 0E3C               	movlw	60
 18793  00D4' 18DE               	xorwf	postinc2,w,c
 18794  00D6' 10DE               	iorwf	postinc2,w,c
 18795  00D8' A4D8               	btfss	status,2,c
 18796  00DA' D009               	goto	l291
 18797                           
 18798                           ; BSR set to: 0
 18799  00DC' 0100               	movlb	0	; () banked
 18800  00DE' EE20 F003          	lfsr	2,3
 18801  00E2' 5100'              	movf	button_timer_interrupt@bt& (0+255),w,b
 18802  00E4' 26D9               	addwf	fsr2l,f,c
 18803  00E6' 5100'              	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
 18804  00E8' 22DA               	addwfc	fsr2h,f,c
 18805  00EA' 0100               	movlb	0	; () banked
 18806  00EC' 84DF               	bsf	indf2,2,c
 18807  00EE'                    l291:
 18808                           
 18809                           ; BSR set to: 0
 18810                           ;My_header\My_button.h: 59: if (bt->cnt_sw == 16)bt->flag.long_holding_1 = 1;
 18811  00EE' C020' FFD9         	movff	button_timer_interrupt@bt,fsr2l
 18812  00F2' C021' FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 18813  00F6' 0E10               	movlw	16
 18814  00F8' 18DE               	xorwf	postinc2,w,c
 18815  00FA' 10DE               	iorwf	postinc2,w,c
 18816  00FC' A4D8               	btfss	status,2,c
 18817  00FE' D009               	goto	l292
 18818                           
 18819                           ; BSR set to: 0
 18820  0100' 0100               	movlb	0	; () banked
 18821  0102' EE20 F003          	lfsr	2,3
 18822  0106' 5100'              	movf	button_timer_interrupt@bt& (0+255),w,b
 18823  0108' 26D9               	addwf	fsr2l,f,c
 18824  010A' 5100'              	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
 18825  010C' 22DA               	addwfc	fsr2h,f,c
 18826  010E' 0100               	movlb	0	; () banked
 18827  0110' 82DF               	bsf	indf2,1,c
 18828  0112'                    l292:
 18829                           
 18830                           ; BSR set to: 0
 18831                           ;My_header\My_button.h: 60: if (bt->cnt_sw == 2)bt->flag.pressing = 1;
 18832  0112' C020' FFD9         	movff	button_timer_interrupt@bt,fsr2l
 18833  0116' C021' FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 18834  011A' 0E02               	movlw	2
 18835  011C' 18DE               	xorwf	postinc2,w,c
 18836  011E' 10DE               	iorwf	postinc2,w,c
 18837  0120' A4D8               	btfss	status,2,c
 18838  0122' D009               	goto	l293
 18839                           
 18840                           ; BSR set to: 0
 18841  0124' 0100               	movlb	0	; () banked
 18842  0126' EE20 F003          	lfsr	2,3
 18843  012A' 5100'              	movf	button_timer_interrupt@bt& (0+255),w,b
 18844  012C' 26D9               	addwf	fsr2l,f,c
 18845  012E' 5100'              	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
 18846  0130' 22DA               	addwfc	fsr2h,f,c
 18847  0132' 0100               	movlb	0	; () banked
 18848  0134' 80DF               	bsf	indf2,0,c
 18849  0136'                    l293:
 18850                           
 18851                           ; BSR set to: 0
 18852                           ;My_header\My_button.h: 61: if (bt->cnt_sw < 900 + 1) bt->cnt_sw++;
 18853  0136' C020' FFD9         	movff	button_timer_interrupt@bt,fsr2l
 18854  013A' C021' FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 18855  013E' 0E85               	movlw	133
 18856  0140' 5CDE               	subwf	postinc2,w,c
 18857  0142' 0E03               	movlw	3
 18858  0144' 58DE               	subwfb	postinc2,w,c
 18859  0146' B0D8               	btfsc	status,0,c
 18860  0148' 0012               	return	
 18861                           
 18862                           ; BSR set to: 0
 18863  014A' C020' FFD9         	movff	button_timer_interrupt@bt,fsr2l
 18864  014E' C021' FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 18865  0152' 2ADE               	incf	postinc2,f,c
 18866  0154' 0E00               	movlw	0
 18867  0156' 22DD               	addwfc	postdec2,f,c
 18868                           
 18869                           ; BSR set to: 0
 18870                           ;My_header\My_button.h: 62: } else {
 18871  0158' 0012               	return	
 18872  015A'                    l8199:
 18873                           
 18874                           ; BSR set to: 0
 18875                           ;My_header\My_button.h: 63: if (bt->cnt_sw >= 900)bt->flag.long_hold_7 = 1;
 18876  015A' C020' FFD9         	movff	button_timer_interrupt@bt,fsr2l
 18877  015E' C021' FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 18878  0162' 0E84               	movlw	132
 18879  0164' 5CDE               	subwf	postinc2,w,c
 18880  0166' 0E03               	movlw	3
 18881  0168' 58DE               	subwfb	postinc2,w,c
 18882  016A' A0D8               	btfss	status,0,c
 18883  016C' D00A               	goto	l8203
 18884                           
 18885                           ; BSR set to: 0
 18886  016E' 0100               	movlb	0	; () banked
 18887  0170' EE20 F002          	lfsr	2,2
 18888  0174' 5100'              	movf	button_timer_interrupt@bt& (0+255),w,b
 18889  0176' 26D9               	addwf	fsr2l,f,c
 18890  0178' 5100'              	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
 18891  017A' 22DA               	addwfc	fsr2h,f,c
 18892  017C' 0100               	movlb	0	; () banked
 18893  017E' 8EDF               	bsf	indf2,7,c
 18894  0180' D08F               	goto	l8231
 18895  0182'                    l8203:
 18896                           
 18897                           ; BSR set to: 0
 18898                           ;My_header\My_button.h: 64: else if (bt->cnt_sw >= 700)bt->flag.long_hold_6 = 1;
 18899  0182' C020' FFD9         	movff	button_timer_interrupt@bt,fsr2l
 18900  0186' C021' FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 18901  018A' 0EBC               	movlw	188
 18902  018C' 5CDE               	subwf	postinc2,w,c
 18903  018E' 0E02               	movlw	2
 18904  0190' 58DE               	subwfb	postinc2,w,c
 18905  0192' A0D8               	btfss	status,0,c
 18906  0194' D00A               	goto	l8207
 18907                           
 18908                           ; BSR set to: 0
 18909  0196' 0100               	movlb	0	; () banked
 18910  0198' EE20 F002          	lfsr	2,2
 18911  019C' 5100'              	movf	button_timer_interrupt@bt& (0+255),w,b
 18912  019E' 26D9               	addwf	fsr2l,f,c
 18913  01A0' 5100'              	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
 18914  01A2' 22DA               	addwfc	fsr2h,f,c
 18915  01A4' 0100               	movlb	0	; () banked
 18916  01A6' 8CDF               	bsf	indf2,6,c
 18917  01A8' D07B               	goto	l8231
 18918  01AA'                    l8207:
 18919                           
 18920                           ; BSR set to: 0
 18921                           ;My_header\My_button.h: 65: else if (bt->cnt_sw >= 500)bt->flag.long_hold_5 = 1;
 18922  01AA' C020' FFD9         	movff	button_timer_interrupt@bt,fsr2l
 18923  01AE' C021' FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 18924  01B2' 0EF4               	movlw	244
 18925  01B4' 5CDE               	subwf	postinc2,w,c
 18926  01B6' 0E01               	movlw	1
 18927  01B8' 58DE               	subwfb	postinc2,w,c
 18928  01BA' A0D8               	btfss	status,0,c
 18929  01BC' D00A               	goto	l8211
 18930                           
 18931                           ; BSR set to: 0
 18932  01BE' 0100               	movlb	0	; () banked
 18933  01C0' EE20 F002          	lfsr	2,2
 18934  01C4' 5100'              	movf	button_timer_interrupt@bt& (0+255),w,b
 18935  01C6' 26D9               	addwf	fsr2l,f,c
 18936  01C8' 5100'              	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
 18937  01CA' 22DA               	addwfc	fsr2h,f,c
 18938  01CC' 0100               	movlb	0	; () banked
 18939  01CE' 8ADF               	bsf	indf2,5,c
 18940  01D0' D067               	goto	l8231
 18941  01D2'                    l8211:
 18942                           
 18943                           ; BSR set to: 0
 18944                           ;My_header\My_button.h: 66: else if (bt->cnt_sw >= 300)bt->flag.long_hold_4 = 1;
 18945  01D2' C020' FFD9         	movff	button_timer_interrupt@bt,fsr2l
 18946  01D6' C021' FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 18947  01DA' 0E2C               	movlw	44
 18948  01DC' 5CDE               	subwf	postinc2,w,c
 18949  01DE' 0E01               	movlw	1
 18950  01E0' 58DE               	subwfb	postinc2,w,c
 18951  01E2' A0D8               	btfss	status,0,c
 18952  01E4' D00A               	goto	l8215
 18953                           
 18954                           ; BSR set to: 0
 18955  01E6' 0100               	movlb	0	; () banked
 18956  01E8' EE20 F002          	lfsr	2,2
 18957  01EC' 5100'              	movf	button_timer_interrupt@bt& (0+255),w,b
 18958  01EE' 26D9               	addwf	fsr2l,f,c
 18959  01F0' 5100'              	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
 18960  01F2' 22DA               	addwfc	fsr2h,f,c
 18961  01F4' 0100               	movlb	0	; () banked
 18962  01F6' 88DF               	bsf	indf2,4,c
 18963  01F8' D053               	goto	l8231
 18964  01FA'                    l8215:
 18965                           
 18966                           ; BSR set to: 0
 18967                           ;My_header\My_button.h: 67: else if (bt->cnt_sw >= 150)bt->flag.long_hold_3 = 1;
 18968  01FA' C020' FFD9         	movff	button_timer_interrupt@bt,fsr2l
 18969  01FE' C021' FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 18970  0202' 0E01               	movlw	1
 18971  0204' 50DB               	movf	plusw2,w,c
 18972  0206' E104               	bnz	u10150
 18973  0208' 0E96               	movlw	150
 18974  020A' 5CDE               	subwf	postinc2,w,c
 18975  020C' A0D8               	btfss	status,0,c
 18976  020E' D00A               	goto	l8219
 18977  0210'                    u10150:
 18978                           
 18979                           ; BSR set to: 0
 18980  0210' 0100               	movlb	0	; () banked
 18981  0212' EE20 F002          	lfsr	2,2
 18982  0216' 5100'              	movf	button_timer_interrupt@bt& (0+255),w,b
 18983  0218' 26D9               	addwf	fsr2l,f,c
 18984  021A' 5100'              	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
 18985  021C' 22DA               	addwfc	fsr2h,f,c
 18986  021E' 0100               	movlb	0	; () banked
 18987  0220' 86DF               	bsf	indf2,3,c
 18988  0222' D03E               	goto	l8231
 18989  0224'                    l8219:
 18990                           
 18991                           ; BSR set to: 0
 18992                           ;My_header\My_button.h: 68: else if (bt->cnt_sw >= 60)bt->flag.long_hold_2 = 1;
 18993  0224' C020' FFD9         	movff	button_timer_interrupt@bt,fsr2l
 18994  0228' C021' FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 18995  022C' 0E01               	movlw	1
 18996  022E' 50DB               	movf	plusw2,w,c
 18997  0230' E104               	bnz	u10160
 18998  0232' 0E3C               	movlw	60
 18999  0234' 5CDE               	subwf	postinc2,w,c
 19000  0236' A0D8               	btfss	status,0,c
 19001  0238' D00A               	goto	l8223
 19002  023A'                    u10160:
 19003                           
 19004                           ; BSR set to: 0
 19005  023A' 0100               	movlb	0	; () banked
 19006  023C' EE20 F002          	lfsr	2,2
 19007  0240' 5100'              	movf	button_timer_interrupt@bt& (0+255),w,b
 19008  0242' 26D9               	addwf	fsr2l,f,c
 19009  0244' 5100'              	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
 19010  0246' 22DA               	addwfc	fsr2h,f,c
 19011  0248' 0100               	movlb	0	; () banked
 19012  024A' 84DF               	bsf	indf2,2,c
 19013  024C' D029               	goto	l8231
 19014  024E'                    l8223:
 19015                           
 19016                           ; BSR set to: 0
 19017                           ;My_header\My_button.h: 69: else if (bt->cnt_sw >= 16)bt->flag.long_hold_1 = 1;
 19018  024E' C020' FFD9         	movff	button_timer_interrupt@bt,fsr2l
 19019  0252' C021' FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 19020  0256' 0E01               	movlw	1
 19021  0258' 50DB               	movf	plusw2,w,c
 19022  025A' E104               	bnz	u10170
 19023  025C' 0E10               	movlw	16
 19024  025E' 5CDE               	subwf	postinc2,w,c
 19025  0260' A0D8               	btfss	status,0,c
 19026  0262' D00A               	goto	l8227
 19027  0264'                    u10170:
 19028                           
 19029                           ; BSR set to: 0
 19030  0264' 0100               	movlb	0	; () banked
 19031  0266' EE20 F002          	lfsr	2,2
 19032  026A' 5100'              	movf	button_timer_interrupt@bt& (0+255),w,b
 19033  026C' 26D9               	addwf	fsr2l,f,c
 19034  026E' 5100'              	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
 19035  0270' 22DA               	addwfc	fsr2h,f,c
 19036  0272' 0100               	movlb	0	; () banked
 19037  0274' 82DF               	bsf	indf2,1,c
 19038  0276' D014               	goto	l8231
 19039  0278'                    l8227:
 19040                           
 19041                           ; BSR set to: 0
 19042                           ;My_header\My_button.h: 70: else if (bt->cnt_sw >= 2)bt->flag.press = 1;
 19043  0278' C020' FFD9         	movff	button_timer_interrupt@bt,fsr2l
 19044  027C' C021' FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 19045  0280' 0E01               	movlw	1
 19046  0282' 50DB               	movf	plusw2,w,c
 19047  0284' E104               	bnz	u10180
 19048  0286' 0E02               	movlw	2
 19049  0288' 5CDE               	subwf	postinc2,w,c
 19050  028A' A0D8               	btfss	status,0,c
 19051  028C' D009               	goto	l8231
 19052  028E'                    u10180:
 19053                           
 19054                           ; BSR set to: 0
 19055  028E' 0100               	movlb	0	; () banked
 19056  0290' EE20 F002          	lfsr	2,2
 19057  0294' 5100'              	movf	button_timer_interrupt@bt& (0+255),w,b
 19058  0296' 26D9               	addwf	fsr2l,f,c
 19059  0298' 5100'              	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
 19060  029A' 22DA               	addwfc	fsr2h,f,c
 19061  029C' 0100               	movlb	0	; () banked
 19062  029E' 80DF               	bsf	indf2,0,c
 19063  02A0'                    l8231:
 19064                           
 19065                           ; BSR set to: 0
 19066                           ;My_header\My_button.h: 71: bt->cnt_sw = 0;
 19067  02A0' C020' FFD9         	movff	button_timer_interrupt@bt,fsr2l
 19068  02A4' C021' FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 19069  02A8' 0E00               	movlw	0
 19070  02AA' 6EDE               	movwf	postinc2,c
 19071  02AC' 0E00               	movlw	0
 19072  02AE' 6EDD               	movwf	postdec2,c
 19073                           
 19074                           ; BSR set to: 0
 19075                           ;My_header\My_button.h: 72: bt->flags &= 0x00FF;
 19076  02B0' 0100               	movlb	0	; () banked
 19077  02B2' EE20 F002          	lfsr	2,2
 19078  02B6' 5100'              	movf	button_timer_interrupt@bt& (0+255),w,b
 19079  02B8' 26D9               	addwf	fsr2l,f,c
 19080  02BA' 5100'              	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
 19081  02BC' 22DA               	addwfc	fsr2h,f,c
 19082  02BE' 0EFF               	movlw	255
 19083  02C0' 16DE               	andwf	postinc2,f,c
 19084  02C2' 0E00               	movlw	0
 19085  02C4' 16DD               	andwf	postdec2,f,c
 19086  02C6' 0012               	return	
 19087  02C8'                    __end_of_button_timer_interrupt:
 19088                           	opt stack 0
 19089                           tblptru	equ	0xFF8
 19090                           tblptrh	equ	0xFF7
 19091                           tblptrl	equ	0xFF6
 19092                           tablat	equ	0xFF5
 19093                           prodh	equ	0xFF4
 19094                           prodl	equ	0xFF3
 19095                           intcon	equ	0xFF2
 19096                           intcon2	equ	0xFF1
 19097                           indf0	equ	0xFEF
 19098                           postinc0	equ	0xFEE
 19099                           fsr0h	equ	0xFEA
 19100                           fsr0l	equ	0xFE9
 19101                           wreg	equ	0xFE8
 19102                           postinc1	equ	0xFE6
 19103                           postdec1	equ	0xFE5
 19104                           fsr1h	equ	0xFE2
 19105                           fsr1l	equ	0xFE1
 19106                           indf2	equ	0xFDF
 19107                           postinc2	equ	0xFDE
 19108                           postdec2	equ	0xFDD
 19109                           plusw2	equ	0xFDB
 19110                           fsr2h	equ	0xFDA
 19111                           fsr2l	equ	0xFD9
 19112                           status	equ	0xFD8
 19113                           
 19114 ;; *************** function ___lwdiv *****************
 19115 ;; Defined at:
 19116 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
 19117 ;; Parameters:    Size  Location     Type
 19118 ;;  dividend        2   25[BANK0 ] unsigned int 
 19119 ;;  divisor         2   27[BANK0 ] unsigned int 
 19120 ;; Auto vars:     Size  Location     Type
 19121 ;;  quotient        2   30[BANK0 ] unsigned int 
 19122 ;;  counter         1   29[BANK0 ] unsigned char 
 19123 ;; Return value:  Size  Location     Type
 19124 ;;                  2   25[BANK0 ] unsigned int 
 19125 ;; Registers used:
 19126 ;;		wreg, status,2, status,0
 19127 ;; Tracked objects:
 19128 ;;		On entry : 0/0
 19129 ;;		On exit  : 0/0
 19130 ;;		Unchanged: 0/0
 19131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19132 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19133 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19135 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19136 ;;Total ram usage:        7 bytes
 19137 ;; Hardware stack levels used:    1
 19138 ;; Hardware stack levels required when called:    3
 19139 ;; This function calls:
 19140 ;;		Nothing
 19141 ;; This function is called by:
 19142 ;;		_ringbuf_put_num
 19143 ;;		_my_utoa
 19144 ;;		_display_LCD
 19145 ;;		_ctmu_set_ratio
 19146 ;;		_command_get_data
 19147 ;;		_ctmu_sampling
 19148 ;;		_normal_loop
 19149 ;;		_sprintf
 19150 ;;		_tx_sendn
 19151 ;; This function uses a non-reentrant model
 19152 ;;
 19153                           
 19154                           	psect	text73
 19155  0000'                    __ptext73:
 19156                           	opt stack 0
 19157  0000'                    ___lwdiv:
 19158                           	opt stack 24
 19159                           
 19160                           ; BSR set to: 0
 19161                           ;incstack = 0
 19162  0000' 0E00               	movlw	0
 19163  0002' 0100               	movlb	0	; () banked
 19164  0004' 6F00'              	movwf	(___lwdiv@quotient+1)& (0+255),b
 19165  0006' 0E00               	movlw	0
 19166  0008' 6F00'              	movwf	___lwdiv@quotient& (0+255),b
 19167                           
 19168                           ; BSR set to: 0
 19169  000A' 0100               	movlb	0	; () banked
 19170  000C' 5100'              	movf	___lwdiv@divisor& (0+255),w,b
 19171  000E' 0100               	movlb	0	; () banked
 19172  0010' 1100'              	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 19173  0012' B4D8               	btfsc	status,2,c
 19174  0014' D02C               	goto	l1522
 19175                           
 19176                           ; BSR set to: 0
 19177  0016' 0E01               	movlw	1
 19178  0018' 0100               	movlb	0	; () banked
 19179  001A' 6F00'              	movwf	___lwdiv@counter& (0+255),b
 19180  001C' D006               	goto	l7185
 19181  001E'                    l7183:
 19182                           
 19183                           ; BSR set to: 0
 19184  001E' 0100               	movlb	0	; () banked
 19185  0020' 90D8               	bcf	status,0,c
 19186  0022' 3700'              	rlcf	___lwdiv@divisor& (0+255),f,b
 19187  0024' 3700'              	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 19188  0026' 0100               	movlb	0	; () banked
 19189  0028' 2B00'              	incf	___lwdiv@counter& (0+255),f,b
 19190  002A'                    l7185:
 19191                           
 19192                           ; BSR set to: 0
 19193  002A' 0100               	movlb	0	; () banked
 19194  002C' AF00'              	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 19195  002E' D7F7               	goto	l7183
 19196  0030'                    l7187:
 19197                           
 19198                           ; BSR set to: 0
 19199  0030' 0100               	movlb	0	; () banked
 19200  0032' 90D8               	bcf	status,0,c
 19201  0034' 3700'              	rlcf	___lwdiv@quotient& (0+255),f,b
 19202  0036' 3700'              	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 19203                           
 19204                           ; BSR set to: 0
 19205  0038' 0100               	movlb	0	; () banked
 19206  003A' 5100'              	movf	___lwdiv@divisor& (0+255),w,b
 19207  003C' 0100               	movlb	0	; () banked
 19208  003E' 5D00'              	subwf	___lwdiv@dividend& (0+255),w,b
 19209  0040' 0100               	movlb	0	; () banked
 19210  0042' 5100'              	movf	(___lwdiv@divisor+1)& (0+255),w,b
 19211  0044' 0100               	movlb	0	; () banked
 19212  0046' 5900'              	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 19213  0048' A0D8               	btfss	status,0,c
 19214  004A' D00A               	goto	l7195
 19215                           
 19216                           ; BSR set to: 0
 19217  004C' 0100               	movlb	0	; () banked
 19218  004E' 5100'              	movf	___lwdiv@divisor& (0+255),w,b
 19219  0050' 0100               	movlb	0	; () banked
 19220  0052' 5F00'              	subwf	___lwdiv@dividend& (0+255),f,b
 19221  0054' 0100               	movlb	0	; () banked
 19222  0056' 5100'              	movf	(___lwdiv@divisor+1)& (0+255),w,b
 19223  0058' 0100               	movlb	0	; () banked
 19224  005A' 5B00'              	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 19225                           
 19226                           ; BSR set to: 0
 19227  005C' 0100               	movlb	0	; () banked
 19228  005E' 8100'              	bsf	___lwdiv@quotient& (0+255),0,b
 19229  0060'                    l7195:
 19230                           
 19231                           ; BSR set to: 0
 19232  0060' 0100               	movlb	0	; () banked
 19233  0062' 90D8               	bcf	status,0,c
 19234  0064' 3300'              	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 19235  0066' 3300'              	rrcf	___lwdiv@divisor& (0+255),f,b
 19236                           
 19237                           ; BSR set to: 0
 19238  0068' 0100               	movlb	0	; () banked
 19239  006A' 2F00'              	decfsz	___lwdiv@counter& (0+255),f,b
 19240  006C' D7E1               	goto	l7187
 19241  006E'                    l1522:
 19242                           
 19243                           ; BSR set to: 0
 19244  006E' C01E' F019'        	movff	___lwdiv@quotient,?___lwdiv
 19245  0072' C01F' F01A'        	movff	___lwdiv@quotient+1,?___lwdiv+1
 19246                           
 19247                           ; BSR set to: 0
 19248  0076' 0012               	return		;funcret
 19249  0078'                    __end_of___lwdiv:
 19250                           	opt stack 0
 19251                           tblptru	equ	0xFF8
 19252                           tblptrh	equ	0xFF7
 19253                           tblptrl	equ	0xFF6
 19254                           tablat	equ	0xFF5
 19255                           prodh	equ	0xFF4
 19256                           prodl	equ	0xFF3
 19257                           intcon	equ	0xFF2
 19258                           intcon2	equ	0xFF1
 19259                           indf0	equ	0xFEF
 19260                           postinc0	equ	0xFEE
 19261                           fsr0h	equ	0xFEA
 19262                           fsr0l	equ	0xFE9
 19263                           wreg	equ	0xFE8
 19264                           postinc1	equ	0xFE6
 19265                           postdec1	equ	0xFE5
 19266                           fsr1h	equ	0xFE2
 19267                           fsr1l	equ	0xFE1
 19268                           indf2	equ	0xFDF
 19269                           postinc2	equ	0xFDE
 19270                           postdec2	equ	0xFDD
 19271                           plusw2	equ	0xFDB
 19272                           fsr2h	equ	0xFDA
 19273                           fsr2l	equ	0xFD9
 19274                           status	equ	0xFD8
 19275                           
 19276 ;; *************** function _CTMU_read *****************
 19277 ;; Defined at:
 19278 ;;		line 304 in file "../My_header\My_header.h"
 19279 ;; Parameters:    Size  Location     Type
 19280 ;;  ch              1    wreg     unsigned char 
 19281 ;; Auto vars:     Size  Location     Type
 19282 ;;  ch              1   13[BANK0 ] unsigned char 
 19283 ;;  i               1   18[BANK0 ] unsigned char 
 19284 ;;  sum             4   14[BANK0 ] unsigned long 
 19285 ;; Return value:  Size  Location     Type
 19286 ;;                  2   30[COMRAM] unsigned int 
 19287 ;; Registers used:
 19288 ;;		wreg, status,2, status,0, cstack
 19289 ;; Tracked objects:
 19290 ;;		On entry : 0/0
 19291 ;;		On exit  : 0/0
 19292 ;;		Unchanged: 0/0
 19293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19294 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19295 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19296 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19297 ;;      Totals:         3       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19298 ;;Total ram usage:        9 bytes
 19299 ;; Hardware stack levels used:    1
 19300 ;; Hardware stack levels required when called:    4
 19301 ;; This function calls:
 19302 ;;		___lldiv
 19303 ;; This function is called by:
 19304 ;;		_ctmu_set_ratio
 19305 ;;		_ctmu_sampling
 19306 ;; This function uses a non-reentrant model
 19307 ;;
 19308                           
 19309                           	psect	text74
 19310  0000'                    __ptext74:
 19311                           	opt stack 0
 19312  0000'                    _CTMU_read:
 19313                           	opt stack 23
 19314                           
 19315                           ; BSR set to: 0
 19316                           ;incstack = 0
 19317                           ;CTMU_read@ch stored from wreg
 19318  0000' 0100               	movlb	0	; () banked
 19319  0002' 6F00'              	movwf	CTMU_read@ch& (0+255),b
 19320                           
 19321                           ;My_header\My_header.h: 305: uint32_t sum = 0;
 19322  0004' 0E00               	movlw	0
 19323  0006' 0100               	movlb	0	; () banked
 19324  0008' 6F00'              	movwf	CTMU_read@sum& (0+255),b
 19325  000A' 0E00               	movlw	0
 19326  000C' 6F00'              	movwf	(CTMU_read@sum+1)& (0+255),b
 19327  000E' 0E00               	movlw	0
 19328  0010' 6F00'              	movwf	(CTMU_read@sum+2)& (0+255),b
 19329  0012' 0E00               	movlw	0
 19330  0014' 6F00'              	movwf	(CTMU_read@sum+3)& (0+255),b
 19331                           
 19332                           ;My_header\My_header.h: 306: for (uint8_t i = 0; i < 10; i++) {
 19333  0016' 0E00               	movlw	0
 19334  0018' 0100               	movlb	0	; () banked
 19335  001A' 6F00'              	movwf	CTMU_read@i& (0+255),b
 19336  001C'                    l7549:
 19337                           
 19338                           ; BSR set to: 0
 19339  001C' 0E09               	movlw	9
 19340  001E' 0100               	movlb	0	; () banked
 19341  0020' 6500'              	cpfsgt	CTMU_read@i& (0+255),b
 19342  0022' D001               	goto	l7553
 19343  0024' D029               	goto	l7581
 19344  0026'                    l7553:
 19345                           
 19346                           ; BSR set to: 0
 19347                           ;My_header\My_header.h: 307: ADCON0bits.CHS = ch;
 19348  0026' C00D' F020'        	movff	CTMU_read@ch,??_CTMU_read
 19349  002A' 4620'              	rlncf	??_CTMU_read,f,c
 19350  002C' 4620'              	rlncf	??_CTMU_read,f,c
 19351  002E' 50C2               	movf	4034,w,c	;volatile
 19352  0030' 1820'              	xorwf	??_CTMU_read,w,c
 19353  0032' 0BC3               	andlw	-61
 19354  0034' 1820'              	xorwf	??_CTMU_read,w,c
 19355  0036' 6EC2               	movwf	4034,c	;volatile
 19356                           
 19357                           ; BSR set to: 0
 19358                           ;My_header\My_header.h: 308: CTMUCONHbits.CTMUEN = 1;
 19359  0038' 8EB3               	bsf	4019,7,c	;volatile
 19360                           
 19361                           ; BSR set to: 0
 19362                           ;My_header\My_header.h: 309: CTMUCONLbits.EDG1STAT = 0;
 19363  003A' 90B2               	bcf	4018,0,c	;volatile
 19364                           
 19365                           ; BSR set to: 0
 19366                           ;My_header\My_header.h: 310: CTMUCONLbits.EDG2STAT = 0;
 19367  003C' 92B2               	bcf	4018,1,c	;volatile
 19368                           
 19369                           ; BSR set to: 0
 19370                           ;My_header\My_header.h: 313: CTMUCONHbits.IDISSEN = 1;
 19371  003E' 82B3               	bsf	4019,1,c	;volatile
 19372                           
 19373                           ; BSR set to: 0
 19374                           ;My_header\My_header.h: 314: _delay((unsigned long)((20)*(48000000/4000000.0)));
 19375  0040' 0E50               	movlw	80
 19376  0042'                    u11937:
 19377  0042' 2EE8               	decfsz	wreg,f,c
 19378  0044' D7FE               	goto	u11937
 19379                           
 19380                           ;My_header\My_header.h: 315: CTMUCONHbits.IDISSEN = 0;
 19381  0046' 92B3               	bcf	4019,1,c	;volatile
 19382                           
 19383                           ;My_header\My_header.h: 317: CTMUCONLbits.EDG1STAT = 1;
 19384  0048' 80B2               	bsf	4018,0,c	;volatile
 19385                           
 19386                           ;My_header\My_header.h: 318: _delay((unsigned long)((5)*(48000000/4000000.0)));
 19387  004A' 0E14               	movlw	20
 19388  004C'                    u11947:
 19389  004C' 2EE8               	decfsz	wreg,f,c
 19390  004E' D7FE               	goto	u11947
 19391                           
 19392                           ;My_header\My_header.h: 319: CTMUCONLbits.EDG1STAT = 0;
 19393  0050' 90B2               	bcf	4018,0,c	;volatile
 19394                           
 19395                           ;My_header\My_header.h: 321: PIR1bits.ADIF = 0;
 19396  0052' 9C9E               	bcf	3998,6,c	;volatile
 19397                           
 19398                           ;My_header\My_header.h: 322: ADCON0bits.GO = 1;
 19399  0054' 82C2               	bsf	4034,1,c	;volatile
 19400  0056'                    l251:
 19401  0056' AC9E               	btfss	3998,6,c	;volatile
 19402  0058' D7FE               	goto	l251
 19403                           
 19404                           ;My_header\My_header.h: 324: sum += ADRES;
 19405  005A' 50C3               	movf	4035,w,c	;volatile
 19406  005C' 0100               	movlb	0	; () banked
 19407  005E' 2700'              	addwf	CTMU_read@sum& (0+255),f,b
 19408  0060' 50C4               	movf	4036,w,c	;volatile
 19409  0062' 0100               	movlb	0	; () banked
 19410  0064' 2300'              	addwfc	(CTMU_read@sum+1)& (0+255),f,b
 19411  0066' 0E00               	movlw	0
 19412  0068' 0100               	movlb	0	; () banked
 19413  006A' 2300'              	addwfc	(CTMU_read@sum+2)& (0+255),f,b
 19414  006C' 0E00               	movlw	0
 19415  006E' 0100               	movlb	0	; () banked
 19416  0070' 2300'              	addwfc	(CTMU_read@sum+3)& (0+255),f,b
 19417  0072' 0100               	movlb	0	; () banked
 19418  0074' 2B00'              	incf	CTMU_read@i& (0+255),f,b
 19419  0076' D7D2               	goto	l7549
 19420  0078'                    l7581:
 19421                           
 19422                           ; BSR set to: 0
 19423                           ;My_header\My_header.h: 325: }
 19424                           ;My_header\My_header.h: 326: return sum / 10 / 4;
 19425  0078' C00E' F000'        	movff	CTMU_read@sum,___lldiv@dividend
 19426  007C' C00F' F001'        	movff	CTMU_read@sum+1,___lldiv@dividend+1
 19427  0080' C010' F002'        	movff	CTMU_read@sum+2,___lldiv@dividend+2
 19428  0084' C011' F003'        	movff	CTMU_read@sum+3,___lldiv@dividend+3
 19429  0088' 0E0A               	movlw	10
 19430  008A' 0100               	movlb	0	; () banked
 19431  008C' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 19432  008E' 0E00               	movlw	0
 19433  0090' 6F00'              	movwf	(___lldiv@divisor+1)& (0+255),b
 19434  0092' 0E00               	movlw	0
 19435  0094' 6F00'              	movwf	(___lldiv@divisor+2)& (0+255),b
 19436  0096' 0E00               	movlw	0
 19437  0098' 6F00'              	movwf	(___lldiv@divisor+3)& (0+255),b
 19438  009A' EC00' F000'        	call	___lldiv	;wreg free
 19439  009E' 0E03               	movlw	3
 19440  00A0' D007               	goto	u9100
 19441  00A2'                    u9105:
 19442  00A2' 0100               	movlb	0	; () banked
 19443  00A4' 90D8               	bcf	status,0,c
 19444  00A6' 3300'              	rrcf	(?___lldiv+3)& (0+255),f,b
 19445  00A8' 3300'              	rrcf	(?___lldiv+2)& (0+255),f,b
 19446  00AA' 0100               	movlb	0	; () banked
 19447  00AC' 3300'              	rrcf	(?___lldiv+1)& (0+255),f,b
 19448  00AE' 3300'              	rrcf	?___lldiv& (0+255),f,b
 19449  00B0'                    u9100:
 19450  00B0' 2EE8               	decfsz	wreg,f,c
 19451  00B2' D7F7               	goto	u9105
 19452  00B4' C000' F01E'        	movff	?___lldiv,?_CTMU_read
 19453  00B8' C001' F01F'        	movff	?___lldiv+1,?_CTMU_read+1
 19454  00BC' 0012               	return	
 19455  00BE'                    __end_of_CTMU_read:
 19456                           	opt stack 0
 19457                           tblptru	equ	0xFF8
 19458                           tblptrh	equ	0xFF7
 19459                           tblptrl	equ	0xFF6
 19460                           tablat	equ	0xFF5
 19461                           prodh	equ	0xFF4
 19462                           prodl	equ	0xFF3
 19463                           intcon	equ	0xFF2
 19464                           intcon2	equ	0xFF1
 19465                           indf0	equ	0xFEF
 19466                           postinc0	equ	0xFEE
 19467                           fsr0h	equ	0xFEA
 19468                           fsr0l	equ	0xFE9
 19469                           wreg	equ	0xFE8
 19470                           postinc1	equ	0xFE6
 19471                           postdec1	equ	0xFE5
 19472                           fsr1h	equ	0xFE2
 19473                           fsr1l	equ	0xFE1
 19474                           indf2	equ	0xFDF
 19475                           postinc2	equ	0xFDE
 19476                           postdec2	equ	0xFDD
 19477                           plusw2	equ	0xFDB
 19478                           fsr2h	equ	0xFDA
 19479                           fsr2l	equ	0xFD9
 19480                           status	equ	0xFD8
 19481                           
 19482 ;; *************** function ___lldiv *****************
 19483 ;; Defined at:
 19484 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lldiv.c"
 19485 ;; Parameters:    Size  Location     Type
 19486 ;;  dividend        4    0[BANK0 ] unsigned long 
 19487 ;;  divisor         4    4[BANK0 ] unsigned long 
 19488 ;; Auto vars:     Size  Location     Type
 19489 ;;  quotient        4    8[BANK0 ] unsigned long 
 19490 ;;  counter         1   12[BANK0 ] unsigned char 
 19491 ;; Return value:  Size  Location     Type
 19492 ;;                  4    0[BANK0 ] unsigned long 
 19493 ;; Registers used:
 19494 ;;		wreg, status,2, status,0
 19495 ;; Tracked objects:
 19496 ;;		On entry : 0/0
 19497 ;;		On exit  : 0/0
 19498 ;;		Unchanged: 0/0
 19499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19500 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19501 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19503 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19504 ;;Total ram usage:       13 bytes
 19505 ;; Hardware stack levels used:    1
 19506 ;; Hardware stack levels required when called:    3
 19507 ;; This function calls:
 19508 ;;		Nothing
 19509 ;; This function is called by:
 19510 ;;		_CTMU_read
 19511 ;;		_get_quot_rem
 19512 ;;		_my_utoa32
 19513 ;;		_display_LCD
 19514 ;;		_command_get_data
 19515 ;; This function uses a non-reentrant model
 19516 ;;
 19517                           
 19518                           	psect	text75
 19519  0000'                    __ptext75:
 19520                           	opt stack 0
 19521  0000'                    ___lldiv:
 19522                           	opt stack 21
 19523                           
 19524                           ; BSR set to: 0
 19525                           ;incstack = 0
 19526  0000' 0E00               	movlw	0
 19527  0002' 0100               	movlb	0	; () banked
 19528  0004' 6F00'              	movwf	___lldiv@quotient& (0+255),b
 19529  0006' 0E00               	movlw	0
 19530  0008' 6F00'              	movwf	(___lldiv@quotient+1)& (0+255),b
 19531  000A' 0E00               	movlw	0
 19532  000C' 6F00'              	movwf	(___lldiv@quotient+2)& (0+255),b
 19533  000E' 0E00               	movlw	0
 19534  0010' 6F00'              	movwf	(___lldiv@quotient+3)& (0+255),b
 19535                           
 19536                           ; BSR set to: 0
 19537  0012' 0100               	movlb	0	; () banked
 19538  0014' 5100'              	movf	___lldiv@divisor& (0+255),w,b
 19539  0016' 0100               	movlb	0	; () banked
 19540  0018' 1100'              	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 19541  001A' 0100               	movlb	0	; () banked
 19542  001C' 1100'              	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 19543  001E' 0100               	movlb	0	; () banked
 19544  0020' 1100'              	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 19545  0022' B4D8               	btfsc	status,2,c
 19546  0024' D042               	goto	l1469
 19547                           
 19548                           ; BSR set to: 0
 19549  0026' 0E01               	movlw	1
 19550  0028' 0100               	movlb	0	; () banked
 19551  002A' 6F00'              	movwf	___lldiv@counter& (0+255),b
 19552  002C' D008               	goto	l7083
 19553  002E'                    l7081:
 19554                           
 19555                           ; BSR set to: 0
 19556  002E' 0100               	movlb	0	; () banked
 19557  0030' 90D8               	bcf	status,0,c
 19558  0032' 3700'              	rlcf	___lldiv@divisor& (0+255),f,b
 19559  0034' 3700'              	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 19560  0036' 3700'              	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 19561  0038' 3700'              	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 19562  003A' 0100               	movlb	0	; () banked
 19563  003C' 2B00'              	incf	___lldiv@counter& (0+255),f,b
 19564  003E'                    l7083:
 19565                           
 19566                           ; BSR set to: 0
 19567  003E' 0100               	movlb	0	; () banked
 19568  0040' AF00'              	btfss	(___lldiv@divisor+3)& (0+255),7,b
 19569  0042' D7F5               	goto	l7081
 19570  0044'                    l7085:
 19571                           
 19572                           ; BSR set to: 0
 19573  0044' 0100               	movlb	0	; () banked
 19574  0046' 90D8               	bcf	status,0,c
 19575  0048' 3700'              	rlcf	___lldiv@quotient& (0+255),f,b
 19576  004A' 3700'              	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 19577  004C' 3700'              	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 19578  004E' 3700'              	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 19579                           
 19580                           ; BSR set to: 0
 19581  0050' 0100               	movlb	0	; () banked
 19582  0052' 5100'              	movf	___lldiv@divisor& (0+255),w,b
 19583  0054' 0100               	movlb	0	; () banked
 19584  0056' 5D00'              	subwf	___lldiv@dividend& (0+255),w,b
 19585  0058' 0100               	movlb	0	; () banked
 19586  005A' 5100'              	movf	(___lldiv@divisor+1)& (0+255),w,b
 19587  005C' 0100               	movlb	0	; () banked
 19588  005E' 5900'              	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 19589  0060' 0100               	movlb	0	; () banked
 19590  0062' 5100'              	movf	(___lldiv@divisor+2)& (0+255),w,b
 19591  0064' 0100               	movlb	0	; () banked
 19592  0066' 5900'              	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 19593  0068' 0100               	movlb	0	; () banked
 19594  006A' 5100'              	movf	(___lldiv@divisor+3)& (0+255),w,b
 19595  006C' 0100               	movlb	0	; () banked
 19596  006E' 5900'              	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 19597  0070' A0D8               	btfss	status,0,c
 19598  0072' D012               	goto	l7093
 19599                           
 19600                           ; BSR set to: 0
 19601  0074' 0100               	movlb	0	; () banked
 19602  0076' 5100'              	movf	___lldiv@divisor& (0+255),w,b
 19603  0078' 0100               	movlb	0	; () banked
 19604  007A' 5F00'              	subwf	___lldiv@dividend& (0+255),f,b
 19605  007C' 0100               	movlb	0	; () banked
 19606  007E' 5100'              	movf	(___lldiv@divisor+1)& (0+255),w,b
 19607  0080' 0100               	movlb	0	; () banked
 19608  0082' 5B00'              	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 19609  0084' 0100               	movlb	0	; () banked
 19610  0086' 5100'              	movf	(___lldiv@divisor+2)& (0+255),w,b
 19611  0088' 0100               	movlb	0	; () banked
 19612  008A' 5B00'              	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 19613  008C' 0100               	movlb	0	; () banked
 19614  008E' 5100'              	movf	(___lldiv@divisor+3)& (0+255),w,b
 19615  0090' 0100               	movlb	0	; () banked
 19616  0092' 5B00'              	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 19617                           
 19618                           ; BSR set to: 0
 19619  0094' 0100               	movlb	0	; () banked
 19620  0096' 8100'              	bsf	___lldiv@quotient& (0+255),0,b
 19621  0098'                    l7093:
 19622                           
 19623                           ; BSR set to: 0
 19624  0098' 0100               	movlb	0	; () banked
 19625  009A' 90D8               	bcf	status,0,c
 19626  009C' 3300'              	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 19627  009E' 3300'              	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 19628  00A0' 3300'              	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 19629  00A2' 3300'              	rrcf	___lldiv@divisor& (0+255),f,b
 19630                           
 19631                           ; BSR set to: 0
 19632  00A4' 0100               	movlb	0	; () banked
 19633  00A6' 2F00'              	decfsz	___lldiv@counter& (0+255),f,b
 19634  00A8' D7CD               	goto	l7085
 19635  00AA'                    l1469:
 19636                           
 19637                           ; BSR set to: 0
 19638  00AA' C008' F000'        	movff	___lldiv@quotient,?___lldiv
 19639  00AE' C009' F001'        	movff	___lldiv@quotient+1,?___lldiv+1
 19640  00B2' C00A' F002'        	movff	___lldiv@quotient+2,?___lldiv+2
 19641  00B6' C00B' F003'        	movff	___lldiv@quotient+3,?___lldiv+3
 19642                           
 19643                           ; BSR set to: 0
 19644  00BA' 0012               	return		;funcret
 19645  00BC'                    __end_of___lldiv:
 19646                           	opt stack 0
 19647                           tblptru	equ	0xFF8
 19648                           tblptrh	equ	0xFF7
 19649                           tblptrl	equ	0xFF6
 19650                           tablat	equ	0xFF5
 19651                           prodh	equ	0xFF4
 19652                           prodl	equ	0xFF3
 19653                           intcon	equ	0xFF2
 19654                           intcon2	equ	0xFF1
 19655                           indf0	equ	0xFEF
 19656                           postinc0	equ	0xFEE
 19657                           fsr0h	equ	0xFEA
 19658                           fsr0l	equ	0xFE9
 19659                           wreg	equ	0xFE8
 19660                           postinc1	equ	0xFE6
 19661                           postdec1	equ	0xFE5
 19662                           fsr1h	equ	0xFE2
 19663                           fsr1l	equ	0xFE1
 19664                           indf2	equ	0xFDF
 19665                           postinc2	equ	0xFDE
 19666                           postdec2	equ	0xFDD
 19667                           plusw2	equ	0xFDB
 19668                           fsr2h	equ	0xFDA
 19669                           fsr2l	equ	0xFD9
 19670                           status	equ	0xFD8
 19671                           
 19672 ;; *************** function _USB_loop *****************
 19673 ;; Defined at:
 19674 ;;		line 758 in file "tasks.h"
 19675 ;; Parameters:    Size  Location     Type
 19676 ;;		None
 19677 ;; Auto vars:     Size  Location     Type
 19678 ;;  rx_len          2   39[BANK0 ] int 
 19679 ;;  data            1   41[BANK0 ] unsigned char 
 19680 ;; Return value:  Size  Location     Type
 19681 ;;		None               void
 19682 ;; Registers used:
 19683 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
 19684 ;; Tracked objects:
 19685 ;;		On entry : 0/0
 19686 ;;		On exit  : 0/0
 19687 ;;		Unchanged: 0/0
 19688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19690 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19692 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19693 ;;Total ram usage:        3 bytes
 19694 ;; Hardware stack levels used:    1
 19695 ;; Hardware stack levels required when called:    5
 19696 ;; This function calls:
 19697 ;;		_get_string_usb
 19698 ;;		_put_string_usb
 19699 ;;		_ringbuf_num
 19700 ;;		_ringbuf_pop
 19701 ;;		_ringbuf_put
 19702 ;; This function is called by:
 19703 ;;		_main
 19704 ;; This function uses a non-reentrant model
 19705 ;;
 19706                           
 19707                           	psect	text76
 19708  0000'                    __ptext76:
 19709                           	opt stack 0
 19710  0000'                    _USB_loop:
 19711                           	opt stack 25
 19712                           
 19713                           ;tasks.h: 759: char data;
 19714                           ;tasks.h: 760: int rx_len;
 19715                           ;tasks.h: 761: rx_len = get_string_usb(&data, 1);
 19716                           
 19717                           ; BSR set to: 0
 19718                           ;incstack = 0
 19719  0000' 0E00'              	movlw	low USB_loop@data
 19720  0002' 6E1E'              	movwf	_get_string_usb$0,c
 19721  0004' 0E00'              	movlw	high USB_loop@data
 19722  0006' 6E1F'              	movwf	_get_string_usb$0+1,c
 19723  0008' 0E00               	movlw	0
 19724  000A' 6E21'              	movwf	_get_string_usb$1+1,c
 19725  000C' 0E01               	movlw	1
 19726  000E' 6E20'              	movwf	_get_string_usb$1,c
 19727  0010' EC00' F000'        	call	_get_string_usb	;wreg free
 19728  0014' C01E' F027'        	movff	?_get_string_usb,USB_loop@rx_len
 19729  0018' C01F' F028'        	movff	?_get_string_usb+1,USB_loop@rx_len+1
 19730                           
 19731                           ;tasks.h: 762: if (rx_len) {
 19732  001C' 0100               	movlb	0	; () banked
 19733  001E' 5100'              	movf	USB_loop@rx_len& (0+255),w,b
 19734  0020' 0100               	movlb	0	; () banked
 19735  0022' 1100'              	iorwf	(USB_loop@rx_len+1)& (0+255),w,b
 19736  0024' B4D8               	btfsc	status,2,c
 19737  0026' D00A               	goto	l1001
 19738                           
 19739                           ; BSR set to: 0
 19740                           ;tasks.h: 763: ringbuf_put(&usb_rx, data);
 19741  0028' 0E00'              	movlw	low _usb_rx
 19742  002A' 0100               	movlb	0	; () banked
 19743  002C' 6F00'              	movwf	ringbuf_put@rb& (0+255),b
 19744  002E' 0E00'              	movlw	high _usb_rx
 19745  0030' 0100               	movlb	0	; () banked
 19746  0032' 6F00'              	movwf	(ringbuf_put@rb+1)& (0+255),b
 19747  0034' C029' F022'        	movff	USB_loop@data,ringbuf_put@asciicode
 19748  0038' EC00' F000'        	call	_ringbuf_put	;wreg free
 19749  003C'                    l1001:
 19750                           
 19751                           ;tasks.h: 764: }
 19752                           ;tasks.h: 765: if (ringbuf_num(&usb_tx)) {
 19753  003C' 0E00'              	movlw	low _usb_tx
 19754  003E' 6E1E'              	movwf	ringbuf_num@rb,c
 19755  0040' 0E00'              	movlw	high _usb_tx
 19756  0042' 6E1F'              	movwf	ringbuf_num@rb+1,c
 19757  0044' EC00' F000'        	call	_ringbuf_num	;wreg free
 19758  0048' 501E'              	movf	?_ringbuf_num,w,c
 19759  004A' 101F'              	iorwf	?_ringbuf_num+1,w,c
 19760  004C' B4D8               	btfsc	status,2,c
 19761  004E' 0012               	return	
 19762                           
 19763                           ;tasks.h: 766: data = ringbuf_pop(&usb_tx);
 19764  0050' 0E00'              	movlw	low _usb_tx
 19765  0052' 6E20'              	movwf	ringbuf_pop@rb,c
 19766  0054' 0E00'              	movlw	high _usb_tx
 19767  0056' 6E21'              	movwf	ringbuf_pop@rb+1,c
 19768  0058' EC00' F000'        	call	_ringbuf_pop	;wreg free
 19769  005C' 0100               	movlb	0	; () banked
 19770  005E' 6F00'              	movwf	USB_loop@data& (0+255),b
 19771  0060'                    l9017:
 19772  0060' 0E00'              	movlw	low USB_loop@data
 19773  0062' 6E1E'              	movwf	_put_string_usb$0,c
 19774  0064' 0E00'              	movlw	high USB_loop@data
 19775  0066' 6E1F'              	movwf	_put_string_usb$0+1,c
 19776  0068' 0E00               	movlw	0
 19777  006A' 6E21'              	movwf	_put_string_usb$1+1,c
 19778  006C' 0E01               	movlw	1
 19779  006E' 6E20'              	movwf	_put_string_usb$1,c
 19780  0070' EC00' F000'        	call	_put_string_usb	;wreg free
 19781  0074' 501E'              	movf	?_put_string_usb,w,c
 19782  0076' 101F'              	iorwf	?_put_string_usb+1,w,c
 19783  0078' B4D8               	btfsc	status,2,c
 19784  007A' 0012               	return	
 19785  007C' D7F1               	goto	l9017
 19786  007E'                    __end_of_USB_loop:
 19787                           	opt stack 0
 19788                           tblptru	equ	0xFF8
 19789                           tblptrh	equ	0xFF7
 19790                           tblptrl	equ	0xFF6
 19791                           tablat	equ	0xFF5
 19792                           prodh	equ	0xFF4
 19793                           prodl	equ	0xFF3
 19794                           intcon	equ	0xFF2
 19795                           intcon2	equ	0xFF1
 19796                           indf0	equ	0xFEF
 19797                           postinc0	equ	0xFEE
 19798                           fsr0h	equ	0xFEA
 19799                           fsr0l	equ	0xFE9
 19800                           wreg	equ	0xFE8
 19801                           postinc1	equ	0xFE6
 19802                           postdec1	equ	0xFE5
 19803                           fsr1h	equ	0xFE2
 19804                           fsr1l	equ	0xFE1
 19805                           indf2	equ	0xFDF
 19806                           postinc2	equ	0xFDE
 19807                           postdec2	equ	0xFDD
 19808                           plusw2	equ	0xFDB
 19809                           fsr2h	equ	0xFDA
 19810                           fsr2l	equ	0xFD9
 19811                           status	equ	0xFD8
 19812                           
 19813 ;; *************** function _ringbuf_put *****************
 19814 ;; Defined at:
 19815 ;;		line 39 in file "../My_header\My_ringbuf.h"
 19816 ;; Parameters:    Size  Location     Type
 19817 ;;  rb              2   32[BANK0 ] PTR struct ringbuf
 19818 ;;		 -> usb_rx(8), usb_tx(8), my_terminal_loop@command(8), rx_buf(8), 
 19819 ;;		 -> tx_buf(8), 
 19820 ;;  asciicode       1   34[BANK0 ] unsigned char 
 19821 ;; Auto vars:     Size  Location     Type
 19822 ;;		None
 19823 ;; Return value:  Size  Location     Type
 19824 ;;		None               void
 19825 ;; Registers used:
 19826 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 19827 ;; Tracked objects:
 19828 ;;		On entry : 0/0
 19829 ;;		On exit  : 0/0
 19830 ;;		Unchanged: 0/0
 19831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19832 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19834 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19835 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19836 ;;Total ram usage:        7 bytes
 19837 ;; Hardware stack levels used:    1
 19838 ;; Hardware stack levels required when called:    4
 19839 ;; This function calls:
 19840 ;;		_ringbuf_num
 19841 ;; This function is called by:
 19842 ;;		_ringbuf_put_num
 19843 ;;		_ringbuf_put_str
 19844 ;;		_my_terminal_loop
 19845 ;;		_command_get_data
 19846 ;;		_normal_loop
 19847 ;;		_USB_loop
 19848 ;;		_UART_ISR
 19849 ;;		_tx_send
 19850 ;;		_tx_sends
 19851 ;; This function uses a non-reentrant model
 19852 ;;
 19853                           
 19854                           	psect	text77
 19855  0000'                    __ptext77:
 19856                           	opt stack 0
 19857  0000'                    _ringbuf_put:
 19858                           	opt stack 24
 19859                           
 19860                           ;My_header\My_ringbuf.h: 40: if (ringbuf_num(rb) < rb->size) {
 19861                           
 19862                           ;incstack = 0
 19863  0000' C020' F01E'        	movff	ringbuf_put@rb,ringbuf_num@rb
 19864  0004' C021' F01F'        	movff	ringbuf_put@rb+1,ringbuf_num@rb+1
 19865  0008' EC00' F000'        	call	_ringbuf_num	;wreg free
 19866  000C' 0100               	movlb	0	; () banked
 19867  000E' EE20 F002          	lfsr	2,2
 19868  0012' 5100'              	movf	ringbuf_put@rb& (0+255),w,b
 19869  0014' 26D9               	addwf	fsr2l,f,c
 19870  0016' 5100'              	movf	(ringbuf_put@rb+1)& (0+255),w,b
 19871  0018' 22DA               	addwfc	fsr2h,f,c
 19872  001A' 50DE               	movf	postinc2,w,c
 19873  001C' 5C1E'              	subwf	?_ringbuf_num,w,c
 19874  001E' 50DE               	movf	postinc2,w,c
 19875  0020' 581F'              	subwfb	?_ringbuf_num+1,w,c
 19876  0022' B0D8               	btfsc	status,0,c
 19877  0024' 0012               	return	
 19878                           
 19879                           ; BSR set to: 0
 19880                           ;My_header\My_ringbuf.h: 41: rb->buf[rb->head] = asciicode;
 19881  0026' 0100               	movlb	0	; () banked
 19882  0028' EE20 F004          	lfsr	2,4
 19883  002C' 5100'              	movf	ringbuf_put@rb& (0+255),w,b
 19884  002E' 26D9               	addwf	fsr2l,f,c
 19885  0030' 5100'              	movf	(ringbuf_put@rb+1)& (0+255),w,b
 19886  0032' 22DA               	addwfc	fsr2h,f,c
 19887  0034' CFDE F023'         	movff	postinc2,??_ringbuf_put
 19888  0038' CFDD F024'         	movff	postdec2,??_ringbuf_put+1
 19889  003C' C020' FFD9         	movff	ringbuf_put@rb,fsr2l
 19890  0040' C021' FFDA         	movff	ringbuf_put@rb+1,fsr2h
 19891  0044' CFDE F025'         	movff	postinc2,??_ringbuf_put+2
 19892  0048' CFDD F026'         	movff	postdec2,??_ringbuf_put+3
 19893  004C' 0100               	movlb	0	; () banked
 19894  004E' 5100'              	movf	??_ringbuf_put& (0+255),w,b
 19895  0050' 0100               	movlb	0	; () banked
 19896  0052' 2500'              	addwf	(??_ringbuf_put+2)& (0+255),w,b
 19897  0054' 6ED9               	movwf	fsr2l,c
 19898  0056' 0100               	movlb	0	; () banked
 19899  0058' 5100'              	movf	(??_ringbuf_put+1)& (0+255),w,b
 19900  005A' 0100               	movlb	0	; () banked
 19901  005C' 2100'              	addwfc	(??_ringbuf_put+3)& (0+255),w,b
 19902  005E' 6EDA               	movwf	fsr2h,c
 19903  0060' C022' FFDF         	movff	ringbuf_put@asciicode,indf2
 19904                           
 19905                           ; BSR set to: 0
 19906                           ;My_header\My_ringbuf.h: 42: if (rb->head + 1 < rb->size) rb->head++;
 19907  0064' 0100               	movlb	0	; () banked
 19908  0066' EE20 F002          	lfsr	2,2
 19909  006A' 5100'              	movf	ringbuf_put@rb& (0+255),w,b
 19910  006C' 26D9               	addwf	fsr2l,f,c
 19911  006E' 5100'              	movf	(ringbuf_put@rb+1)& (0+255),w,b
 19912  0070' 22DA               	addwfc	fsr2h,f,c
 19913  0072' 0100               	movlb	0	; () banked
 19914  0074' EE10 F004          	lfsr	1,4
 19915  0078' 5100'              	movf	ringbuf_put@rb& (0+255),w,b
 19916  007A' 26E1               	addwf	fsr1l,f,c
 19917  007C' 5100'              	movf	(ringbuf_put@rb+1)& (0+255),w,b
 19918  007E' 22E2               	addwfc	fsr1h,f,c
 19919  0080' CFE6 F025'         	movff	postinc1,??_ringbuf_put+2
 19920  0084' CFE5 F026'         	movff	postdec1,??_ringbuf_put+3
 19921  0088' 0E01               	movlw	1
 19922  008A' 0100               	movlb	0	; () banked
 19923  008C' 2700'              	addwf	(??_ringbuf_put+2)& (0+255),f,b
 19924  008E' 0E00               	movlw	0
 19925  0090' 2300'              	addwfc	(??_ringbuf_put+3)& (0+255),f,b
 19926  0092' 50DE               	movf	postinc2,w,c
 19927  0094' 0100               	movlb	0	; () banked
 19928  0096' 5D00'              	subwf	(??_ringbuf_put+2)& (0+255),w,b
 19929  0098' 50DE               	movf	postinc2,w,c
 19930  009A' 0100               	movlb	0	; () banked
 19931  009C' 5900'              	subwfb	(??_ringbuf_put+3)& (0+255),w,b
 19932  009E' B0D8               	btfsc	status,0,c
 19933  00A0' D00B               	goto	l7105
 19934                           
 19935                           ; BSR set to: 0
 19936  00A2' 0100               	movlb	0	; () banked
 19937  00A4' EE20 F004          	lfsr	2,4
 19938  00A8' 5100'              	movf	ringbuf_put@rb& (0+255),w,b
 19939  00AA' 26D9               	addwf	fsr2l,f,c
 19940  00AC' 5100'              	movf	(ringbuf_put@rb+1)& (0+255),w,b
 19941  00AE' 22DA               	addwfc	fsr2h,f,c
 19942  00B0' 2ADE               	incf	postinc2,f,c
 19943  00B2' 0E00               	movlw	0
 19944  00B4' 22DD               	addwfc	postdec2,f,c
 19945  00B6' 0012               	return	
 19946  00B8'                    l7105:
 19947                           
 19948                           ; BSR set to: 0
 19949                           ;My_header\My_ringbuf.h: 43: else rb->head = 0;
 19950  00B8' 0100               	movlb	0	; () banked
 19951  00BA' EE20 F004          	lfsr	2,4
 19952  00BE' 5100'              	movf	ringbuf_put@rb& (0+255),w,b
 19953  00C0' 26D9               	addwf	fsr2l,f,c
 19954  00C2' 5100'              	movf	(ringbuf_put@rb+1)& (0+255),w,b
 19955  00C4' 22DA               	addwfc	fsr2h,f,c
 19956  00C6' 0E00               	movlw	0
 19957  00C8' 6EDE               	movwf	postinc2,c
 19958  00CA' 0E00               	movlw	0
 19959  00CC' 6EDD               	movwf	postdec2,c
 19960                           
 19961                           ; BSR set to: 0
 19962  00CE' 0012               	return	
 19963  00D0'                    __end_of_ringbuf_put:
 19964                           	opt stack 0
 19965                           tblptru	equ	0xFF8
 19966                           tblptrh	equ	0xFF7
 19967                           tblptrl	equ	0xFF6
 19968                           tablat	equ	0xFF5
 19969                           prodh	equ	0xFF4
 19970                           prodl	equ	0xFF3
 19971                           intcon	equ	0xFF2
 19972                           intcon2	equ	0xFF1
 19973                           indf0	equ	0xFEF
 19974                           postinc0	equ	0xFEE
 19975                           fsr0h	equ	0xFEA
 19976                           fsr0l	equ	0xFE9
 19977                           wreg	equ	0xFE8
 19978                           postinc1	equ	0xFE6
 19979                           postdec1	equ	0xFE5
 19980                           fsr1h	equ	0xFE2
 19981                           fsr1l	equ	0xFE1
 19982                           indf2	equ	0xFDF
 19983                           postinc2	equ	0xFDE
 19984                           postdec2	equ	0xFDD
 19985                           plusw2	equ	0xFDB
 19986                           fsr2h	equ	0xFDA
 19987                           fsr2l	equ	0xFD9
 19988                           status	equ	0xFD8
 19989                           
 19990 ;; *************** function _ringbuf_pop *****************
 19991 ;; Defined at:
 19992 ;;		line 64 in file "../My_header\My_ringbuf.h"
 19993 ;; Parameters:    Size  Location     Type
 19994 ;;  rb              2   32[COMRAM] PTR struct ringbuf
 19995 ;;		 -> usb_rx(8), usb_tx(8), my_terminal_loop@command(8), tx_buf(8), 
 19996 ;; Auto vars:     Size  Location     Type
 19997 ;;  ret             1   10[BANK0 ] unsigned char 
 19998 ;; Return value:  Size  Location     Type
 19999 ;;                  1    wreg      unsigned char 
 20000 ;; Registers used:
 20001 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 20002 ;; Tracked objects:
 20003 ;;		On entry : 0/0
 20004 ;;		On exit  : 0/0
 20005 ;;		Unchanged: 0/0
 20006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20007 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20008 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20009 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20010 ;;      Totals:         2       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20011 ;;Total ram usage:        7 bytes
 20012 ;; Hardware stack levels used:    1
 20013 ;; Hardware stack levels required when called:    4
 20014 ;; This function calls:
 20015 ;;		_ringbuf_num
 20016 ;; This function is called by:
 20017 ;;		_my_terminal_loop
 20018 ;;		_USB_loop
 20019 ;;		_UART_ISR
 20020 ;; This function uses a non-reentrant model
 20021 ;;
 20022                           
 20023                           	psect	text78
 20024  0000'                    __ptext78:
 20025                           	opt stack 0
 20026  0000'                    _ringbuf_pop:
 20027                           	opt stack 25
 20028                           
 20029                           ;My_header\My_ringbuf.h: 65: if (ringbuf_num(rb)) {
 20030                           
 20031                           ; BSR set to: 0
 20032                           ;incstack = 0
 20033  0000' C020' F01E'        	movff	ringbuf_pop@rb,ringbuf_num@rb
 20034  0004' C021' F01F'        	movff	ringbuf_pop@rb+1,ringbuf_num@rb+1
 20035  0008' EC00' F000'        	call	_ringbuf_num	;wreg free
 20036  000C' 501E'              	movf	?_ringbuf_num,w,c
 20037  000E' 101F'              	iorwf	?_ringbuf_num+1,w,c
 20038  0010' B4D8               	btfsc	status,2,c
 20039  0012' D053               	goto	l8151
 20040                           
 20041                           ;My_header\My_ringbuf.h: 66: char ret = rb->buf[rb->tail];
 20042  0014' EE20 F006          	lfsr	2,6
 20043  0018' 5020'              	movf	ringbuf_pop@rb,w,c
 20044  001A' 26D9               	addwf	fsr2l,f,c
 20045  001C' 5021'              	movf	ringbuf_pop@rb+1,w,c
 20046  001E' 22DA               	addwfc	fsr2h,f,c
 20047  0020' CFDE F006'         	movff	postinc2,??_ringbuf_pop
 20048  0024' CFDD F007'         	movff	postdec2,??_ringbuf_pop+1
 20049  0028' C020' FFD9         	movff	ringbuf_pop@rb,fsr2l
 20050  002C' C021' FFDA         	movff	ringbuf_pop@rb+1,fsr2h
 20051  0030' CFDE F008'         	movff	postinc2,??_ringbuf_pop+2
 20052  0034' CFDD F009'         	movff	postdec2,??_ringbuf_pop+3
 20053  0038' 0100               	movlb	0	; () banked
 20054  003A' 5100'              	movf	??_ringbuf_pop& (0+255),w,b
 20055  003C' 0100               	movlb	0	; () banked
 20056  003E' 2500'              	addwf	(??_ringbuf_pop+2)& (0+255),w,b
 20057  0040' 6ED9               	movwf	fsr2l,c
 20058  0042' 0100               	movlb	0	; () banked
 20059  0044' 5100'              	movf	(??_ringbuf_pop+1)& (0+255),w,b
 20060  0046' 0100               	movlb	0	; () banked
 20061  0048' 2100'              	addwfc	(??_ringbuf_pop+3)& (0+255),w,b
 20062  004A' 6EDA               	movwf	fsr2h,c
 20063  004C' 50DF               	movf	indf2,w,c
 20064  004E' 0100               	movlb	0	; () banked
 20065  0050' 6F00'              	movwf	ringbuf_pop@ret& (0+255),b
 20066                           
 20067                           ; BSR set to: 0
 20068                           ;My_header\My_ringbuf.h: 67: if (rb->tail + 1 < rb->size) {
 20069  0052' EE20 F002          	lfsr	2,2
 20070  0056' 5020'              	movf	ringbuf_pop@rb,w,c
 20071  0058' 26D9               	addwf	fsr2l,f,c
 20072  005A' 5021'              	movf	ringbuf_pop@rb+1,w,c
 20073  005C' 22DA               	addwfc	fsr2h,f,c
 20074  005E' EE10 F006          	lfsr	1,6
 20075  0062' 5020'              	movf	ringbuf_pop@rb,w,c
 20076  0064' 26E1               	addwf	fsr1l,f,c
 20077  0066' 5021'              	movf	ringbuf_pop@rb+1,w,c
 20078  0068' 22E2               	addwfc	fsr1h,f,c
 20079  006A' CFE6 F008'         	movff	postinc1,??_ringbuf_pop+2
 20080  006E' CFE5 F009'         	movff	postdec1,??_ringbuf_pop+3
 20081  0072' 0E01               	movlw	1
 20082  0074' 0100               	movlb	0	; () banked
 20083  0076' 2700'              	addwf	(??_ringbuf_pop+2)& (0+255),f,b
 20084  0078' 0E00               	movlw	0
 20085  007A' 2300'              	addwfc	(??_ringbuf_pop+3)& (0+255),f,b
 20086  007C' 50DE               	movf	postinc2,w,c
 20087  007E' 0100               	movlb	0	; () banked
 20088  0080' 5D00'              	subwf	(??_ringbuf_pop+2)& (0+255),w,b
 20089  0082' 50DE               	movf	postinc2,w,c
 20090  0084' 0100               	movlb	0	; () banked
 20091  0086' 5900'              	subwfb	(??_ringbuf_pop+3)& (0+255),w,b
 20092  0088' B0D8               	btfsc	status,0,c
 20093  008A' D00A               	goto	l8143
 20094                           
 20095                           ; BSR set to: 0
 20096                           ;My_header\My_ringbuf.h: 68: rb->tail++;
 20097  008C' EE20 F006          	lfsr	2,6
 20098  0090' 5020'              	movf	ringbuf_pop@rb,w,c
 20099  0092' 26D9               	addwf	fsr2l,f,c
 20100  0094' 5021'              	movf	ringbuf_pop@rb+1,w,c
 20101  0096' 22DA               	addwfc	fsr2h,f,c
 20102  0098' 2ADE               	incf	postinc2,f,c
 20103  009A' 0E00               	movlw	0
 20104  009C' 22DD               	addwfc	postdec2,f,c
 20105                           
 20106                           ;My_header\My_ringbuf.h: 69: } else {
 20107  009E' D00A               	goto	l8145
 20108  00A0'                    l8143:
 20109                           
 20110                           ; BSR set to: 0
 20111                           ;My_header\My_ringbuf.h: 70: rb->tail = 0;
 20112  00A0' EE20 F006          	lfsr	2,6
 20113  00A4' 5020'              	movf	ringbuf_pop@rb,w,c
 20114  00A6' 26D9               	addwf	fsr2l,f,c
 20115  00A8' 5021'              	movf	ringbuf_pop@rb+1,w,c
 20116  00AA' 22DA               	addwfc	fsr2h,f,c
 20117  00AC' 0E00               	movlw	0
 20118  00AE' 6EDE               	movwf	postinc2,c
 20119  00B0' 0E00               	movlw	0
 20120  00B2' 6EDD               	movwf	postdec2,c
 20121  00B4'                    l8145:
 20122                           
 20123                           ; BSR set to: 0
 20124                           ;My_header\My_ringbuf.h: 71: }
 20125                           ;My_header\My_ringbuf.h: 72: return ret;
 20126  00B4' 0100               	movlb	0	; () banked
 20127  00B6' 5100'              	movf	ringbuf_pop@ret& (0+255),w,b
 20128                           
 20129                           ; BSR set to: 0
 20130                           ;My_header\My_ringbuf.h: 73: } else {
 20131                           
 20132                           ; BSR set to: 0
 20133  00B8' 0012               	return	
 20134  00BA'                    l8151:
 20135                           
 20136                           ;My_header\My_ringbuf.h: 74: return 0;
 20137  00BA' 0E00               	movlw	0
 20138  00BC' 0012               	return	
 20139  00BE'                    __end_of_ringbuf_pop:
 20140                           	opt stack 0
 20141                           tblptru	equ	0xFF8
 20142                           tblptrh	equ	0xFF7
 20143                           tblptrl	equ	0xFF6
 20144                           tablat	equ	0xFF5
 20145                           prodh	equ	0xFF4
 20146                           prodl	equ	0xFF3
 20147                           intcon	equ	0xFF2
 20148                           intcon2	equ	0xFF1
 20149                           indf0	equ	0xFEF
 20150                           postinc0	equ	0xFEE
 20151                           fsr0h	equ	0xFEA
 20152                           fsr0l	equ	0xFE9
 20153                           wreg	equ	0xFE8
 20154                           postinc1	equ	0xFE6
 20155                           postdec1	equ	0xFE5
 20156                           fsr1h	equ	0xFE2
 20157                           fsr1l	equ	0xFE1
 20158                           indf2	equ	0xFDF
 20159                           postinc2	equ	0xFDE
 20160                           postdec2	equ	0xFDD
 20161                           plusw2	equ	0xFDB
 20162                           fsr2h	equ	0xFDA
 20163                           fsr2l	equ	0xFD9
 20164                           status	equ	0xFD8
 20165                           
 20166 ;; *************** function _ringbuf_num *****************
 20167 ;; Defined at:
 20168 ;;		line 31 in file "../My_header\My_ringbuf.h"
 20169 ;; Parameters:    Size  Location     Type
 20170 ;;  rb              2   30[COMRAM] PTR struct ringbuf
 20171 ;;		 -> usb_rx(8), usb_tx(8), my_terminal_loop@command(8), rx_buf(8), 
 20172 ;;		 -> tx_buf(8), 
 20173 ;; Auto vars:     Size  Location     Type
 20174 ;;		None
 20175 ;; Return value:  Size  Location     Type
 20176 ;;                  2   30[COMRAM] unsigned int 
 20177 ;; Registers used:
 20178 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 20179 ;; Tracked objects:
 20180 ;;		On entry : 0/0
 20181 ;;		On exit  : 0/0
 20182 ;;		Unchanged: 0/0
 20183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20184 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20186 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20187 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20188 ;;Total ram usage:        8 bytes
 20189 ;; Hardware stack levels used:    1
 20190 ;; Hardware stack levels required when called:    3
 20191 ;; This function calls:
 20192 ;;		Nothing
 20193 ;; This function is called by:
 20194 ;;		_ringbuf_put
 20195 ;;		_ringbuf_pop
 20196 ;;		_ringbuf_backspace
 20197 ;;		_my_terminal_loop
 20198 ;;		_USB_loop
 20199 ;;		_UART_ISR
 20200 ;; This function uses a non-reentrant model
 20201 ;;
 20202                           
 20203                           	psect	text79
 20204  0000'                    __ptext79:
 20205                           	opt stack 0
 20206  0000'                    _ringbuf_num:
 20207                           	opt stack 24
 20208                           
 20209                           ;My_header\My_ringbuf.h: 32: if (rb->head >= rb->tail) {
 20210                           
 20211                           ;incstack = 0
 20212  0000' EE20 F006          	lfsr	2,6
 20213  0004' 501E'              	movf	ringbuf_num@rb,w,c
 20214  0006' 26D9               	addwf	fsr2l,f,c
 20215  0008' 501F'              	movf	ringbuf_num@rb+1,w,c
 20216  000A' 22DA               	addwfc	fsr2h,f,c
 20217  000C' EE10 F004          	lfsr	1,4
 20218  0010' 501E'              	movf	ringbuf_num@rb,w,c
 20219  0012' 26E1               	addwf	fsr1l,f,c
 20220  0014' 501F'              	movf	ringbuf_num@rb+1,w,c
 20221  0016' 22E2               	addwfc	fsr1h,f,c
 20222  0018' 50DE               	movf	postinc2,w,c
 20223  001A' 5CE6               	subwf	postinc1,w,c
 20224  001C' 50DE               	movf	postinc2,w,c
 20225  001E' 58E6               	subwfb	postinc1,w,c
 20226  0020' A0D8               	btfss	status,0,c
 20227  0022' D024               	goto	l7001
 20228                           
 20229                           ;My_header\My_ringbuf.h: 33: return (rb->head - rb->tail);
 20230  0024' EE20 F004          	lfsr	2,4
 20231  0028' 501E'              	movf	ringbuf_num@rb,w,c
 20232  002A' 26D9               	addwf	fsr2l,f,c
 20233  002C' 501F'              	movf	ringbuf_num@rb+1,w,c
 20234  002E' 22DA               	addwfc	fsr2h,f,c
 20235  0030' CFDE F000'         	movff	postinc2,??_ringbuf_num
 20236  0034' CFDD F001'         	movff	postdec2,??_ringbuf_num+1
 20237  0038' EE20 F006          	lfsr	2,6
 20238  003C' 501E'              	movf	ringbuf_num@rb,w,c
 20239  003E' 26D9               	addwf	fsr2l,f,c
 20240  0040' 501F'              	movf	ringbuf_num@rb+1,w,c
 20241  0042' 22DA               	addwfc	fsr2h,f,c
 20242  0044' CFDE F002'         	movff	postinc2,??_ringbuf_num+2
 20243  0048' CFDD F003'         	movff	postdec2,??_ringbuf_num+3
 20244  004C' 0100               	movlb	0	; () banked
 20245  004E' 1F00'              	comf	(??_ringbuf_num+2)& (0+255),f,b
 20246  0050' 1F00'              	comf	(??_ringbuf_num+3)& (0+255),f,b
 20247  0052' 4B00'              	infsnz	(??_ringbuf_num+2)& (0+255),f,b
 20248  0054' 2B00'              	incf	(??_ringbuf_num+3)& (0+255),f,b
 20249  0056' 0100               	movlb	0	; () banked
 20250  0058' 5100'              	movf	??_ringbuf_num& (0+255),w,b
 20251  005A' 0100               	movlb	0	; () banked
 20252  005C' 2500'              	addwf	(??_ringbuf_num+2)& (0+255),w,b
 20253  005E' 6E1E'              	movwf	?_ringbuf_num,c
 20254  0060' 0100               	movlb	0	; () banked
 20255  0062' 5100'              	movf	(??_ringbuf_num+1)& (0+255),w,b
 20256  0064' 0100               	movlb	0	; () banked
 20257  0066' 2100'              	addwfc	(??_ringbuf_num+3)& (0+255),w,b
 20258  0068' 6E1F'              	movwf	?_ringbuf_num+1,c
 20259                           
 20260                           ; BSR set to: 0
 20261                           ;My_header\My_ringbuf.h: 34: } else {
 20262                           
 20263                           ; BSR set to: 0
 20264  006A' 0012               	return	
 20265  006C'                    l7001:
 20266                           
 20267                           ;My_header\My_ringbuf.h: 35: return (rb->size + rb->head - rb->tail);
 20268  006C' EE20 F004          	lfsr	2,4
 20269  0070' 501E'              	movf	ringbuf_num@rb,w,c
 20270  0072' 26D9               	addwf	fsr2l,f,c
 20271  0074' 501F'              	movf	ringbuf_num@rb+1,w,c
 20272  0076' 22DA               	addwfc	fsr2h,f,c
 20273  0078' CFDE F000'         	movff	postinc2,??_ringbuf_num
 20274  007C' CFDD F001'         	movff	postdec2,??_ringbuf_num+1
 20275  0080' EE20 F002          	lfsr	2,2
 20276  0084' 501E'              	movf	ringbuf_num@rb,w,c
 20277  0086' 26D9               	addwf	fsr2l,f,c
 20278  0088' 501F'              	movf	ringbuf_num@rb+1,w,c
 20279  008A' 22DA               	addwfc	fsr2h,f,c
 20280  008C' CFDE F002'         	movff	postinc2,??_ringbuf_num+2
 20281  0090' CFDD F003'         	movff	postdec2,??_ringbuf_num+3
 20282  0094' EE20 F006          	lfsr	2,6
 20283  0098' 501E'              	movf	ringbuf_num@rb,w,c
 20284  009A' 26D9               	addwf	fsr2l,f,c
 20285  009C' 501F'              	movf	ringbuf_num@rb+1,w,c
 20286  009E' 22DA               	addwfc	fsr2h,f,c
 20287  00A0' CFDE F004'         	movff	postinc2,??_ringbuf_num+4
 20288  00A4' CFDD F005'         	movff	postdec2,??_ringbuf_num+5
 20289  00A8' 0100               	movlb	0	; () banked
 20290  00AA' 1F00'              	comf	(??_ringbuf_num+4)& (0+255),f,b
 20291  00AC' 1F00'              	comf	(??_ringbuf_num+5)& (0+255),f,b
 20292  00AE' 4B00'              	infsnz	(??_ringbuf_num+4)& (0+255),f,b
 20293  00B0' 2B00'              	incf	(??_ringbuf_num+5)& (0+255),f,b
 20294  00B2' 0100               	movlb	0	; () banked
 20295  00B4' 5100'              	movf	(??_ringbuf_num+2)& (0+255),w,b
 20296  00B6' 0100               	movlb	0	; () banked
 20297  00B8' 2700'              	addwf	(??_ringbuf_num+4)& (0+255),f,b
 20298  00BA' 0100               	movlb	0	; () banked
 20299  00BC' 5100'              	movf	(??_ringbuf_num+3)& (0+255),w,b
 20300  00BE' 0100               	movlb	0	; () banked
 20301  00C0' 2300'              	addwfc	(??_ringbuf_num+5)& (0+255),f,b
 20302  00C2' 0100               	movlb	0	; () banked
 20303  00C4' 5100'              	movf	??_ringbuf_num& (0+255),w,b
 20304  00C6' 0100               	movlb	0	; () banked
 20305  00C8' 2500'              	addwf	(??_ringbuf_num+4)& (0+255),w,b
 20306  00CA' 6E1E'              	movwf	?_ringbuf_num,c
 20307  00CC' 0100               	movlb	0	; () banked
 20308  00CE' 5100'              	movf	(??_ringbuf_num+1)& (0+255),w,b
 20309  00D0' 0100               	movlb	0	; () banked
 20310  00D2' 2100'              	addwfc	(??_ringbuf_num+5)& (0+255),w,b
 20311  00D4' 6E1F'              	movwf	?_ringbuf_num+1,c
 20312                           
 20313                           ; BSR set to: 0
 20314  00D6' 0012               	return	
 20315  00D8'                    __end_of_ringbuf_num:
 20316                           	opt stack 0
 20317                           tblptru	equ	0xFF8
 20318                           tblptrh	equ	0xFF7
 20319                           tblptrl	equ	0xFF6
 20320                           tablat	equ	0xFF5
 20321                           prodh	equ	0xFF4
 20322                           prodl	equ	0xFF3
 20323                           intcon	equ	0xFF2
 20324                           intcon2	equ	0xFF1
 20325                           indf0	equ	0xFEF
 20326                           postinc0	equ	0xFEE
 20327                           fsr0h	equ	0xFEA
 20328                           fsr0l	equ	0xFE9
 20329                           wreg	equ	0xFE8
 20330                           postinc1	equ	0xFE6
 20331                           postdec1	equ	0xFE5
 20332                           fsr1h	equ	0xFE2
 20333                           fsr1l	equ	0xFE1
 20334                           indf2	equ	0xFDF
 20335                           postinc2	equ	0xFDE
 20336                           postdec2	equ	0xFDD
 20337                           plusw2	equ	0xFDB
 20338                           fsr2h	equ	0xFDA
 20339                           fsr2l	equ	0xFD9
 20340                           status	equ	0xFD8
 20341                           
 20342 ;; *************** function _RTCC_loop *****************
 20343 ;; Defined at:
 20344 ;;		line 387 in file "../My_header\My_RTCC.h"
 20345 ;; Parameters:    Size  Location     Type
 20346 ;;		None
 20347 ;; Auto vars:     Size  Location     Type
 20348 ;;		None
 20349 ;; Return value:  Size  Location     Type
 20350 ;;		None               void
 20351 ;; Registers used:
 20352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20353 ;; Tracked objects:
 20354 ;;		On entry : 0/0
 20355 ;;		On exit  : 0/0
 20356 ;;		Unchanged: 0/0
 20357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20362 ;;Total ram usage:        0 bytes
 20363 ;; Hardware stack levels used:    1
 20364 ;; Hardware stack levels required when called:    7
 20365 ;; This function calls:
 20366 ;;		_RTCC_from_RTCC
 20367 ;; This function is called by:
 20368 ;;		_main
 20369 ;; This function uses a non-reentrant model
 20370 ;;
 20371                           
 20372                           	psect	text80
 20373  0000'                    __ptext80:
 20374                           	opt stack 0
 20375  0000'                    _RTCC_loop:
 20376                           	opt stack 23
 20377  0000'                    l567:
 20378  0000' 010F               	movlb	15	; () banked
 20379  0002' B93F               	btfsc	63,4,b	;volatile
 20380  0004' D7FD               	goto	l567
 20381                           
 20382                           ; BSR set to: 15
 20383                           ;My_header\My_RTCC.h: 390: halfsec = RTCCFGbits.HALFSEC;
 20384                           
 20385                           ; BSR set to: 15
 20386  0006' 0E00               	movlw	0
 20387  0008' B73F               	btfsc	63,3,b	;volatile
 20388  000A' 0E01               	movlw	1
 20389  000C' 6E0E'              	movwf	_halfsec,c
 20390                           
 20391                           ; BSR set to: 15
 20392                           ;My_header\My_RTCC.h: 391: if (prev_halfsec != halfsec) {
 20393  000E' 500E'              	movf	_halfsec,w,c
 20394  0010' 0100               	movlb	0	; () banked
 20395  0012' 1900'              	xorwf	RTCC_loop@prev_halfsec& (0+255),w,b
 20396  0014' B4D8               	btfsc	status,2,c
 20397  0016' 0012               	return	
 20398                           
 20399                           ; BSR set to: 0
 20400                           ;My_header\My_RTCC.h: 392: prev_halfsec = halfsec;
 20401  0018' C00E' F004'        	movff	_halfsec,RTCC_loop@prev_halfsec
 20402                           
 20403                           ;My_header\My_RTCC.h: 393: colon = halfsec;
 20404  001C' C00E' F005'        	movff	_halfsec,_colon
 20405                           
 20406                           ; BSR set to: 0
 20407                           ;My_header\My_RTCC.h: 394: time_change_flag = 1;
 20408  0020' 0E01               	movlw	1
 20409  0022' 0100               	movlb	0	; () banked
 20410  0024' 6F00'              	movwf	_time_change_flag& (0+255),b
 20411                           
 20412                           ; BSR set to: 0
 20413                           ;My_header\My_RTCC.h: 395: RTCC_from_RTCC(&caltime_now, &epoch_now);
 20414  0026' 0E00'              	movlw	low _caltime_now
 20415  0028' 0100               	movlb	0	; () banked
 20416  002A' 6F00'              	movwf	RTCC_from_RTCC@ct& (0+255),b
 20417  002C' 0E00'              	movlw	high _caltime_now
 20418  002E' 0100               	movlb	0	; () banked
 20419  0030' 6F00'              	movwf	(RTCC_from_RTCC@ct+1)& (0+255),b
 20420  0032' 0E00'              	movlw	low _epoch_now
 20421  0034' 0100               	movlb	0	; () banked
 20422  0036' 6F00'              	movwf	RTCC_from_RTCC@ep& (0+255),b
 20423  0038' 0E00'              	movlw	high _epoch_now
 20424  003A' 0100               	movlb	0	; () banked
 20425  003C' 6F00'              	movwf	(RTCC_from_RTCC@ep+1)& (0+255),b
 20426  003E' EC00' F000'        	call	_RTCC_from_RTCC	;wreg free
 20427  0042' 0012               	return	
 20428  0044'                    __end_of_RTCC_loop:
 20429                           	opt stack 0
 20430                           tblptru	equ	0xFF8
 20431                           tblptrh	equ	0xFF7
 20432                           tblptrl	equ	0xFF6
 20433                           tablat	equ	0xFF5
 20434                           prodh	equ	0xFF4
 20435                           prodl	equ	0xFF3
 20436                           intcon	equ	0xFF2
 20437                           intcon2	equ	0xFF1
 20438                           indf0	equ	0xFEF
 20439                           postinc0	equ	0xFEE
 20440                           fsr0h	equ	0xFEA
 20441                           fsr0l	equ	0xFE9
 20442                           wreg	equ	0xFE8
 20443                           postinc1	equ	0xFE6
 20444                           postdec1	equ	0xFE5
 20445                           fsr1h	equ	0xFE2
 20446                           fsr1l	equ	0xFE1
 20447                           indf2	equ	0xFDF
 20448                           postinc2	equ	0xFDE
 20449                           postdec2	equ	0xFDD
 20450                           plusw2	equ	0xFDB
 20451                           fsr2h	equ	0xFDA
 20452                           fsr2l	equ	0xFD9
 20453                           status	equ	0xFD8
 20454                           
 20455 ;; *************** function _RTCC_from_RTCC *****************
 20456 ;; Defined at:
 20457 ;;		line 231 in file "../My_header\My_RTCC.h"
 20458 ;; Parameters:    Size  Location     Type
 20459 ;;  ct              2   40[BANK0 ] PTR struct .
 20460 ;;		 -> caltime_now(7), 
 20461 ;;  ep              2   42[BANK0 ] PTR unsigned long 
 20462 ;;		 -> epoch_now(4), 
 20463 ;; Auto vars:     Size  Location     Type
 20464 ;;		None
 20465 ;; Return value:  Size  Location     Type
 20466 ;;		None               void
 20467 ;; Registers used:
 20468 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20469 ;; Tracked objects:
 20470 ;;		On entry : 0/0
 20471 ;;		On exit  : 0/0
 20472 ;;		Unchanged: 0/0
 20473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20474 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20477 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20478 ;;Total ram usage:        4 bytes
 20479 ;; Hardware stack levels used:    1
 20480 ;; Hardware stack levels required when called:    6
 20481 ;; This function calls:
 20482 ;;		_RTCC_to_caltime
 20483 ;;		_caltime_to_epoch
 20484 ;; This function is called by:
 20485 ;;		_display_time_1602
 20486 ;;		_RTCC_adjust_time_inc
 20487 ;;		_RTCC_adjust_time_dec
 20488 ;;		_RTCC_loop
 20489 ;;		_print_time
 20490 ;;		_main
 20491 ;;		_display_time_0802
 20492 ;; This function uses a non-reentrant model
 20493 ;;
 20494                           
 20495                           	psect	text81
 20496  0000'                    __ptext81:
 20497                           	opt stack 0
 20498  0000'                    _RTCC_from_RTCC:
 20499                           	opt stack 21
 20500                           
 20501                           ;My_header\My_RTCC.h: 232: RTCC_to_caltime(ct);
 20502                           
 20503                           ;incstack = 0
 20504  0000' C028' F020'        	movff	RTCC_from_RTCC@ct,RTCC_to_caltime@ct
 20505  0004' C029' F021'        	movff	RTCC_from_RTCC@ct+1,RTCC_to_caltime@ct+1
 20506  0008' EC00' F000'        	call	_RTCC_to_caltime	;wreg free
 20507                           
 20508                           ;My_header\My_RTCC.h: 233: caltime_to_epoch(ct, ep);
 20509  000C' C028' F019'        	movff	RTCC_from_RTCC@ct,caltime_to_epoch@ct
 20510  0010' C029' F01A'        	movff	RTCC_from_RTCC@ct+1,caltime_to_epoch@ct+1
 20511  0014' C02A' F01B'        	movff	RTCC_from_RTCC@ep,caltime_to_epoch@ep
 20512  0018' C02B' F01C'        	movff	RTCC_from_RTCC@ep+1,caltime_to_epoch@ep+1
 20513  001C' EC00' F000'        	call	_caltime_to_epoch	;wreg free
 20514  0020' 0012               	return		;funcret
 20515  0022'                    __end_of_RTCC_from_RTCC:
 20516                           	opt stack 0
 20517                           tblptru	equ	0xFF8
 20518                           tblptrh	equ	0xFF7
 20519                           tblptrl	equ	0xFF6
 20520                           tablat	equ	0xFF5
 20521                           prodh	equ	0xFF4
 20522                           prodl	equ	0xFF3
 20523                           intcon	equ	0xFF2
 20524                           intcon2	equ	0xFF1
 20525                           indf0	equ	0xFEF
 20526                           postinc0	equ	0xFEE
 20527                           fsr0h	equ	0xFEA
 20528                           fsr0l	equ	0xFE9
 20529                           wreg	equ	0xFE8
 20530                           postinc1	equ	0xFE6
 20531                           postdec1	equ	0xFE5
 20532                           fsr1h	equ	0xFE2
 20533                           fsr1l	equ	0xFE1
 20534                           indf2	equ	0xFDF
 20535                           postinc2	equ	0xFDE
 20536                           postdec2	equ	0xFDD
 20537                           plusw2	equ	0xFDB
 20538                           fsr2h	equ	0xFDA
 20539                           fsr2l	equ	0xFD9
 20540                           status	equ	0xFD8
 20541                           
 20542 ;; *************** function _caltime_to_epoch *****************
 20543 ;; Defined at:
 20544 ;;		line 211 in file "../My_header\My_RTCC.h"
 20545 ;; Parameters:    Size  Location     Type
 20546 ;;  ct              2   25[BANK0 ] PTR struct .
 20547 ;;		 -> caltime_now(7), 
 20548 ;;  ep              2   27[BANK0 ] PTR unsigned long 
 20549 ;;		 -> epoch_now(4), 
 20550 ;; Auto vars:     Size  Location     Type
 20551 ;;  month           1   39[BANK0 ] unsigned char 
 20552 ;;  month           1   34[BANK0 ] unsigned char 
 20553 ;;  year            1   33[BANK0 ] unsigned char 
 20554 ;;  epoch           4   35[BANK0 ] unsigned long 
 20555 ;; Return value:  Size  Location     Type
 20556 ;;		None               void
 20557 ;; Registers used:
 20558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20559 ;; Tracked objects:
 20560 ;;		On entry : 0/0
 20561 ;;		On exit  : 0/0
 20562 ;;		Unchanged: 0/0
 20563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20564 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20565 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20566 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20567 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20568 ;;Total ram usage:       15 bytes
 20569 ;; Hardware stack levels used:    1
 20570 ;; Hardware stack levels required when called:    5
 20571 ;; This function calls:
 20572 ;;		___lmul
 20573 ;;		_month_length
 20574 ;; This function is called by:
 20575 ;;		_RTCC_from_RTCC
 20576 ;;		_RTCC_from_caltime
 20577 ;; This function uses a non-reentrant model
 20578 ;;
 20579                           
 20580                           	psect	text82
 20581  0000'                    __ptext82:
 20582                           	opt stack 0
 20583  0000'                    _caltime_to_epoch:
 20584                           	opt stack 21
 20585                           
 20586                           ;My_header\My_RTCC.h: 212: epoch_t epoch = 0;
 20587                           
 20588                           ;incstack = 0
 20589  0000' 0E00               	movlw	0
 20590  0002' 0100               	movlb	0	; () banked
 20591  0004' 6F00'              	movwf	caltime_to_epoch@epoch& (0+255),b
 20592  0006' 0E00               	movlw	0
 20593  0008' 6F00'              	movwf	(caltime_to_epoch@epoch+1)& (0+255),b
 20594  000A' 0E00               	movlw	0
 20595  000C' 6F00'              	movwf	(caltime_to_epoch@epoch+2)& (0+255),b
 20596  000E' 0E00               	movlw	0
 20597  0010' 6F00'              	movwf	(caltime_to_epoch@epoch+3)& (0+255),b
 20598                           
 20599                           ;My_header\My_RTCC.h: 213: for (uint8_t year = 0; year < ct->YY; year++) {
 20600  0012' 0E00               	movlw	0
 20601  0014' 0100               	movlb	0	; () banked
 20602  0016' 6F00'              	movwf	caltime_to_epoch@year& (0+255),b
 20603  0018' D037               	goto	l7143
 20604  001A'                    l7129:
 20605                           
 20606                           ; BSR set to: 0
 20607                           ;My_header\My_RTCC.h: 214: for (uint8_t month = 1; month <= 12; month++) {
 20608  001A' 0E01               	movlw	1
 20609  001C' 0100               	movlb	0	; () banked
 20610  001E' 6F00'              	movwf	caltime_to_epoch@month& (0+255),b
 20611  0020'                    l7131:
 20612                           
 20613                           ; BSR set to: 0
 20614  0020' 0E0C               	movlw	12
 20615  0022' 0100               	movlb	0	; () banked
 20616  0024' 6500'              	cpfsgt	caltime_to_epoch@month& (0+255),b
 20617  0026' D001               	goto	l7135
 20618  0028' D02D               	goto	l7141
 20619  002A'                    l7135:
 20620                           
 20621                           ; BSR set to: 0
 20622                           ;My_header\My_RTCC.h: 215: epoch += ((epoch_t)60*60*24) * month_length(year, month);
 20623  002A' C027' F002'        	movff	caltime_to_epoch@month,month_length@month
 20624  002E' 0100               	movlb	0	; () banked
 20625  0030' 5100'              	movf	caltime_to_epoch@year& (0+255),w,b
 20626  0032' EC00' F000'        	call	_month_length
 20627  0036' 0100               	movlb	0	; () banked
 20628  0038' 6F00'              	movwf	??_caltime_to_epoch& (0+255),b
 20629  003A' 0100               	movlb	0	; () banked
 20630  003C' 5100'              	movf	??_caltime_to_epoch& (0+255),w,b
 20631  003E' 0100               	movlb	0	; () banked
 20632  0040' 6F00'              	movwf	___lmul@multiplier& (0+255),b
 20633  0042' 6B00'              	clrf	(___lmul@multiplier+1)& (0+255),b
 20634  0044' 6B00'              	clrf	(___lmul@multiplier+2)& (0+255),b
 20635  0046' 6B00'              	clrf	(___lmul@multiplier+3)& (0+255),b
 20636  0048' 0E80               	movlw	128
 20637  004A' 0100               	movlb	0	; () banked
 20638  004C' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
 20639  004E' 0E51               	movlw	81
 20640  0050' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
 20641  0052' 0E01               	movlw	1
 20642  0054' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
 20643  0056' 0E00               	movlw	0
 20644  0058' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
 20645  005A' EC00' F000'        	call	___lmul	;wreg free
 20646  005E' 0100               	movlb	0	; () banked
 20647  0060' 5100'              	movf	?___lmul& (0+255),w,b
 20648  0062' 0100               	movlb	0	; () banked
 20649  0064' 2700'              	addwf	caltime_to_epoch@epoch& (0+255),f,b
 20650  0066' 0100               	movlb	0	; () banked
 20651  0068' 5100'              	movf	(?___lmul+1)& (0+255),w,b
 20652  006A' 0100               	movlb	0	; () banked
 20653  006C' 2300'              	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
 20654  006E' 0100               	movlb	0	; () banked
 20655  0070' 5100'              	movf	(?___lmul+2)& (0+255),w,b
 20656  0072' 0100               	movlb	0	; () banked
 20657  0074' 2300'              	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
 20658  0076' 0100               	movlb	0	; () banked
 20659  0078' 5100'              	movf	(?___lmul+3)& (0+255),w,b
 20660  007A' 0100               	movlb	0	; () banked
 20661  007C' 2300'              	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
 20662                           
 20663                           ; BSR set to: 0
 20664  007E' 0100               	movlb	0	; () banked
 20665  0080' 2B00'              	incf	caltime_to_epoch@month& (0+255),f,b
 20666  0082' D7CE               	goto	l7131
 20667  0084'                    l7141:
 20668                           
 20669                           ; BSR set to: 0
 20670  0084' 0100               	movlb	0	; () banked
 20671  0086' 2B00'              	incf	caltime_to_epoch@year& (0+255),f,b
 20672  0088'                    l7143:
 20673                           
 20674                           ; BSR set to: 0
 20675  0088' 0100               	movlb	0	; () banked
 20676  008A' EE20 F006          	lfsr	2,6
 20677  008E' 5100'              	movf	caltime_to_epoch@ct& (0+255),w,b
 20678  0090' 26D9               	addwf	fsr2l,f,c
 20679  0092' 5100'              	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
 20680  0094' 22DA               	addwfc	fsr2h,f,c
 20681  0096' 50DE               	movf	postinc2,w,c
 20682  0098' 0100               	movlb	0	; () banked
 20683  009A' 5D00'              	subwf	caltime_to_epoch@year& (0+255),w,b
 20684  009C' A0D8               	btfss	status,0,c
 20685  009E' D7BD               	goto	l7129
 20686                           
 20687                           ; BSR set to: 0
 20688                           ;My_header\My_RTCC.h: 216: }
 20689                           ;My_header\My_RTCC.h: 217: }
 20690                           ;My_header\My_RTCC.h: 218: for (uint8_t month = 1; month < ct->MM; month++) {
 20691                           
 20692                           ; BSR set to: 0
 20693  00A0' 0E01               	movlw	1
 20694  00A2' 0100               	movlb	0	; () banked
 20695  00A4' 6F00'              	movwf	caltime_to_epoch@month_1941& (0+255),b
 20696  00A6' D032               	goto	l7151
 20697  00A8'                    l7147:
 20698                           
 20699                           ; BSR set to: 0
 20700                           ;My_header\My_RTCC.h: 219: epoch += ((epoch_t)60*60*24) * month_length(ct->YY, month);
 20701  00A8' C022' F002'        	movff	caltime_to_epoch@month_1941,month_length@month
 20702  00AC' 0100               	movlb	0	; () banked
 20703  00AE' EE20 F006          	lfsr	2,6
 20704  00B2' 5100'              	movf	caltime_to_epoch@ct& (0+255),w,b
 20705  00B4' 26D9               	addwf	fsr2l,f,c
 20706  00B6' 5100'              	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
 20707  00B8' 22DA               	addwfc	fsr2h,f,c
 20708  00BA' 50DF               	movf	indf2,w,c
 20709  00BC' EC00' F000'        	call	_month_length
 20710  00C0' 0100               	movlb	0	; () banked
 20711  00C2' 6F00'              	movwf	??_caltime_to_epoch& (0+255),b
 20712  00C4' 0100               	movlb	0	; () banked
 20713  00C6' 5100'              	movf	??_caltime_to_epoch& (0+255),w,b
 20714  00C8' 0100               	movlb	0	; () banked
 20715  00CA' 6F00'              	movwf	___lmul@multiplier& (0+255),b
 20716  00CC' 6B00'              	clrf	(___lmul@multiplier+1)& (0+255),b
 20717  00CE' 6B00'              	clrf	(___lmul@multiplier+2)& (0+255),b
 20718  00D0' 6B00'              	clrf	(___lmul@multiplier+3)& (0+255),b
 20719  00D2' 0E80               	movlw	128
 20720  00D4' 0100               	movlb	0	; () banked
 20721  00D6' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
 20722  00D8' 0E51               	movlw	81
 20723  00DA' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
 20724  00DC' 0E01               	movlw	1
 20725  00DE' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
 20726  00E0' 0E00               	movlw	0
 20727  00E2' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
 20728  00E4' EC00' F000'        	call	___lmul	;wreg free
 20729  00E8' 0100               	movlb	0	; () banked
 20730  00EA' 5100'              	movf	?___lmul& (0+255),w,b
 20731  00EC' 0100               	movlb	0	; () banked
 20732  00EE' 2700'              	addwf	caltime_to_epoch@epoch& (0+255),f,b
 20733  00F0' 0100               	movlb	0	; () banked
 20734  00F2' 5100'              	movf	(?___lmul+1)& (0+255),w,b
 20735  00F4' 0100               	movlb	0	; () banked
 20736  00F6' 2300'              	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
 20737  00F8' 0100               	movlb	0	; () banked
 20738  00FA' 5100'              	movf	(?___lmul+2)& (0+255),w,b
 20739  00FC' 0100               	movlb	0	; () banked
 20740  00FE' 2300'              	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
 20741  0100' 0100               	movlb	0	; () banked
 20742  0102' 5100'              	movf	(?___lmul+3)& (0+255),w,b
 20743  0104' 0100               	movlb	0	; () banked
 20744  0106' 2300'              	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
 20745                           
 20746                           ; BSR set to: 0
 20747  0108' 0100               	movlb	0	; () banked
 20748  010A' 2B00'              	incf	caltime_to_epoch@month_1941& (0+255),f,b
 20749  010C'                    l7151:
 20750                           
 20751                           ; BSR set to: 0
 20752  010C' 0100               	movlb	0	; () banked
 20753  010E' EE20 F005          	lfsr	2,5
 20754  0112' 5100'              	movf	caltime_to_epoch@ct& (0+255),w,b
 20755  0114' 26D9               	addwf	fsr2l,f,c
 20756  0116' 5100'              	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
 20757  0118' 22DA               	addwfc	fsr2h,f,c
 20758  011A' 50DE               	movf	postinc2,w,c
 20759  011C' 0100               	movlb	0	; () banked
 20760  011E' 5D00'              	subwf	caltime_to_epoch@month_1941& (0+255),w,b
 20761  0120' A0D8               	btfss	status,0,c
 20762  0122' D7C2               	goto	l7147
 20763                           
 20764                           ; BSR set to: 0
 20765                           ;My_header\My_RTCC.h: 220: }
 20766                           ;My_header\My_RTCC.h: 221: epoch += ((epoch_t)60*60*24) * (ct->DD - 1);
 20767                           
 20768                           ; BSR set to: 0
 20769  0124' 0EFF               	movlw	255
 20770  0126' 0100               	movlb	0	; () banked
 20771  0128' 6F00'              	movwf	??_caltime_to_epoch& (0+255),b
 20772  012A' 0EFF               	movlw	255
 20773  012C' 0100               	movlb	0	; () banked
 20774  012E' 6F00'              	movwf	(??_caltime_to_epoch+1)& (0+255),b
 20775  0130' 0100               	movlb	0	; () banked
 20776  0132' EE20 F004          	lfsr	2,4
 20777  0136' 5100'              	movf	caltime_to_epoch@ct& (0+255),w,b
 20778  0138' 26D9               	addwf	fsr2l,f,c
 20779  013A' 5100'              	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
 20780  013C' 22DA               	addwfc	fsr2h,f,c
 20781  013E' 50DF               	movf	indf2,w,c
 20782  0140' 0100               	movlb	0	; () banked
 20783  0142' 6F00'              	movwf	(??_caltime_to_epoch+2)& (0+255),b
 20784  0144' 6B00'              	clrf	(??_caltime_to_epoch+3)& (0+255),b
 20785  0146' 0100               	movlb	0	; () banked
 20786  0148' 5100'              	movf	??_caltime_to_epoch& (0+255),w,b
 20787  014A' 0100               	movlb	0	; () banked
 20788  014C' 2700'              	addwf	(??_caltime_to_epoch+2)& (0+255),f,b
 20789  014E' 0100               	movlb	0	; () banked
 20790  0150' 5100'              	movf	(??_caltime_to_epoch+1)& (0+255),w,b
 20791  0152' 0100               	movlb	0	; () banked
 20792  0154' 2300'              	addwfc	(??_caltime_to_epoch+3)& (0+255),f,b
 20793  0156' C01F' F00D'        	movff	??_caltime_to_epoch+2,___lmul@multiplier
 20794  015A' C020' F00E'        	movff	??_caltime_to_epoch+3,___lmul@multiplier+1
 20795  015E' 0100               	movlb	0	; () banked
 20796  0160' 0E00               	movlw	0
 20797  0162' BF00'              	btfsc	(___lmul@multiplier+1)& (0+255),7,b
 20798  0164' 0EFF               	movlw	-1
 20799  0166' 6F00'              	movwf	(___lmul@multiplier+2)& (0+255),b
 20800  0168' 6F00'              	movwf	(___lmul@multiplier+3)& (0+255),b
 20801  016A' 0E80               	movlw	128
 20802  016C' 0100               	movlb	0	; () banked
 20803  016E' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
 20804  0170' 0E51               	movlw	81
 20805  0172' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
 20806  0174' 0E01               	movlw	1
 20807  0176' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
 20808  0178' 0E00               	movlw	0
 20809  017A' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
 20810  017C' EC00' F000'        	call	___lmul	;wreg free
 20811  0180' 0100               	movlb	0	; () banked
 20812  0182' 5100'              	movf	?___lmul& (0+255),w,b
 20813  0184' 0100               	movlb	0	; () banked
 20814  0186' 2700'              	addwf	caltime_to_epoch@epoch& (0+255),f,b
 20815  0188' 0100               	movlb	0	; () banked
 20816  018A' 5100'              	movf	(?___lmul+1)& (0+255),w,b
 20817  018C' 0100               	movlb	0	; () banked
 20818  018E' 2300'              	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
 20819  0190' 0100               	movlb	0	; () banked
 20820  0192' 5100'              	movf	(?___lmul+2)& (0+255),w,b
 20821  0194' 0100               	movlb	0	; () banked
 20822  0196' 2300'              	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
 20823  0198' 0100               	movlb	0	; () banked
 20824  019A' 5100'              	movf	(?___lmul+3)& (0+255),w,b
 20825  019C' 0100               	movlb	0	; () banked
 20826  019E' 2300'              	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
 20827                           
 20828                           ;My_header\My_RTCC.h: 222: epoch += ((epoch_t)60*60) * ct->hh;
 20829  01A0' 0100               	movlb	0	; () banked
 20830  01A2' EE20 F002          	lfsr	2,2
 20831  01A6' 5100'              	movf	caltime_to_epoch@ct& (0+255),w,b
 20832  01A8' 26D9               	addwf	fsr2l,f,c
 20833  01AA' 5100'              	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
 20834  01AC' 22DA               	addwfc	fsr2h,f,c
 20835  01AE' 50DF               	movf	indf2,w,c
 20836  01B0' 0100               	movlb	0	; () banked
 20837  01B2' 6F00'              	movwf	??_caltime_to_epoch& (0+255),b
 20838  01B4' 0100               	movlb	0	; () banked
 20839  01B6' 5100'              	movf	??_caltime_to_epoch& (0+255),w,b
 20840  01B8' 0100               	movlb	0	; () banked
 20841  01BA' 6F00'              	movwf	___lmul@multiplier& (0+255),b
 20842  01BC' 6B00'              	clrf	(___lmul@multiplier+1)& (0+255),b
 20843  01BE' 6B00'              	clrf	(___lmul@multiplier+2)& (0+255),b
 20844  01C0' 6B00'              	clrf	(___lmul@multiplier+3)& (0+255),b
 20845  01C2' 0E10               	movlw	16
 20846  01C4' 0100               	movlb	0	; () banked
 20847  01C6' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
 20848  01C8' 0E0E               	movlw	14
 20849  01CA' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
 20850  01CC' 0E00               	movlw	0
 20851  01CE' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
 20852  01D0' 0E00               	movlw	0
 20853  01D2' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
 20854  01D4' EC00' F000'        	call	___lmul	;wreg free
 20855  01D8' 0100               	movlb	0	; () banked
 20856  01DA' 5100'              	movf	?___lmul& (0+255),w,b
 20857  01DC' 0100               	movlb	0	; () banked
 20858  01DE' 2700'              	addwf	caltime_to_epoch@epoch& (0+255),f,b
 20859  01E0' 0100               	movlb	0	; () banked
 20860  01E2' 5100'              	movf	(?___lmul+1)& (0+255),w,b
 20861  01E4' 0100               	movlb	0	; () banked
 20862  01E6' 2300'              	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
 20863  01E8' 0100               	movlb	0	; () banked
 20864  01EA' 5100'              	movf	(?___lmul+2)& (0+255),w,b
 20865  01EC' 0100               	movlb	0	; () banked
 20866  01EE' 2300'              	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
 20867  01F0' 0100               	movlb	0	; () banked
 20868  01F2' 5100'              	movf	(?___lmul+3)& (0+255),w,b
 20869  01F4' 0100               	movlb	0	; () banked
 20870  01F6' 2300'              	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
 20871                           
 20872                           ;My_header\My_RTCC.h: 223: epoch += ((epoch_t)60) * ct->mm;
 20873  01F8' 0100               	movlb	0	; () banked
 20874  01FA' EE20 F001          	lfsr	2,1
 20875  01FE' 5100'              	movf	caltime_to_epoch@ct& (0+255),w,b
 20876  0200' 26D9               	addwf	fsr2l,f,c
 20877  0202' 5100'              	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
 20878  0204' 22DA               	addwfc	fsr2h,f,c
 20879  0206' 50DF               	movf	indf2,w,c
 20880  0208' 0100               	movlb	0	; () banked
 20881  020A' 6F00'              	movwf	??_caltime_to_epoch& (0+255),b
 20882  020C' 0100               	movlb	0	; () banked
 20883  020E' 5100'              	movf	??_caltime_to_epoch& (0+255),w,b
 20884  0210' 0100               	movlb	0	; () banked
 20885  0212' 6F00'              	movwf	___lmul@multiplier& (0+255),b
 20886  0214' 6B00'              	clrf	(___lmul@multiplier+1)& (0+255),b
 20887  0216' 6B00'              	clrf	(___lmul@multiplier+2)& (0+255),b
 20888  0218' 6B00'              	clrf	(___lmul@multiplier+3)& (0+255),b
 20889  021A' 0E3C               	movlw	60
 20890  021C' 0100               	movlb	0	; () banked
 20891  021E' 6F00'              	movwf	___lmul@multiplicand& (0+255),b
 20892  0220' 0E00               	movlw	0
 20893  0222' 6F00'              	movwf	(___lmul@multiplicand+1)& (0+255),b
 20894  0224' 0E00               	movlw	0
 20895  0226' 6F00'              	movwf	(___lmul@multiplicand+2)& (0+255),b
 20896  0228' 0E00               	movlw	0
 20897  022A' 6F00'              	movwf	(___lmul@multiplicand+3)& (0+255),b
 20898  022C' EC00' F000'        	call	___lmul	;wreg free
 20899  0230' 0100               	movlb	0	; () banked
 20900  0232' 5100'              	movf	?___lmul& (0+255),w,b
 20901  0234' 0100               	movlb	0	; () banked
 20902  0236' 2700'              	addwf	caltime_to_epoch@epoch& (0+255),f,b
 20903  0238' 0100               	movlb	0	; () banked
 20904  023A' 5100'              	movf	(?___lmul+1)& (0+255),w,b
 20905  023C' 0100               	movlb	0	; () banked
 20906  023E' 2300'              	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
 20907  0240' 0100               	movlb	0	; () banked
 20908  0242' 5100'              	movf	(?___lmul+2)& (0+255),w,b
 20909  0244' 0100               	movlb	0	; () banked
 20910  0246' 2300'              	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
 20911  0248' 0100               	movlb	0	; () banked
 20912  024A' 5100'              	movf	(?___lmul+3)& (0+255),w,b
 20913  024C' 0100               	movlb	0	; () banked
 20914  024E' 2300'              	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
 20915                           
 20916                           ; BSR set to: 0
 20917                           ;My_header\My_RTCC.h: 224: epoch += ct->ss;
 20918  0250' C019' FFD9         	movff	caltime_to_epoch@ct,fsr2l
 20919  0254' C01A' FFDA         	movff	caltime_to_epoch@ct+1,fsr2h
 20920  0258' 50DF               	movf	indf2,w,c
 20921  025A' 0100               	movlb	0	; () banked
 20922  025C' 6F00'              	movwf	??_caltime_to_epoch& (0+255),b
 20923  025E' 0100               	movlb	0	; () banked
 20924  0260' 5100'              	movf	??_caltime_to_epoch& (0+255),w,b
 20925  0262' 0100               	movlb	0	; () banked
 20926  0264' 2700'              	addwf	caltime_to_epoch@epoch& (0+255),f,b
 20927  0266' 0E00               	movlw	0
 20928  0268' 2300'              	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
 20929  026A' 2300'              	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
 20930  026C' 2300'              	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
 20931                           
 20932                           ; BSR set to: 0
 20933                           ;My_header\My_RTCC.h: 226: *ep = epoch;
 20934  026E' C01B' FFD9         	movff	caltime_to_epoch@ep,fsr2l
 20935  0272' C01C' FFDA         	movff	caltime_to_epoch@ep+1,fsr2h
 20936  0276' C023' FFDE         	movff	caltime_to_epoch@epoch,postinc2
 20937  027A' C024' FFDE         	movff	caltime_to_epoch@epoch+1,postinc2
 20938  027E' C025' FFDE         	movff	caltime_to_epoch@epoch+2,postinc2
 20939  0282' C026' FFDE         	movff	caltime_to_epoch@epoch+3,postinc2
 20940                           
 20941                           ; BSR set to: 0
 20942  0286' 0012               	return		;funcret
 20943  0288'                    __end_of_caltime_to_epoch:
 20944                           	opt stack 0
 20945                           tblptru	equ	0xFF8
 20946                           tblptrh	equ	0xFF7
 20947                           tblptrl	equ	0xFF6
 20948                           tablat	equ	0xFF5
 20949                           prodh	equ	0xFF4
 20950                           prodl	equ	0xFF3
 20951                           intcon	equ	0xFF2
 20952                           intcon2	equ	0xFF1
 20953                           indf0	equ	0xFEF
 20954                           postinc0	equ	0xFEE
 20955                           fsr0h	equ	0xFEA
 20956                           fsr0l	equ	0xFE9
 20957                           wreg	equ	0xFE8
 20958                           postinc1	equ	0xFE6
 20959                           postdec1	equ	0xFE5
 20960                           fsr1h	equ	0xFE2
 20961                           fsr1l	equ	0xFE1
 20962                           indf2	equ	0xFDF
 20963                           postinc2	equ	0xFDE
 20964                           postdec2	equ	0xFDD
 20965                           plusw2	equ	0xFDB
 20966                           fsr2h	equ	0xFDA
 20967                           fsr2l	equ	0xFD9
 20968                           status	equ	0xFD8
 20969                           
 20970 ;; *************** function _month_length *****************
 20971 ;; Defined at:
 20972 ;;		line 87 in file "../My_header\My_RTCC.h"
 20973 ;; Parameters:    Size  Location     Type
 20974 ;;  year            1    wreg     unsigned char 
 20975 ;;  month           1    2[BANK0 ] unsigned char 
 20976 ;; Auto vars:     Size  Location     Type
 20977 ;;  year            1    7[BANK0 ] unsigned char 
 20978 ;; Return value:  Size  Location     Type
 20979 ;;                  1    wreg      unsigned char 
 20980 ;; Registers used:
 20981 ;;		wreg, status,2, status,0, cstack
 20982 ;; Tracked objects:
 20983 ;;		On entry : 0/0
 20984 ;;		On exit  : 0/0
 20985 ;;		Unchanged: 0/0
 20986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20987 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20988 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20989 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20990 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20991 ;;Total ram usage:        6 bytes
 20992 ;; Hardware stack levels used:    1
 20993 ;; Hardware stack levels required when called:    4
 20994 ;; This function calls:
 20995 ;;		___awmod
 20996 ;; This function is called by:
 20997 ;;		_epoch_to_caltime
 20998 ;;		_caltime_to_epoch
 20999 ;;		_RTCC_adjust_time_inc
 21000 ;;		_RTCC_adjust_time_dec
 21001 ;;		_command_time
 21002 ;; This function uses a non-reentrant model
 21003 ;;
 21004                           
 21005                           	psect	text83
 21006  0000'                    __ptext83:
 21007                           	opt stack 0
 21008  0000'                    _month_length:
 21009                           	opt stack 23
 21010                           
 21011                           ; BSR set to: 0
 21012                           ;incstack = 0
 21013                           ;month_length@year stored from wreg
 21014  0000' 0100               	movlb	0	; () banked
 21015  0002' 6F00'              	movwf	month_length@year& (0+255),b
 21016                           
 21017                           ;My_header\My_RTCC.h: 88: if (month == 2) return 28 + !(year & 3)-!(year % 100)+!(year %
      +                           400);
 21018  0004' 0E02               	movlw	2
 21019  0006' 0100               	movlb	0	; () banked
 21020  0008' 1900'              	xorwf	month_length@month& (0+255),w,b
 21021  000A' A4D8               	btfss	status,2,c
 21022  000C' D036               	goto	l7017
 21023                           
 21024                           ; BSR set to: 0
 21025  000E' C007' F01E'        	movff	month_length@year,___awmod@dividend
 21026  0012' 6A1F'              	clrf	___awmod@dividend+1,c
 21027  0014' 0E00               	movlw	0
 21028  0016' 6E21'              	movwf	___awmod@divisor+1,c
 21029  0018' 0E64               	movlw	100
 21030  001A' 6E20'              	movwf	___awmod@divisor,c
 21031  001C' EC00' F000'        	call	___awmod	;wreg free
 21032  0020' 501E'              	movf	?___awmod,w,c
 21033  0022' 101F'              	iorwf	?___awmod+1,w,c
 21034  0024' A4D8               	btfss	status,2,c
 21035  0026' D002               	goto	u8290
 21036  0028' 0E01               	movlw	1
 21037  002A' D001               	goto	u8300
 21038  002C'                    u8290:
 21039  002C' 0E00               	movlw	0
 21040  002E'                    u8300:
 21041  002E' 0800               	sublw	0
 21042  0030' 0100               	movlb	0	; () banked
 21043  0032' 6F00'              	movwf	??_month_length& (0+255),b
 21044  0034' C007' F01E'        	movff	month_length@year,___awmod@dividend
 21045  0038' 6A1F'              	clrf	___awmod@dividend+1,c
 21046  003A' 0E01               	movlw	1
 21047  003C' 6E21'              	movwf	___awmod@divisor+1,c
 21048  003E' 0E90               	movlw	144
 21049  0040' 6E20'              	movwf	___awmod@divisor,c
 21050  0042' EC00' F000'        	call	___awmod	;wreg free
 21051  0046' 501E'              	movf	?___awmod,w,c
 21052  0048' 101F'              	iorwf	?___awmod+1,w,c
 21053  004A' A4D8               	btfss	status,2,c
 21054  004C' D004               	goto	u8310
 21055  004E' 0100               	movlb	0	; () banked
 21056  0050' 6B00'              	clrf	(??_month_length+1)& (0+255),b
 21057  0052' 2B00'              	incf	(??_month_length+1)& (0+255),f,b
 21058  0054' D002               	goto	u8328
 21059  0056'                    u8310:
 21060  0056' 0100               	movlb	0	; () banked
 21061  0058' 6B00'              	clrf	(??_month_length+1)& (0+255),b
 21062  005A'                    u8328:
 21063  005A' C007' F005'        	movff	month_length@year,??_month_length+2
 21064  005E' 0E03               	movlw	3
 21065  0060' 0100               	movlb	0	; () banked
 21066  0062' 1700'              	andwf	(??_month_length+2)& (0+255),f,b
 21067  0064' A4D8               	btfss	status,2,c
 21068  0066' D002               	goto	u8330
 21069  0068' 0E01               	movlw	1
 21070  006A' D001               	goto	u8340
 21071  006C'                    u8330:
 21072  006C' 0E00               	movlw	0
 21073  006E'                    u8340:
 21074  006E' 0100               	movlb	0	; () banked
 21075  0070' 2500'              	addwf	(??_month_length+1)& (0+255),w,b
 21076  0072' 0100               	movlb	0	; () banked
 21077  0074' 2500'              	addwf	??_month_length& (0+255),w,b
 21078  0076' 0F1C               	addlw	28
 21079                           
 21080                           ; BSR set to: 0
 21081                           
 21082                           ; BSR set to: 0
 21083  0078' 0012               	return	
 21084  007A'                    l7017:
 21085                           
 21086                           ; BSR set to: 0
 21087                           ;My_header\My_RTCC.h: 89: else return 31 - (((-(month & 1)^month)&13) == 4);
 21088  007A' 0100               	movlb	0	; () banked
 21089  007C' 5100'              	movf	month_length@month& (0+255),w,b
 21090  007E' 0B01               	andlw	1
 21091  0080' 0100               	movlb	0	; () banked
 21092  0082' 6F00'              	movwf	??_month_length& (0+255),b
 21093  0084' 6B00'              	clrf	(??_month_length+1)& (0+255),b
 21094  0086' 0100               	movlb	0	; () banked
 21095  0088' 1F00'              	comf	??_month_length& (0+255),f,b
 21096  008A' 1F00'              	comf	(??_month_length+1)& (0+255),f,b
 21097  008C' 4B00'              	infsnz	??_month_length& (0+255),f,b
 21098  008E' 2B00'              	incf	(??_month_length+1)& (0+255),f,b
 21099  0090' 0100               	movlb	0	; () banked
 21100  0092' 5100'              	movf	month_length@month& (0+255),w,b
 21101  0094' 0100               	movlb	0	; () banked
 21102  0096' 6F00'              	movwf	(??_month_length+2)& (0+255),b
 21103  0098' 6B00'              	clrf	(??_month_length+3)& (0+255),b
 21104  009A' 0100               	movlb	0	; () banked
 21105  009C' 5100'              	movf	??_month_length& (0+255),w,b
 21106  009E' 0100               	movlb	0	; () banked
 21107  00A0' 1B00'              	xorwf	(??_month_length+2)& (0+255),f,b
 21108  00A2' 0100               	movlb	0	; () banked
 21109  00A4' 5100'              	movf	(??_month_length+1)& (0+255),w,b
 21110  00A6' 0100               	movlb	0	; () banked
 21111  00A8' 1B00'              	xorwf	(??_month_length+3)& (0+255),f,b
 21112  00AA' 0E0D               	movlw	13
 21113  00AC' 0100               	movlb	0	; () banked
 21114  00AE' 1700'              	andwf	(??_month_length+2)& (0+255),f,b
 21115  00B0' 0E00               	movlw	0
 21116  00B2' 1700'              	andwf	(??_month_length+3)& (0+255),f,b
 21117  00B4' 0E04               	movlw	4
 21118  00B6' 0100               	movlb	0	; () banked
 21119  00B8' 1900'              	xorwf	(??_month_length+2)& (0+255),w,b
 21120  00BA' 0100               	movlb	0	; () banked
 21121  00BC' 1100'              	iorwf	(??_month_length+3)& (0+255),w,b
 21122  00BE' A4D8               	btfss	status,2,c
 21123  00C0' D002               	goto	u8350
 21124  00C2' 0E01               	movlw	1
 21125  00C4' D001               	goto	u8360
 21126  00C6'                    u8350:
 21127  00C6' 0E00               	movlw	0
 21128  00C8'                    u8360:
 21129  00C8' 0800               	sublw	0
 21130  00CA' 0F1F               	addlw	31
 21131                           
 21132                           ; BSR set to: 0
 21133  00CC' 0012               	return	
 21134  00CE'                    __end_of_month_length:
 21135                           	opt stack 0
 21136                           tblptru	equ	0xFF8
 21137                           tblptrh	equ	0xFF7
 21138                           tblptrl	equ	0xFF6
 21139                           tablat	equ	0xFF5
 21140                           prodh	equ	0xFF4
 21141                           prodl	equ	0xFF3
 21142                           intcon	equ	0xFF2
 21143                           intcon2	equ	0xFF1
 21144                           indf0	equ	0xFEF
 21145                           postinc0	equ	0xFEE
 21146                           fsr0h	equ	0xFEA
 21147                           fsr0l	equ	0xFE9
 21148                           wreg	equ	0xFE8
 21149                           postinc1	equ	0xFE6
 21150                           postdec1	equ	0xFE5
 21151                           fsr1h	equ	0xFE2
 21152                           fsr1l	equ	0xFE1
 21153                           indf2	equ	0xFDF
 21154                           postinc2	equ	0xFDE
 21155                           postdec2	equ	0xFDD
 21156                           plusw2	equ	0xFDB
 21157                           fsr2h	equ	0xFDA
 21158                           fsr2l	equ	0xFD9
 21159                           status	equ	0xFD8
 21160                           
 21161 ;; *************** function ___awmod *****************
 21162 ;; Defined at:
 21163 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
 21164 ;; Parameters:    Size  Location     Type
 21165 ;;  dividend        2   30[COMRAM] int 
 21166 ;;  divisor         2   32[COMRAM] int 
 21167 ;; Auto vars:     Size  Location     Type
 21168 ;;  sign            1    1[BANK0 ] unsigned char 
 21169 ;;  counter         1    0[BANK0 ] unsigned char 
 21170 ;; Return value:  Size  Location     Type
 21171 ;;                  2   30[COMRAM] int 
 21172 ;; Registers used:
 21173 ;;		wreg, status,2, status,0
 21174 ;; Tracked objects:
 21175 ;;		On entry : 0/0
 21176 ;;		On exit  : 0/0
 21177 ;;		Unchanged: 0/0
 21178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21179 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21180 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21182 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21183 ;;Total ram usage:        6 bytes
 21184 ;; Hardware stack levels used:    1
 21185 ;; Hardware stack levels required when called:    3
 21186 ;; This function calls:
 21187 ;;		Nothing
 21188 ;; This function is called by:
 21189 ;;		_month_length
 21190 ;; This function uses a non-reentrant model
 21191 ;;
 21192                           
 21193                           	psect	text84
 21194  0000'                    __ptext84:
 21195                           	opt stack 0
 21196  0000'                    ___awmod:
 21197                           	opt stack 23
 21198                           
 21199                           ; BSR set to: 0
 21200                           ;incstack = 0
 21201  0000' 0E00               	movlw	0
 21202  0002' 0100               	movlb	0	; () banked
 21203  0004' 6F00'              	movwf	___awmod@sign& (0+255),b
 21204                           
 21205                           ; BSR set to: 0
 21206  0006' AE1F'              	btfss	___awmod@dividend+1,7,c
 21207  0008' D007               	goto	l6965
 21208                           
 21209                           ; BSR set to: 0
 21210  000A' 6C1E'              	negf	___awmod@dividend,c
 21211  000C' 1E1F'              	comf	___awmod@dividend+1,f,c
 21212  000E' B0D8               	btfsc	status,0,c
 21213  0010' 2A1F'              	incf	___awmod@dividend+1,f,c
 21214                           
 21215                           ; BSR set to: 0
 21216  0012' 0E01               	movlw	1
 21217  0014' 0100               	movlb	0	; () banked
 21218  0016' 6F00'              	movwf	___awmod@sign& (0+255),b
 21219  0018'                    l6965:
 21220                           
 21221                           ; BSR set to: 0
 21222  0018' AE21'              	btfss	___awmod@divisor+1,7,c
 21223  001A' D004               	goto	l6969
 21224                           
 21225                           ; BSR set to: 0
 21226  001C' 6C20'              	negf	___awmod@divisor,c
 21227  001E' 1E21'              	comf	___awmod@divisor+1,f,c
 21228  0020' B0D8               	btfsc	status,0,c
 21229  0022' 2A21'              	incf	___awmod@divisor+1,f,c
 21230  0024'                    l6969:
 21231                           
 21232                           ; BSR set to: 0
 21233  0024' 5020'              	movf	___awmod@divisor,w,c
 21234  0026' 1021'              	iorwf	___awmod@divisor+1,w,c
 21235  0028' B4D8               	btfsc	status,2,c
 21236  002A' D01B               	goto	l6985
 21237                           
 21238                           ; BSR set to: 0
 21239  002C' 0E01               	movlw	1
 21240  002E' 0100               	movlb	0	; () banked
 21241  0030' 6F00'              	movwf	___awmod@counter& (0+255),b
 21242  0032' D005               	goto	l6975
 21243  0034'                    l6973:
 21244                           
 21245                           ; BSR set to: 0
 21246  0034' 90D8               	bcf	status,0,c
 21247  0036' 3620'              	rlcf	___awmod@divisor,f,c
 21248  0038' 3621'              	rlcf	___awmod@divisor+1,f,c
 21249  003A' 0100               	movlb	0	; () banked
 21250  003C' 2B00'              	incf	___awmod@counter& (0+255),f,b
 21251  003E'                    l6975:
 21252                           
 21253                           ; BSR set to: 0
 21254  003E' AE21'              	btfss	___awmod@divisor+1,7,c
 21255  0040' D7F9               	goto	l6973
 21256  0042'                    l6977:
 21257                           
 21258                           ; BSR set to: 0
 21259  0042' 5020'              	movf	___awmod@divisor,w,c
 21260  0044' 5C1E'              	subwf	___awmod@dividend,w,c
 21261  0046' 5021'              	movf	___awmod@divisor+1,w,c
 21262  0048' 581F'              	subwfb	___awmod@dividend+1,w,c
 21263  004A' A0D8               	btfss	status,0,c
 21264  004C' D004               	goto	l6981
 21265                           
 21266                           ; BSR set to: 0
 21267  004E' 5020'              	movf	___awmod@divisor,w,c
 21268  0050' 5E1E'              	subwf	___awmod@dividend,f,c
 21269  0052' 5021'              	movf	___awmod@divisor+1,w,c
 21270  0054' 5A1F'              	subwfb	___awmod@dividend+1,f,c
 21271  0056'                    l6981:
 21272                           
 21273                           ; BSR set to: 0
 21274  0056' 90D8               	bcf	status,0,c
 21275  0058' 3221'              	rrcf	___awmod@divisor+1,f,c
 21276  005A' 3220'              	rrcf	___awmod@divisor,f,c
 21277                           
 21278                           ; BSR set to: 0
 21279  005C' 0100               	movlb	0	; () banked
 21280  005E' 2F00'              	decfsz	___awmod@counter& (0+255),f,b
 21281  0060' D7F0               	goto	l6977
 21282  0062'                    l6985:
 21283                           
 21284                           ; BSR set to: 0
 21285  0062' 0100               	movlb	0	; () banked
 21286  0064' 5100'              	movf	___awmod@sign& (0+255),w,b
 21287  0066' 0100               	movlb	0	; () banked
 21288  0068' B4D8               	btfsc	status,2,c
 21289  006A' D004               	goto	l6989
 21290                           
 21291                           ; BSR set to: 0
 21292  006C' 6C1E'              	negf	___awmod@dividend,c
 21293  006E' 1E1F'              	comf	___awmod@dividend+1,f,c
 21294  0070' B0D8               	btfsc	status,0,c
 21295  0072' 2A1F'              	incf	___awmod@dividend+1,f,c
 21296  0074'                    l6989:
 21297                           
 21298                           ; BSR set to: 0
 21299  0074' C01E' F01E'        	movff	___awmod@dividend,?___awmod
 21300  0078' C01F' F01F'        	movff	___awmod@dividend+1,?___awmod+1
 21301  007C' 0012               	return	
 21302  007E'                    __end_of___awmod:
 21303                           	opt stack 0
 21304                           tblptru	equ	0xFF8
 21305                           tblptrh	equ	0xFF7
 21306                           tblptrl	equ	0xFF6
 21307                           tablat	equ	0xFF5
 21308                           prodh	equ	0xFF4
 21309                           prodl	equ	0xFF3
 21310                           intcon	equ	0xFF2
 21311                           intcon2	equ	0xFF1
 21312                           indf0	equ	0xFEF
 21313                           postinc0	equ	0xFEE
 21314                           fsr0h	equ	0xFEA
 21315                           fsr0l	equ	0xFE9
 21316                           wreg	equ	0xFE8
 21317                           postinc1	equ	0xFE6
 21318                           postdec1	equ	0xFE5
 21319                           fsr1h	equ	0xFE2
 21320                           fsr1l	equ	0xFE1
 21321                           indf2	equ	0xFDF
 21322                           postinc2	equ	0xFDE
 21323                           postdec2	equ	0xFDD
 21324                           plusw2	equ	0xFDB
 21325                           fsr2h	equ	0xFDA
 21326                           fsr2l	equ	0xFD9
 21327                           status	equ	0xFD8
 21328                           
 21329 ;; *************** function ___lmul *****************
 21330 ;; Defined at:
 21331 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul32.c"
 21332 ;; Parameters:    Size  Location     Type
 21333 ;;  multiplier      4   13[BANK0 ] unsigned long 
 21334 ;;  multiplicand    4   17[BANK0 ] unsigned long 
 21335 ;; Auto vars:     Size  Location     Type
 21336 ;;  product         4   21[BANK0 ] unsigned long 
 21337 ;; Return value:  Size  Location     Type
 21338 ;;                  4   13[BANK0 ] unsigned long 
 21339 ;; Registers used:
 21340 ;;		wreg, status,2, status,0
 21341 ;; Tracked objects:
 21342 ;;		On entry : 0/0
 21343 ;;		On exit  : 0/0
 21344 ;;		Unchanged: 0/0
 21345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21346 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21347 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21349 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21350 ;;Total ram usage:       12 bytes
 21351 ;; Hardware stack levels used:    1
 21352 ;; Hardware stack levels required when called:    3
 21353 ;; This function calls:
 21354 ;;		Nothing
 21355 ;; This function is called by:
 21356 ;;		_get_quot_rem
 21357 ;;		_caltime_to_epoch
 21358 ;;		_RTCC_adjust_time_inc
 21359 ;;		_RTCC_adjust_time_dec
 21360 ;; This function uses a non-reentrant model
 21361 ;;
 21362                           
 21363                           	psect	text85
 21364  0000'                    __ptext85:
 21365                           	opt stack 0
 21366  0000'                    ___lmul:
 21367                           	opt stack 24
 21368                           
 21369                           ; BSR set to: 0
 21370                           ;incstack = 0
 21371  0000' 0E00               	movlw	0
 21372  0002' 0100               	movlb	0	; () banked
 21373  0004' 6F00'              	movwf	___lmul@product& (0+255),b
 21374  0006' 0E00               	movlw	0
 21375  0008' 6F00'              	movwf	(___lmul@product+1)& (0+255),b
 21376  000A' 0E00               	movlw	0
 21377  000C' 6F00'              	movwf	(___lmul@product+2)& (0+255),b
 21378  000E' 0E00               	movlw	0
 21379  0010' 6F00'              	movwf	(___lmul@product+3)& (0+255),b
 21380  0012'                    l7023:
 21381                           
 21382                           ; BSR set to: 0
 21383  0012' 0100               	movlb	0	; () banked
 21384  0014' A100'              	btfss	___lmul@multiplier& (0+255),0,b
 21385  0016' D010               	goto	l7027
 21386                           
 21387                           ; BSR set to: 0
 21388  0018' 0100               	movlb	0	; () banked
 21389  001A' 5100'              	movf	___lmul@multiplicand& (0+255),w,b
 21390  001C' 0100               	movlb	0	; () banked
 21391  001E' 2700'              	addwf	___lmul@product& (0+255),f,b
 21392  0020' 0100               	movlb	0	; () banked
 21393  0022' 5100'              	movf	(___lmul@multiplicand+1)& (0+255),w,b
 21394  0024' 0100               	movlb	0	; () banked
 21395  0026' 2300'              	addwfc	(___lmul@product+1)& (0+255),f,b
 21396  0028' 0100               	movlb	0	; () banked
 21397  002A' 5100'              	movf	(___lmul@multiplicand+2)& (0+255),w,b
 21398  002C' 0100               	movlb	0	; () banked
 21399  002E' 2300'              	addwfc	(___lmul@product+2)& (0+255),f,b
 21400  0030' 0100               	movlb	0	; () banked
 21401  0032' 5100'              	movf	(___lmul@multiplicand+3)& (0+255),w,b
 21402  0034' 0100               	movlb	0	; () banked
 21403  0036' 2300'              	addwfc	(___lmul@product+3)& (0+255),f,b
 21404  0038'                    l7027:
 21405                           
 21406                           ; BSR set to: 0
 21407  0038' 0100               	movlb	0	; () banked
 21408  003A' 90D8               	bcf	status,0,c
 21409  003C' 3700'              	rlcf	___lmul@multiplicand& (0+255),f,b
 21410  003E' 3700'              	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 21411  0040' 3700'              	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 21412  0042' 3700'              	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 21413                           
 21414                           ; BSR set to: 0
 21415  0044' 0100               	movlb	0	; () banked
 21416  0046' 90D8               	bcf	status,0,c
 21417  0048' 3300'              	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 21418  004A' 3300'              	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 21419  004C' 3300'              	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 21420  004E' 3300'              	rrcf	___lmul@multiplier& (0+255),f,b
 21421  0050' 0100               	movlb	0	; () banked
 21422  0052' 5100'              	movf	___lmul@multiplier& (0+255),w,b
 21423  0054' 0100               	movlb	0	; () banked
 21424  0056' 1100'              	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 21425  0058' 0100               	movlb	0	; () banked
 21426  005A' 1100'              	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 21427  005C' 0100               	movlb	0	; () banked
 21428  005E' 1100'              	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 21429  0060' A4D8               	btfss	status,2,c
 21430  0062' D7D7               	goto	l7023
 21431                           
 21432                           ; BSR set to: 0
 21433  0064' C015' F00D'        	movff	___lmul@product,?___lmul
 21434  0068' C016' F00E'        	movff	___lmul@product+1,?___lmul+1
 21435  006C' C017' F00F'        	movff	___lmul@product+2,?___lmul+2
 21436  0070' C018' F010'        	movff	___lmul@product+3,?___lmul+3
 21437                           
 21438                           ; BSR set to: 0
 21439  0074' 0012               	return		;funcret
 21440  0076'                    __end_of___lmul:
 21441                           	opt stack 0
 21442                           tblptru	equ	0xFF8
 21443                           tblptrh	equ	0xFF7
 21444                           tblptrl	equ	0xFF6
 21445                           tablat	equ	0xFF5
 21446                           prodh	equ	0xFF4
 21447                           prodl	equ	0xFF3
 21448                           intcon	equ	0xFF2
 21449                           intcon2	equ	0xFF1
 21450                           indf0	equ	0xFEF
 21451                           postinc0	equ	0xFEE
 21452                           fsr0h	equ	0xFEA
 21453                           fsr0l	equ	0xFE9
 21454                           wreg	equ	0xFE8
 21455                           postinc1	equ	0xFE6
 21456                           postdec1	equ	0xFE5
 21457                           fsr1h	equ	0xFE2
 21458                           fsr1l	equ	0xFE1
 21459                           indf2	equ	0xFDF
 21460                           postinc2	equ	0xFDE
 21461                           postdec2	equ	0xFDD
 21462                           plusw2	equ	0xFDB
 21463                           fsr2h	equ	0xFDA
 21464                           fsr2l	equ	0xFD9
 21465                           status	equ	0xFD8
 21466                           
 21467 ;; *************** function _RTCC_to_caltime *****************
 21468 ;; Defined at:
 21469 ;;		line 121 in file "../My_header\My_RTCC.h"
 21470 ;; Parameters:    Size  Location     Type
 21471 ;;  ct              2   32[COMRAM] PTR struct .
 21472 ;;		 -> caltime_now(7), 
 21473 ;; Auto vars:     Size  Location     Type
 21474 ;;  dumy            1    0[BANK0 ] unsigned char 
 21475 ;; Return value:  Size  Location     Type
 21476 ;;		None               void
 21477 ;; Registers used:
 21478 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21479 ;; Tracked objects:
 21480 ;;		On entry : 0/0
 21481 ;;		On exit  : 0/0
 21482 ;;		Unchanged: 0/0
 21483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21484 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21485 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21487 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21488 ;;Total ram usage:        3 bytes
 21489 ;; Hardware stack levels used:    1
 21490 ;; Hardware stack levels required when called:    4
 21491 ;; This function calls:
 21492 ;;		_x_to_d
 21493 ;; This function is called by:
 21494 ;;		_RTCC_from_RTCC
 21495 ;; This function uses a non-reentrant model
 21496 ;;
 21497                           
 21498                           	psect	text86
 21499  0000'                    __ptext86:
 21500                           	opt stack 0
 21501  0000'                    _RTCC_to_caltime:
 21502                           	opt stack 22
 21503  0000'                    l411:
 21504  0000' 010F               	movlb	15	; () banked
 21505  0002' B93F               	btfsc	63,4,b	;volatile
 21506  0004' D7FD               	goto	l411
 21507                           
 21508                           ; BSR set to: 15
 21509                           ;My_header\My_RTCC.h: 124: RTCCFGbits.RTCPTR0 = 1;
 21510  0006' 010F               	movlb	15	; () banked
 21511  0008' 813F               	bsf	63,0,b	;volatile
 21512                           
 21513                           ;My_header\My_RTCC.h: 125: RTCCFGbits.RTCPTR1 = 1;
 21514  000A' 010F               	movlb	15	; () banked
 21515  000C' 833F               	bsf	63,1,b	;volatile
 21516                           
 21517                           ; BSR set to: 15
 21518                           ;My_header\My_RTCC.h: 127: ct->YY = x_to_d(RTCVALL);
 21519  000E' EE20 F006          	lfsr	2,6
 21520  0012' 5020'              	movf	RTCC_to_caltime@ct,w,c
 21521  0014' 26D9               	addwf	fsr2l,f,c
 21522  0016' 5021'              	movf	RTCC_to_caltime@ct+1,w,c
 21523  0018' 22DA               	addwfc	fsr2h,f,c
 21524  001A' 010F               	movlb	15	; () banked
 21525  001C' 513A               	movf	58,w,b	;volatile
 21526  001E' EC00' F000'        	call	_x_to_d
 21527  0022' 6EDF               	movwf	indf2,c
 21528                           
 21529                           ;My_header\My_RTCC.h: 128: uint8_t dumy = RTCVALH;
 21530  0024' CF3B F000'         	movff	3899,RTCC_to_caltime@dumy	;volatile
 21531                           
 21532                           ;My_header\My_RTCC.h: 129: ct->DD = x_to_d(RTCVALL);
 21533  0028' EE20 F004          	lfsr	2,4
 21534  002C' 5020'              	movf	RTCC_to_caltime@ct,w,c
 21535  002E' 26D9               	addwf	fsr2l,f,c
 21536  0030' 5021'              	movf	RTCC_to_caltime@ct+1,w,c
 21537  0032' 22DA               	addwfc	fsr2h,f,c
 21538  0034' 010F               	movlb	15	; () banked
 21539  0036' 513A               	movf	58,w,b	;volatile
 21540  0038' EC00' F000'        	call	_x_to_d
 21541  003C' 6EDF               	movwf	indf2,c
 21542                           
 21543                           ;My_header\My_RTCC.h: 130: ct->MM = x_to_d(RTCVALH);
 21544  003E' EE20 F005          	lfsr	2,5
 21545  0042' 5020'              	movf	RTCC_to_caltime@ct,w,c
 21546  0044' 26D9               	addwf	fsr2l,f,c
 21547  0046' 5021'              	movf	RTCC_to_caltime@ct+1,w,c
 21548  0048' 22DA               	addwfc	fsr2h,f,c
 21549  004A' 010F               	movlb	15	; () banked
 21550  004C' 513B               	movf	59,w,b	;volatile
 21551  004E' EC00' F000'        	call	_x_to_d
 21552  0052' 6EDF               	movwf	indf2,c
 21553                           
 21554                           ;My_header\My_RTCC.h: 131: ct->hh = x_to_d(RTCVALL);
 21555  0054' EE20 F002          	lfsr	2,2
 21556  0058' 5020'              	movf	RTCC_to_caltime@ct,w,c
 21557  005A' 26D9               	addwf	fsr2l,f,c
 21558  005C' 5021'              	movf	RTCC_to_caltime@ct+1,w,c
 21559  005E' 22DA               	addwfc	fsr2h,f,c
 21560  0060' 010F               	movlb	15	; () banked
 21561  0062' 513A               	movf	58,w,b	;volatile
 21562  0064' EC00' F000'        	call	_x_to_d
 21563  0068' 6EDF               	movwf	indf2,c
 21564                           
 21565                           ;My_header\My_RTCC.h: 132: ct->EE = x_to_d(RTCVALH);
 21566  006A' EE20 F003          	lfsr	2,3
 21567  006E' 5020'              	movf	RTCC_to_caltime@ct,w,c
 21568  0070' 26D9               	addwf	fsr2l,f,c
 21569  0072' 5021'              	movf	RTCC_to_caltime@ct+1,w,c
 21570  0074' 22DA               	addwfc	fsr2h,f,c
 21571  0076' 010F               	movlb	15	; () banked
 21572  0078' 513B               	movf	59,w,b	;volatile
 21573  007A' EC00' F000'        	call	_x_to_d
 21574  007E' 6EDF               	movwf	indf2,c
 21575                           
 21576                           ;My_header\My_RTCC.h: 133: ct->ss = x_to_d(RTCVALL);
 21577  0080' 010F               	movlb	15	; () banked
 21578  0082' 513A               	movf	58,w,b	;volatile
 21579  0084' EC00' F000'        	call	_x_to_d
 21580  0088' C020' FFD9         	movff	RTCC_to_caltime@ct,fsr2l
 21581  008C' C021' FFDA         	movff	RTCC_to_caltime@ct+1,fsr2h
 21582  0090' 6EDF               	movwf	indf2,c
 21583                           
 21584                           ;My_header\My_RTCC.h: 134: ct->mm = x_to_d(RTCVALH);
 21585  0092' EE20 F001          	lfsr	2,1
 21586  0096' 5020'              	movf	RTCC_to_caltime@ct,w,c
 21587  0098' 26D9               	addwf	fsr2l,f,c
 21588  009A' 5021'              	movf	RTCC_to_caltime@ct+1,w,c
 21589  009C' 22DA               	addwfc	fsr2h,f,c
 21590  009E' 010F               	movlb	15	; () banked
 21591  00A0' 513B               	movf	59,w,b	;volatile
 21592  00A2' EC00' F000'        	call	_x_to_d
 21593  00A6' 6EDF               	movwf	indf2,c
 21594  00A8' 0012               	return		;funcret
 21595  00AA'                    __end_of_RTCC_to_caltime:
 21596                           	opt stack 0
 21597                           tblptru	equ	0xFF8
 21598                           tblptrh	equ	0xFF7
 21599                           tblptrl	equ	0xFF6
 21600                           tablat	equ	0xFF5
 21601                           prodh	equ	0xFF4
 21602                           prodl	equ	0xFF3
 21603                           intcon	equ	0xFF2
 21604                           intcon2	equ	0xFF1
 21605                           indf0	equ	0xFEF
 21606                           postinc0	equ	0xFEE
 21607                           fsr0h	equ	0xFEA
 21608                           fsr0l	equ	0xFE9
 21609                           wreg	equ	0xFE8
 21610                           postinc1	equ	0xFE6
 21611                           postdec1	equ	0xFE5
 21612                           fsr1h	equ	0xFE2
 21613                           fsr1l	equ	0xFE1
 21614                           indf2	equ	0xFDF
 21615                           postinc2	equ	0xFDE
 21616                           postdec2	equ	0xFDD
 21617                           plusw2	equ	0xFDB
 21618                           fsr2h	equ	0xFDA
 21619                           fsr2l	equ	0xFD9
 21620                           status	equ	0xFD8
 21621                           
 21622 ;; *************** function _x_to_d *****************
 21623 ;; Defined at:
 21624 ;;		line 81 in file "../My_header\My_RTCC.h"
 21625 ;; Parameters:    Size  Location     Type
 21626 ;;  hex             1    wreg     unsigned char 
 21627 ;; Auto vars:     Size  Location     Type
 21628 ;;  hex             1   31[COMRAM] unsigned char 
 21629 ;; Return value:  Size  Location     Type
 21630 ;;                  1    wreg      unsigned char 
 21631 ;; Registers used:
 21632 ;;		wreg, status,2, status,0, prodl, prodh
 21633 ;; Tracked objects:
 21634 ;;		On entry : 0/0
 21635 ;;		On exit  : 0/0
 21636 ;;		Unchanged: 0/0
 21637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21639 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21640 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21641 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21642 ;;Total ram usage:        2 bytes
 21643 ;; Hardware stack levels used:    1
 21644 ;; Hardware stack levels required when called:    3
 21645 ;; This function calls:
 21646 ;;		Nothing
 21647 ;; This function is called by:
 21648 ;;		_RTCC_to_caltime
 21649 ;; This function uses a non-reentrant model
 21650 ;;
 21651                           
 21652                           	psect	text87
 21653  0000'                    __ptext87:
 21654                           	opt stack 0
 21655  0000'                    _x_to_d:
 21656                           	opt stack 22
 21657                           
 21658                           ;incstack = 0
 21659                           ;x_to_d@hex stored from wreg
 21660  0000' 6E1F'              	movwf	x_to_d@hex,c
 21661                           
 21662                           ;My_header\My_RTCC.h: 82: return 10 * (0x0F & (hex >> 4)) + (0x0F & hex);
 21663  0002' C01F' F01E'        	movff	x_to_d@hex,??_x_to_d
 21664  0006' 0E0F               	movlw	15
 21665  0008' 161E'              	andwf	??_x_to_d,f,c
 21666  000A' 381F'              	swapf	x_to_d@hex,w,c
 21667  000C' 0B0F               	andlw	15
 21668  000E' 0B0F               	andlw	15
 21669  0010' 0D0A               	mullw	10
 21670  0012' 50F3               	movf	prodl,w,c
 21671  0014' 241E'              	addwf	??_x_to_d,w,c
 21672  0016' 0012               	return	
 21673  0018'                    __end_of_x_to_d:
 21674                           	opt stack 0
 21675                           tblptru	equ	0xFF8
 21676                           tblptrh	equ	0xFF7
 21677                           tblptrl	equ	0xFF6
 21678                           tablat	equ	0xFF5
 21679                           prodh	equ	0xFF4
 21680                           prodl	equ	0xFF3
 21681                           intcon	equ	0xFF2
 21682                           intcon2	equ	0xFF1
 21683                           indf0	equ	0xFEF
 21684                           postinc0	equ	0xFEE
 21685                           fsr0h	equ	0xFEA
 21686                           fsr0l	equ	0xFE9
 21687                           wreg	equ	0xFE8
 21688                           postinc1	equ	0xFE6
 21689                           postdec1	equ	0xFE5
 21690                           fsr1h	equ	0xFE2
 21691                           fsr1l	equ	0xFE1
 21692                           indf2	equ	0xFDF
 21693                           postinc2	equ	0xFDE
 21694                           postdec2	equ	0xFDD
 21695                           plusw2	equ	0xFDB
 21696                           fsr2h	equ	0xFDA
 21697                           fsr2l	equ	0xFD9
 21698                           status	equ	0xFD8
 21699                           
 21700 ;; *************** function _ISR *****************
 21701 ;; Defined at:
 21702 ;;		line 50 in file "main.c"
 21703 ;; Parameters:    Size  Location     Type
 21704 ;;		None
 21705 ;; Auto vars:     Size  Location     Type
 21706 ;;		None
 21707 ;; Return value:  Size  Location     Type
 21708 ;;		None               void
 21709 ;; Registers used:
 21710 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
 21711 ;; Tracked objects:
 21712 ;;		On entry : 0/0
 21713 ;;		On exit  : 0/0
 21714 ;;		Unchanged: 0/0
 21715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21718 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21719 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21720 ;;Total ram usage:       14 bytes
 21721 ;; Hardware stack levels used:    1
 21722 ;; Hardware stack levels required when called:    2
 21723 ;; This function calls:
 21724 ;;		_LED_indicator
 21725 ;;		_USB_ISR
 21726 ;;		_charge_time_count
 21727 ;;		_delay_timer_interrupt
 21728 ;;		_integrating
 21729 ;; This function is called by:
 21730 ;;		Interrupt level 2
 21731 ;; This function uses a non-reentrant model
 21732 ;;
 21733                           
 21734                           	psect	intcode
 21735  0000'                    __pintcode:
 21736                           	opt stack 0
 21737  0000'                    _ISR:
 21738                           	opt stack 19
 21739                           
 21740                           ;incstack = 0
 21741  0000' 8200'              	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 21742  0002' CFFA F010'         	movff	pclath,??_ISR
 21743  0006' CFFB F011'         	movff	pclatu,??_ISR+1
 21744  000A' CFE9 F012'         	movff	fsr0l,??_ISR+2
 21745  000E' CFEA F013'         	movff	fsr0h,??_ISR+3
 21746  0012' CFE1 F014'         	movff	fsr1l,??_ISR+4
 21747  0016' CFE2 F015'         	movff	fsr1h,??_ISR+5
 21748  001A' CFD9 F016'         	movff	fsr2l,??_ISR+6
 21749  001E' CFDA F017'         	movff	fsr2h,??_ISR+7
 21750  0022' CFF3 F018'         	movff	prodl,??_ISR+8
 21751  0026' CFF4 F019'         	movff	prodh,??_ISR+9
 21752  002A' CFF6 F01A'         	movff	tblptrl,??_ISR+10
 21753  002E' CFF7 F01B'         	movff	tblptrh,??_ISR+11
 21754  0032' CFF8 F01C'         	movff	tblptru,??_ISR+12
 21755  0036' CFF5 F01D'         	movff	tablat,??_ISR+13
 21756                           
 21757                           ;main.c: 51: USB_ISR();
 21758  003A' EC00' F000'        	call	_USB_ISR	;wreg free
 21759                           
 21760                           ;main.c: 52: if (INTCONbits.T0IF && INTCONbits.T0IE) {
 21761  003E' B4F2               	btfsc	intcon,2,c	;volatile
 21762  0040' AAF2               	btfss	intcon,5,c	;volatile
 21763  0042' D00F               	goto	i2l6843
 21764                           
 21765                           ;main.c: 53: INTCONbits.T0IF = 0;
 21766  0044' 94F2               	bcf	intcon,2,c	;volatile
 21767                           
 21768                           ;main.c: 54: static uint16_t cnt_t0;
 21769                           ;main.c: 55: if (cnt_t0) {
 21770  0046' 5009'              	movf	ISR@cnt_t0,w,c
 21771  0048' 100A'              	iorwf	ISR@cnt_t0+1,w,c
 21772  004A' B4D8               	btfsc	status,2,c
 21773  004C' D004               	goto	i2l6839
 21774                           
 21775                           ;main.c: 56: cnt_t0--;
 21776  004E' 0609'              	decf	ISR@cnt_t0,f,c
 21777  0050' A0D8               	btfss	status,0,c
 21778  0052' 060A'              	decf	ISR@cnt_t0+1,f,c
 21779                           
 21780                           ;main.c: 57: } else {
 21781  0054' D006               	goto	i2l6843
 21782  0056'                    i2l6839:
 21783                           
 21784                           ;main.c: 58: cnt_t0 = 120;
 21785  0056' 0E00               	movlw	0
 21786  0058' 6E0A'              	movwf	ISR@cnt_t0+1,c
 21787  005A' 0E78               	movlw	120
 21788  005C' 6E09'              	movwf	ISR@cnt_t0,c
 21789                           
 21790                           ;main.c: 59: LED_indicator();
 21791  005E' EC00' F000'        	call	_LED_indicator	;wreg free
 21792  0062'                    i2l6843:
 21793                           
 21794                           ;main.c: 60: }
 21795                           ;main.c: 61: }
 21796                           ;main.c: 62: if (PIR1bits.TMR1IF && PIE1bits.TMR1IE) {
 21797  0062' B09E               	btfsc	3998,0,c	;volatile
 21798  0064' A09D               	btfss	3997,0,c	;volatile
 21799  0066' D01D               	goto	i2l6863
 21800                           
 21801                           ;main.c: 63: PIR1bits.TMR1IF = 0;
 21802  0068' 909E               	bcf	3998,0,c	;volatile
 21803                           
 21804                           ;main.c: 64: TMR1H = 0xC0;
 21805  006A' 0EC0               	movlw	192
 21806  006C' 6ECF               	movwf	4047,c	;volatile
 21807                           
 21808                           ;main.c: 65: cut_time_flag = 1;
 21809  006E' 0E01               	movlw	1
 21810  0070' 0100               	movlb	0	; () banked
 21811  0072' 6F00'              	movwf	_cut_time_flag& (0+255),b
 21812                           
 21813                           ;main.c: 66: static uint8_t cnt_t1 = 0;
 21814                           ;main.c: 67: if (cnt_t1) {
 21815  0074' 500D'              	movf	ISR@cnt_t1,w,c
 21816  0076' B4D8               	btfsc	status,2,c
 21817  0078' D003               	goto	i2l6853
 21818                           
 21819                           ; BSR set to: 0
 21820                           ;main.c: 68: cnt_t1 = 0;
 21821  007A' 0E00               	movlw	0
 21822  007C' 6E0D'              	movwf	ISR@cnt_t1,c
 21823                           
 21824                           ;main.c: 69: } else {
 21825  007E' D011               	goto	i2l6863
 21826  0080'                    i2l6853:
 21827                           
 21828                           ; BSR set to: 0
 21829                           ;main.c: 70: cnt_t1 = 1;
 21830  0080' 0E01               	movlw	1
 21831  0082' 6E0D'              	movwf	ISR@cnt_t1,c
 21832                           
 21833                           ;main.c: 71: data_out_flag = 1;
 21834  0084' 0E01               	movlw	1
 21835  0086' 0100               	movlb	0	; () banked
 21836  0088' 6F00'              	movwf	_data_out_flag& (0+255),b
 21837                           
 21838                           ; BSR set to: 0
 21839                           ;main.c: 72: integrating();
 21840  008A' EC00' F000'        	call	_integrating	;wreg free
 21841                           
 21842                           ;main.c: 73: charge_time_count();
 21843  008E' EC00' F000'        	call	_charge_time_count	;wreg free
 21844                           
 21845                           ;main.c: 74: if (pres_print_item == PRINT_DATA)display_flag = 1;
 21846  0092' 0E03               	movlw	3
 21847  0094' 0100               	movlb	0	; () banked
 21848  0096' 1900'              	xorwf	_pres_print_item& (0+255),w,b
 21849  0098' A4D8               	btfss	status,2,c
 21850  009A' D003               	goto	i2l6863
 21851                           
 21852                           ; BSR set to: 0
 21853  009C' 0E01               	movlw	1
 21854  009E' 0100               	movlb	0	; () banked
 21855  00A0' 6F00'              	movwf	_display_flag& (0+255),b
 21856  00A2'                    i2l6863:
 21857                           
 21858                           ;main.c: 75: }
 21859                           ;main.c: 76: }
 21860                           ;main.c: 77: if (PIR2bits.TMR3IF && PIE2bits.TMR3IE) {
 21861  00A2' B2A1               	btfsc	4001,1,c	;volatile
 21862  00A4' A2A0               	btfss	4000,1,c	;volatile
 21863  00A6' D00A               	goto	i2l1033
 21864                           
 21865                           ;main.c: 78: PIR2bits.TMR3IF = 0;
 21866  00A8' 92A1               	bcf	4001,1,c	;volatile
 21867                           
 21868                           ;main.c: 79: ctmu_flag = 1;
 21869  00AA' 0E01               	movlw	1
 21870  00AC' 0100               	movlb	0	; () banked
 21871  00AE' 6F00'              	movwf	_ctmu_flag& (0+255),b
 21872                           
 21873                           ; BSR set to: 0
 21874                           ;main.c: 80: delay_timer_interrupt(&delay_display);
 21875  00B0' 0E00'              	movlw	low _delay_display
 21876  00B2' 6E00'              	movwf	delay_timer_interrupt@d,c
 21877  00B4' 0E00'              	movlw	high _delay_display
 21878  00B6' 6E01'              	movwf	delay_timer_interrupt@d+1,c
 21879  00B8' EC00' F000'        	call	_delay_timer_interrupt	;wreg free
 21880  00BC'                    i2l1033:
 21881  00BC' C01D' FFF5         	movff	??_ISR+13,tablat
 21882  00C0' C01C' FFF8         	movff	??_ISR+12,tblptru
 21883  00C4' C01B' FFF7         	movff	??_ISR+11,tblptrh
 21884  00C8' C01A' FFF6         	movff	??_ISR+10,tblptrl
 21885  00CC' C019' FFF4         	movff	??_ISR+9,prodh
 21886  00D0' C018' FFF3         	movff	??_ISR+8,prodl
 21887  00D4' C017' FFDA         	movff	??_ISR+7,fsr2h
 21888  00D8' C016' FFD9         	movff	??_ISR+6,fsr2l
 21889  00DC' C015' FFE2         	movff	??_ISR+5,fsr1h
 21890  00E0' C014' FFE1         	movff	??_ISR+4,fsr1l
 21891  00E4' C013' FFEA         	movff	??_ISR+3,fsr0h
 21892  00E8' C012' FFE9         	movff	??_ISR+2,fsr0l
 21893  00EC' C011' FFFB         	movff	??_ISR+1,pclatu
 21894  00F0' C010' FFFA         	movff	??_ISR,pclath
 21895  00F4' 9200'              	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 21896  00F6' 0011               	retfie		f
 21897  00F8'                    __end_of_ISR:
 21898                           	opt stack 0
 21899                           pclatu	equ	0xFFB
 21900                           pclath	equ	0xFFA
 21901                           tblptru	equ	0xFF8
 21902                           tblptrh	equ	0xFF7
 21903                           tblptrl	equ	0xFF6
 21904                           tablat	equ	0xFF5
 21905                           prodh	equ	0xFF4
 21906                           prodl	equ	0xFF3
 21907                           intcon	equ	0xFF2
 21908                           intcon2	equ	0xFF1
 21909                           indf0	equ	0xFEF
 21910                           postinc0	equ	0xFEE
 21911                           fsr0h	equ	0xFEA
 21912                           fsr0l	equ	0xFE9
 21913                           wreg	equ	0xFE8
 21914                           postinc1	equ	0xFE6
 21915                           postdec1	equ	0xFE5
 21916                           fsr1h	equ	0xFE2
 21917                           fsr1l	equ	0xFE1
 21918                           indf2	equ	0xFDF
 21919                           postinc2	equ	0xFDE
 21920                           postdec2	equ	0xFDD
 21921                           plusw2	equ	0xFDB
 21922                           fsr2h	equ	0xFDA
 21923                           fsr2l	equ	0xFD9
 21924                           status	equ	0xFD8
 21925                           
 21926 ;; *************** function _integrating *****************
 21927 ;; Defined at:
 21928 ;;		line 198 in file "tasks.h"
 21929 ;; Parameters:    Size  Location     Type
 21930 ;;		None
 21931 ;; Auto vars:     Size  Location     Type
 21932 ;;  i               1   15[COMRAM] unsigned char 
 21933 ;; Return value:  Size  Location     Type
 21934 ;;		None               void
 21935 ;; Registers used:
 21936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21937 ;; Tracked objects:
 21938 ;;		On entry : 0/0
 21939 ;;		On exit  : 0/0
 21940 ;;		Unchanged: 0/0
 21941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21943 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21944 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21945 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21946 ;;Total ram usage:        3 bytes
 21947 ;; Hardware stack levels used:    1
 21948 ;; Hardware stack levels required when called:    1
 21949 ;; This function calls:
 21950 ;;		i2___lldiv
 21951 ;; This function is called by:
 21952 ;;		_ISR
 21953 ;; This function uses a non-reentrant model
 21954 ;;
 21955                           
 21956                           	psect	text89
 21957  0000'                    __ptext89:
 21958                           	opt stack 0
 21959  0000'                    _integrating:
 21960                           	opt stack 19
 21961                           
 21962                           ;tasks.h: 199: for (uint8_t i = 0; i < 3; i++) {
 21963                           
 21964                           ;incstack = 0
 21965  0000' 0E00               	movlw	0
 21966  0002' 6E0F'              	movwf	integrating@i,c
 21967  0004'                    i2l6453:
 21968  0004' 0E02               	movlw	2
 21969  0006' 640F'              	cpfsgt	integrating@i,c
 21970  0008' D001               	goto	i2l6457
 21971  000A' 0012               	return	
 21972  000C'                    i2l6457:
 21973                           
 21974                           ;tasks.h: 200: if (port[i].flag.out_flag) {
 21975  000C' 500F'              	movf	integrating@i,w,c
 21976  000E' 0D17               	mullw	23
 21977  0010' 0E16               	movlw	22
 21978  0012' 26F3               	addwf	prodl,f,c
 21979  0014' 0E00               	movlw	0
 21980  0016' 22F4               	addwfc	prodh,f,c
 21981  0018' 0E00'              	movlw	low _port
 21982  001A' 24F3               	addwf	prodl,w,c
 21983  001C' 6ED9               	movwf	fsr2l,c
 21984  001E' 0E00'              	movlw	high _port
 21985  0020' 20F4               	addwfc	prodh,w,c
 21986  0022' 6EDA               	movwf	fsr2h,c
 21987  0024' 0101               	movlb	1	; () banked
 21988  0026' A4DF               	btfss	indf2,2,c
 21989  0028' D055               	goto	i2l6463
 21990                           
 21991                           ; BSR set to: 1
 21992                           ;tasks.h: 201: port[i].integrated_current_sec += (uint32_t) (port[i].current);
 21993  002A' 500F'              	movf	integrating@i,w,c
 21994  002C' 0D17               	mullw	23
 21995  002E' 0E06               	movlw	6
 21996  0030' 26F3               	addwf	prodl,f,c
 21997  0032' 0E00               	movlw	0
 21998  0034' 22F4               	addwfc	prodh,f,c
 21999  0036' 0E00'              	movlw	low _port
 22000  0038' 24F3               	addwf	prodl,w,c
 22001  003A' 6ED9               	movwf	fsr2l,c
 22002  003C' 0E00'              	movlw	high _port
 22003  003E' 20F4               	addwfc	prodh,w,c
 22004  0040' 6EDA               	movwf	fsr2h,c
 22005  0042' CFDE F00D'         	movff	postinc2,??_integrating
 22006  0046' CFDD F00E'         	movff	postdec2,??_integrating+1
 22007  004A' 500F'              	movf	integrating@i,w,c
 22008  004C' 0D17               	mullw	23
 22009  004E' 0E08               	movlw	8
 22010  0050' 26F3               	addwf	prodl,f,c
 22011  0052' 0E00               	movlw	0
 22012  0054' 22F4               	addwfc	prodh,f,c
 22013  0056' 0E00'              	movlw	low _port
 22014  0058' 24F3               	addwf	prodl,w,c
 22015  005A' 6ED9               	movwf	fsr2l,c
 22016  005C' 0E00'              	movlw	high _port
 22017  005E' 20F4               	addwfc	prodh,w,c
 22018  0060' 6EDA               	movwf	fsr2h,c
 22019  0062' 500D'              	movf	??_integrating,w,c
 22020  0064' 26DE               	addwf	postinc2,f,c
 22021  0066' 500E'              	movf	??_integrating+1,w,c
 22022  0068' 22DE               	addwfc	postinc2,f,c
 22023  006A' 0E00               	movlw	0
 22024  006C' 22DE               	addwfc	postinc2,f,c
 22025  006E' 22DE               	addwfc	postinc2,f,c
 22026                           
 22027                           ; BSR set to: 1
 22028                           ;tasks.h: 202: (uint32_t) (port[i].integrated_current) = (uint32_t) (port[i].integrated_
      +                          current_sec) / 3600;
 22029  0070' 500F'              	movf	integrating@i,w,c
 22030  0072' 0D17               	mullw	23
 22031  0074' 0E08               	movlw	8
 22032  0076' 26F3               	addwf	prodl,f,c
 22033  0078' 0E00               	movlw	0
 22034  007A' 22F4               	addwfc	prodh,f,c
 22035  007C' 0E00'              	movlw	low _port
 22036  007E' 24F3               	addwf	prodl,w,c
 22037  0080' 6ED9               	movwf	fsr2l,c
 22038  0082' 0E00'              	movlw	high _port
 22039  0084' 20F4               	addwfc	prodh,w,c
 22040  0086' 6EDA               	movwf	fsr2h,c
 22041  0088' CFDE F000'         	movff	postinc2,i2___lldiv@dividend
 22042  008C' CFDE F001'         	movff	postinc2,i2___lldiv@dividend+1
 22043  0090' CFDE F002'         	movff	postinc2,i2___lldiv@dividend+2
 22044  0094' CFDE F003'         	movff	postinc2,i2___lldiv@dividend+3
 22045  0098' 0E10               	movlw	16
 22046  009A' 6E04'              	movwf	i2___lldiv@divisor,c
 22047  009C' 0E0E               	movlw	14
 22048  009E' 6E05'              	movwf	i2___lldiv@divisor+1,c
 22049  00A0' 0E00               	movlw	0
 22050  00A2' 6E06'              	movwf	i2___lldiv@divisor+2,c
 22051  00A4' 0E00               	movlw	0
 22052  00A6' 6E07'              	movwf	i2___lldiv@divisor+3,c
 22053  00A8' EC00' F000'        	call	i2___lldiv	;wreg free
 22054  00AC' 500F'              	movf	integrating@i,w,c
 22055  00AE' 0D17               	mullw	23
 22056  00B0' 0E0C               	movlw	12
 22057  00B2' 26F3               	addwf	prodl,f,c
 22058  00B4' 0E00               	movlw	0
 22059  00B6' 22F4               	addwfc	prodh,f,c
 22060  00B8' 0E00'              	movlw	low _port
 22061  00BA' 24F3               	addwf	prodl,w,c
 22062  00BC' 6ED9               	movwf	fsr2l,c
 22063  00BE' 0E00'              	movlw	high _port
 22064  00C0' 20F4               	addwfc	prodh,w,c
 22065  00C2' 6EDA               	movwf	fsr2h,c
 22066  00C4' C000' FFDE         	movff	?i2___lldiv,postinc2
 22067  00C8' C001' FFDE         	movff	?i2___lldiv+1,postinc2
 22068  00CC' C002' FFDE         	movff	?i2___lldiv+2,postinc2
 22069  00D0' C003' FFDE         	movff	?i2___lldiv+3,postinc2
 22070  00D4'                    i2l6463:
 22071  00D4' 2A0F'              	incf	integrating@i,f,c
 22072  00D6' D796               	goto	i2l6453
 22073  00D8'                    __end_of_integrating:
 22074                           	opt stack 0
 22075                           pclatu	equ	0xFFB
 22076                           pclath	equ	0xFFA
 22077                           tblptru	equ	0xFF8
 22078                           tblptrh	equ	0xFF7
 22079                           tblptrl	equ	0xFF6
 22080                           tablat	equ	0xFF5
 22081                           prodh	equ	0xFF4
 22082                           prodl	equ	0xFF3
 22083                           intcon	equ	0xFF2
 22084                           intcon2	equ	0xFF1
 22085                           indf0	equ	0xFEF
 22086                           postinc0	equ	0xFEE
 22087                           fsr0h	equ	0xFEA
 22088                           fsr0l	equ	0xFE9
 22089                           wreg	equ	0xFE8
 22090                           postinc1	equ	0xFE6
 22091                           postdec1	equ	0xFE5
 22092                           fsr1h	equ	0xFE2
 22093                           fsr1l	equ	0xFE1
 22094                           indf2	equ	0xFDF
 22095                           postinc2	equ	0xFDE
 22096                           postdec2	equ	0xFDD
 22097                           plusw2	equ	0xFDB
 22098                           fsr2h	equ	0xFDA
 22099                           fsr2l	equ	0xFD9
 22100                           status	equ	0xFD8
 22101                           
 22102 ;; *************** function i2___lldiv *****************
 22103 ;; Defined at:
 22104 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lldiv.c"
 22105 ;; Parameters:    Size  Location     Type
 22106 ;;  dividend        4    0[COMRAM] unsigned long 
 22107 ;;  divisor         4    4[COMRAM] unsigned long 
 22108 ;; Auto vars:     Size  Location     Type
 22109 ;;  __lldiv         4    8[COMRAM] unsigned long 
 22110 ;;  __lldiv         1   12[COMRAM] unsigned char 
 22111 ;; Return value:  Size  Location     Type
 22112 ;;                  4    0[COMRAM] unsigned long 
 22113 ;; Registers used:
 22114 ;;		wreg, status,2, status,0
 22115 ;; Tracked objects:
 22116 ;;		On entry : 0/0
 22117 ;;		On exit  : 0/0
 22118 ;;		Unchanged: 0/0
 22119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22120 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22121 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22123 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22124 ;;Total ram usage:       13 bytes
 22125 ;; Hardware stack levels used:    1
 22126 ;; This function calls:
 22127 ;;		Nothing
 22128 ;; This function is called by:
 22129 ;;		_integrating
 22130 ;; This function uses a non-reentrant model
 22131 ;;
 22132                           
 22133                           	psect	text90
 22134  0000'                    __ptext90:
 22135                           	opt stack 0
 22136  0000'                    i2___lldiv:
 22137                           	opt stack 19
 22138                           
 22139                           ;incstack = 0
 22140  0000' 0E00               	movlw	0
 22141  0002' 6E08'              	movwf	i2___lldiv@quotient,c
 22142  0004' 0E00               	movlw	0
 22143  0006' 6E09'              	movwf	i2___lldiv@quotient+1,c
 22144  0008' 0E00               	movlw	0
 22145  000A' 6E0A'              	movwf	i2___lldiv@quotient+2,c
 22146  000C' 0E00               	movlw	0
 22147  000E' 6E0B'              	movwf	i2___lldiv@quotient+3,c
 22148  0010' 5004'              	movf	i2___lldiv@divisor,w,c
 22149  0012' 1005'              	iorwf	i2___lldiv@divisor+1,w,c
 22150  0014' 1006'              	iorwf	i2___lldiv@divisor+2,w,c
 22151  0016' 1007'              	iorwf	i2___lldiv@divisor+3,w,c
 22152  0018' B4D8               	btfsc	status,2,c
 22153  001A' D02A               	goto	i2l1469
 22154  001C' 0E01               	movlw	1
 22155  001E' 6E0C'              	movwf	i2___lldiv@counter,c
 22156  0020' D006               	goto	i2l6289
 22157  0022'                    i2l6287:
 22158  0022' 90D8               	bcf	status,0,c
 22159  0024' 3604'              	rlcf	i2___lldiv@divisor,f,c
 22160  0026' 3605'              	rlcf	i2___lldiv@divisor+1,f,c
 22161  0028' 3606'              	rlcf	i2___lldiv@divisor+2,f,c
 22162  002A' 3607'              	rlcf	i2___lldiv@divisor+3,f,c
 22163  002C' 2A0C'              	incf	i2___lldiv@counter,f,c
 22164  002E'                    i2l6289:
 22165  002E' AE07'              	btfss	i2___lldiv@divisor+3,7,c
 22166  0030' D7F8               	goto	i2l6287
 22167  0032'                    i2l6291:
 22168  0032' 90D8               	bcf	status,0,c
 22169  0034' 3608'              	rlcf	i2___lldiv@quotient,f,c
 22170  0036' 3609'              	rlcf	i2___lldiv@quotient+1,f,c
 22171  0038' 360A'              	rlcf	i2___lldiv@quotient+2,f,c
 22172  003A' 360B'              	rlcf	i2___lldiv@quotient+3,f,c
 22173  003C' 5004'              	movf	i2___lldiv@divisor,w,c
 22174  003E' 5C00'              	subwf	i2___lldiv@dividend,w,c
 22175  0040' 5005'              	movf	i2___lldiv@divisor+1,w,c
 22176  0042' 5801'              	subwfb	i2___lldiv@dividend+1,w,c
 22177  0044' 5006'              	movf	i2___lldiv@divisor+2,w,c
 22178  0046' 5802'              	subwfb	i2___lldiv@dividend+2,w,c
 22179  0048' 5007'              	movf	i2___lldiv@divisor+3,w,c
 22180  004A' 5803'              	subwfb	i2___lldiv@dividend+3,w,c
 22181  004C' A0D8               	btfss	status,0,c
 22182  004E' D009               	goto	i2l6299
 22183  0050' 5004'              	movf	i2___lldiv@divisor,w,c
 22184  0052' 5E00'              	subwf	i2___lldiv@dividend,f,c
 22185  0054' 5005'              	movf	i2___lldiv@divisor+1,w,c
 22186  0056' 5A01'              	subwfb	i2___lldiv@dividend+1,f,c
 22187  0058' 5006'              	movf	i2___lldiv@divisor+2,w,c
 22188  005A' 5A02'              	subwfb	i2___lldiv@dividend+2,f,c
 22189  005C' 5007'              	movf	i2___lldiv@divisor+3,w,c
 22190  005E' 5A03'              	subwfb	i2___lldiv@dividend+3,f,c
 22191  0060' 8008'              	bsf	i2___lldiv@quotient,0,c
 22192  0062'                    i2l6299:
 22193  0062' 90D8               	bcf	status,0,c
 22194  0064' 3207'              	rrcf	i2___lldiv@divisor+3,f,c
 22195  0066' 3206'              	rrcf	i2___lldiv@divisor+2,f,c
 22196  0068' 3205'              	rrcf	i2___lldiv@divisor+1,f,c
 22197  006A' 3204'              	rrcf	i2___lldiv@divisor,f,c
 22198  006C' 2E0C'              	decfsz	i2___lldiv@counter,f,c
 22199  006E' D7E1               	goto	i2l6291
 22200  0070'                    i2l1469:
 22201  0070' C008' F000'        	movff	i2___lldiv@quotient,?i2___lldiv
 22202  0074' C009' F001'        	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 22203  0078' C00A' F002'        	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 22204  007C' C00B' F003'        	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 22205  0080' 0012               	return		;funcret
 22206  0082'                    __end_ofi2___lldiv:
 22207                           	opt stack 0
 22208                           pclatu	equ	0xFFB
 22209                           pclath	equ	0xFFA
 22210                           tblptru	equ	0xFF8
 22211                           tblptrh	equ	0xFF7
 22212                           tblptrl	equ	0xFF6
 22213                           tablat	equ	0xFF5
 22214                           prodh	equ	0xFF4
 22215                           prodl	equ	0xFF3
 22216                           intcon	equ	0xFF2
 22217                           intcon2	equ	0xFF1
 22218                           indf0	equ	0xFEF
 22219                           postinc0	equ	0xFEE
 22220                           fsr0h	equ	0xFEA
 22221                           fsr0l	equ	0xFE9
 22222                           wreg	equ	0xFE8
 22223                           postinc1	equ	0xFE6
 22224                           postdec1	equ	0xFE5
 22225                           fsr1h	equ	0xFE2
 22226                           fsr1l	equ	0xFE1
 22227                           indf2	equ	0xFDF
 22228                           postinc2	equ	0xFDE
 22229                           postdec2	equ	0xFDD
 22230                           plusw2	equ	0xFDB
 22231                           fsr2h	equ	0xFDA
 22232                           fsr2l	equ	0xFD9
 22233                           status	equ	0xFD8
 22234                           
 22235 ;; *************** function _delay_timer_interrupt *****************
 22236 ;; Defined at:
 22237 ;;		line 344 in file "../My_header\My_header.h"
 22238 ;; Parameters:    Size  Location     Type
 22239 ;;  d               2    0[COMRAM] PTR struct Delay
 22240 ;;		 -> delay_display(3), 
 22241 ;; Auto vars:     Size  Location     Type
 22242 ;;		None
 22243 ;; Return value:  Size  Location     Type
 22244 ;;		None               void
 22245 ;; Registers used:
 22246 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22247 ;; Tracked objects:
 22248 ;;		On entry : 0/0
 22249 ;;		On exit  : 0/0
 22250 ;;		Unchanged: 0/0
 22251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22252 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22254 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22255 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22256 ;;Total ram usage:        4 bytes
 22257 ;; Hardware stack levels used:    1
 22258 ;; This function calls:
 22259 ;;		Nothing
 22260 ;; This function is called by:
 22261 ;;		_ISR
 22262 ;; This function uses a non-reentrant model
 22263 ;;
 22264                           
 22265                           	psect	text91
 22266  0000'                    __ptext91:
 22267                           	opt stack 0
 22268  0000'                    _delay_timer_interrupt:
 22269                           	opt stack 20
 22270                           
 22271                           ;My_header\My_header.h: 345: if (d->cnt == 1)d->flag = 1;
 22272                           
 22273                           ;incstack = 0
 22274  0000' EE20 F001          	lfsr	2,1
 22275  0004' 5000'              	movf	delay_timer_interrupt@d,w,c
 22276  0006' 26D9               	addwf	fsr2l,f,c
 22277  0008' 5001'              	movf	delay_timer_interrupt@d+1,w,c
 22278  000A' 22DA               	addwfc	fsr2h,f,c
 22279  000C' 04DE               	decf	postinc2,w,c
 22280  000E' 10DE               	iorwf	postinc2,w,c
 22281  0010' A4D8               	btfss	status,2,c
 22282  0012' D006               	goto	i2l6333
 22283  0014' C000' FFD9         	movff	delay_timer_interrupt@d,fsr2l
 22284  0018' C001' FFDA         	movff	delay_timer_interrupt@d+1,fsr2h
 22285  001C' 0E01               	movlw	1
 22286  001E' 6EDF               	movwf	indf2,c
 22287  0020'                    i2l6333:
 22288                           
 22289                           ;My_header\My_header.h: 346: if (d->cnt)d->cnt--;
 22290  0020' EE20 F001          	lfsr	2,1
 22291  0024' 5000'              	movf	delay_timer_interrupt@d,w,c
 22292  0026' 26D9               	addwf	fsr2l,f,c
 22293  0028' 5001'              	movf	delay_timer_interrupt@d+1,w,c
 22294  002A' 22DA               	addwfc	fsr2h,f,c
 22295  002C' 50DE               	movf	postinc2,w,c
 22296  002E' 10DE               	iorwf	postinc2,w,c
 22297  0030' B4D8               	btfsc	status,2,c
 22298  0032' 0012               	return	
 22299  0034' EE20 F001          	lfsr	2,1
 22300  0038' 5000'              	movf	delay_timer_interrupt@d,w,c
 22301  003A' 26D9               	addwf	fsr2l,f,c
 22302  003C' 5001'              	movf	delay_timer_interrupt@d+1,w,c
 22303  003E' 22DA               	addwfc	fsr2h,f,c
 22304  0040' 06DE               	decf	postinc2,f,c
 22305  0042' 0E00               	movlw	0
 22306  0044' 5ADD               	subwfb	postdec2,f,c
 22307  0046' 0012               	return	
 22308  0048'                    __end_of_delay_timer_interrupt:
 22309                           	opt stack 0
 22310                           pclatu	equ	0xFFB
 22311                           pclath	equ	0xFFA
 22312                           tblptru	equ	0xFF8
 22313                           tblptrh	equ	0xFF7
 22314                           tblptrl	equ	0xFF6
 22315                           tablat	equ	0xFF5
 22316                           prodh	equ	0xFF4
 22317                           prodl	equ	0xFF3
 22318                           intcon	equ	0xFF2
 22319                           intcon2	equ	0xFF1
 22320                           indf0	equ	0xFEF
 22321                           postinc0	equ	0xFEE
 22322                           fsr0h	equ	0xFEA
 22323                           fsr0l	equ	0xFE9
 22324                           wreg	equ	0xFE8
 22325                           postinc1	equ	0xFE6
 22326                           postdec1	equ	0xFE5
 22327                           fsr1h	equ	0xFE2
 22328                           fsr1l	equ	0xFE1
 22329                           indf2	equ	0xFDF
 22330                           postinc2	equ	0xFDE
 22331                           postdec2	equ	0xFDD
 22332                           plusw2	equ	0xFDB
 22333                           fsr2h	equ	0xFDA
 22334                           fsr2l	equ	0xFD9
 22335                           status	equ	0xFD8
 22336                           
 22337 ;; *************** function _charge_time_count *****************
 22338 ;; Defined at:
 22339 ;;		line 207 in file "tasks.h"
 22340 ;; Parameters:    Size  Location     Type
 22341 ;;		None
 22342 ;; Auto vars:     Size  Location     Type
 22343 ;;  i               1    2[COMRAM] unsigned char 
 22344 ;; Return value:  Size  Location     Type
 22345 ;;		None               void
 22346 ;; Registers used:
 22347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22348 ;; Tracked objects:
 22349 ;;		On entry : 0/0
 22350 ;;		On exit  : 0/0
 22351 ;;		Unchanged: 0/0
 22352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22354 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22355 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22356 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22357 ;;Total ram usage:        3 bytes
 22358 ;; Hardware stack levels used:    1
 22359 ;; This function calls:
 22360 ;;		Nothing
 22361 ;; This function is called by:
 22362 ;;		_ISR
 22363 ;; This function uses a non-reentrant model
 22364 ;;
 22365                           
 22366                           	psect	text92
 22367  0000'                    __ptext92:
 22368                           	opt stack 0
 22369  0000'                    _charge_time_count:
 22370                           	opt stack 20
 22371                           
 22372                           ;tasks.h: 208: uint8_t i;
 22373                           ;tasks.h: 209: for (i = 0; i < 3; i++) {
 22374                           
 22375                           ;incstack = 0
 22376  0000' 0E00               	movlw	0
 22377  0002' 6E02'              	movwf	charge_time_count@i,c
 22378  0004'                    i2l6469:
 22379  0004' 0E02               	movlw	2
 22380  0006' 6402'              	cpfsgt	charge_time_count@i,c
 22381  0008' D001               	goto	i2l6473
 22382  000A' 0012               	return	
 22383  000C'                    i2l6473:
 22384                           
 22385                           ;tasks.h: 210: if (port[i].current > 100)port[i].integrated_time++;
 22386  000C' 5002'              	movf	charge_time_count@i,w,c
 22387  000E' 0D17               	mullw	23
 22388  0010' 0E06               	movlw	6
 22389  0012' 26F3               	addwf	prodl,f,c
 22390  0014' 0E00               	movlw	0
 22391  0016' 22F4               	addwfc	prodh,f,c
 22392  0018' 0E00'              	movlw	low _port
 22393  001A' 24F3               	addwf	prodl,w,c
 22394  001C' 6ED9               	movwf	fsr2l,c
 22395  001E' 0E00'              	movlw	high _port
 22396  0020' 20F4               	addwfc	prodh,w,c
 22397  0022' 6EDA               	movwf	fsr2h,c
 22398  0024' 0E01               	movlw	1
 22399  0026' 50DB               	movf	plusw2,w,c
 22400  0028' E104               	bnz	i2u752_40
 22401  002A' 0E65               	movlw	101
 22402  002C' 5CDE               	subwf	postinc2,w,c
 22403  002E' A0D8               	btfss	status,0,c
 22404  0030' D011               	goto	i2l6477
 22405  0032'                    i2u752_40:
 22406  0032' 5002'              	movf	charge_time_count@i,w,c
 22407  0034' 0D17               	mullw	23
 22408  0036' 0E10               	movlw	16
 22409  0038' 26F3               	addwf	prodl,f,c
 22410  003A' 0E00               	movlw	0
 22411  003C' 22F4               	addwfc	prodh,f,c
 22412  003E' 0E00'              	movlw	low _port
 22413  0040' 24F3               	addwf	prodl,w,c
 22414  0042' 6ED9               	movwf	fsr2l,c
 22415  0044' 0E00'              	movlw	high _port
 22416  0046' 20F4               	addwfc	prodh,w,c
 22417  0048' 6EDA               	movwf	fsr2h,c
 22418  004A' 2ADE               	incf	postinc2,f,c
 22419  004C' 0E00               	movlw	0
 22420  004E' 22DE               	addwfc	postinc2,f,c
 22421  0050' 22DE               	addwfc	postinc2,f,c
 22422  0052' 22DE               	addwfc	postinc2,f,c
 22423  0054'                    i2l6477:
 22424  0054' 2A02'              	incf	charge_time_count@i,f,c
 22425  0056' D7D6               	goto	i2l6469
 22426  0058'                    __end_of_charge_time_count:
 22427                           	opt stack 0
 22428                           pclatu	equ	0xFFB
 22429                           pclath	equ	0xFFA
 22430                           tblptru	equ	0xFF8
 22431                           tblptrh	equ	0xFF7
 22432                           tblptrl	equ	0xFF6
 22433                           tablat	equ	0xFF5
 22434                           prodh	equ	0xFF4
 22435                           prodl	equ	0xFF3
 22436                           intcon	equ	0xFF2
 22437                           intcon2	equ	0xFF1
 22438                           indf0	equ	0xFEF
 22439                           postinc0	equ	0xFEE
 22440                           fsr0h	equ	0xFEA
 22441                           fsr0l	equ	0xFE9
 22442                           wreg	equ	0xFE8
 22443                           postinc1	equ	0xFE6
 22444                           postdec1	equ	0xFE5
 22445                           fsr1h	equ	0xFE2
 22446                           fsr1l	equ	0xFE1
 22447                           indf2	equ	0xFDF
 22448                           postinc2	equ	0xFDE
 22449                           postdec2	equ	0xFDD
 22450                           plusw2	equ	0xFDB
 22451                           fsr2h	equ	0xFDA
 22452                           fsr2l	equ	0xFD9
 22453                           status	equ	0xFD8
 22454                           
 22455 ;; *************** function _LED_indicator *****************
 22456 ;; Defined at:
 22457 ;;		line 156 in file "tasks.h"
 22458 ;; Parameters:    Size  Location     Type
 22459 ;;		None
 22460 ;; Auto vars:     Size  Location     Type
 22461 ;;  i               1   11[COMRAM] unsigned char 
 22462 ;; Return value:  Size  Location     Type
 22463 ;;		None               void
 22464 ;; Registers used:
 22465 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22466 ;; Tracked objects:
 22467 ;;		On entry : 0/0
 22468 ;;		On exit  : 0/0
 22469 ;;		Unchanged: 0/0
 22470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22472 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22473 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22474 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22475 ;;Total ram usage:        4 bytes
 22476 ;; Hardware stack levels used:    1
 22477 ;; Hardware stack levels required when called:    1
 22478 ;; This function calls:
 22479 ;;		i2_LED_OUT
 22480 ;;		i2___awdiv
 22481 ;;		i2___lwdiv
 22482 ;; This function is called by:
 22483 ;;		_ISR
 22484 ;; This function uses a non-reentrant model
 22485 ;;
 22486                           
 22487                           	psect	text93
 22488  0000'                    __ptext93:
 22489                           	opt stack 0
 22490  0000'                    _LED_indicator:
 22491                           	opt stack 19
 22492                           
 22493                           ;tasks.h: 157: uint8_t i;
 22494                           ;tasks.h: 158: static uint8_t cnt[3];
 22495                           ;tasks.h: 159: static uint8_t cntf[3];
 22496                           ;tasks.h: 160: for (i = 0; i < 3; i++) {
 22497                           
 22498                           ;incstack = 0
 22499  0000' 0E00               	movlw	0
 22500  0002' 6E0B'              	movwf	LED_indicator@i,c
 22501  0004'                    i2l6423:
 22502  0004' 0E02               	movlw	2
 22503  0006' 640B'              	cpfsgt	LED_indicator@i,c
 22504  0008' D001               	goto	i2l6427
 22505  000A' 0012               	return	
 22506  000C'                    i2l6427:
 22507                           
 22508                           ;tasks.h: 162: if (port[i].flag.led_indicator_ON) {
 22509  000C' 500B'              	movf	LED_indicator@i,w,c
 22510  000E' 0D17               	mullw	23
 22511  0010' 0E16               	movlw	22
 22512  0012' 26F3               	addwf	prodl,f,c
 22513  0014' 0E00               	movlw	0
 22514  0016' 22F4               	addwfc	prodh,f,c
 22515  0018' 0E00'              	movlw	low _port
 22516  001A' 24F3               	addwf	prodl,w,c
 22517  001C' 6ED9               	movwf	fsr2l,c
 22518  001E' 0E00'              	movlw	high _port
 22519  0020' 20F4               	addwfc	prodh,w,c
 22520  0022' 6EDA               	movwf	fsr2h,c
 22521  0024' 0101               	movlb	1	; () banked
 22522  0026' A2DF               	btfss	indf2,1,c
 22523  0028' D07B               	goto	i2l6447
 22524                           
 22525                           ; BSR set to: 1
 22526                           ;tasks.h: 163: cnt[i]++;
 22527  002A' 500B'              	movf	LED_indicator@i,w,c
 22528  002C' 0D01               	mullw	1
 22529  002E' 0E00'              	movlw	low LED_indicator@cnt
 22530  0030' 24F3               	addwf	prodl,w,c
 22531  0032' 6ED9               	movwf	fsr2l,c
 22532  0034' 0E00'              	movlw	high LED_indicator@cnt
 22533  0036' 20F4               	addwfc	prodh,w,c
 22534  0038' 6EDA               	movwf	fsr2h,c
 22535  003A' 2ADF               	incf	indf2,f,c
 22536                           
 22537                           ;tasks.h: 164: if (cnt[i] % 2 == 1) {
 22538  003C' 500B'              	movf	LED_indicator@i,w,c
 22539  003E' 0D01               	mullw	1
 22540  0040' 0E00'              	movlw	low LED_indicator@cnt
 22541  0042' 24F3               	addwf	prodl,w,c
 22542  0044' 6ED9               	movwf	fsr2l,c
 22543  0046' 0E00'              	movlw	high LED_indicator@cnt
 22544  0048' 20F4               	addwfc	prodh,w,c
 22545  004A' 6EDA               	movwf	fsr2h,c
 22546  004C' A0DF               	btfss	indf2,0,c
 22547  004E' D006               	goto	i2l6433
 22548                           
 22549                           ; BSR set to: 1
 22550                           ;tasks.h: 165: LED_OUT(i, 0);
 22551  0050' 0E00               	movlw	0
 22552  0052' 6E00'              	movwf	i2LED_OUT@value,c
 22553  0054' 500B'              	movf	LED_indicator@i,w,c
 22554  0056' EC00' F000'        	call	i2_LED_OUT
 22555                           
 22556                           ;tasks.h: 166: } else {
 22557  005A' D062               	goto	i2l6447
 22558  005C'                    i2l6433:
 22559                           
 22560                           ;tasks.h: 167: if (cnt[i] / 2 <= port[i].current / 100) {
 22561  005C' 500B'              	movf	LED_indicator@i,w,c
 22562  005E' 0D17               	mullw	23
 22563  0060' 0E06               	movlw	6
 22564  0062' 26F3               	addwf	prodl,f,c
 22565  0064' 0E00               	movlw	0
 22566  0066' 22F4               	addwfc	prodh,f,c
 22567  0068' 0E00'              	movlw	low _port
 22568  006A' 24F3               	addwf	prodl,w,c
 22569  006C' 6ED9               	movwf	fsr2l,c
 22570  006E' 0E00'              	movlw	high _port
 22571  0070' 20F4               	addwfc	prodh,w,c
 22572  0072' 6EDA               	movwf	fsr2h,c
 22573  0074' CFDE F000'         	movff	postinc2,i2___lwdiv@dividend
 22574  0078' CFDD F001'         	movff	postdec2,i2___lwdiv@dividend+1
 22575  007C' 0E00               	movlw	0
 22576  007E' 6E03'              	movwf	i2___lwdiv@divisor+1,c
 22577  0080' 0E64               	movlw	100
 22578  0082' 6E02'              	movwf	i2___lwdiv@divisor,c
 22579  0084' EC00' F000'        	call	i2___lwdiv	;wreg free
 22580  0088' C000' F008'        	movff	?i2___lwdiv,??_LED_indicator
 22581  008C' C001' F009'        	movff	?i2___lwdiv+1,??_LED_indicator+1
 22582  0090' 500B'              	movf	LED_indicator@i,w,c
 22583  0092' 0D01               	mullw	1
 22584  0094' 0E00'              	movlw	low LED_indicator@cnt
 22585  0096' 24F3               	addwf	prodl,w,c
 22586  0098' 6ED9               	movwf	fsr2l,c
 22587  009A' 0E00'              	movlw	high LED_indicator@cnt
 22588  009C' 20F4               	addwfc	prodh,w,c
 22589  009E' 6EDA               	movwf	fsr2h,c
 22590  00A0' 50DF               	movf	indf2,w,c
 22591  00A2' 6E00'              	movwf	(??_LED_indicator+2)& (0+255),c
 22592  00A4' 500A'              	movf	??_LED_indicator+2,w,c
 22593  00A6' 6E00'              	movwf	i2___awdiv@dividend,c
 22594  00A8' 6A01'              	clrf	i2___awdiv@dividend+1,c
 22595  00AA' 0E00               	movlw	0
 22596  00AC' 6E03'              	movwf	i2___awdiv@divisor+1,c
 22597  00AE' 0E02               	movlw	2
 22598  00B0' 6E02'              	movwf	i2___awdiv@divisor,c
 22599  00B2' EC00' F000'        	call	i2___awdiv	;wreg free
 22600  00B6' 5000'              	movf	?i2___awdiv,w,c
 22601  00B8' 5C08'              	subwf	??_LED_indicator,w,c
 22602  00BA' 5001'              	movf	?i2___awdiv+1,w,c
 22603  00BC' 5809'              	subwfb	??_LED_indicator+1,w,c
 22604  00BE' A0D8               	btfss	status,0,c
 22605  00C0' D00C               	goto	i2l6439
 22606                           
 22607                           ;tasks.h: 168: LED_OUT(i, 1);
 22608  00C2' 0E01               	movlw	1
 22609  00C4' 6E00'              	movwf	i2LED_OUT@value,c
 22610  00C6' 500B'              	movf	LED_indicator@i,w,c
 22611  00C8' EC00' F000'        	call	i2_LED_OUT
 22612                           
 22613                           ;tasks.h: 169: cntf[i] = 0;
 22614  00CC' 500B'              	movf	LED_indicator@i,w,c
 22615  00CE' 0D01               	mullw	1
 22616  00D0' 0E00'              	movlw	low LED_indicator@cntf
 22617  00D2' 24F3               	addwf	prodl,w,c
 22618  00D4' 6ED9               	movwf	fsr2l,c
 22619  00D6' 0E00'              	movlw	high LED_indicator@cntf
 22620  00D8' D01F               	goto	L3
 22621  00DA'                    i2l6439:
 22622                           
 22623                           ;tasks.h: 171: cntf[i]++;
 22624  00DA' 500B'              	movf	LED_indicator@i,w,c
 22625  00DC' 0D01               	mullw	1
 22626  00DE' 0E00'              	movlw	low LED_indicator@cntf
 22627  00E0' 24F3               	addwf	prodl,w,c
 22628  00E2' 6ED9               	movwf	fsr2l,c
 22629  00E4' 0E00'              	movlw	high LED_indicator@cntf
 22630  00E6' 20F4               	addwfc	prodh,w,c
 22631  00E8' 6EDA               	movwf	fsr2h,c
 22632  00EA' 2ADF               	incf	indf2,f,c
 22633                           
 22634                           ;tasks.h: 172: LED_OUT(i, 0);
 22635  00EC' 0E00               	movlw	0
 22636  00EE' 6E00'              	movwf	i2LED_OUT@value,c
 22637  00F0' 500B'              	movf	LED_indicator@i,w,c
 22638  00F2' EC00' F000'        	call	i2_LED_OUT
 22639                           
 22640                           ;tasks.h: 173: if (cntf[i] >= 2) {
 22641  00F6' 500B'              	movf	LED_indicator@i,w,c
 22642  00F8' 0D01               	mullw	1
 22643  00FA' 0E00'              	movlw	low LED_indicator@cntf
 22644  00FC' 24F3               	addwf	prodl,w,c
 22645  00FE' 6ED9               	movwf	fsr2l,c
 22646  0100' 0E00'              	movlw	high LED_indicator@cntf
 22647  0102' 20F4               	addwfc	prodh,w,c
 22648  0104' 6EDA               	movwf	fsr2h,c
 22649  0106' 0E01               	movlw	1
 22650  0108' 64DF               	cpfsgt	indf2,c
 22651  010A' D00A               	goto	i2l6447
 22652                           
 22653                           ;tasks.h: 174: cnt[i] = 0;
 22654  010C' 500B'              	movf	LED_indicator@i,w,c
 22655  010E' 0D01               	mullw	1
 22656  0110' 0E00'              	movlw	low LED_indicator@cnt
 22657  0112' 24F3               	addwf	prodl,w,c
 22658  0114' 6ED9               	movwf	fsr2l,c
 22659  0116' 0E00'              	movlw	high LED_indicator@cnt
 22660  0118'                    L3:
 22661  0118' 20F4               	addwfc	prodh,w,c
 22662  011A' 6EDA               	movwf	fsr2h,c
 22663  011C' 0E00               	movlw	0
 22664  011E' 6EDF               	movwf	indf2,c
 22665  0120'                    i2l6447:
 22666  0120' 2A0B'              	incf	LED_indicator@i,f,c
 22667  0122' D770               	goto	i2l6423
 22668  0124'                    __end_of_LED_indicator:
 22669                           	opt stack 0
 22670                           pclatu	equ	0xFFB
 22671                           pclath	equ	0xFFA
 22672                           tblptru	equ	0xFF8
 22673                           tblptrh	equ	0xFF7
 22674                           tblptrl	equ	0xFF6
 22675                           tablat	equ	0xFF5
 22676                           prodh	equ	0xFF4
 22677                           prodl	equ	0xFF3
 22678                           intcon	equ	0xFF2
 22679                           intcon2	equ	0xFF1
 22680                           indf0	equ	0xFEF
 22681                           postinc0	equ	0xFEE
 22682                           fsr0h	equ	0xFEA
 22683                           fsr0l	equ	0xFE9
 22684                           wreg	equ	0xFE8
 22685                           postinc1	equ	0xFE6
 22686                           postdec1	equ	0xFE5
 22687                           fsr1h	equ	0xFE2
 22688                           fsr1l	equ	0xFE1
 22689                           indf2	equ	0xFDF
 22690                           postinc2	equ	0xFDE
 22691                           postdec2	equ	0xFDD
 22692                           plusw2	equ	0xFDB
 22693                           fsr2h	equ	0xFDA
 22694                           fsr2l	equ	0xFD9
 22695                           status	equ	0xFD8
 22696                           
 22697 ;; *************** function i2___lwdiv *****************
 22698 ;; Defined at:
 22699 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
 22700 ;; Parameters:    Size  Location     Type
 22701 ;;  dividend        2    0[COMRAM] unsigned int 
 22702 ;;  divisor         2    2[COMRAM] unsigned int 
 22703 ;; Auto vars:     Size  Location     Type
 22704 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 22705 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 22706 ;; Return value:  Size  Location     Type
 22707 ;;                  2    0[COMRAM] unsigned int 
 22708 ;; Registers used:
 22709 ;;		wreg, status,2, status,0
 22710 ;; Tracked objects:
 22711 ;;		On entry : 0/0
 22712 ;;		On exit  : 0/0
 22713 ;;		Unchanged: 0/0
 22714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22715 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22716 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22718 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22719 ;;Total ram usage:        7 bytes
 22720 ;; Hardware stack levels used:    1
 22721 ;; This function calls:
 22722 ;;		Nothing
 22723 ;; This function is called by:
 22724 ;;		_LED_indicator
 22725 ;; This function uses a non-reentrant model
 22726 ;;
 22727                           
 22728                           	psect	text94
 22729  0000'                    __ptext94:
 22730                           	opt stack 0
 22731  0000'                    i2___lwdiv:
 22732                           	opt stack 19
 22733                           
 22734                           ;incstack = 0
 22735  0000' 0E00               	movlw	0
 22736  0002' 6E05'              	movwf	i2___lwdiv@quotient+1,c
 22737  0004' 0E00               	movlw	0
 22738  0006' 6E04'              	movwf	i2___lwdiv@quotient,c
 22739  0008' 5002'              	movf	i2___lwdiv@divisor,w,c
 22740  000A' 1003'              	iorwf	i2___lwdiv@divisor+1,w,c
 22741  000C' B4D8               	btfsc	status,2,c
 22742  000E' D01C               	goto	i2l1522
 22743  0010' 0E01               	movlw	1
 22744  0012' 6E06'              	movwf	i2___lwdiv@counter,c
 22745  0014' D004               	goto	i2l6311
 22746  0016'                    i2l6309:
 22747  0016' 90D8               	bcf	status,0,c
 22748  0018' 3602'              	rlcf	i2___lwdiv@divisor,f,c
 22749  001A' 3603'              	rlcf	i2___lwdiv@divisor+1,f,c
 22750  001C' 2A06'              	incf	i2___lwdiv@counter,f,c
 22751  001E'                    i2l6311:
 22752  001E' AE03'              	btfss	i2___lwdiv@divisor+1,7,c
 22753  0020' D7FA               	goto	i2l6309
 22754  0022'                    i2l6313:
 22755  0022' 90D8               	bcf	status,0,c
 22756  0024' 3604'              	rlcf	i2___lwdiv@quotient,f,c
 22757  0026' 3605'              	rlcf	i2___lwdiv@quotient+1,f,c
 22758  0028' 5002'              	movf	i2___lwdiv@divisor,w,c
 22759  002A' 5C00'              	subwf	i2___lwdiv@dividend,w,c
 22760  002C' 5003'              	movf	i2___lwdiv@divisor+1,w,c
 22761  002E' 5801'              	subwfb	i2___lwdiv@dividend+1,w,c
 22762  0030' A0D8               	btfss	status,0,c
 22763  0032' D005               	goto	i2l6321
 22764  0034' 5002'              	movf	i2___lwdiv@divisor,w,c
 22765  0036' 5E00'              	subwf	i2___lwdiv@dividend,f,c
 22766  0038' 5003'              	movf	i2___lwdiv@divisor+1,w,c
 22767  003A' 5A01'              	subwfb	i2___lwdiv@dividend+1,f,c
 22768  003C' 8004'              	bsf	i2___lwdiv@quotient,0,c
 22769  003E'                    i2l6321:
 22770  003E' 90D8               	bcf	status,0,c
 22771  0040' 3203'              	rrcf	i2___lwdiv@divisor+1,f,c
 22772  0042' 3202'              	rrcf	i2___lwdiv@divisor,f,c
 22773  0044' 2E06'              	decfsz	i2___lwdiv@counter,f,c
 22774  0046' D7ED               	goto	i2l6313
 22775  0048'                    i2l1522:
 22776  0048' C004' F000'        	movff	i2___lwdiv@quotient,?i2___lwdiv
 22777  004C' C005' F001'        	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 22778  0050' 0012               	return		;funcret
 22779  0052'                    __end_ofi2___lwdiv:
 22780                           	opt stack 0
 22781                           pclatu	equ	0xFFB
 22782                           pclath	equ	0xFFA
 22783                           tblptru	equ	0xFF8
 22784                           tblptrh	equ	0xFF7
 22785                           tblptrl	equ	0xFF6
 22786                           tablat	equ	0xFF5
 22787                           prodh	equ	0xFF4
 22788                           prodl	equ	0xFF3
 22789                           intcon	equ	0xFF2
 22790                           intcon2	equ	0xFF1
 22791                           indf0	equ	0xFEF
 22792                           postinc0	equ	0xFEE
 22793                           fsr0h	equ	0xFEA
 22794                           fsr0l	equ	0xFE9
 22795                           wreg	equ	0xFE8
 22796                           postinc1	equ	0xFE6
 22797                           postdec1	equ	0xFE5
 22798                           fsr1h	equ	0xFE2
 22799                           fsr1l	equ	0xFE1
 22800                           indf2	equ	0xFDF
 22801                           postinc2	equ	0xFDE
 22802                           postdec2	equ	0xFDD
 22803                           plusw2	equ	0xFDB
 22804                           fsr2h	equ	0xFDA
 22805                           fsr2l	equ	0xFD9
 22806                           status	equ	0xFD8
 22807                           
 22808 ;; *************** function i2___awdiv *****************
 22809 ;; Defined at:
 22810 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
 22811 ;; Parameters:    Size  Location     Type
 22812 ;;  dividend        2    0[COMRAM] int 
 22813 ;;  divisor         2    2[COMRAM] int 
 22814 ;; Auto vars:     Size  Location     Type
 22815 ;;  __awdiv         2    6[COMRAM] int 
 22816 ;;  __awdiv         1    5[COMRAM] unsigned char 
 22817 ;;  __awdiv         1    4[COMRAM] unsigned char 
 22818 ;; Return value:  Size  Location     Type
 22819 ;;                  2    0[COMRAM] int 
 22820 ;; Registers used:
 22821 ;;		wreg, status,2, status,0
 22822 ;; Tracked objects:
 22823 ;;		On entry : 0/0
 22824 ;;		On exit  : 0/0
 22825 ;;		Unchanged: 0/0
 22826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22827 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22828 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22830 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22831 ;;Total ram usage:        8 bytes
 22832 ;; Hardware stack levels used:    1
 22833 ;; This function calls:
 22834 ;;		Nothing
 22835 ;; This function is called by:
 22836 ;;		_LED_indicator
 22837 ;; This function uses a non-reentrant model
 22838 ;;
 22839                           
 22840                           	psect	text95
 22841  0000'                    __ptext95:
 22842                           	opt stack 0
 22843  0000'                    i2___awdiv:
 22844                           	opt stack 19
 22845                           
 22846                           ;incstack = 0
 22847  0000' 0E00               	movlw	0
 22848  0002' 6E05'              	movwf	i2___awdiv@sign,c
 22849  0004' AE03'              	btfss	i2___awdiv@divisor+1,7,c
 22850  0006' D006               	goto	i2l6245
 22851  0008' 6C02'              	negf	i2___awdiv@divisor,c
 22852  000A' 1E03'              	comf	i2___awdiv@divisor+1,f,c
 22853  000C' B0D8               	btfsc	status,0,c
 22854  000E' 2A03'              	incf	i2___awdiv@divisor+1,f,c
 22855  0010' 0E01               	movlw	1
 22856  0012' 6E05'              	movwf	i2___awdiv@sign,c
 22857  0014'                    i2l6245:
 22858  0014' AE01'              	btfss	i2___awdiv@dividend+1,7,c
 22859  0016' D006               	goto	i2l6251
 22860  0018' 6C00'              	negf	i2___awdiv@dividend,c
 22861  001A' 1E01'              	comf	i2___awdiv@dividend+1,f,c
 22862  001C' B0D8               	btfsc	status,0,c
 22863  001E' 2A01'              	incf	i2___awdiv@dividend+1,f,c
 22864  0020' 0E01               	movlw	1
 22865  0022' 1A05'              	xorwf	i2___awdiv@sign,f,c
 22866  0024'                    i2l6251:
 22867  0024' 0E00               	movlw	0
 22868  0026' 6E07'              	movwf	i2___awdiv@quotient+1,c
 22869  0028' 0E00               	movlw	0
 22870  002A' 6E06'              	movwf	i2___awdiv@quotient,c
 22871  002C' 5002'              	movf	i2___awdiv@divisor,w,c
 22872  002E' 1003'              	iorwf	i2___awdiv@divisor+1,w,c
 22873  0030' B4D8               	btfsc	status,2,c
 22874  0032' D01C               	goto	i2l6273
 22875  0034' 0E01               	movlw	1
 22876  0036' 6E04'              	movwf	i2___awdiv@counter,c
 22877  0038' D004               	goto	i2l6259
 22878  003A'                    i2l6257:
 22879  003A' 90D8               	bcf	status,0,c
 22880  003C' 3602'              	rlcf	i2___awdiv@divisor,f,c
 22881  003E' 3603'              	rlcf	i2___awdiv@divisor+1,f,c
 22882  0040' 2A04'              	incf	i2___awdiv@counter,f,c
 22883  0042'                    i2l6259:
 22884  0042' AE03'              	btfss	i2___awdiv@divisor+1,7,c
 22885  0044' D7FA               	goto	i2l6257
 22886  0046'                    i2l6261:
 22887  0046' 90D8               	bcf	status,0,c
 22888  0048' 3606'              	rlcf	i2___awdiv@quotient,f,c
 22889  004A' 3607'              	rlcf	i2___awdiv@quotient+1,f,c
 22890  004C' 5002'              	movf	i2___awdiv@divisor,w,c
 22891  004E' 5C00'              	subwf	i2___awdiv@dividend,w,c
 22892  0050' 5003'              	movf	i2___awdiv@divisor+1,w,c
 22893  0052' 5801'              	subwfb	i2___awdiv@dividend+1,w,c
 22894  0054' A0D8               	btfss	status,0,c
 22895  0056' D005               	goto	i2l6269
 22896  0058' 5002'              	movf	i2___awdiv@divisor,w,c
 22897  005A' 5E00'              	subwf	i2___awdiv@dividend,f,c
 22898  005C' 5003'              	movf	i2___awdiv@divisor+1,w,c
 22899  005E' 5A01'              	subwfb	i2___awdiv@dividend+1,f,c
 22900  0060' 8006'              	bsf	i2___awdiv@quotient,0,c
 22901  0062'                    i2l6269:
 22902  0062' 90D8               	bcf	status,0,c
 22903  0064' 3203'              	rrcf	i2___awdiv@divisor+1,f,c
 22904  0066' 3202'              	rrcf	i2___awdiv@divisor,f,c
 22905  0068' 2E04'              	decfsz	i2___awdiv@counter,f,c
 22906  006A' D7ED               	goto	i2l6261
 22907  006C'                    i2l6273:
 22908  006C' 5005'              	movf	i2___awdiv@sign,w,c
 22909  006E' B4D8               	btfsc	status,2,c
 22910  0070' D004               	goto	i2l6277
 22911  0072' 6C06'              	negf	i2___awdiv@quotient,c
 22912  0074' 1E07'              	comf	i2___awdiv@quotient+1,f,c
 22913  0076' B0D8               	btfsc	status,0,c
 22914  0078' 2A07'              	incf	i2___awdiv@quotient+1,f,c
 22915  007A'                    i2l6277:
 22916  007A' C006' F000'        	movff	i2___awdiv@quotient,?i2___awdiv
 22917  007E' C007' F001'        	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 22918  0082' 0012               	return	
 22919  0084'                    __end_ofi2___awdiv:
 22920                           	opt stack 0
 22921                           pclatu	equ	0xFFB
 22922                           pclath	equ	0xFFA
 22923                           tblptru	equ	0xFF8
 22924                           tblptrh	equ	0xFF7
 22925                           tblptrl	equ	0xFF6
 22926                           tablat	equ	0xFF5
 22927                           prodh	equ	0xFF4
 22928                           prodl	equ	0xFF3
 22929                           intcon	equ	0xFF2
 22930                           intcon2	equ	0xFF1
 22931                           indf0	equ	0xFEF
 22932                           postinc0	equ	0xFEE
 22933                           fsr0h	equ	0xFEA
 22934                           fsr0l	equ	0xFE9
 22935                           wreg	equ	0xFE8
 22936                           postinc1	equ	0xFE6
 22937                           postdec1	equ	0xFE5
 22938                           fsr1h	equ	0xFE2
 22939                           fsr1l	equ	0xFE1
 22940                           indf2	equ	0xFDF
 22941                           postinc2	equ	0xFDE
 22942                           postdec2	equ	0xFDD
 22943                           plusw2	equ	0xFDB
 22944                           fsr2h	equ	0xFDA
 22945                           fsr2l	equ	0xFD9
 22946                           status	equ	0xFD8
 22947                           
 22948 ;; *************** function i2_LED_OUT *****************
 22949 ;; Defined at:
 22950 ;;		line 140 in file "tasks.h"
 22951 ;; Parameters:    Size  Location     Type
 22952 ;;  b               1    wreg     unsigned char 
 22953 ;;  value           1    0[COMRAM] unsigned char 
 22954 ;; Auto vars:     Size  Location     Type
 22955 ;;  b               1    1[COMRAM] unsigned char 
 22956 ;; Return value:  Size  Location     Type
 22957 ;;		None               void
 22958 ;; Registers used:
 22959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22960 ;; Tracked objects:
 22961 ;;		On entry : 0/0
 22962 ;;		On exit  : 0/0
 22963 ;;		Unchanged: 0/0
 22964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22965 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22966 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22968 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22969 ;;Total ram usage:        2 bytes
 22970 ;; Hardware stack levels used:    1
 22971 ;; This function calls:
 22972 ;;		Nothing
 22973 ;; This function is called by:
 22974 ;;		_LED_indicator
 22975 ;; This function uses a non-reentrant model
 22976 ;;
 22977                           
 22978                           	psect	text96
 22979  0000'                    __ptext96:
 22980                           	opt stack 0
 22981  0000'                    i2_LED_OUT:
 22982                           	opt stack 19
 22983                           
 22984                           ;incstack = 0
 22985                           ;i2LED_OUT@b stored from wreg
 22986  0000' 6E01'              	movwf	i2LED_OUT@b,c
 22987                           
 22988                           ;tasks.h: 141: port[b].flag.led_flag = value;
 22989  0002' 5001'              	movf	i2LED_OUT@b,w,c
 22990  0004' 0D17               	mullw	23
 22991  0006' 0E16               	movlw	22
 22992  0008' 26F3               	addwf	prodl,f,c
 22993  000A' 0E00               	movlw	0
 22994  000C' 22F4               	addwfc	prodh,f,c
 22995  000E' 0E00'              	movlw	low _port
 22996  0010' 24F3               	addwf	prodl,w,c
 22997  0012' 6ED9               	movwf	fsr2l,c
 22998  0014' 0E00'              	movlw	high _port
 22999  0016' 20F4               	addwfc	prodh,w,c
 23000  0018' 6EDA               	movwf	fsr2h,c
 23001  001A' B000'              	btfsc	i2LED_OUT@value,0,c
 23002  001C' D003               	bra	i2u710_45
 23003  001E' 0101               	movlb	1	; () banked
 23004  0020' 96DF               	bcf	indf2,3,c
 23005  0022' D002               	bra	i2u710_46
 23006  0024'                    i2u710_45:
 23007  0024' 0101               	movlb	1	; () banked
 23008  0026' 86DF               	bsf	indf2,3,c
 23009  0028'                    i2u710_46:
 23010                           
 23011                           ;tasks.h: 142: switch (b) {
 23012  0028' D012               	goto	i2l6235
 23013  002A'                    i2l711:
 23014                           
 23015                           ;tasks.h: 144: LATB7 = value;
 23016  002A' A000'              	btfss	i2LED_OUT@value,0,c
 23017  002C' D002               	goto	i2u711_40
 23018  002E' 8E8A               	bsf	3978,7,c	;volatile
 23019  0030' 0012               	return	
 23020  0032'                    i2u711_40:
 23021  0032' 9E8A               	bcf	3978,7,c	;volatile
 23022                           
 23023                           ;tasks.h: 145: break;
 23024  0034' 0012               	return	
 23025  0036'                    i2l713:
 23026                           
 23027                           ;tasks.h: 147: LATB6 = value;
 23028  0036' A000'              	btfss	i2LED_OUT@value,0,c
 23029  0038' D002               	goto	i2u713_40
 23030  003A' 8C8A               	bsf	3978,6,c	;volatile
 23031  003C' 0012               	return	
 23032  003E'                    i2u713_40:
 23033  003E' 9C8A               	bcf	3978,6,c	;volatile
 23034                           
 23035                           ;tasks.h: 148: break;
 23036  0040' 0012               	return	
 23037  0042'                    i2l714:
 23038                           
 23039                           ;tasks.h: 150: LATC2 = value;
 23040  0042' A000'              	btfss	i2LED_OUT@value,0,c
 23041  0044' D002               	goto	i2u715_40
 23042  0046' 848B               	bsf	3979,2,c	;volatile
 23043  0048' 0012               	return	
 23044  004A'                    i2u715_40:
 23045  004A' 948B               	bcf	3979,2,c	;volatile
 23046                           
 23047                           ;tasks.h: 152: }
 23048                           
 23049                           ;tasks.h: 151: break;
 23050  004C' 0012               	return	
 23051  004E'                    i2l6235:
 23052  004E' 5001'              	movf	i2LED_OUT@b,w,c
 23053                           
 23054                           ; Switch size 1, requested type "space"
 23055                           ; Number of cases is 3, Range of values is 0 to 2
 23056                           ; switch strategies available:
 23057                           ; Name         Instructions Cycles
 23058                           ; simple_byte           10     6 (average)
 23059                           ;	Chosen strategy is simple_byte
 23060  0050' 0A00               	xorlw	0	; case 0
 23061  0052' B4D8               	btfsc	status,2,c
 23062  0054' D7EA               	goto	i2l711
 23063  0056' 0A01               	xorlw	1	; case 1
 23064  0058' B4D8               	btfsc	status,2,c
 23065  005A' D7ED               	goto	i2l713
 23066  005C' 0A03               	xorlw	3	; case 2
 23067  005E' A4D8               	btfss	status,2,c
 23068  0060' 0012               	return	
 23069  0062' D7EF               	goto	i2l714
 23070  0064'                    __end_ofi2_LED_OUT:
 23071                           	opt stack 0
 23072                           pclatu	equ	0xFFB
 23073                           pclath	equ	0xFFA
 23074                           tblptru	equ	0xFF8
 23075                           tblptrh	equ	0xFF7
 23076                           tblptrl	equ	0xFF6
 23077                           tablat	equ	0xFF5
 23078                           prodh	equ	0xFF4
 23079                           prodl	equ	0xFF3
 23080                           intcon	equ	0xFF2
 23081                           intcon2	equ	0xFF1
 23082                           indf0	equ	0xFEF
 23083                           postinc0	equ	0xFEE
 23084                           fsr0h	equ	0xFEA
 23085                           fsr0l	equ	0xFE9
 23086                           wreg	equ	0xFE8
 23087                           postinc1	equ	0xFE6
 23088                           postdec1	equ	0xFE5
 23089                           fsr1h	equ	0xFE2
 23090                           fsr1l	equ	0xFE1
 23091                           indf2	equ	0xFDF
 23092                           postinc2	equ	0xFDE
 23093                           postdec2	equ	0xFDD
 23094                           plusw2	equ	0xFDB
 23095                           fsr2h	equ	0xFDA
 23096                           fsr2l	equ	0xFD9
 23097                           status	equ	0xFD8
 23098                           pclatu	equ	0xFFB
 23099                           pclath	equ	0xFFA
 23100                           tblptru	equ	0xFF8
 23101                           tblptrh	equ	0xFF7
 23102                           tblptrl	equ	0xFF6
 23103                           tablat	equ	0xFF5
 23104                           prodh	equ	0xFF4
 23105                           prodl	equ	0xFF3
 23106                           intcon	equ	0xFF2
 23107                           intcon2	equ	0xFF1
 23108                           indf0	equ	0xFEF
 23109                           postinc0	equ	0xFEE
 23110                           fsr0h	equ	0xFEA
 23111                           fsr0l	equ	0xFE9
 23112                           wreg	equ	0xFE8
 23113                           postinc1	equ	0xFE6
 23114                           postdec1	equ	0xFE5
 23115                           fsr1h	equ	0xFE2
 23116                           fsr1l	equ	0xFE1
 23117                           indf2	equ	0xFDF
 23118                           postinc2	equ	0xFDE
 23119                           postdec2	equ	0xFDD
 23120                           plusw2	equ	0xFDB
 23121                           fsr2h	equ	0xFDA
 23122                           fsr2l	equ	0xFD9
 23123                           status	equ	0xFD8
 23124                           
 23125                           	psect	rparam
 23126  0000                     pclatu	equ	0xFFB
 23127                           pclath	equ	0xFFA
 23128                           tblptru	equ	0xFF8
 23129                           tblptrh	equ	0xFF7
 23130                           tblptrl	equ	0xFF6
 23131                           tablat	equ	0xFF5
 23132                           prodh	equ	0xFF4
 23133                           prodl	equ	0xFF3
 23134                           intcon	equ	0xFF2
 23135                           intcon2	equ	0xFF1
 23136                           indf0	equ	0xFEF
 23137                           postinc0	equ	0xFEE
 23138                           fsr0h	equ	0xFEA
 23139                           fsr0l	equ	0xFE9
 23140                           wreg	equ	0xFE8
 23141                           postinc1	equ	0xFE6
 23142                           postdec1	equ	0xFE5
 23143                           fsr1h	equ	0xFE2
 23144                           fsr1l	equ	0xFE1
 23145                           indf2	equ	0xFDF
 23146                           postinc2	equ	0xFDE
 23147                           postdec2	equ	0xFDD
 23148                           plusw2	equ	0xFDB
 23149                           fsr2h	equ	0xFDA
 23150                           fsr2l	equ	0xFD9
 23151                           status	equ	0xFD8
 23152                           
 23153                           	psect	temp
 23154  0000'                    btemp:
 23155                           	opt stack 0
 23156  0000'                    	ds	1
 23157  0000                     int$flags	set	btemp
 23158                           pclatu	equ	0xFFB
 23159                           pclath	equ	0xFFA
 23160                           tblptru	equ	0xFF8
 23161                           tblptrh	equ	0xFF7
 23162                           tblptrl	equ	0xFF6
 23163                           tablat	equ	0xFF5
 23164                           prodh	equ	0xFF4
 23165                           prodl	equ	0xFF3
 23166                           intcon	equ	0xFF2
 23167                           intcon2	equ	0xFF1
 23168                           indf0	equ	0xFEF
 23169                           postinc0	equ	0xFEE
 23170                           fsr0h	equ	0xFEA
 23171                           fsr0l	equ	0xFE9
 23172                           wreg	equ	0xFE8
 23173                           postinc1	equ	0xFE6
 23174                           postdec1	equ	0xFE5
 23175                           fsr1h	equ	0xFE2
 23176                           fsr1l	equ	0xFE1
 23177                           indf2	equ	0xFDF
 23178                           postinc2	equ	0xFDE
 23179                           postdec2	equ	0xFDD
 23180                           plusw2	equ	0xFDB
 23181                           fsr2h	equ	0xFDA
 23182                           fsr2l	equ	0xFD9
 23183                           status	equ	0xFD8


Data Sizes:
    Strings     1254
    Constant    168
    Data        3
    BSS         2390
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     34      64
    BANK0           160    106     160
    BANK1           256     27     176
    BANK2           256      0     160
    BANK3           256    105     105
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    put_string_usb$0	PTR unsigned char  size(2) Largest target is 1
		 -> USB_loop@data(BANK0[1]), 

    get_string_usb$0	PTR unsigned char  size(2) Largest target is 1
		 -> USB_loop@data(BANK0[1]), 

    command_operation@op3	PTR unsigned char  size(2) Largest target is 20
		 -> my_terminal_loop@op3(BANK2[20]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_134(CODE[6]), STR_133(CODE[6]), STR_131(CODE[6]), STR_130(CODE[6]), 
		 -> STR_128(CODE[6]), STR_127(CODE[6]), STR_125(CODE[6]), STR_124(CODE[6]), 
		 -> STR_122(CODE[6]), STR_121(CODE[6]), STR_119(CODE[6]), STR_118(CODE[6]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 20
		 -> settings_loop@str(BANK0[20]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 20
		 -> settings_loop@str(BANK0[20]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_147(CODE[7]), weekday_3char(CODE[28]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 37
		 -> STR_5(CODE[37]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 30
		 -> print_time@str(BANK0[30]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 20
		 -> settings_loop@str(BANK0[20]), 

    settings_loop@strp	PTR unsigned char  size(2) Largest target is 20
		 -> settings_loop@str(BANK0[20]), 

    command_operation@op2	PTR unsigned char  size(2) Largest target is 20
		 -> my_terminal_loop@op2(BANK1[20]), 

    command_operation@op1	PTR unsigned char  size(2) Largest target is 20
		 -> my_terminal_loop@op1(BANK1[20]), 

    command_operation@tx	PTR struct ringbuf size(2) Largest target is 9
		 -> usb_tx(BANK0[8]), 

    command_operation@op0	PTR unsigned char  size(2) Largest target is 20
		 -> my_terminal_loop@op0(BANK1[20]), 

    command_get_data@tx	PTR struct ringbuf size(2) Largest target is 9
		 -> usb_tx(BANK0[8]), 

    display_char_puts@str1	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_117(CODE[15]), STR_115(CODE[16]), STR_113(CODE[17]), STR_111(CODE[16]), 
		 -> STR_109(CODE[17]), STR_107(CODE[15]), STR_105(CODE[16]), STR_103(CODE[17]), 
		 -> STR_101(CODE[16]), STR_99(CODE[17]), STR_97(CODE[17]), settings_loop@str(BANK0[20]), 

    display_char_puts@str0	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_135(CODE[17]), STR_132(CODE[17]), STR_129(CODE[17]), STR_126(CODE[17]), 
		 -> STR_123(CODE[17]), STR_120(CODE[17]), STR_116(CODE[9]), STR_114(CODE[9]), 
		 -> STR_112(CODE[9]), STR_110(CODE[9]), STR_108(CODE[9]), STR_106(CODE[9]), 
		 -> STR_104(CODE[9]), STR_102(CODE[9]), STR_100(CODE[9]), STR_98(CODE[9]), 
		 -> STR_96(CODE[9]), 

    usb_rx.buf	PTR unsigned char  size(2) Largest target is 2000
		 -> main_init@usbrx(BANK2[100]), main_init@usbtx(BIGRAM[2000]), my_terminal_loop@buf(BANK3[100]), 

    usb_tx.buf	PTR unsigned char  size(2) Largest target is 2000
		 -> main_init@usbrx(BANK2[100]), main_init@usbtx(BIGRAM[2000]), my_terminal_loop@buf(BANK3[100]), 

    command_time@op2	PTR unsigned char  size(2) Largest target is 20
		 -> my_terminal_loop@op2(BANK1[20]), 

    command_time@op1	PTR unsigned char  size(2) Largest target is 20
		 -> my_terminal_loop@op1(BANK1[20]), 

    command_time@tx	PTR struct ringbuf size(2) Largest target is 9
		 -> usb_tx(BANK0[8]), 

    command_time@op0	PTR unsigned char  size(2) Largest target is 20
		 -> my_terminal_loop@op0(BANK1[20]), 

    command_at_hand@tx	PTR struct ringbuf size(2) Largest target is 9
		 -> usb_tx(BANK0[8]), 

    command_at_hand@hand	PTR unsigned char  size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    print_time@tx	PTR struct ringbuf size(2) Largest target is 9
		 -> usb_tx(BANK0[8]), 

    my_terminal_loop@tx	PTR struct ringbuf size(2) Largest target is 9
		 -> usb_tx(BANK0[8]), 

    my_terminal_loop@rx	PTR struct ringbuf size(2) Largest target is 9
		 -> usb_rx(BANK1[8]), 

    F9615.buf	PTR unsigned char  size(2) Largest target is 2000
		 -> main_init@usbrx(BANK2[100]), main_init@usbtx(BIGRAM[2000]), my_terminal_loop@buf(BANK3[100]), 

    RTCC_adjust_time_dec@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    RTCC_adjust_time_dec@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    RTCC_adjust_time_inc@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    RTCC_adjust_time_inc@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    display_time_1602@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    display_time_1602@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    my_strcmp@str2	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_95(CODE[3]), STR_94(CODE[16]), STR_93(CODE[3]), STR_92(CODE[19]), 
		 -> STR_91(CODE[2]), STR_90(CODE[8]), STR_88(CODE[2]), STR_87(CODE[5]), 
		 -> STR_86(CODE[2]), STR_85(CODE[6]), STR_84(CODE[3]), STR_83(CODE[16]), 
		 -> STR_82(CODE[3]), STR_81(CODE[19]), STR_80(CODE[2]), STR_79(CODE[8]), 
		 -> STR_77(CODE[2]), STR_76(CODE[5]), STR_75(CODE[2]), STR_74(CODE[7]), 
		 -> STR_73(CODE[3]), STR_72(CODE[16]), STR_71(CODE[3]), STR_70(CODE[19]), 
		 -> STR_69(CODE[2]), STR_68(CODE[8]), STR_66(CODE[2]), STR_65(CODE[5]), 
		 -> STR_64(CODE[2]), STR_63(CODE[5]), STR_61(CODE[2]), STR_60(CODE[5]), 
		 -> STR_59(CODE[2]), STR_58(CODE[8]), STR_56(CODE[2]), STR_55(CODE[6]), 
		 -> STR_52(CODE[5]), STR_51(CODE[11]), STR_50(CODE[6]), STR_49(CODE[1]), 
		 -> STR_48(CODE[12]), STR_47(CODE[3]), STR_46(CODE[9]), STR_45(CODE[9]), 
		 -> STR_43(CODE[2]), STR_42(CODE[5]), STR_22(CODE[7]), STR_21(CODE[2]), 
		 -> STR_20(CODE[7]), STR_19(CODE[2]), STR_18(CODE[5]), STR_17(CODE[2]), 
		 -> STR_16(CODE[4]), STR_15(CODE[2]), STR_14(CODE[6]), STR_13(CODE[2]), 
		 -> STR_12(CODE[5]), STR_11(CODE[2]), STR_10(CODE[12]), STR_9(CODE[3]), 
		 -> STR_8(CODE[2]), STR_7(CODE[11]), 

    my_strcmp@str1	PTR const unsigned char  size(2) Largest target is 20
		 -> my_terminal_loop@op2(BANK1[20]), my_terminal_loop@op1(BANK1[20]), my_terminal_loop@op0(BANK1[20]), 

    my_atoi@str	PTR const unsigned char  size(2) Largest target is 20
		 -> my_terminal_loop@op2(BANK1[20]), 

    my_utoa32@str	PTR unsigned char  size(2) Largest target is 15
		 -> normal_loop@str(BANK1[15]), display_LCD@str(BANK0[10]), 

    my_utoa@str	PTR unsigned char  size(2) Largest target is 10
		 -> command_get_data@str(BANK0[10]), display_LCD@str(BANK0[10]), print_time_dec@str(COMRAM[10]), display_dec@str(BANK0[10]), 

    RTCC_from_epoch@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    RTCC_from_epoch@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    RTCC_from_caltime@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    RTCC_from_caltime@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    RTCC_from_RTCC@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    RTCC_from_RTCC@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    caltime_to_epoch@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    caltime_to_epoch@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    epoch_to_caltime@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    epoch_to_caltime@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    caltime_to_RTCC@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    RTCC_to_caltime@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    get_quot_rem@quot	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_to_caltime@num(BANK0[4]), 

    I2C_LCD_Puts@s	PTR const unsigned char  size(2) Largest target is 120
		 -> STR_146(CODE[13]), STR_145(CODE[17]), STR_41(CODE[16]), STR_40(CODE[12]), 
		 -> STR_30(CODE[2]), STR_29(CODE[3]), STR_28(CODE[3]), STR_27(CODE[3]), 
		 -> STR_26(CODE[4]), display_LCD@str(BANK0[10]), STR_25(CODE[15]), STR_24(CODE[13]), 
		 -> STR_23(CODE[17]), display_char(BANK2[40]), display_port@onoff(CODE[10]), display_port@port_char(CODE[120]), 
		 -> weekday_3char(CODE[28]), STR_1(CODE[3]), display_dec@str(BANK0[10]), 

    button_timer_interrupt@bt	PTR struct button size(2) Largest target is 69
		 -> ctmu_m(BANK0[4]), port(BANK1[69]), 

    delay_set@d	PTR struct Delay size(2) Largest target is 3
		 -> delay_display(COMRAM[3]), 

    delay_timer_interrupt@d	PTR struct Delay size(2) Largest target is 3
		 -> delay_display(COMRAM[3]), 

    rx_buf.buf	PTR unsigned char  size(2) Largest target is 2000
		 -> main_init@usbrx(BANK2[100]), main_init@usbtx(BIGRAM[2000]), my_terminal_loop@buf(BANK3[100]), 

    tx_buf.buf	PTR unsigned char  size(2) Largest target is 2000
		 -> main_init@usbrx(BANK2[100]), main_init@usbtx(BIGRAM[2000]), my_terminal_loop@buf(BANK3[100]), 

    ringbuf_delete@rb.buf	PTR unsigned char  size(2) Largest target is 2000
		 -> main_init@usbrx(BANK2[100]), main_init@usbtx(BIGRAM[2000]), my_terminal_loop@buf(BANK3[100]), 

    ringbuf_delete@rb	PTR struct ringbuf size(2) Largest target is 9
		 -> my_terminal_loop@command(BANK0[8]), 

    ringbuf_backspace@rb.buf	PTR unsigned char  size(2) Largest target is 2000
		 -> main_init@usbrx(BANK2[100]), main_init@usbtx(BIGRAM[2000]), my_terminal_loop@buf(BANK3[100]), 

    ringbuf_backspace@rb	PTR struct ringbuf size(2) Largest target is 9
		 -> my_terminal_loop@command(BANK0[8]), 

    ringbuf_pop@rb.buf	PTR unsigned char  size(2) Largest target is 2000
		 -> main_init@usbrx(BANK2[100]), main_init@usbtx(BIGRAM[2000]), my_terminal_loop@buf(BANK3[100]), 

    ringbuf_pop@rb	PTR struct ringbuf size(2) Largest target is 9
		 -> usb_rx(BANK1[8]), usb_tx(BANK0[8]), my_terminal_loop@command(BANK0[8]), tx_buf(COMRAM[8]), 

    ringbuf_put_str@str	PTR const unsigned char  size(2) Largest target is 568
		 -> STR_144(CODE[2]), STR_143(CODE[4]), STR_142(CODE[2]), STR_141(CODE[2]), 
		 -> normal_loop@str(BANK1[15]), STR_140(CODE[2]), STR_139(CODE[2]), STR_138(CODE[2]), 
		 -> STR_137(CODE[2]), STR_136(CODE[9]), STR_89(CODE[62]), STR_78(CODE[62]), 
		 -> STR_67(CODE[62]), STR_62(CODE[35]), STR_57(CODE[18]), STR_54(CODE[36]), 
		 -> STR_53(CODE[24]), STR_44(CODE[568]), STR_39(CODE[2]), STR_38(CODE[3]), 
		 -> STR_37(CODE[3]), STR_36(CODE[3]), command_get_data@str(BANK0[10]), STR_35(CODE[2]), 
		 -> STR_34(CODE[5]), STR_33(CODE[2]), STR_32(CODE[3]), STR_31(CODE[2]), 
		 -> STR_6(CODE[8]), print_time@str(BANK0[30]), STR_4(CODE[3]), print_time_dec@str(COMRAM[10]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), 

    ringbuf_put_str@rb	PTR struct ringbuf size(2) Largest target is 9
		 -> usb_tx(BANK0[8]), 

    ringbuf_put_num@rb	PTR struct ringbuf size(2) Largest target is 9
		 -> usb_tx(BANK0[8]), 

    ringbuf_put@rb.buf	PTR unsigned char  size(2) Largest target is 2000
		 -> main_init@usbrx(BANK2[100]), main_init@usbtx(BIGRAM[2000]), my_terminal_loop@buf(BANK3[100]), 

    ringbuf_put@rb	PTR struct ringbuf size(2) Largest target is 9
		 -> usb_rx(BANK1[8]), usb_tx(BANK0[8]), my_terminal_loop@command(BANK0[8]), rx_buf(BANK1[8]), 
		 -> tx_buf(COMRAM[8]), 

    ringbuf_num@rb.buf	PTR unsigned char  size(2) Largest target is 2000
		 -> main_init@usbrx(BANK2[100]), main_init@usbtx(BIGRAM[2000]), my_terminal_loop@buf(BANK3[100]), 

    ringbuf_num@rb	PTR struct ringbuf size(2) Largest target is 9
		 -> usb_rx(BANK1[8]), usb_tx(BANK0[8]), my_terminal_loop@command(BANK0[8]), rx_buf(BANK1[8]), 
		 -> tx_buf(COMRAM[8]), 

    S790ringbuf$buf	PTR unsigned char  size(2) Largest target is 2000
		 -> main_init@usbrx(BANK2[100]), main_init@usbtx(BIGRAM[2000]), my_terminal_loop@buf(BANK3[100]), 

    ringbuf_init@rb.buf	PTR unsigned char  size(2) Largest target is 2000
		 -> main_init@usbrx(BANK2[100]), main_init@usbtx(BIGRAM[2000]), my_terminal_loop@buf(BANK3[100]), 

    ringbuf_init@internal_buf	PTR unsigned char  size(2) Largest target is 2000
		 -> main_init@usbrx(BANK2[100]), main_init@usbtx(BIGRAM[2000]), my_terminal_loop@buf(BANK3[100]), 

    ringbuf_init@rb	PTR struct ringbuf size(2) Largest target is 9
		 -> usb_rx(BANK1[8]), usb_tx(BANK0[8]), my_terminal_loop@command(BANK0[8]), 


Critical Paths under _main in COMRAM

    _sleep_loop->_ADC
    _normal_loop->___lwmod
    _settings_loop->_display_char_puts
    _settings_loop->_strcpy
    _display_reserve->_delay_set
    _display_LCD->___lwmod
    _my_utoa32->___lwmod
    _I2C_LCD_Putc->_I2C_Start
    _Auto_cut->_ADC
    _my_terminal_loop->_ringbuf_backspace
    _my_terminal_loop->_ringbuf_pop
    _ringbuf_backspace->_ringbuf_num
    _command_operation->_my_strcmp
    _command_time->_my_strcmp
    _sprintf->___lwmod
    ___wmul->_ADC
    _d_to_x->___awdiv
    _command_get_data->___lwmod
    _ringbuf_put_num->___lwmod
    _my_utoa->___lwmod
    _I2C_LCD_Puts->_I2C_Start
    _I2C_LCD_Command->_I2C_Start
    _I2C_Stop->_I2C_IdleCheck
    _I2C_Start->_I2C_IdleCheck
    _I2C_Send->_I2C_IdleCheck
    ___lwdiv->___lwmod
    _USB_loop->_get_string_usb
    _USB_loop->_put_string_usb
    _USB_loop->_ringbuf_pop
    _ringbuf_put->___lwmod
    _ringbuf_pop->_ringbuf_num
    _RTCC_from_RTCC->_RTCC_to_caltime
    _month_length->___awmod
    _RTCC_to_caltime->_x_to_d

Critical Paths under _ISR in COMRAM

    _ISR->_integrating
    _integrating->i2___lldiv
    _LED_indicator->i2___awdiv

Critical Paths under _main in BANK0

    _sleep_loop->_I2C_LCD_SetCursor
    _normal_loop->_print_time
    _settings_loop->_RTCC_adjust_time_dec
    _settings_loop->_RTCC_adjust_time_inc
    _RTCC_adjust_time_inc->_RTCC_from_epoch
    _RTCC_adjust_time_dec->_RTCC_from_epoch
    _RTCC_from_epoch->_epoch_to_caltime
    _port_button_loop->_display_reserve
    _display_LCD->_display_time_1602
    _my_utoa32->___llmod
    _display_time_1602->_display_dec
    _display_dec->_my_utoa
    _display_port->_I2C_LCD_SetCursor
    _Auto_cut->___wmul
    _ringbuf_backspace->_ringbuf_num
    _ctmu_set_ratio->___lwdiv
    _command_time->_command_at_hand
    _my_atoi->___wmul
    _command_at_hand->_print_time
    _print_time->_sprintf
    _sprintf->___lwdiv
    ___wmul->_CTMU_read
    _RTCC_from_caltime->_epoch_to_caltime
    _epoch_to_caltime->_get_quot_rem
    _get_quot_rem->___lmul
    _caltime_to_RTCC->_d_to_x
    _d_to_x->___awdiv
    _command_get_data->_ringbuf_put_num
    _ringbuf_put_str->_ringbuf_put
    _ringbuf_put_num->_ringbuf_put
    _my_utoa->___lwdiv
    ___llmod->___lldiv
    _bootload->_I2C_LCD_SetCursor
    _I2C_LCD_SetCursor->_I2C_LCD_Command
    _main_init->_ringbuf_init
    _I2C_LCD_init->_I2C_LCD_Clear
    _I2C_LCD_Clear->_I2C_LCD_Command
    _ctmu_sampling->_button_timer_interrupt
    _button_timer_interrupt->___lwdiv
    ___lwdiv->___wmul
    _CTMU_read->___lldiv
    _USB_loop->_ringbuf_put
    _ringbuf_put->___lwdiv
    _ringbuf_pop->_ringbuf_num
    _RTCC_loop->_RTCC_from_RTCC
    _RTCC_from_RTCC->_caltime_to_epoch
    _caltime_to_epoch->___lmul
    _month_length->___awmod
    ___lmul->___lldiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_my_terminal_loop
    _my_terminal_loop->_command_operation
    _command_operation->_command_time

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_my_terminal_loop

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  530904
                                             26 BANK1      1     1      0
                            _LED_OUT
                                _OUT
                     _RTCC_from_RTCC
                    _RTCC_from_epoch
                          _RTCC_loop
                           _USB_loop
                           _bootload
                      _ctmu_sampling
                     _ctmu_set_ratio
                        _display_now
                    _display_reserve
                          _main_init
                   _my_terminal_loop
                        _normal_loop
                         _sleep_loop
 ---------------------------------------------------------------------------------
 (1) _sleep_loop                                           1     1      0    9019
                                              6 BANK0      1     1      0
                                _ADC
                      _I2C_LCD_Clear
                       _I2C_LCD_Puts
                  _I2C_LCD_SetCursor
                            _LED_OUT
                                _OUT
                        _display_now
                    _display_reserve
 ---------------------------------------------------------------------------------
 (1) _normal_loop                                         16    16      0  195915
                                              0 BANK1     16    16      0
                           _Auto_cut
                            ___lwdiv
                            ___lwmod
                        _display_LCD
                        _display_now
                          _my_utoa32
                   _port_button_loop
                         _print_time
                        _ringbuf_put
                    _ringbuf_put_str
                      _settings_loop
 ---------------------------------------------------------------------------------
 (2) _settings_loop                                       35    35      0   55266
                                             63 BANK0     35    35      0
            _RTCC_adjust_time_cursor
               _RTCC_adjust_time_dec
               _RTCC_adjust_time_inc
            _RTCC_adjust_time_toggle
                  _display_char_puts
                        _display_now
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4    2605
                                             30 COMRAM     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _display_char_puts                                    5     1      4    3802
                                             30 COMRAM     4     0      4
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RTCC_adjust_time_toggle                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RTCC_adjust_time_inc                                10     6      4   23487
                                             53 BANK0     10     6      4
                     _RTCC_from_RTCC
                    _RTCC_from_epoch
                             ___lmul
                       _month_length
 ---------------------------------------------------------------------------------
 (3) _RTCC_adjust_time_dec                                10     6      4   23487
                                             53 BANK0     10     6      4
                     _RTCC_from_RTCC
                    _RTCC_from_epoch
                             ___lmul
                       _month_length
 ---------------------------------------------------------------------------------
 (4) _RTCC_from_epoch                                      4     0      4   11213
                                             49 BANK0      4     0      4
                    _caltime_to_RTCC
                   _epoch_to_caltime
 ---------------------------------------------------------------------------------
 (3) _RTCC_adjust_time_cursor                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _port_button_loop                                     1     1      0    2723
                                              3 BANK0      1     1      0
                            _LED_OUT
                                _OUT
                        _display_now
                    _display_reserve
 ---------------------------------------------------------------------------------
 (2) _display_reserve                                      3     1      2     675
                                              0 BANK0      3     1      2
                          _delay_set
 ---------------------------------------------------------------------------------
 (3) _delay_set                                            4     0      4     301
                                             30 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _display_now                                          1     1      0      62
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _LED_OUT                                              2     1      1     913
                                             30 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _display_LCD                                         14    14      0   71068
                                             57 BANK0     14    14      0
                      _I2C_LCD_Clear
                       _I2C_LCD_Putc
                       _I2C_LCD_Puts
                  _I2C_LCD_SetCursor
                            ___lldiv
                            ___llmod
                            ___lwdiv
                            ___lwmod
                       _display_port
                  _display_time_1602
                            _my_utoa
                          _my_utoa32
 ---------------------------------------------------------------------------------
 (2) _my_utoa32                                           12     5      7    5585
                                             21 BANK0     12     5      7
                            ___lldiv
                            ___llmod
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _display_time_1602                                    5     1      4   29594
                                             52 BANK0      5     1      4
                       _I2C_LCD_Putc
                       _I2C_LCD_Puts
                  _I2C_LCD_SetCursor
                     _RTCC_from_RTCC
                        _display_dec
 ---------------------------------------------------------------------------------
 (4) _display_dec                                         12    11      1   15476
                                             40 BANK0     12    11      1
                       _I2C_LCD_Puts
                            _my_utoa
 ---------------------------------------------------------------------------------
 (4) _I2C_LCD_Putc                                         2     2      0     667
                                              0 BANK0      2     2      0
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _display_port                                         3     3      0    5939
                                              6 BANK0      3     3      0
                       _I2C_LCD_Puts
                  _I2C_LCD_SetCursor
 ---------------------------------------------------------------------------------
 (2) _Auto_cut                                             3     3      0    2668
                                             25 BANK0      3     3      0
                                _ADC
                          _ANALOG_IN
                                _OUT
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _OUT                                                  2     1      1     602
                                             30 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _ANALOG_IN                                            1     1      0      31
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC                                                  4     2      2      31
                                             30 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _my_terminal_loop                                   111   107      4  261804
                                             20 BANK1      6     2      4
                                              0 BANK3    105   105      0
                  _command_operation
                  _ringbuf_backspace
                     _ringbuf_delete
                       _ringbuf_init
                        _ringbuf_num
                        _ringbuf_pop
                        _ringbuf_put
                    _ringbuf_put_num
                    _ringbuf_put_str
 ---------------------------------------------------------------------------------
 (2) _ringbuf_delete                                       2     0      2     166
                                             30 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ringbuf_backspace                                    6     4      2    1308
                                             32 COMRAM     2     0      2
                                              6 BANK0      4     4      0
                        _ringbuf_num
 ---------------------------------------------------------------------------------
 (2) _command_operation                                   11     1     10  222454
                                              9 BANK1     11     1     10
                           _bootload
                   _command_get_data
                       _command_time
                     _ctmu_set_ratio
                            _my_atoi
                          _my_strcmp
                    _ringbuf_put_str
 ---------------------------------------------------------------------------------
 (3) _ctmu_set_ratio                                       1     1      0    8946
                                             32 BANK0      1     1      0
                          _CTMU_read
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _command_time                                         9     1      8  116029
                                              0 BANK1      9     1      8
                    _command_at_hand
                       _month_length
                            _my_atoi
                          _my_strcmp
                         _print_time
 ---------------------------------------------------------------------------------
 (3) _my_strcmp                                            5     1      4   13150
                                             30 COMRAM     4     0      4
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _my_atoi                                              8     6      2    2614
                                             25 BANK0      8     6      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _command_at_hand                                      7     0      7   64771
                                             99 BANK0      7     0      7
                  _RTCC_from_caltime
                            _my_atoi (ARG)
                         _print_time
                    _ringbuf_put_str
 ---------------------------------------------------------------------------------
 (2) _print_time                                          32    30      2   31966
                                             67 BANK0     32    30      2
                     _RTCC_from_RTCC
                    _ringbuf_put_str
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             39    21     18   10988
                                             32 BANK0     35    17     18
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             30 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1688
                                             19 BANK0      6     2      4
                                _ADC (ARG)
                          _ANALOG_IN (ARG)
                          _CTMU_read (ARG)
 ---------------------------------------------------------------------------------
 (5) _RTCC_from_caltime                                    4     0      4   15949
                                             49 BANK0      4     0      4
                    _caltime_to_RTCC
                   _caltime_to_epoch
                   _epoch_to_caltime
 ---------------------------------------------------------------------------------
 (5) _epoch_to_caltime                                    16    12      4    9218
                                             33 BANK0     16    12      4
                       _get_quot_rem
                       _month_length
 ---------------------------------------------------------------------------------
 (6) _get_quot_rem                                         8     4      4    5648
                                             25 BANK0      8     4      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _caltime_to_RTCC                                      2     0      2    1278
                                              5 BANK0      2     0      2
                             _d_to_x
 ---------------------------------------------------------------------------------
 (6) _d_to_x                                               1     1      0     853
                                              4 BANK0      1     1      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     791
                                             30 COMRAM     4     0      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _command_get_data                                    18    14      4   58928
                                             47 BANK0     18    14      4
                            ___lldiv
                            ___llmod
                            ___lwdiv
                            ___lwmod
                            _my_utoa
                        _ringbuf_put
                    _ringbuf_put_num
                    _ringbuf_put_str
 ---------------------------------------------------------------------------------
 (2) _ringbuf_put_str                                      4     0      4   13488
                                             39 BANK0      4     0      4
                        _ringbuf_put
 ---------------------------------------------------------------------------------
 (2) _ringbuf_put_num                                      8     3      5   13642
                                             39 BANK0      8     3      5
                            ___lwdiv
                            ___lwmod
                        _ringbuf_put
 ---------------------------------------------------------------------------------
 (3) _my_utoa                                              8     3      5   10681
                                             32 BANK0      8     3      5
                            ___lldiv (ARG)
                            ___llmod (ARG)
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4    2936
                                             30 COMRAM     4     0      4
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8    1688
                                             30 COMRAM     1     1      0
                                             13 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _bootload                                             0     0      0    6606
                      _I2C_LCD_Clear
                       _I2C_LCD_Puts
                  _I2C_LCD_SetCursor
 ---------------------------------------------------------------------------------
 (2) _I2C_LCD_SetCursor                                    4     3      1    2638
                                              2 BANK0      4     3      1
                    _I2C_LCD_Command
 ---------------------------------------------------------------------------------
 (2) _I2C_LCD_Puts                                         5     3      2    3301
                                              0 BANK0      5     3      2
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (1) _main_init                                            0     0      0    3016
                           _ADC_init
                          _CTMU_init
                       _I2C_LCD_init
                           _I2C_init
                          _RTCC_init
                           _USB_init
                       _ringbuf_init
                        _timer0_init
                        _timer1_init
                        _timer3_init
 ---------------------------------------------------------------------------------
 (2) _timer3_init                                          2     2      0      31
                                             30 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _timer1_init                                          3     2      1     197
                                             30 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _timer0_init                                          2     2      0      62
                                             30 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ringbuf_init                                         6     0      6    1122
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _USB_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RTCC_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_LCD_init                                         0     0      0    1573
                           _Delay_ms
                      _I2C_LCD_Clear
                    _I2C_LCD_Command
 ---------------------------------------------------------------------------------
 (2) _I2C_LCD_Clear                                        1     1      0     667
                                              2 BANK0      1     1      0
                    _I2C_LCD_Command
 ---------------------------------------------------------------------------------
 (3) _I2C_LCD_Command                                      2     2      0     667
                                              0 BANK0      2     2      0
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0      31
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            2     1      1     509
                                             32 COMRAM     2     1      1
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (4) _I2C_Send                                             1     1      0      62
                                             32 COMRAM     1     1      0
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (5) _I2C_IdleCheck                                        2     2      0      31
                                             30 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Delay_ms                                             3     1      2     239
                                             30 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _CTMU_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             1     1      0      31
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ctmu_sampling                                        0     0      0    9113
                          _CTMU_read
                            ___lwdiv
             _button_timer_interrupt
 ---------------------------------------------------------------------------------
 (2) _button_timer_interrupt                               5     2      3    1979
                                             32 BANK0      5     2      3
                          _CTMU_read (ARG)
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4    4331
                                             25 BANK0      7     3      4
                          _CTMU_read (ARG)
                            ___lwmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _CTMU_read                                            9     7      2    2803
                                             30 COMRAM     3     1      2
                                             13 BANK0      6     6      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (7) ___lldiv                                             13     5      8    2667
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _USB_loop                                             3     3      0    8747
                                             39 BANK0      3     3      0
                     _get_string_usb
                     _put_string_usb
                        _ringbuf_num
                        _ringbuf_pop
                        _ringbuf_put
 ---------------------------------------------------------------------------------
 (3) _ringbuf_put                                          7     4      3    5488
                                             32 BANK0      7     4      3
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
                        _ringbuf_num
 ---------------------------------------------------------------------------------
 (2) _ringbuf_pop                                          7     5      2    2028
                                             32 COMRAM     2     0      2
                                              6 BANK0      5     5      0
                        _ringbuf_num
 ---------------------------------------------------------------------------------
 (4) _ringbuf_num                                          8     6      2    1049
                                             30 COMRAM     2     0      2
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _put_string_usb                                       4     0      4      26
                                             30 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _get_string_usb                                       4     0      4      26
                                             30 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _RTCC_loop                                            0     0      0    7025
                     _RTCC_from_RTCC
 ---------------------------------------------------------------------------------
 (4) _RTCC_from_RTCC                                       4     0      4    7025
                                             40 BANK0      4     0      4
                    _RTCC_to_caltime
                   _caltime_to_epoch
 ---------------------------------------------------------------------------------
 (5) _caltime_to_epoch                                    15    11      4    5090
                                             25 BANK0     15    11      4
                             ___lmul
                       _month_length
 ---------------------------------------------------------------------------------
 (4) _month_length                                         6     5      1    2179
                                              2 BANK0      6     5      1
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     849
                                             30 COMRAM     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8    1960
                                             13 BANK0     12     4      8
                            ___lldiv (ARG)
                       _month_length (ARG)
 ---------------------------------------------------------------------------------
 (5) _RTCC_to_caltime                                      3     1      2     386
                                             32 COMRAM     2     0      2
                                              0 BANK0      1     1      0
                             _x_to_d
 ---------------------------------------------------------------------------------
 (6) _x_to_d                                               2     2      0      62
                                             30 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                14    14      0    1723
                                             16 COMRAM    14    14      0
                      _LED_indicator
                            _USB_ISR
                  _charge_time_count
              _delay_timer_interrupt
                        _integrating
 ---------------------------------------------------------------------------------
 (11) _integrating                                         3     3      0     370
                                             13 COMRAM     3     3      0
                          i2___lldiv
 ---------------------------------------------------------------------------------
 (12) i2___lldiv                                          13     5      8     214
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (11) _delay_timer_interrupt                               4     2      2     177
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (11) _charge_time_count                                   3     3      0      90
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) _USB_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _LED_indicator                                       4     4      0    1086
                                              8 COMRAM     4     4      0
                          i2_LED_OUT
                          i2___awdiv
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (12) i2___lwdiv                                           7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (12) i2___awdiv                                           8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (12) i2_LED_OUT                                           2     1      1     210
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LED_OUT
   _OUT
   _RTCC_from_RTCC
     _RTCC_to_caltime
       _x_to_d
     _caltime_to_epoch
       ___lmul
         ___lldiv (ARG)
         _month_length (ARG)
           ___awmod
       _month_length
         ___awmod
   _RTCC_from_epoch
     _caltime_to_RTCC
       _d_to_x
         ___awdiv
     _epoch_to_caltime
       _get_quot_rem
         ___lldiv
         ___lmul
           ___lldiv (ARG)
           _month_length (ARG)
             ___awmod
       _month_length
         ___awmod
   _RTCC_loop
     _RTCC_from_RTCC
       _RTCC_to_caltime
         _x_to_d
       _caltime_to_epoch
         ___lmul
           ___lldiv (ARG)
           _month_length (ARG)
             ___awmod
         _month_length
           ___awmod
   _USB_loop
     _get_string_usb
     _put_string_usb
     _ringbuf_num
     _ringbuf_pop
       _ringbuf_num
     _ringbuf_put
       ___lwdiv (ARG)
         _CTMU_read (ARG)
           ___lldiv
         ___lwmod (ARG)
         ___wmul (ARG)
           _ADC (ARG)
           _ANALOG_IN (ARG)
           _CTMU_read (ARG)
             ___lldiv
       ___lwmod (ARG)
       _ringbuf_num (ARG)
   _bootload
     _I2C_LCD_Clear
       _I2C_LCD_Command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     _I2C_LCD_Puts
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
     _I2C_LCD_SetCursor
       _I2C_LCD_Command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
   _ctmu_sampling
     _CTMU_read
       ___lldiv
     ___lwdiv
       _CTMU_read (ARG)
         ___lldiv
       ___lwmod (ARG)
       ___wmul (ARG)
         _ADC (ARG)
         _ANALOG_IN (ARG)
         _CTMU_read (ARG)
           ___lldiv
     _button_timer_interrupt
       _CTMU_read (ARG)
         ___lldiv
       ___lwdiv (ARG)
         _CTMU_read (ARG)
           ___lldiv
         ___lwmod (ARG)
         ___wmul (ARG)
           _ADC (ARG)
           _ANALOG_IN (ARG)
           _CTMU_read (ARG)
             ___lldiv
   _ctmu_set_ratio
     _CTMU_read
       ___lldiv
     ___lwdiv
       _CTMU_read (ARG)
         ___lldiv
       ___lwmod (ARG)
       ___wmul (ARG)
         _ADC (ARG)
         _ANALOG_IN (ARG)
         _CTMU_read (ARG)
           ___lldiv
     ___wmul
       _ADC (ARG)
       _ANALOG_IN (ARG)
       _CTMU_read (ARG)
         ___lldiv
   _display_now
   _display_reserve
     _delay_set
   _main_init
     _ADC_init
     _CTMU_init
     _I2C_LCD_init
       _Delay_ms
       _I2C_LCD_Clear
         _I2C_LCD_Command
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
       _I2C_LCD_Command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     _I2C_init
     _RTCC_init
     _USB_init
     _ringbuf_init
     _timer0_init
     _timer1_init
     _timer3_init
   _my_terminal_loop
     _command_operation
       _bootload
         _I2C_LCD_Clear
           _I2C_LCD_Command
             _I2C_Send
               _I2C_IdleCheck
             _I2C_Start
               _I2C_IdleCheck
             _I2C_Stop
               _I2C_IdleCheck
         _I2C_LCD_Puts
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
         _I2C_LCD_SetCursor
           _I2C_LCD_Command
             _I2C_Send
               _I2C_IdleCheck
             _I2C_Start
               _I2C_IdleCheck
             _I2C_Stop
               _I2C_IdleCheck
       _command_get_data
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lwdiv
           _CTMU_read (ARG)
             ___lldiv
           ___lwmod (ARG)
           ___wmul (ARG)
             _ADC (ARG)
             _ANALOG_IN (ARG)
             _CTMU_read (ARG)
               ___lldiv
         ___lwmod
         _my_utoa
           ___lldiv (ARG)
           ___llmod (ARG)
             ___lldiv (ARG)
           ___lwdiv (ARG)
             _CTMU_read (ARG)
               ___lldiv
             ___lwmod (ARG)
             ___wmul (ARG)
               _ADC (ARG)
               _ANALOG_IN (ARG)
               _CTMU_read (ARG)
                 ___lldiv
           ___lwmod (ARG)
         _ringbuf_put
           ___lwdiv (ARG)
             _CTMU_read (ARG)
               ___lldiv
             ___lwmod (ARG)
             ___wmul (ARG)
               _ADC (ARG)
               _ANALOG_IN (ARG)
               _CTMU_read (ARG)
                 ___lldiv
           ___lwmod (ARG)
           _ringbuf_num (ARG)
         _ringbuf_put_num
           ___lwdiv
             _CTMU_read (ARG)
               ___lldiv
             ___lwmod (ARG)
             ___wmul (ARG)
               _ADC (ARG)
               _ANALOG_IN (ARG)
               _CTMU_read (ARG)
                 ___lldiv
           ___lwmod
           _ringbuf_put
             ___lwdiv (ARG)
               _CTMU_read (ARG)
                 ___lldiv
               ___lwmod (ARG)
               ___wmul (ARG)
                 _ADC (ARG)
                 _ANALOG_IN (ARG)
                 _CTMU_read (ARG)
                   ___lldiv
             ___lwmod (ARG)
             _ringbuf_num (ARG)
         _ringbuf_put_str
           _ringbuf_put
             ___lwdiv (ARG)
               _CTMU_read (ARG)
                 ___lldiv
               ___lwmod (ARG)
               ___wmul (ARG)
                 _ADC (ARG)
                 _ANALOG_IN (ARG)
                 _CTMU_read (ARG)
                   ___lldiv
             ___lwmod (ARG)
             _ringbuf_num (ARG)
       _command_time
         _command_at_hand
           _RTCC_from_caltime
             _caltime_to_RTCC
               _d_to_x
                 ___awdiv
             _caltime_to_epoch
               ___lmul
                 ___lldiv (ARG)
                 _month_length (ARG)
                   ___awmod
               _month_length
                 ___awmod
             _epoch_to_caltime
               _get_quot_rem
                 ___lldiv
                 ___lmul
                   ___lldiv (ARG)
                   _month_length (ARG)
                     ___awmod
               _month_length
                 ___awmod
           _my_atoi (ARG)
             ___wmul
               _ADC (ARG)
               _ANALOG_IN (ARG)
               _CTMU_read (ARG)
                 ___lldiv
           _print_time (ARG)
             _RTCC_from_RTCC
               _RTCC_to_caltime
                 _x_to_d
               _caltime_to_epoch
                 ___lmul
                   ___lldiv (ARG)
                   _month_length (ARG)
                     ___awmod
                 _month_length
                   ___awmod
             _ringbuf_put_str
               _ringbuf_put
                 ___lwdiv (ARG)
                   _CTMU_read (ARG)
                     ___lldiv
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     _ADC (ARG)
                     _ANALOG_IN (ARG)
                     _CTMU_read (ARG)
                       ___lldiv
                 ___lwmod (ARG)
                 _ringbuf_num (ARG)
             _sprintf
               ___lwdiv
                 _CTMU_read (ARG)
                   ___lldiv
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   _ADC (ARG)
                   _ANALOG_IN (ARG)
                   _CTMU_read (ARG)
                     ___lldiv
               ___lwmod
               ___wmul
                 _ADC (ARG)
                 _ANALOG_IN (ARG)
                 _CTMU_read (ARG)
                   ___lldiv
               _isdigit
           _ringbuf_put_str (ARG)
             _ringbuf_put
               ___lwdiv (ARG)
                 _CTMU_read (ARG)
                   ___lldiv
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   _ADC (ARG)
                   _ANALOG_IN (ARG)
                   _CTMU_read (ARG)
                     ___lldiv
               ___lwmod (ARG)
               _ringbuf_num (ARG)
         _month_length
           ___awmod
         _my_atoi
           ___wmul
             _ADC (ARG)
             _ANALOG_IN (ARG)
             _CTMU_read (ARG)
               ___lldiv
         _my_strcmp
         _print_time
           _RTCC_from_RTCC
             _RTCC_to_caltime
               _x_to_d
             _caltime_to_epoch
               ___lmul
                 ___lldiv (ARG)
                 _month_length (ARG)
                   ___awmod
               _month_length
                 ___awmod
           _ringbuf_put_str
             _ringbuf_put
               ___lwdiv (ARG)
                 _CTMU_read (ARG)
                   ___lldiv
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   _ADC (ARG)
                   _ANALOG_IN (ARG)
                   _CTMU_read (ARG)
                     ___lldiv
               ___lwmod (ARG)
               _ringbuf_num (ARG)
           _sprintf
             ___lwdiv
               _CTMU_read (ARG)
                 ___lldiv
               ___lwmod (ARG)
               ___wmul (ARG)
                 _ADC (ARG)
                 _ANALOG_IN (ARG)
                 _CTMU_read (ARG)
                   ___lldiv
             ___lwmod
             ___wmul
               _ADC (ARG)
               _ANALOG_IN (ARG)
               _CTMU_read (ARG)
                 ___lldiv
             _isdigit
       _ctmu_set_ratio
         _CTMU_read
           ___lldiv
         ___lwdiv
           _CTMU_read (ARG)
             ___lldiv
           ___lwmod (ARG)
           ___wmul (ARG)
             _ADC (ARG)
             _ANALOG_IN (ARG)
             _CTMU_read (ARG)
               ___lldiv
         ___wmul
           _ADC (ARG)
           _ANALOG_IN (ARG)
           _CTMU_read (ARG)
             ___lldiv
       _my_atoi
         ___wmul
           _ADC (ARG)
           _ANALOG_IN (ARG)
           _CTMU_read (ARG)
             ___lldiv
       _my_strcmp
       _ringbuf_put_str
         _ringbuf_put
           ___lwdiv (ARG)
             _CTMU_read (ARG)
               ___lldiv
             ___lwmod (ARG)
             ___wmul (ARG)
               _ADC (ARG)
               _ANALOG_IN (ARG)
               _CTMU_read (ARG)
                 ___lldiv
           ___lwmod (ARG)
           _ringbuf_num (ARG)
     _ringbuf_backspace
       _ringbuf_num
     _ringbuf_delete
     _ringbuf_init
     _ringbuf_num
     _ringbuf_pop
       _ringbuf_num
     _ringbuf_put
       ___lwdiv (ARG)
         _CTMU_read (ARG)
           ___lldiv
         ___lwmod (ARG)
         ___wmul (ARG)
           _ADC (ARG)
           _ANALOG_IN (ARG)
           _CTMU_read (ARG)
             ___lldiv
       ___lwmod (ARG)
       _ringbuf_num (ARG)
     _ringbuf_put_num
       ___lwdiv
         _CTMU_read (ARG)
           ___lldiv
         ___lwmod (ARG)
         ___wmul (ARG)
           _ADC (ARG)
           _ANALOG_IN (ARG)
           _CTMU_read (ARG)
             ___lldiv
       ___lwmod
       _ringbuf_put
         ___lwdiv (ARG)
           _CTMU_read (ARG)
             ___lldiv
           ___lwmod (ARG)
           ___wmul (ARG)
             _ADC (ARG)
             _ANALOG_IN (ARG)
             _CTMU_read (ARG)
               ___lldiv
         ___lwmod (ARG)
         _ringbuf_num (ARG)
     _ringbuf_put_str
       _ringbuf_put
         ___lwdiv (ARG)
           _CTMU_read (ARG)
             ___lldiv
           ___lwmod (ARG)
           ___wmul (ARG)
             _ADC (ARG)
             _ANALOG_IN (ARG)
             _CTMU_read (ARG)
               ___lldiv
         ___lwmod (ARG)
         _ringbuf_num (ARG)
   _normal_loop
     _Auto_cut
       _ADC
       _ANALOG_IN
       _OUT
       ___wmul
         _ADC (ARG)
         _ANALOG_IN (ARG)
         _CTMU_read (ARG)
           ___lldiv
     ___lwdiv
       _CTMU_read (ARG)
         ___lldiv
       ___lwmod (ARG)
       ___wmul (ARG)
         _ADC (ARG)
         _ANALOG_IN (ARG)
         _CTMU_read (ARG)
           ___lldiv
     ___lwmod
     _display_LCD
       _I2C_LCD_Clear
         _I2C_LCD_Command
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
       _I2C_LCD_Putc
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
       _I2C_LCD_Puts
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
       _I2C_LCD_SetCursor
         _I2C_LCD_Command
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lwdiv
         _CTMU_read (ARG)
           ___lldiv
         ___lwmod (ARG)
         ___wmul (ARG)
           _ADC (ARG)
           _ANALOG_IN (ARG)
           _CTMU_read (ARG)
             ___lldiv
       ___lwmod
       _display_port
         _I2C_LCD_Puts
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
         _I2C_LCD_SetCursor
           _I2C_LCD_Command
             _I2C_Send
               _I2C_IdleCheck
             _I2C_Start
               _I2C_IdleCheck
             _I2C_Stop
               _I2C_IdleCheck
       _display_time_1602
         _I2C_LCD_Putc
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
         _I2C_LCD_Puts
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
         _I2C_LCD_SetCursor
           _I2C_LCD_Command
             _I2C_Send
               _I2C_IdleCheck
             _I2C_Start
               _I2C_IdleCheck
             _I2C_Stop
               _I2C_IdleCheck
         _RTCC_from_RTCC
           _RTCC_to_caltime
             _x_to_d
           _caltime_to_epoch
             ___lmul
               ___lldiv (ARG)
               _month_length (ARG)
                 ___awmod
             _month_length
               ___awmod
         _display_dec
           _I2C_LCD_Puts
             _I2C_Send
               _I2C_IdleCheck
             _I2C_Start
               _I2C_IdleCheck
             _I2C_Stop
               _I2C_IdleCheck
           _my_utoa
             ___lldiv (ARG)
             ___llmod (ARG)
               ___lldiv (ARG)
             ___lwdiv (ARG)
               _CTMU_read (ARG)
                 ___lldiv
               ___lwmod (ARG)
               ___wmul (ARG)
                 _ADC (ARG)
                 _ANALOG_IN (ARG)
                 _CTMU_read (ARG)
                   ___lldiv
             ___lwmod (ARG)
       _my_utoa
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lwdiv (ARG)
           _CTMU_read (ARG)
             ___lldiv
           ___lwmod (ARG)
           ___wmul (ARG)
             _ADC (ARG)
             _ANALOG_IN (ARG)
             _CTMU_read (ARG)
               ___lldiv
         ___lwmod (ARG)
       _my_utoa32
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lwmod (ARG)
     _display_now
     _my_utoa32
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lwmod (ARG)
     _port_button_loop
       _LED_OUT
       _OUT
       _display_now
       _display_reserve
         _delay_set
     _print_time
       _RTCC_from_RTCC
         _RTCC_to_caltime
           _x_to_d
         _caltime_to_epoch
           ___lmul
             ___lldiv (ARG)
             _month_length (ARG)
               ___awmod
           _month_length
             ___awmod
       _ringbuf_put_str
         _ringbuf_put
           ___lwdiv (ARG)
             _CTMU_read (ARG)
               ___lldiv
             ___lwmod (ARG)
             ___wmul (ARG)
               _ADC (ARG)
               _ANALOG_IN (ARG)
               _CTMU_read (ARG)
                 ___lldiv
           ___lwmod (ARG)
           _ringbuf_num (ARG)
       _sprintf
         ___lwdiv
           _CTMU_read (ARG)
             ___lldiv
           ___lwmod (ARG)
           ___wmul (ARG)
             _ADC (ARG)
             _ANALOG_IN (ARG)
             _CTMU_read (ARG)
               ___lldiv
         ___lwmod
         ___wmul
           _ADC (ARG)
           _ANALOG_IN (ARG)
           _CTMU_read (ARG)
             ___lldiv
         _isdigit
     _ringbuf_put
       ___lwdiv (ARG)
         _CTMU_read (ARG)
           ___lldiv
         ___lwmod (ARG)
         ___wmul (ARG)
           _ADC (ARG)
           _ANALOG_IN (ARG)
           _CTMU_read (ARG)
             ___lldiv
       ___lwmod (ARG)
       _ringbuf_num (ARG)
     _ringbuf_put_str
       _ringbuf_put
         ___lwdiv (ARG)
           _CTMU_read (ARG)
             ___lldiv
           ___lwmod (ARG)
           ___wmul (ARG)
             _ADC (ARG)
             _ANALOG_IN (ARG)
             _CTMU_read (ARG)
               ___lldiv
         ___lwmod (ARG)
         _ringbuf_num (ARG)
     _settings_loop
       _RTCC_adjust_time_cursor
       _RTCC_adjust_time_dec
         _RTCC_from_RTCC
           _RTCC_to_caltime
             _x_to_d
           _caltime_to_epoch
             ___lmul
               ___lldiv (ARG)
               _month_length (ARG)
                 ___awmod
             _month_length
               ___awmod
         _RTCC_from_epoch
           _caltime_to_RTCC
             _d_to_x
               ___awdiv
           _epoch_to_caltime
             _get_quot_rem
               ___lldiv
               ___lmul
                 ___lldiv (ARG)
                 _month_length (ARG)
                   ___awmod
             _month_length
               ___awmod
         ___lmul
           ___lldiv (ARG)
           _month_length (ARG)
             ___awmod
         _month_length
           ___awmod
       _RTCC_adjust_time_inc
         _RTCC_from_RTCC
           _RTCC_to_caltime
             _x_to_d
           _caltime_to_epoch
             ___lmul
               ___lldiv (ARG)
               _month_length (ARG)
                 ___awmod
             _month_length
               ___awmod
         _RTCC_from_epoch
           _caltime_to_RTCC
             _d_to_x
               ___awdiv
           _epoch_to_caltime
             _get_quot_rem
               ___lldiv
               ___lmul
                 ___lldiv (ARG)
                 _month_length (ARG)
                   ___awmod
             _month_length
               ___awmod
         ___lmul
           ___lldiv (ARG)
           _month_length (ARG)
             ___awmod
         _month_length
           ___awmod
       _RTCC_adjust_time_toggle
       _display_char_puts
       _display_now
       _strcpy
   _sleep_loop
     _ADC
     _I2C_LCD_Clear
       _I2C_LCD_Command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     _I2C_LCD_Puts
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
     _I2C_LCD_SetCursor
       _I2C_LCD_Command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     _LED_OUT
     _OUT
     _display_now
     _display_reserve
       _delay_set

 _ISR (ROOT)
   _LED_indicator
     i2_LED_OUT
     i2___awdiv
     i2___lwdiv
   _USB_ISR
   _charge_time_count
   _delay_timer_interrupt
   _integrating
     i2___lldiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EAF      0     7D0      35       53.2%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100     69      69      12       41.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      A0      10       62.5%
BITBANK1           100      0       0       7        0.0%
BANK1              100     1B      B0       8       68.8%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6A      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     22      40       1       68.1%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     299       6        0.0%
DATA                 0      0     A69       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Nov 10 22:33:00 2015

                    ?_display_LCD 000000                     ?_command_time 000000  
               _charge_time_count 000000          __end_of_port_button_loop 00017E  
              __size_of_I2C_Start 000000                   _ringbuf_put_num 000000  
                    ?_display_dec 000028                   _ringbuf_put_str 000000  
                   my_strcmp@str1 00001E                     my_strcmp@str2 000020  
                    ?_display_now 000000                                _d1 000006  
                    ___awdiv@sign 000001                                _ms 000000  
              __size_of_ANALOG_IN 000000               ___wmul@multiplicand 000015  
              i2___lwdiv@dividend 000000                 ??_RTCC_from_epoch 000022  
              ?_charge_time_count 000000                      __CFG_CP0$OFF 000000  
                             l141 000012                               l146 000022  
                             l411 000000                               l251 000056  
                             l323 00001A                               l163 00001A  
                             l430 0000E6                               _ADC 000000  
                             l184 000002                               l520 000046  
                             l512 00000E                               l417 000000  
                             l290 0000CA                               l338 00000E  
                             l514 00001C                               l291 0000EE  
                             l347 00002A                               l507 000010  
                             l292 000112                               l516 00002A  
                             l293 000136                               l286 000032  
                             l518 000038                               l287 00005A  
                             l359 00002A                               l711 00002A  
                             l288 000080                               l289 0000A6  
                             l713 000036                               l714 000042  
                             l459 000002                               l468 000002  
                             l567 000000                               l903 000030  
                             l904 0000E8                               l914 0001A0  
                             l950 00038E                               l695 00002A  
                             l697 000036                               l698 000042  
                             l889 000146                               l986 000084  
                             l988 000098                               _ISR 000000  
                             _OUT 000000                     ?_get_quot_rem 000019  
                   ?_display_port 000000                caltime_to_epoch@ep 00001B  
              caltime_to_epoch@ct 000019                 _RTCC_from_caltime 000000  
                    ___awmod@sign 000001                               prod 000FF3  
                             wreg 000FE8                        _TXSTA1bits 000FAD  
             ??_charge_time_count 000000           _RTCC_adjust_time_cursor 000000  
              ?_RTCC_from_caltime 000031                      _I2C_LCD_Putc 000000  
                    _I2C_LCD_Puts 000000                              ?_ADC 00001E  
         _RTCC_adjust_time_toggle 000000                 ??_I2C_LCD_Command 000022  
                 __end_of_LED_OUT 000064                              ?_ISR 000000  
             command_operation@tx 000009                              ?_OUT 00001E  
                    _I2C_LCD_init 000000                  ?_command_at_hand 000063  
                            l1001 00003C                              l1013 000042  
                            l1016 0000B0                              l1522 00006E  
                            l1532 00003E                              l1469 0000AA  
                            l1479 000082                              l7001 00006C  
                            OUT@b 00001F                              l7023 000012  
                            l7017 00007A                              l7105 0000B8  
                            l7027 000038                              l7131 000020  
                            l7211 000032                              l7203 000010  
                            l7051 000044                              l7141 000084  
                            l7109 000002                              l7205 00001A  
                            l7221 00003A                              l7053 00004E  
                            l7045 00002A                              l7151 00010C  
                            l7135 00002A                              l7143 000088  
                            l7207 00001E                              l8015 0001FC  
                            l7071 000092                              l7063 000072  
                            l7055 000052                              l7039 000018  
                            l7311 000158                              l7129 00001A  
                            l7081 00002E                              l7217 000002  
                            l8009 000196                              l7313 00015C  
                            l7147 0000A8                              l7083 00003E  
                            l8211 0001D2                              l8203 000182  
                            l7067 00007E                              l7411 000278  
                            l7093 000098                              l7085 000044  
                            l7501 00005E                              l8045 0004D0  
                            l7317 000164                              l7341 00002C  
                            l8301 0001A8                              l8061 000014  
                            l8143 0000A0                              l8151 0000BA  
                            l7183 00001E                              l8223 00024E  
                            l8215 0001FA                              l8207 0001AA  
                            l8231 0002A0                              l8071 000026  
                            l7503 000086                              l7511 000010  
                            l7167 000016                              l7423 0002B4  
                            l7343 00003E                              l7335 00000E  
                            l9007 00030E                __CFG_WPFP$PAGE_127 000000  
                            l8145 0000B4                              l9017 000060  
                            l7185 00002A                              l7513 00002E  
                            l7521 00006C                              l7433 00030E  
                            l7409 000272                              l7361 000100  
                            l7353 000080                              l8401 000690  
                            l8313 000230                              l8305 0001DC  
                            l8161 00003C                              l9025 00001A  
                            l7195 000060                              l7187 000030  
                            l8227 000278                              l8219 000224  
                            l8083 000024                              l7443 00033E  
                            l7451 000366                              l7435 000318  
                            l7371 00013E                              l7347 000048  
                            l7611 00000C                              l8323 0002B0  
                            l8059 00000A                              l7453 000372  
                            l7429 0002D6                              l7381 0001A4  
                            l7373 000144                              l7621 000088  
                            l8341 000394                              l8333 000330  
                            l8317 000264                              l8309 0001FC  
                            l8261 000034                              l8421 00012C  
                            l8405 000006                              l8501 0004C2  
                            l9045 000082                              l9029 000024  
                            l7535 000012                              l7631 00004E  
                            l8351 000414                              l8335 000348  
                            l8327 0002E4                              l8319 00027C  
                            l8263 00004C                              l9055 0000B4  
                            l7553 000026                              l8249 000016  
                            l7545 000072                              l7473 00041C  
                            l7465 0003B8                              l7393 0001F4  
                            l7385 0001B6                              l7369 000132  
                            l7625 000002                              l7633 000056  
                            l8361 000494                              l8345 0003C8  
                            l8329 0002FC                              l8281 0000DC  
                            l8409 000010                              l8441 000080  
                            l8433 000040                              l8521 00003E  
                            l8513 000006                              l7801 000182  
                            l8601 000126                              l7539 000034  
                            l7467 0003BE                              l7459 000398  
                            l7387 0001CE                              l7379 000198  
                            l7475 000428                              l7619 000082  
                            l8363 0004AC                              l8355 000448  
                            l8339 00037C                              l8347 0003E0  
                            l8275 0000B6                              l8419 00010A  
                            l7707 0000A6                              l8435 00005E  
                            l8427 000006                              l7803 00018A  
                            l8603 00013C                              l8611 00017E  
                            l9323 00016E                              l7581 000078  
                            l7549 00001C                              l7477 000448  
                            l7397 00020C                              l7637 00007A  
                            l8373 00052C                              l8357 000460  
                            l8277 0000BC                              l7741 000110  
                            l8509 0004FC                              l8541 000116  
                            l8517 000010                              l7813 000242  
                            l8621 0001D0                              l8605 000152  
                            l9261 000080                              l8199 00015A  
                            l7495 00002C                              l7671 000028  
                            l7399 000242                              l7663 000054  
                            l7911 00029E                              l7903 0001FA  
                            l8391 000610                              l8383 0005AC  
                            l8367 0004E0                              l8375 000544  
                            l8527 00008A                              l7831 000064  
                            l7823 00002C                              l7807 0001F6  
                            l8711 0003FA                              l8631 000224  
                            l8615 0001B8                              l8607 000168  
                            l9319 000166                              l9255 000064  
                            l7673 00002E                              l7905 000232  
                            l8385 0005C4                              l8369 0004F8  
                            l8289 00014E                              l7921 00004E  
                            l7649 000044                              l8457 0001B6  
                            l8545 000122                              l8553 000132  
                            l7809 00020E                              l8801 00076E  
                            l8721 0004A2                              l8705 0003EA  
                            l8641 000250                              l8625 0001DA  
                            l9281 00010E                              l9265 00008A  
                            l7691 000002                              l7915 0002D2  
                            l8395 000644                              l8379 000578  
                            l8299 000190                              l7739 00010A  
                            l8467 000226                              l8547 000126  
                            l8555 00014A                              l8539 000110  
                            l7763 000054                              l7843 000112  
                            l7835 000082                              l7827 000046  
                            l7771 00002C                              l8803 000782  
                            l8707 0003F0                              l8651 000296  
                            l8643 000256                              l8619 0001CA  
                            l6981 000056                              l6973 000034  
                            l6965 000018                              l7693 000012  
                            l7677 000072                              l7669 00001A  
                            l7909 000266                              l8397 00065C  
                            l8389 0005F8                              l8901 000320  
                            l7933 00000C                              l7925 000004  
                            l8549 00012A                              l7853 000182  
                            l7861 00020E                              l8741 00051C  
                            l8725 0004D8                              l8733 0004FC  
                            l8717 000498                              l8653 0002AA  
                            l8629 000210                              l8637 000234  
                            l8581 00006E                              l8565 00000E  
                            l8813 0007AC                              l9277 000106  
                            l6975 00003E                              l8559 000178  
                            l7855 00018A                              l7839 0000F8  
                            l7791 000112                              l7783 000082  
                            l7775 000046                              l8751 0005C8  
                            l8727 0004EC                              l8735 000510  
                            l8663 0002D6                              l8647 000260  
                            l8583 000084                              l8591 0000C6  
                            l6977 000042                              l6985 000062  
                            l6969 000024                              l7873 000034  
                            l8841 00005C                              l7929 000008  
                            l7697 000018                              l7865 000242  
                            l8761 00061C                              l8745 000526  
                            l8809 000788                              l8673 000322  
                            l8681 000346                              l8665 0002DC  
                            l8585 00009A                              l8577 000052  
                            l7891 00014C                              l7883 0000A8  
                            l7875 000040                              l7939 000010  
                            l7699 00004E                              l8499 0004AA  
                            l7859 0001F6                              l7795 00011C  
                            l7787 0000F8                              l7779 000064  
                            l8755 0005D2                              l8739 000516  
                            l8675 000336                              l8659 0002BA  
                            l8587 0000B0                              l8579 000058  
                            l6989 000074                              l7885 0000E0  
                            l8861 000170                              l8853 000122  
                            l8845 0000D4                              l8837 000036  
                            l7949 00004E                              l7973 000034  
                            l8773 000646                              l8693 00039C  
                            l8685 000362                              l8669 0002E6  
                            l8597 00010A                              l8941 000068  
                            l7895 000180                              l7879 000074  
                            l8871 0001C2                              l8863 000174  
                            l8855 000126                              l8847 0000D8  
                            l7967 000008                              l8775 00064C  
                            l8759 000608                              l8767 00062C  
                            l8687 00036A                              l8599 000110  
                            l8935 000056                              l8927 000030  
                            l7889 000114                              l7985 0000A6  
                            l8793 00074A                              l8785 000704  
                            l8769 000640                              l7995 000002  
                            l7899 0001C6                              l8883 000292  
                            l7979 000068                              l8795 00075E  
                            l8779 000656                              l8699 0003C2  
                            l8971 0000E0                              l8893 0002EA  
                            l8885 00029A                              l8877 000242  
                            l8869 0001BE                              l8789 00070E  
                            l8973 0000FE                              l8981 000158  
                            l8957 0000AA                              l8879 00026C  
                            l8975 00011C                              l8983 00016E  
                            l8967 0000D6                              STR_1 000003  
                            STR_2 00055C                              l8889 0002B6  
                            l8977 00013A                              STR_3 000000  
                            STR_5 00031F                              STR_6 0004E2  
                            STR_7 0004A8                              STR_8 000001  
                            STR_9 00057A              command_at_hand@value 000069  
                            u9000 00004E                              u9010 000080  
                            u8300 00002E                              u9100 0000B0  
                            u8310 000056                              u9007 000044  
                            u9105 0000A2                              u9017 000076  
                            u8330 00006C                              u8340 00006E  
                            u8350 0000C6                              u8360 0000C8  
                            u8328 00005A                              u8290 00002C  
                            u8640 00002C                              u8650 00005C  
                            u8647 000022                              u8680 000026  
                            u8657 000052                              u9810 000032  
                            u9740 000032                              u9900 00009C  
                            u9805 000024                              u9830 00003E  
                            u9806 000028                              u9910 0000C8  
                            u9735 000024                              u9760 00003E  
                            u9736 000028                              u9850 00004A  
                            u9907 000092                              u9780 00004A  
                            u9917 0000BE                              u9870 000032  
                            u9880 0000A2                              u9965 00000C  
                            u9966 00000E                              u9878 000036  
                            u9888 0000A6               ??_RTCC_from_caltime 000022  
                            _main 000000           __end_of_display_reserve 00001E  
        button_timer_interrupt@bt 000020                              _port 000004  
                            fsr0h 000FEA                              fsr1h 000FE2  
              i2___lwdiv@quotient 000004                              indf0 000FEF  
                            fsr0l 000FE9                              fsr2h 000FDA  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                  __end_of_I2C_Send 000016  
                            btemp 000000            __CFG_DSWDTOSC$T1OSCREF 000000  
                __end_of_I2C_Stop 00000A                              pclat 000FFA  
                __end_of_I2C_init 000012                              prodh 000FF4  
                            prodl 000FF3                              start 000000* 
                __end_of_ADC_init 00001C                     __CFG_IESO$OFF 000000  
      RTCC_adjust_time_dec@i_2036 00003D                __size_of_CTMU_init 000000  
              __size_of_CTMU_read 000000         __end_of_charge_time_count 000058  
                    ___param_bank 000010                     _I2C_LCD_Clear 000000  
                  ??_command_time 000022                             ??_ADC 000020  
                           ADC@ch 000021                     ADC_init@p_ref 00001E  
                           ??_ISR 000010            __size_of_I2C_IdleCheck 000000  
                           ??_OUT 00001F                      print_time@tx 000043  
            command_operation@op0 00000B              command_operation@op1 00000D  
            command_operation@op2 00000F              command_operation@op3 000011  
              __size_ofi2_LED_OUT 000000                 ??_RTCC_to_caltime 000022  
                   __CFG_PLLDIV$2 000000                      _BAUDCON1bits 000F7E  
       __end_of_RTCC_from_caltime 000036                             ?_main 000000  
                  ??_get_quot_rem 000022                    ??_display_port 000006  
                 __end_of___awdiv 00009C                             _ADRES 000FC3  
               ?_command_get_data 00002F                             STR_10 00049C  
                           STR_11 000002                             STR_12 000548  
                           STR_20 000500                             STR_21 000007  
                           STR_13 000587                             STR_30 000007  
                           STR_14 00052C                             STR_22 0004F9  
                           STR_15 000007                             STR_31 00057D  
                           STR_23 0003C8                             STR_32 000568  
                           STR_16 000564                             STR_40 000484  
                           STR_24 00046A                             STR_33 000000  
                           STR_17 000002                             STR_25 00044C  
                           STR_41 00040C                             STR_26 000560  
                           STR_18 00054D                             STR_42 000543  
                           STR_34 00053E                             STR_50 000526  
                           STR_35 000000                             STR_19 00058D  
                           STR_43 00057F                             STR_27 00056B  
                           STR_51 0004B3                             STR_36 000000  
                           STR_60 000000                             STR_28 00056E  
                           STR_52 000557                             STR_44 0000A9  
                 __end_of___awmod 00007E                             STR_37 000000  
                           STR_61 000000                             STR_29 000571  
                           STR_45 0004C7                             STR_53 00038B  
                           STR_38 000000                             STR_46 0004D0  
                           STR_70 0003A3                             STR_62 000368  
                           STR_54 000344                             STR_39 000007  
                           STR_47 000577                             STR_71 000574  
                           STR_63 000552                             STR_55 000532  
                           STR_80 000001                             STR_56 000003  
                           STR_64 00058B                             STR_48 000490  
                           STR_72 00042C                             STR_49 000003  
                           STR_65 000000                             STR_73 000002  
                           STR_81 000000                             STR_57 0003B6  
                           STR_66 000000                             STR_82 000000  
                           STR_90 00000B                             STR_74 000507  
                           STR_58 0004EA                             STR_91 000001  
                           STR_75 000001                             STR_59 000007  
                           STR_83 000000                             STR_67 0002E1  
                           STR_76 000000                             STR_84 000002  
                           STR_68 00000B                             STR_92 000000  
                           STR_77 000000                             STR_69 000001  
                           STR_93 000000                             STR_85 000538  
                           STR_78 000000                             STR_94 000000  
                           STR_86 000003                             STR_87 000000  
                           STR_95 000002                             STR_79 00000B  
                           STR_88 000000                             STR_96 0004D9  
                           STR_89 000000                             STR_97 0003D9  
                           STR_98 000000                             STR_99 000000  
                 __end_of___lldiv 0000BC                             u11000 000464  
                           u10150 000210                             u10160 00023A  
                           u10170 000264                             u11018 000468  
                           u10180 00028E                             u11320 000044  
                           u11080 000590                             u11330 000046  
                           u11340 000084                   ___awdiv@divisor 000020  
                           u11350 000086                             u10710 0000FC  
                           u11360 0000C4                   __end_of___llmod 000094  
                           u11370 0000C6                             u11098 000594  
                           u11380 000104                             u11390 000106  
                           u10685 000038                             _LATB2 007C52  
                           _LATA5 007C4D                             _LATC2 007C5A  
                           _LATA6 007C4E                             _LATA7 007C4F  
                           _LATB6 007C56                             u11907 00000E  
                           _LATB7 007C57                             u11917 000030  
                           u11927 000008                             u11937 000042  
                           u11947 00004C                             u11887 000030  
                           u11897 00005A                   __end_of___lwdiv 000078  
                 __end_of___lwmod 000048                             i2l711 00002A  
                           i2l713 000036                             i2l714 000042  
                 ___awdiv@counter 000000                             _TMR1H 000FCF  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                ??_command_get_data 000022  
          __size_of_ctmu_sampling 000000            __size_of_LED_indicator 000000  
             ___lmul@multiplicand 000011                    __CFG_FCMEN$OFF 000000  
            caltime_to_epoch@year 000021                   __end_of_dpowers 00000B  
                           _colon 000005                   ??_settings_loop 00003F  
                 __end_of_isdigit 00001E                __size_of_RTCC_init 000000  
                 ?_get_string_usb 00001E                __size_of_RTCC_loop 000000  
                ringbuf_delete@rb 00001E                             main@i 00001A  
               __end_of_I2C_Start 00002A                   __end_of_my_atoi 0000A0  
                           tablat 000FF5                 __end_of_ANALOG_IN 000028  
                 __end_of_my_utoa 000086                             plusw2 000FDB  
          ?_delay_timer_interrupt 000000                  __end_of_USB_loop 00007E  
      __size_of_ringbuf_backspace 000000                      ?_integrating 000000  
                           status 000FD8                   __end_of_sprintf 000456  
               ?_my_terminal_loop 000014                  __end_of_Delay_ms 000024  
                  delay_set@value 000020                __size_ofi2___awdiv 000000  
               month_length@month 000002                       CTMU_read@ch 00000D  
         __end_of_ringbuf_put_num 000080                __size_ofi2___lldiv 000000  
         __end_of_ringbuf_put_str 000064                ??_my_terminal_loop 000018  
              __size_ofi2___lwdiv 000000                  _put_string_usb$0 00001E  
                _put_string_usb$1 000020                      LED_OUT@value 00001E  
                  ?_I2C_LCD_Clear 000000                   __initialization 000000  
               i2___lldiv@divisor 000004                      __end_of_main 000172  
               i2___lldiv@counter 00000C                  __end_of_Auto_cut 000132  
             ringbuf_init@bufsize 000004                  RTCC_from_RTCC@ep 00002A  
                RTCC_from_RTCC@ct 000028        RTCC_adjust_time_inc@i_2023 00003D  
        ctmu_set_ratio@percentage 000020               my_terminal_loop@op0 000049  
             my_terminal_loop@op1 00005D               my_terminal_loop@op2 000071  
             my_terminal_loop@op3 00008C               my_terminal_loop@buf 000000  
                   print_time@str 000045                            ??_main 000022  
                   __activetblptr 000003         ??_RTCC_adjust_time_cursor 00001E  
                       ??_LED_OUT 00001F         ??_RTCC_adjust_time_toggle 00001E  
               __end_of_CTMU_init 000028            my_terminal_loop@i_2176 000066  
               __end_of_CTMU_read 0000BE                            _BCL1IF 007D0B  
                   _I2C_IdleCheck 000000                  ___llmod@dividend 00000D  
                          STR_100 000000                            STR_101 00041C  
                          STR_110 000000                            STR_102 000000  
                          STR_111 000000                            STR_103 0003EA  
               _I2C_LCD_SetCursor 000000                            STR_112 000000  
                          STR_104 000000                            STR_120 0003FB  
                          STR_121 000000                            STR_113 000000  
                          STR_105 00043C                            STR_130 000000  
                          STR_122 000000                            STR_114 000000  
                          STR_106 000000                            STR_131 000000  
                          STR_115 000000                            STR_123 000000  
                          STR_107 00045B                            STR_140 000000  
                          STR_116 000000                            STR_108 000000  
                          STR_132 000000                            STR_124 000520  
                          STR_133 000000                            STR_109 000000  
                          STR_117 000000                            STR_141 000581  
                          STR_125 00050E                            STR_142 000000  
                          STR_134 000000                            STR_126 000000  
                          STR_118 000514                            STR_127 000000  
                          STR_143 000000                            STR_135 000000  
                          STR_119 00051A                            STR_144 000021  
                          STR_128 000000                            STR_136 0004BE  
                          STR_145 000000                            STR_129 000000  
                          STR_137 000585                            STR_138 000583  
                          STR_146 000477                            STR_139 000589  
                          STR_147 0004F2               display_time_1602@ep 000036  
             display_time_1602@ct 000034                            _EECON2 000FA7  
                          _ANCON0 000F48                            _ANCON1 000F49  
                ___awdiv@dividend 00001E                         ??_USB_ISR 000000  
              I2C_LCD_Command@ans 000001                            i2l1033 0000BC  
                          i2l1522 000048                            i2l1469 000070  
               __end_ofi2_LED_OUT 000064                    __CFG_WDTEN$OFF 000000  
                          i2l6311 00001E                            i2l6321 00003E  
                          i2l6313 000022                            i2l6235 00004E  
                          i2l6251 000024                            i2l6261 000046  
                          i2l6245 000014                            i2l6309 000016  
                          i2l6333 000020                            i2l6423 000004  
                          i2l6257 00003A                            i2l6273 00006C  
                          i2l6433 00005C                            i2l6259 000042  
                          i2l6427 00000C                            i2l6291 000032  
                          i2l6277 00007A                            i2l6269 000062  
                          i2l6453 000004                            i2l6439 0000DA  
                          i2l6447 000120                            i2l6287 000022  
                          i2l6463 0000D4                            i2l6473 00000C  
                          i2l6289 00002E                            i2l6457 00000C  
                          i2l6299 000062                            i2l6477 000054  
                          i2l6469 000004                            i2l6843 000062  
                          i2l6853 000080                            i2l6863 0000A2  
                          i2l6839 000056                ?_I2C_LCD_SetCursor 000002  
                          _RCREG1 000FAF                            _RTCCAL 000F3E  
                          _SPBRG1 000FB0                            _SSP1IF 007CF3  
                  __CFG_WPCFG$OFF 000000                  ?_display_reserve 000000  
                          _TXREG1 000FAE                    __CFG_WPDIS$OFF 000000  
                   _ctmu_sampling 000000                     _LED_indicator 000000  
              epoch_to_caltime@ep 000023                epoch_to_caltime@ct 000021  
               _command_time$3370 000008               ??_I2C_LCD_SetCursor 000022  
                  __CFG_XINST$OFF 000000                 ?_epoch_to_caltime 000021  
         __size_of_ctmu_set_ratio 000000        __size_of_charge_time_count 000000  
                ringbuf_put_num@i 00002C             caltime_to_epoch@epoch 000023  
                    ?_ringbuf_pop 000020                      ?_ringbuf_num 00001E  
                    ?_ringbuf_put 000020             caltime_to_epoch@month 000027  
                __end_of_bootload 000042                            ___lmul 000000  
                 _caltime_to_RTCC 000000                            ___wmul 000000  
              ??_epoch_to_caltime 000025                         ??___awdiv 000022  
                       ??___awmod 000022      __end_of_RTCC_adjust_time_dec 000266  
    __end_of_RTCC_adjust_time_inc 000266                            _d_to_x 000000  
                  settings_loop@i 000057                    settings_loop@j 00005D  
                       ??___lldiv 00001E              ringbuf_put_num@value 000029  
                    ?_timer0_init 000000                         ??___llmod 00001E  
               __end_of_RTCC_init 00002E                      ?_timer1_init 00001E  
                       ??___lwdiv 000022                 __end_of_RTCC_loop 000044  
                       ??___lwmod 000022                      ?_timer3_init 000000  
                    ?_normal_loop 000000                            _ctmu_m 00002D  
                          clear_0 000008                            clear_1 00001A  
                          clear_2 000026                            clear_3 000032  
                          clear_4 00003E                   __CFG_CLKOEC$OFF 000000  
                ___awdiv@quotient 000002                   ___awmod@divisor 000020  
            __size_of_display_LCD 000000                   ___awmod@counter 000000  
                          _x_to_d 000000                            _rx_buf 000085  
      __size_of_RTCC_from_caltime 000000                            _usb_rx 00008D  
                          _usb_tx 000016                 _command_operation 000000  
                          _tx_buf 000011              __size_of_display_dec 000000  
                          _strcpy 000000              __size_of_display_now 000000  
           display_port@port_char 00000B                    i2___awdiv@sign 000005  
       __size_of_caltime_to_epoch 000000                      __pdataCOMRAM 000000  
                       ??_isdigit 00001E                ?_command_operation 000009  
               __end_ofi2___awdiv 000084                         ?_I2C_Send 000000  
            command_get_data@item 000031                         ?_I2C_Stop 000000  
               __end_ofi2___lldiv 000082                 __end_ofi2___lwdiv 000052  
                    __mediumconst 000000*                    _cut_time_flag 000008  
                       ?_I2C_init 000000         __end_of_I2C_LCD_SetCursor 00002C  
                          tblptrh 000FF7                            tblptrl 000FF6  
                       ??_my_atoi 00001B                            tblptru 000FF8  
                       ?_ADC_init 000000                    ?_I2C_IdleCheck 000000  
                       ??_my_utoa 000022            delay_timer_interrupt@d 000000  
                       ??_sprintf 000032              __end_of_command_time 00030C  
             display_reserve@time 000000               ??_command_operation 000022  
    my_terminal_loop@command_init 000015              __CFG_LS48MHZ$SYS48X8 000000  
                      __accesstop 000000*          __end_of__initialization 00006E  
                    CTMU_read@sum 00000E              __end_of_get_quot_rem 0000D4  
            __end_of_display_port 0000C2                    ?_ctmu_sampling 000000  
                  ?_LED_indicator 000000                     ___rparam_used 000001  
                 ??_I2C_LCD_Clear 000002                   _RTCC_from_epoch 000000  
              command_at_hand@max 000068                command_at_hand@min 000067  
                ?_ringbuf_put_num 000027                  ?_ringbuf_put_str 000027  
            __CFG_WPEND$PAGE_WPFP 000000                  LED_indicator@cnt 000000  
                  __pcstackCOMRAM 000000                i2___lldiv@dividend 000000  
            sleep_loop@sleep_flag 000010                      __pidataBANK0 000000  
       __end_of_command_operation 0006AA                 ?_port_button_loop 000000  
                 __CFG_DSWDTPS$G2 000000                   _I2C_LCD_Command 000000  
                  _put_string_usb 000000*               __size_of_delay_set 000000  
              ??_port_button_loop 000022                         ?_USB_init 000000  
                       ?_USB_loop 000000                  I2C_LCD_Command@c 000000  
                      ??_I2C_Send 000020                        ??_I2C_Stop 000020  
         __size_of_ringbuf_delete 000000                        ??_I2C_init 00001E  
                       ?_Delay_ms 00001E                        ??_ADC_init 00001E  
      caltime_to_epoch@month_1941 000022            RTCC_adjust_time_dec@ep 000037  
          RTCC_adjust_time_dec@ct 000035                command_get_data@tx 00002F  
                    sprintf@width 000041                i2___lldiv@quotient 000008  
          RTCC_adjust_time_inc@ep 000037            RTCC_adjust_time_inc@ct 000035  
              __size_of_main_init 000000                        __pbssBANK0 000000  
                      __pbssBANK1 000000                        __pbssBANK2 000000  
                       ?_Auto_cut 000000              display_now@pres_item 00001E  
                  LED_indicator@i 00000B                         ISR@cnt_t0 000009  
                       ISR@cnt_t1 00000D           __end_of_caltime_to_RTCC 0000D0  
                 _RTCC_to_caltime 000000              __size_of_integrating 000000  
              display_char_puts@i 000000             __end_of_weekday_3char 00009F  
                         ?___lmul 00000D                           ?___wmul 000013  
                         ?_d_to_x 000000                    i2LED_OUT@value 000000  
                  command_time@tx 000000              I2C_LCD_SetCursor@col 000005  
                  ___lmul@product 000015              I2C_LCD_SetCursor@row 000002  
                         ?_x_to_d 000000                      I2C_Send@data 000020  
                         ?_strcpy 00001E                        ??_USB_init 00001E  
                      ??_USB_loop 000022                __size_of_my_utoa32 000000  
                         _LED_OUT 000000                  ??_get_string_usb 000022  
              __CFG_OSC$INTOSCPLL 000000                   ??_I2C_IdleCheck 00001E  
              __size_of_my_strcmp 000000           my_terminal_loop@command 00001E  
                      ANALOG_IN@b 00001E                        ??_Delay_ms 000020  
      __size_of_I2C_LCD_SetCursor 000000            I2C_LCD_SetCursor@F8672 000000  
                 __CFG_WDTPS$1024 000000                           _SPBRGH1 000F7F  
                         _SSP1ADD 000FC8                           _SSP1BUF 000FC9  
                         _RTCVALH 000F3B                           _RTCVALL 000F3A  
         ??_delay_timer_interrupt 000002                           _USB_ISR 000000* 
         __end_of_RTCC_from_epoch 000022                         ?_bootload 000000  
            timer1_init@prescaler 000020              _RTCC_adjust_time_dec 000000  
            _RTCC_adjust_time_inc 000000                        ??_Auto_cut 000019  
                __CFG_CFGPLLEN$ON 000000          ??_button_timer_interrupt 000023  
                 ??_ctmu_sampling 000022                   ??_LED_indicator 000008  
       __size_of_command_get_data 000000                 __end_of_delay_set 000022  
                   ?_month_length 000002               epoch_to_caltime@day 000029  
               RTCC_from_epoch@ep 000033                 RTCC_from_epoch@ct 000031  
             epoch_to_caltime@num 00002D                         _I2C_Start 000000  
        __size_of_command_at_hand 000000                         _ANALOG_IN 000000  
                         __Hparam 000000                    _ctmu_set_ratio 000000  
                         __Lparam 000000                      USB_loop@data 000029  
                      _ctmu_ratio 000007           __end_of_I2C_LCD_Command 000036  
               ringbuf_put_num@rb 000027                    display_LCD@str 000039  
               ringbuf_put_str@rb 000027                     ?_ringbuf_init 000000  
                         ___awdiv 000000                   __size_of___lmul 000000  
                         ___awmod 000000                           ___lldiv 000000  
                 __size_of___wmul 000000                           ___llmod 000000  
           ringbuf_put_num@digits 00002B                           ___lwdiv 000000  
                 ?_put_string_usb 00001E                           ___lwmod 000000  
                 __size_of_d_to_x 000000        __size_of_command_operation 000000  
            __size_of_ringbuf_pop 000000              __size_of_ringbuf_num 000000  
            __size_of_ringbuf_put 000000                   __CFG_STVREN$OFF 000000  
               __end_of_main_init 0000A4       epoch_to_caltime@month_cache 000000  
                         __pcinit 000000                           __ramtop 000000* 
       __size_of_my_terminal_loop 000000              __size_of_timer0_init 000000  
                         _halfsec 00000E              __size_of_timer1_init 000000  
                         __ptext0 000000                           __ptext1 000000  
                         __ptext2 000000                           __ptext3 000000  
                         __ptext4 000000                           __ptext5 000000  
                         __ptext6 000000                           __ptext7 000000  
                         __ptext8 000000                           __ptext9 000000  
                   I2C_LCD_Putc@c 000000              __size_of_timer3_init 000000  
            __size_of_normal_loop 000000                   __size_of_x_to_d 000000  
                   I2C_LCD_Puts@s 000000                 port_button_loop@i 000003  
                       _T0CONbits 000FD5                      __size_of_ADC 000000  
                _time_change_flag 000013                  _caltime_to_epoch 000000  
                 __size_of_strcpy 000000                      __size_of_ISR 000000  
                       _T1CONbits 000FCD                      __size_of_OUT 000000  
                         _dpowers 000001           __size_of_RTCC_from_RTCC 000000  
           __size_of_command_time 000000                           _isdigit 000000  
                       _T3CONbits 000F79                  ___awmod@dividend 00001E  
                       _T5CONbits 000F22                           _my_atoi 000000  
                         _my_utoa 000000                           _sprintf 000000  
         __end_of_RTCC_to_caltime 0000AA             ?_RTCC_adjust_time_dec 000035  
           ?_RTCC_adjust_time_inc 000035             __size_of_get_quot_rem 000000  
           __size_of_display_port 000000              end_of_initialization 00006E  
                      ??_bootload 000022                        delay_set@d 00001E  
                       _CTMU_init 000000                         _CTMU_read 000000  
           __end_of_settings_loop 0007CA                      _CTMUCONHbits 000FB3  
                    _CTMUCONLbits 000FB2                    ??_month_length 000003  
                  display_dec@dec 000033                    display_dec@str 000029  
          __end_of_ctmu_set_ratio 0000E6                       sleep_loop@i 000006  
                 _pres_print_item 00000E                  ?_caltime_to_RTCC 000005  
                      ?_I2C_Start 000020                         i2_LED_OUT 000000  
               __end_of_my_utoa32 0000C0                   ___lldiv@divisor 000004  
                      ?_ANALOG_IN 000000              timer3_init@prescaler 00001F  
               __end_of_my_strcmp 0000A0                   ___lldiv@counter 00000C  
                  ??_ringbuf_init 00001E                           postdec1 000FE5  
                         postdec2 000FDD                        _sleep_loop 000000  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE                   _next_print_item 00000D  
                    _command_time 000000                  __CFG_DSBOREN$OFF 000000  
                       _RTCC_init 000000                         _RTCC_loop 000000  
                    _display_char 000064                      _display_flag 00000B  
                      _print_data 00000F         epoch_to_caltime@day_cache 000002  
                    _get_quot_rem 000000                      _display_port 000000  
                      _print_time 000000                        _print_port 00000F  
                  _ringbuf_delete 000000         __size_of_epoch_to_caltime 000000  
                __CFG_CPUDIV$OSC1 000000               RTCC_from_caltime@ep 000033  
             RTCC_from_caltime@ct 000031                 __size_of_I2C_Send 000000  
               __size_of_I2C_Stop 000000                         i2___awdiv 000000  
               __size_of_I2C_init 000000                 i2___lwdiv@divisor 000002  
                       i2___lldiv 000000                 __size_of_ADC_init 000000  
                       i2___lwdiv 000000                 i2___lwdiv@counter 000006  
                ?_RTCC_from_epoch 000031                        ?_CTMU_init 000000  
                      ?_CTMU_read 00001E                         Auto_cut@i 00001B  
 __size_of_button_timer_interrupt 000000           timer1_init@clock_select 00001E  
             command_at_hand@hand 000065                   ?_ctmu_set_ratio 000000  
                __CFG_IOL1WAY$OFF 000000                i2___awdiv@dividend 000000  
                      ?i2_LED_OUT 000000               __CFG_MSSP7B_EN$MSK7 000000  
               LED_indicator@cntf 000003                  ?_I2C_LCD_Command 000000  
                  ringbuf_init@rb 000000                     ??_display_LCD 000022  
        __size_of_display_reserve 000000                    ringbuf_pop@ret 00000A  
                   ??_display_dec 000022                     ??_display_now 00001E  
                  __end_of___lmul 000076                 ??_command_at_hand 000022  
        ?_RTCC_adjust_time_cursor 000000                    __end_of___wmul 000036  
                    integrating@i 00000F                    __end_of_d_to_x 000022  
                   __pidataCOMRAM 000000          ?_RTCC_adjust_time_toggle 000000  
          __end_of_ringbuf_delete 000022                        ?_RTCC_init 000000  
                      ?_RTCC_loop 000000                  __CFG_DSWDTEN$OFF 000000  
                  __end_of_x_to_d 000018             epoch_to_caltime@month 00002C  
                  __end_of_strcpy 000036               start_initialization 000000  
                      CTMU_read@i 000012                  month_length@year 000007  
                     __end_of_ADC 000028                i2___awdiv@quotient 000006  
                     __end_of_ISR 0000F8                       __end_of_OUT 000064  
               __size_of_USB_loop 000000                     ?_I2C_LCD_Putc 000000  
                   ?_I2C_LCD_Puts 000000            ??_RTCC_adjust_time_dec 000039  
          ??_RTCC_adjust_time_inc 000039                     ?_I2C_LCD_init 000000  
                      ?i2___awdiv 000000                my_terminal_loop@rx 000016  
              my_terminal_loop@tx 000014                 __size_of_Delay_ms 000000  
                      ?i2___lldiv 000000                  ?_RTCC_to_caltime 000020  
       __size_of_port_button_loop 000000                        ?i2___lwdiv 000000  
                   _data_out_flag 00000A                  _command_get_data 000000  
                 ___llmod@divisor 000011             my_terminal_loop@ascii 000067  
               __size_of_Auto_cut 000000                       ??_I2C_Start 000021  
                 ___llmod@counter 00001E                       ??_ANALOG_IN 00001E  
           __end_of_I2C_LCD_Clear 00001A                      _ctmu_value_m 000000  
             ringbuf_put_num@temp 00002D                          ??___lmul 000022  
                     ?_sleep_loop 000000                          ??___wmul 000022  
                  USB_loop@rx_len 000027                          ??_d_to_x 000022  
               __CFG_ADCSEL$BIT12 000000                       __pdataBANK0 000000  
             command_get_data@str 000033          __size_of_ringbuf_put_num 000000  
        __size_of_ringbuf_put_str 000000            _button_timer_interrupt 000000  
                _my_terminal_loop 000000                          ??_x_to_d 00001E  
                 ?_ringbuf_delete 00001E                          ??_strcpy 000022  
            __end_of_month_length 0000CE                    _RTCC_from_RTCC 000000  
             __end_of_display_LCD 000520                       ?_print_time 000043  
                     __pbssBIGRAM 000000                          ?_LED_OUT 00001E  
             __end_of_display_dec 000056               __end_of_display_now 000012  
                     __pbssCOMRAM 000000                 command_at_hand@tx 000063  
             RTCC_to_caltime@dumy 000000                     __pcstackBANK0 000000  
                   __pcstackBANK1 000000                     __pcstackBANK3 000000  
                  ??_I2C_LCD_Putc 000022                    ??_I2C_LCD_Puts 000002  
                        LED_OUT@b 00001F                    ??_I2C_LCD_init 000022  
           _command_get_data$3372 00003D                       _caltime_now 000026  
                   _delay_display 000019                      _isdigit$2849 00001F  
            __end_of_ringbuf_init 000054                          ?_USB_ISR 000000  
             settings_loop@i_2503 000059               settings_loop@i_2513 00005B  
             settings_loop@i_2508 00005A               settings_loop@i_2518 00005C  
             settings_loop@i_2499 000058               settings_loop@j_2512 00005E  
             settings_loop@j_2517 00005F                       ??_CTMU_init 00001E  
                     ??_CTMU_read 000020    __size_of_delay_timer_interrupt 000000  
   __end_of_delay_timer_interrupt 000048             display_char_puts@str0 00001E  
           display_char_puts@str1 000020                    normal_loop@str 000000  
                   ??_integrating 00000D                       sprintf@flag 00003F  
           RTCC_adjust_time_dec@i 00003E                 command_get_data@i 000032  
               __size_of_bootload 000000                       sprintf@prec 000036  
           RTCC_adjust_time_inc@i 00003E          __end_of_caltime_to_epoch 000288  
                     ??i2_LED_OUT 000001                   millis_timer@cnt 00000B  
                ??_put_string_usb 000022                  ___lwdiv@dividend 000019  
 __end_of_RTCC_adjust_time_cursor 00005C                         _delay_set 000000  
               settings_loop@strp 000060                         _edit_flag 00000C  
                 _settings_select 000011                         __pintcode 000000  
 __end_of_RTCC_adjust_time_toggle 000016                     __pmediumconst 000000  
               _display_char_puts 000000                          ?___awdiv 00001E  
                        ?___awmod 00001E                          ?___lldiv 000000  
              charge_time_count@i 000002                          ?___llmod 00000D  
                        ?___lwdiv 000019                          ?___lwmod 00001E  
                 I2C_LCD_Putc@ans 000001                ?_display_char_puts 00001E  
          __end_of_RTCC_from_RTCC 000022                   I2C_LCD_Puts@ans 000003  
                     ??_RTCC_init 00001E                       ??_RTCC_loop 000022  
                 command_time@op0 000002                   command_time@op1 000004  
                 command_time@op2 000006                 ??_display_reserve 000022  
                       _epoch_now 000031                         _main_init 000000  
                     I2C_Start@rw 000020                          ?_isdigit 000000  
                _epoch_to_caltime 000000                          _I2C_Send 000000  
                        OUT@value 00001E                          _I2C_Stop 000000  
             ??_display_char_puts 000022              __CFG_RTCOSC$T1OSCREF 000000  
                       _ctmu_flag 000006                          _I2C_init 000000  
                _display_LCD$3371 000043                          ?_my_atoi 000019  
                        _ADC_init 000000             __end_of_I2C_IdleCheck 000016  
                     _PADCFG1bits 000F3C                          ?_my_utoa 000020  
             ringbuf_backspace@rb 000020             _my_terminal_loop$3369 000064  
                ___lwdiv@quotient 00001E       command_operation@percentage 000013  
                     ??i2___awdiv 000004                          ?_sprintf 000020  
                     ??i2___lldiv 000008                        my_atoi@ret 00001F  
                      my_atoi@str 000019                       ??i2___lwdiv 000004  
             __size_of_sleep_loop 000000                         d_to_x@dec 000004  
                        _CTMUCONH 000FB3                          _CTMUCONL 000FB2  
                        _CTMUICON 000FB1          ringbuf_init@internal_buf 000002  
                  ___wmul@product 000017             __end_of_ctmu_sampling 000110  
           __end_of_LED_indicator 000124                          _IPR1bits 000F9F  
                        _IPR2bits 000FA2                          _PIE1bits 000F9D  
                        _PIE2bits 000FA0                          _IPR5bits 000F99  
                        _PIE5bits 000F91                   my_utoa32@digits 00001B  
             __size_of_print_time 000000         __end_of_display_char_puts 0000EC  
                      ?_delay_set 00001E                          _PIR1bits 000F9E  
                        _PIR2bits 000FA1                          i2u710_45 000024  
                        i2u710_46 000028                          i2u711_40 000032  
                        i2u713_40 00003E                          _PIR5bits 000F98  
      epoch_to_caltime@year_cache 000014                          i2u715_40 00004A  
                        i2u752_40 000032                     ??_ringbuf_pop 000006  
                   ??_ringbuf_num 000000                     ??_ringbuf_put 000023  
             __end_of_integrating 0000D8                 _display_time_1602 000000  
                       _my_utoa32 000000                          _SSP1CON1 000FC6  
                        _SSP1CON2 000FC5                     ??_timer0_init 00001E  
                   ??_timer1_init 00001F                        my_utoa32@d 00001C  
                     _display_LCD 000000                     ??_timer3_init 00001E  
                      my_utoa32@v 00001D                     ??_normal_loop 000022  
                       _my_strcmp 000000                          _SSP1STAT 000FC7  
                        _UCONbits 000F65                ?_display_time_1602 000034  
                     _display_dec 000000                       _display_now 000000  
                 ?_RTCC_from_RTCC 000028                        my_utoa@str 000020  
                      _ADCON0bits 000FC2                        _ADCON1bits 000FC1  
               ___wmul@multiplier 000013                  __CFG_SOSCSEL$LOW 000000  
  button_timer_interrupt@sw_value 000022                          _USB_init 000000* 
                        _USB_loop 000000                        ?_main_init 000000  
             ??_display_time_1602 000038                 i2___awdiv@divisor 000002  
                __size_of_LED_OUT 000000                          _Delay_ms 000000  
               i2___awdiv@counter 000004                 ??_ringbuf_put_num 000022  
               ??_ringbuf_put_str 000022                     ringbuf_pop@rb 000020  
                   ringbuf_num@rb 00001E                     I2C_Start@adrs 000021  
                   ringbuf_put@rb 000020                 ___lmul@multiplier 00000D  
                ??_ctmu_set_ratio 000022                       _INTCON2bits 000FF1  
        display_reserve@next_item 000002                  _port_button_loop 000000  
                        _Auto_cut 000000              epoch_to_caltime@year 00002B  
               my_terminal_loop@i 000068                   _command_at_hand 000000  
       __end_of_display_time_1602 00014E                          __Hrparam 000000* 
                        __Lrparam 000000*             __end_of_I2C_LCD_Putc 000036  
            __end_of_I2C_LCD_Puts 00008C                     _weekday_3char 000083  
            __end_of_I2C_LCD_init 000054                        ?_my_utoa32 000015  
           __size_of_month_length 000000                        ?_my_strcmp 00001E  
              ringbuf_put_str@str 000029          __size_of_caltime_to_RTCC 000000  
                __size_of___awdiv 000000                  __size_of___awmod 000000  
               I2C_IdleCheck@mask 00001F                  __size_of___lldiv 000000  
                __size_of___llmod 000000                  __size_of___lwdiv 000000  
                __size_of___lwmod 000000          __end_of_command_get_data 0004E8  
          __size_of_settings_loop 000000               __end_of_ringbuf_pop 0000BE  
             __end_of_ringbuf_num 0000D8               __end_of_ringbuf_put 0000D0  
             __end_of_timer0_init 000030             __size_of_ringbuf_init 000000  
               display_port@onoff 00009F               __end_of_timer1_init 000044  
                      sprintf@len 00003D               __end_of_timer3_init 000026  
             __end_of_normal_loop 00032C                        sprintf@val 00003B  
                        _data_out 000009                  __size_of_isdigit 000000  
                      i2LED_OUT@b 000001                  settings_loop@str 000043  
                 ___lwdiv@divisor 00001B                   ___lwdiv@counter 00001D  
                  _settings_state 000012              timer0_init@prescaler 00001F  
                        __ptext10 000000                          __ptext11 000000  
                        __ptext20 000000                          __ptext12 000000  
                        __ptext21 000000                          __ptext13 000000  
                        __ptext30 000000                          __ptext22 000000  
                        __ptext14 000000                          __ptext31 000000  
                        __ptext23 000000                          __ptext15 000000  
                        __ptext40 000000                          __ptext32 000000  
                        __ptext24 000000                          __ptext16 000000  
                        __ptext41 000000                          __ptext33 000000  
                        __ptext25 000000                          __ptext17 000000  
                        __ptext50 000000                          __ptext42 000000  
                        __ptext34 000000                          __ptext26 000000  
                        __ptext18 000000                          __ptext51 000000  
                        __ptext43 000000                          __ptext35 000000  
                        __ptext27 000000                          __ptext19 000000  
                        __ptext60 000000                          __ptext52 000000  
                        __ptext44 000000                          __ptext36 000000  
                        __ptext28 000000                          __ptext61 000000  
                        __ptext53 000000                          __ptext45 000000  
                        __ptext37 000000                          __ptext29 000000  
                        __ptext70 000000                          __ptext62 000000  
                        __ptext54 000000                          __ptext46 000000  
                        __ptext38 000000                          __ptext71 000000  
                        __ptext63 000000                          __ptext55 000000  
                        __ptext47 000000                          __ptext39 000000  
                        __ptext80 000000                          __ptext72 000000  
                        __ptext64 000000                          __ptext56 000000  
                        __ptext48 000000                          __ptext81 000000  
                        __ptext73 000000                          __ptext65 000000  
                        __ptext57 000000                          __ptext49 000000  
                        __ptext90 000000                          __ptext82 000000  
                        __ptext74 000000                          __ptext66 000000  
                        __ptext58 000000                          __ptext91 000000  
                        __ptext83 000000                          __ptext75 000000  
                        __ptext67 000000                          __ptext59 000000  
                        __ptext92 000000                          __ptext84 000000  
                        __ptext76 000000                          __ptext68 000000  
                        __ptext93 000000                          __ptext85 000000  
                        __ptext77 000000                          __ptext69 000000  
                        __ptext94 000000                          __ptext86 000000  
                        __ptext78 000000                          __ptext95 000000  
                        __ptext87 000000                          __ptext79 000000  
                        __ptext96 000000                          __ptext89 000000  
                __size_of_my_atoi 000000                      _SSP1CON2bits 000FC5  
__size_of_RTCC_adjust_time_cursor 000000                  __size_of_my_utoa 000000  
__size_of_RTCC_adjust_time_toggle 000000                          _bootload 000000  
                __size_of_sprintf 000000             RTCC_loop@prev_halfsec 000004  
                      strcpy@from 000020          __end_of_my_terminal_loop 00033E  
                     _integrating 000000                     __size_of_main 000000  
                    _month_length 000000        __size_of_display_char_puts 000000  
        __size_of_RTCC_from_epoch 000000                       ??_delay_set 000022  
                  my_utoa32@value 000017                      ??_sleep_loop 000022  
                ??_ringbuf_delete 000020           ?_button_timer_interrupt 000020  
                        int$flags 000000                      _ringbuf_init 000000  
   __end_ofdisplay_port@port_char 000083                         x_to_d@hex 00001F  
       __end_ofdisplay_port@onoff 0000A9          __size_of_I2C_LCD_Command 000000  
                    ??_print_time 000022                    main_init@usbrx 000000  
                  main_init@usbtx 000000                       ??_main_init 000022  
                     _OSCTUNEbits 000F9B                        _INTCONbits 000FF2  
            ringbuf_put@asciicode 000022      I2C_LCD_SetCursor@row_offsets 000003  
                      Delay_ms@ms 00001E                   display_dec@edit 000028  
                        isdigit@c 000020           __end_of_command_at_hand 00006E  
                get_quot_rem@quot 000019                 RTCC_to_caltime@ct 000020  
   __size_of_RTCC_adjust_time_dec 000000                      normal_loop@i 00000F  
   __size_of_RTCC_adjust_time_inc 000000                          intlevel2 000000* 
                       sprintf@ap 000037                         sprintf@cp 000039  
              __end_of_sleep_loop 0000BC                         sprintf@sp 000020  
                   _settings_flag 000010                     _settings_loop 000000  
                ___lwmod@dividend 00001E                  ___lldiv@dividend 000000  
                _get_string_usb$0 00001E                  _get_string_usb$1 000020  
                      _RCSTA1bits 000FAC                 ?_caltime_to_epoch 000019  
               _ringbuf_backspace 000000        __size_of_display_time_1602 000000  
        __end_of_epoch_to_caltime 0001EC          __size_of_RTCC_to_caltime 000000  
                      _OSCCONbits 000FD3    __end_of_button_timer_interrupt 0002C8  
              __end_of_print_time 000098                ??_caltime_to_epoch 00001D  
              ?_ringbuf_backspace 000020                   _display_reserve 000000  
                        my_utoa@d 000025                          my_utoa@v 000026  
                     _ringbuf_pop 000000                       _ringbuf_num 000000  
                     _ringbuf_put 000000                       ??_my_utoa32 000022  
                     ??_my_strcmp 000000                       _timer0_init 000000  
                     _timer1_init 000000                       _timer3_init 000000  
                     _normal_loop 000000               ??_ringbuf_backspace 000006  
                 get_quot_rem@div 00001B                   get_quot_rem@num 00001D  
                      _RTCCFGbits 000F3F                          sprintf@c 000040  
                        sprintf@f 000022                  ___lldiv@quotient 000008  
               caltime_to_RTCC@ct 000005                   ___lwmod@divisor 000020  
               ??_caltime_to_RTCC 000022                          strcpy@cp 000000  
                        strcpy@to 00001E                   ___lwmod@counter 000000  
                    my_utoa32@str 000015            __size_of_I2C_LCD_Clear 000000  
 epoch_to_caltime@day_since_epoch 000027                    ?_settings_loop 000000  
                  _get_string_usb 000000*                    my_utoa@digits 000024  
       __end_of_ringbuf_backspace 000082             __size_of_I2C_LCD_Putc 000000  
           __size_of_I2C_LCD_Puts 000000             _delay_timer_interrupt 000000  
           __size_of_I2C_LCD_init 000000                      my_utoa@value 000022  
                ??_RTCC_from_RTCC 000022  
