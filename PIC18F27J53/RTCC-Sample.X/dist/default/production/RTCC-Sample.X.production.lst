

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Fri Oct 09 23:13:21 2015

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F27J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           	psect	idataCOMRAM
    48  0028BC                     __pidataCOMRAM:
    49                           	opt stack 0
    50                           
    51                           ;initializer for epoch_to_caltime@month_cache
    52  0028BC  01                 	db	1
    53                           
    54                           	psect	smallconst
    55  000F00                     __psmallconst:
    56                           	opt stack 0
    57  000F00  00                 	db	0
    58  000F01                     _dpowers:
    59                           	opt stack 0
    60  000F01  0001               	dw	1
    61  000F03  000A               	dw	10
    62  000F05  0064               	dw	100
    63  000F07  03E8               	dw	1000
    64  000F09  2710               	dw	10000
    65  000F0B                     __end_of_dpowers:
    66                           	opt stack 0
    67  000F0B                     _weekday_3char:
    68                           	opt stack 0
    69  000F0B  53                 	db	83
    70  000F0C  55                 	db	85
    71  000F0D  4E                 	db	78
    72  000F0E  00                 	db	0
    73  000F0F  4D                 	db	77
    74  000F10  4F                 	db	79
    75  000F11  4E                 	db	78
    76  000F12  00                 	db	0
    77  000F13  54                 	db	84
    78  000F14  55                 	db	85
    79  000F15  45                 	db	69
    80  000F16  00                 	db	0
    81  000F17  57                 	db	87
    82  000F18  45                 	db	69
    83  000F19  44                 	db	68
    84  000F1A  00                 	db	0
    85  000F1B  54                 	db	84
    86  000F1C  48                 	db	72
    87  000F1D  55                 	db	85
    88  000F1E  00                 	db	0
    89  000F1F  46                 	db	70
    90  000F20  52                 	db	82
    91  000F21  49                 	db	73
    92  000F22  00                 	db	0
    93  000F23  53                 	db	83
    94  000F24  41                 	db	65
    95  000F25  54                 	db	84
    96  000F26  00                 	db	0
    97  000F27                     __end_of_weekday_3char:
    98                           	opt stack 0
    99  0000                     _ANCON0	set	3912
   100  0000                     _ANCON1	set	3913
   101  0000                     _PADCFG1bits	set	3900
   102  0000                     _RTCCAL	set	3902
   103  0000                     _RTCCFGbits	set	3903
   104  0000                     _RTCVALH	set	3899
   105  0000                     _RTCVALL	set	3898
   106  0000                     _BAUDCON1bits	set	3966
   107  0000                     _EECON2	set	4007
   108  0000                     _INTCON2bits	set	4081
   109  0000                     _INTCONbits	set	4082
   110  0000                     _IPR1bits	set	3999
   111  0000                     _IPR2bits	set	4002
   112  0000                     _LATAbits	set	3977
   113  0000                     _OSCCONbits	set	4051
   114  0000                     _OSCTUNEbits	set	3995
   115  0000                     _PIE1bits	set	3997
   116  0000                     _PIE2bits	set	4000
   117  0000                     _PIR1bits	set	3998
   118  0000                     _PIR2bits	set	4001
   119  0000                     _PORTBbits	set	3969
   120  0000                     _RCREG1	set	4015
   121  0000                     _RCSTA1bits	set	4012
   122  0000                     _SPBRG1	set	4016
   123  0000                     _SPBRGH1	set	3967
   124  0000                     _T1CONbits	set	4045
   125  0000                     _T3CONbits	set	3961
   126  0000                     _TRISA	set	3986
   127  0000                     _TRISB	set	3987
   128  0000                     _TRISC	set	3988
   129  0000                     _TXREG1	set	4014
   130  0000                     _TXSTA1bits	set	4013
   131  0000                     _LATB2	set	31826
   132  000F27                     STR_1:
   133  000F27  09                 	db	9
   134  000F28  32                 	db	50	;'2'
   135  000F29  30                 	db	48	;'0'
   136  000F2A  25                 	db	37
   137  000F2B  30                 	db	48	;'0'
   138  000F2C  32                 	db	50	;'2'
   139  000F2D  64                 	db	100	;'d'
   140  000F2E  2F                 	db	47
   141  000F2F  25                 	db	37
   142  000F30  30                 	db	48	;'0'
   143  000F31  32                 	db	50	;'2'
   144  000F32  64                 	db	100	;'d'
   145  000F33  2F                 	db	47
   146  000F34  25                 	db	37
   147  000F35  30                 	db	48	;'0'
   148  000F36  32                 	db	50	;'2'
   149  000F37  64                 	db	100	;'d'
   150  000F38  28                 	db	40
   151  000F39  25                 	db	37
   152  000F3A  73                 	db	115	;'s'
   153  000F3B  29                 	db	41
   154  000F3C  25                 	db	37
   155  000F3D  30                 	db	48	;'0'
   156  000F3E  32                 	db	50	;'2'
   157  000F3F  64                 	db	100	;'d'
   158  000F40  3A                 	db	58	;':'
   159  000F41  25                 	db	37
   160  000F42  30                 	db	48	;'0'
   161  000F43  32                 	db	50	;'2'
   162  000F44  64                 	db	100	;'d'
   163  000F45  2D                 	db	45
   164  000F46  25                 	db	37
   165  000F47  30                 	db	48	;'0'
   166  000F48  32                 	db	50	;'2'
   167  000F49  64                 	db	100	;'d'
   168  000F4A  0A                 	db	10
   169  000F4B  00                 	db	0
   170  000F4C                     STR_16:
   171  000F4C  20                 	db	32
   172  000F4D  20                 	db	32
   173  000F4E  20                 	db	32
   174  000F4F  20                 	db	32
   175  000F50  20                 	db	32
   176  000F51  20                 	db	32
   177  000F52  20                 	db	32
   178  000F53  20                 	db	32
   179  000F54  00                 	db	0
   180  000F55                     STR_20:
   181  000F55  28                 	db	40
   182  000F56  6E                 	db	110	;'n'
   183  000F57  75                 	db	117	;'u'
   184  000F58  6C                 	db	108	;'l'
   185  000F59  6C                 	db	108	;'l'
   186  000F5A  29                 	db	41
   187  000F5B  00                 	db	0
   188  000F5C  25                 	db	37
   189  000F5D  30                 	db	48	;'0'
   190  000F5E  32                 	db	50	;'2'
   191  000F5F  64                 	db	100	;'d'
   192  000F60  00                 	db	0
   193  000F61  28                 	db	40
   194  000F62  00                 	db	0
   195  000F63                     STR_10:
   196  000F63  2D                 	db	45
   197  000F64  00                 	db	0
   198  000F65                     STR_5:
   199  000F65  2F                 	db	47
   200  000F66  00                 	db	0
   201  000F67                     STR_8:
   202  000F67  3A                 	db	58	;':'
   203  000F68  00                 	db	0
   204  0000                     
   205                           ; #config settings
   206  000F69  00                 	db	0	; dummy byte at the end
   207  0000                     
   208                           	psect	cinit
   209  002776                     __pcinit:
   210                           	opt stack 0
   211  002776                     start_initialization:
   212                           	opt stack 0
   213  002776                     __initialization:
   214                           	opt stack 0
   215                           
   216                           ; Clear objects allocated to BANK0 (15 bytes)
   217  002776  EE00  F09B         	lfsr	0,__pbssBANK0
   218  00277A  0E0F               	movlw	15
   219  00277C                     clear_0:
   220  00277C  6AEE               	clrf	postinc0,c
   221  00277E  06E8               	decf	wreg,f,c
   222  002780  E1FD               	bnz	clear_0
   223                           
   224                           ; Clear objects allocated to COMRAM (16 bytes)
   225  002782  EE00  F03A         	lfsr	0,__pbssCOMRAM
   226  002786  0E10               	movlw	16
   227  002788                     clear_1:
   228  002788  6AEE               	clrf	postinc0,c
   229  00278A  06E8               	decf	wreg,f,c
   230  00278C  E1FD               	bnz	clear_1
   231                           
   232                           ; Initialize objects allocated to COMRAM (1 bytes)
   233                           ; load TBLPTR registers with __pidataCOMRAM
   234  00278E  0EBC               	movlw	low __pidataCOMRAM
   235  002790  6EF6               	movwf	tblptrl,c
   236  002792  0E28               	movlw	high __pidataCOMRAM
   237  002794  6EF7               	movwf	tblptrh,c
   238  002796  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   239  002798  6EF8               	movwf	tblptru,c
   240  00279A  0009               	tblrd		*+	;fetch initializer
   241  00279C  CFF5 F04A          	movff	tablat,__pdataCOMRAM
   242  0027A0                     end_of_initialization:
   243                           	opt stack 0
   244  0027A0                     __end_of__initialization:
   245                           	opt stack 0
   246  0027A0  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   247  0027A2  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   248  0027A4  0100               	movlb	0
   249  0027A6  EF6B  F010         	goto	_main	;jump to C main() function
   250                           tblptru	equ	0xFF8
   251                           tblptrh	equ	0xFF7
   252                           tblptrl	equ	0xFF6
   253                           tablat	equ	0xFF5
   254                           postinc0	equ	0xFEE
   255                           wreg	equ	0xFE8
   256                           
   257                           	psect	bssCOMRAM
   258  00003A                     __pbssCOMRAM:
   259                           	opt stack 0
   260  00003A                     epoch_to_caltime@day_cache:
   261                           	opt stack 0
   262  00003A                     	ds	2
   263  00003C                     RTCC_loop@prev_halfsec:
   264                           	opt stack 0
   265  00003C                     	ds	1
   266  00003D                     epoch_to_caltime@year_cache:
   267                           	opt stack 0
   268  00003D                     	ds	1
   269  00003E                     _dec:
   270                           	opt stack 0
   271  00003E                     	ds	4
   272  000042                     _inc:
   273                           	opt stack 0
   274  000042                     	ds	4
   275  000046                     _mode:
   276                           	opt stack 0
   277  000046                     	ds	4
   278                           tblptru	equ	0xFF8
   279                           tblptrh	equ	0xFF7
   280                           tblptrl	equ	0xFF6
   281                           tablat	equ	0xFF5
   282                           postinc0	equ	0xFEE
   283                           wreg	equ	0xFE8
   284                           
   285                           	psect	dataCOMRAM
   286  00004A                     __pdataCOMRAM:
   287                           	opt stack 0
   288  00004A                     epoch_to_caltime@month_cache:
   289                           	opt stack 0
   290  00004A                     	ds	1
   291                           tblptru	equ	0xFF8
   292                           tblptrh	equ	0xFF7
   293                           tblptrl	equ	0xFF6
   294                           tablat	equ	0xFF5
   295                           postinc0	equ	0xFEE
   296                           wreg	equ	0xFE8
   297                           
   298                           	psect	bssBANK0
   299  00009B                     __pbssBANK0:
   300                           	opt stack 0
   301  00009B                     _time_change_flag:
   302                           	opt stack 0
   303  00009B                     	ds	1
   304  00009C                     _now:
   305                           	opt stack 0
   306  00009C                     	ds	14
   307                           tblptru	equ	0xFF8
   308                           tblptrh	equ	0xFF7
   309                           tblptrl	equ	0xFF6
   310                           tablat	equ	0xFF5
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           
   314                           	psect	cstackBANK0
   315  000060                     __pcstackBANK0:
   316                           	opt stack 0
   317  000060                     caltime_to_epoch@year:
   318                           	opt stack 0
   319  000060                     sprintf@prec:
   320                           	opt stack 0
   321  000060                     epoch_to_caltime@day_since_epoch:
   322                           	opt stack 0
   323                           
   324                           ; 2 bytes @ 0x0
   325  000060                     	ds	1
   326  000061                     caltime_to_epoch@month_1564:
   327                           	opt stack 0
   328  000061                     sprintf@ap:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0x1
   332  000061                     	ds	1
   333  000062                     epoch_to_caltime@day:
   334                           	opt stack 0
   335  000062                     caltime_to_epoch@epoch:
   336                           	opt stack 0
   337                           
   338                           ; 4 bytes @ 0x2
   339  000062                     	ds	1
   340  000063                     sprintf@cp:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x3
   344  000063                     	ds	1
   345  000064                     epoch_to_caltime@year:
   346                           	opt stack 0
   347                           
   348                           ; 1 bytes @ 0x4
   349  000064                     	ds	1
   350  000065                     epoch_to_caltime@month:
   351                           	opt stack 0
   352  000065                     sprintf@val:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x5
   356  000065                     	ds	1
   357  000066                     caltime_to_epoch@month:
   358                           	opt stack 0
   359  000066                     epoch_to_caltime@num:
   360                           	opt stack 0
   361                           
   362                           ; 4 bytes @ 0x6
   363  000066                     	ds	1
   364  000067                     sprintf@len:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x7
   368  000067                     	ds	2
   369  000069                     sprintf@flag:
   370                           	opt stack 0
   371                           
   372                           ; 1 bytes @ 0x9
   373  000069                     	ds	1
   374  00006A                     sprintf@c:
   375                           	opt stack 0
   376  00006A                     RTCC_from_epoch@tm:
   377                           	opt stack 0
   378                           
   379                           ; 2 bytes @ 0xA
   380  00006A                     	ds	1
   381  00006B                     sprintf@width:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0xB
   385  00006B                     	ds	1
   386  00006C                     RTCC_adjust_time_inc@tm:
   387                           	opt stack 0
   388  00006C                     RTCC_adjust_time_dec@tm:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0xC
   392  00006C                     	ds	2
   393  00006E                     ??_RTCC_adjust_time_inc:
   394  00006E                     ??_RTCC_adjust_time_dec:
   395                           
   396                           ; 0 bytes @ 0xE
   397  00006E                     	ds	4
   398  000072                     RTCC_adjust_time_inc@i_1745:
   399                           	opt stack 0
   400  000072                     RTCC_adjust_time_dec@i_1776:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x12
   404  000072                     	ds	1
   405  000073                     RTCC_adjust_time_inc@i:
   406                           	opt stack 0
   407  000073                     RTCC_adjust_time_dec@i:
   408                           	opt stack 0
   409                           
   410                           ; 1 bytes @ 0x13
   411  000073                     	ds	1
   412  000074                     RTCC_adjust_time_button@tm:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x14
   416  000074                     	ds	2
   417  000076                     RTCC_adjust_time_button@mode:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x16
   421  000076                     	ds	2
   422  000078                     RTCC_adjust_time_button@cnt_inc:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x18
   426  000078                     	ds	2
   427  00007A                     RTCC_adjust_time_button@cnt_dec:
   428                           	opt stack 0
   429                           
   430                           ; 2 bytes @ 0x1A
   431  00007A                     	ds	2
   432  00007C                     main@str:
   433                           	opt stack 0
   434                           
   435                           ; 30 bytes @ 0x1C
   436  00007C                     	ds	30
   437  00009A                     main@i:
   438                           	opt stack 0
   439                           
   440                           ; 1 bytes @ 0x3A
   441  00009A                     	ds	1
   442                           tblptru	equ	0xFF8
   443                           tblptrh	equ	0xFF7
   444                           tblptrl	equ	0xFF6
   445                           tablat	equ	0xFF5
   446                           postinc0	equ	0xFEE
   447                           wreg	equ	0xFE8
   448                           
   449                           	psect	cstackCOMRAM
   450  000001                     __pcstackCOMRAM:
   451                           	opt stack 0
   452  000001                     button_timer_interrupt@bt:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0x0
   456  000001                     	ds	2
   457  000003                     button_timer_interrupt@sw_value:
   458                           	opt stack 0
   459                           
   460                           ; 1 bytes @ 0x2
   461  000003                     	ds	1
   462  000004                     
   463                           ; 0 bytes @ 0x3
   464  000004                     	ds	2
   465  000006                     ??_ISR:
   466                           
   467                           ; 0 bytes @ 0x5
   468  000006                     	ds	15
   469  000015                     ??_isdigit:
   470  000015                     ??_x_to_d:
   471  000015                     ?___wmul:
   472                           	opt stack 0
   473  000015                     ?___awdiv:
   474                           	opt stack 0
   475  000015                     ?___awmod:
   476                           	opt stack 0
   477  000015                     ?___lwdiv:
   478                           	opt stack 0
   479  000015                     ?___lldiv:
   480                           	opt stack 0
   481  000015                     RTCC_adjust_time_toggle@tm:
   482                           	opt stack 0
   483  000015                     RTCC_adjust_time_cursor@tm:
   484                           	opt stack 0
   485  000015                     ___wmul@multiplier:
   486                           	opt stack 0
   487  000015                     ___awdiv@dividend:
   488                           	opt stack 0
   489  000015                     ___awmod@dividend:
   490                           	opt stack 0
   491  000015                     ___lwdiv@dividend:
   492                           	opt stack 0
   493  000015                     ___lldiv@dividend:
   494                           	opt stack 0
   495                           
   496                           ; 4 bytes @ 0x14
   497  000015                     	ds	1
   498  000016                     x_to_d@hex:
   499                           	opt stack 0
   500  000016                     _isdigit$2225:
   501                           	opt stack 0
   502                           
   503                           ; 1 bytes @ 0x15
   504  000016                     	ds	1
   505  000017                     isdigit@c:
   506                           	opt stack 0
   507  000017                     RTCC_to_caltime@tm:
   508                           	opt stack 0
   509  000017                     ___wmul@multiplicand:
   510                           	opt stack 0
   511  000017                     ___awdiv@divisor:
   512                           	opt stack 0
   513  000017                     ___awmod@divisor:
   514                           	opt stack 0
   515  000017                     ___lwdiv@divisor:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x16
   519  000017                     	ds	2
   520  000019                     RTCC_to_caltime@dumy:
   521                           	opt stack 0
   522  000019                     ___awdiv@counter:
   523                           	opt stack 0
   524  000019                     ___awmod@counter:
   525                           	opt stack 0
   526  000019                     ___lwdiv@counter:
   527                           	opt stack 0
   528  000019                     ___wmul@product:
   529                           	opt stack 0
   530  000019                     ___lldiv@divisor:
   531                           	opt stack 0
   532                           
   533                           ; 4 bytes @ 0x18
   534  000019                     	ds	1
   535  00001A                     ___awdiv@sign:
   536                           	opt stack 0
   537  00001A                     ___awmod@sign:
   538                           	opt stack 0
   539  00001A                     ___lwdiv@quotient:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x19
   543  00001A                     	ds	1
   544  00001B                     month_length@month:
   545                           	opt stack 0
   546  00001B                     ___awdiv@quotient:
   547                           	opt stack 0
   548                           
   549                           ; 2 bytes @ 0x1A
   550  00001B                     	ds	1
   551  00001C                     ??_month_length:
   552  00001C                     ?___lwmod:
   553                           	opt stack 0
   554  00001C                     ___lwmod@dividend:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x1B
   558  00001C                     	ds	1
   559  00001D                     d_to_x@dec:
   560                           	opt stack 0
   561  00001D                     ___lldiv@quotient:
   562                           	opt stack 0
   563                           
   564                           ; 4 bytes @ 0x1C
   565  00001D                     	ds	1
   566  00001E                     caltime_to_RTCC@tm:
   567                           	opt stack 0
   568  00001E                     ___lwmod@divisor:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x1D
   572  00001E                     	ds	2
   573  000020                     month_length@year:
   574                           	opt stack 0
   575  000020                     ___lwmod@counter:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0x1F
   579  000020                     	ds	1
   580  000021                     ?_sprintf:
   581                           	opt stack 0
   582  000021                     ___lldiv@counter:
   583                           	opt stack 0
   584  000021                     sprintf@sp:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0x20
   588  000021                     	ds	1
   589  000022                     ?___lmul:
   590                           	opt stack 0
   591  000022                     ___lmul@multiplier:
   592                           	opt stack 0
   593                           
   594                           ; 4 bytes @ 0x21
   595  000022                     	ds	1
   596  000023                     sprintf@f:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0x22
   600  000023                     	ds	3
   601  000026                     ___lmul@multiplicand:
   602                           	opt stack 0
   603                           
   604                           ; 4 bytes @ 0x25
   605  000026                     	ds	4
   606  00002A                     ___lmul@product:
   607                           	opt stack 0
   608                           
   609                           ; 4 bytes @ 0x29
   610  00002A                     	ds	4
   611  00002E                     ?_get_quot_rem:
   612                           	opt stack 0
   613  00002E                     get_quot_rem@quot:
   614                           	opt stack 0
   615  00002E                     caltime_to_epoch@tm:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x2D
   619  00002E                     	ds	2
   620  000030                     ??_caltime_to_epoch:
   621  000030                     get_quot_rem@div:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x2F
   625  000030                     	ds	2
   626  000032                     get_quot_rem@num:
   627                           	opt stack 0
   628                           
   629                           ; 4 bytes @ 0x31
   630  000032                     	ds	1
   631  000033                     ??_sprintf:
   632                           
   633                           ; 0 bytes @ 0x32
   634  000033                     	ds	1
   635  000034                     RTCC_from_RTCC@tm:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x33
   639  000034                     	ds	2
   640  000036                     epoch_to_caltime@tm:
   641                           	opt stack 0
   642                           
   643                           ; 2 bytes @ 0x35
   644  000036                     	ds	2
   645  000038                     ??_epoch_to_caltime:
   646                           
   647                           ; 0 bytes @ 0x37
   648  000038                     	ds	2
   649  00003A                     tblptru	equ	0xFF8
   650                           tblptrh	equ	0xFF7
   651                           tblptrl	equ	0xFF6
   652                           tablat	equ	0xFF5
   653                           postinc0	equ	0xFEE
   654                           wreg	equ	0xFE8
   655                           
   656                           ; 0 bytes @ 0x39
   657 ;;
   658 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   659 ;;
   660 ;; *************** function _main *****************
   661 ;; Defined at:
   662 ;;		line 115 in file "main.c"
   663 ;; Parameters:    Size  Location     Type
   664 ;;		None
   665 ;; Auto vars:     Size  Location     Type
   666 ;;  i               1   58[BANK0 ] unsigned char 
   667 ;;  str            30   28[BANK0 ] unsigned char [30]
   668 ;; Return value:  Size  Location     Type
   669 ;;                  2   96[None  ] int 
   670 ;; Registers used:
   671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   672 ;; Tracked objects:
   673 ;;		On entry : 0/0
   674 ;;		On exit  : 0/0
   675 ;;		Unchanged: 0/0
   676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   678 ;;      Locals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   680 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   681 ;;Total ram usage:       31 bytes
   682 ;; Hardware stack levels required when called:    8
   683 ;; This function calls:
   684 ;;		_RTCC_adjust_time_button
   685 ;;		_RTCC_loop
   686 ;;		_main_init
   687 ;;		_sprintf
   688 ;; This function is called by:
   689 ;;		Startup code after reset
   690 ;; This function uses a non-reentrant model
   691 ;;
   692                           
   693                           	psect	text0
   694  0020D6                     __ptext0:
   695                           	opt stack 0
   696  0020D6                     _main:
   697                           	opt stack 23
   698                           
   699                           ;main.c: 116: main_init();
   700                           
   701                           ;incstack = 0
   702  0020D6  ECB5  F012         	call	_main_init	;wreg free
   703                           
   704                           ;main.c: 117: INTCONbits.GIE = 1;
   705  0020DA  8EF2               	bsf	intcon,7,c	;volatile
   706  0020DC                     l3493:
   707                           
   708                           ;main.c: 120: RTCC_loop();
   709  0020DC  ECA0  F013         	call	_RTCC_loop	;wreg free
   710                           
   711                           ;main.c: 121: RTCC_adjust_time_button(&now, &mode, &inc, &dec);
   712  0020E0  0E9C               	movlw	low _now
   713  0020E2  0100               	movlb	0	; () banked
   714  0020E4  6F74               	movwf	RTCC_adjust_time_button@tm& (0+255),b
   715  0020E6  0E00               	movlw	high _now
   716  0020E8  0100               	movlb	0	; () banked
   717  0020EA  6F75               	movwf	(RTCC_adjust_time_button@tm+1)& (0+255),b
   718  0020EC  0E46               	movlw	low _mode
   719  0020EE  0100               	movlb	0	; () banked
   720  0020F0  6F76               	movwf	RTCC_adjust_time_button@mode& (0+255),b
   721  0020F2  0E00               	movlw	high _mode
   722  0020F4  0100               	movlb	0	; () banked
   723  0020F6  6F77               	movwf	(RTCC_adjust_time_button@mode+1)& (0+255),b
   724  0020F8  0E42               	movlw	low _inc
   725  0020FA  0100               	movlb	0	; () banked
   726  0020FC  6F78               	movwf	RTCC_adjust_time_button@cnt_inc& (0+255),b
   727  0020FE  0E00               	movlw	high _inc
   728  002100  0100               	movlb	0	; () banked
   729  002102  6F79               	movwf	(RTCC_adjust_time_button@cnt_inc+1)& (0+255),b
   730  002104  0E3E               	movlw	low _dec
   731  002106  0100               	movlb	0	; () banked
   732  002108  6F7A               	movwf	RTCC_adjust_time_button@cnt_dec& (0+255),b
   733  00210A  0E00               	movlw	high _dec
   734  00210C  0100               	movlb	0	; () banked
   735  00210E  6F7B               	movwf	(RTCC_adjust_time_button@cnt_dec+1)& (0+255),b
   736  002110  EC6C  F00F         	call	_RTCC_adjust_time_button	;wreg free
   737                           
   738                           ;main.c: 123: if (time_change_flag) {
   739  002114  0100               	movlb	0	; () banked
   740  002116  519B               	movf	_time_change_flag& (0+255),w,b
   741  002118  B4D8               	btfsc	status,2,c
   742  00211A  D7E0               	goto	l3493
   743                           
   744                           ; BSR set to: 0
   745                           ;main.c: 124: time_change_flag = 0;
   746  00211C  0E00               	movlw	0
   747  00211E  0100               	movlb	0	; () banked
   748  002120  6F9B               	movwf	_time_change_flag& (0+255),b
   749                           
   750                           ; BSR set to: 0
   751                           ;main.c: 125: char str[30];
   752                           ;main.c: 126: sprintf(str, "\t20%02d/%02d/%02d(%s)%02d:%02d-%02d\n",
   753                           ;main.c: 127: now.YY,
   754                           ;main.c: 128: now.MM,
   755                           ;main.c: 129: now.DD,
   756                           ;main.c: 130: weekday_3char[now.EE],
   757                           ;main.c: 131: now.hh,
   758                           ;main.c: 132: now.mm,
   759                           ;main.c: 133: now.ss);
   760  002122  0E7C               	movlw	low main@str
   761  002124  6E21               	movwf	sprintf@sp,c
   762  002126  0E00               	movlw	high main@str
   763  002128  6E22               	movwf	sprintf@sp+1,c
   764  00212A  0E27               	movlw	low STR_1
   765  00212C  6E23               	movwf	sprintf@f,c
   766  00212E  0E0F               	movlw	high STR_1
   767  002130  6E24               	movwf	sprintf@f+1,c
   768  002132  C0A6  F025         	movff	_now+10,?_sprintf+4
   769  002136  6A26               	clrf	?_sprintf+5,c
   770  002138  C0A5  F027         	movff	_now+9,?_sprintf+6
   771  00213C  6A28               	clrf	?_sprintf+7,c
   772  00213E  C0A4  F029         	movff	_now+8,?_sprintf+8
   773  002142  6A2A               	clrf	?_sprintf+9,c
   774  002144  0100               	movlb	0	; () banked
   775  002146  51A3               	movf	(_now+7)& (0+255),w,b
   776  002148  0D04               	mullw	4
   777  00214A  0E0B               	movlw	low _weekday_3char
   778  00214C  24F3               	addwf	prodl,w,c
   779  00214E  6E2B               	movwf	?_sprintf+10,c
   780  002150  0E0F               	movlw	high _weekday_3char
   781  002152  20F4               	addwfc	prodh,w,c
   782  002154  6E2C               	movwf	?_sprintf+11,c
   783  002156  C0A2  F02D         	movff	_now+6,?_sprintf+12
   784  00215A  6A2E               	clrf	?_sprintf+13,c
   785  00215C  C0A1  F02F         	movff	_now+5,?_sprintf+14
   786  002160  6A30               	clrf	?_sprintf+15,c
   787  002162  C0A0  F031         	movff	_now+4,?_sprintf+16
   788  002166  6A32               	clrf	?_sprintf+17,c
   789  002168  ECB5  F007         	call	_sprintf	;wreg free
   790                           
   791                           ;main.c: 134: for (uint8_t i = 0; str[i]; i++) {
   792  00216C  0E00               	movlw	0
   793  00216E  0100               	movlb	0	; () banked
   794  002170  6F9A               	movwf	main@i& (0+255),b
   795  002172  D00F               	goto	l3509
   796  002174                     l101:
   797  002174  A89E               	btfss	3998,4,c	;volatile
   798  002176  D7FE               	goto	l101
   799                           
   800                           ;main.c: 136: TXREG1 = str[i];
   801  002178  0100               	movlb	0	; () banked
   802  00217A  519A               	movf	main@i& (0+255),w,b
   803  00217C  0D01               	mullw	1
   804  00217E  0E7C               	movlw	low main@str
   805  002180  24F3               	addwf	prodl,w,c
   806  002182  6ED9               	movwf	fsr2l,c
   807  002184  0E00               	movlw	high main@str
   808  002186  20F4               	addwfc	prodh,w,c
   809  002188  6EDA               	movwf	fsr2h,c
   810  00218A  50DF               	movf	indf2,w,c
   811  00218C  6EAE               	movwf	4014,c	;volatile
   812                           
   813                           ; BSR set to: 0
   814  00218E  0100               	movlb	0	; () banked
   815  002190  2B9A               	incf	main@i& (0+255),f,b
   816  002192                     l3509:
   817                           
   818                           ; BSR set to: 0
   819  002192  0100               	movlb	0	; () banked
   820  002194  519A               	movf	main@i& (0+255),w,b
   821  002196  0D01               	mullw	1
   822  002198  0E7C               	movlw	low main@str
   823  00219A  24F3               	addwf	prodl,w,c
   824  00219C  6ED9               	movwf	fsr2l,c
   825  00219E  0E00               	movlw	high main@str
   826  0021A0  20F4               	addwfc	prodh,w,c
   827  0021A2  6EDA               	movwf	fsr2h,c
   828  0021A4  50DF               	movf	indf2,w,c
   829  0021A6  B4D8               	btfsc	status,2,c
   830  0021A8  D799               	goto	l3493
   831  0021AA  D7E4               	goto	l101
   832  0021AC                     __end_of_main:
   833                           	opt stack 0
   834                           tblptru	equ	0xFF8
   835                           tblptrh	equ	0xFF7
   836                           tblptrl	equ	0xFF6
   837                           tablat	equ	0xFF5
   838                           prodh	equ	0xFF4
   839                           prodl	equ	0xFF3
   840                           intcon	equ	0xFF2
   841                           postinc0	equ	0xFEE
   842                           wreg	equ	0xFE8
   843                           indf2	equ	0xFDF
   844                           fsr2h	equ	0xFDA
   845                           fsr2l	equ	0xFD9
   846                           status	equ	0xFD8
   847                           
   848 ;; *************** function _sprintf *****************
   849 ;; Defined at:
   850 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
   851 ;; Parameters:    Size  Location     Type
   852 ;;  sp              2   32[COMRAM] PTR unsigned char 
   853 ;;		 -> display_dec@s(4), main@str(30), 
   854 ;;  f               2   34[COMRAM] PTR const unsigned char 
   855 ;;		 -> STR_2(5), STR_1(37), 
   856 ;; Auto vars:     Size  Location     Type
   857 ;;  tmpval          4    0        struct .
   858 ;;  width           2   11[BANK0 ] int 
   859 ;;  len             2    7[BANK0 ] unsigned int 
   860 ;;  val             2    5[BANK0 ] unsigned int 
   861 ;;  cp              2    3[BANK0 ] PTR const unsigned char 
   862 ;;		 -> STR_20(7), weekday_3char(28), 
   863 ;;  ap              2    1[BANK0 ] PTR void [1]
   864 ;;		 -> ?_sprintf(2), 
   865 ;;  c               1   10[BANK0 ] char 
   866 ;;  flag            1    9[BANK0 ] unsigned char 
   867 ;;  prec            1    0[BANK0 ] char 
   868 ;; Return value:  Size  Location     Type
   869 ;;                  2   32[COMRAM] int 
   870 ;; Registers used:
   871 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   872 ;; Tracked objects:
   873 ;;		On entry : 0/0
   874 ;;		On exit  : 0/0
   875 ;;		Unchanged: 0/0
   876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   877 ;;      Params:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   878 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   879 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   880 ;;      Totals:        22      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   881 ;;Total ram usage:       35 bytes
   882 ;; Hardware stack levels used:    1
   883 ;; Hardware stack levels required when called:    3
   884 ;; This function calls:
   885 ;;		___lwdiv
   886 ;;		___lwmod
   887 ;;		___wmul
   888 ;;		_isdigit
   889 ;; This function is called by:
   890 ;;		_main
   891 ;;		_display_dec
   892 ;; This function uses a non-reentrant model
   893 ;;
   894                           
   895                           	psect	text1
   896  000F6A                     __ptext1:
   897                           	opt stack 0
   898  000F6A                     _sprintf:
   899                           	opt stack 27
   900                           
   901                           ;doprnt.c: 494: va_list ap;
   902                           ;doprnt.c: 499: signed char c;
   903                           ;doprnt.c: 501: int width;
   904                           ;doprnt.c: 506: signed char prec;
   905                           ;doprnt.c: 508: unsigned char flag;
   906                           ;doprnt.c: 523: union {
   907                           ;doprnt.c: 524: unsigned long vd;
   908                           ;doprnt.c: 525: double integ;
   909                           ;doprnt.c: 526: } tmpval;
   910                           ;doprnt.c: 528: unsigned int val;
   911                           ;doprnt.c: 529: unsigned len;
   912                           ;doprnt.c: 530: const char * cp;
   913                           ;doprnt.c: 533: *ap = __va_start();
   914                           
   915                           ; BSR set to: 0
   916                           ;incstack = 0
   917  000F6A  0E25               	movlw	low (?_sprintf+4)
   918  000F6C  0100               	movlb	0	; () banked
   919  000F6E  6F61               	movwf	sprintf@ap& (0+255),b
   920  000F70  0E00               	movlw	high (?_sprintf+4)
   921  000F72  0100               	movlb	0	; () banked
   922  000F74  6F62               	movwf	(sprintf@ap+1)& (0+255),b
   923                           
   924                           ;doprnt.c: 536: while(c = *f++) {
   925  000F76  D1F1               	goto	l3473
   926  000F78                     l3333:
   927                           
   928                           ; BSR set to: 0
   929                           ;doprnt.c: 538: if(c != '%')
   930  000F78  0E25               	movlw	37
   931  000F7A  0100               	movlb	0	; () banked
   932  000F7C  196A               	xorwf	sprintf@c& (0+255),w,b
   933  000F7E  B4D8               	btfsc	status,2,c
   934  000F80  D009               	goto	l3339
   935                           
   936                           ; BSR set to: 0
   937                           ;doprnt.c: 540: {
   938                           ;doprnt.c: 541: ((*sp++ = (c)));
   939  000F82  C021  FFD9         	movff	sprintf@sp,fsr2l
   940  000F86  C022  FFDA         	movff	sprintf@sp+1,fsr2h
   941  000F8A  C06A  FFDF         	movff	sprintf@c,indf2
   942                           
   943                           ; BSR set to: 0
   944  000F8E  4A21               	infsnz	sprintf@sp,f,c
   945  000F90  2A22               	incf	sprintf@sp+1,f,c
   946                           
   947                           ;doprnt.c: 542: continue;
   948  000F92  D1E3               	goto	l3473
   949  000F94                     l3339:
   950                           
   951                           ; BSR set to: 0
   952                           ;doprnt.c: 543: }
   953                           ;doprnt.c: 546: width = 0;
   954  000F94  0E00               	movlw	0
   955  000F96  0100               	movlb	0	; () banked
   956  000F98  6F6C               	movwf	(sprintf@width+1)& (0+255),b
   957  000F9A  0E00               	movlw	0
   958  000F9C  6F6B               	movwf	sprintf@width& (0+255),b
   959                           
   960                           ;doprnt.c: 548: flag = 0;
   961  000F9E  0E00               	movlw	0
   962  000FA0  0100               	movlb	0	; () banked
   963  000FA2  6F69               	movwf	sprintf@flag& (0+255),b
   964                           
   965                           ; BSR set to: 0
   966                           ;doprnt.c: 551: switch(*f) {
   967                           
   968                           ;doprnt.c: 550: for(;;) {
   969  000FA4  D004               	goto	l3345
   970  000FA6                     l3341:
   971                           
   972                           ;doprnt.c: 580: flag |= 0x04;
   973  000FA6  0100               	movlb	0	; () banked
   974  000FA8  8569               	bsf	sprintf@flag& (0+255),2,b
   975                           
   976                           ;doprnt.c: 581: f++;
   977  000FAA  4A23               	infsnz	sprintf@f,f,c
   978  000FAC  2A24               	incf	sprintf@f+1,f,c
   979  000FAE                     l3345:
   980  000FAE  C023  FFF6         	movff	sprintf@f,tblptrl
   981  000FB2  C024  FFF7         	movff	sprintf@f+1,tblptrh
   982  000FB6                     	if	0	;tblptru may be non-zero
   983  000FB6                     	endif
   984  000FB6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
   985  000FB6  0E00               	movlw	low (__mediumconst shr (0+16))
   986  000FB8  6EF8               	movwf	tblptru,c
   987  000FBA                     	endif
   988  000FBA  0008               	tblrd		*
   989  000FBC  50F5               	movf	tablat,w,c
   990                           
   991                           ; Switch size 1, requested type "space"
   992                           ; Number of cases is 1, Range of values is 48 to 48
   993                           ; switch strategies available:
   994                           ; Name         Instructions Cycles
   995                           ; simple_byte            4     3 (average)
   996                           ;	Chosen strategy is simple_byte
   997  000FBE  0A30               	xorlw	48	; case 48
   998  000FC0  B4D8               	btfsc	status,2,c
   999  000FC2  D7F1               	goto	l3341
  1000                           
  1001                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1002                           
  1003                           ;doprnt.c: 586: }
  1004                           
  1005                           ;doprnt.c: 585: break;
  1006  000FC4  C023  FFF6         	movff	sprintf@f,tblptrl
  1007  000FC8  C024  FFF7         	movff	sprintf@f+1,tblptrh
  1008  000FCC                     	if	0	;tblptru may be non-zero
  1009  000FCC                     	endif
  1010  000FCC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1011  000FCC  0E00               	movlw	low (__mediumconst shr (0+16))
  1012  000FCE  6EF8               	movwf	tblptru,c
  1013  000FD0                     	endif
  1014  000FD0  0008               	tblrd		*
  1015  000FD2  50F5               	movf	tablat,w,c
  1016  000FD4  EC1A  F014         	call	_isdigit
  1017  000FD8  A0D8               	btfss	status,0,c
  1018  000FDA  D0BC               	goto	l3395
  1019                           
  1020                           ;doprnt.c: 598: width = 0;
  1021  000FDC  0E00               	movlw	0
  1022  000FDE  0100               	movlb	0	; () banked
  1023  000FE0  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  1024  000FE2  0E00               	movlw	0
  1025  000FE4  6F6B               	movwf	sprintf@width& (0+255),b
  1026  000FE6                     l3351:
  1027                           
  1028                           ;doprnt.c: 600: width *= 10;
  1029  000FE6  C06B  F015         	movff	sprintf@width,___wmul@multiplier
  1030  000FEA  C06C  F016         	movff	sprintf@width+1,___wmul@multiplier+1
  1031  000FEE  0E00               	movlw	0
  1032  000FF0  6E18               	movwf	___wmul@multiplicand+1,c
  1033  000FF2  0E0A               	movlw	10
  1034  000FF4  6E17               	movwf	___wmul@multiplicand,c
  1035  000FF6  EC07  F014         	call	___wmul	;wreg free
  1036  000FFA  C015  F06B         	movff	?___wmul,sprintf@width
  1037  000FFE  C016  F06C         	movff	?___wmul+1,sprintf@width+1
  1038                           
  1039                           ;doprnt.c: 601: width += *f++ - '0';
  1040  001002  0ED0               	movlw	208
  1041  001004  6E33               	movwf	??_sprintf& (0+255),c
  1042  001006  0EFF               	movlw	255
  1043  001008  6E34               	movwf	(??_sprintf+1)& (0+255),c
  1044  00100A  C023  FFF6         	movff	sprintf@f,tblptrl
  1045  00100E  C024  FFF7         	movff	sprintf@f+1,tblptrh
  1046  001012                     	if	0	;tblptru may be non-zero
  1047  001012                     	endif
  1048  001012                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1049  001012  0E00               	movlw	low (__mediumconst shr (0+16))
  1050  001014  6EF8               	movwf	tblptru,c
  1051  001016                     	endif
  1052  001016  0008               	tblrd		*
  1053  001018  50F5               	movf	tablat,w,c
  1054  00101A  6E35               	movwf	(??_sprintf+2)& (0+255),c
  1055  00101C  6A36               	clrf	(??_sprintf+3)& (0+255),c
  1056  00101E  5033               	movf	??_sprintf,w,c
  1057  001020  2635               	addwf	??_sprintf+2,f,c
  1058  001022  5034               	movf	??_sprintf+1,w,c
  1059  001024  2236               	addwfc	??_sprintf+3,f,c
  1060  001026  5035               	movf	??_sprintf+2,w,c
  1061  001028  0100               	movlb	0	; () banked
  1062  00102A  276B               	addwf	sprintf@width& (0+255),f,b
  1063  00102C  5036               	movf	??_sprintf+3,w,c
  1064  00102E  0100               	movlb	0	; () banked
  1065  001030  236C               	addwfc	(sprintf@width+1)& (0+255),f,b
  1066                           
  1067                           ; BSR set to: 0
  1068  001032  4A23               	infsnz	sprintf@f,f,c
  1069  001034  2A24               	incf	sprintf@f+1,f,c
  1070                           
  1071                           ; BSR set to: 0
  1072                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1073  001036  C023  FFF6         	movff	sprintf@f,tblptrl
  1074  00103A  C024  FFF7         	movff	sprintf@f+1,tblptrh
  1075  00103E                     	if	0	;tblptru may be non-zero
  1076  00103E                     	endif
  1077  00103E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1078  00103E  0E00               	movlw	low (__mediumconst shr (0+16))
  1079  001040  6EF8               	movwf	tblptru,c
  1080  001042                     	endif
  1081  001042  0008               	tblrd		*
  1082  001044  50F5               	movf	tablat,w,c
  1083  001046  EC1A  F014         	call	_isdigit
  1084  00104A  A0D8               	btfss	status,0,c
  1085  00104C  D083               	goto	l3395
  1086  00104E  D7CB               	goto	l3351
  1087  001050                     l3359:
  1088                           
  1089                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  1090  001050  C061  FFD9         	movff	sprintf@ap,fsr2l
  1091  001054  C062  FFDA         	movff	sprintf@ap+1,fsr2h
  1092  001058  CFDE F063          	movff	postinc2,sprintf@cp
  1093  00105C  CFDD F064          	movff	postdec2,sprintf@cp+1
  1094  001060  0E02               	movlw	2
  1095  001062  0100               	movlb	0	; () banked
  1096  001064  2761               	addwf	sprintf@ap& (0+255),f,b
  1097  001066  0E00               	movlw	0
  1098  001068  2362               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1099                           
  1100                           ; BSR set to: 0
  1101                           ;doprnt.c: 740: if(!cp)
  1102  00106A  0100               	movlb	0	; () banked
  1103  00106C  5163               	movf	sprintf@cp& (0+255),w,b
  1104  00106E  0100               	movlb	0	; () banked
  1105  001070  1164               	iorwf	(sprintf@cp+1)& (0+255),w,b
  1106  001072  A4D8               	btfss	status,2,c
  1107  001074  D006               	goto	l3367
  1108                           
  1109                           ; BSR set to: 0
  1110                           ;doprnt.c: 741: cp = "(null)";
  1111  001076  0E55               	movlw	low STR_20
  1112  001078  0100               	movlb	0	; () banked
  1113  00107A  6F63               	movwf	sprintf@cp& (0+255),b
  1114  00107C  0E0F               	movlw	high STR_20
  1115  00107E  0100               	movlb	0	; () banked
  1116  001080  6F64               	movwf	(sprintf@cp+1)& (0+255),b
  1117  001082                     l3367:
  1118                           
  1119                           ; BSR set to: 0
  1120                           ;doprnt.c: 745: len = 0;
  1121  001082  0E00               	movlw	0
  1122  001084  0100               	movlb	0	; () banked
  1123  001086  6F68               	movwf	(sprintf@len+1)& (0+255),b
  1124  001088  0E00               	movlw	0
  1125  00108A  6F67               	movwf	sprintf@len& (0+255),b
  1126                           
  1127                           ;doprnt.c: 746: while(cp[len])
  1128  00108C  D003               	goto	l3371
  1129  00108E                     l3369:
  1130                           
  1131                           ; BSR set to: 0
  1132                           ;doprnt.c: 747: len++;
  1133  00108E  0100               	movlb	0	; () banked
  1134  001090  4B67               	infsnz	sprintf@len& (0+255),f,b
  1135  001092  2B68               	incf	(sprintf@len+1)& (0+255),f,b
  1136  001094                     l3371:
  1137                           
  1138                           ; BSR set to: 0
  1139  001094  0100               	movlb	0	; () banked
  1140  001096  5167               	movf	sprintf@len& (0+255),w,b
  1141  001098  0100               	movlb	0	; () banked
  1142  00109A  2563               	addwf	sprintf@cp& (0+255),w,b
  1143  00109C  6E33               	movwf	??_sprintf& (0+255),c
  1144  00109E  0100               	movlb	0	; () banked
  1145  0010A0  5168               	movf	(sprintf@len+1)& (0+255),w,b
  1146  0010A2  0100               	movlb	0	; () banked
  1147  0010A4  2164               	addwfc	(sprintf@cp+1)& (0+255),w,b
  1148  0010A6  6E34               	movwf	(??_sprintf+1)& (0+255),c
  1149  0010A8  C033  FFF6         	movff	??_sprintf,tblptrl
  1150  0010AC  C034  FFF7         	movff	??_sprintf+1,tblptrh
  1151  0010B0                     	if	0	;tblptru may be non-zero
  1152  0010B0                     	endif
  1153  0010B0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1154  0010B0  0E00               	movlw	low (__mediumconst shr (0+16))
  1155  0010B2  6EF8               	movwf	tblptru,c
  1156  0010B4                     	endif
  1157  0010B4  0008               	tblrd		*
  1158  0010B6  50F5               	movf	tablat,w,c
  1159  0010B8  0900               	iorlw	0
  1160  0010BA  A4D8               	btfss	status,2,c
  1161  0010BC  D7E8               	goto	l3369
  1162                           
  1163                           ; BSR set to: 0
  1164                           ;doprnt.c: 757: if(width > len)
  1165                           
  1166                           ; BSR set to: 0
  1167  0010BE  0100               	movlb	0	; () banked
  1168  0010C0  516B               	movf	sprintf@width& (0+255),w,b
  1169  0010C2  0100               	movlb	0	; () banked
  1170  0010C4  5D67               	subwf	sprintf@len& (0+255),w,b
  1171  0010C6  0100               	movlb	0	; () banked
  1172  0010C8  516C               	movf	(sprintf@width+1)& (0+255),w,b
  1173  0010CA  0100               	movlb	0	; () banked
  1174  0010CC  5968               	subwfb	(sprintf@len+1)& (0+255),w,b
  1175  0010CE  B0D8               	btfsc	status,0,c
  1176  0010D0  D009               	goto	l3377
  1177                           
  1178                           ; BSR set to: 0
  1179                           ;doprnt.c: 758: width -= len;
  1180  0010D2  0100               	movlb	0	; () banked
  1181  0010D4  5167               	movf	sprintf@len& (0+255),w,b
  1182  0010D6  0100               	movlb	0	; () banked
  1183  0010D8  5F6B               	subwf	sprintf@width& (0+255),f,b
  1184  0010DA  0100               	movlb	0	; () banked
  1185  0010DC  5168               	movf	(sprintf@len+1)& (0+255),w,b
  1186  0010DE  0100               	movlb	0	; () banked
  1187  0010E0  5B6C               	subwfb	(sprintf@width+1)& (0+255),f,b
  1188  0010E2  D00E               	goto	l3383
  1189  0010E4                     l3377:
  1190                           
  1191                           ; BSR set to: 0
  1192                           ;doprnt.c: 759: else
  1193                           ;doprnt.c: 760: width = 0;
  1194  0010E4  0E00               	movlw	0
  1195  0010E6  0100               	movlb	0	; () banked
  1196  0010E8  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  1197  0010EA  0E00               	movlw	0
  1198  0010EC  6F6B               	movwf	sprintf@width& (0+255),b
  1199                           
  1200                           ; BSR set to: 0
  1201                           ;doprnt.c: 764: while(width--)
  1202  0010EE  D008               	goto	l3383
  1203  0010F0                     l3379:
  1204                           
  1205                           ; BSR set to: 0
  1206                           ;doprnt.c: 765: ((*sp++ = (' ')));
  1207  0010F0  C021  FFD9         	movff	sprintf@sp,fsr2l
  1208  0010F4  C022  FFDA         	movff	sprintf@sp+1,fsr2h
  1209  0010F8  0E20               	movlw	32
  1210  0010FA  6EDF               	movwf	indf2,c
  1211                           
  1212                           ; BSR set to: 0
  1213  0010FC  4A21               	infsnz	sprintf@sp,f,c
  1214  0010FE  2A22               	incf	sprintf@sp+1,f,c
  1215  001100                     l3383:
  1216                           
  1217                           ; BSR set to: 0
  1218  001100  0100               	movlb	0	; () banked
  1219  001102  076B               	decf	sprintf@width& (0+255),f,b
  1220  001104  A0D8               	btfss	status,0,c
  1221  001106  076C               	decf	(sprintf@width+1)& (0+255),f,b
  1222  001108  0100               	movlb	0	; () banked
  1223  00110A  296B               	incf	sprintf@width& (0+255),w,b
  1224  00110C  E1F1               	bnz	l3379
  1225  00110E  0100               	movlb	0	; () banked
  1226  001110  296C               	incf	(sprintf@width+1)& (0+255),w,b
  1227  001112  B4D8               	btfsc	status,2,c
  1228  001114  D013               	goto	l3391
  1229  001116  D7EC               	goto	l3379
  1230  001118                     l3385:
  1231                           
  1232                           ; BSR set to: 0
  1233                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  1234  001118  C063  FFF6         	movff	sprintf@cp,tblptrl
  1235  00111C  C064  FFF7         	movff	sprintf@cp+1,tblptrh
  1236  001120                     	if	0	;tblptru may be non-zero
  1237  001120                     	endif
  1238  001120                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1239  001120  0E00               	movlw	low (__mediumconst shr (0+16))
  1240  001122  6EF8               	movwf	tblptru,c
  1241  001124                     	endif
  1242  001124  C021  FFD9         	movff	sprintf@sp,fsr2l
  1243  001128  C022  FFDA         	movff	sprintf@sp+1,fsr2h
  1244  00112C  0008               	tblrd		*
  1245  00112E  CFF5 FFDF          	movff	tablat,indf2
  1246                           
  1247                           ; BSR set to: 0
  1248  001132  0100               	movlb	0	; () banked
  1249  001134  4B63               	infsnz	sprintf@cp& (0+255),f,b
  1250  001136  2B64               	incf	(sprintf@cp+1)& (0+255),f,b
  1251                           
  1252                           ; BSR set to: 0
  1253  001138  4A21               	infsnz	sprintf@sp,f,c
  1254  00113A  2A22               	incf	sprintf@sp+1,f,c
  1255  00113C                     l3391:
  1256                           
  1257                           ; BSR set to: 0
  1258  00113C  0100               	movlb	0	; () banked
  1259  00113E  0767               	decf	sprintf@len& (0+255),f,b
  1260  001140  A0D8               	btfss	status,0,c
  1261  001142  0768               	decf	(sprintf@len+1)& (0+255),f,b
  1262  001144  0100               	movlb	0	; () banked
  1263  001146  2967               	incf	sprintf@len& (0+255),w,b
  1264  001148  E1E7               	bnz	l3385
  1265  00114A  0100               	movlb	0	; () banked
  1266  00114C  2968               	incf	(sprintf@len+1)& (0+255),w,b
  1267  00114E  B4D8               	btfsc	status,2,c
  1268  001150  D104               	goto	l3473
  1269  001152  D7E2               	goto	l3385
  1270  001154                     l3395:
  1271  001154  C023  FFF6         	movff	sprintf@f,tblptrl
  1272  001158  C024  FFF7         	movff	sprintf@f+1,tblptrh
  1273  00115C  4A23               	infsnz	sprintf@f,f,c
  1274  00115E  2A24               	incf	sprintf@f+1,f,c
  1275  001160                     	if	0	;tblptru may be non-zero
  1276  001160                     	endif
  1277  001160                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1278  001160  0E00               	movlw	low (__mediumconst shr (0+16))
  1279  001162  6EF8               	movwf	tblptru,c
  1280  001164                     	endif
  1281  001164  0008               	tblrd		*
  1282  001166  CFF5 F06A          	movff	tablat,sprintf@c
  1283  00116A  0100               	movlb	0	; () banked
  1284  00116C  516A               	movf	sprintf@c& (0+255),w,b
  1285                           
  1286                           ; Switch size 1, requested type "space"
  1287                           ; Number of cases is 4, Range of values is 0 to 115
  1288                           ; switch strategies available:
  1289                           ; Name         Instructions Cycles
  1290                           ; simple_byte           13     7 (average)
  1291                           ;	Chosen strategy is simple_byte
  1292  00116E  0A00               	xorlw	0	; case 0
  1293  001170  B4D8               	btfsc	status,2,c
  1294  001172  D102               	goto	l3475
  1295  001174  0A64               	xorlw	100	; case 100
  1296  001176  B4D8               	btfsc	status,2,c
  1297  001178  D007               	goto	l3397
  1298  00117A  0A0D               	xorlw	13	; case 105
  1299  00117C  B4D8               	btfsc	status,2,c
  1300  00117E  D004               	goto	l3397
  1301  001180  0A1A               	xorlw	26	; case 115
  1302  001182  B4D8               	btfsc	status,2,c
  1303  001184  D765               	goto	l3359
  1304  001186  D0E9               	goto	l3473
  1305  001188                     l3397:
  1306                           
  1307                           ;doprnt.c: 1253: {
  1308                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1309  001188  C061  FFD9         	movff	sprintf@ap,fsr2l
  1310  00118C  C062  FFDA         	movff	sprintf@ap+1,fsr2h
  1311  001190  CFDE F065          	movff	postinc2,sprintf@val
  1312  001194  CFDD F066          	movff	postdec2,sprintf@val+1
  1313  001198  0E02               	movlw	2
  1314  00119A  0100               	movlb	0	; () banked
  1315  00119C  2761               	addwf	sprintf@ap& (0+255),f,b
  1316  00119E  0E00               	movlw	0
  1317  0011A0  2362               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1318                           
  1319                           ; BSR set to: 0
  1320                           ;doprnt.c: 1261: if((int)val < 0) {
  1321  0011A2  0100               	movlb	0	; () banked
  1322  0011A4  AF66               	btfss	(sprintf@val+1)& (0+255),7,b
  1323  0011A6  D008               	goto	l3407
  1324                           
  1325                           ; BSR set to: 0
  1326                           ;doprnt.c: 1262: flag |= 0x03;
  1327  0011A8  0E03               	movlw	3
  1328  0011AA  0100               	movlb	0	; () banked
  1329  0011AC  1369               	iorwf	sprintf@flag& (0+255),f,b
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;doprnt.c: 1263: val = -val;
  1333  0011AE  0100               	movlb	0	; () banked
  1334  0011B0  6D65               	negf	sprintf@val& (0+255),b
  1335  0011B2  1F66               	comf	(sprintf@val+1)& (0+255),f,b
  1336  0011B4  B0D8               	btfsc	status,0,c
  1337  0011B6  2B66               	incf	(sprintf@val+1)& (0+255),f,b
  1338  0011B8                     l3407:
  1339                           
  1340                           ; BSR set to: 0
  1341                           ;doprnt.c: 1264: }
  1342                           ;doprnt.c: 1266: }
  1343                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1344  0011B8  0E01               	movlw	1
  1345  0011BA  0100               	movlb	0	; () banked
  1346  0011BC  6F6A               	movwf	sprintf@c& (0+255),b
  1347  0011BE                     l3409:
  1348                           
  1349                           ; BSR set to: 0
  1350  0011BE  0E05               	movlw	5
  1351  0011C0  0100               	movlb	0	; () banked
  1352  0011C2  196A               	xorwf	sprintf@c& (0+255),w,b
  1353  0011C4  B4D8               	btfsc	status,2,c
  1354  0011C6  D019               	goto	l3421
  1355                           
  1356                           ; BSR set to: 0
  1357                           ;doprnt.c: 1306: if(val < dpowers[c])
  1358                           
  1359                           ; BSR set to: 0
  1360                           
  1361                           ; BSR set to: 0
  1362  0011C8  0100               	movlb	0	; () banked
  1363  0011CA  516A               	movf	sprintf@c& (0+255),w,b
  1364  0011CC  0D02               	mullw	2
  1365  0011CE  0E01               	movlw	low _dpowers
  1366  0011D0  24F3               	addwf	prodl,w,c
  1367  0011D2  6EF6               	movwf	tblptrl,c
  1368  0011D4  0E0F               	movlw	high _dpowers
  1369  0011D6  20F4               	addwfc	prodh,w,c
  1370  0011D8  6EF7               	movwf	tblptrh,c
  1371  0011DA                     	if	1	;There are 3 active tblptr bytes
  1372  0011DA  6AF8               	clrf	tblptru,c
  1373  0011DC  0E00               	movlw	low (__mediumconst shr (0+16))
  1374  0011DE  22F8               	addwfc	tblptru,f,c
  1375  0011E0                     	endif
  1376  0011E0  0009               	tblrd		*+
  1377  0011E2  50F5               	movf	tablat,w,c
  1378  0011E4  0100               	movlb	0	; () banked
  1379  0011E6  5D65               	subwf	sprintf@val& (0+255),w,b
  1380  0011E8  0009               	tblrd		*+
  1381  0011EA  50F5               	movf	tablat,w,c
  1382  0011EC  0100               	movlb	0	; () banked
  1383  0011EE  5966               	subwfb	(sprintf@val+1)& (0+255),w,b
  1384  0011F0  A0D8               	btfss	status,0,c
  1385  0011F2  D003               	goto	l3421
  1386                           
  1387                           ; BSR set to: 0
  1388                           
  1389                           ; BSR set to: 0
  1390                           
  1391                           ; BSR set to: 0
  1392                           ;doprnt.c: 1307: break;
  1393  0011F4  0100               	movlb	0	; () banked
  1394  0011F6  2B6A               	incf	sprintf@c& (0+255),f,b
  1395  0011F8  D7E2               	goto	l3409
  1396  0011FA                     l3421:
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1400  0011FA  0100               	movlb	0	; () banked
  1401  0011FC  516B               	movf	sprintf@width& (0+255),w,b
  1402  0011FE  0100               	movlb	0	; () banked
  1403  001200  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  1404  001202  B4D8               	btfsc	status,2,c
  1405  001204  D00A               	goto	l3427
  1406                           
  1407                           ; BSR set to: 0
  1408  001206  C069  F033         	movff	sprintf@flag,??_sprintf
  1409  00120A  0E03               	movlw	3
  1410  00120C  1633               	andwf	??_sprintf,f,c
  1411  00120E  B4D8               	btfsc	status,2,c
  1412  001210  D004               	goto	l3427
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;doprnt.c: 1346: width--;
  1416  001212  0100               	movlb	0	; () banked
  1417  001214  076B               	decf	sprintf@width& (0+255),f,b
  1418  001216  A0D8               	btfss	status,0,c
  1419  001218  076C               	decf	(sprintf@width+1)& (0+255),f,b
  1420  00121A                     l3427:
  1421                           
  1422                           ; BSR set to: 0
  1423                           ;doprnt.c: 1381: if(width > c)
  1424  00121A  0E80               	movlw	128
  1425  00121C  0100               	movlb	0	; () banked
  1426  00121E  BF6A               	btfsc	sprintf@c& (0+255),7,b
  1427  001220  0E7F               	movlw	127
  1428  001222  6E33               	movwf	??_sprintf& (0+255),c
  1429  001224  0100               	movlb	0	; () banked
  1430  001226  516B               	movf	sprintf@width& (0+255),w,b
  1431  001228  0100               	movlb	0	; () banked
  1432  00122A  5D6A               	subwf	sprintf@c& (0+255),w,b
  1433  00122C  0100               	movlb	0	; () banked
  1434  00122E  516C               	movf	(sprintf@width+1)& (0+255),w,b
  1435  001230  0A80               	xorlw	128
  1436  001232  5833               	subwfb	??_sprintf& (0+255),w,c
  1437  001234  B0D8               	btfsc	status,0,c
  1438  001236  D00B               	goto	l3431
  1439                           
  1440                           ; BSR set to: 0
  1441                           ;doprnt.c: 1382: width -= c;
  1442  001238  0100               	movlb	0	; () banked
  1443  00123A  516A               	movf	sprintf@c& (0+255),w,b
  1444  00123C  0100               	movlb	0	; () banked
  1445  00123E  5F6B               	subwf	sprintf@width& (0+255),f,b
  1446  001240  0E00               	movlw	0
  1447  001242  0100               	movlb	0	; () banked
  1448  001244  BF6A               	btfsc	sprintf@c& (0+255),7,b
  1449  001246  0EFF               	movlw	255
  1450  001248  0100               	movlb	0	; () banked
  1451  00124A  5B6C               	subwfb	(sprintf@width+1)& (0+255),f,b
  1452  00124C  D005               	goto	l3433
  1453  00124E                     l3431:
  1454                           
  1455                           ; BSR set to: 0
  1456                           ;doprnt.c: 1383: else
  1457                           ;doprnt.c: 1384: width = 0;
  1458  00124E  0E00               	movlw	0
  1459  001250  0100               	movlb	0	; () banked
  1460  001252  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  1461  001254  0E00               	movlw	0
  1462  001256  6F6B               	movwf	sprintf@width& (0+255),b
  1463  001258                     l3433:
  1464                           
  1465                           ; BSR set to: 0
  1466                           ;doprnt.c: 1387: if(flag & 0x04) {
  1467  001258  0100               	movlb	0	; () banked
  1468  00125A  A569               	btfss	sprintf@flag& (0+255),2,b
  1469  00125C  D021               	goto	l3449
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;doprnt.c: 1392: if(flag & 0x03)
  1473  00125E  C069  F033         	movff	sprintf@flag,??_sprintf
  1474  001262  0E03               	movlw	3
  1475  001264  1633               	andwf	??_sprintf,f,c
  1476  001266  B4D8               	btfsc	status,2,c
  1477  001268  D008               	goto	l3441
  1478                           
  1479                           ; BSR set to: 0
  1480                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  1481  00126A  C021  FFD9         	movff	sprintf@sp,fsr2l
  1482  00126E  C022  FFDA         	movff	sprintf@sp+1,fsr2h
  1483  001272  0E2D               	movlw	45
  1484  001274  6EDF               	movwf	indf2,c
  1485                           
  1486                           ; BSR set to: 0
  1487  001276  4A21               	infsnz	sprintf@sp,f,c
  1488  001278  2A22               	incf	sprintf@sp+1,f,c
  1489  00127A                     l3441:
  1490                           
  1491                           ; BSR set to: 0
  1492                           ;doprnt.c: 1415: if(width)
  1493  00127A  0100               	movlb	0	; () banked
  1494  00127C  516B               	movf	sprintf@width& (0+255),w,b
  1495  00127E  0100               	movlb	0	; () banked
  1496  001280  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  1497  001282  B4D8               	btfsc	status,2,c
  1498  001284  D033               	goto	l3463
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  1502                           
  1503                           ; BSR set to: 0
  1504                           
  1505                           ;doprnt.c: 1416: do
  1506  001286  C021  FFD9         	movff	sprintf@sp,fsr2l
  1507  00128A  C022  FFDA         	movff	sprintf@sp+1,fsr2h
  1508  00128E  0E30               	movlw	48
  1509  001290  6EDF               	movwf	indf2,c
  1510                           
  1511                           ; BSR set to: 0
  1512  001292  4A21               	infsnz	sprintf@sp,f,c
  1513  001294  2A22               	incf	sprintf@sp+1,f,c
  1514                           
  1515                           ; BSR set to: 0
  1516                           ;doprnt.c: 1418: while(--width);
  1517  001296  0100               	movlb	0	; () banked
  1518  001298  076B               	decf	sprintf@width& (0+255),f,b
  1519  00129A  A0D8               	btfss	status,0,c
  1520  00129C  076C               	decf	(sprintf@width+1)& (0+255),f,b
  1521  00129E  D7ED               	goto	l3441
  1522  0012A0                     l3449:
  1523                           
  1524                           ; BSR set to: 0
  1525                           ;doprnt.c: 1422: {
  1526                           ;doprnt.c: 1424: if(width
  1527                           ;doprnt.c: 1428: )
  1528  0012A0  0100               	movlb	0	; () banked
  1529  0012A2  516B               	movf	sprintf@width& (0+255),w,b
  1530  0012A4  0100               	movlb	0	; () banked
  1531  0012A6  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  1532  0012A8  B4D8               	btfsc	status,2,c
  1533  0012AA  D012               	goto	l3457
  1534  0012AC                     l3451:
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1538  0012AC  C021  FFD9         	movff	sprintf@sp,fsr2l
  1539  0012B0  C022  FFDA         	movff	sprintf@sp+1,fsr2h
  1540  0012B4  0E20               	movlw	32
  1541  0012B6  6EDF               	movwf	indf2,c
  1542                           
  1543                           ; BSR set to: 0
  1544  0012B8  4A21               	infsnz	sprintf@sp,f,c
  1545  0012BA  2A22               	incf	sprintf@sp+1,f,c
  1546                           
  1547                           ; BSR set to: 0
  1548                           ;doprnt.c: 1431: while(--width);
  1549  0012BC  0100               	movlb	0	; () banked
  1550  0012BE  076B               	decf	sprintf@width& (0+255),f,b
  1551  0012C0  A0D8               	btfss	status,0,c
  1552  0012C2  076C               	decf	(sprintf@width+1)& (0+255),f,b
  1553  0012C4  0100               	movlb	0	; () banked
  1554  0012C6  516B               	movf	sprintf@width& (0+255),w,b
  1555  0012C8  0100               	movlb	0	; () banked
  1556  0012CA  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  1557  0012CC  A4D8               	btfss	status,2,c
  1558  0012CE  D7EE               	goto	l3451
  1559  0012D0                     l3457:
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;doprnt.c: 1438: if(flag & 0x03)
  1563  0012D0  C069  F033         	movff	sprintf@flag,??_sprintf
  1564  0012D4  0E03               	movlw	3
  1565  0012D6  1633               	andwf	??_sprintf,f,c
  1566  0012D8  B4D8               	btfsc	status,2,c
  1567  0012DA  D008               	goto	l3463
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1571  0012DC  C021  FFD9         	movff	sprintf@sp,fsr2l
  1572  0012E0  C022  FFDA         	movff	sprintf@sp+1,fsr2h
  1573  0012E4  0E2D               	movlw	45
  1574  0012E6  6EDF               	movwf	indf2,c
  1575                           
  1576                           ; BSR set to: 0
  1577  0012E8  4A21               	infsnz	sprintf@sp,f,c
  1578  0012EA  2A22               	incf	sprintf@sp+1,f,c
  1579  0012EC                     l3463:
  1580                           
  1581                           ; BSR set to: 0
  1582                           ;doprnt.c: 1469: }
  1583                           ;doprnt.c: 1472: prec = c;
  1584  0012EC  C06A  F060         	movff	sprintf@c,sprintf@prec
  1585                           
  1586                           ;doprnt.c: 1474: while(prec--) {
  1587  0012F0  D02E               	goto	l3471
  1588  0012F2                     l3465:
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;doprnt.c: 1478: {
  1592                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1593  0012F2  0100               	movlb	0	; () banked
  1594  0012F4  5160               	movf	sprintf@prec& (0+255),w,b
  1595  0012F6  0D02               	mullw	2
  1596  0012F8  0E01               	movlw	low _dpowers
  1597  0012FA  24F3               	addwf	prodl,w,c
  1598  0012FC  6EF6               	movwf	tblptrl,c
  1599  0012FE  0E0F               	movlw	high _dpowers
  1600  001300  20F4               	addwfc	prodh,w,c
  1601  001302  6EF7               	movwf	tblptrh,c
  1602  001304                     	if	1	;There are 3 active tblptr bytes
  1603  001304  6AF8               	clrf	tblptru,c
  1604  001306  0E00               	movlw	low (__mediumconst shr (0+16))
  1605  001308  22F8               	addwfc	tblptru,f,c
  1606  00130A                     	endif
  1607  00130A  0009               	tblrd		*+
  1608  00130C  CFF5 F017          	movff	tablat,___lwdiv@divisor
  1609  001310  000A               	tblrd		*-
  1610  001312  CFF5 F018          	movff	tablat,___lwdiv@divisor+1
  1611  001316  C065  F015         	movff	sprintf@val,___lwdiv@dividend
  1612  00131A  C066  F016         	movff	sprintf@val+1,___lwdiv@dividend+1
  1613  00131E  EC56  F013         	call	___lwdiv	;wreg free
  1614  001322  C015  F01C         	movff	?___lwdiv,___lwmod@dividend
  1615  001326  C016  F01D         	movff	?___lwdiv+1,___lwmod@dividend+1
  1616  00132A  0E00               	movlw	0
  1617  00132C  6E1F               	movwf	___lwmod@divisor+1,c
  1618  00132E  0E0A               	movlw	10
  1619  001330  6E1E               	movwf	___lwmod@divisor,c
  1620  001332  EC7F  F013         	call	___lwmod	;wreg free
  1621  001336  501C               	movf	?___lwmod,w,c
  1622  001338  0F30               	addlw	48
  1623  00133A  0100               	movlb	0	; () banked
  1624  00133C  6F6A               	movwf	sprintf@c& (0+255),b
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;doprnt.c: 1523: }
  1628                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1629  00133E  C021  FFD9         	movff	sprintf@sp,fsr2l
  1630  001342  C022  FFDA         	movff	sprintf@sp+1,fsr2h
  1631  001346  C06A  FFDF         	movff	sprintf@c,indf2
  1632                           
  1633                           ; BSR set to: 0
  1634  00134A  4A21               	infsnz	sprintf@sp,f,c
  1635  00134C  2A22               	incf	sprintf@sp+1,f,c
  1636  00134E                     l3471:
  1637                           
  1638                           ; BSR set to: 0
  1639  00134E  0100               	movlb	0	; () banked
  1640  001350  0760               	decf	sprintf@prec& (0+255),f,b
  1641  001352  0100               	movlb	0	; () banked
  1642  001354  2960               	incf	sprintf@prec& (0+255),w,b
  1643  001356  A4D8               	btfss	status,2,c
  1644  001358  D7CC               	goto	l3465
  1645  00135A                     l3473:
  1646                           
  1647                           ; BSR set to: 0
  1648  00135A  C023  FFF6         	movff	sprintf@f,tblptrl
  1649  00135E  C024  FFF7         	movff	sprintf@f+1,tblptrh
  1650  001362  4A23               	infsnz	sprintf@f,f,c
  1651  001364  2A24               	incf	sprintf@f+1,f,c
  1652  001366                     	if	0	;tblptru may be non-zero
  1653  001366                     	endif
  1654  001366                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1655  001366  0E00               	movlw	low (__mediumconst shr (0+16))
  1656  001368  6EF8               	movwf	tblptru,c
  1657  00136A                     	endif
  1658  00136A  0008               	tblrd		*
  1659  00136C  CFF5 F06A          	movff	tablat,sprintf@c
  1660  001370  0100               	movlb	0	; () banked
  1661  001372  516A               	movf	sprintf@c& (0+255),w,b
  1662  001374  A4D8               	btfss	status,2,c
  1663  001376  D600               	goto	l3333
  1664  001378                     l3475:
  1665                           
  1666                           ;doprnt.c: 1538: *sp = 0;
  1667  001378  C021  FFD9         	movff	sprintf@sp,fsr2l
  1668  00137C  C022  FFDA         	movff	sprintf@sp+1,fsr2h
  1669  001380  0E00               	movlw	0
  1670  001382  6EDF               	movwf	indf2,c
  1671  001384  0012               	return	
  1672  001386                     __end_of_sprintf:
  1673                           	opt stack 0
  1674                           tblptru	equ	0xFF8
  1675                           tblptrh	equ	0xFF7
  1676                           tblptrl	equ	0xFF6
  1677                           tablat	equ	0xFF5
  1678                           prodh	equ	0xFF4
  1679                           prodl	equ	0xFF3
  1680                           intcon	equ	0xFF2
  1681                           postinc0	equ	0xFEE
  1682                           wreg	equ	0xFE8
  1683                           indf2	equ	0xFDF
  1684                           postinc2	equ	0xFDE
  1685                           postdec2	equ	0xFDD
  1686                           fsr2h	equ	0xFDA
  1687                           fsr2l	equ	0xFD9
  1688                           status	equ	0xFD8
  1689                           
  1690 ;; *************** function _isdigit *****************
  1691 ;; Defined at:
  1692 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  1693 ;; Parameters:    Size  Location     Type
  1694 ;;  c               1    wreg     unsigned char 
  1695 ;; Auto vars:     Size  Location     Type
  1696 ;;  c               1   22[COMRAM] unsigned char 
  1697 ;; Return value:  Size  Location     Type
  1698 ;;		None               void
  1699 ;; Registers used:
  1700 ;;		wreg, status,2, status,0
  1701 ;; Tracked objects:
  1702 ;;		On entry : 0/0
  1703 ;;		On exit  : 0/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1707 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1708 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1709 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1710 ;;Total ram usage:        3 bytes
  1711 ;; Hardware stack levels used:    1
  1712 ;; Hardware stack levels required when called:    2
  1713 ;; This function calls:
  1714 ;;		Nothing
  1715 ;; This function is called by:
  1716 ;;		_sprintf
  1717 ;; This function uses a non-reentrant model
  1718 ;;
  1719                           
  1720                           	psect	text2
  1721  002834                     __ptext2:
  1722                           	opt stack 0
  1723  002834                     _isdigit:
  1724                           	opt stack 27
  1725                           
  1726                           ;incstack = 0
  1727                           ;isdigit@c stored from wreg
  1728  002834  6E17               	movwf	isdigit@c,c
  1729  002836  0E00               	movlw	0
  1730  002838  6E16               	movwf	_isdigit$2225,c
  1731  00283A  0E3A               	movlw	58
  1732  00283C  6017               	cpfslt	isdigit@c,c
  1733  00283E  D005               	goto	l3239
  1734  002840  0E2F               	movlw	47
  1735  002842  6417               	cpfsgt	isdigit@c,c
  1736  002844  D002               	goto	l3239
  1737  002846  0E01               	movlw	1
  1738  002848  6E16               	movwf	_isdigit$2225,c
  1739  00284A                     l3239:
  1740  00284A  C016  F015         	movff	_isdigit$2225,??_isdigit
  1741  00284E  3015               	rrcf	??_isdigit,w,c
  1742  002850  0012               	return	
  1743  002852                     __end_of_isdigit:
  1744                           	opt stack 0
  1745                           tblptru	equ	0xFF8
  1746                           tblptrh	equ	0xFF7
  1747                           tblptrl	equ	0xFF6
  1748                           tablat	equ	0xFF5
  1749                           prodh	equ	0xFF4
  1750                           prodl	equ	0xFF3
  1751                           intcon	equ	0xFF2
  1752                           postinc0	equ	0xFEE
  1753                           wreg	equ	0xFE8
  1754                           indf2	equ	0xFDF
  1755                           postinc2	equ	0xFDE
  1756                           postdec2	equ	0xFDD
  1757                           fsr2h	equ	0xFDA
  1758                           fsr2l	equ	0xFD9
  1759                           status	equ	0xFD8
  1760                           
  1761 ;; *************** function ___wmul *****************
  1762 ;; Defined at:
  1763 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  1764 ;; Parameters:    Size  Location     Type
  1765 ;;  multiplier      2   20[COMRAM] unsigned int 
  1766 ;;  multiplicand    2   22[COMRAM] unsigned int 
  1767 ;; Auto vars:     Size  Location     Type
  1768 ;;  product         2   24[COMRAM] unsigned int 
  1769 ;; Return value:  Size  Location     Type
  1770 ;;                  2   20[COMRAM] unsigned int 
  1771 ;; Registers used:
  1772 ;;		wreg, status,2, status,0, prodl, prodh
  1773 ;; Tracked objects:
  1774 ;;		On entry : 0/0
  1775 ;;		On exit  : 0/0
  1776 ;;		Unchanged: 0/0
  1777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1778 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1779 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1781 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1782 ;;Total ram usage:        6 bytes
  1783 ;; Hardware stack levels used:    1
  1784 ;; Hardware stack levels required when called:    2
  1785 ;; This function calls:
  1786 ;;		Nothing
  1787 ;; This function is called by:
  1788 ;;		_sprintf
  1789 ;; This function uses a non-reentrant model
  1790 ;;
  1791                           
  1792                           	psect	text3
  1793  00280E                     __ptext3:
  1794                           	opt stack 0
  1795  00280E                     ___wmul:
  1796                           	opt stack 27
  1797                           
  1798                           ;incstack = 0
  1799  00280E  5015               	movf	___wmul@multiplier,w,c
  1800  002810  0217               	mulwf	___wmul@multiplicand,c
  1801  002812  CFF3 F019          	movff	prodl,___wmul@product
  1802  002816  CFF4 F01A          	movff	prodh,___wmul@product+1
  1803  00281A  5015               	movf	___wmul@multiplier,w,c
  1804  00281C  0218               	mulwf	___wmul@multiplicand+1,c
  1805  00281E  50F3               	movf	prodl,w,c
  1806  002820  261A               	addwf	___wmul@product+1,f,c
  1807  002822  5016               	movf	___wmul@multiplier+1,w,c
  1808  002824  0217               	mulwf	___wmul@multiplicand,c
  1809  002826  50F3               	movf	prodl,w,c
  1810  002828  261A               	addwf	___wmul@product+1,f,c
  1811  00282A  C019  F015         	movff	___wmul@product,?___wmul
  1812  00282E  C01A  F016         	movff	___wmul@product+1,?___wmul+1
  1813  002832  0012               	return	
  1814  002834                     __end_of___wmul:
  1815                           	opt stack 0
  1816                           tblptru	equ	0xFF8
  1817                           tblptrh	equ	0xFF7
  1818                           tblptrl	equ	0xFF6
  1819                           tablat	equ	0xFF5
  1820                           prodh	equ	0xFF4
  1821                           prodl	equ	0xFF3
  1822                           intcon	equ	0xFF2
  1823                           postinc0	equ	0xFEE
  1824                           wreg	equ	0xFE8
  1825                           indf2	equ	0xFDF
  1826                           postinc2	equ	0xFDE
  1827                           postdec2	equ	0xFDD
  1828                           fsr2h	equ	0xFDA
  1829                           fsr2l	equ	0xFD9
  1830                           status	equ	0xFD8
  1831                           
  1832 ;; *************** function ___lwmod *****************
  1833 ;; Defined at:
  1834 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;  dividend        2   27[COMRAM] unsigned int 
  1837 ;;  divisor         2   29[COMRAM] unsigned int 
  1838 ;; Auto vars:     Size  Location     Type
  1839 ;;  counter         1   31[COMRAM] unsigned char 
  1840 ;; Return value:  Size  Location     Type
  1841 ;;                  2   27[COMRAM] unsigned int 
  1842 ;; Registers used:
  1843 ;;		wreg, status,2, status,0
  1844 ;; Tracked objects:
  1845 ;;		On entry : 0/0
  1846 ;;		On exit  : 0/0
  1847 ;;		Unchanged: 0/0
  1848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1849 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1850 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1852 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1853 ;;Total ram usage:        5 bytes
  1854 ;; Hardware stack levels used:    1
  1855 ;; Hardware stack levels required when called:    2
  1856 ;; This function calls:
  1857 ;;		Nothing
  1858 ;; This function is called by:
  1859 ;;		_sprintf
  1860 ;; This function uses a non-reentrant model
  1861 ;;
  1862                           
  1863                           	psect	text4
  1864  0026FE                     __ptext4:
  1865                           	opt stack 0
  1866  0026FE                     ___lwmod:
  1867                           	opt stack 27
  1868                           
  1869                           ;incstack = 0
  1870  0026FE  501E               	movf	___lwmod@divisor,w,c
  1871  002700  101F               	iorwf	___lwmod@divisor+1,w,c
  1872  002702  B4D8               	btfsc	status,2,c
  1873  002704  D018               	goto	l793
  1874  002706  0E01               	movlw	1
  1875  002708  6E20               	movwf	___lwmod@counter,c
  1876  00270A  D004               	goto	l3277
  1877  00270C                     l3275:
  1878  00270C  90D8               	bcf	status,0,c
  1879  00270E  361E               	rlcf	___lwmod@divisor,f,c
  1880  002710  361F               	rlcf	___lwmod@divisor+1,f,c
  1881  002712  2A20               	incf	___lwmod@counter,f,c
  1882  002714                     l3277:
  1883  002714  AE1F               	btfss	___lwmod@divisor+1,7,c
  1884  002716  D7FA               	goto	l3275
  1885  002718                     l3279:
  1886  002718  501E               	movf	___lwmod@divisor,w,c
  1887  00271A  5C1C               	subwf	___lwmod@dividend,w,c
  1888  00271C  501F               	movf	___lwmod@divisor+1,w,c
  1889  00271E  581D               	subwfb	___lwmod@dividend+1,w,c
  1890  002720  A0D8               	btfss	status,0,c
  1891  002722  D004               	goto	l3283
  1892  002724  501E               	movf	___lwmod@divisor,w,c
  1893  002726  5E1C               	subwf	___lwmod@dividend,f,c
  1894  002728  501F               	movf	___lwmod@divisor+1,w,c
  1895  00272A  5A1D               	subwfb	___lwmod@dividend+1,f,c
  1896  00272C                     l3283:
  1897  00272C  90D8               	bcf	status,0,c
  1898  00272E  321F               	rrcf	___lwmod@divisor+1,f,c
  1899  002730  321E               	rrcf	___lwmod@divisor,f,c
  1900  002732  2E20               	decfsz	___lwmod@counter,f,c
  1901  002734  D7F1               	goto	l3279
  1902  002736                     l793:
  1903  002736  C01C  F01C         	movff	___lwmod@dividend,?___lwmod
  1904  00273A  C01D  F01D         	movff	___lwmod@dividend+1,?___lwmod+1
  1905  00273E  0012               	return		;funcret
  1906  002740                     __end_of___lwmod:
  1907                           	opt stack 0
  1908                           tblptru	equ	0xFF8
  1909                           tblptrh	equ	0xFF7
  1910                           tblptrl	equ	0xFF6
  1911                           tablat	equ	0xFF5
  1912                           prodh	equ	0xFF4
  1913                           prodl	equ	0xFF3
  1914                           intcon	equ	0xFF2
  1915                           postinc0	equ	0xFEE
  1916                           wreg	equ	0xFE8
  1917                           indf2	equ	0xFDF
  1918                           postinc2	equ	0xFDE
  1919                           postdec2	equ	0xFDD
  1920                           fsr2h	equ	0xFDA
  1921                           fsr2l	equ	0xFD9
  1922                           status	equ	0xFD8
  1923                           
  1924 ;; *************** function ___lwdiv *****************
  1925 ;; Defined at:
  1926 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  1927 ;; Parameters:    Size  Location     Type
  1928 ;;  dividend        2   20[COMRAM] unsigned int 
  1929 ;;  divisor         2   22[COMRAM] unsigned int 
  1930 ;; Auto vars:     Size  Location     Type
  1931 ;;  quotient        2   25[COMRAM] unsigned int 
  1932 ;;  counter         1   24[COMRAM] unsigned char 
  1933 ;; Return value:  Size  Location     Type
  1934 ;;                  2   20[COMRAM] unsigned int 
  1935 ;; Registers used:
  1936 ;;		wreg, status,2, status,0
  1937 ;; Tracked objects:
  1938 ;;		On entry : 0/0
  1939 ;;		On exit  : 0/0
  1940 ;;		Unchanged: 0/0
  1941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1942 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1943 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1945 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1946 ;;Total ram usage:        7 bytes
  1947 ;; Hardware stack levels used:    1
  1948 ;; Hardware stack levels required when called:    2
  1949 ;; This function calls:
  1950 ;;		Nothing
  1951 ;; This function is called by:
  1952 ;;		_sprintf
  1953 ;; This function uses a non-reentrant model
  1954 ;;
  1955                           
  1956                           	psect	text5
  1957  0026AC                     __ptext5:
  1958                           	opt stack 0
  1959  0026AC                     ___lwdiv:
  1960                           	opt stack 27
  1961                           
  1962                           ;incstack = 0
  1963  0026AC  0E00               	movlw	0
  1964  0026AE  6E1B               	movwf	___lwdiv@quotient+1,c
  1965  0026B0  0E00               	movlw	0
  1966  0026B2  6E1A               	movwf	___lwdiv@quotient,c
  1967  0026B4  5017               	movf	___lwdiv@divisor,w,c
  1968  0026B6  1018               	iorwf	___lwdiv@divisor+1,w,c
  1969  0026B8  B4D8               	btfsc	status,2,c
  1970  0026BA  D01C               	goto	l783
  1971  0026BC  0E01               	movlw	1
  1972  0026BE  6E19               	movwf	___lwdiv@counter,c
  1973  0026C0  D004               	goto	l3257
  1974  0026C2                     l3255:
  1975  0026C2  90D8               	bcf	status,0,c
  1976  0026C4  3617               	rlcf	___lwdiv@divisor,f,c
  1977  0026C6  3618               	rlcf	___lwdiv@divisor+1,f,c
  1978  0026C8  2A19               	incf	___lwdiv@counter,f,c
  1979  0026CA                     l3257:
  1980  0026CA  AE18               	btfss	___lwdiv@divisor+1,7,c
  1981  0026CC  D7FA               	goto	l3255
  1982  0026CE                     l3259:
  1983  0026CE  90D8               	bcf	status,0,c
  1984  0026D0  361A               	rlcf	___lwdiv@quotient,f,c
  1985  0026D2  361B               	rlcf	___lwdiv@quotient+1,f,c
  1986  0026D4  5017               	movf	___lwdiv@divisor,w,c
  1987  0026D6  5C15               	subwf	___lwdiv@dividend,w,c
  1988  0026D8  5018               	movf	___lwdiv@divisor+1,w,c
  1989  0026DA  5816               	subwfb	___lwdiv@dividend+1,w,c
  1990  0026DC  A0D8               	btfss	status,0,c
  1991  0026DE  D005               	goto	l3267
  1992  0026E0  5017               	movf	___lwdiv@divisor,w,c
  1993  0026E2  5E15               	subwf	___lwdiv@dividend,f,c
  1994  0026E4  5018               	movf	___lwdiv@divisor+1,w,c
  1995  0026E6  5A16               	subwfb	___lwdiv@dividend+1,f,c
  1996  0026E8  801A               	bsf	___lwdiv@quotient,0,c
  1997  0026EA                     l3267:
  1998  0026EA  90D8               	bcf	status,0,c
  1999  0026EC  3218               	rrcf	___lwdiv@divisor+1,f,c
  2000  0026EE  3217               	rrcf	___lwdiv@divisor,f,c
  2001  0026F0  2E19               	decfsz	___lwdiv@counter,f,c
  2002  0026F2  D7ED               	goto	l3259
  2003  0026F4                     l783:
  2004  0026F4  C01A  F015         	movff	___lwdiv@quotient,?___lwdiv
  2005  0026F8  C01B  F016         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2006  0026FC  0012               	return		;funcret
  2007  0026FE                     __end_of___lwdiv:
  2008                           	opt stack 0
  2009                           tblptru	equ	0xFF8
  2010                           tblptrh	equ	0xFF7
  2011                           tblptrl	equ	0xFF6
  2012                           tablat	equ	0xFF5
  2013                           prodh	equ	0xFF4
  2014                           prodl	equ	0xFF3
  2015                           intcon	equ	0xFF2
  2016                           postinc0	equ	0xFEE
  2017                           wreg	equ	0xFE8
  2018                           indf2	equ	0xFDF
  2019                           postinc2	equ	0xFDE
  2020                           postdec2	equ	0xFDD
  2021                           fsr2h	equ	0xFDA
  2022                           fsr2l	equ	0xFD9
  2023                           status	equ	0xFD8
  2024                           
  2025 ;; *************** function _main_init *****************
  2026 ;; Defined at:
  2027 ;;		line 62 in file "main.c"
  2028 ;; Parameters:    Size  Location     Type
  2029 ;;		None
  2030 ;; Auto vars:     Size  Location     Type
  2031 ;;		None
  2032 ;; Return value:  Size  Location     Type
  2033 ;;		None               void
  2034 ;; Registers used:
  2035 ;;		wreg, status,2, cstack
  2036 ;; Tracked objects:
  2037 ;;		On entry : 0/0
  2038 ;;		On exit  : 0/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2045 ;;Total ram usage:        0 bytes
  2046 ;; Hardware stack levels used:    1
  2047 ;; Hardware stack levels required when called:    3
  2048 ;; This function calls:
  2049 ;;		_RTCC_init
  2050 ;; This function is called by:
  2051 ;;		_main
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           	psect	text6
  2056  00256A                     __ptext6:
  2057                           	opt stack 0
  2058  00256A                     _main_init:
  2059                           	opt stack 27
  2060                           
  2061                           ;main.c: 63: OSCCONbits.IRCF = 7;
  2062                           
  2063                           ;incstack = 0
  2064  00256A  88D3               	bsf	4051,4,c	;volatile
  2065  00256C  8AD3               	bsf	4051,5,c	;volatile
  2066  00256E  8CD3               	bsf	4051,6,c	;volatile
  2067                           
  2068                           ;main.c: 64: OSCTUNEbits.PLLEN = 1;
  2069  002570  8C9B               	bsf	3995,6,c	;volatile
  2070                           
  2071                           ;main.c: 65: OSCCONbits.SCS = 0;
  2072  002572  0EFC               	movlw	-4
  2073  002574  16D3               	andwf	4051,f,c	;volatile
  2074                           
  2075                           ;main.c: 66: TRISA = 0b00100000;
  2076  002576  0E20               	movlw	32
  2077  002578  6E92               	movwf	3986,c	;volatile
  2078                           
  2079                           ;main.c: 67: TRISB = 0b00110111;
  2080  00257A  0E37               	movlw	55
  2081  00257C  6E93               	movwf	3987,c	;volatile
  2082                           
  2083                           ;main.c: 68: TRISC = 0b10111010;
  2084  00257E  0EBA               	movlw	186
  2085  002580  6E94               	movwf	3988,c	;volatile
  2086                           
  2087                           ;main.c: 69: ANCON0 = 0b11111111;
  2088  002582  010F               	movlb	15	; () banked
  2089  002584  6948               	setf	72,b	;volatile
  2090                           
  2091                           ; BSR set to: 15
  2092                           ;main.c: 70: ANCON1 = 0b11111111;
  2093  002586  010F               	movlb	15	; () banked
  2094  002588  6949               	setf	73,b	;volatile
  2095                           
  2096                           ; BSR set to: 15
  2097                           ;main.c: 71: INTCON2bits.RBPU = 0;
  2098  00258A  9EF1               	bcf	intcon2,7,c	;volatile
  2099                           
  2100                           ;main.c: 73: T1CONbits.TMR1CS = 2;
  2101  00258C  50CD               	movf	4045,w,c	;volatile
  2102  00258E  0B3F               	andlw	-193
  2103  002590  0980               	iorlw	128
  2104  002592  6ECD               	movwf	4045,c	;volatile
  2105                           
  2106                           ; BSR set to: 15
  2107                           ;main.c: 74: T1CONbits.T1OSCEN = 1;
  2108  002594  86CD               	bsf	4045,3,c	;volatile
  2109                           
  2110                           ;main.c: 75: T1CONbits.T1CKPS = 0;
  2111  002596  0ECF               	movlw	-49
  2112  002598  16CD               	andwf	4045,f,c	;volatile
  2113                           
  2114                           ; BSR set to: 15
  2115                           ;main.c: 76: T1CONbits.nT1SYNC = 1;
  2116  00259A  84CD               	bsf	4045,2,c	;volatile
  2117                           
  2118                           ; BSR set to: 15
  2119                           ;main.c: 77: T1CONbits.RD16 = 0;
  2120  00259C  92CD               	bcf	4045,1,c	;volatile
  2121                           
  2122                           ; BSR set to: 15
  2123                           ;main.c: 78: T1CONbits.TMR1ON = 1;
  2124  00259E  80CD               	bsf	4045,0,c	;volatile
  2125                           
  2126                           ; BSR set to: 15
  2127                           ;main.c: 79: IPR1bits.TMR1IP = 0;
  2128  0025A0  909F               	bcf	3999,0,c	;volatile
  2129                           
  2130                           ; BSR set to: 15
  2131                           ;main.c: 80: PIR1bits.TMR1IF = 0;
  2132  0025A2  909E               	bcf	3998,0,c	;volatile
  2133                           
  2134                           ; BSR set to: 15
  2135                           ;main.c: 81: PIE1bits.TMR1IE = 1;
  2136  0025A4  809D               	bsf	3997,0,c	;volatile
  2137                           
  2138                           ; BSR set to: 15
  2139                           ;main.c: 82: INTCONbits.PEIE = 1;
  2140  0025A6  8CF2               	bsf	intcon,6,c	;volatile
  2141                           
  2142                           ;main.c: 84: T3CONbits.TMR3CS = 0;
  2143  0025A8  0E3F               	movlw	-193
  2144  0025AA  1679               	andwf	3961,f,c	;volatile
  2145                           
  2146                           ; BSR set to: 15
  2147                           ;main.c: 85: T3CONbits.T3OSCEN = 0;
  2148  0025AC  9679               	bcf	3961,3,c	;volatile
  2149                           
  2150                           ;main.c: 86: T3CONbits.T3CKPS = 2;
  2151  0025AE  5079               	movf	3961,w,c	;volatile
  2152  0025B0  0BCF               	andlw	-49
  2153  0025B2  0920               	iorlw	32
  2154  0025B4  6E79               	movwf	3961,c	;volatile
  2155                           
  2156                           ; BSR set to: 15
  2157                           ;main.c: 87: T3CONbits.RD163 = 0;
  2158  0025B6  9E79               	bcf	3961,7,c	;volatile
  2159                           
  2160                           ; BSR set to: 15
  2161                           ;main.c: 88: T3CONbits.TMR3ON = 1;
  2162  0025B8  8079               	bsf	3961,0,c	;volatile
  2163                           
  2164                           ; BSR set to: 15
  2165                           ;main.c: 89: IPR2bits.TMR3IP = 0;
  2166  0025BA  92A2               	bcf	4002,1,c	;volatile
  2167                           
  2168                           ; BSR set to: 15
  2169                           ;main.c: 90: PIR2bits.TMR3IF = 0;
  2170  0025BC  92A1               	bcf	4001,1,c	;volatile
  2171                           
  2172                           ; BSR set to: 15
  2173                           ;main.c: 91: PIE2bits.TMR3IE = 1;
  2174  0025BE  82A0               	bsf	4000,1,c	;volatile
  2175                           
  2176                           ; BSR set to: 15
  2177                           ;main.c: 92: INTCONbits.PEIE = 1;
  2178  0025C0  8CF2               	bsf	intcon,6,c	;volatile
  2179                           
  2180                           ; BSR set to: 15
  2181                           ;main.c: 94: RTCC_init();
  2182  0025C2  ECEF  F013         	call	_RTCC_init	;wreg free
  2183                           
  2184                           ;main.c: 96: TXSTA1bits.TX9 = 0;
  2185  0025C6  9CAD               	bcf	4013,6,c	;volatile
  2186                           
  2187                           ;main.c: 97: TXSTA1bits.TXEN = 1;
  2188  0025C8  8AAD               	bsf	4013,5,c	;volatile
  2189                           
  2190                           ;main.c: 98: TXSTA1bits.SYNC = 0;
  2191  0025CA  98AD               	bcf	4013,4,c	;volatile
  2192                           
  2193                           ;main.c: 99: TXSTA1bits.BRGH = 0;
  2194  0025CC  94AD               	bcf	4013,2,c	;volatile
  2195                           
  2196                           ;main.c: 100: RCSTA1bits.SPEN = 1;
  2197  0025CE  8EAC               	bsf	4012,7,c	;volatile
  2198                           
  2199                           ;main.c: 101: RCSTA1bits.RX9 = 0;
  2200  0025D0  9CAC               	bcf	4012,6,c	;volatile
  2201                           
  2202                           ;main.c: 102: RCSTA1bits.CREN = 1;
  2203  0025D2  88AC               	bsf	4012,4,c	;volatile
  2204                           
  2205                           ;main.c: 103: BAUDCON1bits.BRG16 = 0;
  2206  0025D4  967E               	bcf	3966,3,c	;volatile
  2207                           
  2208                           ;main.c: 104: SPBRG1 = 48000000 / 64 / 9600 - 1;
  2209  0025D6  0E4D               	movlw	77
  2210  0025D8  6EB0               	movwf	4016,c	;volatile
  2211                           
  2212                           ;main.c: 105: SPBRGH1 = 0;
  2213  0025DA  0E00               	movlw	0
  2214  0025DC  6E7F               	movwf	3967,c	;volatile
  2215                           
  2216                           ;main.c: 106: IPR1bits.RC1IP = 0;
  2217  0025DE  9A9F               	bcf	3999,5,c	;volatile
  2218                           
  2219                           ;main.c: 107: PIE1bits.RCIE = 1;
  2220  0025E0  8A9D               	bsf	3997,5,c	;volatile
  2221                           
  2222                           ;main.c: 108: INTCONbits.PEIE = 1;
  2223  0025E2  8CF2               	bsf	intcon,6,c	;volatile
  2224  0025E4  0012               	return		;funcret
  2225  0025E6                     __end_of_main_init:
  2226                           	opt stack 0
  2227                           tblptru	equ	0xFF8
  2228                           tblptrh	equ	0xFF7
  2229                           tblptrl	equ	0xFF6
  2230                           tablat	equ	0xFF5
  2231                           prodh	equ	0xFF4
  2232                           prodl	equ	0xFF3
  2233                           intcon	equ	0xFF2
  2234                           intcon2	equ	0xFF1
  2235                           postinc0	equ	0xFEE
  2236                           wreg	equ	0xFE8
  2237                           indf2	equ	0xFDF
  2238                           postinc2	equ	0xFDE
  2239                           postdec2	equ	0xFDD
  2240                           fsr2h	equ	0xFDA
  2241                           fsr2l	equ	0xFD9
  2242                           status	equ	0xFD8
  2243                           
  2244 ;; *************** function _RTCC_init *****************
  2245 ;; Defined at:
  2246 ;;		line 22 in file "My_RTCC.c"
  2247 ;; Parameters:    Size  Location     Type
  2248 ;;		None
  2249 ;; Auto vars:     Size  Location     Type
  2250 ;;		None
  2251 ;; Return value:  Size  Location     Type
  2252 ;;		None               void
  2253 ;; Registers used:
  2254 ;;		wreg, status,2
  2255 ;; Tracked objects:
  2256 ;;		On entry : 0/0
  2257 ;;		On exit  : 0/0
  2258 ;;		Unchanged: 0/0
  2259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2264 ;;Total ram usage:        0 bytes
  2265 ;; Hardware stack levels used:    1
  2266 ;; Hardware stack levels required when called:    2
  2267 ;; This function calls:
  2268 ;;		Nothing
  2269 ;; This function is called by:
  2270 ;;		_main_init
  2271 ;; This function uses a non-reentrant model
  2272 ;;
  2273                           
  2274                           	psect	text7
  2275  0027DE                     __ptext7:
  2276                           	opt stack 0
  2277  0027DE                     _RTCC_init:
  2278                           	opt stack 27
  2279                           
  2280                           ;My_RTCC.c: 23: RTCCFGbits.RTCWREN = 1;
  2281                           
  2282                           ;incstack = 0
  2283  0027DE  010F               	movlb	15	; () banked
  2284  0027E0  8B3F               	bsf	63,5,b	;volatile
  2285                           
  2286                           ;My_RTCC.c: 24: if (RTCCFGbits.RTCWREN != 1) {
  2287  0027E2  010F               	movlb	15	; () banked
  2288  0027E4  BB3F               	btfsc	63,5,b	;volatile
  2289  0027E6  D006               	goto	l2211
  2290                           
  2291                           ; BSR set to: 15
  2292                           ;My_RTCC.c: 25: EECON2 = 0x55;
  2293  0027E8  0E55               	movlw	85
  2294  0027EA  6EA7               	movwf	4007,c	;volatile
  2295                           
  2296                           ;My_RTCC.c: 26: EECON2 = 0xAA;
  2297  0027EC  0EAA               	movlw	170
  2298  0027EE  6EA7               	movwf	4007,c	;volatile
  2299                           
  2300                           ; BSR set to: 15
  2301                           ;My_RTCC.c: 27: RTCCFGbits.RTCWREN = 1;
  2302  0027F0  010F               	movlb	15	; () banked
  2303  0027F2  8B3F               	bsf	63,5,b	;volatile
  2304  0027F4                     l2211:
  2305                           
  2306                           ; BSR set to: 15
  2307                           ;My_RTCC.c: 28: }
  2308                           ;My_RTCC.c: 29: RTCCFGbits.RTCEN = 1;
  2309  0027F4  010F               	movlb	15	; () banked
  2310  0027F6  8F3F               	bsf	63,7,b	;volatile
  2311                           
  2312                           ; BSR set to: 15
  2313                           ;My_RTCC.c: 30: RTCCFGbits.RTCOE = 0;
  2314  0027F8  010F               	movlb	15	; () banked
  2315  0027FA  953F               	bcf	63,2,b	;volatile
  2316                           
  2317                           ; BSR set to: 15
  2318                           ;My_RTCC.c: 31: PADCFG1bits.RTSECSEL0 = 1;
  2319  0027FC  010F               	movlb	15	; () banked
  2320  0027FE  833C               	bsf	60,1,b	;volatile
  2321                           
  2322                           ; BSR set to: 15
  2323                           ;My_RTCC.c: 32: PADCFG1bits.RTSECSEL1 = 1;
  2324  002800  010F               	movlb	15	; () banked
  2325  002802  853C               	bsf	60,2,b	;volatile
  2326                           
  2327                           ;My_RTCC.c: 33: RTCCAL = 0x00;
  2328  002804  0E00               	movlw	0
  2329  002806  010F               	movlb	15	; () banked
  2330  002808  6F3E               	movwf	62,b	;volatile
  2331                           
  2332                           ; BSR set to: 15
  2333                           ;My_RTCC.c: 34: T1CONbits.T1OSCEN = 1;
  2334  00280A  86CD               	bsf	4045,3,c	;volatile
  2335                           
  2336                           ; BSR set to: 15
  2337  00280C  0012               	return		;funcret
  2338  00280E                     __end_of_RTCC_init:
  2339                           	opt stack 0
  2340                           tblptru	equ	0xFF8
  2341                           tblptrh	equ	0xFF7
  2342                           tblptrl	equ	0xFF6
  2343                           tablat	equ	0xFF5
  2344                           prodh	equ	0xFF4
  2345                           prodl	equ	0xFF3
  2346                           intcon	equ	0xFF2
  2347                           intcon2	equ	0xFF1
  2348                           postinc0	equ	0xFEE
  2349                           wreg	equ	0xFE8
  2350                           indf2	equ	0xFDF
  2351                           postinc2	equ	0xFDE
  2352                           postdec2	equ	0xFDD
  2353                           fsr2h	equ	0xFDA
  2354                           fsr2l	equ	0xFD9
  2355                           status	equ	0xFD8
  2356                           
  2357 ;; *************** function _RTCC_loop *****************
  2358 ;; Defined at:
  2359 ;;		line 346 in file "My_RTCC.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;		None
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;		None
  2364 ;; Return value:  Size  Location     Type
  2365 ;;		None               void
  2366 ;; Registers used:
  2367 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2377 ;;Total ram usage:        0 bytes
  2378 ;; Hardware stack levels used:    1
  2379 ;; Hardware stack levels required when called:    6
  2380 ;; This function calls:
  2381 ;;		_RTCC_from_RTCC
  2382 ;; This function is called by:
  2383 ;;		_main
  2384 ;; This function uses a non-reentrant model
  2385 ;;
  2386                           
  2387                           	psect	text8
  2388  002740                     __ptext8:
  2389                           	opt stack 0
  2390  002740                     _RTCC_loop:
  2391                           	opt stack 24
  2392  002740                     l278:
  2393  002740  010F               	movlb	15	; () banked
  2394  002742  B93F               	btfsc	63,4,b	;volatile
  2395  002744  D7FD               	goto	l278
  2396                           
  2397                           ; BSR set to: 15
  2398                           ;My_RTCC.c: 349: now.halfsec = RTCCFGbits.HALFSEC;
  2399                           
  2400                           ; BSR set to: 15
  2401  002746  0E00               	movlw	0
  2402  002748  B73F               	btfsc	63,3,b	;volatile
  2403  00274A  0E01               	movlw	1
  2404  00274C  0100               	movlb	0	; () banked
  2405  00274E  6FA8               	movwf	(_now+12)& (0+255),b
  2406                           
  2407                           ; BSR set to: 0
  2408                           ;My_RTCC.c: 350: if (prev_halfsec != now.halfsec) {
  2409  002750  503C               	movf	RTCC_loop@prev_halfsec,w,c
  2410  002752  0100               	movlb	0	; () banked
  2411  002754  19A8               	xorwf	(_now+12)& (0+255),w,b
  2412  002756  B4D8               	btfsc	status,2,c
  2413  002758  0012               	return	
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;My_RTCC.c: 351: prev_halfsec = now.halfsec;
  2417  00275A  C0A8  F03C         	movff	_now+12,RTCC_loop@prev_halfsec
  2418                           
  2419                           ;My_RTCC.c: 352: now.colon = now.halfsec;
  2420  00275E  C0A8  F0A7         	movff	_now+12,_now+11
  2421                           
  2422                           ; BSR set to: 0
  2423                           ;My_RTCC.c: 353: time_change_flag = 1;
  2424  002762  0E01               	movlw	1
  2425  002764  0100               	movlb	0	; () banked
  2426  002766  6F9B               	movwf	_time_change_flag& (0+255),b
  2427                           
  2428                           ; BSR set to: 0
  2429                           ;My_RTCC.c: 354: RTCC_from_RTCC(&now);
  2430  002768  0E9C               	movlw	low _now
  2431  00276A  6E34               	movwf	RTCC_from_RTCC@tm,c
  2432  00276C  0E00               	movlw	high _now
  2433  00276E  6E35               	movwf	RTCC_from_RTCC@tm+1,c
  2434  002770  EC45  F014         	call	_RTCC_from_RTCC	;wreg free
  2435  002774  0012               	return	
  2436  002776                     __end_of_RTCC_loop:
  2437                           	opt stack 0
  2438                           tblptru	equ	0xFF8
  2439                           tblptrh	equ	0xFF7
  2440                           tblptrl	equ	0xFF6
  2441                           tablat	equ	0xFF5
  2442                           prodh	equ	0xFF4
  2443                           prodl	equ	0xFF3
  2444                           intcon	equ	0xFF2
  2445                           intcon2	equ	0xFF1
  2446                           postinc0	equ	0xFEE
  2447                           wreg	equ	0xFE8
  2448                           indf2	equ	0xFDF
  2449                           postinc2	equ	0xFDE
  2450                           postdec2	equ	0xFDD
  2451                           fsr2h	equ	0xFDA
  2452                           fsr2l	equ	0xFD9
  2453                           status	equ	0xFD8
  2454                           
  2455 ;; *************** function _RTCC_adjust_time_button *****************
  2456 ;; Defined at:
  2457 ;;		line 322 in file "My_RTCC.c"
  2458 ;; Parameters:    Size  Location     Type
  2459 ;;  tm              2   20[BANK0 ] PTR struct .
  2460 ;;		 -> now(14), 
  2461 ;;  mode            2   22[BANK0 ] PTR struct button
  2462 ;;		 -> mode(4), 
  2463 ;;  cnt_inc         2   24[BANK0 ] PTR struct button
  2464 ;;		 -> inc(4), 
  2465 ;;  cnt_dec         2   26[BANK0 ] PTR struct button
  2466 ;;		 -> dec(4), 
  2467 ;; Auto vars:     Size  Location     Type
  2468 ;;		None
  2469 ;; Return value:  Size  Location     Type
  2470 ;;		None               void
  2471 ;; Registers used:
  2472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2473 ;; Tracked objects:
  2474 ;;		On entry : 0/0
  2475 ;;		On exit  : 0/0
  2476 ;;		Unchanged: 0/0
  2477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2478 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2481 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2482 ;;Total ram usage:        8 bytes
  2483 ;; Hardware stack levels used:    1
  2484 ;; Hardware stack levels required when called:    7
  2485 ;; This function calls:
  2486 ;;		_RTCC_adjust_time_cursor
  2487 ;;		_RTCC_adjust_time_dec
  2488 ;;		_RTCC_adjust_time_inc
  2489 ;;		_RTCC_adjust_time_toggle
  2490 ;; This function is called by:
  2491 ;;		_main
  2492 ;; This function uses a non-reentrant model
  2493 ;;
  2494                           
  2495                           	psect	text9
  2496  001ED8                     __ptext9:
  2497                           	opt stack 0
  2498  001ED8                     _RTCC_adjust_time_button:
  2499                           	opt stack 23
  2500                           
  2501                           ;My_RTCC.c: 323: if (mode->flag.long_holding_3) {
  2502                           
  2503                           ;incstack = 0
  2504  001ED8  0100               	movlb	0	; () banked
  2505  001EDA  EE20 F003          	lfsr	2,3
  2506  001EDE  5176               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  2507  001EE0  26D9               	addwf	fsr2l,f,c
  2508  001EE2  5177               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  2509  001EE4  22DA               	addwfc	fsr2h,f,c
  2510  001EE6  0100               	movlb	0	; () banked
  2511  001EE8  A6DF               	btfss	indf2,3,c
  2512  001EEA  D030               	goto	l3311
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;My_RTCC.c: 324: mode->flag.long_holding_3 = 0;
  2516  001EEC  0100               	movlb	0	; () banked
  2517  001EEE  EE20 F003          	lfsr	2,3
  2518  001EF2  5176               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  2519  001EF4  26D9               	addwf	fsr2l,f,c
  2520  001EF6  5177               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  2521  001EF8  22DA               	addwfc	fsr2h,f,c
  2522  001EFA  0100               	movlb	0	; () banked
  2523  001EFC  96DF               	bcf	indf2,3,c
  2524                           
  2525                           ; BSR set to: 0
  2526                           ;My_RTCC.c: 325: RTCC_adjust_time_toggle(tm);
  2527  001EFE  C074  F015         	movff	RTCC_adjust_time_button@tm,RTCC_adjust_time_toggle@tm
  2528  001F02  C075  F016         	movff	RTCC_adjust_time_button@tm+1,RTCC_adjust_time_toggle@tm+1
  2529  001F06  ECD5  F013         	call	_RTCC_adjust_time_toggle	;wreg free
  2530                           
  2531                           ;My_RTCC.c: 326: mode->flags = 0;
  2532  001F0A  0100               	movlb	0	; () banked
  2533  001F0C  EE20 F002          	lfsr	2,2
  2534  001F10  5176               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  2535  001F12  26D9               	addwf	fsr2l,f,c
  2536  001F14  5177               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  2537  001F16  22DA               	addwfc	fsr2h,f,c
  2538  001F18  0E00               	movlw	0
  2539  001F1A  6EDE               	movwf	postinc2,c
  2540  001F1C  0E00               	movlw	0
  2541  001F1E  6EDD               	movwf	postdec2,c
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;My_RTCC.c: 327: cnt_inc->flags = 0;
  2545  001F20  0100               	movlb	0	; () banked
  2546  001F22  EE20 F002          	lfsr	2,2
  2547  001F26  5178               	movf	RTCC_adjust_time_button@cnt_inc& (0+255),w,b
  2548  001F28  26D9               	addwf	fsr2l,f,c
  2549  001F2A  5179               	movf	(RTCC_adjust_time_button@cnt_inc+1)& (0+255),w,b
  2550  001F2C  22DA               	addwfc	fsr2h,f,c
  2551  001F2E  0E00               	movlw	0
  2552  001F30  6EDE               	movwf	postinc2,c
  2553  001F32  0E00               	movlw	0
  2554  001F34  6EDD               	movwf	postdec2,c
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;My_RTCC.c: 328: cnt_dec->flags = 0;
  2558  001F36  0100               	movlb	0	; () banked
  2559  001F38  EE20 F002          	lfsr	2,2
  2560  001F3C  517A               	movf	RTCC_adjust_time_button@cnt_dec& (0+255),w,b
  2561  001F3E  26D9               	addwf	fsr2l,f,c
  2562  001F40  517B               	movf	(RTCC_adjust_time_button@cnt_dec+1)& (0+255),w,b
  2563  001F42  22DA               	addwfc	fsr2h,f,c
  2564  001F44  0E00               	movlw	0
  2565  001F46  6EDE               	movwf	postinc2,c
  2566  001F48  0E00               	movlw	0
  2567  001F4A  6EDD               	movwf	postdec2,c
  2568  001F4C                     l3311:
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;My_RTCC.c: 329: }
  2572                           ;My_RTCC.c: 330: if (tm->edit.flags) {
  2573  001F4C  0100               	movlb	0	; () banked
  2574  001F4E  EE20 F00D          	lfsr	2,13
  2575  001F52  5174               	movf	RTCC_adjust_time_button@tm& (0+255),w,b
  2576  001F54  26D9               	addwf	fsr2l,f,c
  2577  001F56  5175               	movf	(RTCC_adjust_time_button@tm+1)& (0+255),w,b
  2578  001F58  22DA               	addwfc	fsr2h,f,c
  2579  001F5A  50DF               	movf	indf2,w,c
  2580  001F5C  B4D8               	btfsc	status,2,c
  2581  001F5E  0012               	return	
  2582                           
  2583                           ; BSR set to: 0
  2584                           ;My_RTCC.c: 331: if (mode->flag.press) {
  2585  001F60  0100               	movlb	0	; () banked
  2586  001F62  EE20 F002          	lfsr	2,2
  2587  001F66  5176               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  2588  001F68  26D9               	addwf	fsr2l,f,c
  2589  001F6A  5177               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  2590  001F6C  22DA               	addwfc	fsr2h,f,c
  2591  001F6E  0100               	movlb	0	; () banked
  2592  001F70  A0DF               	btfss	indf2,0,c
  2593  001F72  D00F               	goto	l3319
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;My_RTCC.c: 332: mode->flag.press = 0;
  2597  001F74  0100               	movlb	0	; () banked
  2598  001F76  EE20 F002          	lfsr	2,2
  2599  001F7A  5176               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  2600  001F7C  26D9               	addwf	fsr2l,f,c
  2601  001F7E  5177               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  2602  001F80  22DA               	addwfc	fsr2h,f,c
  2603  001F82  0100               	movlb	0	; () banked
  2604  001F84  90DF               	bcf	indf2,0,c
  2605                           
  2606                           ; BSR set to: 0
  2607                           ;My_RTCC.c: 333: RTCC_adjust_time_cursor(tm);
  2608  001F86  C074  F015         	movff	RTCC_adjust_time_button@tm,RTCC_adjust_time_cursor@tm
  2609  001F8A  C075  F016         	movff	RTCC_adjust_time_button@tm+1,RTCC_adjust_time_cursor@tm+1
  2610  001F8E  ECFC  F00F         	call	_RTCC_adjust_time_cursor	;wreg free
  2611  001F92                     l3319:
  2612                           
  2613                           ;My_RTCC.c: 334: }
  2614                           ;My_RTCC.c: 335: if (cnt_inc->flag.press) {
  2615  001F92  0100               	movlb	0	; () banked
  2616  001F94  EE20 F002          	lfsr	2,2
  2617  001F98  5178               	movf	RTCC_adjust_time_button@cnt_inc& (0+255),w,b
  2618  001F9A  26D9               	addwf	fsr2l,f,c
  2619  001F9C  5179               	movf	(RTCC_adjust_time_button@cnt_inc+1)& (0+255),w,b
  2620  001F9E  22DA               	addwfc	fsr2h,f,c
  2621  001FA0  0100               	movlb	0	; () banked
  2622  001FA2  A0DF               	btfss	indf2,0,c
  2623  001FA4  D00F               	goto	l3325
  2624                           
  2625                           ; BSR set to: 0
  2626                           ;My_RTCC.c: 336: cnt_inc->flag.press = 0;
  2627  001FA6  0100               	movlb	0	; () banked
  2628  001FA8  EE20 F002          	lfsr	2,2
  2629  001FAC  5178               	movf	RTCC_adjust_time_button@cnt_inc& (0+255),w,b
  2630  001FAE  26D9               	addwf	fsr2l,f,c
  2631  001FB0  5179               	movf	(RTCC_adjust_time_button@cnt_inc+1)& (0+255),w,b
  2632  001FB2  22DA               	addwfc	fsr2h,f,c
  2633  001FB4  0100               	movlb	0	; () banked
  2634  001FB6  90DF               	bcf	indf2,0,c
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;My_RTCC.c: 337: RTCC_adjust_time_inc(tm);
  2638  001FB8  C074  F06C         	movff	RTCC_adjust_time_button@tm,RTCC_adjust_time_inc@tm
  2639  001FBC  C075  F06D         	movff	RTCC_adjust_time_button@tm+1,RTCC_adjust_time_inc@tm+1
  2640  001FC0  EC04  F00B         	call	_RTCC_adjust_time_inc	;wreg free
  2641  001FC4                     l3325:
  2642                           
  2643                           ;My_RTCC.c: 338: }
  2644                           ;My_RTCC.c: 339: if (cnt_dec->flag.press) {
  2645  001FC4  0100               	movlb	0	; () banked
  2646  001FC6  EE20 F002          	lfsr	2,2
  2647  001FCA  517A               	movf	RTCC_adjust_time_button@cnt_dec& (0+255),w,b
  2648  001FCC  26D9               	addwf	fsr2l,f,c
  2649  001FCE  517B               	movf	(RTCC_adjust_time_button@cnt_dec+1)& (0+255),w,b
  2650  001FD0  22DA               	addwfc	fsr2h,f,c
  2651  001FD2  0100               	movlb	0	; () banked
  2652  001FD4  A0DF               	btfss	indf2,0,c
  2653  001FD6  0012               	return	
  2654                           
  2655                           ; BSR set to: 0
  2656                           ;My_RTCC.c: 340: cnt_dec->flag.press = 0;
  2657  001FD8  0100               	movlb	0	; () banked
  2658  001FDA  EE20 F002          	lfsr	2,2
  2659  001FDE  517A               	movf	RTCC_adjust_time_button@cnt_dec& (0+255),w,b
  2660  001FE0  26D9               	addwf	fsr2l,f,c
  2661  001FE2  517B               	movf	(RTCC_adjust_time_button@cnt_dec+1)& (0+255),w,b
  2662  001FE4  22DA               	addwfc	fsr2h,f,c
  2663  001FE6  0100               	movlb	0	; () banked
  2664  001FE8  90DF               	bcf	indf2,0,c
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;My_RTCC.c: 341: RTCC_adjust_time_dec(tm);
  2668  001FEA  C074  F06C         	movff	RTCC_adjust_time_button@tm,RTCC_adjust_time_dec@tm
  2669  001FEE  C075  F06D         	movff	RTCC_adjust_time_button@tm+1,RTCC_adjust_time_dec@tm+1
  2670  001FF2  EC44  F00C         	call	_RTCC_adjust_time_dec	;wreg free
  2671  001FF6  0012               	return	
  2672  001FF8                     __end_of_RTCC_adjust_time_button:
  2673                           	opt stack 0
  2674                           tblptru	equ	0xFF8
  2675                           tblptrh	equ	0xFF7
  2676                           tblptrl	equ	0xFF6
  2677                           tablat	equ	0xFF5
  2678                           prodh	equ	0xFF4
  2679                           prodl	equ	0xFF3
  2680                           intcon	equ	0xFF2
  2681                           intcon2	equ	0xFF1
  2682                           postinc0	equ	0xFEE
  2683                           wreg	equ	0xFE8
  2684                           indf2	equ	0xFDF
  2685                           postinc2	equ	0xFDE
  2686                           postdec2	equ	0xFDD
  2687                           fsr2h	equ	0xFDA
  2688                           fsr2l	equ	0xFD9
  2689                           status	equ	0xFD8
  2690                           
  2691 ;; *************** function _RTCC_adjust_time_toggle *****************
  2692 ;; Defined at:
  2693 ;;		line 262 in file "My_RTCC.c"
  2694 ;; Parameters:    Size  Location     Type
  2695 ;;  tm              2   20[COMRAM] PTR struct .
  2696 ;;		 -> now(14), 
  2697 ;; Auto vars:     Size  Location     Type
  2698 ;;		None
  2699 ;; Return value:  Size  Location     Type
  2700 ;;		None               void
  2701 ;; Registers used:
  2702 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2703 ;; Tracked objects:
  2704 ;;		On entry : 0/0
  2705 ;;		On exit  : 0/0
  2706 ;;		Unchanged: 0/0
  2707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2708 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2711 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2712 ;;Total ram usage:        2 bytes
  2713 ;; Hardware stack levels used:    1
  2714 ;; Hardware stack levels required when called:    2
  2715 ;; This function calls:
  2716 ;;		Nothing
  2717 ;; This function is called by:
  2718 ;;		_RTCC_adjust_time_button
  2719 ;; This function uses a non-reentrant model
  2720 ;;
  2721                           
  2722                           	psect	text10
  2723  0027AA                     __ptext10:
  2724                           	opt stack 0
  2725  0027AA                     _RTCC_adjust_time_toggle:
  2726                           	opt stack 27
  2727                           
  2728                           ;My_RTCC.c: 263: if (tm->edit.flags) {
  2729                           
  2730                           ;incstack = 0
  2731  0027AA  EE20 F00D          	lfsr	2,13
  2732  0027AE  5015               	movf	RTCC_adjust_time_toggle@tm,w,c
  2733  0027B0  26D9               	addwf	fsr2l,f,c
  2734  0027B2  5016               	movf	RTCC_adjust_time_toggle@tm+1,w,c
  2735  0027B4  22DA               	addwfc	fsr2h,f,c
  2736  0027B6  50DF               	movf	indf2,w,c
  2737  0027B8  B4D8               	btfsc	status,2,c
  2738  0027BA  D009               	goto	l2225
  2739                           
  2740                           ;My_RTCC.c: 264: tm->edit.flags = 0;
  2741  0027BC  EE20 F00D          	lfsr	2,13
  2742  0027C0  5015               	movf	RTCC_adjust_time_toggle@tm,w,c
  2743  0027C2  26D9               	addwf	fsr2l,f,c
  2744  0027C4  5016               	movf	RTCC_adjust_time_toggle@tm+1,w,c
  2745  0027C6  22DA               	addwfc	fsr2h,f,c
  2746  0027C8  0E00               	movlw	0
  2747  0027CA  6EDF               	movwf	indf2,c
  2748                           
  2749                           ;My_RTCC.c: 265: } else {
  2750  0027CC  0012               	return	
  2751  0027CE                     l2225:
  2752                           
  2753                           ;My_RTCC.c: 266: tm->edit.flag.ss = 1;
  2754  0027CE  EE20 F00D          	lfsr	2,13
  2755  0027D2  5015               	movf	RTCC_adjust_time_toggle@tm,w,c
  2756  0027D4  26D9               	addwf	fsr2l,f,c
  2757  0027D6  5016               	movf	RTCC_adjust_time_toggle@tm+1,w,c
  2758  0027D8  22DA               	addwfc	fsr2h,f,c
  2759  0027DA  80DF               	bsf	indf2,0,c
  2760  0027DC  0012               	return	
  2761  0027DE                     __end_of_RTCC_adjust_time_toggle:
  2762                           	opt stack 0
  2763                           tblptru	equ	0xFF8
  2764                           tblptrh	equ	0xFF7
  2765                           tblptrl	equ	0xFF6
  2766                           tablat	equ	0xFF5
  2767                           prodh	equ	0xFF4
  2768                           prodl	equ	0xFF3
  2769                           intcon	equ	0xFF2
  2770                           intcon2	equ	0xFF1
  2771                           postinc0	equ	0xFEE
  2772                           wreg	equ	0xFE8
  2773                           indf2	equ	0xFDF
  2774                           postinc2	equ	0xFDE
  2775                           postdec2	equ	0xFDD
  2776                           fsr2h	equ	0xFDA
  2777                           fsr2l	equ	0xFD9
  2778                           status	equ	0xFD8
  2779                           
  2780 ;; *************** function _RTCC_adjust_time_inc *****************
  2781 ;; Defined at:
  2782 ;;		line 280 in file "My_RTCC.c"
  2783 ;; Parameters:    Size  Location     Type
  2784 ;;  tm              2   12[BANK0 ] PTR struct .
  2785 ;;		 -> now(14), 
  2786 ;; Auto vars:     Size  Location     Type
  2787 ;;  i               1   18[BANK0 ] unsigned char 
  2788 ;;  i               1   19[BANK0 ] unsigned char 
  2789 ;; Return value:  Size  Location     Type
  2790 ;;		None               void
  2791 ;; Registers used:
  2792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2793 ;; Tracked objects:
  2794 ;;		On entry : 0/0
  2795 ;;		On exit  : 0/0
  2796 ;;		Unchanged: 0/0
  2797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2798 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2799 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2800 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2801 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2802 ;;Total ram usage:        8 bytes
  2803 ;; Hardware stack levels used:    1
  2804 ;; Hardware stack levels required when called:    6
  2805 ;; This function calls:
  2806 ;;		_RTCC_from_RTCC
  2807 ;;		_RTCC_from_epoch
  2808 ;;		___lmul
  2809 ;;		_month_length
  2810 ;; This function is called by:
  2811 ;;		_RTCC_adjust_time_button
  2812 ;; This function uses a non-reentrant model
  2813 ;;
  2814                           
  2815                           	psect	text11
  2816  001608                     __ptext11:
  2817                           	opt stack 0
  2818  001608                     _RTCC_adjust_time_inc:
  2819                           	opt stack 23
  2820                           
  2821                           ;My_RTCC.c: 281: RTCC_from_RTCC(tm);
  2822                           
  2823                           ;incstack = 0
  2824  001608  C06C  F034         	movff	RTCC_adjust_time_inc@tm,RTCC_from_RTCC@tm
  2825  00160C  C06D  F035         	movff	RTCC_adjust_time_inc@tm+1,RTCC_from_RTCC@tm+1
  2826  001610  EC45  F014         	call	_RTCC_from_RTCC	;wreg free
  2827                           
  2828                           ;My_RTCC.c: 282: if (tm->edit.flag.ss) tm->epoch += 1;
  2829  001614  0100               	movlb	0	; () banked
  2830  001616  EE20 F00D          	lfsr	2,13
  2831  00161A  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  2832  00161C  26D9               	addwf	fsr2l,f,c
  2833  00161E  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  2834  001620  22DA               	addwfc	fsr2h,f,c
  2835  001622  0100               	movlb	0	; () banked
  2836  001624  A0DF               	btfss	indf2,0,c
  2837  001626  D009               	goto	l238
  2838                           
  2839                           ; BSR set to: 0
  2840  001628  C06C  FFD9         	movff	RTCC_adjust_time_inc@tm,fsr2l
  2841  00162C  C06D  FFDA         	movff	RTCC_adjust_time_inc@tm+1,fsr2h
  2842  001630  2ADE               	incf	postinc2,f,c
  2843  001632  0E00               	movlw	0
  2844  001634  22DE               	addwfc	postinc2,f,c
  2845  001636  22DE               	addwfc	postinc2,f,c
  2846  001638  22DE               	addwfc	postinc2,f,c
  2847  00163A                     l238:
  2848                           
  2849                           ; BSR set to: 0
  2850                           ;My_RTCC.c: 283: if (tm->edit.flag.mm) tm->epoch += ((epoch_t)60);
  2851  00163A  0100               	movlb	0	; () banked
  2852  00163C  EE20 F00D          	lfsr	2,13
  2853  001640  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  2854  001642  26D9               	addwf	fsr2l,f,c
  2855  001644  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  2856  001646  22DA               	addwfc	fsr2h,f,c
  2857  001648  0100               	movlb	0	; () banked
  2858  00164A  A2DF               	btfss	indf2,1,c
  2859  00164C  D00A               	goto	l3139
  2860                           
  2861                           ; BSR set to: 0
  2862  00164E  0E3C               	movlw	60
  2863  001650  C06C  FFD9         	movff	RTCC_adjust_time_inc@tm,fsr2l
  2864  001654  C06D  FFDA         	movff	RTCC_adjust_time_inc@tm+1,fsr2h
  2865  001658  26DE               	addwf	postinc2,f,c
  2866  00165A  0E00               	movlw	0
  2867  00165C  22DE               	addwfc	postinc2,f,c
  2868  00165E  22DE               	addwfc	postinc2,f,c
  2869  001660  22DE               	addwfc	postinc2,f,c
  2870  001662                     l3139:
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;My_RTCC.c: 284: if (tm->edit.flag.hh) tm->epoch += ((epoch_t)60*60);
  2874  001662  0100               	movlb	0	; () banked
  2875  001664  EE20 F00D          	lfsr	2,13
  2876  001668  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  2877  00166A  26D9               	addwf	fsr2l,f,c
  2878  00166C  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  2879  00166E  22DA               	addwfc	fsr2h,f,c
  2880  001670  0100               	movlb	0	; () banked
  2881  001672  A4DF               	btfss	indf2,2,c
  2882  001674  D00C               	goto	l3143
  2883                           
  2884                           ; BSR set to: 0
  2885  001676  C06C  FFD9         	movff	RTCC_adjust_time_inc@tm,fsr2l
  2886  00167A  C06D  FFDA         	movff	RTCC_adjust_time_inc@tm+1,fsr2h
  2887  00167E  0E10               	movlw	16
  2888  001680  26DE               	addwf	postinc2,f,c
  2889  001682  0E0E               	movlw	14
  2890  001684  22DE               	addwfc	postinc2,f,c
  2891  001686  0E00               	movlw	0
  2892  001688  22DE               	addwfc	postinc2,f,c
  2893  00168A  0E00               	movlw	0
  2894  00168C  22DE               	addwfc	postinc2,f,c
  2895  00168E                     l3143:
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;My_RTCC.c: 285: if (tm->edit.flag.DD) tm->epoch += ((epoch_t)60*60*24);
  2899  00168E  0100               	movlb	0	; () banked
  2900  001690  EE20 F00D          	lfsr	2,13
  2901  001694  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  2902  001696  26D9               	addwf	fsr2l,f,c
  2903  001698  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  2904  00169A  22DA               	addwfc	fsr2h,f,c
  2905  00169C  0100               	movlb	0	; () banked
  2906  00169E  A6DF               	btfss	indf2,3,c
  2907  0016A0  D00C               	goto	l3147
  2908                           
  2909                           ; BSR set to: 0
  2910  0016A2  C06C  FFD9         	movff	RTCC_adjust_time_inc@tm,fsr2l
  2911  0016A6  C06D  FFDA         	movff	RTCC_adjust_time_inc@tm+1,fsr2h
  2912  0016AA  0E80               	movlw	128
  2913  0016AC  26DE               	addwf	postinc2,f,c
  2914  0016AE  0E51               	movlw	81
  2915  0016B0  22DE               	addwfc	postinc2,f,c
  2916  0016B2  0E01               	movlw	1
  2917  0016B4  22DE               	addwfc	postinc2,f,c
  2918  0016B6  0E00               	movlw	0
  2919  0016B8  22DE               	addwfc	postinc2,f,c
  2920  0016BA                     l3147:
  2921                           
  2922                           ; BSR set to: 0
  2923                           ;My_RTCC.c: 286: if (tm->edit.flag.MM) tm->epoch += ((epoch_t)60*60*24) * month_length(t
      +                          m->YY, tm->MM);
  2924  0016BA  0100               	movlb	0	; () banked
  2925  0016BC  EE20 F00D          	lfsr	2,13
  2926  0016C0  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  2927  0016C2  26D9               	addwf	fsr2l,f,c
  2928  0016C4  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  2929  0016C6  22DA               	addwfc	fsr2h,f,c
  2930  0016C8  0100               	movlb	0	; () banked
  2931  0016CA  A8DF               	btfss	indf2,4,c
  2932  0016CC  D031               	goto	l3151
  2933                           
  2934                           ; BSR set to: 0
  2935  0016CE  0100               	movlb	0	; () banked
  2936  0016D0  EE20 F009          	lfsr	2,9
  2937  0016D4  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  2938  0016D6  26D9               	addwf	fsr2l,f,c
  2939  0016D8  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  2940  0016DA  22DA               	addwfc	fsr2h,f,c
  2941  0016DC  50DF               	movf	indf2,w,c
  2942  0016DE  6E1B               	movwf	month_length@month,c
  2943  0016E0  0100               	movlb	0	; () banked
  2944  0016E2  EE20 F00A          	lfsr	2,10
  2945  0016E6  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  2946  0016E8  26D9               	addwf	fsr2l,f,c
  2947  0016EA  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  2948  0016EC  22DA               	addwfc	fsr2h,f,c
  2949  0016EE  50DF               	movf	indf2,w,c
  2950  0016F0  EC91  F011         	call	_month_length
  2951  0016F4  0100               	movlb	0	; () banked
  2952  0016F6  6F6E               	movwf	??_RTCC_adjust_time_inc& (0+255),b
  2953  0016F8  0100               	movlb	0	; () banked
  2954  0016FA  516E               	movf	??_RTCC_adjust_time_inc& (0+255),w,b
  2955  0016FC  6E22               	movwf	___lmul@multiplier,c
  2956  0016FE  6A23               	clrf	___lmul@multiplier+1,c
  2957  001700  6A24               	clrf	___lmul@multiplier+2,c
  2958  001702  6A25               	clrf	___lmul@multiplier+3,c
  2959  001704  0E80               	movlw	128
  2960  001706  6E26               	movwf	___lmul@multiplicand,c
  2961  001708  0E51               	movlw	81
  2962  00170A  6E27               	movwf	___lmul@multiplicand+1,c
  2963  00170C  0E01               	movlw	1
  2964  00170E  6E28               	movwf	___lmul@multiplicand+2,c
  2965  001710  0E00               	movlw	0
  2966  001712  6E29               	movwf	___lmul@multiplicand+3,c
  2967  001714  EC2B  F013         	call	___lmul	;wreg free
  2968  001718  C06C  FFD9         	movff	RTCC_adjust_time_inc@tm,fsr2l
  2969  00171C  C06D  FFDA         	movff	RTCC_adjust_time_inc@tm+1,fsr2h
  2970  001720  5022               	movf	?___lmul,w,c
  2971  001722  26DE               	addwf	postinc2,f,c
  2972  001724  5023               	movf	?___lmul+1,w,c
  2973  001726  22DE               	addwfc	postinc2,f,c
  2974  001728  5024               	movf	?___lmul+2,w,c
  2975  00172A  22DE               	addwfc	postinc2,f,c
  2976  00172C  5025               	movf	?___lmul+3,w,c
  2977  00172E  22DE               	addwfc	postinc2,f,c
  2978  001730                     l3151:
  2979                           
  2980                           ;My_RTCC.c: 287: if (tm->edit.flag.YY) {
  2981  001730  0100               	movlb	0	; () banked
  2982  001732  EE20 F00D          	lfsr	2,13
  2983  001736  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  2984  001738  26D9               	addwf	fsr2l,f,c
  2985  00173A  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  2986  00173C  22DA               	addwfc	fsr2h,f,c
  2987  00173E  0100               	movlb	0	; () banked
  2988  001740  AADF               	btfss	indf2,5,c
  2989  001742  D07C               	goto	l3173
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;My_RTCC.c: 288: for (uint8_t i = tm->MM; i <= 12; i++) {
  2993  001744  0100               	movlb	0	; () banked
  2994  001746  EE20 F009          	lfsr	2,9
  2995  00174A  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  2996  00174C  26D9               	addwf	fsr2l,f,c
  2997  00174E  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  2998  001750  22DA               	addwfc	fsr2h,f,c
  2999  001752  50DF               	movf	indf2,w,c
  3000  001754  0100               	movlb	0	; () banked
  3001  001756  6F73               	movwf	RTCC_adjust_time_inc@i& (0+255),b
  3002  001758                     l3155:
  3003                           
  3004                           ; BSR set to: 0
  3005  001758  0E0C               	movlw	12
  3006  00175A  0100               	movlb	0	; () banked
  3007  00175C  6573               	cpfsgt	RTCC_adjust_time_inc@i& (0+255),b
  3008  00175E  D001               	goto	l3159
  3009  001760  D02D               	goto	l3165
  3010  001762                     l3159:
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;My_RTCC.c: 289: tm->epoch += ((epoch_t)60*60*24) * month_length(tm->YY, i);
  3014  001762  C073  F01B         	movff	RTCC_adjust_time_inc@i,month_length@month
  3015  001766  0100               	movlb	0	; () banked
  3016  001768  EE20 F00A          	lfsr	2,10
  3017  00176C  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  3018  00176E  26D9               	addwf	fsr2l,f,c
  3019  001770  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  3020  001772  22DA               	addwfc	fsr2h,f,c
  3021  001774  50DF               	movf	indf2,w,c
  3022  001776  EC91  F011         	call	_month_length
  3023  00177A  0100               	movlb	0	; () banked
  3024  00177C  6F6E               	movwf	??_RTCC_adjust_time_inc& (0+255),b
  3025  00177E  0100               	movlb	0	; () banked
  3026  001780  516E               	movf	??_RTCC_adjust_time_inc& (0+255),w,b
  3027  001782  6E22               	movwf	___lmul@multiplier,c
  3028  001784  6A23               	clrf	___lmul@multiplier+1,c
  3029  001786  6A24               	clrf	___lmul@multiplier+2,c
  3030  001788  6A25               	clrf	___lmul@multiplier+3,c
  3031  00178A  0E80               	movlw	128
  3032  00178C  6E26               	movwf	___lmul@multiplicand,c
  3033  00178E  0E51               	movlw	81
  3034  001790  6E27               	movwf	___lmul@multiplicand+1,c
  3035  001792  0E01               	movlw	1
  3036  001794  6E28               	movwf	___lmul@multiplicand+2,c
  3037  001796  0E00               	movlw	0
  3038  001798  6E29               	movwf	___lmul@multiplicand+3,c
  3039  00179A  EC2B  F013         	call	___lmul	;wreg free
  3040  00179E  C06C  FFD9         	movff	RTCC_adjust_time_inc@tm,fsr2l
  3041  0017A2  C06D  FFDA         	movff	RTCC_adjust_time_inc@tm+1,fsr2h
  3042  0017A6  5022               	movf	?___lmul,w,c
  3043  0017A8  26DE               	addwf	postinc2,f,c
  3044  0017AA  5023               	movf	?___lmul+1,w,c
  3045  0017AC  22DE               	addwfc	postinc2,f,c
  3046  0017AE  5024               	movf	?___lmul+2,w,c
  3047  0017B0  22DE               	addwfc	postinc2,f,c
  3048  0017B2  5025               	movf	?___lmul+3,w,c
  3049  0017B4  22DE               	addwfc	postinc2,f,c
  3050  0017B6  0100               	movlb	0	; () banked
  3051  0017B8  2B73               	incf	RTCC_adjust_time_inc@i& (0+255),f,b
  3052  0017BA  D7CE               	goto	l3155
  3053  0017BC                     l3165:
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;My_RTCC.c: 290: }
  3057                           ;My_RTCC.c: 291: for (uint8_t i = 1; i < tm->MM; i++) {
  3058  0017BC  0E01               	movlw	1
  3059  0017BE  0100               	movlb	0	; () banked
  3060  0017C0  6F72               	movwf	RTCC_adjust_time_inc@i_1745& (0+255),b
  3061  0017C2  D030               	goto	l3171
  3062  0017C4                     l3167:
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;My_RTCC.c: 292: tm->epoch += ((epoch_t)60*60*24) * month_length(tm->YY + 1, i);
  3066  0017C4  C072  F01B         	movff	RTCC_adjust_time_inc@i_1745,month_length@month
  3067  0017C8  0100               	movlb	0	; () banked
  3068  0017CA  EE20 F00A          	lfsr	2,10
  3069  0017CE  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  3070  0017D0  26D9               	addwf	fsr2l,f,c
  3071  0017D2  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  3072  0017D4  22DA               	addwfc	fsr2h,f,c
  3073  0017D6  50DF               	movf	indf2,w,c
  3074  0017D8  0100               	movlb	0	; () banked
  3075  0017DA  6F6E               	movwf	??_RTCC_adjust_time_inc& (0+255),b
  3076  0017DC  0100               	movlb	0	; () banked
  3077  0017DE  296E               	incf	??_RTCC_adjust_time_inc& (0+255),w,b
  3078  0017E0  EC91  F011         	call	_month_length
  3079  0017E4  0100               	movlb	0	; () banked
  3080  0017E6  6F6F               	movwf	(??_RTCC_adjust_time_inc+1)& (0+255),b
  3081  0017E8  0100               	movlb	0	; () banked
  3082  0017EA  516F               	movf	(??_RTCC_adjust_time_inc+1)& (0+255),w,b
  3083  0017EC  6E22               	movwf	___lmul@multiplier,c
  3084  0017EE  6A23               	clrf	___lmul@multiplier+1,c
  3085  0017F0  6A24               	clrf	___lmul@multiplier+2,c
  3086  0017F2  6A25               	clrf	___lmul@multiplier+3,c
  3087  0017F4  0E80               	movlw	128
  3088  0017F6  6E26               	movwf	___lmul@multiplicand,c
  3089  0017F8  0E51               	movlw	81
  3090  0017FA  6E27               	movwf	___lmul@multiplicand+1,c
  3091  0017FC  0E01               	movlw	1
  3092  0017FE  6E28               	movwf	___lmul@multiplicand+2,c
  3093  001800  0E00               	movlw	0
  3094  001802  6E29               	movwf	___lmul@multiplicand+3,c
  3095  001804  EC2B  F013         	call	___lmul	;wreg free
  3096  001808  C06C  FFD9         	movff	RTCC_adjust_time_inc@tm,fsr2l
  3097  00180C  C06D  FFDA         	movff	RTCC_adjust_time_inc@tm+1,fsr2h
  3098  001810  5022               	movf	?___lmul,w,c
  3099  001812  26DE               	addwf	postinc2,f,c
  3100  001814  5023               	movf	?___lmul+1,w,c
  3101  001816  22DE               	addwfc	postinc2,f,c
  3102  001818  5024               	movf	?___lmul+2,w,c
  3103  00181A  22DE               	addwfc	postinc2,f,c
  3104  00181C  5025               	movf	?___lmul+3,w,c
  3105  00181E  22DE               	addwfc	postinc2,f,c
  3106  001820  0100               	movlb	0	; () banked
  3107  001822  2B72               	incf	RTCC_adjust_time_inc@i_1745& (0+255),f,b
  3108  001824                     l3171:
  3109                           
  3110                           ; BSR set to: 0
  3111  001824  0100               	movlb	0	; () banked
  3112  001826  EE20 F009          	lfsr	2,9
  3113  00182A  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  3114  00182C  26D9               	addwf	fsr2l,f,c
  3115  00182E  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  3116  001830  22DA               	addwfc	fsr2h,f,c
  3117  001832  50DE               	movf	postinc2,w,c
  3118  001834  0100               	movlb	0	; () banked
  3119  001836  5D72               	subwf	RTCC_adjust_time_inc@i_1745& (0+255),w,b
  3120  001838  A0D8               	btfss	status,0,c
  3121  00183A  D7C4               	goto	l3167
  3122  00183C                     l3173:
  3123                           
  3124                           ; BSR set to: 0
  3125                           ;My_RTCC.c: 293: }
  3126                           ;My_RTCC.c: 294: }
  3127                           ;My_RTCC.c: 296: if (tm->epoch >= 3155760000)tm->epoch -= 3155760000;
  3128  00183C  C06C  FFD9         	movff	RTCC_adjust_time_inc@tm,fsr2l
  3129  001840  C06D  FFDA         	movff	RTCC_adjust_time_inc@tm+1,fsr2h
  3130  001844  0E80               	movlw	128
  3131  001846  5CDE               	subwf	postinc2,w,c
  3132  001848  0E13               	movlw	19
  3133  00184A  58DE               	subwfb	postinc2,w,c
  3134  00184C  0E19               	movlw	25
  3135  00184E  58DE               	subwfb	postinc2,w,c
  3136  001850  0EBC               	movlw	188
  3137  001852  58DE               	subwfb	postinc2,w,c
  3138  001854  A0D8               	btfss	status,0,c
  3139  001856  D00C               	goto	l3177
  3140                           
  3141                           ; BSR set to: 0
  3142  001858  C06C  FFD9         	movff	RTCC_adjust_time_inc@tm,fsr2l
  3143  00185C  C06D  FFDA         	movff	RTCC_adjust_time_inc@tm+1,fsr2h
  3144  001860  0E80               	movlw	128
  3145  001862  5EDE               	subwf	postinc2,f,c
  3146  001864  0E13               	movlw	19
  3147  001866  5ADE               	subwfb	postinc2,f,c
  3148  001868  0E19               	movlw	25
  3149  00186A  5ADE               	subwfb	postinc2,f,c
  3150  00186C  0EBC               	movlw	188
  3151  00186E  5ADE               	subwfb	postinc2,f,c
  3152  001870                     l3177:
  3153                           
  3154                           ; BSR set to: 0
  3155                           ;My_RTCC.c: 297: RTCC_from_epoch(&now);
  3156  001870  0E9C               	movlw	low _now
  3157  001872  0100               	movlb	0	; () banked
  3158  001874  6F6A               	movwf	RTCC_from_epoch@tm& (0+255),b
  3159  001876  0E00               	movlw	high _now
  3160  001878  0100               	movlb	0	; () banked
  3161  00187A  6F6B               	movwf	(RTCC_from_epoch@tm+1)& (0+255),b
  3162  00187C  EC38  F014         	call	_RTCC_from_epoch	;wreg free
  3163                           
  3164                           ;My_RTCC.c: 298: time_change_flag = 1;
  3165  001880  0E01               	movlw	1
  3166  001882  0100               	movlb	0	; () banked
  3167  001884  6F9B               	movwf	_time_change_flag& (0+255),b
  3168                           
  3169                           ; BSR set to: 0
  3170  001886  0012               	return		;funcret
  3171  001888                     __end_of_RTCC_adjust_time_inc:
  3172                           	opt stack 0
  3173                           tblptru	equ	0xFF8
  3174                           tblptrh	equ	0xFF7
  3175                           tblptrl	equ	0xFF6
  3176                           tablat	equ	0xFF5
  3177                           prodh	equ	0xFF4
  3178                           prodl	equ	0xFF3
  3179                           intcon	equ	0xFF2
  3180                           intcon2	equ	0xFF1
  3181                           postinc0	equ	0xFEE
  3182                           wreg	equ	0xFE8
  3183                           indf2	equ	0xFDF
  3184                           postinc2	equ	0xFDE
  3185                           postdec2	equ	0xFDD
  3186                           fsr2h	equ	0xFDA
  3187                           fsr2l	equ	0xFD9
  3188                           status	equ	0xFD8
  3189                           
  3190 ;; *************** function _RTCC_adjust_time_dec *****************
  3191 ;; Defined at:
  3192 ;;		line 301 in file "My_RTCC.c"
  3193 ;; Parameters:    Size  Location     Type
  3194 ;;  tm              2   12[BANK0 ] PTR struct .
  3195 ;;		 -> now(14), 
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;  i               1   18[BANK0 ] unsigned char 
  3198 ;;  i               1   19[BANK0 ] unsigned char 
  3199 ;; Return value:  Size  Location     Type
  3200 ;;		None               void
  3201 ;; Registers used:
  3202 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3203 ;; Tracked objects:
  3204 ;;		On entry : 0/0
  3205 ;;		On exit  : 0/0
  3206 ;;		Unchanged: 0/0
  3207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3208 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3209 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3210 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3211 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3212 ;;Total ram usage:        8 bytes
  3213 ;; Hardware stack levels used:    1
  3214 ;; Hardware stack levels required when called:    6
  3215 ;; This function calls:
  3216 ;;		_RTCC_from_RTCC
  3217 ;;		_RTCC_from_epoch
  3218 ;;		___lmul
  3219 ;;		_month_length
  3220 ;; This function is called by:
  3221 ;;		_RTCC_adjust_time_button
  3222 ;; This function uses a non-reentrant model
  3223 ;;
  3224                           
  3225                           	psect	text12
  3226  001888                     __ptext12:
  3227                           	opt stack 0
  3228  001888                     _RTCC_adjust_time_dec:
  3229                           	opt stack 23
  3230                           
  3231                           ;My_RTCC.c: 302: RTCC_from_RTCC(tm);
  3232                           
  3233                           ; BSR set to: 0
  3234                           ;incstack = 0
  3235  001888  C06C  F034         	movff	RTCC_adjust_time_dec@tm,RTCC_from_RTCC@tm
  3236  00188C  C06D  F035         	movff	RTCC_adjust_time_dec@tm+1,RTCC_from_RTCC@tm+1
  3237  001890  EC45  F014         	call	_RTCC_from_RTCC	;wreg free
  3238                           
  3239                           ;My_RTCC.c: 303: if (tm->edit.flag.ss) tm->epoch -= 1;
  3240  001894  0100               	movlb	0	; () banked
  3241  001896  EE20 F00D          	lfsr	2,13
  3242  00189A  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3243  00189C  26D9               	addwf	fsr2l,f,c
  3244  00189E  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3245  0018A0  22DA               	addwfc	fsr2h,f,c
  3246  0018A2  0100               	movlb	0	; () banked
  3247  0018A4  A0DF               	btfss	indf2,0,c
  3248  0018A6  D009               	goto	l253
  3249                           
  3250                           ; BSR set to: 0
  3251  0018A8  C06C  FFD9         	movff	RTCC_adjust_time_dec@tm,fsr2l
  3252  0018AC  C06D  FFDA         	movff	RTCC_adjust_time_dec@tm+1,fsr2h
  3253  0018B0  06DE               	decf	postinc2,f,c
  3254  0018B2  0E00               	movlw	0
  3255  0018B4  5ADE               	subwfb	postinc2,f,c
  3256  0018B6  5ADE               	subwfb	postinc2,f,c
  3257  0018B8  5ADE               	subwfb	postinc2,f,c
  3258  0018BA                     l253:
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;My_RTCC.c: 304: if (tm->edit.flag.mm) tm->epoch -= ((epoch_t)60);
  3262  0018BA  0100               	movlb	0	; () banked
  3263  0018BC  EE20 F00D          	lfsr	2,13
  3264  0018C0  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3265  0018C2  26D9               	addwf	fsr2l,f,c
  3266  0018C4  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3267  0018C6  22DA               	addwfc	fsr2h,f,c
  3268  0018C8  0100               	movlb	0	; () banked
  3269  0018CA  A2DF               	btfss	indf2,1,c
  3270  0018CC  D00A               	goto	l3189
  3271                           
  3272                           ; BSR set to: 0
  3273  0018CE  0E3C               	movlw	60
  3274  0018D0  C06C  FFD9         	movff	RTCC_adjust_time_dec@tm,fsr2l
  3275  0018D4  C06D  FFDA         	movff	RTCC_adjust_time_dec@tm+1,fsr2h
  3276  0018D8  5EDE               	subwf	postinc2,f,c
  3277  0018DA  0E00               	movlw	0
  3278  0018DC  5ADE               	subwfb	postinc2,f,c
  3279  0018DE  5ADE               	subwfb	postinc2,f,c
  3280  0018E0  5ADE               	subwfb	postinc2,f,c
  3281  0018E2                     l3189:
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;My_RTCC.c: 305: if (tm->edit.flag.hh) tm->epoch -= ((epoch_t)60*60);
  3285  0018E2  0100               	movlb	0	; () banked
  3286  0018E4  EE20 F00D          	lfsr	2,13
  3287  0018E8  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3288  0018EA  26D9               	addwf	fsr2l,f,c
  3289  0018EC  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3290  0018EE  22DA               	addwfc	fsr2h,f,c
  3291  0018F0  0100               	movlb	0	; () banked
  3292  0018F2  A4DF               	btfss	indf2,2,c
  3293  0018F4  D00C               	goto	l3193
  3294                           
  3295                           ; BSR set to: 0
  3296  0018F6  C06C  FFD9         	movff	RTCC_adjust_time_dec@tm,fsr2l
  3297  0018FA  C06D  FFDA         	movff	RTCC_adjust_time_dec@tm+1,fsr2h
  3298  0018FE  0E10               	movlw	16
  3299  001900  5EDE               	subwf	postinc2,f,c
  3300  001902  0E0E               	movlw	14
  3301  001904  5ADE               	subwfb	postinc2,f,c
  3302  001906  0E00               	movlw	0
  3303  001908  5ADE               	subwfb	postinc2,f,c
  3304  00190A  0E00               	movlw	0
  3305  00190C  5ADE               	subwfb	postinc2,f,c
  3306  00190E                     l3193:
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;My_RTCC.c: 306: if (tm->edit.flag.DD) tm->epoch -= ((epoch_t)60*60*24);
  3310  00190E  0100               	movlb	0	; () banked
  3311  001910  EE20 F00D          	lfsr	2,13
  3312  001914  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3313  001916  26D9               	addwf	fsr2l,f,c
  3314  001918  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3315  00191A  22DA               	addwfc	fsr2h,f,c
  3316  00191C  0100               	movlb	0	; () banked
  3317  00191E  A6DF               	btfss	indf2,3,c
  3318  001920  D00C               	goto	l3197
  3319                           
  3320                           ; BSR set to: 0
  3321  001922  C06C  FFD9         	movff	RTCC_adjust_time_dec@tm,fsr2l
  3322  001926  C06D  FFDA         	movff	RTCC_adjust_time_dec@tm+1,fsr2h
  3323  00192A  0E80               	movlw	128
  3324  00192C  5EDE               	subwf	postinc2,f,c
  3325  00192E  0E51               	movlw	81
  3326  001930  5ADE               	subwfb	postinc2,f,c
  3327  001932  0E01               	movlw	1
  3328  001934  5ADE               	subwfb	postinc2,f,c
  3329  001936  0E00               	movlw	0
  3330  001938  5ADE               	subwfb	postinc2,f,c
  3331  00193A                     l3197:
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;My_RTCC.c: 307: if (tm->edit.flag.MM) tm->epoch -= ((epoch_t)60*60*24) * month_length(t
      +                          m->YY, tm->MM);
  3335  00193A  0100               	movlb	0	; () banked
  3336  00193C  EE20 F00D          	lfsr	2,13
  3337  001940  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3338  001942  26D9               	addwf	fsr2l,f,c
  3339  001944  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3340  001946  22DA               	addwfc	fsr2h,f,c
  3341  001948  0100               	movlb	0	; () banked
  3342  00194A  A8DF               	btfss	indf2,4,c
  3343  00194C  D031               	goto	l3201
  3344                           
  3345                           ; BSR set to: 0
  3346  00194E  0100               	movlb	0	; () banked
  3347  001950  EE20 F009          	lfsr	2,9
  3348  001954  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3349  001956  26D9               	addwf	fsr2l,f,c
  3350  001958  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3351  00195A  22DA               	addwfc	fsr2h,f,c
  3352  00195C  50DF               	movf	indf2,w,c
  3353  00195E  6E1B               	movwf	month_length@month,c
  3354  001960  0100               	movlb	0	; () banked
  3355  001962  EE20 F00A          	lfsr	2,10
  3356  001966  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3357  001968  26D9               	addwf	fsr2l,f,c
  3358  00196A  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3359  00196C  22DA               	addwfc	fsr2h,f,c
  3360  00196E  50DF               	movf	indf2,w,c
  3361  001970  EC91  F011         	call	_month_length
  3362  001974  0100               	movlb	0	; () banked
  3363  001976  6F6E               	movwf	??_RTCC_adjust_time_dec& (0+255),b
  3364  001978  0100               	movlb	0	; () banked
  3365  00197A  516E               	movf	??_RTCC_adjust_time_dec& (0+255),w,b
  3366  00197C  6E22               	movwf	___lmul@multiplier,c
  3367  00197E  6A23               	clrf	___lmul@multiplier+1,c
  3368  001980  6A24               	clrf	___lmul@multiplier+2,c
  3369  001982  6A25               	clrf	___lmul@multiplier+3,c
  3370  001984  0E80               	movlw	128
  3371  001986  6E26               	movwf	___lmul@multiplicand,c
  3372  001988  0E51               	movlw	81
  3373  00198A  6E27               	movwf	___lmul@multiplicand+1,c
  3374  00198C  0E01               	movlw	1
  3375  00198E  6E28               	movwf	___lmul@multiplicand+2,c
  3376  001990  0E00               	movlw	0
  3377  001992  6E29               	movwf	___lmul@multiplicand+3,c
  3378  001994  EC2B  F013         	call	___lmul	;wreg free
  3379  001998  C06C  FFD9         	movff	RTCC_adjust_time_dec@tm,fsr2l
  3380  00199C  C06D  FFDA         	movff	RTCC_adjust_time_dec@tm+1,fsr2h
  3381  0019A0  5022               	movf	?___lmul,w,c
  3382  0019A2  5EDE               	subwf	postinc2,f,c
  3383  0019A4  5023               	movf	?___lmul+1,w,c
  3384  0019A6  5ADE               	subwfb	postinc2,f,c
  3385  0019A8  5024               	movf	?___lmul+2,w,c
  3386  0019AA  5ADE               	subwfb	postinc2,f,c
  3387  0019AC  5025               	movf	?___lmul+3,w,c
  3388  0019AE  5ADE               	subwfb	postinc2,f,c
  3389  0019B0                     l3201:
  3390                           
  3391                           ;My_RTCC.c: 308: if (tm->edit.flag.YY) {
  3392  0019B0  0100               	movlb	0	; () banked
  3393  0019B2  EE20 F00D          	lfsr	2,13
  3394  0019B6  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3395  0019B8  26D9               	addwf	fsr2l,f,c
  3396  0019BA  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3397  0019BC  22DA               	addwfc	fsr2h,f,c
  3398  0019BE  0100               	movlb	0	; () banked
  3399  0019C0  AADF               	btfss	indf2,5,c
  3400  0019C2  D07C               	goto	l3223
  3401                           
  3402                           ; BSR set to: 0
  3403                           ;My_RTCC.c: 309: for (uint8_t i = tm->MM; i >= 1; i--) {
  3404  0019C4  0100               	movlb	0	; () banked
  3405  0019C6  EE20 F009          	lfsr	2,9
  3406  0019CA  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3407  0019CC  26D9               	addwf	fsr2l,f,c
  3408  0019CE  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3409  0019D0  22DA               	addwfc	fsr2h,f,c
  3410  0019D2  50DF               	movf	indf2,w,c
  3411  0019D4  0100               	movlb	0	; () banked
  3412  0019D6  6F73               	movwf	RTCC_adjust_time_dec@i& (0+255),b
  3413  0019D8                     l3205:
  3414                           
  3415                           ; BSR set to: 0
  3416  0019D8  0100               	movlb	0	; () banked
  3417  0019DA  5173               	movf	RTCC_adjust_time_dec@i& (0+255),w,b
  3418  0019DC  0100               	movlb	0	; () banked
  3419  0019DE  B4D8               	btfsc	status,2,c
  3420  0019E0  D02D               	goto	l3215
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;My_RTCC.c: 310: tm->epoch -= ((epoch_t)60*60*24) * month_length(tm->YY, i);
  3424                           
  3425                           ; BSR set to: 0
  3426                           
  3427                           ; BSR set to: 0
  3428  0019E2  C073  F01B         	movff	RTCC_adjust_time_dec@i,month_length@month
  3429  0019E6  0100               	movlb	0	; () banked
  3430  0019E8  EE20 F00A          	lfsr	2,10
  3431  0019EC  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3432  0019EE  26D9               	addwf	fsr2l,f,c
  3433  0019F0  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3434  0019F2  22DA               	addwfc	fsr2h,f,c
  3435  0019F4  50DF               	movf	indf2,w,c
  3436  0019F6  EC91  F011         	call	_month_length
  3437  0019FA  0100               	movlb	0	; () banked
  3438  0019FC  6F6E               	movwf	??_RTCC_adjust_time_dec& (0+255),b
  3439  0019FE  0100               	movlb	0	; () banked
  3440  001A00  516E               	movf	??_RTCC_adjust_time_dec& (0+255),w,b
  3441  001A02  6E22               	movwf	___lmul@multiplier,c
  3442  001A04  6A23               	clrf	___lmul@multiplier+1,c
  3443  001A06  6A24               	clrf	___lmul@multiplier+2,c
  3444  001A08  6A25               	clrf	___lmul@multiplier+3,c
  3445  001A0A  0E80               	movlw	128
  3446  001A0C  6E26               	movwf	___lmul@multiplicand,c
  3447  001A0E  0E51               	movlw	81
  3448  001A10  6E27               	movwf	___lmul@multiplicand+1,c
  3449  001A12  0E01               	movlw	1
  3450  001A14  6E28               	movwf	___lmul@multiplicand+2,c
  3451  001A16  0E00               	movlw	0
  3452  001A18  6E29               	movwf	___lmul@multiplicand+3,c
  3453  001A1A  EC2B  F013         	call	___lmul	;wreg free
  3454  001A1E  C06C  FFD9         	movff	RTCC_adjust_time_dec@tm,fsr2l
  3455  001A22  C06D  FFDA         	movff	RTCC_adjust_time_dec@tm+1,fsr2h
  3456  001A26  5022               	movf	?___lmul,w,c
  3457  001A28  5EDE               	subwf	postinc2,f,c
  3458  001A2A  5023               	movf	?___lmul+1,w,c
  3459  001A2C  5ADE               	subwfb	postinc2,f,c
  3460  001A2E  5024               	movf	?___lmul+2,w,c
  3461  001A30  5ADE               	subwfb	postinc2,f,c
  3462  001A32  5025               	movf	?___lmul+3,w,c
  3463  001A34  5ADE               	subwfb	postinc2,f,c
  3464  001A36  0100               	movlb	0	; () banked
  3465  001A38  0773               	decf	RTCC_adjust_time_dec@i& (0+255),f,b
  3466  001A3A  D7CE               	goto	l3205
  3467  001A3C                     l3215:
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;My_RTCC.c: 311: }
  3471                           ;My_RTCC.c: 312: for (uint8_t i = 12; i > tm->MM; i--) {
  3472  001A3C  0E0C               	movlw	12
  3473  001A3E  0100               	movlb	0	; () banked
  3474  001A40  6F72               	movwf	RTCC_adjust_time_dec@i_1776& (0+255),b
  3475  001A42  D030               	goto	l3221
  3476  001A44                     l3217:
  3477                           
  3478                           ; BSR set to: 0
  3479                           ;My_RTCC.c: 313: tm->epoch -= ((epoch_t)60*60*24) * month_length(tm->YY - 1, i);
  3480  001A44  C072  F01B         	movff	RTCC_adjust_time_dec@i_1776,month_length@month
  3481  001A48  0100               	movlb	0	; () banked
  3482  001A4A  EE20 F00A          	lfsr	2,10
  3483  001A4E  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3484  001A50  26D9               	addwf	fsr2l,f,c
  3485  001A52  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3486  001A54  22DA               	addwfc	fsr2h,f,c
  3487  001A56  50DF               	movf	indf2,w,c
  3488  001A58  0100               	movlb	0	; () banked
  3489  001A5A  6F6E               	movwf	??_RTCC_adjust_time_dec& (0+255),b
  3490  001A5C  0100               	movlb	0	; () banked
  3491  001A5E  056E               	decf	??_RTCC_adjust_time_dec& (0+255),w,b
  3492  001A60  EC91  F011         	call	_month_length
  3493  001A64  0100               	movlb	0	; () banked
  3494  001A66  6F6F               	movwf	(??_RTCC_adjust_time_dec+1)& (0+255),b
  3495  001A68  0100               	movlb	0	; () banked
  3496  001A6A  516F               	movf	(??_RTCC_adjust_time_dec+1)& (0+255),w,b
  3497  001A6C  6E22               	movwf	___lmul@multiplier,c
  3498  001A6E  6A23               	clrf	___lmul@multiplier+1,c
  3499  001A70  6A24               	clrf	___lmul@multiplier+2,c
  3500  001A72  6A25               	clrf	___lmul@multiplier+3,c
  3501  001A74  0E80               	movlw	128
  3502  001A76  6E26               	movwf	___lmul@multiplicand,c
  3503  001A78  0E51               	movlw	81
  3504  001A7A  6E27               	movwf	___lmul@multiplicand+1,c
  3505  001A7C  0E01               	movlw	1
  3506  001A7E  6E28               	movwf	___lmul@multiplicand+2,c
  3507  001A80  0E00               	movlw	0
  3508  001A82  6E29               	movwf	___lmul@multiplicand+3,c
  3509  001A84  EC2B  F013         	call	___lmul	;wreg free
  3510  001A88  C06C  FFD9         	movff	RTCC_adjust_time_dec@tm,fsr2l
  3511  001A8C  C06D  FFDA         	movff	RTCC_adjust_time_dec@tm+1,fsr2h
  3512  001A90  5022               	movf	?___lmul,w,c
  3513  001A92  5EDE               	subwf	postinc2,f,c
  3514  001A94  5023               	movf	?___lmul+1,w,c
  3515  001A96  5ADE               	subwfb	postinc2,f,c
  3516  001A98  5024               	movf	?___lmul+2,w,c
  3517  001A9A  5ADE               	subwfb	postinc2,f,c
  3518  001A9C  5025               	movf	?___lmul+3,w,c
  3519  001A9E  5ADE               	subwfb	postinc2,f,c
  3520  001AA0  0100               	movlb	0	; () banked
  3521  001AA2  0772               	decf	RTCC_adjust_time_dec@i_1776& (0+255),f,b
  3522  001AA4                     l3221:
  3523                           
  3524                           ; BSR set to: 0
  3525  001AA4  0100               	movlb	0	; () banked
  3526  001AA6  EE20 F009          	lfsr	2,9
  3527  001AAA  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3528  001AAC  26D9               	addwf	fsr2l,f,c
  3529  001AAE  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3530  001AB0  22DA               	addwfc	fsr2h,f,c
  3531  001AB2  0100               	movlb	0	; () banked
  3532  001AB4  5172               	movf	RTCC_adjust_time_dec@i_1776& (0+255),w,b
  3533  001AB6  5CDE               	subwf	postinc2,w,c
  3534  001AB8  A0D8               	btfss	status,0,c
  3535  001ABA  D7C4               	goto	l3217
  3536  001ABC                     l3223:
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;My_RTCC.c: 314: }
  3540                           ;My_RTCC.c: 315: }
  3541                           ;My_RTCC.c: 317: if (tm->epoch >= 3155760000)tm->epoch += 3155760000;
  3542  001ABC  C06C  FFD9         	movff	RTCC_adjust_time_dec@tm,fsr2l
  3543  001AC0  C06D  FFDA         	movff	RTCC_adjust_time_dec@tm+1,fsr2h
  3544  001AC4  0E80               	movlw	128
  3545  001AC6  5CDE               	subwf	postinc2,w,c
  3546  001AC8  0E13               	movlw	19
  3547  001ACA  58DE               	subwfb	postinc2,w,c
  3548  001ACC  0E19               	movlw	25
  3549  001ACE  58DE               	subwfb	postinc2,w,c
  3550  001AD0  0EBC               	movlw	188
  3551  001AD2  58DE               	subwfb	postinc2,w,c
  3552  001AD4  A0D8               	btfss	status,0,c
  3553  001AD6  D00C               	goto	l3227
  3554                           
  3555                           ; BSR set to: 0
  3556  001AD8  C06C  FFD9         	movff	RTCC_adjust_time_dec@tm,fsr2l
  3557  001ADC  C06D  FFDA         	movff	RTCC_adjust_time_dec@tm+1,fsr2h
  3558  001AE0  0E80               	movlw	128
  3559  001AE2  26DE               	addwf	postinc2,f,c
  3560  001AE4  0E13               	movlw	19
  3561  001AE6  22DE               	addwfc	postinc2,f,c
  3562  001AE8  0E19               	movlw	25
  3563  001AEA  22DE               	addwfc	postinc2,f,c
  3564  001AEC  0EBC               	movlw	188
  3565  001AEE  22DE               	addwfc	postinc2,f,c
  3566  001AF0                     l3227:
  3567                           
  3568                           ; BSR set to: 0
  3569                           ;My_RTCC.c: 318: RTCC_from_epoch(&now);
  3570  001AF0  0E9C               	movlw	low _now
  3571  001AF2  0100               	movlb	0	; () banked
  3572  001AF4  6F6A               	movwf	RTCC_from_epoch@tm& (0+255),b
  3573  001AF6  0E00               	movlw	high _now
  3574  001AF8  0100               	movlb	0	; () banked
  3575  001AFA  6F6B               	movwf	(RTCC_from_epoch@tm+1)& (0+255),b
  3576  001AFC  EC38  F014         	call	_RTCC_from_epoch	;wreg free
  3577                           
  3578                           ;My_RTCC.c: 319: time_change_flag = 1;
  3579  001B00  0E01               	movlw	1
  3580  001B02  0100               	movlb	0	; () banked
  3581  001B04  6F9B               	movwf	_time_change_flag& (0+255),b
  3582                           
  3583                           ; BSR set to: 0
  3584  001B06  0012               	return		;funcret
  3585  001B08                     __end_of_RTCC_adjust_time_dec:
  3586                           	opt stack 0
  3587                           tblptru	equ	0xFF8
  3588                           tblptrh	equ	0xFF7
  3589                           tblptrl	equ	0xFF6
  3590                           tablat	equ	0xFF5
  3591                           prodh	equ	0xFF4
  3592                           prodl	equ	0xFF3
  3593                           intcon	equ	0xFF2
  3594                           intcon2	equ	0xFF1
  3595                           postinc0	equ	0xFEE
  3596                           wreg	equ	0xFE8
  3597                           indf2	equ	0xFDF
  3598                           postinc2	equ	0xFDE
  3599                           postdec2	equ	0xFDD
  3600                           fsr2h	equ	0xFDA
  3601                           fsr2l	equ	0xFD9
  3602                           status	equ	0xFD8
  3603                           
  3604 ;; *************** function _RTCC_from_epoch *****************
  3605 ;; Defined at:
  3606 ;;		line 204 in file "My_RTCC.c"
  3607 ;; Parameters:    Size  Location     Type
  3608 ;;  tm              2   10[BANK0 ] PTR struct .
  3609 ;;		 -> now(14), 
  3610 ;; Auto vars:     Size  Location     Type
  3611 ;;		None
  3612 ;; Return value:  Size  Location     Type
  3613 ;;		None               void
  3614 ;; Registers used:
  3615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3616 ;; Tracked objects:
  3617 ;;		On entry : 0/0
  3618 ;;		On exit  : 0/0
  3619 ;;		Unchanged: 0/0
  3620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3621 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3624 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3625 ;;Total ram usage:        2 bytes
  3626 ;; Hardware stack levels used:    1
  3627 ;; Hardware stack levels required when called:    5
  3628 ;; This function calls:
  3629 ;;		_caltime_to_RTCC
  3630 ;;		_epoch_to_caltime
  3631 ;; This function is called by:
  3632 ;;		_RTCC_adjust_time_inc
  3633 ;;		_RTCC_adjust_time_dec
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           	psect	text13
  3638  002870                     __ptext13:
  3639                           	opt stack 0
  3640  002870                     _RTCC_from_epoch:
  3641                           	opt stack 23
  3642                           
  3643                           ;My_RTCC.c: 205: epoch_to_caltime(tm);
  3644                           
  3645                           ; BSR set to: 0
  3646                           ;incstack = 0
  3647  002870  C06A  F036         	movff	RTCC_from_epoch@tm,epoch_to_caltime@tm
  3648  002874  C06B  F037         	movff	RTCC_from_epoch@tm+1,epoch_to_caltime@tm+1
  3649  002878  EC95  F00E         	call	_epoch_to_caltime	;wreg free
  3650                           
  3651                           ;My_RTCC.c: 206: caltime_to_RTCC(tm);
  3652  00287C  C06A  F01E         	movff	RTCC_from_epoch@tm,caltime_to_RTCC@tm
  3653  002880  C06B  F01F         	movff	RTCC_from_epoch@tm+1,caltime_to_RTCC@tm+1
  3654  002884  ECD6  F010         	call	_caltime_to_RTCC	;wreg free
  3655  002888  0012               	return		;funcret
  3656  00288A                     __end_of_RTCC_from_epoch:
  3657                           	opt stack 0
  3658                           tblptru	equ	0xFF8
  3659                           tblptrh	equ	0xFF7
  3660                           tblptrl	equ	0xFF6
  3661                           tablat	equ	0xFF5
  3662                           prodh	equ	0xFF4
  3663                           prodl	equ	0xFF3
  3664                           intcon	equ	0xFF2
  3665                           intcon2	equ	0xFF1
  3666                           postinc0	equ	0xFEE
  3667                           wreg	equ	0xFE8
  3668                           indf2	equ	0xFDF
  3669                           postinc2	equ	0xFDE
  3670                           postdec2	equ	0xFDD
  3671                           fsr2h	equ	0xFDA
  3672                           fsr2l	equ	0xFD9
  3673                           status	equ	0xFD8
  3674                           
  3675 ;; *************** function _epoch_to_caltime *****************
  3676 ;; Defined at:
  3677 ;;		line 119 in file "My_RTCC.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;  tm              2   53[COMRAM] PTR struct .
  3680 ;;		 -> now(14), 
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;  num             4    6[BANK0 ] unsigned long 
  3683 ;;  day             2    2[BANK0 ] unsigned int 
  3684 ;;  day_since_ep    2    0[BANK0 ] unsigned int 
  3685 ;;  month           1    5[BANK0 ] unsigned char 
  3686 ;;  year            1    4[BANK0 ] unsigned char 
  3687 ;; Return value:  Size  Location     Type
  3688 ;;		None               void
  3689 ;; Registers used:
  3690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3691 ;; Tracked objects:
  3692 ;;		On entry : 0/0
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3696 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3697 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3698 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3699 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3700 ;;Total ram usage:       14 bytes
  3701 ;; Hardware stack levels used:    1
  3702 ;; Hardware stack levels required when called:    4
  3703 ;; This function calls:
  3704 ;;		_get_quot_rem
  3705 ;;		_month_length
  3706 ;; This function is called by:
  3707 ;;		_RTCC_from_epoch
  3708 ;;		_RTCC_from_caltime
  3709 ;; This function uses a non-reentrant model
  3710 ;;
  3711                           
  3712                           	psect	text14
  3713  001D2A                     __ptext14:
  3714                           	opt stack 0
  3715  001D2A                     _epoch_to_caltime:
  3716                           	opt stack 23
  3717                           
  3718                           ;My_RTCC.c: 122: static uint16_t day_cache = 0;
  3719                           ;My_RTCC.c: 123: static uint8_t month_cache = 1;
  3720                           ;My_RTCC.c: 124: static uint8_t year_cache = 0;
  3721                           ;My_RTCC.c: 125: uint16_t day_since_epoch;
  3722                           ;My_RTCC.c: 126: uint16_t day;
  3723                           ;My_RTCC.c: 127: uint8_t year = 0;
  3724                           
  3725                           ;incstack = 0
  3726  001D2A  0E00               	movlw	0
  3727  001D2C  0100               	movlb	0	; () banked
  3728  001D2E  6F64               	movwf	epoch_to_caltime@year& (0+255),b
  3729                           
  3730                           ;My_RTCC.c: 128: uint8_t month = 1;
  3731  001D30  0E01               	movlw	1
  3732  001D32  0100               	movlb	0	; () banked
  3733  001D34  6F65               	movwf	epoch_to_caltime@month& (0+255),b
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;My_RTCC.c: 129: epoch_t num;
  3737                           ;My_RTCC.c: 131: num = tm->epoch;
  3738  001D36  C036  FFD9         	movff	epoch_to_caltime@tm,fsr2l
  3739  001D3A  C037  FFDA         	movff	epoch_to_caltime@tm+1,fsr2h
  3740  001D3E  CFDE F066          	movff	postinc2,epoch_to_caltime@num
  3741  001D42  CFDE F067          	movff	postinc2,epoch_to_caltime@num+1
  3742  001D46  CFDE F068          	movff	postinc2,epoch_to_caltime@num+2
  3743  001D4A  CFDE F069          	movff	postinc2,epoch_to_caltime@num+3
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;My_RTCC.c: 132: tm->ss = get_quot_rem(&num, 60);
  3747  001D4E  0E66               	movlw	low epoch_to_caltime@num
  3748  001D50  6E2E               	movwf	get_quot_rem@quot,c
  3749  001D52  0E00               	movlw	high epoch_to_caltime@num
  3750  001D54  6E2F               	movwf	get_quot_rem@quot+1,c
  3751  001D56  0E3C               	movlw	60
  3752  001D58  6E30               	movwf	get_quot_rem@div,c
  3753  001D5A  ECE4  F011         	call	_get_quot_rem	;wreg free
  3754  001D5E  EE20 F004          	lfsr	2,4
  3755  001D62  5036               	movf	epoch_to_caltime@tm,w,c
  3756  001D64  26D9               	addwf	fsr2l,f,c
  3757  001D66  5037               	movf	epoch_to_caltime@tm+1,w,c
  3758  001D68  22DA               	addwfc	fsr2h,f,c
  3759  001D6A  C02E  FFDF         	movff	?_get_quot_rem,indf2
  3760                           
  3761                           ;My_RTCC.c: 133: tm->mm = get_quot_rem(&num, 60);
  3762  001D6E  0E66               	movlw	low epoch_to_caltime@num
  3763  001D70  6E2E               	movwf	get_quot_rem@quot,c
  3764  001D72  0E00               	movlw	high epoch_to_caltime@num
  3765  001D74  6E2F               	movwf	get_quot_rem@quot+1,c
  3766  001D76  0E3C               	movlw	60
  3767  001D78  6E30               	movwf	get_quot_rem@div,c
  3768  001D7A  ECE4  F011         	call	_get_quot_rem	;wreg free
  3769  001D7E  EE20 F005          	lfsr	2,5
  3770  001D82  5036               	movf	epoch_to_caltime@tm,w,c
  3771  001D84  26D9               	addwf	fsr2l,f,c
  3772  001D86  5037               	movf	epoch_to_caltime@tm+1,w,c
  3773  001D88  22DA               	addwfc	fsr2h,f,c
  3774  001D8A  C02E  FFDF         	movff	?_get_quot_rem,indf2
  3775                           
  3776                           ;My_RTCC.c: 134: tm->hh = get_quot_rem(&num, 24);
  3777  001D8E  0E66               	movlw	low epoch_to_caltime@num
  3778  001D90  6E2E               	movwf	get_quot_rem@quot,c
  3779  001D92  0E00               	movlw	high epoch_to_caltime@num
  3780  001D94  6E2F               	movwf	get_quot_rem@quot+1,c
  3781  001D96  0E18               	movlw	24
  3782  001D98  6E30               	movwf	get_quot_rem@div,c
  3783  001D9A  ECE4  F011         	call	_get_quot_rem	;wreg free
  3784  001D9E  EE20 F006          	lfsr	2,6
  3785  001DA2  5036               	movf	epoch_to_caltime@tm,w,c
  3786  001DA4  26D9               	addwf	fsr2l,f,c
  3787  001DA6  5037               	movf	epoch_to_caltime@tm+1,w,c
  3788  001DA8  22DA               	addwfc	fsr2h,f,c
  3789  001DAA  C02E  FFDF         	movff	?_get_quot_rem,indf2
  3790                           
  3791                           ;My_RTCC.c: 135: day = num;
  3792  001DAE  C066  F062         	movff	epoch_to_caltime@num,epoch_to_caltime@day
  3793  001DB2  C067  F063         	movff	epoch_to_caltime@num+1,epoch_to_caltime@day+1
  3794                           
  3795                           ;My_RTCC.c: 136: day_since_epoch = day;
  3796  001DB6  C062  F060         	movff	epoch_to_caltime@day,epoch_to_caltime@day_since_epoch
  3797  001DBA  C063  F061         	movff	epoch_to_caltime@day+1,epoch_to_caltime@day_since_epoch+1
  3798                           
  3799                           ;My_RTCC.c: 138: num += 6;
  3800  001DBE  0E06               	movlw	6
  3801  001DC0  0100               	movlb	0	; () banked
  3802  001DC2  2766               	addwf	epoch_to_caltime@num& (0+255),f,b
  3803  001DC4  0E00               	movlw	0
  3804  001DC6  2367               	addwfc	(epoch_to_caltime@num+1)& (0+255),f,b
  3805  001DC8  2368               	addwfc	(epoch_to_caltime@num+2)& (0+255),f,b
  3806  001DCA  2369               	addwfc	(epoch_to_caltime@num+3)& (0+255),f,b
  3807                           
  3808                           ; BSR set to: 0
  3809                           ;My_RTCC.c: 139: tm->EE = get_quot_rem(&num, 7);
  3810  001DCC  0E66               	movlw	low epoch_to_caltime@num
  3811  001DCE  6E2E               	movwf	get_quot_rem@quot,c
  3812  001DD0  0E00               	movlw	high epoch_to_caltime@num
  3813  001DD2  6E2F               	movwf	get_quot_rem@quot+1,c
  3814  001DD4  0E07               	movlw	7
  3815  001DD6  6E30               	movwf	get_quot_rem@div,c
  3816  001DD8  ECE4  F011         	call	_get_quot_rem	;wreg free
  3817  001DDC  EE20 F007          	lfsr	2,7
  3818  001DE0  5036               	movf	epoch_to_caltime@tm,w,c
  3819  001DE2  26D9               	addwf	fsr2l,f,c
  3820  001DE4  5037               	movf	epoch_to_caltime@tm+1,w,c
  3821  001DE6  22DA               	addwfc	fsr2h,f,c
  3822  001DE8  C02E  FFDF         	movff	?_get_quot_rem,indf2
  3823                           
  3824                           ;My_RTCC.c: 148: while (day >= month_length(year, month)) {
  3825  001DEC  D03B               	goto	l3079
  3826  001DEE                     l175:
  3827                           
  3828                           ; BSR set to: 0
  3829                           ;My_RTCC.c: 149: LATB2 = 1;
  3830  001DEE  848A               	bsf	3978,2,c	;volatile
  3831                           
  3832                           ; BSR set to: 0
  3833                           ;My_RTCC.c: 150: day = day - month_length(year, month);
  3834  001DF0  C065  F01B         	movff	epoch_to_caltime@month,month_length@month
  3835  001DF4  0100               	movlb	0	; () banked
  3836  001DF6  5164               	movf	epoch_to_caltime@year& (0+255),w,b
  3837  001DF8  EC91  F011         	call	_month_length
  3838  001DFC  6E38               	movwf	??_epoch_to_caltime& (0+255),c
  3839  001DFE  6A39               	clrf	(??_epoch_to_caltime+1)& (0+255),c
  3840  001E00  1E38               	comf	??_epoch_to_caltime,f,c
  3841  001E02  1E39               	comf	??_epoch_to_caltime+1,f,c
  3842  001E04  4A38               	infsnz	??_epoch_to_caltime,f,c
  3843  001E06  2A39               	incf	??_epoch_to_caltime+1,f,c
  3844  001E08  0100               	movlb	0	; () banked
  3845  001E0A  5162               	movf	epoch_to_caltime@day& (0+255),w,b
  3846  001E0C  2438               	addwf	??_epoch_to_caltime,w,c
  3847  001E0E  0100               	movlb	0	; () banked
  3848  001E10  6F62               	movwf	epoch_to_caltime@day& (0+255),b
  3849  001E12  0100               	movlb	0	; () banked
  3850  001E14  5163               	movf	(epoch_to_caltime@day+1)& (0+255),w,b
  3851  001E16  2039               	addwfc	??_epoch_to_caltime+1,w,c
  3852  001E18  0100               	movlb	0	; () banked
  3853  001E1A  6F63               	movwf	(epoch_to_caltime@day+1)& (0+255),b
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;My_RTCC.c: 151: if (month == 12) {
  3857  001E1C  0E0C               	movlw	12
  3858  001E1E  0100               	movlb	0	; () banked
  3859  001E20  1965               	xorwf	epoch_to_caltime@month& (0+255),w,b
  3860  001E22  A4D8               	btfss	status,2,c
  3861  001E24  D019               	goto	l3073
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;My_RTCC.c: 152: month = 1;
  3865  001E26  0E01               	movlw	1
  3866  001E28  0100               	movlb	0	; () banked
  3867  001E2A  6F65               	movwf	epoch_to_caltime@month& (0+255),b
  3868                           
  3869                           ; BSR set to: 0
  3870                           ;My_RTCC.c: 153: year++;
  3871  001E2C  0100               	movlb	0	; () banked
  3872  001E2E  2B64               	incf	epoch_to_caltime@year& (0+255),f,b
  3873                           
  3874                           ; BSR set to: 0
  3875                           ;My_RTCC.c: 155: if (year >= 100) {
  3876  001E30  0E63               	movlw	99
  3877  001E32  0100               	movlb	0	; () banked
  3878  001E34  6564               	cpfsgt	epoch_to_caltime@year& (0+255),b
  3879  001E36  D012               	goto	l3075
  3880                           
  3881                           ; BSR set to: 0
  3882                           ;My_RTCC.c: 156: tm->epoch -= 3155760000;
  3883  001E38  C036  FFD9         	movff	epoch_to_caltime@tm,fsr2l
  3884  001E3C  C037  FFDA         	movff	epoch_to_caltime@tm+1,fsr2h
  3885  001E40  0E80               	movlw	128
  3886  001E42  5EDE               	subwf	postinc2,f,c
  3887  001E44  0E13               	movlw	19
  3888  001E46  5ADE               	subwfb	postinc2,f,c
  3889  001E48  0E19               	movlw	25
  3890  001E4A  5ADE               	subwfb	postinc2,f,c
  3891  001E4C  0EBC               	movlw	188
  3892  001E4E  5ADE               	subwfb	postinc2,f,c
  3893                           
  3894                           ; BSR set to: 0
  3895                           ;My_RTCC.c: 157: year = 0;
  3896  001E50  0E00               	movlw	0
  3897  001E52  0100               	movlb	0	; () banked
  3898  001E54  6F64               	movwf	epoch_to_caltime@year& (0+255),b
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;My_RTCC.c: 158: }
  3902                           ;My_RTCC.c: 159: } else {
  3903  001E56  D002               	goto	l3075
  3904  001E58                     l3073:
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;My_RTCC.c: 160: month++;
  3908  001E58  0100               	movlb	0	; () banked
  3909  001E5A  2B65               	incf	epoch_to_caltime@month& (0+255),f,b
  3910  001E5C                     l3075:
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;My_RTCC.c: 161: }
  3914                           ;My_RTCC.c: 162: month_cache = month;
  3915  001E5C  C065  F04A         	movff	epoch_to_caltime@month,epoch_to_caltime@month_cache
  3916                           
  3917                           ; BSR set to: 0
  3918                           ;My_RTCC.c: 163: year_cache = year;
  3919  001E60  C064  F03D         	movff	epoch_to_caltime@year,epoch_to_caltime@year_cache
  3920  001E64                     l3079:
  3921  001E64  C065  F01B         	movff	epoch_to_caltime@month,month_length@month
  3922  001E68  0100               	movlb	0	; () banked
  3923  001E6A  5164               	movf	epoch_to_caltime@year& (0+255),w,b
  3924  001E6C  EC91  F011         	call	_month_length
  3925  001E70  6E38               	movwf	??_epoch_to_caltime& (0+255),c
  3926  001E72  5038               	movf	??_epoch_to_caltime,w,c
  3927  001E74  0100               	movlb	0	; () banked
  3928  001E76  5D62               	subwf	epoch_to_caltime@day& (0+255),w,b
  3929  001E78  0E00               	movlw	0
  3930  001E7A  5963               	subwfb	(epoch_to_caltime@day+1)& (0+255),w,b
  3931  001E7C  B0D8               	btfsc	status,0,c
  3932  001E7E  D7B7               	goto	l175
  3933                           
  3934                           ; BSR set to: 0
  3935                           ;My_RTCC.c: 164: }
  3936                           ;My_RTCC.c: 165: day_cache = day_since_epoch - day;
  3937                           
  3938                           ; BSR set to: 0
  3939  001E80  C062  F038         	movff	epoch_to_caltime@day,??_epoch_to_caltime
  3940  001E84  C063  F039         	movff	epoch_to_caltime@day+1,??_epoch_to_caltime+1
  3941  001E88  1E38               	comf	??_epoch_to_caltime,f,c
  3942  001E8A  1E39               	comf	??_epoch_to_caltime+1,f,c
  3943  001E8C  4A38               	infsnz	??_epoch_to_caltime,f,c
  3944  001E8E  2A39               	incf	??_epoch_to_caltime+1,f,c
  3945  001E90  0100               	movlb	0	; () banked
  3946  001E92  5160               	movf	epoch_to_caltime@day_since_epoch& (0+255),w,b
  3947  001E94  2438               	addwf	??_epoch_to_caltime,w,c
  3948  001E96  6E3A               	movwf	epoch_to_caltime@day_cache,c
  3949  001E98  0100               	movlb	0	; () banked
  3950  001E9A  5161               	movf	(epoch_to_caltime@day_since_epoch+1)& (0+255),w,b
  3951  001E9C  2039               	addwfc	??_epoch_to_caltime+1,w,c
  3952  001E9E  6E3B               	movwf	epoch_to_caltime@day_cache+1,c
  3953                           
  3954                           ; BSR set to: 0
  3955                           ;My_RTCC.c: 166: day++;
  3956  001EA0  0100               	movlb	0	; () banked
  3957  001EA2  4B62               	infsnz	epoch_to_caltime@day& (0+255),f,b
  3958  001EA4  2B63               	incf	(epoch_to_caltime@day+1)& (0+255),f,b
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;My_RTCC.c: 168: tm->YY = year;
  3962  001EA6  EE20 F00A          	lfsr	2,10
  3963  001EAA  5036               	movf	epoch_to_caltime@tm,w,c
  3964  001EAC  26D9               	addwf	fsr2l,f,c
  3965  001EAE  5037               	movf	epoch_to_caltime@tm+1,w,c
  3966  001EB0  22DA               	addwfc	fsr2h,f,c
  3967  001EB2  C064  FFDF         	movff	epoch_to_caltime@year,indf2
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;My_RTCC.c: 169: tm->MM = month;
  3971  001EB6  EE20 F009          	lfsr	2,9
  3972  001EBA  5036               	movf	epoch_to_caltime@tm,w,c
  3973  001EBC  26D9               	addwf	fsr2l,f,c
  3974  001EBE  5037               	movf	epoch_to_caltime@tm+1,w,c
  3975  001EC0  22DA               	addwfc	fsr2h,f,c
  3976  001EC2  C065  FFDF         	movff	epoch_to_caltime@month,indf2
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;My_RTCC.c: 170: tm->DD = day;
  3980  001EC6  EE20 F008          	lfsr	2,8
  3981  001ECA  5036               	movf	epoch_to_caltime@tm,w,c
  3982  001ECC  26D9               	addwf	fsr2l,f,c
  3983  001ECE  5037               	movf	epoch_to_caltime@tm+1,w,c
  3984  001ED0  22DA               	addwfc	fsr2h,f,c
  3985  001ED2  C062  FFDF         	movff	epoch_to_caltime@day,indf2
  3986                           
  3987                           ; BSR set to: 0
  3988  001ED6  0012               	return		;funcret
  3989  001ED8                     __end_of_epoch_to_caltime:
  3990                           	opt stack 0
  3991                           tblptru	equ	0xFF8
  3992                           tblptrh	equ	0xFF7
  3993                           tblptrl	equ	0xFF6
  3994                           tablat	equ	0xFF5
  3995                           prodh	equ	0xFF4
  3996                           prodl	equ	0xFF3
  3997                           intcon	equ	0xFF2
  3998                           intcon2	equ	0xFF1
  3999                           postinc0	equ	0xFEE
  4000                           wreg	equ	0xFE8
  4001                           indf2	equ	0xFDF
  4002                           postinc2	equ	0xFDE
  4003                           postdec2	equ	0xFDD
  4004                           fsr2h	equ	0xFDA
  4005                           fsr2l	equ	0xFD9
  4006                           status	equ	0xFD8
  4007                           
  4008 ;; *************** function _get_quot_rem *****************
  4009 ;; Defined at:
  4010 ;;		line 74 in file "My_RTCC.c"
  4011 ;; Parameters:    Size  Location     Type
  4012 ;;  quot            2   45[COMRAM] PTR unsigned long 
  4013 ;;		 -> epoch_to_caltime@num(4), 
  4014 ;;  div             1   47[COMRAM] unsigned char 
  4015 ;; Auto vars:     Size  Location     Type
  4016 ;;  num             4   49[COMRAM] unsigned long 
  4017 ;; Return value:  Size  Location     Type
  4018 ;;                  4   45[COMRAM] unsigned long 
  4019 ;; Registers used:
  4020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4021 ;; Tracked objects:
  4022 ;;		On entry : 0/0
  4023 ;;		On exit  : 0/0
  4024 ;;		Unchanged: 0/0
  4025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4026 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4027 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4029 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4030 ;;Total ram usage:        8 bytes
  4031 ;; Hardware stack levels used:    1
  4032 ;; Hardware stack levels required when called:    3
  4033 ;; This function calls:
  4034 ;;		___lldiv
  4035 ;;		___lmul
  4036 ;; This function is called by:
  4037 ;;		_epoch_to_caltime
  4038 ;; This function uses a non-reentrant model
  4039 ;;
  4040                           
  4041                           	psect	text15
  4042  0023C8                     __ptext15:
  4043                           	opt stack 0
  4044  0023C8                     _get_quot_rem:
  4045                           	opt stack 23
  4046                           
  4047                           ;My_RTCC.c: 77: epoch_t num = *quot;
  4048                           
  4049                           ; BSR set to: 0
  4050                           ;incstack = 0
  4051  0023C8  C02E  FFD9         	movff	get_quot_rem@quot,fsr2l
  4052  0023CC  C02F  FFDA         	movff	get_quot_rem@quot+1,fsr2h
  4053  0023D0  CFDE F032          	movff	postinc2,get_quot_rem@num
  4054  0023D4  CFDE F033          	movff	postinc2,get_quot_rem@num+1
  4055  0023D8  CFDE F034          	movff	postinc2,get_quot_rem@num+2
  4056  0023DC  CFDE F035          	movff	postinc2,get_quot_rem@num+3
  4057                           
  4058                           ;My_RTCC.c: 78: return num - (*quot = num / div) * div;
  4059  0023E0  5030               	movf	get_quot_rem@div,w,c
  4060  0023E2  6E19               	movwf	___lldiv@divisor,c
  4061  0023E4  6A1A               	clrf	___lldiv@divisor+1,c
  4062  0023E6  6A1B               	clrf	___lldiv@divisor+2,c
  4063  0023E8  6A1C               	clrf	___lldiv@divisor+3,c
  4064  0023EA  C032  F015         	movff	get_quot_rem@num,___lldiv@dividend
  4065  0023EE  C033  F016         	movff	get_quot_rem@num+1,___lldiv@dividend+1
  4066  0023F2  C034  F017         	movff	get_quot_rem@num+2,___lldiv@dividend+2
  4067  0023F6  C035  F018         	movff	get_quot_rem@num+3,___lldiv@dividend+3
  4068  0023FA  EC74  F012         	call	___lldiv	;wreg free
  4069  0023FE  C02E  FFD9         	movff	get_quot_rem@quot,fsr2l
  4070  002402  C02F  FFDA         	movff	get_quot_rem@quot+1,fsr2h
  4071  002406  C015  FFDE         	movff	?___lldiv,postinc2
  4072  00240A  C016  FFDE         	movff	?___lldiv+1,postinc2
  4073  00240E  C017  FFDE         	movff	?___lldiv+2,postinc2
  4074  002412  C018  FFDD         	movff	?___lldiv+3,postdec2
  4075  002416  52DD               	movf	postdec2,f,c
  4076  002418  52DD               	movf	postdec2,f,c
  4077  00241A  CFDE F022          	movff	postinc2,___lmul@multiplier
  4078  00241E  CFDE F023          	movff	postinc2,___lmul@multiplier+1
  4079  002422  CFDE F024          	movff	postinc2,___lmul@multiplier+2
  4080  002426  CFDE F025          	movff	postinc2,___lmul@multiplier+3
  4081  00242A  5030               	movf	get_quot_rem@div,w,c
  4082  00242C  6E26               	movwf	___lmul@multiplicand,c
  4083  00242E  6A27               	clrf	___lmul@multiplicand+1,c
  4084  002430  6A28               	clrf	___lmul@multiplicand+2,c
  4085  002432  6A29               	clrf	___lmul@multiplicand+3,c
  4086  002434  EC2B  F013         	call	___lmul	;wreg free
  4087  002438  1E22               	comf	?___lmul,f,c
  4088  00243A  1E23               	comf	?___lmul+1,f,c
  4089  00243C  1E24               	comf	?___lmul+2,f,c
  4090  00243E  1E25               	comf	?___lmul+3,f,c
  4091  002440  2A22               	incf	?___lmul,f,c
  4092  002442  0E00               	movlw	0
  4093  002444  2223               	addwfc	?___lmul+1,f,c
  4094  002446  2224               	addwfc	?___lmul+2,f,c
  4095  002448  2225               	addwfc	?___lmul+3,f,c
  4096  00244A  5032               	movf	get_quot_rem@num,w,c
  4097  00244C  2422               	addwf	?___lmul,w,c
  4098  00244E  6E2E               	movwf	?_get_quot_rem,c
  4099  002450  5033               	movf	get_quot_rem@num+1,w,c
  4100  002452  2023               	addwfc	?___lmul+1,w,c
  4101  002454  6E2F               	movwf	?_get_quot_rem+1,c
  4102  002456  5034               	movf	get_quot_rem@num+2,w,c
  4103  002458  2024               	addwfc	?___lmul+2,w,c
  4104  00245A  6E30               	movwf	?_get_quot_rem+2,c
  4105  00245C  5035               	movf	get_quot_rem@num+3,w,c
  4106  00245E  2025               	addwfc	?___lmul+3,w,c
  4107  002460  6E31               	movwf	?_get_quot_rem+3,c
  4108  002462  0012               	return	
  4109  002464                     __end_of_get_quot_rem:
  4110                           	opt stack 0
  4111                           tblptru	equ	0xFF8
  4112                           tblptrh	equ	0xFF7
  4113                           tblptrl	equ	0xFF6
  4114                           tablat	equ	0xFF5
  4115                           prodh	equ	0xFF4
  4116                           prodl	equ	0xFF3
  4117                           intcon	equ	0xFF2
  4118                           intcon2	equ	0xFF1
  4119                           postinc0	equ	0xFEE
  4120                           wreg	equ	0xFE8
  4121                           indf2	equ	0xFDF
  4122                           postinc2	equ	0xFDE
  4123                           postdec2	equ	0xFDD
  4124                           fsr2h	equ	0xFDA
  4125                           fsr2l	equ	0xFD9
  4126                           status	equ	0xFD8
  4127                           
  4128 ;; *************** function ___lldiv *****************
  4129 ;; Defined at:
  4130 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lldiv.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;  dividend        4   20[COMRAM] unsigned long 
  4133 ;;  divisor         4   24[COMRAM] unsigned long 
  4134 ;; Auto vars:     Size  Location     Type
  4135 ;;  quotient        4   28[COMRAM] unsigned long 
  4136 ;;  counter         1   32[COMRAM] unsigned char 
  4137 ;; Return value:  Size  Location     Type
  4138 ;;                  4   20[COMRAM] unsigned long 
  4139 ;; Registers used:
  4140 ;;		wreg, status,2, status,0
  4141 ;; Tracked objects:
  4142 ;;		On entry : 0/0
  4143 ;;		On exit  : 0/0
  4144 ;;		Unchanged: 0/0
  4145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4146 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4147 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4149 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4150 ;;Total ram usage:       13 bytes
  4151 ;; Hardware stack levels used:    1
  4152 ;; Hardware stack levels required when called:    2
  4153 ;; This function calls:
  4154 ;;		Nothing
  4155 ;; This function is called by:
  4156 ;;		_get_quot_rem
  4157 ;; This function uses a non-reentrant model
  4158 ;;
  4159                           
  4160                           	psect	text16
  4161  0024E8                     __ptext16:
  4162                           	opt stack 0
  4163  0024E8                     ___lldiv:
  4164                           	opt stack 23
  4165                           
  4166                           ;incstack = 0
  4167  0024E8  0E00               	movlw	0
  4168  0024EA  6E1D               	movwf	___lldiv@quotient,c
  4169  0024EC  0E00               	movlw	0
  4170  0024EE  6E1E               	movwf	___lldiv@quotient+1,c
  4171  0024F0  0E00               	movlw	0
  4172  0024F2  6E1F               	movwf	___lldiv@quotient+2,c
  4173  0024F4  0E00               	movlw	0
  4174  0024F6  6E20               	movwf	___lldiv@quotient+3,c
  4175  0024F8  5019               	movf	___lldiv@divisor,w,c
  4176  0024FA  101A               	iorwf	___lldiv@divisor+1,w,c
  4177  0024FC  101B               	iorwf	___lldiv@divisor+2,w,c
  4178  0024FE  101C               	iorwf	___lldiv@divisor+3,w,c
  4179  002500  B4D8               	btfsc	status,2,c
  4180  002502  D02A               	goto	l730
  4181  002504  0E01               	movlw	1
  4182  002506  6E21               	movwf	___lldiv@counter,c
  4183  002508  D006               	goto	l2965
  4184  00250A                     l2963:
  4185  00250A  90D8               	bcf	status,0,c
  4186  00250C  3619               	rlcf	___lldiv@divisor,f,c
  4187  00250E  361A               	rlcf	___lldiv@divisor+1,f,c
  4188  002510  361B               	rlcf	___lldiv@divisor+2,f,c
  4189  002512  361C               	rlcf	___lldiv@divisor+3,f,c
  4190  002514  2A21               	incf	___lldiv@counter,f,c
  4191  002516                     l2965:
  4192  002516  AE1C               	btfss	___lldiv@divisor+3,7,c
  4193  002518  D7F8               	goto	l2963
  4194  00251A                     l2967:
  4195  00251A  90D8               	bcf	status,0,c
  4196  00251C  361D               	rlcf	___lldiv@quotient,f,c
  4197  00251E  361E               	rlcf	___lldiv@quotient+1,f,c
  4198  002520  361F               	rlcf	___lldiv@quotient+2,f,c
  4199  002522  3620               	rlcf	___lldiv@quotient+3,f,c
  4200  002524  5019               	movf	___lldiv@divisor,w,c
  4201  002526  5C15               	subwf	___lldiv@dividend,w,c
  4202  002528  501A               	movf	___lldiv@divisor+1,w,c
  4203  00252A  5816               	subwfb	___lldiv@dividend+1,w,c
  4204  00252C  501B               	movf	___lldiv@divisor+2,w,c
  4205  00252E  5817               	subwfb	___lldiv@dividend+2,w,c
  4206  002530  501C               	movf	___lldiv@divisor+3,w,c
  4207  002532  5818               	subwfb	___lldiv@dividend+3,w,c
  4208  002534  A0D8               	btfss	status,0,c
  4209  002536  D009               	goto	l2975
  4210  002538  5019               	movf	___lldiv@divisor,w,c
  4211  00253A  5E15               	subwf	___lldiv@dividend,f,c
  4212  00253C  501A               	movf	___lldiv@divisor+1,w,c
  4213  00253E  5A16               	subwfb	___lldiv@dividend+1,f,c
  4214  002540  501B               	movf	___lldiv@divisor+2,w,c
  4215  002542  5A17               	subwfb	___lldiv@dividend+2,f,c
  4216  002544  501C               	movf	___lldiv@divisor+3,w,c
  4217  002546  5A18               	subwfb	___lldiv@dividend+3,f,c
  4218  002548  801D               	bsf	___lldiv@quotient,0,c
  4219  00254A                     l2975:
  4220  00254A  90D8               	bcf	status,0,c
  4221  00254C  321C               	rrcf	___lldiv@divisor+3,f,c
  4222  00254E  321B               	rrcf	___lldiv@divisor+2,f,c
  4223  002550  321A               	rrcf	___lldiv@divisor+1,f,c
  4224  002552  3219               	rrcf	___lldiv@divisor,f,c
  4225  002554  2E21               	decfsz	___lldiv@counter,f,c
  4226  002556  D7E1               	goto	l2967
  4227  002558                     l730:
  4228  002558  C01D  F015         	movff	___lldiv@quotient,?___lldiv
  4229  00255C  C01E  F016         	movff	___lldiv@quotient+1,?___lldiv+1
  4230  002560  C01F  F017         	movff	___lldiv@quotient+2,?___lldiv+2
  4231  002564  C020  F018         	movff	___lldiv@quotient+3,?___lldiv+3
  4232  002568  0012               	return		;funcret
  4233  00256A                     __end_of___lldiv:
  4234                           	opt stack 0
  4235                           tblptru	equ	0xFF8
  4236                           tblptrh	equ	0xFF7
  4237                           tblptrl	equ	0xFF6
  4238                           tablat	equ	0xFF5
  4239                           prodh	equ	0xFF4
  4240                           prodl	equ	0xFF3
  4241                           intcon	equ	0xFF2
  4242                           intcon2	equ	0xFF1
  4243                           postinc0	equ	0xFEE
  4244                           wreg	equ	0xFE8
  4245                           indf2	equ	0xFDF
  4246                           postinc2	equ	0xFDE
  4247                           postdec2	equ	0xFDD
  4248                           fsr2h	equ	0xFDA
  4249                           fsr2l	equ	0xFD9
  4250                           status	equ	0xFD8
  4251                           
  4252 ;; *************** function _caltime_to_RTCC *****************
  4253 ;; Defined at:
  4254 ;;		line 99 in file "My_RTCC.c"
  4255 ;; Parameters:    Size  Location     Type
  4256 ;;  tm              2   29[COMRAM] PTR struct .
  4257 ;;		 -> now(14), 
  4258 ;; Auto vars:     Size  Location     Type
  4259 ;;		None
  4260 ;; Return value:  Size  Location     Type
  4261 ;;		None               void
  4262 ;; Registers used:
  4263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4264 ;; Tracked objects:
  4265 ;;		On entry : 0/0
  4266 ;;		On exit  : 0/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4269 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4272 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4273 ;;Total ram usage:        2 bytes
  4274 ;; Hardware stack levels used:    1
  4275 ;; Hardware stack levels required when called:    4
  4276 ;; This function calls:
  4277 ;;		_d_to_x
  4278 ;; This function is called by:
  4279 ;;		_RTCC_from_epoch
  4280 ;;		_RTCC_from_caltime
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284                           	psect	text17
  4285  0021AC                     __ptext17:
  4286                           	opt stack 0
  4287  0021AC                     _caltime_to_RTCC:
  4288                           	opt stack 23
  4289  0021AC                     l162:
  4290  0021AC  010F               	movlb	15	; () banked
  4291  0021AE  B93F               	btfsc	63,4,b	;volatile
  4292  0021B0  D7FD               	goto	l162
  4293                           
  4294                           ; BSR set to: 15
  4295                           ;My_RTCC.c: 101: RTCCFGbits.RTCPTR0 = 1;
  4296  0021B2  010F               	movlb	15	; () banked
  4297  0021B4  813F               	bsf	63,0,b	;volatile
  4298                           
  4299                           ;My_RTCC.c: 102: RTCCFGbits.RTCPTR1 = 1;
  4300  0021B6  010F               	movlb	15	; () banked
  4301  0021B8  833F               	bsf	63,1,b	;volatile
  4302                           
  4303                           ; BSR set to: 15
  4304                           ;My_RTCC.c: 103: RTCVALL = d_to_x(tm->YY);
  4305  0021BA  EE20 F00A          	lfsr	2,10
  4306  0021BE  501E               	movf	caltime_to_RTCC@tm,w,c
  4307  0021C0  26D9               	addwf	fsr2l,f,c
  4308  0021C2  501F               	movf	caltime_to_RTCC@tm+1,w,c
  4309  0021C4  22DA               	addwfc	fsr2h,f,c
  4310  0021C6  50DF               	movf	indf2,w,c
  4311  0021C8  EC29  F014         	call	_d_to_x
  4312  0021CC  010F               	movlb	15	; () banked
  4313  0021CE  6F3A               	movwf	58,b	;volatile
  4314                           
  4315                           ; BSR set to: 15
  4316                           ;My_RTCC.c: 104: RTCVALH = 0x00;
  4317  0021D0  0E00               	movlw	0
  4318  0021D2  010F               	movlb	15	; () banked
  4319  0021D4  6F3B               	movwf	59,b	;volatile
  4320                           
  4321                           ; BSR set to: 15
  4322                           ;My_RTCC.c: 105: RTCCFGbits.RTCPTR0 = 0;
  4323  0021D6  010F               	movlb	15	; () banked
  4324  0021D8  913F               	bcf	63,0,b	;volatile
  4325                           
  4326                           ; BSR set to: 15
  4327                           ;My_RTCC.c: 106: RTCCFGbits.RTCPTR1 = 1;
  4328  0021DA  010F               	movlb	15	; () banked
  4329  0021DC  833F               	bsf	63,1,b	;volatile
  4330                           
  4331                           ; BSR set to: 15
  4332                           ;My_RTCC.c: 107: RTCVALL = d_to_x(tm->DD);
  4333  0021DE  EE20 F008          	lfsr	2,8
  4334  0021E2  501E               	movf	caltime_to_RTCC@tm,w,c
  4335  0021E4  26D9               	addwf	fsr2l,f,c
  4336  0021E6  501F               	movf	caltime_to_RTCC@tm+1,w,c
  4337  0021E8  22DA               	addwfc	fsr2h,f,c
  4338  0021EA  50DF               	movf	indf2,w,c
  4339  0021EC  EC29  F014         	call	_d_to_x
  4340  0021F0  010F               	movlb	15	; () banked
  4341  0021F2  6F3A               	movwf	58,b	;volatile
  4342                           
  4343                           ; BSR set to: 15
  4344                           ;My_RTCC.c: 108: RTCVALH = d_to_x(tm->MM);
  4345  0021F4  EE20 F009          	lfsr	2,9
  4346  0021F8  501E               	movf	caltime_to_RTCC@tm,w,c
  4347  0021FA  26D9               	addwf	fsr2l,f,c
  4348  0021FC  501F               	movf	caltime_to_RTCC@tm+1,w,c
  4349  0021FE  22DA               	addwfc	fsr2h,f,c
  4350  002200  50DF               	movf	indf2,w,c
  4351  002202  EC29  F014         	call	_d_to_x
  4352  002206  010F               	movlb	15	; () banked
  4353  002208  6F3B               	movwf	59,b	;volatile
  4354                           
  4355                           ; BSR set to: 15
  4356                           ;My_RTCC.c: 109: RTCCFGbits.RTCPTR0 = 1;
  4357  00220A  010F               	movlb	15	; () banked
  4358  00220C  813F               	bsf	63,0,b	;volatile
  4359                           
  4360                           ; BSR set to: 15
  4361                           ;My_RTCC.c: 110: RTCCFGbits.RTCPTR1 = 0;
  4362  00220E  010F               	movlb	15	; () banked
  4363  002210  933F               	bcf	63,1,b	;volatile
  4364                           
  4365                           ; BSR set to: 15
  4366                           ;My_RTCC.c: 111: RTCVALL = d_to_x(tm->hh);
  4367  002212  EE20 F006          	lfsr	2,6
  4368  002216  501E               	movf	caltime_to_RTCC@tm,w,c
  4369  002218  26D9               	addwf	fsr2l,f,c
  4370  00221A  501F               	movf	caltime_to_RTCC@tm+1,w,c
  4371  00221C  22DA               	addwfc	fsr2h,f,c
  4372  00221E  50DF               	movf	indf2,w,c
  4373  002220  EC29  F014         	call	_d_to_x
  4374  002224  010F               	movlb	15	; () banked
  4375  002226  6F3A               	movwf	58,b	;volatile
  4376                           
  4377                           ; BSR set to: 15
  4378                           ;My_RTCC.c: 112: RTCVALH = d_to_x(tm->EE);
  4379  002228  EE20 F007          	lfsr	2,7
  4380  00222C  501E               	movf	caltime_to_RTCC@tm,w,c
  4381  00222E  26D9               	addwf	fsr2l,f,c
  4382  002230  501F               	movf	caltime_to_RTCC@tm+1,w,c
  4383  002232  22DA               	addwfc	fsr2h,f,c
  4384  002234  50DF               	movf	indf2,w,c
  4385  002236  EC29  F014         	call	_d_to_x
  4386  00223A  010F               	movlb	15	; () banked
  4387  00223C  6F3B               	movwf	59,b	;volatile
  4388                           
  4389                           ; BSR set to: 15
  4390                           ;My_RTCC.c: 113: RTCCFGbits.RTCPTR0 = 0;
  4391  00223E  010F               	movlb	15	; () banked
  4392  002240  913F               	bcf	63,0,b	;volatile
  4393                           
  4394                           ; BSR set to: 15
  4395                           ;My_RTCC.c: 114: RTCCFGbits.RTCPTR1 = 0;
  4396  002242  010F               	movlb	15	; () banked
  4397  002244  933F               	bcf	63,1,b	;volatile
  4398                           
  4399                           ; BSR set to: 15
  4400                           ;My_RTCC.c: 115: RTCVALL = d_to_x(tm->ss);
  4401  002246  EE20 F004          	lfsr	2,4
  4402  00224A  501E               	movf	caltime_to_RTCC@tm,w,c
  4403  00224C  26D9               	addwf	fsr2l,f,c
  4404  00224E  501F               	movf	caltime_to_RTCC@tm+1,w,c
  4405  002250  22DA               	addwfc	fsr2h,f,c
  4406  002252  50DF               	movf	indf2,w,c
  4407  002254  EC29  F014         	call	_d_to_x
  4408  002258  010F               	movlb	15	; () banked
  4409  00225A  6F3A               	movwf	58,b	;volatile
  4410                           
  4411                           ; BSR set to: 15
  4412                           ;My_RTCC.c: 116: RTCVALH = d_to_x(tm->mm);
  4413  00225C  EE20 F005          	lfsr	2,5
  4414  002260  501E               	movf	caltime_to_RTCC@tm,w,c
  4415  002262  26D9               	addwf	fsr2l,f,c
  4416  002264  501F               	movf	caltime_to_RTCC@tm+1,w,c
  4417  002266  22DA               	addwfc	fsr2h,f,c
  4418  002268  50DF               	movf	indf2,w,c
  4419  00226A  EC29  F014         	call	_d_to_x
  4420  00226E  010F               	movlb	15	; () banked
  4421  002270  6F3B               	movwf	59,b	;volatile
  4422                           
  4423                           ; BSR set to: 15
  4424  002272  0012               	return		;funcret
  4425  002274                     __end_of_caltime_to_RTCC:
  4426                           	opt stack 0
  4427                           tblptru	equ	0xFF8
  4428                           tblptrh	equ	0xFF7
  4429                           tblptrl	equ	0xFF6
  4430                           tablat	equ	0xFF5
  4431                           prodh	equ	0xFF4
  4432                           prodl	equ	0xFF3
  4433                           intcon	equ	0xFF2
  4434                           intcon2	equ	0xFF1
  4435                           postinc0	equ	0xFEE
  4436                           wreg	equ	0xFE8
  4437                           indf2	equ	0xFDF
  4438                           postinc2	equ	0xFDE
  4439                           postdec2	equ	0xFDD
  4440                           fsr2h	equ	0xFDA
  4441                           fsr2l	equ	0xFD9
  4442                           status	equ	0xFD8
  4443                           
  4444 ;; *************** function _d_to_x *****************
  4445 ;; Defined at:
  4446 ;;		line 39 in file "My_RTCC.c"
  4447 ;; Parameters:    Size  Location     Type
  4448 ;;  dec             1    wreg     unsigned char 
  4449 ;; Auto vars:     Size  Location     Type
  4450 ;;  dec             1   28[COMRAM] unsigned char 
  4451 ;; Return value:  Size  Location     Type
  4452 ;;                  1    wreg      unsigned char 
  4453 ;; Registers used:
  4454 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4455 ;; Tracked objects:
  4456 ;;		On entry : 0/0
  4457 ;;		On exit  : 0/0
  4458 ;;		Unchanged: 0/0
  4459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4461 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4463 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4464 ;;Total ram usage:        1 bytes
  4465 ;; Hardware stack levels used:    1
  4466 ;; Hardware stack levels required when called:    3
  4467 ;; This function calls:
  4468 ;;		___awdiv
  4469 ;; This function is called by:
  4470 ;;		_caltime_to_RTCC
  4471 ;; This function uses a non-reentrant model
  4472 ;;
  4473                           
  4474                           	psect	text18
  4475  002852                     __ptext18:
  4476                           	opt stack 0
  4477  002852                     _d_to_x:
  4478                           	opt stack 23
  4479                           
  4480                           ; BSR set to: 15
  4481                           ;incstack = 0
  4482                           ;d_to_x@dec stored from wreg
  4483  002852  6E1D               	movwf	d_to_x@dec,c
  4484                           
  4485                           ;My_RTCC.c: 42: return dec / 10 * 6 + dec;
  4486  002854  C01D  F015         	movff	d_to_x@dec,___awdiv@dividend
  4487  002858  6A16               	clrf	___awdiv@dividend+1,c
  4488  00285A  0E00               	movlw	0
  4489  00285C  6E18               	movwf	___awdiv@divisor+1,c
  4490  00285E  0E0A               	movlw	10
  4491  002860  6E17               	movwf	___awdiv@divisor,c
  4492  002862  EC32  F012         	call	___awdiv	;wreg free
  4493  002866  5015               	movf	?___awdiv,w,c
  4494  002868  0D06               	mullw	6
  4495  00286A  50F3               	movf	prodl,w,c
  4496  00286C  241D               	addwf	d_to_x@dec,w,c
  4497  00286E  0012               	return	
  4498  002870                     __end_of_d_to_x:
  4499                           	opt stack 0
  4500                           tblptru	equ	0xFF8
  4501                           tblptrh	equ	0xFF7
  4502                           tblptrl	equ	0xFF6
  4503                           tablat	equ	0xFF5
  4504                           prodh	equ	0xFF4
  4505                           prodl	equ	0xFF3
  4506                           intcon	equ	0xFF2
  4507                           intcon2	equ	0xFF1
  4508                           postinc0	equ	0xFEE
  4509                           wreg	equ	0xFE8
  4510                           indf2	equ	0xFDF
  4511                           postinc2	equ	0xFDE
  4512                           postdec2	equ	0xFDD
  4513                           fsr2h	equ	0xFDA
  4514                           fsr2l	equ	0xFD9
  4515                           status	equ	0xFD8
  4516                           
  4517 ;; *************** function ___awdiv *****************
  4518 ;; Defined at:
  4519 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4520 ;; Parameters:    Size  Location     Type
  4521 ;;  dividend        2   20[COMRAM] int 
  4522 ;;  divisor         2   22[COMRAM] int 
  4523 ;; Auto vars:     Size  Location     Type
  4524 ;;  quotient        2   26[COMRAM] int 
  4525 ;;  sign            1   25[COMRAM] unsigned char 
  4526 ;;  counter         1   24[COMRAM] unsigned char 
  4527 ;; Return value:  Size  Location     Type
  4528 ;;                  2   20[COMRAM] int 
  4529 ;; Registers used:
  4530 ;;		wreg, status,2, status,0
  4531 ;; Tracked objects:
  4532 ;;		On entry : 0/0
  4533 ;;		On exit  : 0/0
  4534 ;;		Unchanged: 0/0
  4535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4536 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4537 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4539 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4540 ;;Total ram usage:        8 bytes
  4541 ;; Hardware stack levels used:    1
  4542 ;; Hardware stack levels required when called:    2
  4543 ;; This function calls:
  4544 ;;		Nothing
  4545 ;; This function is called by:
  4546 ;;		_d_to_x
  4547 ;; This function uses a non-reentrant model
  4548 ;;
  4549                           
  4550                           	psect	text19
  4551  002464                     __ptext19:
  4552                           	opt stack 0
  4553  002464                     ___awdiv:
  4554                           	opt stack 23
  4555                           
  4556                           ;incstack = 0
  4557  002464  0E00               	movlw	0
  4558  002466  6E1A               	movwf	___awdiv@sign,c
  4559  002468  AE18               	btfss	___awdiv@divisor+1,7,c
  4560  00246A  D006               	goto	l2885
  4561  00246C  6C17               	negf	___awdiv@divisor,c
  4562  00246E  1E18               	comf	___awdiv@divisor+1,f,c
  4563  002470  B0D8               	btfsc	status,0,c
  4564  002472  2A18               	incf	___awdiv@divisor+1,f,c
  4565  002474  0E01               	movlw	1
  4566  002476  6E1A               	movwf	___awdiv@sign,c
  4567  002478                     l2885:
  4568  002478  AE16               	btfss	___awdiv@dividend+1,7,c
  4569  00247A  D006               	goto	l2891
  4570  00247C  6C15               	negf	___awdiv@dividend,c
  4571  00247E  1E16               	comf	___awdiv@dividend+1,f,c
  4572  002480  B0D8               	btfsc	status,0,c
  4573  002482  2A16               	incf	___awdiv@dividend+1,f,c
  4574  002484  0E01               	movlw	1
  4575  002486  1A1A               	xorwf	___awdiv@sign,f,c
  4576  002488                     l2891:
  4577  002488  0E00               	movlw	0
  4578  00248A  6E1C               	movwf	___awdiv@quotient+1,c
  4579  00248C  0E00               	movlw	0
  4580  00248E  6E1B               	movwf	___awdiv@quotient,c
  4581  002490  5017               	movf	___awdiv@divisor,w,c
  4582  002492  1018               	iorwf	___awdiv@divisor+1,w,c
  4583  002494  B4D8               	btfsc	status,2,c
  4584  002496  D01C               	goto	l2913
  4585  002498  0E01               	movlw	1
  4586  00249A  6E19               	movwf	___awdiv@counter,c
  4587  00249C  D004               	goto	l2899
  4588  00249E                     l2897:
  4589  00249E  90D8               	bcf	status,0,c
  4590  0024A0  3617               	rlcf	___awdiv@divisor,f,c
  4591  0024A2  3618               	rlcf	___awdiv@divisor+1,f,c
  4592  0024A4  2A19               	incf	___awdiv@counter,f,c
  4593  0024A6                     l2899:
  4594  0024A6  AE18               	btfss	___awdiv@divisor+1,7,c
  4595  0024A8  D7FA               	goto	l2897
  4596  0024AA                     l2901:
  4597  0024AA  90D8               	bcf	status,0,c
  4598  0024AC  361B               	rlcf	___awdiv@quotient,f,c
  4599  0024AE  361C               	rlcf	___awdiv@quotient+1,f,c
  4600  0024B0  5017               	movf	___awdiv@divisor,w,c
  4601  0024B2  5C15               	subwf	___awdiv@dividend,w,c
  4602  0024B4  5018               	movf	___awdiv@divisor+1,w,c
  4603  0024B6  5816               	subwfb	___awdiv@dividend+1,w,c
  4604  0024B8  A0D8               	btfss	status,0,c
  4605  0024BA  D005               	goto	l2909
  4606  0024BC  5017               	movf	___awdiv@divisor,w,c
  4607  0024BE  5E15               	subwf	___awdiv@dividend,f,c
  4608  0024C0  5018               	movf	___awdiv@divisor+1,w,c
  4609  0024C2  5A16               	subwfb	___awdiv@dividend+1,f,c
  4610  0024C4  801B               	bsf	___awdiv@quotient,0,c
  4611  0024C6                     l2909:
  4612  0024C6  90D8               	bcf	status,0,c
  4613  0024C8  3218               	rrcf	___awdiv@divisor+1,f,c
  4614  0024CA  3217               	rrcf	___awdiv@divisor,f,c
  4615  0024CC  2E19               	decfsz	___awdiv@counter,f,c
  4616  0024CE  D7ED               	goto	l2901
  4617  0024D0                     l2913:
  4618  0024D0  501A               	movf	___awdiv@sign,w,c
  4619  0024D2  B4D8               	btfsc	status,2,c
  4620  0024D4  D004               	goto	l2917
  4621  0024D6  6C1B               	negf	___awdiv@quotient,c
  4622  0024D8  1E1C               	comf	___awdiv@quotient+1,f,c
  4623  0024DA  B0D8               	btfsc	status,0,c
  4624  0024DC  2A1C               	incf	___awdiv@quotient+1,f,c
  4625  0024DE                     l2917:
  4626  0024DE  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  4627  0024E2  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  4628  0024E6  0012               	return	
  4629  0024E8                     __end_of___awdiv:
  4630                           	opt stack 0
  4631                           tblptru	equ	0xFF8
  4632                           tblptrh	equ	0xFF7
  4633                           tblptrl	equ	0xFF6
  4634                           tablat	equ	0xFF5
  4635                           prodh	equ	0xFF4
  4636                           prodl	equ	0xFF3
  4637                           intcon	equ	0xFF2
  4638                           intcon2	equ	0xFF1
  4639                           postinc0	equ	0xFEE
  4640                           wreg	equ	0xFE8
  4641                           indf2	equ	0xFDF
  4642                           postinc2	equ	0xFDE
  4643                           postdec2	equ	0xFDD
  4644                           fsr2h	equ	0xFDA
  4645                           fsr2l	equ	0xFD9
  4646                           status	equ	0xFD8
  4647                           
  4648 ;; *************** function _RTCC_from_RTCC *****************
  4649 ;; Defined at:
  4650 ;;		line 193 in file "My_RTCC.c"
  4651 ;; Parameters:    Size  Location     Type
  4652 ;;  tm              2   51[COMRAM] PTR struct .
  4653 ;;		 -> now(14), 
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;		None
  4656 ;; Return value:  Size  Location     Type
  4657 ;;		None               void
  4658 ;; Registers used:
  4659 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 0/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4665 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4668 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4669 ;;Total ram usage:        2 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; Hardware stack levels required when called:    5
  4672 ;; This function calls:
  4673 ;;		_RTCC_to_caltime
  4674 ;;		_caltime_to_epoch
  4675 ;; This function is called by:
  4676 ;;		_RTCC_adjust_time_inc
  4677 ;;		_RTCC_adjust_time_dec
  4678 ;;		_RTCC_loop
  4679 ;;		_display_time_0802
  4680 ;;		_display_time_1602
  4681 ;; This function uses a non-reentrant model
  4682 ;;
  4683                           
  4684                           	psect	text20
  4685  00288A                     __ptext20:
  4686                           	opt stack 0
  4687  00288A                     _RTCC_from_RTCC:
  4688                           	opt stack 24
  4689                           
  4690                           ;My_RTCC.c: 194: RTCC_to_caltime(tm);
  4691                           
  4692                           ;incstack = 0
  4693  00288A  C034  F017         	movff	RTCC_from_RTCC@tm,RTCC_to_caltime@tm
  4694  00288E  C035  F018         	movff	RTCC_from_RTCC@tm+1,RTCC_to_caltime@tm+1
  4695  002892  EC3A  F011         	call	_RTCC_to_caltime	;wreg free
  4696                           
  4697                           ;My_RTCC.c: 195: caltime_to_epoch(tm);
  4698  002896  C034  F02E         	movff	RTCC_from_RTCC@tm,caltime_to_epoch@tm
  4699  00289A  C035  F02F         	movff	RTCC_from_RTCC@tm+1,caltime_to_epoch@tm+1
  4700  00289E  EC84  F00D         	call	_caltime_to_epoch	;wreg free
  4701  0028A2  0012               	return		;funcret
  4702  0028A4                     __end_of_RTCC_from_RTCC:
  4703                           	opt stack 0
  4704                           tblptru	equ	0xFF8
  4705                           tblptrh	equ	0xFF7
  4706                           tblptrl	equ	0xFF6
  4707                           tablat	equ	0xFF5
  4708                           prodh	equ	0xFF4
  4709                           prodl	equ	0xFF3
  4710                           intcon	equ	0xFF2
  4711                           intcon2	equ	0xFF1
  4712                           postinc0	equ	0xFEE
  4713                           wreg	equ	0xFE8
  4714                           indf2	equ	0xFDF
  4715                           postinc2	equ	0xFDE
  4716                           postdec2	equ	0xFDD
  4717                           fsr2h	equ	0xFDA
  4718                           fsr2l	equ	0xFD9
  4719                           status	equ	0xFD8
  4720                           
  4721 ;; *************** function _caltime_to_epoch *****************
  4722 ;; Defined at:
  4723 ;;		line 173 in file "My_RTCC.c"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;  tm              2   45[COMRAM] PTR struct .
  4726 ;;		 -> now(14), 
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;  month           1    6[BANK0 ] unsigned char 
  4729 ;;  month           1    1[BANK0 ] unsigned char 
  4730 ;;  year            1    0[BANK0 ] unsigned char 
  4731 ;;  epoch           4    2[BANK0 ] unsigned long 
  4732 ;; Return value:  Size  Location     Type
  4733 ;;		None               void
  4734 ;; Registers used:
  4735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4736 ;; Tracked objects:
  4737 ;;		On entry : 0/0
  4738 ;;		On exit  : 0/0
  4739 ;;		Unchanged: 0/0
  4740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4741 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4742 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4743 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4744 ;;      Totals:         6       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4745 ;;Total ram usage:       13 bytes
  4746 ;; Hardware stack levels used:    1
  4747 ;; Hardware stack levels required when called:    4
  4748 ;; This function calls:
  4749 ;;		___lmul
  4750 ;;		_month_length
  4751 ;; This function is called by:
  4752 ;;		_RTCC_from_RTCC
  4753 ;;		_RTCC_from_caltime
  4754 ;; This function uses a non-reentrant model
  4755 ;;
  4756                           
  4757                           	psect	text21
  4758  001B08                     __ptext21:
  4759                           	opt stack 0
  4760  001B08                     _caltime_to_epoch:
  4761                           	opt stack 24
  4762                           
  4763                           ;My_RTCC.c: 174: epoch_t epoch = 0;
  4764                           
  4765                           ;incstack = 0
  4766  001B08  0E00               	movlw	0
  4767  001B0A  0100               	movlb	0	; () banked
  4768  001B0C  6F62               	movwf	caltime_to_epoch@epoch& (0+255),b
  4769  001B0E  0E00               	movlw	0
  4770  001B10  6F63               	movwf	(caltime_to_epoch@epoch+1)& (0+255),b
  4771  001B12  0E00               	movlw	0
  4772  001B14  6F64               	movwf	(caltime_to_epoch@epoch+2)& (0+255),b
  4773  001B16  0E00               	movlw	0
  4774  001B18  6F65               	movwf	(caltime_to_epoch@epoch+3)& (0+255),b
  4775                           
  4776                           ;My_RTCC.c: 175: for (uint8_t year = 0; year < tm->YY; year++) {
  4777  001B1A  0E00               	movlw	0
  4778  001B1C  0100               	movlb	0	; () banked
  4779  001B1E  6F60               	movwf	caltime_to_epoch@year& (0+255),b
  4780  001B20  D02F               	goto	l3107
  4781  001B22                     l3093:
  4782                           
  4783                           ; BSR set to: 0
  4784                           ;My_RTCC.c: 176: for (uint8_t month = 1; month <= 12; month++) {
  4785  001B22  0E01               	movlw	1
  4786  001B24  0100               	movlb	0	; () banked
  4787  001B26  6F66               	movwf	caltime_to_epoch@month& (0+255),b
  4788  001B28                     l3095:
  4789                           
  4790                           ; BSR set to: 0
  4791  001B28  0E0C               	movlw	12
  4792  001B2A  0100               	movlb	0	; () banked
  4793  001B2C  6566               	cpfsgt	caltime_to_epoch@month& (0+255),b
  4794  001B2E  D001               	goto	l3099
  4795  001B30  D025               	goto	l3105
  4796  001B32                     l3099:
  4797                           
  4798                           ; BSR set to: 0
  4799                           ;My_RTCC.c: 177: epoch += ((epoch_t)60*60*24) * month_length(year, month);
  4800  001B32  C066  F01B         	movff	caltime_to_epoch@month,month_length@month
  4801  001B36  0100               	movlb	0	; () banked
  4802  001B38  5160               	movf	caltime_to_epoch@year& (0+255),w,b
  4803  001B3A  EC91  F011         	call	_month_length
  4804  001B3E  6E30               	movwf	??_caltime_to_epoch& (0+255),c
  4805  001B40  5030               	movf	??_caltime_to_epoch,w,c
  4806  001B42  6E22               	movwf	___lmul@multiplier,c
  4807  001B44  6A23               	clrf	___lmul@multiplier+1,c
  4808  001B46  6A24               	clrf	___lmul@multiplier+2,c
  4809  001B48  6A25               	clrf	___lmul@multiplier+3,c
  4810  001B4A  0E80               	movlw	128
  4811  001B4C  6E26               	movwf	___lmul@multiplicand,c
  4812  001B4E  0E51               	movlw	81
  4813  001B50  6E27               	movwf	___lmul@multiplicand+1,c
  4814  001B52  0E01               	movlw	1
  4815  001B54  6E28               	movwf	___lmul@multiplicand+2,c
  4816  001B56  0E00               	movlw	0
  4817  001B58  6E29               	movwf	___lmul@multiplicand+3,c
  4818  001B5A  EC2B  F013         	call	___lmul	;wreg free
  4819  001B5E  5022               	movf	?___lmul,w,c
  4820  001B60  0100               	movlb	0	; () banked
  4821  001B62  2762               	addwf	caltime_to_epoch@epoch& (0+255),f,b
  4822  001B64  5023               	movf	?___lmul+1,w,c
  4823  001B66  0100               	movlb	0	; () banked
  4824  001B68  2363               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
  4825  001B6A  5024               	movf	?___lmul+2,w,c
  4826  001B6C  0100               	movlb	0	; () banked
  4827  001B6E  2364               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
  4828  001B70  5025               	movf	?___lmul+3,w,c
  4829  001B72  0100               	movlb	0	; () banked
  4830  001B74  2365               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
  4831                           
  4832                           ; BSR set to: 0
  4833  001B76  0100               	movlb	0	; () banked
  4834  001B78  2B66               	incf	caltime_to_epoch@month& (0+255),f,b
  4835  001B7A  D7D6               	goto	l3095
  4836  001B7C                     l3105:
  4837                           
  4838                           ; BSR set to: 0
  4839  001B7C  0100               	movlb	0	; () banked
  4840  001B7E  2B60               	incf	caltime_to_epoch@year& (0+255),f,b
  4841  001B80                     l3107:
  4842                           
  4843                           ; BSR set to: 0
  4844  001B80  EE20 F00A          	lfsr	2,10
  4845  001B84  502E               	movf	caltime_to_epoch@tm,w,c
  4846  001B86  26D9               	addwf	fsr2l,f,c
  4847  001B88  502F               	movf	caltime_to_epoch@tm+1,w,c
  4848  001B8A  22DA               	addwfc	fsr2h,f,c
  4849  001B8C  50DE               	movf	postinc2,w,c
  4850  001B8E  0100               	movlb	0	; () banked
  4851  001B90  5D60               	subwf	caltime_to_epoch@year& (0+255),w,b
  4852  001B92  A0D8               	btfss	status,0,c
  4853  001B94  D7C6               	goto	l3093
  4854                           
  4855                           ; BSR set to: 0
  4856                           ;My_RTCC.c: 178: }
  4857                           ;My_RTCC.c: 179: }
  4858                           ;My_RTCC.c: 180: for (uint8_t month = 1; month < tm->MM; month++) {
  4859                           
  4860                           ; BSR set to: 0
  4861  001B96  0E01               	movlw	1
  4862  001B98  0100               	movlb	0	; () banked
  4863  001B9A  6F61               	movwf	caltime_to_epoch@month_1564& (0+255),b
  4864  001B9C  D029               	goto	l3115
  4865  001B9E                     l3111:
  4866                           
  4867                           ; BSR set to: 0
  4868                           ;My_RTCC.c: 181: epoch += ((epoch_t)60*60*24) * month_length(tm->YY, month);
  4869  001B9E  C061  F01B         	movff	caltime_to_epoch@month_1564,month_length@month
  4870  001BA2  EE20 F00A          	lfsr	2,10
  4871  001BA6  502E               	movf	caltime_to_epoch@tm,w,c
  4872  001BA8  26D9               	addwf	fsr2l,f,c
  4873  001BAA  502F               	movf	caltime_to_epoch@tm+1,w,c
  4874  001BAC  22DA               	addwfc	fsr2h,f,c
  4875  001BAE  50DF               	movf	indf2,w,c
  4876  001BB0  EC91  F011         	call	_month_length
  4877  001BB4  6E30               	movwf	??_caltime_to_epoch& (0+255),c
  4878  001BB6  5030               	movf	??_caltime_to_epoch,w,c
  4879  001BB8  6E22               	movwf	___lmul@multiplier,c
  4880  001BBA  6A23               	clrf	___lmul@multiplier+1,c
  4881  001BBC  6A24               	clrf	___lmul@multiplier+2,c
  4882  001BBE  6A25               	clrf	___lmul@multiplier+3,c
  4883  001BC0  0E80               	movlw	128
  4884  001BC2  6E26               	movwf	___lmul@multiplicand,c
  4885  001BC4  0E51               	movlw	81
  4886  001BC6  6E27               	movwf	___lmul@multiplicand+1,c
  4887  001BC8  0E01               	movlw	1
  4888  001BCA  6E28               	movwf	___lmul@multiplicand+2,c
  4889  001BCC  0E00               	movlw	0
  4890  001BCE  6E29               	movwf	___lmul@multiplicand+3,c
  4891  001BD0  EC2B  F013         	call	___lmul	;wreg free
  4892  001BD4  5022               	movf	?___lmul,w,c
  4893  001BD6  0100               	movlb	0	; () banked
  4894  001BD8  2762               	addwf	caltime_to_epoch@epoch& (0+255),f,b
  4895  001BDA  5023               	movf	?___lmul+1,w,c
  4896  001BDC  0100               	movlb	0	; () banked
  4897  001BDE  2363               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
  4898  001BE0  5024               	movf	?___lmul+2,w,c
  4899  001BE2  0100               	movlb	0	; () banked
  4900  001BE4  2364               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
  4901  001BE6  5025               	movf	?___lmul+3,w,c
  4902  001BE8  0100               	movlb	0	; () banked
  4903  001BEA  2365               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
  4904                           
  4905                           ; BSR set to: 0
  4906  001BEC  0100               	movlb	0	; () banked
  4907  001BEE  2B61               	incf	caltime_to_epoch@month_1564& (0+255),f,b
  4908  001BF0                     l3115:
  4909                           
  4910                           ; BSR set to: 0
  4911  001BF0  EE20 F009          	lfsr	2,9
  4912  001BF4  502E               	movf	caltime_to_epoch@tm,w,c
  4913  001BF6  26D9               	addwf	fsr2l,f,c
  4914  001BF8  502F               	movf	caltime_to_epoch@tm+1,w,c
  4915  001BFA  22DA               	addwfc	fsr2h,f,c
  4916  001BFC  50DE               	movf	postinc2,w,c
  4917  001BFE  0100               	movlb	0	; () banked
  4918  001C00  5D61               	subwf	caltime_to_epoch@month_1564& (0+255),w,b
  4919  001C02  A0D8               	btfss	status,0,c
  4920  001C04  D7CC               	goto	l3111
  4921                           
  4922                           ; BSR set to: 0
  4923                           ;My_RTCC.c: 182: }
  4924                           ;My_RTCC.c: 183: epoch += ((epoch_t)60*60*24) * (tm->DD - 1);
  4925                           
  4926                           ; BSR set to: 0
  4927  001C06  0EFF               	movlw	255
  4928  001C08  6E30               	movwf	??_caltime_to_epoch& (0+255),c
  4929  001C0A  0EFF               	movlw	255
  4930  001C0C  6E31               	movwf	(??_caltime_to_epoch+1)& (0+255),c
  4931  001C0E  EE20 F008          	lfsr	2,8
  4932  001C12  502E               	movf	caltime_to_epoch@tm,w,c
  4933  001C14  26D9               	addwf	fsr2l,f,c
  4934  001C16  502F               	movf	caltime_to_epoch@tm+1,w,c
  4935  001C18  22DA               	addwfc	fsr2h,f,c
  4936  001C1A  50DF               	movf	indf2,w,c
  4937  001C1C  6E32               	movwf	(??_caltime_to_epoch+2)& (0+255),c
  4938  001C1E  6A33               	clrf	(??_caltime_to_epoch+3)& (0+255),c
  4939  001C20  5030               	movf	??_caltime_to_epoch,w,c
  4940  001C22  2632               	addwf	??_caltime_to_epoch+2,f,c
  4941  001C24  5031               	movf	??_caltime_to_epoch+1,w,c
  4942  001C26  2233               	addwfc	??_caltime_to_epoch+3,f,c
  4943  001C28  C032  F022         	movff	??_caltime_to_epoch+2,___lmul@multiplier
  4944  001C2C  C033  F023         	movff	??_caltime_to_epoch+3,___lmul@multiplier+1
  4945  001C30  0E00               	movlw	0
  4946  001C32  BE23               	btfsc	___lmul@multiplier+1,7,c
  4947  001C34  0EFF               	movlw	-1
  4948  001C36  6E24               	movwf	___lmul@multiplier+2,c
  4949  001C38  6E25               	movwf	___lmul@multiplier+3,c
  4950  001C3A  0E80               	movlw	128
  4951  001C3C  6E26               	movwf	___lmul@multiplicand,c
  4952  001C3E  0E51               	movlw	81
  4953  001C40  6E27               	movwf	___lmul@multiplicand+1,c
  4954  001C42  0E01               	movlw	1
  4955  001C44  6E28               	movwf	___lmul@multiplicand+2,c
  4956  001C46  0E00               	movlw	0
  4957  001C48  6E29               	movwf	___lmul@multiplicand+3,c
  4958  001C4A  EC2B  F013         	call	___lmul	;wreg free
  4959  001C4E  5022               	movf	?___lmul,w,c
  4960  001C50  0100               	movlb	0	; () banked
  4961  001C52  2762               	addwf	caltime_to_epoch@epoch& (0+255),f,b
  4962  001C54  5023               	movf	?___lmul+1,w,c
  4963  001C56  0100               	movlb	0	; () banked
  4964  001C58  2363               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
  4965  001C5A  5024               	movf	?___lmul+2,w,c
  4966  001C5C  0100               	movlb	0	; () banked
  4967  001C5E  2364               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
  4968  001C60  5025               	movf	?___lmul+3,w,c
  4969  001C62  0100               	movlb	0	; () banked
  4970  001C64  2365               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
  4971                           
  4972                           ;My_RTCC.c: 184: epoch += ((epoch_t)60*60) * tm->hh;
  4973  001C66  EE20 F006          	lfsr	2,6
  4974  001C6A  502E               	movf	caltime_to_epoch@tm,w,c
  4975  001C6C  26D9               	addwf	fsr2l,f,c
  4976  001C6E  502F               	movf	caltime_to_epoch@tm+1,w,c
  4977  001C70  22DA               	addwfc	fsr2h,f,c
  4978  001C72  50DF               	movf	indf2,w,c
  4979  001C74  6E30               	movwf	??_caltime_to_epoch& (0+255),c
  4980  001C76  5030               	movf	??_caltime_to_epoch,w,c
  4981  001C78  6E22               	movwf	___lmul@multiplier,c
  4982  001C7A  6A23               	clrf	___lmul@multiplier+1,c
  4983  001C7C  6A24               	clrf	___lmul@multiplier+2,c
  4984  001C7E  6A25               	clrf	___lmul@multiplier+3,c
  4985  001C80  0E10               	movlw	16
  4986  001C82  6E26               	movwf	___lmul@multiplicand,c
  4987  001C84  0E0E               	movlw	14
  4988  001C86  6E27               	movwf	___lmul@multiplicand+1,c
  4989  001C88  0E00               	movlw	0
  4990  001C8A  6E28               	movwf	___lmul@multiplicand+2,c
  4991  001C8C  0E00               	movlw	0
  4992  001C8E  6E29               	movwf	___lmul@multiplicand+3,c
  4993  001C90  EC2B  F013         	call	___lmul	;wreg free
  4994  001C94  5022               	movf	?___lmul,w,c
  4995  001C96  0100               	movlb	0	; () banked
  4996  001C98  2762               	addwf	caltime_to_epoch@epoch& (0+255),f,b
  4997  001C9A  5023               	movf	?___lmul+1,w,c
  4998  001C9C  0100               	movlb	0	; () banked
  4999  001C9E  2363               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
  5000  001CA0  5024               	movf	?___lmul+2,w,c
  5001  001CA2  0100               	movlb	0	; () banked
  5002  001CA4  2364               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
  5003  001CA6  5025               	movf	?___lmul+3,w,c
  5004  001CA8  0100               	movlb	0	; () banked
  5005  001CAA  2365               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
  5006                           
  5007                           ;My_RTCC.c: 185: epoch += ((epoch_t)60) * tm->mm;
  5008  001CAC  EE20 F005          	lfsr	2,5
  5009  001CB0  502E               	movf	caltime_to_epoch@tm,w,c
  5010  001CB2  26D9               	addwf	fsr2l,f,c
  5011  001CB4  502F               	movf	caltime_to_epoch@tm+1,w,c
  5012  001CB6  22DA               	addwfc	fsr2h,f,c
  5013  001CB8  50DF               	movf	indf2,w,c
  5014  001CBA  6E30               	movwf	??_caltime_to_epoch& (0+255),c
  5015  001CBC  5030               	movf	??_caltime_to_epoch,w,c
  5016  001CBE  6E22               	movwf	___lmul@multiplier,c
  5017  001CC0  6A23               	clrf	___lmul@multiplier+1,c
  5018  001CC2  6A24               	clrf	___lmul@multiplier+2,c
  5019  001CC4  6A25               	clrf	___lmul@multiplier+3,c
  5020  001CC6  0E3C               	movlw	60
  5021  001CC8  6E26               	movwf	___lmul@multiplicand,c
  5022  001CCA  0E00               	movlw	0
  5023  001CCC  6E27               	movwf	___lmul@multiplicand+1,c
  5024  001CCE  0E00               	movlw	0
  5025  001CD0  6E28               	movwf	___lmul@multiplicand+2,c
  5026  001CD2  0E00               	movlw	0
  5027  001CD4  6E29               	movwf	___lmul@multiplicand+3,c
  5028  001CD6  EC2B  F013         	call	___lmul	;wreg free
  5029  001CDA  5022               	movf	?___lmul,w,c
  5030  001CDC  0100               	movlb	0	; () banked
  5031  001CDE  2762               	addwf	caltime_to_epoch@epoch& (0+255),f,b
  5032  001CE0  5023               	movf	?___lmul+1,w,c
  5033  001CE2  0100               	movlb	0	; () banked
  5034  001CE4  2363               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
  5035  001CE6  5024               	movf	?___lmul+2,w,c
  5036  001CE8  0100               	movlb	0	; () banked
  5037  001CEA  2364               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
  5038  001CEC  5025               	movf	?___lmul+3,w,c
  5039  001CEE  0100               	movlb	0	; () banked
  5040  001CF0  2365               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;My_RTCC.c: 186: epoch += tm->ss;
  5044  001CF2  EE20 F004          	lfsr	2,4
  5045  001CF6  502E               	movf	caltime_to_epoch@tm,w,c
  5046  001CF8  26D9               	addwf	fsr2l,f,c
  5047  001CFA  502F               	movf	caltime_to_epoch@tm+1,w,c
  5048  001CFC  22DA               	addwfc	fsr2h,f,c
  5049  001CFE  50DF               	movf	indf2,w,c
  5050  001D00  6E30               	movwf	??_caltime_to_epoch& (0+255),c
  5051  001D02  5030               	movf	??_caltime_to_epoch,w,c
  5052  001D04  0100               	movlb	0	; () banked
  5053  001D06  2762               	addwf	caltime_to_epoch@epoch& (0+255),f,b
  5054  001D08  0E00               	movlw	0
  5055  001D0A  2363               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
  5056  001D0C  2364               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
  5057  001D0E  2365               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;My_RTCC.c: 188: tm->epoch = epoch;
  5061  001D10  C02E  FFD9         	movff	caltime_to_epoch@tm,fsr2l
  5062  001D14  C02F  FFDA         	movff	caltime_to_epoch@tm+1,fsr2h
  5063  001D18  C062  FFDE         	movff	caltime_to_epoch@epoch,postinc2
  5064  001D1C  C063  FFDE         	movff	caltime_to_epoch@epoch+1,postinc2
  5065  001D20  C064  FFDE         	movff	caltime_to_epoch@epoch+2,postinc2
  5066  001D24  C065  FFDE         	movff	caltime_to_epoch@epoch+3,postinc2
  5067                           
  5068                           ; BSR set to: 0
  5069  001D28  0012               	return		;funcret
  5070  001D2A                     __end_of_caltime_to_epoch:
  5071                           	opt stack 0
  5072                           tblptru	equ	0xFF8
  5073                           tblptrh	equ	0xFF7
  5074                           tblptrl	equ	0xFF6
  5075                           tablat	equ	0xFF5
  5076                           prodh	equ	0xFF4
  5077                           prodl	equ	0xFF3
  5078                           intcon	equ	0xFF2
  5079                           intcon2	equ	0xFF1
  5080                           postinc0	equ	0xFEE
  5081                           wreg	equ	0xFE8
  5082                           indf2	equ	0xFDF
  5083                           postinc2	equ	0xFDE
  5084                           postdec2	equ	0xFDD
  5085                           fsr2h	equ	0xFDA
  5086                           fsr2l	equ	0xFD9
  5087                           status	equ	0xFD8
  5088                           
  5089 ;; *************** function _month_length *****************
  5090 ;; Defined at:
  5091 ;;		line 49 in file "My_RTCC.c"
  5092 ;; Parameters:    Size  Location     Type
  5093 ;;  year            1    wreg     unsigned char 
  5094 ;;  month           1   26[COMRAM] unsigned char 
  5095 ;; Auto vars:     Size  Location     Type
  5096 ;;  year            1   31[COMRAM] unsigned char 
  5097 ;; Return value:  Size  Location     Type
  5098 ;;                  1    wreg      unsigned char 
  5099 ;; Registers used:
  5100 ;;		wreg, status,2, status,0, cstack
  5101 ;; Tracked objects:
  5102 ;;		On entry : 0/0
  5103 ;;		On exit  : 0/0
  5104 ;;		Unchanged: 0/0
  5105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5106 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5107 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5108 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5109 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5110 ;;Total ram usage:        6 bytes
  5111 ;; Hardware stack levels used:    1
  5112 ;; Hardware stack levels required when called:    3
  5113 ;; This function calls:
  5114 ;;		___awmod
  5115 ;; This function is called by:
  5116 ;;		_epoch_to_caltime
  5117 ;;		_caltime_to_epoch
  5118 ;;		_RTCC_adjust_time_inc
  5119 ;;		_RTCC_adjust_time_dec
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123                           	psect	text22
  5124  002322                     __ptext22:
  5125                           	opt stack 0
  5126  002322                     _month_length:
  5127                           	opt stack 24
  5128                           
  5129                           ; BSR set to: 0
  5130                           ;incstack = 0
  5131                           ;month_length@year stored from wreg
  5132  002322  6E20               	movwf	month_length@year,c
  5133                           
  5134                           ;My_RTCC.c: 50: if (month == 2) return 28 + !(year & 3)-!(year % 100)+!(year % 400);
  5135  002324  0E02               	movlw	2
  5136  002326  181B               	xorwf	month_length@month,w,c
  5137  002328  A4D8               	btfss	status,2,c
  5138  00232A  D030               	goto	l2995
  5139  00232C  C020  F015         	movff	month_length@year,___awmod@dividend
  5140  002330  6A16               	clrf	___awmod@dividend+1,c
  5141  002332  0E00               	movlw	0
  5142  002334  6E18               	movwf	___awmod@divisor+1,c
  5143  002336  0E64               	movlw	100
  5144  002338  6E17               	movwf	___awmod@divisor,c
  5145  00233A  ECF3  F012         	call	___awmod	;wreg free
  5146  00233E  5015               	movf	?___awmod,w,c
  5147  002340  1016               	iorwf	?___awmod+1,w,c
  5148  002342  A4D8               	btfss	status,2,c
  5149  002344  D002               	goto	u3080
  5150  002346  0E01               	movlw	1
  5151  002348  D001               	goto	u3090
  5152  00234A                     u3080:
  5153  00234A  0E00               	movlw	0
  5154  00234C                     u3090:
  5155  00234C  0800               	sublw	0
  5156  00234E  6E1C               	movwf	??_month_length& (0+255),c
  5157  002350  C020  F015         	movff	month_length@year,___awmod@dividend
  5158  002354  6A16               	clrf	___awmod@dividend+1,c
  5159  002356  0E01               	movlw	1
  5160  002358  6E18               	movwf	___awmod@divisor+1,c
  5161  00235A  0E90               	movlw	144
  5162  00235C  6E17               	movwf	___awmod@divisor,c
  5163  00235E  ECF3  F012         	call	___awmod	;wreg free
  5164  002362  5015               	movf	?___awmod,w,c
  5165  002364  1016               	iorwf	?___awmod+1,w,c
  5166  002366  A4D8               	btfss	status,2,c
  5167  002368  D003               	goto	u3100
  5168  00236A  6A1D               	clrf	(??_month_length+1)& (0+255),c
  5169  00236C  2A1D               	incf	(??_month_length+1)& (0+255),f,c
  5170  00236E  D001               	goto	u3118
  5171  002370                     u3100:
  5172  002370  6A1D               	clrf	(??_month_length+1)& (0+255),c
  5173  002372                     u3118:
  5174  002372  C020  F01E         	movff	month_length@year,??_month_length+2
  5175  002376  0E03               	movlw	3
  5176  002378  161E               	andwf	??_month_length+2,f,c
  5177  00237A  A4D8               	btfss	status,2,c
  5178  00237C  D002               	goto	u3120
  5179  00237E  0E01               	movlw	1
  5180  002380  D001               	goto	u3130
  5181  002382                     u3120:
  5182  002382  0E00               	movlw	0
  5183  002384                     u3130:
  5184  002384  241D               	addwf	??_month_length+1,w,c
  5185  002386  241C               	addwf	??_month_length,w,c
  5186  002388  0F1C               	addlw	28
  5187  00238A  0012               	return	
  5188  00238C                     l2995:
  5189                           
  5190                           ;My_RTCC.c: 51: else return 31 - (((-(month & 1)^month)&13) == 4);
  5191  00238C  501B               	movf	month_length@month,w,c
  5192  00238E  0B01               	andlw	1
  5193  002390  6E1C               	movwf	??_month_length& (0+255),c
  5194  002392  6A1D               	clrf	(??_month_length+1)& (0+255),c
  5195  002394  1E1C               	comf	??_month_length,f,c
  5196  002396  1E1D               	comf	??_month_length+1,f,c
  5197  002398  4A1C               	infsnz	??_month_length,f,c
  5198  00239A  2A1D               	incf	??_month_length+1,f,c
  5199  00239C  501B               	movf	month_length@month,w,c
  5200  00239E  6E1E               	movwf	(??_month_length+2)& (0+255),c
  5201  0023A0  6A1F               	clrf	(??_month_length+3)& (0+255),c
  5202  0023A2  501C               	movf	??_month_length,w,c
  5203  0023A4  1A1E               	xorwf	??_month_length+2,f,c
  5204  0023A6  501D               	movf	??_month_length+1,w,c
  5205  0023A8  1A1F               	xorwf	??_month_length+3,f,c
  5206  0023AA  0E0D               	movlw	13
  5207  0023AC  161E               	andwf	??_month_length+2,f,c
  5208  0023AE  0E00               	movlw	0
  5209  0023B0  161F               	andwf	??_month_length+3,f,c
  5210  0023B2  0E04               	movlw	4
  5211  0023B4  181E               	xorwf	??_month_length+2,w,c
  5212  0023B6  101F               	iorwf	??_month_length+3,w,c
  5213  0023B8  A4D8               	btfss	status,2,c
  5214  0023BA  D002               	goto	u3140
  5215  0023BC  0E01               	movlw	1
  5216  0023BE  D001               	goto	u3150
  5217  0023C0                     u3140:
  5218  0023C0  0E00               	movlw	0
  5219  0023C2                     u3150:
  5220  0023C2  0800               	sublw	0
  5221  0023C4  0F1F               	addlw	31
  5222  0023C6  0012               	return	
  5223  0023C8                     __end_of_month_length:
  5224                           	opt stack 0
  5225                           tblptru	equ	0xFF8
  5226                           tblptrh	equ	0xFF7
  5227                           tblptrl	equ	0xFF6
  5228                           tablat	equ	0xFF5
  5229                           prodh	equ	0xFF4
  5230                           prodl	equ	0xFF3
  5231                           intcon	equ	0xFF2
  5232                           intcon2	equ	0xFF1
  5233                           postinc0	equ	0xFEE
  5234                           wreg	equ	0xFE8
  5235                           indf2	equ	0xFDF
  5236                           postinc2	equ	0xFDE
  5237                           postdec2	equ	0xFDD
  5238                           fsr2h	equ	0xFDA
  5239                           fsr2l	equ	0xFD9
  5240                           status	equ	0xFD8
  5241                           
  5242 ;; *************** function ___awmod *****************
  5243 ;; Defined at:
  5244 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  5245 ;; Parameters:    Size  Location     Type
  5246 ;;  dividend        2   20[COMRAM] int 
  5247 ;;  divisor         2   22[COMRAM] int 
  5248 ;; Auto vars:     Size  Location     Type
  5249 ;;  sign            1   25[COMRAM] unsigned char 
  5250 ;;  counter         1   24[COMRAM] unsigned char 
  5251 ;; Return value:  Size  Location     Type
  5252 ;;                  2   20[COMRAM] int 
  5253 ;; Registers used:
  5254 ;;		wreg, status,2, status,0
  5255 ;; Tracked objects:
  5256 ;;		On entry : 0/0
  5257 ;;		On exit  : 0/0
  5258 ;;		Unchanged: 0/0
  5259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5260 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5261 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5263 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5264 ;;Total ram usage:        6 bytes
  5265 ;; Hardware stack levels used:    1
  5266 ;; Hardware stack levels required when called:    2
  5267 ;; This function calls:
  5268 ;;		Nothing
  5269 ;; This function is called by:
  5270 ;;		_month_length
  5271 ;; This function uses a non-reentrant model
  5272 ;;
  5273                           
  5274                           	psect	text23
  5275  0025E6                     __ptext23:
  5276                           	opt stack 0
  5277  0025E6                     ___awmod:
  5278                           	opt stack 24
  5279                           
  5280                           ;incstack = 0
  5281  0025E6  0E00               	movlw	0
  5282  0025E8  6E1A               	movwf	___awmod@sign,c
  5283  0025EA  AE16               	btfss	___awmod@dividend+1,7,c
  5284  0025EC  D006               	goto	l2929
  5285  0025EE  6C15               	negf	___awmod@dividend,c
  5286  0025F0  1E16               	comf	___awmod@dividend+1,f,c
  5287  0025F2  B0D8               	btfsc	status,0,c
  5288  0025F4  2A16               	incf	___awmod@dividend+1,f,c
  5289  0025F6  0E01               	movlw	1
  5290  0025F8  6E1A               	movwf	___awmod@sign,c
  5291  0025FA                     l2929:
  5292  0025FA  AE18               	btfss	___awmod@divisor+1,7,c
  5293  0025FC  D004               	goto	l2933
  5294  0025FE  6C17               	negf	___awmod@divisor,c
  5295  002600  1E18               	comf	___awmod@divisor+1,f,c
  5296  002602  B0D8               	btfsc	status,0,c
  5297  002604  2A18               	incf	___awmod@divisor+1,f,c
  5298  002606                     l2933:
  5299  002606  5017               	movf	___awmod@divisor,w,c
  5300  002608  1018               	iorwf	___awmod@divisor+1,w,c
  5301  00260A  B4D8               	btfsc	status,2,c
  5302  00260C  D018               	goto	l2949
  5303  00260E  0E01               	movlw	1
  5304  002610  6E19               	movwf	___awmod@counter,c
  5305  002612  D004               	goto	l2939
  5306  002614                     l2937:
  5307  002614  90D8               	bcf	status,0,c
  5308  002616  3617               	rlcf	___awmod@divisor,f,c
  5309  002618  3618               	rlcf	___awmod@divisor+1,f,c
  5310  00261A  2A19               	incf	___awmod@counter,f,c
  5311  00261C                     l2939:
  5312  00261C  AE18               	btfss	___awmod@divisor+1,7,c
  5313  00261E  D7FA               	goto	l2937
  5314  002620                     l2941:
  5315  002620  5017               	movf	___awmod@divisor,w,c
  5316  002622  5C15               	subwf	___awmod@dividend,w,c
  5317  002624  5018               	movf	___awmod@divisor+1,w,c
  5318  002626  5816               	subwfb	___awmod@dividend+1,w,c
  5319  002628  A0D8               	btfss	status,0,c
  5320  00262A  D004               	goto	l2945
  5321  00262C  5017               	movf	___awmod@divisor,w,c
  5322  00262E  5E15               	subwf	___awmod@dividend,f,c
  5323  002630  5018               	movf	___awmod@divisor+1,w,c
  5324  002632  5A16               	subwfb	___awmod@dividend+1,f,c
  5325  002634                     l2945:
  5326  002634  90D8               	bcf	status,0,c
  5327  002636  3218               	rrcf	___awmod@divisor+1,f,c
  5328  002638  3217               	rrcf	___awmod@divisor,f,c
  5329  00263A  2E19               	decfsz	___awmod@counter,f,c
  5330  00263C  D7F1               	goto	l2941
  5331  00263E                     l2949:
  5332  00263E  501A               	movf	___awmod@sign,w,c
  5333  002640  B4D8               	btfsc	status,2,c
  5334  002642  D004               	goto	l2953
  5335  002644  6C15               	negf	___awmod@dividend,c
  5336  002646  1E16               	comf	___awmod@dividend+1,f,c
  5337  002648  B0D8               	btfsc	status,0,c
  5338  00264A  2A16               	incf	___awmod@dividend+1,f,c
  5339  00264C                     l2953:
  5340  00264C  C015  F015         	movff	___awmod@dividend,?___awmod
  5341  002650  C016  F016         	movff	___awmod@dividend+1,?___awmod+1
  5342  002654  0012               	return	
  5343  002656                     __end_of___awmod:
  5344                           	opt stack 0
  5345                           tblptru	equ	0xFF8
  5346                           tblptrh	equ	0xFF7
  5347                           tblptrl	equ	0xFF6
  5348                           tablat	equ	0xFF5
  5349                           prodh	equ	0xFF4
  5350                           prodl	equ	0xFF3
  5351                           intcon	equ	0xFF2
  5352                           intcon2	equ	0xFF1
  5353                           postinc0	equ	0xFEE
  5354                           wreg	equ	0xFE8
  5355                           indf2	equ	0xFDF
  5356                           postinc2	equ	0xFDE
  5357                           postdec2	equ	0xFDD
  5358                           fsr2h	equ	0xFDA
  5359                           fsr2l	equ	0xFD9
  5360                           status	equ	0xFD8
  5361                           
  5362 ;; *************** function ___lmul *****************
  5363 ;; Defined at:
  5364 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul32.c"
  5365 ;; Parameters:    Size  Location     Type
  5366 ;;  multiplier      4   33[COMRAM] unsigned long 
  5367 ;;  multiplicand    4   37[COMRAM] unsigned long 
  5368 ;; Auto vars:     Size  Location     Type
  5369 ;;  product         4   41[COMRAM] unsigned long 
  5370 ;; Return value:  Size  Location     Type
  5371 ;;                  4   33[COMRAM] unsigned long 
  5372 ;; Registers used:
  5373 ;;		wreg, status,2, status,0
  5374 ;; Tracked objects:
  5375 ;;		On entry : 0/0
  5376 ;;		On exit  : 0/0
  5377 ;;		Unchanged: 0/0
  5378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5379 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5380 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5382 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5383 ;;Total ram usage:       12 bytes
  5384 ;; Hardware stack levels used:    1
  5385 ;; Hardware stack levels required when called:    2
  5386 ;; This function calls:
  5387 ;;		Nothing
  5388 ;; This function is called by:
  5389 ;;		_get_quot_rem
  5390 ;;		_caltime_to_epoch
  5391 ;;		_RTCC_adjust_time_inc
  5392 ;;		_RTCC_adjust_time_dec
  5393 ;; This function uses a non-reentrant model
  5394 ;;
  5395                           
  5396                           	psect	text24
  5397  002656                     __ptext24:
  5398                           	opt stack 0
  5399  002656                     ___lmul:
  5400                           	opt stack 25
  5401                           
  5402                           ;incstack = 0
  5403  002656  0E00               	movlw	0
  5404  002658  6E2A               	movwf	___lmul@product,c
  5405  00265A  0E00               	movlw	0
  5406  00265C  6E2B               	movwf	___lmul@product+1,c
  5407  00265E  0E00               	movlw	0
  5408  002660  6E2C               	movwf	___lmul@product+2,c
  5409  002662  0E00               	movlw	0
  5410  002664  6E2D               	movwf	___lmul@product+3,c
  5411  002666                     l2869:
  5412  002666  A022               	btfss	___lmul@multiplier,0,c
  5413  002668  D008               	goto	l2873
  5414  00266A  5026               	movf	___lmul@multiplicand,w,c
  5415  00266C  262A               	addwf	___lmul@product,f,c
  5416  00266E  5027               	movf	___lmul@multiplicand+1,w,c
  5417  002670  222B               	addwfc	___lmul@product+1,f,c
  5418  002672  5028               	movf	___lmul@multiplicand+2,w,c
  5419  002674  222C               	addwfc	___lmul@product+2,f,c
  5420  002676  5029               	movf	___lmul@multiplicand+3,w,c
  5421  002678  222D               	addwfc	___lmul@product+3,f,c
  5422  00267A                     l2873:
  5423  00267A  90D8               	bcf	status,0,c
  5424  00267C  3626               	rlcf	___lmul@multiplicand,f,c
  5425  00267E  3627               	rlcf	___lmul@multiplicand+1,f,c
  5426  002680  3628               	rlcf	___lmul@multiplicand+2,f,c
  5427  002682  3629               	rlcf	___lmul@multiplicand+3,f,c
  5428  002684  90D8               	bcf	status,0,c
  5429  002686  3225               	rrcf	___lmul@multiplier+3,f,c
  5430  002688  3224               	rrcf	___lmul@multiplier+2,f,c
  5431  00268A  3223               	rrcf	___lmul@multiplier+1,f,c
  5432  00268C  3222               	rrcf	___lmul@multiplier,f,c
  5433  00268E  5022               	movf	___lmul@multiplier,w,c
  5434  002690  1023               	iorwf	___lmul@multiplier+1,w,c
  5435  002692  1024               	iorwf	___lmul@multiplier+2,w,c
  5436  002694  1025               	iorwf	___lmul@multiplier+3,w,c
  5437  002696  A4D8               	btfss	status,2,c
  5438  002698  D7E6               	goto	l2869
  5439  00269A  C02A  F022         	movff	___lmul@product,?___lmul
  5440  00269E  C02B  F023         	movff	___lmul@product+1,?___lmul+1
  5441  0026A2  C02C  F024         	movff	___lmul@product+2,?___lmul+2
  5442  0026A6  C02D  F025         	movff	___lmul@product+3,?___lmul+3
  5443  0026AA  0012               	return		;funcret
  5444  0026AC                     __end_of___lmul:
  5445                           	opt stack 0
  5446                           tblptru	equ	0xFF8
  5447                           tblptrh	equ	0xFF7
  5448                           tblptrl	equ	0xFF6
  5449                           tablat	equ	0xFF5
  5450                           prodh	equ	0xFF4
  5451                           prodl	equ	0xFF3
  5452                           intcon	equ	0xFF2
  5453                           intcon2	equ	0xFF1
  5454                           postinc0	equ	0xFEE
  5455                           wreg	equ	0xFE8
  5456                           indf2	equ	0xFDF
  5457                           postinc2	equ	0xFDE
  5458                           postdec2	equ	0xFDD
  5459                           fsr2h	equ	0xFDA
  5460                           fsr2l	equ	0xFD9
  5461                           status	equ	0xFD8
  5462                           
  5463 ;; *************** function _RTCC_to_caltime *****************
  5464 ;; Defined at:
  5465 ;;		line 83 in file "My_RTCC.c"
  5466 ;; Parameters:    Size  Location     Type
  5467 ;;  tm              2   22[COMRAM] PTR struct .
  5468 ;;		 -> now(14), 
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;  dumy            1   24[COMRAM] unsigned char 
  5471 ;; Return value:  Size  Location     Type
  5472 ;;		None               void
  5473 ;; Registers used:
  5474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5480 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5481 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5483 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5484 ;;Total ram usage:        3 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    3
  5487 ;; This function calls:
  5488 ;;		_x_to_d
  5489 ;; This function is called by:
  5490 ;;		_RTCC_from_RTCC
  5491 ;; This function uses a non-reentrant model
  5492 ;;
  5493                           
  5494                           	psect	text25
  5495  002274                     __ptext25:
  5496                           	opt stack 0
  5497  002274                     _RTCC_to_caltime:
  5498                           	opt stack 25
  5499  002274                     l156:
  5500  002274  010F               	movlb	15	; () banked
  5501  002276  B93F               	btfsc	63,4,b	;volatile
  5502  002278  D7FD               	goto	l156
  5503                           
  5504                           ; BSR set to: 15
  5505                           ;My_RTCC.c: 86: RTCCFGbits.RTCPTR0 = 1;
  5506  00227A  010F               	movlb	15	; () banked
  5507  00227C  813F               	bsf	63,0,b	;volatile
  5508                           
  5509                           ;My_RTCC.c: 87: RTCCFGbits.RTCPTR1 = 1;
  5510  00227E  010F               	movlb	15	; () banked
  5511  002280  833F               	bsf	63,1,b	;volatile
  5512                           
  5513                           ; BSR set to: 15
  5514                           ;My_RTCC.c: 89: tm->YY = x_to_d(RTCVALL);
  5515  002282  EE20 F00A          	lfsr	2,10
  5516  002286  5017               	movf	RTCC_to_caltime@tm,w,c
  5517  002288  26D9               	addwf	fsr2l,f,c
  5518  00228A  5018               	movf	RTCC_to_caltime@tm+1,w,c
  5519  00228C  22DA               	addwfc	fsr2h,f,c
  5520  00228E  010F               	movlb	15	; () banked
  5521  002290  513A               	movf	58,w,b	;volatile
  5522  002292  EC52  F014         	call	_x_to_d
  5523  002296  6EDF               	movwf	indf2,c
  5524                           
  5525                           ;My_RTCC.c: 90: uint8_t dumy = RTCVALH;
  5526  002298  CF3B F019          	movff	3899,RTCC_to_caltime@dumy	;volatile
  5527                           
  5528                           ;My_RTCC.c: 91: tm->DD = x_to_d(RTCVALL);
  5529  00229C  EE20 F008          	lfsr	2,8
  5530  0022A0  5017               	movf	RTCC_to_caltime@tm,w,c
  5531  0022A2  26D9               	addwf	fsr2l,f,c
  5532  0022A4  5018               	movf	RTCC_to_caltime@tm+1,w,c
  5533  0022A6  22DA               	addwfc	fsr2h,f,c
  5534  0022A8  010F               	movlb	15	; () banked
  5535  0022AA  513A               	movf	58,w,b	;volatile
  5536  0022AC  EC52  F014         	call	_x_to_d
  5537  0022B0  6EDF               	movwf	indf2,c
  5538                           
  5539                           ;My_RTCC.c: 92: tm->MM = x_to_d(RTCVALH);
  5540  0022B2  EE20 F009          	lfsr	2,9
  5541  0022B6  5017               	movf	RTCC_to_caltime@tm,w,c
  5542  0022B8  26D9               	addwf	fsr2l,f,c
  5543  0022BA  5018               	movf	RTCC_to_caltime@tm+1,w,c
  5544  0022BC  22DA               	addwfc	fsr2h,f,c
  5545  0022BE  010F               	movlb	15	; () banked
  5546  0022C0  513B               	movf	59,w,b	;volatile
  5547  0022C2  EC52  F014         	call	_x_to_d
  5548  0022C6  6EDF               	movwf	indf2,c
  5549                           
  5550                           ;My_RTCC.c: 93: tm->hh = x_to_d(RTCVALL);
  5551  0022C8  EE20 F006          	lfsr	2,6
  5552  0022CC  5017               	movf	RTCC_to_caltime@tm,w,c
  5553  0022CE  26D9               	addwf	fsr2l,f,c
  5554  0022D0  5018               	movf	RTCC_to_caltime@tm+1,w,c
  5555  0022D2  22DA               	addwfc	fsr2h,f,c
  5556  0022D4  010F               	movlb	15	; () banked
  5557  0022D6  513A               	movf	58,w,b	;volatile
  5558  0022D8  EC52  F014         	call	_x_to_d
  5559  0022DC  6EDF               	movwf	indf2,c
  5560                           
  5561                           ;My_RTCC.c: 94: tm->EE = x_to_d(RTCVALH);
  5562  0022DE  EE20 F007          	lfsr	2,7
  5563  0022E2  5017               	movf	RTCC_to_caltime@tm,w,c
  5564  0022E4  26D9               	addwf	fsr2l,f,c
  5565  0022E6  5018               	movf	RTCC_to_caltime@tm+1,w,c
  5566  0022E8  22DA               	addwfc	fsr2h,f,c
  5567  0022EA  010F               	movlb	15	; () banked
  5568  0022EC  513B               	movf	59,w,b	;volatile
  5569  0022EE  EC52  F014         	call	_x_to_d
  5570  0022F2  6EDF               	movwf	indf2,c
  5571                           
  5572                           ;My_RTCC.c: 95: tm->ss = x_to_d(RTCVALL);
  5573  0022F4  EE20 F004          	lfsr	2,4
  5574  0022F8  5017               	movf	RTCC_to_caltime@tm,w,c
  5575  0022FA  26D9               	addwf	fsr2l,f,c
  5576  0022FC  5018               	movf	RTCC_to_caltime@tm+1,w,c
  5577  0022FE  22DA               	addwfc	fsr2h,f,c
  5578  002300  010F               	movlb	15	; () banked
  5579  002302  513A               	movf	58,w,b	;volatile
  5580  002304  EC52  F014         	call	_x_to_d
  5581  002308  6EDF               	movwf	indf2,c
  5582                           
  5583                           ;My_RTCC.c: 96: tm->mm = x_to_d(RTCVALH);
  5584  00230A  EE20 F005          	lfsr	2,5
  5585  00230E  5017               	movf	RTCC_to_caltime@tm,w,c
  5586  002310  26D9               	addwf	fsr2l,f,c
  5587  002312  5018               	movf	RTCC_to_caltime@tm+1,w,c
  5588  002314  22DA               	addwfc	fsr2h,f,c
  5589  002316  010F               	movlb	15	; () banked
  5590  002318  513B               	movf	59,w,b	;volatile
  5591  00231A  EC52  F014         	call	_x_to_d
  5592  00231E  6EDF               	movwf	indf2,c
  5593  002320  0012               	return		;funcret
  5594  002322                     __end_of_RTCC_to_caltime:
  5595                           	opt stack 0
  5596                           tblptru	equ	0xFF8
  5597                           tblptrh	equ	0xFF7
  5598                           tblptrl	equ	0xFF6
  5599                           tablat	equ	0xFF5
  5600                           prodh	equ	0xFF4
  5601                           prodl	equ	0xFF3
  5602                           intcon	equ	0xFF2
  5603                           intcon2	equ	0xFF1
  5604                           postinc0	equ	0xFEE
  5605                           wreg	equ	0xFE8
  5606                           indf2	equ	0xFDF
  5607                           postinc2	equ	0xFDE
  5608                           postdec2	equ	0xFDD
  5609                           fsr2h	equ	0xFDA
  5610                           fsr2l	equ	0xFD9
  5611                           status	equ	0xFD8
  5612                           
  5613 ;; *************** function _x_to_d *****************
  5614 ;; Defined at:
  5615 ;;		line 45 in file "My_RTCC.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;  hex             1    wreg     unsigned char 
  5618 ;; Auto vars:     Size  Location     Type
  5619 ;;  hex             1   21[COMRAM] unsigned char 
  5620 ;; Return value:  Size  Location     Type
  5621 ;;                  1    wreg      unsigned char 
  5622 ;; Registers used:
  5623 ;;		wreg, status,2, status,0, prodl, prodh
  5624 ;; Tracked objects:
  5625 ;;		On entry : 0/0
  5626 ;;		On exit  : 0/0
  5627 ;;		Unchanged: 0/0
  5628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5630 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5631 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5632 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5633 ;;Total ram usage:        2 bytes
  5634 ;; Hardware stack levels used:    1
  5635 ;; Hardware stack levels required when called:    2
  5636 ;; This function calls:
  5637 ;;		Nothing
  5638 ;; This function is called by:
  5639 ;;		_RTCC_to_caltime
  5640 ;; This function uses a non-reentrant model
  5641 ;;
  5642                           
  5643                           	psect	text26
  5644  0028A4                     __ptext26:
  5645                           	opt stack 0
  5646  0028A4                     _x_to_d:
  5647                           	opt stack 25
  5648                           
  5649                           ;incstack = 0
  5650                           ;x_to_d@hex stored from wreg
  5651  0028A4  6E16               	movwf	x_to_d@hex,c
  5652                           
  5653                           ;My_RTCC.c: 46: return 10 * (0x0F & (hex >> 4)) + (0x0F & hex);
  5654  0028A6  C016  F015         	movff	x_to_d@hex,??_x_to_d
  5655  0028AA  0E0F               	movlw	15
  5656  0028AC  1615               	andwf	??_x_to_d,f,c
  5657  0028AE  3816               	swapf	x_to_d@hex,w,c
  5658  0028B0  0B0F               	andlw	15
  5659  0028B2  0B0F               	andlw	15
  5660  0028B4  0D0A               	mullw	10
  5661  0028B6  50F3               	movf	prodl,w,c
  5662  0028B8  2415               	addwf	??_x_to_d,w,c
  5663  0028BA  0012               	return	
  5664  0028BC                     __end_of_x_to_d:
  5665                           	opt stack 0
  5666                           tblptru	equ	0xFF8
  5667                           tblptrh	equ	0xFF7
  5668                           tblptrl	equ	0xFF6
  5669                           tablat	equ	0xFF5
  5670                           prodh	equ	0xFF4
  5671                           prodl	equ	0xFF3
  5672                           intcon	equ	0xFF2
  5673                           intcon2	equ	0xFF1
  5674                           postinc0	equ	0xFEE
  5675                           wreg	equ	0xFE8
  5676                           indf2	equ	0xFDF
  5677                           postinc2	equ	0xFDE
  5678                           postdec2	equ	0xFDD
  5679                           fsr2h	equ	0xFDA
  5680                           fsr2l	equ	0xFD9
  5681                           status	equ	0xFD8
  5682                           
  5683 ;; *************** function _RTCC_adjust_time_cursor *****************
  5684 ;; Defined at:
  5685 ;;		line 270 in file "My_RTCC.c"
  5686 ;; Parameters:    Size  Location     Type
  5687 ;;  tm              2   20[COMRAM] PTR struct .
  5688 ;;		 -> now(14), 
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;		None
  5691 ;; Return value:  Size  Location     Type
  5692 ;;		None               void
  5693 ;; Registers used:
  5694 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5695 ;; Tracked objects:
  5696 ;;		On entry : 0/0
  5697 ;;		On exit  : 0/0
  5698 ;;		Unchanged: 0/0
  5699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5700 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5703 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5704 ;;Total ram usage:        2 bytes
  5705 ;; Hardware stack levels used:    1
  5706 ;; Hardware stack levels required when called:    2
  5707 ;; This function calls:
  5708 ;;		Nothing
  5709 ;; This function is called by:
  5710 ;;		_RTCC_adjust_time_button
  5711 ;; This function uses a non-reentrant model
  5712 ;;
  5713                           
  5714                           	psect	text27
  5715  001FF8                     __ptext27:
  5716                           	opt stack 0
  5717  001FF8                     _RTCC_adjust_time_cursor:
  5718                           	opt stack 27
  5719                           
  5720                           ;My_RTCC.c: 271: if (tm->edit.flag.ss)tm->edit.flags = 0x02;
  5721                           
  5722                           ;incstack = 0
  5723  001FF8  EE20 F00D          	lfsr	2,13
  5724  001FFC  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5725  001FFE  26D9               	addwf	fsr2l,f,c
  5726  002000  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5727  002002  22DA               	addwfc	fsr2h,f,c
  5728  002004  A0DF               	btfss	indf2,0,c
  5729  002006  D009               	goto	l2231
  5730  002008  EE20 F00D          	lfsr	2,13
  5731  00200C  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5732  00200E  26D9               	addwf	fsr2l,f,c
  5733  002010  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5734  002012  22DA               	addwfc	fsr2h,f,c
  5735  002014  0E02               	movlw	2
  5736  002016  6EDF               	movwf	indf2,c
  5737  002018  0012               	return	
  5738  00201A                     l2231:
  5739                           
  5740                           ;My_RTCC.c: 272: else if (tm->edit.flag.mm)tm->edit.flags = 0x04;
  5741  00201A  EE20 F00D          	lfsr	2,13
  5742  00201E  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5743  002020  26D9               	addwf	fsr2l,f,c
  5744  002022  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5745  002024  22DA               	addwfc	fsr2h,f,c
  5746  002026  A2DF               	btfss	indf2,1,c
  5747  002028  D009               	goto	l2235
  5748  00202A  EE20 F00D          	lfsr	2,13
  5749  00202E  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5750  002030  26D9               	addwf	fsr2l,f,c
  5751  002032  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5752  002034  22DA               	addwfc	fsr2h,f,c
  5753  002036  0E04               	movlw	4
  5754  002038  6EDF               	movwf	indf2,c
  5755  00203A  0012               	return	
  5756  00203C                     l2235:
  5757                           
  5758                           ;My_RTCC.c: 273: else if (tm->edit.flag.hh)tm->edit.flags = 0x08;
  5759  00203C  EE20 F00D          	lfsr	2,13
  5760  002040  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5761  002042  26D9               	addwf	fsr2l,f,c
  5762  002044  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5763  002046  22DA               	addwfc	fsr2h,f,c
  5764  002048  A4DF               	btfss	indf2,2,c
  5765  00204A  D009               	goto	l2239
  5766  00204C  EE20 F00D          	lfsr	2,13
  5767  002050  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5768  002052  26D9               	addwf	fsr2l,f,c
  5769  002054  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5770  002056  22DA               	addwfc	fsr2h,f,c
  5771  002058  0E08               	movlw	8
  5772  00205A  6EDF               	movwf	indf2,c
  5773  00205C  0012               	return	
  5774  00205E                     l2239:
  5775                           
  5776                           ;My_RTCC.c: 274: else if (tm->edit.flag.DD)tm->edit.flags = 0x10;
  5777  00205E  EE20 F00D          	lfsr	2,13
  5778  002062  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5779  002064  26D9               	addwf	fsr2l,f,c
  5780  002066  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5781  002068  22DA               	addwfc	fsr2h,f,c
  5782  00206A  A6DF               	btfss	indf2,3,c
  5783  00206C  D009               	goto	l2243
  5784  00206E  EE20 F00D          	lfsr	2,13
  5785  002072  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5786  002074  26D9               	addwf	fsr2l,f,c
  5787  002076  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5788  002078  22DA               	addwfc	fsr2h,f,c
  5789  00207A  0E10               	movlw	16
  5790  00207C  6EDF               	movwf	indf2,c
  5791  00207E  0012               	return	
  5792  002080                     l2243:
  5793                           
  5794                           ;My_RTCC.c: 275: else if (tm->edit.flag.MM)tm->edit.flags = 0x20;
  5795  002080  EE20 F00D          	lfsr	2,13
  5796  002084  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5797  002086  26D9               	addwf	fsr2l,f,c
  5798  002088  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5799  00208A  22DA               	addwfc	fsr2h,f,c
  5800  00208C  A8DF               	btfss	indf2,4,c
  5801  00208E  D009               	goto	l2247
  5802  002090  EE20 F00D          	lfsr	2,13
  5803  002094  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5804  002096  26D9               	addwf	fsr2l,f,c
  5805  002098  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5806  00209A  22DA               	addwfc	fsr2h,f,c
  5807  00209C  0E20               	movlw	32
  5808  00209E  6EDF               	movwf	indf2,c
  5809  0020A0  0012               	return	
  5810  0020A2                     l2247:
  5811                           
  5812                           ;My_RTCC.c: 276: else if (tm->edit.flag.YY)tm->edit.flags = 0x01;
  5813  0020A2  EE20 F00D          	lfsr	2,13
  5814  0020A6  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5815  0020A8  26D9               	addwf	fsr2l,f,c
  5816  0020AA  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5817  0020AC  22DA               	addwfc	fsr2h,f,c
  5818  0020AE  AADF               	btfss	indf2,5,c
  5819  0020B0  D009               	goto	l2251
  5820  0020B2  EE20 F00D          	lfsr	2,13
  5821  0020B6  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5822  0020B8  26D9               	addwf	fsr2l,f,c
  5823  0020BA  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5824  0020BC  22DA               	addwfc	fsr2h,f,c
  5825  0020BE  0E01               	movlw	1
  5826  0020C0  6EDF               	movwf	indf2,c
  5827  0020C2  0012               	return	
  5828  0020C4                     l2251:
  5829                           
  5830                           ;My_RTCC.c: 277: else tm->edit.flags = 0x00;
  5831  0020C4  EE20 F00D          	lfsr	2,13
  5832  0020C8  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5833  0020CA  26D9               	addwf	fsr2l,f,c
  5834  0020CC  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5835  0020CE  22DA               	addwfc	fsr2h,f,c
  5836  0020D0  0E00               	movlw	0
  5837  0020D2  6EDF               	movwf	indf2,c
  5838  0020D4  0012               	return	
  5839  0020D6                     __end_of_RTCC_adjust_time_cursor:
  5840                           	opt stack 0
  5841                           tblptru	equ	0xFF8
  5842                           tblptrh	equ	0xFF7
  5843                           tblptrl	equ	0xFF6
  5844                           tablat	equ	0xFF5
  5845                           prodh	equ	0xFF4
  5846                           prodl	equ	0xFF3
  5847                           intcon	equ	0xFF2
  5848                           intcon2	equ	0xFF1
  5849                           postinc0	equ	0xFEE
  5850                           wreg	equ	0xFE8
  5851                           indf2	equ	0xFDF
  5852                           postinc2	equ	0xFDE
  5853                           postdec2	equ	0xFDD
  5854                           fsr2h	equ	0xFDA
  5855                           fsr2l	equ	0xFD9
  5856                           status	equ	0xFD8
  5857                           
  5858 ;; *************** function _ISR *****************
  5859 ;; Defined at:
  5860 ;;		line 45 in file "main.c"
  5861 ;; Parameters:    Size  Location     Type
  5862 ;;		None
  5863 ;; Auto vars:     Size  Location     Type
  5864 ;;		None
  5865 ;; Return value:  Size  Location     Type
  5866 ;;		None               void
  5867 ;; Registers used:
  5868 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5869 ;; Tracked objects:
  5870 ;;		On entry : 0/0
  5871 ;;		On exit  : 0/0
  5872 ;;		Unchanged: 0/0
  5873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5876 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5877 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5878 ;;Total ram usage:       15 bytes
  5879 ;; Hardware stack levels used:    1
  5880 ;; Hardware stack levels required when called:    1
  5881 ;; This function calls:
  5882 ;;		_button_timer_interrupt
  5883 ;; This function is called by:
  5884 ;;		Interrupt level 2
  5885 ;; This function uses a non-reentrant model
  5886 ;;
  5887                           
  5888                           	psect	intcode
  5889  000008                     __pintcode:
  5890                           	opt stack 0
  5891  000008                     _ISR:
  5892                           	opt stack 23
  5893                           
  5894                           ;incstack = 0
  5895  000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5896  00000A  CFFA F007          	movff	pclath,??_ISR+1
  5897  00000E  CFFB F008          	movff	pclatu,??_ISR+2
  5898  000012  CFE9 F009          	movff	fsr0l,??_ISR+3
  5899  000016  CFEA F00A          	movff	fsr0h,??_ISR+4
  5900  00001A  CFE1 F00B          	movff	fsr1l,??_ISR+5
  5901  00001E  CFE2 F00C          	movff	fsr1h,??_ISR+6
  5902  000022  CFD9 F00D          	movff	fsr2l,??_ISR+7
  5903  000026  CFDA F00E          	movff	fsr2h,??_ISR+8
  5904  00002A  CFF3 F00F          	movff	prodl,??_ISR+9
  5905  00002E  CFF4 F010          	movff	prodh,??_ISR+10
  5906  000032  CFF6 F011          	movff	tblptrl,??_ISR+11
  5907  000036  CFF7 F012          	movff	tblptrh,??_ISR+12
  5908  00003A  CFF8 F013          	movff	tblptru,??_ISR+13
  5909  00003E  CFF5 F014          	movff	tablat,??_ISR+14
  5910                           
  5911                           ;main.c: 46: if (PIE1bits.TMR1IE && PIR1bits.TMR1IF) {
  5912  000042  B09D               	btfsc	3997,0,c	;volatile
  5913  000044  A09E               	btfss	3998,0,c	;volatile
  5914  000046  D001               	goto	i2l79
  5915                           
  5916                           ;main.c: 47: PIR1bits.TMR1IF = 0;
  5917  000048  909E               	bcf	3998,0,c	;volatile
  5918  00004A                     i2l79:
  5919                           
  5920                           ;main.c: 48: }
  5921                           ;main.c: 49: if (PIE2bits.TMR3IE && PIR2bits.TMR3IF) {
  5922  00004A  B2A0               	btfsc	4000,1,c	;volatile
  5923  00004C  A2A1               	btfss	4001,1,c	;volatile
  5924  00004E  D030               	goto	i2l2755
  5925                           
  5926                           ;main.c: 50: PIR2bits.TMR3IF = 0;
  5927  000050  92A1               	bcf	4001,1,c	;volatile
  5928                           
  5929                           ;main.c: 51: LATAbits.LATA0 = !LATAbits.LATA0;
  5930  000052  B089               	btfsc	3977,0,c	;volatile
  5931  000054  D003               	goto	i2u270_40
  5932  000056  6A06               	clrf	??_ISR& (0+255),c
  5933  000058  2A06               	incf	??_ISR& (0+255),f,c
  5934  00005A  D001               	goto	i2u271_48
  5935  00005C                     i2u270_40:
  5936  00005C  6A06               	clrf	??_ISR& (0+255),c
  5937  00005E                     i2u271_48:
  5938  00005E  5089               	movf	3977,w,c	;volatile
  5939  000060  1806               	xorwf	??_ISR,w,c
  5940  000062  0BFE               	andlw	-2
  5941  000064  1806               	xorwf	??_ISR,w,c
  5942  000066  6E89               	movwf	3977,c	;volatile
  5943                           
  5944                           ;main.c: 52: button_timer_interrupt(&mode, !PORTBbits.RB0);
  5945  000068  0E46               	movlw	low _mode
  5946  00006A  6E01               	movwf	button_timer_interrupt@bt,c
  5947  00006C  0E00               	movlw	high _mode
  5948  00006E  6E02               	movwf	button_timer_interrupt@bt+1,c
  5949  000070  B081               	btfsc	3969,0,c	;volatile
  5950  000072  D002               	goto	i2u272_40
  5951  000074  0E01               	movlw	1
  5952  000076  D001               	goto	i2u273_40
  5953  000078                     i2u272_40:
  5954  000078  0E00               	movlw	0
  5955  00007A                     i2u273_40:
  5956  00007A  6E03               	movwf	button_timer_interrupt@sw_value,c
  5957  00007C  ECC3  F009         	call	_button_timer_interrupt	;wreg free
  5958                           
  5959                           ;main.c: 53: button_timer_interrupt(&inc, !PORTBbits.RB1);
  5960  000080  0E42               	movlw	low _inc
  5961  000082  6E01               	movwf	button_timer_interrupt@bt,c
  5962  000084  0E00               	movlw	high _inc
  5963  000086  6E02               	movwf	button_timer_interrupt@bt+1,c
  5964  000088  B281               	btfsc	3969,1,c	;volatile
  5965  00008A  D002               	goto	i2u274_40
  5966  00008C  0E01               	movlw	1
  5967  00008E  D001               	goto	i2u275_40
  5968  000090                     i2u274_40:
  5969  000090  0E00               	movlw	0
  5970  000092                     i2u275_40:
  5971  000092  6E03               	movwf	button_timer_interrupt@sw_value,c
  5972  000094  ECC3  F009         	call	_button_timer_interrupt	;wreg free
  5973                           
  5974                           ;main.c: 54: button_timer_interrupt(&dec, !PORTBbits.RB2);
  5975  000098  0E3E               	movlw	low _dec
  5976  00009A  6E01               	movwf	button_timer_interrupt@bt,c
  5977  00009C  0E00               	movlw	high _dec
  5978  00009E  6E02               	movwf	button_timer_interrupt@bt+1,c
  5979  0000A0  B481               	btfsc	3969,2,c	;volatile
  5980  0000A2  D002               	goto	i2u276_40
  5981  0000A4  0E01               	movlw	1
  5982  0000A6  D001               	goto	i2u277_40
  5983  0000A8                     i2u276_40:
  5984  0000A8  0E00               	movlw	0
  5985  0000AA                     i2u277_40:
  5986  0000AA  6E03               	movwf	button_timer_interrupt@sw_value,c
  5987  0000AC  ECC3  F009         	call	_button_timer_interrupt	;wreg free
  5988  0000B0                     i2l2755:
  5989                           
  5990                           ;main.c: 55: }
  5991                           ;main.c: 56: if (PIR1bits.RCIF && PIE1bits.RCIE) {
  5992  0000B0  BA9E               	btfsc	3998,5,c	;volatile
  5993  0000B2  AA9D               	btfss	3997,5,c	;volatile
  5994  0000B4  D004               	goto	i2l85
  5995  0000B6                     i2l82:
  5996  0000B6  A89E               	btfss	3998,4,c	;volatile
  5997  0000B8  D7FE               	goto	i2l82
  5998                           
  5999                           ;main.c: 58: TXREG1 = RCREG1;
  6000  0000BA  CFAF FFAE          	movff	4015,4014	;volatile
  6001  0000BE                     i2l85:
  6002  0000BE  C014  FFF5         	movff	??_ISR+14,tablat
  6003  0000C2  C013  FFF8         	movff	??_ISR+13,tblptru
  6004  0000C6  C012  FFF7         	movff	??_ISR+12,tblptrh
  6005  0000CA  C011  FFF6         	movff	??_ISR+11,tblptrl
  6006  0000CE  C010  FFF4         	movff	??_ISR+10,prodh
  6007  0000D2  C00F  FFF3         	movff	??_ISR+9,prodl
  6008  0000D6  C00E  FFDA         	movff	??_ISR+8,fsr2h
  6009  0000DA  C00D  FFD9         	movff	??_ISR+7,fsr2l
  6010  0000DE  C00C  FFE2         	movff	??_ISR+6,fsr1h
  6011  0000E2  C00B  FFE1         	movff	??_ISR+5,fsr1l
  6012  0000E6  C00A  FFEA         	movff	??_ISR+4,fsr0h
  6013  0000EA  C009  FFE9         	movff	??_ISR+3,fsr0l
  6014  0000EE  C008  FFFB         	movff	??_ISR+2,pclatu
  6015  0000F2  C007  FFFA         	movff	??_ISR+1,pclath
  6016  0000F6  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6017  0000F8  0011               	retfie		f
  6018  0000FA                     __end_of_ISR:
  6019                           	opt stack 0
  6020                           pclatu	equ	0xFFB
  6021                           pclath	equ	0xFFA
  6022                           tblptru	equ	0xFF8
  6023                           tblptrh	equ	0xFF7
  6024                           tblptrl	equ	0xFF6
  6025                           tablat	equ	0xFF5
  6026                           prodh	equ	0xFF4
  6027                           prodl	equ	0xFF3
  6028                           intcon	equ	0xFF2
  6029                           intcon2	equ	0xFF1
  6030                           postinc0	equ	0xFEE
  6031                           fsr0h	equ	0xFEA
  6032                           fsr0l	equ	0xFE9
  6033                           wreg	equ	0xFE8
  6034                           fsr1h	equ	0xFE2
  6035                           fsr1l	equ	0xFE1
  6036                           indf2	equ	0xFDF
  6037                           postinc2	equ	0xFDE
  6038                           postdec2	equ	0xFDD
  6039                           fsr2h	equ	0xFDA
  6040                           fsr2l	equ	0xFD9
  6041                           status	equ	0xFD8
  6042                           
  6043 ;; *************** function _button_timer_interrupt *****************
  6044 ;; Defined at:
  6045 ;;		line 3 in file "My_button.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;  bt              2    0[COMRAM] PTR struct button
  6048 ;;		 -> dec(4), inc(4), mode(4), 
  6049 ;;  sw_value        1    2[COMRAM] unsigned char 
  6050 ;; Auto vars:     Size  Location     Type
  6051 ;;		None
  6052 ;; Return value:  Size  Location     Type
  6053 ;;		None               void
  6054 ;; Registers used:
  6055 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6056 ;; Tracked objects:
  6057 ;;		On entry : 0/0
  6058 ;;		On exit  : 0/0
  6059 ;;		Unchanged: 0/0
  6060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6061 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6063 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6064 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6065 ;;Total ram usage:        5 bytes
  6066 ;; Hardware stack levels used:    1
  6067 ;; This function calls:
  6068 ;;		Nothing
  6069 ;; This function is called by:
  6070 ;;		_ISR
  6071 ;; This function uses a non-reentrant model
  6072 ;;
  6073                           
  6074                           	psect	text29
  6075  001386                     __ptext29:
  6076                           	opt stack 0
  6077  001386                     _button_timer_interrupt:
  6078                           	opt stack 23
  6079                           
  6080                           ;My_button.c: 4: if (sw_value) {
  6081                           
  6082                           ;incstack = 0
  6083  001386  5003               	movf	button_timer_interrupt@sw_value,w,c
  6084  001388  B4D8               	btfsc	status,2,c
  6085  00138A  D098               	goto	i2l2431
  6086                           
  6087                           ;My_button.c: 5: if (bt->cnt_sw == 900)bt->flag.long_holding_7 = 1;
  6088  00138C  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6089  001390  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6090  001394  0E84               	movlw	132
  6091  001396  18DE               	xorwf	postinc2,w,c
  6092  001398  E10B               	bnz	i2l286
  6093  00139A  0E03               	movlw	3
  6094  00139C  18DE               	xorwf	postinc2,w,c
  6095  00139E  A4D8               	btfss	status,2,c
  6096  0013A0  D007               	goto	i2l286
  6097  0013A2  EE20 F003          	lfsr	2,3
  6098  0013A6  5001               	movf	button_timer_interrupt@bt,w,c
  6099  0013A8  26D9               	addwf	fsr2l,f,c
  6100  0013AA  5002               	movf	button_timer_interrupt@bt+1,w,c
  6101  0013AC  22DA               	addwfc	fsr2h,f,c
  6102  0013AE  8EDF               	bsf	indf2,7,c
  6103  0013B0                     i2l286:
  6104                           
  6105                           ;My_button.c: 6: if (bt->cnt_sw == 700)bt->flag.long_holding_6 = 1;
  6106  0013B0  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6107  0013B4  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6108  0013B8  0EBC               	movlw	188
  6109  0013BA  18DE               	xorwf	postinc2,w,c
  6110  0013BC  E10B               	bnz	i2l287
  6111  0013BE  0E02               	movlw	2
  6112  0013C0  18DE               	xorwf	postinc2,w,c
  6113  0013C2  A4D8               	btfss	status,2,c
  6114  0013C4  D007               	goto	i2l287
  6115  0013C6  EE20 F003          	lfsr	2,3
  6116  0013CA  5001               	movf	button_timer_interrupt@bt,w,c
  6117  0013CC  26D9               	addwf	fsr2l,f,c
  6118  0013CE  5002               	movf	button_timer_interrupt@bt+1,w,c
  6119  0013D0  22DA               	addwfc	fsr2h,f,c
  6120  0013D2  8CDF               	bsf	indf2,6,c
  6121  0013D4                     i2l287:
  6122                           
  6123                           ;My_button.c: 7: if (bt->cnt_sw == 500)bt->flag.long_holding_5 = 1;
  6124  0013D4  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6125  0013D8  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6126  0013DC  0EF4               	movlw	244
  6127  0013DE  18DE               	xorwf	postinc2,w,c
  6128  0013E0  E10A               	bnz	i2l288
  6129  0013E2  04DE               	decf	postinc2,w,c
  6130  0013E4  A4D8               	btfss	status,2,c
  6131  0013E6  D007               	goto	i2l288
  6132  0013E8  EE20 F003          	lfsr	2,3
  6133  0013EC  5001               	movf	button_timer_interrupt@bt,w,c
  6134  0013EE  26D9               	addwf	fsr2l,f,c
  6135  0013F0  5002               	movf	button_timer_interrupt@bt+1,w,c
  6136  0013F2  22DA               	addwfc	fsr2h,f,c
  6137  0013F4  8ADF               	bsf	indf2,5,c
  6138  0013F6                     i2l288:
  6139                           
  6140                           ;My_button.c: 8: if (bt->cnt_sw == 300)bt->flag.long_holding_4 = 1;
  6141  0013F6  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6142  0013FA  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6143  0013FE  0E2C               	movlw	44
  6144  001400  18DE               	xorwf	postinc2,w,c
  6145  001402  E10A               	bnz	i2l289
  6146  001404  04DE               	decf	postinc2,w,c
  6147  001406  A4D8               	btfss	status,2,c
  6148  001408  D007               	goto	i2l289
  6149  00140A  EE20 F003          	lfsr	2,3
  6150  00140E  5001               	movf	button_timer_interrupt@bt,w,c
  6151  001410  26D9               	addwf	fsr2l,f,c
  6152  001412  5002               	movf	button_timer_interrupt@bt+1,w,c
  6153  001414  22DA               	addwfc	fsr2h,f,c
  6154  001416  88DF               	bsf	indf2,4,c
  6155  001418                     i2l289:
  6156                           
  6157                           ;My_button.c: 9: if (bt->cnt_sw == 150)bt->flag.long_holding_3 = 1;
  6158  001418  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6159  00141C  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6160  001420  0E96               	movlw	150
  6161  001422  18DE               	xorwf	postinc2,w,c
  6162  001424  10DE               	iorwf	postinc2,w,c
  6163  001426  A4D8               	btfss	status,2,c
  6164  001428  D007               	goto	i2l290
  6165  00142A  EE20 F003          	lfsr	2,3
  6166  00142E  5001               	movf	button_timer_interrupt@bt,w,c
  6167  001430  26D9               	addwf	fsr2l,f,c
  6168  001432  5002               	movf	button_timer_interrupt@bt+1,w,c
  6169  001434  22DA               	addwfc	fsr2h,f,c
  6170  001436  86DF               	bsf	indf2,3,c
  6171  001438                     i2l290:
  6172                           
  6173                           ;My_button.c: 10: if (bt->cnt_sw == 60)bt->flag.long_holding_2 = 1;
  6174  001438  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6175  00143C  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6176  001440  0E3C               	movlw	60
  6177  001442  18DE               	xorwf	postinc2,w,c
  6178  001444  10DE               	iorwf	postinc2,w,c
  6179  001446  A4D8               	btfss	status,2,c
  6180  001448  D007               	goto	i2l291
  6181  00144A  EE20 F003          	lfsr	2,3
  6182  00144E  5001               	movf	button_timer_interrupt@bt,w,c
  6183  001450  26D9               	addwf	fsr2l,f,c
  6184  001452  5002               	movf	button_timer_interrupt@bt+1,w,c
  6185  001454  22DA               	addwfc	fsr2h,f,c
  6186  001456  84DF               	bsf	indf2,2,c
  6187  001458                     i2l291:
  6188                           
  6189                           ;My_button.c: 11: if (bt->cnt_sw == 16)bt->flag.long_holding_1 = 1;
  6190  001458  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6191  00145C  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6192  001460  0E10               	movlw	16
  6193  001462  18DE               	xorwf	postinc2,w,c
  6194  001464  10DE               	iorwf	postinc2,w,c
  6195  001466  A4D8               	btfss	status,2,c
  6196  001468  D007               	goto	i2l292
  6197  00146A  EE20 F003          	lfsr	2,3
  6198  00146E  5001               	movf	button_timer_interrupt@bt,w,c
  6199  001470  26D9               	addwf	fsr2l,f,c
  6200  001472  5002               	movf	button_timer_interrupt@bt+1,w,c
  6201  001474  22DA               	addwfc	fsr2h,f,c
  6202  001476  82DF               	bsf	indf2,1,c
  6203  001478                     i2l292:
  6204                           
  6205                           ;My_button.c: 12: if (bt->cnt_sw == 2)bt->flag.pressing = 1;
  6206  001478  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6207  00147C  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6208  001480  0E02               	movlw	2
  6209  001482  18DE               	xorwf	postinc2,w,c
  6210  001484  10DE               	iorwf	postinc2,w,c
  6211  001486  A4D8               	btfss	status,2,c
  6212  001488  D007               	goto	i2l293
  6213  00148A  EE20 F003          	lfsr	2,3
  6214  00148E  5001               	movf	button_timer_interrupt@bt,w,c
  6215  001490  26D9               	addwf	fsr2l,f,c
  6216  001492  5002               	movf	button_timer_interrupt@bt+1,w,c
  6217  001494  22DA               	addwfc	fsr2h,f,c
  6218  001496  80DF               	bsf	indf2,0,c
  6219  001498                     i2l293:
  6220                           
  6221                           ;My_button.c: 13: if (bt->cnt_sw < 900 + 1) bt->cnt_sw++;
  6222  001498  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6223  00149C  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6224  0014A0  0E85               	movlw	133
  6225  0014A2  5CDE               	subwf	postinc2,w,c
  6226  0014A4  0E03               	movlw	3
  6227  0014A6  58DE               	subwfb	postinc2,w,c
  6228  0014A8  B0D8               	btfsc	status,0,c
  6229  0014AA  0012               	return	
  6230  0014AC  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6231  0014B0  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6232  0014B4  2ADE               	incf	postinc2,f,c
  6233  0014B6  0E00               	movlw	0
  6234  0014B8  22DD               	addwfc	postdec2,f,c
  6235                           
  6236                           ;My_button.c: 14: } else {
  6237  0014BA  0012               	return	
  6238  0014BC                     i2l2431:
  6239                           
  6240                           ;My_button.c: 15: if (bt->cnt_sw >= 900)bt->flag.long_hold_7 = 1;
  6241  0014BC  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6242  0014C0  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6243  0014C4  0E84               	movlw	132
  6244  0014C6  5CDE               	subwf	postinc2,w,c
  6245  0014C8  0E03               	movlw	3
  6246  0014CA  58DE               	subwfb	postinc2,w,c
  6247  0014CC  A0D8               	btfss	status,0,c
  6248  0014CE  D008               	goto	i2l2435
  6249  0014D0  EE20 F002          	lfsr	2,2
  6250  0014D4  5001               	movf	button_timer_interrupt@bt,w,c
  6251  0014D6  26D9               	addwf	fsr2l,f,c
  6252  0014D8  5002               	movf	button_timer_interrupt@bt+1,w,c
  6253  0014DA  22DA               	addwfc	fsr2h,f,c
  6254  0014DC  8EDF               	bsf	indf2,7,c
  6255  0014DE  D081               	goto	i2l2463
  6256  0014E0                     i2l2435:
  6257                           
  6258                           ;My_button.c: 16: else if (bt->cnt_sw >= 700)bt->flag.long_hold_6 = 1;
  6259  0014E0  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6260  0014E4  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6261  0014E8  0EBC               	movlw	188
  6262  0014EA  5CDE               	subwf	postinc2,w,c
  6263  0014EC  0E02               	movlw	2
  6264  0014EE  58DE               	subwfb	postinc2,w,c
  6265  0014F0  A0D8               	btfss	status,0,c
  6266  0014F2  D008               	goto	i2l2439
  6267  0014F4  EE20 F002          	lfsr	2,2
  6268  0014F8  5001               	movf	button_timer_interrupt@bt,w,c
  6269  0014FA  26D9               	addwf	fsr2l,f,c
  6270  0014FC  5002               	movf	button_timer_interrupt@bt+1,w,c
  6271  0014FE  22DA               	addwfc	fsr2h,f,c
  6272  001500  8CDF               	bsf	indf2,6,c
  6273  001502  D06F               	goto	i2l2463
  6274  001504                     i2l2439:
  6275                           
  6276                           ;My_button.c: 17: else if (bt->cnt_sw >= 500)bt->flag.long_hold_5 = 1;
  6277  001504  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6278  001508  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6279  00150C  0EF4               	movlw	244
  6280  00150E  5CDE               	subwf	postinc2,w,c
  6281  001510  0E01               	movlw	1
  6282  001512  58DE               	subwfb	postinc2,w,c
  6283  001514  A0D8               	btfss	status,0,c
  6284  001516  D008               	goto	i2l2443
  6285  001518  EE20 F002          	lfsr	2,2
  6286  00151C  5001               	movf	button_timer_interrupt@bt,w,c
  6287  00151E  26D9               	addwf	fsr2l,f,c
  6288  001520  5002               	movf	button_timer_interrupt@bt+1,w,c
  6289  001522  22DA               	addwfc	fsr2h,f,c
  6290  001524  8ADF               	bsf	indf2,5,c
  6291  001526  D05D               	goto	i2l2463
  6292  001528                     i2l2443:
  6293                           
  6294                           ;My_button.c: 18: else if (bt->cnt_sw >= 300)bt->flag.long_hold_4 = 1;
  6295  001528  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6296  00152C  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6297  001530  0E2C               	movlw	44
  6298  001532  5CDE               	subwf	postinc2,w,c
  6299  001534  0E01               	movlw	1
  6300  001536  58DE               	subwfb	postinc2,w,c
  6301  001538  A0D8               	btfss	status,0,c
  6302  00153A  D008               	goto	i2l2447
  6303  00153C  EE20 F002          	lfsr	2,2
  6304  001540  5001               	movf	button_timer_interrupt@bt,w,c
  6305  001542  26D9               	addwf	fsr2l,f,c
  6306  001544  5002               	movf	button_timer_interrupt@bt+1,w,c
  6307  001546  22DA               	addwfc	fsr2h,f,c
  6308  001548  88DF               	bsf	indf2,4,c
  6309  00154A  D04B               	goto	i2l2463
  6310  00154C                     i2l2447:
  6311                           
  6312                           ;My_button.c: 19: else if (bt->cnt_sw >= 150)bt->flag.long_hold_3 = 1;
  6313  00154C  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6314  001550  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6315  001554  0E01               	movlw	1
  6316  001556  50DB               	movf	plusw2,w,c
  6317  001558  E104               	bnz	i2u229_40
  6318  00155A  0E96               	movlw	150
  6319  00155C  5CDE               	subwf	postinc2,w,c
  6320  00155E  A0D8               	btfss	status,0,c
  6321  001560  D008               	goto	i2l2451
  6322  001562                     i2u229_40:
  6323  001562  EE20 F002          	lfsr	2,2
  6324  001566  5001               	movf	button_timer_interrupt@bt,w,c
  6325  001568  26D9               	addwf	fsr2l,f,c
  6326  00156A  5002               	movf	button_timer_interrupt@bt+1,w,c
  6327  00156C  22DA               	addwfc	fsr2h,f,c
  6328  00156E  86DF               	bsf	indf2,3,c
  6329  001570  D038               	goto	i2l2463
  6330  001572                     i2l2451:
  6331                           
  6332                           ;My_button.c: 20: else if (bt->cnt_sw >= 60)bt->flag.long_hold_2 = 1;
  6333  001572  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6334  001576  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6335  00157A  0E01               	movlw	1
  6336  00157C  50DB               	movf	plusw2,w,c
  6337  00157E  E104               	bnz	i2u230_40
  6338  001580  0E3C               	movlw	60
  6339  001582  5CDE               	subwf	postinc2,w,c
  6340  001584  A0D8               	btfss	status,0,c
  6341  001586  D008               	goto	i2l2455
  6342  001588                     i2u230_40:
  6343  001588  EE20 F002          	lfsr	2,2
  6344  00158C  5001               	movf	button_timer_interrupt@bt,w,c
  6345  00158E  26D9               	addwf	fsr2l,f,c
  6346  001590  5002               	movf	button_timer_interrupt@bt+1,w,c
  6347  001592  22DA               	addwfc	fsr2h,f,c
  6348  001594  84DF               	bsf	indf2,2,c
  6349  001596  D025               	goto	i2l2463
  6350  001598                     i2l2455:
  6351                           
  6352                           ;My_button.c: 21: else if (bt->cnt_sw >= 16)bt->flag.long_hold_1 = 1;
  6353  001598  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6354  00159C  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6355  0015A0  0E01               	movlw	1
  6356  0015A2  50DB               	movf	plusw2,w,c
  6357  0015A4  E104               	bnz	i2u231_40
  6358  0015A6  0E10               	movlw	16
  6359  0015A8  5CDE               	subwf	postinc2,w,c
  6360  0015AA  A0D8               	btfss	status,0,c
  6361  0015AC  D008               	goto	i2l2459
  6362  0015AE                     i2u231_40:
  6363  0015AE  EE20 F002          	lfsr	2,2
  6364  0015B2  5001               	movf	button_timer_interrupt@bt,w,c
  6365  0015B4  26D9               	addwf	fsr2l,f,c
  6366  0015B6  5002               	movf	button_timer_interrupt@bt+1,w,c
  6367  0015B8  22DA               	addwfc	fsr2h,f,c
  6368  0015BA  82DF               	bsf	indf2,1,c
  6369  0015BC  D012               	goto	i2l2463
  6370  0015BE                     i2l2459:
  6371                           
  6372                           ;My_button.c: 22: else if (bt->cnt_sw >= 2)bt->flag.press = 1;
  6373  0015BE  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6374  0015C2  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6375  0015C6  0E01               	movlw	1
  6376  0015C8  50DB               	movf	plusw2,w,c
  6377  0015CA  E104               	bnz	i2u232_40
  6378  0015CC  0E02               	movlw	2
  6379  0015CE  5CDE               	subwf	postinc2,w,c
  6380  0015D0  A0D8               	btfss	status,0,c
  6381  0015D2  D007               	goto	i2l2463
  6382  0015D4                     i2u232_40:
  6383  0015D4  EE20 F002          	lfsr	2,2
  6384  0015D8  5001               	movf	button_timer_interrupt@bt,w,c
  6385  0015DA  26D9               	addwf	fsr2l,f,c
  6386  0015DC  5002               	movf	button_timer_interrupt@bt+1,w,c
  6387  0015DE  22DA               	addwfc	fsr2h,f,c
  6388  0015E0  80DF               	bsf	indf2,0,c
  6389  0015E2                     i2l2463:
  6390                           
  6391                           ;My_button.c: 23: bt->cnt_sw = 0;
  6392  0015E2  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6393  0015E6  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6394  0015EA  0E00               	movlw	0
  6395  0015EC  6EDE               	movwf	postinc2,c
  6396  0015EE  0E00               	movlw	0
  6397  0015F0  6EDD               	movwf	postdec2,c
  6398                           
  6399                           ;My_button.c: 24: bt->flags &= 0x00FF;
  6400  0015F2  EE20 F002          	lfsr	2,2
  6401  0015F6  5001               	movf	button_timer_interrupt@bt,w,c
  6402  0015F8  26D9               	addwf	fsr2l,f,c
  6403  0015FA  5002               	movf	button_timer_interrupt@bt+1,w,c
  6404  0015FC  22DA               	addwfc	fsr2h,f,c
  6405  0015FE  0EFF               	movlw	255
  6406  001600  16DE               	andwf	postinc2,f,c
  6407  001602  0E00               	movlw	0
  6408  001604  16DD               	andwf	postdec2,f,c
  6409  001606  0012               	return	
  6410  001608                     __end_of_button_timer_interrupt:
  6411                           	opt stack 0
  6412                           pclatu	equ	0xFFB
  6413                           pclath	equ	0xFFA
  6414                           tblptru	equ	0xFF8
  6415                           tblptrh	equ	0xFF7
  6416                           tblptrl	equ	0xFF6
  6417                           tablat	equ	0xFF5
  6418                           prodh	equ	0xFF4
  6419                           prodl	equ	0xFF3
  6420                           intcon	equ	0xFF2
  6421                           intcon2	equ	0xFF1
  6422                           postinc0	equ	0xFEE
  6423                           fsr0h	equ	0xFEA
  6424                           fsr0l	equ	0xFE9
  6425                           wreg	equ	0xFE8
  6426                           fsr1h	equ	0xFE2
  6427                           fsr1l	equ	0xFE1
  6428                           indf2	equ	0xFDF
  6429                           postinc2	equ	0xFDE
  6430                           postdec2	equ	0xFDD
  6431                           plusw2	equ	0xFDB
  6432                           fsr2h	equ	0xFDA
  6433                           fsr2l	equ	0xFD9
  6434                           status	equ	0xFD8
  6435                           pclatu	equ	0xFFB
  6436                           pclath	equ	0xFFA
  6437                           tblptru	equ	0xFF8
  6438                           tblptrh	equ	0xFF7
  6439                           tblptrl	equ	0xFF6
  6440                           tablat	equ	0xFF5
  6441                           prodh	equ	0xFF4
  6442                           prodl	equ	0xFF3
  6443                           intcon	equ	0xFF2
  6444                           intcon2	equ	0xFF1
  6445                           postinc0	equ	0xFEE
  6446                           fsr0h	equ	0xFEA
  6447                           fsr0l	equ	0xFE9
  6448                           wreg	equ	0xFE8
  6449                           fsr1h	equ	0xFE2
  6450                           fsr1l	equ	0xFE1
  6451                           indf2	equ	0xFDF
  6452                           postinc2	equ	0xFDE
  6453                           postdec2	equ	0xFDD
  6454                           plusw2	equ	0xFDB
  6455                           fsr2h	equ	0xFDA
  6456                           fsr2l	equ	0xFD9
  6457                           status	equ	0xFD8
  6458                           
  6459                           	psect	rparam
  6460  0000                     pclatu	equ	0xFFB
  6461                           pclath	equ	0xFFA
  6462                           tblptru	equ	0xFF8
  6463                           tblptrh	equ	0xFF7
  6464                           tblptrl	equ	0xFF6
  6465                           tablat	equ	0xFF5
  6466                           prodh	equ	0xFF4
  6467                           prodl	equ	0xFF3
  6468                           intcon	equ	0xFF2
  6469                           intcon2	equ	0xFF1
  6470                           postinc0	equ	0xFEE
  6471                           fsr0h	equ	0xFEA
  6472                           fsr0l	equ	0xFE9
  6473                           wreg	equ	0xFE8
  6474                           fsr1h	equ	0xFE2
  6475                           fsr1l	equ	0xFE1
  6476                           indf2	equ	0xFDF
  6477                           postinc2	equ	0xFDE
  6478                           postdec2	equ	0xFDD
  6479                           plusw2	equ	0xFDB
  6480                           fsr2h	equ	0xFDA
  6481                           fsr2l	equ	0xFD9
  6482                           status	equ	0xFD8
  6483                           
  6484                           	psect	temp
  6485  00004B                     btemp:
  6486                           	opt stack 0
  6487  00004B                     	ds	1
  6488  0000                     int$flags	set	btemp
  6489                           pclatu	equ	0xFFB
  6490                           pclath	equ	0xFFA
  6491                           tblptru	equ	0xFF8
  6492                           tblptrh	equ	0xFF7
  6493                           tblptrl	equ	0xFF6
  6494                           tablat	equ	0xFF5
  6495                           prodh	equ	0xFF4
  6496                           prodl	equ	0xFF3
  6497                           intcon	equ	0xFF2
  6498                           intcon2	equ	0xFF1
  6499                           postinc0	equ	0xFEE
  6500                           fsr0h	equ	0xFEA
  6501                           fsr0l	equ	0xFE9
  6502                           wreg	equ	0xFE8
  6503                           fsr1h	equ	0xFE2
  6504                           fsr1l	equ	0xFE1
  6505                           indf2	equ	0xFDF
  6506                           postinc2	equ	0xFDE
  6507                           postdec2	equ	0xFDD
  6508                           plusw2	equ	0xFDB
  6509                           fsr2h	equ	0xFDA
  6510                           fsr2l	equ	0xFD9
  6511                           status	equ	0xFD8


Data Sizes:
    Strings     66
    Constant    38
    Data        1
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      74
    BANK0           160     59      74
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_20(CODE[7]), weekday_3char(CODE[28]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 37
		 -> STR_2(CODE[5]), STR_1(CODE[37]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 30
		 -> display_dec@s(COMRAM[4]), main@str(BANK0[30]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    button_timer_interrupt@bt	PTR struct button size(2) Largest target is 4
		 -> dec(COMRAM[4]), inc(COMRAM[4]), mode(COMRAM[4]), 

    RTCC_adjust_time_button@cnt_dec	PTR struct button size(2) Largest target is 4
		 -> dec(COMRAM[4]), 

    RTCC_adjust_time_button@cnt_inc	PTR struct button size(2) Largest target is 4
		 -> inc(COMRAM[4]), 

    RTCC_adjust_time_button@tm	PTR struct . size(2) Largest target is 14
		 -> now(BANK0[14]), 

    RTCC_adjust_time_button@mode	PTR struct button size(2) Largest target is 4
		 -> mode(COMRAM[4]), 

    RTCC_adjust_time_dec@tm	PTR struct . size(2) Largest target is 14
		 -> now(BANK0[14]), 

    RTCC_adjust_time_inc@tm	PTR struct . size(2) Largest target is 14
		 -> now(BANK0[14]), 

    RTCC_adjust_time_cursor@tm	PTR struct . size(2) Largest target is 14
		 -> now(BANK0[14]), 

    RTCC_adjust_time_toggle@tm	PTR struct . size(2) Largest target is 14
		 -> now(BANK0[14]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 0

    sp__strcat	PTR unsigned char  size(2) Largest target is 0

    RTCC_from_epoch@tm	PTR struct . size(2) Largest target is 14
		 -> now(BANK0[14]), 

    RTCC_from_RTCC@tm	PTR struct . size(2) Largest target is 14
		 -> now(BANK0[14]), 

    caltime_to_epoch@tm	PTR struct . size(2) Largest target is 14
		 -> now(BANK0[14]), 

    epoch_to_caltime@tm	PTR struct . size(2) Largest target is 14
		 -> now(BANK0[14]), 

    caltime_to_RTCC@tm	PTR struct . size(2) Largest target is 14
		 -> now(BANK0[14]), 

    RTCC_to_caltime@tm	PTR struct . size(2) Largest target is 14
		 -> now(BANK0[14]), 

    get_quot_rem@quot	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_to_caltime@num(BANK0[4]), 


Critical Paths under _main in COMRAM

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _RTCC_loop->_RTCC_from_RTCC
    _RTCC_from_epoch->_epoch_to_caltime
    _epoch_to_caltime->_get_quot_rem
    _get_quot_rem->___lmul
    _caltime_to_RTCC->_d_to_x
    _d_to_x->___awdiv
    _RTCC_from_RTCC->_caltime_to_epoch
    _caltime_to_epoch->___lmul
    _month_length->___awmod
    ___lmul->___lldiv
    _RTCC_to_caltime->_x_to_d

Critical Paths under _ISR in COMRAM

    _ISR->_button_timer_interrupt

Critical Paths under _main in BANK0

    _main->_RTCC_adjust_time_button
    _RTCC_adjust_time_button->_RTCC_adjust_time_dec
    _RTCC_adjust_time_button->_RTCC_adjust_time_inc
    _RTCC_adjust_time_inc->_RTCC_from_epoch
    _RTCC_adjust_time_dec->_RTCC_from_epoch
    _RTCC_from_epoch->_epoch_to_caltime
    _RTCC_from_RTCC->_caltime_to_epoch

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                31    31      0   52191
                                             28 BANK0     31    31      0
            _RTCC_adjust_time_button
                          _RTCC_loop
                          _main_init
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             39    21     18    3720
                                             32 COMRAM    22     4     18
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             20 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     470
                                             20 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     470
                                             27 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     479
                                             20 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _main_init                                            0     0      0       0
                          _RTCC_init
 ---------------------------------------------------------------------------------
 (2) _RTCC_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTCC_loop                                            0     0      0    6206
                     _RTCC_from_RTCC
 ---------------------------------------------------------------------------------
 (1) _RTCC_adjust_time_button                              8     0      8   42044
                                             20 BANK0      8     0      8
            _RTCC_adjust_time_cursor
               _RTCC_adjust_time_dec
               _RTCC_adjust_time_inc
            _RTCC_adjust_time_toggle
 ---------------------------------------------------------------------------------
 (2) _RTCC_adjust_time_toggle                              2     0      2     169
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _RTCC_adjust_time_inc                                 8     6      2   20257
                                             12 BANK0      8     6      2
                     _RTCC_from_RTCC
                    _RTCC_from_epoch
                             ___lmul
                       _month_length
 ---------------------------------------------------------------------------------
 (2) _RTCC_adjust_time_dec                                 8     6      2   20257
                                             12 BANK0      8     6      2
                     _RTCC_from_RTCC
                    _RTCC_from_epoch
                             ___lmul
                       _month_length
 ---------------------------------------------------------------------------------
 (3) _RTCC_from_epoch                                      2     0      2    8708
                                             10 BANK0      2     0      2
                    _caltime_to_RTCC
                   _epoch_to_caltime
 ---------------------------------------------------------------------------------
 (4) _epoch_to_caltime                                    14    12      2    7208
                                             53 COMRAM     4     2      2
                                              0 BANK0     10    10      0
                       _get_quot_rem
                       _month_length
 ---------------------------------------------------------------------------------
 (5) _get_quot_rem                                         8     4      4    3710
                                             45 COMRAM     8     4      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             13     5      8     479
                                             20 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) _caltime_to_RTCC                                      2     0      2    1200
                                             29 COMRAM     2     0      2
                             _d_to_x
 ---------------------------------------------------------------------------------
 (5) _d_to_x                                               1     1      0     745
                                             28 COMRAM     1     1      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     683
                                             20 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _RTCC_from_RTCC                                       2     0      2    6206
                                             51 COMRAM     2     0      2
                    _RTCC_to_caltime
                   _caltime_to_epoch
 ---------------------------------------------------------------------------------
 (3) _caltime_to_epoch                                    13    11      2    5148
                                             45 COMRAM     6     4      2
                                              0 BANK0      7     7      0
                             ___lmul
                       _month_length
 ---------------------------------------------------------------------------------
 (4) _month_length                                         6     5      1    2285
                                             26 COMRAM     6     5      1
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     909
                                             20 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8    2090
                                             33 COMRAM    12     4      8
                            ___lldiv (ARG)
                       _month_length (ARG)
 ---------------------------------------------------------------------------------
 (3) _RTCC_to_caltime                                      3     1      2     401
                                             22 COMRAM     3     1      2
                             _x_to_d
 ---------------------------------------------------------------------------------
 (4) _x_to_d                                               2     2      0      62
                                             20 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _RTCC_adjust_time_cursor                              2     0      2     389
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 15    15      0    1432
                                              5 COMRAM    15    15      0
             _button_timer_interrupt
 ---------------------------------------------------------------------------------
 (8) _button_timer_interrupt                               5     2      3    1432
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _RTCC_adjust_time_button
     _RTCC_adjust_time_cursor
     _RTCC_adjust_time_dec
       _RTCC_from_RTCC
         _RTCC_to_caltime
           _x_to_d
         _caltime_to_epoch
           ___lmul
             ___lldiv (ARG)
             _month_length (ARG)
               ___awmod
           _month_length
             ___awmod
       _RTCC_from_epoch
         _caltime_to_RTCC
           _d_to_x
             ___awdiv
         _epoch_to_caltime
           _get_quot_rem
             ___lldiv
             ___lmul
               ___lldiv (ARG)
               _month_length (ARG)
                 ___awmod
           _month_length
             ___awmod
       ___lmul
         ___lldiv (ARG)
         _month_length (ARG)
           ___awmod
       _month_length
         ___awmod
     _RTCC_adjust_time_inc
       _RTCC_from_RTCC
         _RTCC_to_caltime
           _x_to_d
         _caltime_to_epoch
           ___lmul
             ___lldiv (ARG)
             _month_length (ARG)
               ___awmod
           _month_length
             ___awmod
       _RTCC_from_epoch
         _caltime_to_RTCC
           _d_to_x
             ___awdiv
         _epoch_to_caltime
           _get_quot_rem
             ___lldiv
             ___lmul
               ___lldiv (ARG)
               _month_length (ARG)
                 ___awmod
           _month_length
             ___awmod
       ___lmul
         ___lldiv (ARG)
         _month_length (ARG)
           ___awmod
       _month_length
         ___awmod
     _RTCC_adjust_time_toggle
   _RTCC_loop
     _RTCC_from_RTCC
       _RTCC_to_caltime
         _x_to_d
       _caltime_to_epoch
         ___lmul
           ___lldiv (ARG)
           _month_length (ARG)
             ___awmod
         _month_length
           ___awmod
   _main_init
     _RTCC_init
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _ISR (ROOT)
   _button_timer_interrupt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EAF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3B      4A       5       46.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      4A       1       78.7%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      94       6        0.0%
DATA                 0      0      94       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Fri Oct 09 23:13:21 2015

                    ___awdiv@sign 001A               ___wmul@multiplicand 0017  
               ??_RTCC_from_epoch 003A                      __CFG_CP0$OFF 000000  
                             l101 2174                               l162 21AC  
                             l156 2274                               l253 18BA  
                             l238 163A                               l175 1DEE  
                             l278 2740                               l730 2558  
                             l783 26F4                               l793 2736  
                             _ISR 0008                     ?_get_quot_rem 002E  
              caltime_to_epoch@tm 002E                               _dec 003E  
                             _inc 0042                               _now 009C  
                    ___awmod@sign 001A                               prod 000FF3  
                             wreg 000FE8                        _TXSTA1bits 000FAD  
     RTCC_adjust_time_button@mode 0076           _RTCC_adjust_time_button 1ED8  
         _RTCC_adjust_time_cursor 1FF8           _RTCC_adjust_time_toggle 27AA  
                            ?_ISR 0001                              l2211 27F4  
                            l2231 201A                              l3111 1B9E  
                            l3105 1B7C                              l3201 19B0  
                            l2225 27CE                              l2251 20C4  
                            l2243 2080                              l2235 203C  
                            l3115 1BF0                              l3107 1B80  
                            l3221 1AA4                              l3205 19D8  
                            l2247 20A2                              l2239 205E  
                            l3215 1A3C                              l3223 1ABC  
                            l3151 1730                              l3143 168E  
                            l3311 1F4C                              l3073 1E58  
                            l3217 1A44                              l3075 1E5C  
                            l3227 1AF0                              l3171 1824  
                            l3155 1758                              l3147 16BA  
                            l3139 1662                              l3093 1B22  
                            l3165 17BC                              l3173 183C  
                            l3325 1FC4                              l3421 11FA  
                            l3341 0FA6                              l3333 0F78  
                            l3095 1B28                              l3079 1E64  
                            l3167 17C4                              l3159 1762  
                            l3319 1F92                              l3255 26C2  
                            l3239 284A                              l3431 124E  
                            l3407 11B8                              l3351 0FE6  
                            l3193 190E                              l3177 1870  
                            l3257 26CA                              l3441 127A  
                            l3433 1258                              l3409 11BE  
                            l3345 0FAE                              l3099 1B32  
                            l3267 26EA                              l3259 26CE  
                            l3283 272C                              l3275 270C  
                            l3451 12AC                              l3427 121A  
                            l3371 1094                              l3339 0F94  
                            l2901 24AA                              l3197 193A  
                            l3189 18E2                              l3277 2714  
                            l3509 2192                              l3279 2718  
                            l3471 134E                              l3463 12EC  
                            l3391 113C                              l3383 1100  
                            l3367 1082                              l3359 1050  
                            l2913 24D0                              l3465 12F2  
                            l3457 12D0                              l3449 12A0  
                            l3385 1118                              l3377 10E4  
                            l3369 108E                              l3473 135A  
                            l3379 10F0                              l3475 1378  
                            l3395 1154                              l2941 2620  
                            l2933 2606                              l2917 24DE  
                            l2909 24C6                              l3397 1188  
                            l3493 20DC                              l2873 267A  
                            l2953 264C                              l2945 2634  
                            l2937 2614                              l2929 25FA  
                            l2939 261C                              l2891 2488  
                            l2963 250A                              l2869 2666  
                            l2949 263E                              l2885 2478  
                            l2965 2516                              l2975 254A  
                            l2967 251A                              l2897 249E  
                            l2995 238C                              l2899 24A6  
              __CFG_WPFP$PAGE_127 000000                              STR_1 0F27  
                            STR_2 0F5C                              STR_5 0F65  
                            STR_8 0F67                              u3100 2370  
                            u3120 2382                              u3130 2384  
                            u3140 23C0                              u3150 23C2  
                            u3118 2372                              u3080 234A  
                            u3090 234C                              i2l82 00B6  
                            i2l85 00BE                              i2l79 004A  
                            _main 20D6                              _mode 0046  
        button_timer_interrupt@bt 0001                              fsr0h 000FEA  
                            fsr1h 000FE2                              fsr0l 000FE9  
                            fsr2h 000FDA                              fsr1l 000FE1  
                            indf2 000FDF                              fsr2l 000FD9  
                            btemp 004B            __CFG_DSWDTOSC$T1OSCREF 000000  
                            pclat 000FFA                              prodh 000FF4  
                            prodl 000FF3                              start 00FA  
                   __CFG_IESO$OFF 000000        RTCC_adjust_time_dec@i_1776 0072  
                    ___param_bank 000010                             ??_ISR 0006  
               ??_RTCC_to_caltime 0019                     __CFG_PLLDIV$2 000000  
                    _BAUDCON1bits 000F7E                             ?_main 0001  
                  ??_get_quot_rem 0032                   __end_of___awdiv 24E8  
                           STR_10 0F63                             STR_20 0F55  
                           STR_14 0F61                             STR_16 0F4C  
                 __end_of___awmod 2656                   __end_of___lldiv 256A  
                 ___awdiv@divisor 0017                             _LATB2 007C52  
                 __end_of___lwdiv 26FE                   __end_of___lwmod 2740  
                           i2l290 1438                             i2l291 1458  
                           i2l292 1478                             i2l293 1498  
                           i2l286 13B0                             i2l287 13D4  
                           i2l288 13F6                             i2l289 1418  
                 ___awdiv@counter 0019                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
             ___lmul@multiplicand 0026                    __CFG_FCMEN$OFF 000000  
            caltime_to_epoch@year 0060                   __end_of_dpowers 0F0B  
                 __end_of_isdigit 2852                __size_of_RTCC_init 0030  
              __size_of_RTCC_loop 0036                             main@i 009A  
       RTCC_adjust_time_button@tm 0074         RTCC_adjust_time_cursor@tm 0015  
                           tablat 000FF5                             plusw2 000FDB  
                           status 000FD8                   __end_of_sprintf 1386  
               month_length@month 001B                   __initialization 2776  
                    __end_of_main 21AC                  RTCC_from_RTCC@tm 0034  
      RTCC_adjust_time_inc@i_1745 0072         RTCC_adjust_time_toggle@tm 0015  
                          ??_main 003A                     __activetblptr 000003  
       ??_RTCC_adjust_time_button 003A         ??_RTCC_adjust_time_cursor 0017  
       ??_RTCC_adjust_time_toggle 0017                            _EECON2 000FA7  
                          _ANCON0 000F48                            _ANCON1 000F49  
                ___awdiv@dividend 0015                            i2l2431 14BC  
                          i2l2451 1572                            i2l2443 1528  
                          i2l2435 14E0                    __CFG_WDTEN$OFF 000000  
                          i2l2455 1598                            i2l2447 154C  
                          i2l2439 1504                            i2l2463 15E2  
                          i2l2459 15BE                            i2l2755 00B0  
                          _RCREG1 000FAF                            _RTCCAL 000F3E  
                          _SPBRG1 000FB0                    __CFG_WPCFG$OFF 000000  
                          _TXREG1 000FAE                    __CFG_WPDIS$OFF 000000  
              epoch_to_caltime@tm 0036                    __CFG_XINST$OFF 000000  
               ?_epoch_to_caltime 0036             caltime_to_epoch@epoch 0062  
           caltime_to_epoch@month 0066                            ___lmul 2656  
                 _caltime_to_RTCC 21AC                            ___wmul 280E  
              ??_epoch_to_caltime 0038                         ??___awdiv 0019  
                       ??___awmod 0019      __end_of_RTCC_adjust_time_dec 1B08  
    __end_of_RTCC_adjust_time_inc 1888                            _d_to_x 2852  
                       ??___lldiv 001D                 __end_of_RTCC_init 280E  
                       ??___lwdiv 0019                 __end_of_RTCC_loop 2776  
                       ??___lwmod 0020                            clear_0 277C  
                          clear_1 2788                   __CFG_CLKOEC$OFF 000000  
                ___awdiv@quotient 001B                   ___awmod@divisor 0017  
                 ___awmod@counter 0019                            _x_to_d 28A4  
       __size_of_caltime_to_epoch 0222                      __pdataCOMRAM 004A  
                       ??_isdigit 0015                      __mediumconst 0000  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                         ??_sprintf 0033  
  RTCC_adjust_time_button@cnt_dec 007A              __CFG_LS48MHZ$SYS48X8 000000  
  RTCC_adjust_time_button@cnt_inc 0078                        __accesstop 0060  
         __end_of__initialization 27A0              __end_of_get_quot_rem 2464  
                   ___rparam_used 000001                   _RTCC_from_epoch 2870  
            __CFG_WPEND$PAGE_WPFP 000000                    __pcstackCOMRAM 0001  
                 __CFG_DSWDTPS$G2 000000        caltime_to_epoch@month_1564 0061  
          RTCC_adjust_time_dec@tm 006C                      sprintf@width 006B  
          RTCC_adjust_time_inc@tm 006C                __size_of_main_init 007C  
                      __pbssBANK0 009B           __end_of_caltime_to_RTCC 2274  
                 _RTCC_to_caltime 2274             __end_of_weekday_3char 0F27  
                         ?___lmul 0022                           ?___wmul 0015  
                         ?_d_to_x 0001                    ___lmul@product 002A  
                         ?_x_to_d 0001                __CFG_OSC$INTOSCPLL 000000  
                 __CFG_WDTPS$1024 000000                           _SPBRGH1 000F7F  
                         _RTCVALH 000F3B                           _RTCVALL 000F3A  
         __end_of_RTCC_from_epoch 288A              _RTCC_adjust_time_dec 1888  
            _RTCC_adjust_time_inc 1608                  __CFG_CFGPLLEN$ON 000000  
        ??_button_timer_interrupt 0004                     ?_month_length 001B  
             epoch_to_caltime@day 0062               epoch_to_caltime@num 0066  
               RTCC_from_epoch@tm 006A                           __Hparam 0000  
                         __Lparam 0000                           ___awdiv 2464  
                 __size_of___lmul 0056                           ___awmod 25E6  
                         ___lldiv 24E8                   __size_of___wmul 0026  
                         ___lwdiv 26AC                           ___lwmod 26FE  
                 __size_of_d_to_x 001E                      __psmallconst 0F00  
                 __CFG_STVREN$OFF 000000                 __end_of_main_init 25E6  
     epoch_to_caltime@month_cache 004A                           __pcinit 2776  
                         __ramtop 0F00                           __ptext0 20D6  
                         __ptext1 0F6A                           __ptext2 2834  
                         __ptext3 280E                           __ptext4 26FE  
                         __ptext5 26AC                           __ptext6 256A  
                         __ptext7 27DE                           __ptext8 2740  
                         __ptext9 1ED8                   __size_of_x_to_d 0018  
                _time_change_flag 009B                  _caltime_to_epoch 1B08  
                    __size_of_ISR 00F2                         _T1CONbits 000FCD  
                         _dpowers 0F01           __size_of_RTCC_from_RTCC 001A  
                         _isdigit 2834                         _T3CONbits 000F79  
                ___awmod@dividend 0015                           _sprintf 0F6A  
         __end_of_RTCC_to_caltime 2322                           main@str 007C  
           ?_RTCC_adjust_time_dec 006C             ?_RTCC_adjust_time_inc 006C  
           __size_of_get_quot_rem 009C              end_of_initialization 27A0  
                  ??_month_length 001C                  ?_caltime_to_RTCC 001E  
                 ___lldiv@divisor 0019                   ___lldiv@counter 0021  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc2 000FDE                         _PORTBbits 000F81  
                __CFG_DSBOREN$OFF 000000                         _RTCC_init 27DE  
                       _RTCC_loop 2740         epoch_to_caltime@day_cache 003A  
                    _get_quot_rem 23C8         __size_of_epoch_to_caltime 01AE  
                __CFG_CPUDIV$OSC1 000000                 __CFG_SOSCSEL$HIGH 000000  
                ?_RTCC_from_epoch 006A   __size_of_button_timer_interrupt 0282  
                __CFG_IOL1WAY$OFF 000000               __CFG_MSSP7B_EN$MSK7 000000  
                  __end_of___lmul 26AC          ?_RTCC_adjust_time_button 0074  
        ?_RTCC_adjust_time_cursor 0015                    __end_of___wmul 2834  
                  __end_of_d_to_x 2870                     __pidataCOMRAM 28BC  
        ?_RTCC_adjust_time_toggle 0015                        ?_RTCC_init 0001  
                      ?_RTCC_loop 0001                  __CFG_DSWDTEN$OFF 000000  
                  __end_of_x_to_d 28BC             epoch_to_caltime@month 0065  
             start_initialization 2776                  month_length@year 0020  
                     __end_of_ISR 00FA            ??_RTCC_adjust_time_dec 006E  
          ??_RTCC_adjust_time_inc 006E                  ?_RTCC_to_caltime 0017  
                        ??___lmul 002A                          ??___wmul 0019  
                        ??_d_to_x 001D                 __CFG_ADCSEL$BIT12 000000  
          _button_timer_interrupt 1386                          ??_x_to_d 0015  
            __end_of_month_length 23C8                    _RTCC_from_RTCC 288A  
                     __pbssCOMRAM 003A               RTCC_to_caltime@dumy 0019  
                   __pcstackBANK0 0060                      _isdigit$2225 0016  
                     sprintf@flag 0069             RTCC_adjust_time_dec@i 0073  
                     sprintf@prec 0060             RTCC_adjust_time_inc@i 0073  
        __end_of_caltime_to_epoch 1D2A                  ___lwdiv@dividend 0015  
 __end_of_RTCC_adjust_time_button 1FF8   __end_of_RTCC_adjust_time_cursor 20D6  
                       __pintcode 0008   __end_of_RTCC_adjust_time_toggle 27DE  
                        ?___awdiv 0015                          ?___awmod 0015  
                        ?___lldiv 0015                          ?___lwdiv 0015  
                        ?___lwmod 001C            __end_of_RTCC_from_RTCC 28A4  
                     ??_RTCC_init 0015                       ??_RTCC_loop 0036  
                     __smallconst 0F00                         _main_init 256A  
                        ?_isdigit 0001                  _epoch_to_caltime 1D2A  
            __CFG_RTCOSC$T1OSCREF 000000                       _PADCFG1bits 000F3C  
                ___lwdiv@quotient 001A                          ?_sprintf 0021  
                       d_to_x@dec 001D                    ___wmul@product 0019  
                        _LATAbits 000F89                          _IPR1bits 000F9F  
                        _IPR2bits 000FA2                          _PIE1bits 000F9D  
                        _PIE2bits 000FA0                          i2u230_40 1588  
                        i2u231_40 15AE                          i2u232_40 15D4  
                        i2u229_40 1562                          i2u270_40 005C  
                        i2u272_40 0078                          i2u271_48 005E  
                        i2u273_40 007A                          _PIR1bits 000F9E  
                        i2u274_40 0090                          i2u275_40 0092  
                        _PIR2bits 000FA1                          i2u276_40 00A8  
                        i2u277_40 00AA        epoch_to_caltime@year_cache 003D  
                 ?_RTCC_from_RTCC 0034                 ___wmul@multiplier 0015  
  button_timer_interrupt@sw_value 0003                        ?_main_init 0001  
               ___lmul@multiplier 0022                       _INTCON2bits 000FF1  
            epoch_to_caltime@year 0064                          __Hrparam 0000  
                        __Lrparam 0000                     _weekday_3char 0F0B  
           __size_of_month_length 00A6          __size_of_caltime_to_RTCC 00C8  
                __size_of___awdiv 0084                  __size_of___awmod 0070  
                __size_of___lldiv 0082                  __size_of___lwdiv 0052  
                __size_of___lwmod 0042                        sprintf@len 0067  
                      sprintf@val 0065                  __size_of_isdigit 001E  
                 ___lwdiv@divisor 0017                   ___lwdiv@counter 0019  
                        __ptext10 27AA                          __ptext11 1608  
                        __ptext20 288A                          __ptext12 1888  
                        __ptext21 1B08                          __ptext13 2870  
                        __ptext22 2322                          __ptext14 1D2A  
                        __ptext23 25E6                          __ptext15 23C8  
                        __ptext24 2656                          __ptext16 24E8  
                        __ptext25 2274                          __ptext17 21AC  
                        __ptext26 28A4                          __ptext18 2852  
                        __ptext27 1FF8                          __ptext19 2464  
                        __ptext29 1386  __size_of_RTCC_adjust_time_button 0120  
__size_of_RTCC_adjust_time_cursor 00DE  __size_of_RTCC_adjust_time_toggle 0034  
                __size_of_sprintf 041C             RTCC_loop@prev_halfsec 003C  
                   __size_of_main 00D6                      _month_length 2322  
        __size_of_RTCC_from_epoch 001A           ?_button_timer_interrupt 0001  
                        int$flags 004B                         x_to_d@hex 0016  
                     ??_main_init 0015                       _OSCTUNEbits 000F9B  
                      _INTCONbits 000FF2                          isdigit@c 0017  
                get_quot_rem@quot 002E                 RTCC_to_caltime@tm 0017  
   __size_of_RTCC_adjust_time_dec 0280     __size_of_RTCC_adjust_time_inc 0280  
                        intlevel2 0000                         sprintf@ap 0061  
                       sprintf@cp 0063                         sprintf@sp 0021  
                ___lwmod@dividend 001C                  ___lldiv@dividend 0015  
                      _RCSTA1bits 000FAC                 ?_caltime_to_epoch 002E  
        __end_of_epoch_to_caltime 1ED8          __size_of_RTCC_to_caltime 00AE  
                      _OSCCONbits 000FD3    __end_of_button_timer_interrupt 1608  
              ??_caltime_to_epoch 0030                   get_quot_rem@div 0030  
                 get_quot_rem@num 0032                        _RTCCFGbits 000F3F  
                        sprintf@c 006A                          sprintf@f 0023  
                ___lldiv@quotient 001D                   ___lwmod@divisor 001E  
               caltime_to_RTCC@tm 001E                 ??_caltime_to_RTCC 0020  
                 ___lwmod@counter 0020   epoch_to_caltime@day_since_epoch 0060  
                ??_RTCC_from_RTCC 0036  
