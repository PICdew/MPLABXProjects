

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri Jan 09 16:26:16 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	swtext1,local,class=CONST,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     	;# 
    38  0001                     	;# 
    39  0002                     	;# 
    40  0003                     	;# 
    41  0004                     	;# 
    42  0005                     	;# 
    43  0006                     	;# 
    44  0007                     	;# 
    45  0008                     	;# 
    46  0009                     	;# 
    47  000A                     	;# 
    48  000B                     	;# 
    49  000C                     	;# 
    50  000D                     	;# 
    51  0011                     	;# 
    52  0012                     	;# 
    53  0013                     	;# 
    54  0014                     	;# 
    55  0015                     	;# 
    56  0016                     	;# 
    57  0016                     	;# 
    58  0017                     	;# 
    59  0018                     	;# 
    60  0019                     	;# 
    61  001A                     	;# 
    62  001B                     	;# 
    63  001C                     	;# 
    64  001E                     	;# 
    65  001F                     	;# 
    66  008C                     	;# 
    67  008D                     	;# 
    68  0091                     	;# 
    69  0092                     	;# 
    70  0093                     	;# 
    71  0094                     	;# 
    72  0095                     	;# 
    73  0096                     	;# 
    74  0097                     	;# 
    75  0098                     	;# 
    76  0099                     	;# 
    77  009A                     	;# 
    78  009B                     	;# 
    79  009B                     	;# 
    80  009C                     	;# 
    81  009D                     	;# 
    82  009E                     	;# 
    83  010C                     	;# 
    84  010D                     	;# 
    85  0111                     	;# 
    86  0112                     	;# 
    87  0113                     	;# 
    88  0114                     	;# 
    89  0115                     	;# 
    90  0116                     	;# 
    91  0117                     	;# 
    92  0118                     	;# 
    93  0119                     	;# 
    94  011A                     	;# 
    95  011B                     	;# 
    96  011D                     	;# 
    97  011E                     	;# 
    98  018C                     	;# 
    99  018D                     	;# 
   100  0191                     	;# 
   101  0191                     	;# 
   102  0192                     	;# 
   103  0193                     	;# 
   104  0193                     	;# 
   105  0193                     	;# 
   106  0194                     	;# 
   107  0195                     	;# 
   108  0196                     	;# 
   109  0199                     	;# 
   110  019A                     	;# 
   111  019B                     	;# 
   112  019B                     	;# 
   113  019B                     	;# 
   114  019B                     	;# 
   115  019C                     	;# 
   116  019C                     	;# 
   117  019D                     	;# 
   118  019E                     	;# 
   119  019F                     	;# 
   120  020C                     	;# 
   121  020D                     	;# 
   122  0211                     	;# 
   123  0211                     	;# 
   124  0212                     	;# 
   125  0212                     	;# 
   126  0213                     	;# 
   127  0213                     	;# 
   128  0214                     	;# 
   129  0214                     	;# 
   130  0215                     	;# 
   131  0215                     	;# 
   132  0215                     	;# 
   133  0216                     	;# 
   134  0216                     	;# 
   135  0217                     	;# 
   136  0217                     	;# 
   137  0219                     	;# 
   138  021A                     	;# 
   139  021B                     	;# 
   140  021C                     	;# 
   141  021D                     	;# 
   142  021E                     	;# 
   143  021F                     	;# 
   144  0291                     	;# 
   145  0291                     	;# 
   146  0292                     	;# 
   147  0293                     	;# 
   148  0294                     	;# 
   149  0295                     	;# 
   150  0295                     	;# 
   151  0296                     	;# 
   152  0298                     	;# 
   153  0298                     	;# 
   154  0299                     	;# 
   155  029A                     	;# 
   156  029B                     	;# 
   157  029C                     	;# 
   158  029C                     	;# 
   159  029D                     	;# 
   160  029E                     	;# 
   161  029E                     	;# 
   162  0311                     	;# 
   163  0311                     	;# 
   164  0312                     	;# 
   165  0313                     	;# 
   166  0318                     	;# 
   167  0318                     	;# 
   168  0319                     	;# 
   169  031A                     	;# 
   170  0394                     	;# 
   171  0395                     	;# 
   172  0396                     	;# 
   173  039A                     	;# 
   174  039C                     	;# 
   175  039D                     	;# 
   176  039E                     	;# 
   177  039F                     	;# 
   178  0415                     	;# 
   179  0416                     	;# 
   180  0417                     	;# 
   181  041C                     	;# 
   182  041D                     	;# 
   183  041E                     	;# 
   184  0FE4                     	;# 
   185  0FE5                     	;# 
   186  0FE6                     	;# 
   187  0FE7                     	;# 
   188  0FE8                     	;# 
   189  0FE9                     	;# 
   190  0FEA                     	;# 
   191  0FEB                     	;# 
   192  0FED                     	;# 
   193  0FEE                     	;# 
   194  0FEF                     	;# 
   195                           
   196                           	psect	idataBANK0
   197  0703                     __pidataBANK0:	
   198                           
   199                           ;initializer for LCD_SetCursor@F2865
   200  0703  3400               	retlw	0
   201  0704  3440               	retlw	64
   202  000B                     _INTCONbits	set	11
   203  000C                     _PORTA	set	12
   204  000D                     _PORTB	set	13
   205  0018                     _T1CON	set	24
   206  0017                     _TMR1H	set	23
   207  0016                     _TMR1L	set	22
   208  0093                     _BCL1IF	set	147
   209  0060                     _RA0	set	96
   210  0061                     _RA1	set	97
   211  008B                     _SSP1IF	set	139
   212  0088                     _TMR1IF	set	136
   213  0095                     _OPTION_REG	set	149
   214  0099                     _OSCCON	set	153
   215  0091                     _PIE1bits	set	145
   216  008C                     _TRISA	set	140
   217  008D                     _TRISB	set	141
   218  0493                     _BCL1IE	set	1171
   219  048B                     _SSP1IE	set	1163
   220  018C                     _ANSELA	set	396
   221  018D                     _ANSELB	set	397
   222  0212                     _SSP1ADD	set	530
   223  0211                     _SSP1BUF	set	529
   224  0215                     _SSP1CON1	set	533
   225  0215                     _SSP1CON1bits	set	533
   226  0216                     _SSP1CON2	set	534
   227  0216                     _SSP1CON2bits	set	534
   228  0214                     _SSP1STAT	set	532
   229  020D                     _WPUB	set	525
   230                           
   231                           	psect	stringtext
   232  0700                     __pstringtext:	
   233  0700                     __stringdata:	
   234  0700                     STR_1:	
   235  0700  3420               	retlw	32	;' '
   236  0701  3420               	retlw	32	;' '
   237  0702  3400               	retlw	0
   238  0703                     __end_of__stringdata:	
   239                           
   240                           ; #config settings
   241  0000                     
   242                           	psect	cinit
   243  0037                     start_initialization:	
   244  0037                     __initialization:	
   245                           
   246                           ; Clear objects allocated to COMMON
   247  0037  01F0               	clrf	__pbssCOMMON& (0+127)
   248  0038  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   249  0039  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   250  003A  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   251  003B  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   252  003C  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   253                           
   254                           ; Clear objects allocated to BANK0
   255  003D  01C0               	clrf	__pbssBANK0& (0+127)
   256  003E  01C1               	clrf	(__pbssBANK0+1)& (0+127)
   257  003F  01C2               	clrf	(__pbssBANK0+2)& (0+127)
   258  0040  01C3               	clrf	(__pbssBANK0+3)& (0+127)
   259  0041  01C4               	clrf	(__pbssBANK0+4)& (0+127)
   260  0042  01C5               	clrf	(__pbssBANK0+5)& (0+127)
   261  0043  01C6               	clrf	(__pbssBANK0+6)& (0+127)
   262  0044  01C7               	clrf	(__pbssBANK0+7)& (0+127)
   263  0045  01C8               	clrf	(__pbssBANK0+8)& (0+127)
   264                           
   265                           ; Initialize objects allocated to BANK0
   266  0046  3187  2703  3180   	fcall	__pidataBANK0	;fetch initializer
   267  0049  00C9               	movwf	__pdataBANK0& (0+127)
   268  004A  3187  2704         	fcall	__pidataBANK0+1	;fetch initializer
   269  004C  00CA               	movwf	(__pdataBANK0+1)& (0+127)
   270  004D                     end_of_initialization:	
   271                           ;End of C runtime variable initialization code
   272                           
   273  004D                     __end_of__initialization:	
   274  004D  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
   275  004E  0020               	movlb	0
   276  004F  3182  2AA5         	ljmp	_main	;jump to C main() function
   277                           
   278                           	psect	bssCOMMON
   279  0070                     __pbssCOMMON:	
   280  0070                     _sw_RA0:	
   281  0070                     	ds	3
   282  0073                     _sw_RA1:	
   283  0073                     	ds	3
   284                           
   285                           	psect	bssBANK0
   286  0040                     __pbssBANK0:	
   287  0040                     _AckCheck:	
   288  0040                     	ds	1
   289  0041                     _EE:	
   290  0041                     	ds	1
   291  0042                     _cnt_t1:	
   292  0042                     	ds	1
   293  0043                     _DD:	
   294  0043                     	ds	1
   295  0044                     _MM:	
   296  0044                     	ds	1
   297  0045                     _YY:	
   298  0045                     	ds	1
   299  0046                     _hh:	
   300  0046                     	ds	1
   301  0047                     _mm:	
   302  0047                     	ds	1
   303  0048                     _ss:	
   304  0048                     	ds	1
   305                           
   306                           	psect	dataBANK0
   307  0049                     __pdataBANK0:	
   308  0049                     LCD_SetCursor@F2865:	
   309  0049                     	ds	2
   310                           
   311                           	psect	cstackCOMMON
   312  0076                     __pcstackCOMMON:	
   313  0076                     ?_display:	
   314  0076                     ?_button_timer_interrupt:	
   315                           ; 0 bytes @ 0x0
   316                           
   317  0076                     ?_I2C_IdleCheck:	
   318                           ; 0 bytes @ 0x0
   319                           
   320  0076                     ?_I2C_Stop:	
   321                           ; 0 bytes @ 0x0
   322                           
   323  0076                     ?_command:	
   324                           ; 0 bytes @ 0x0
   325                           
   326  0076                     ?_LCD_Clear:	
   327                           ; 0 bytes @ 0x0
   328                           
   329  0076                     ?_LCD_Putc:	
   330                           ; 0 bytes @ 0x0
   331                           
   332  0076                     ?_LCD_Init:	
   333                           ; 0 bytes @ 0x0
   334                           
   335  0076                     ?_InterFunction:	
   336                           ; 0 bytes @ 0x0
   337                           
   338  0076                     ?_main:	
   339                           ; 0 bytes @ 0x0
   340                           
   341  0076                     ?_I2C_Receive:	
   342                           ; 0 bytes @ 0x0
   343                           
   344  0076                     ?_RTC_Read:	
   345                           ; 1 bytes @ 0x0
   346                           
   347  0076                     ?_I2C_Send:	
   348                           ; 1 bytes @ 0x0
   349                           
   350  0076                     button_timer_interrupt@sw_value:	
   351                           ; 2 bytes @ 0x0
   352                           
   353                           
   354                           ; 1 bytes @ 0x0
   355  0076                     	ds	1
   356  0077                     ??_button_timer_interrupt:	
   357                           
   358                           ; 0 bytes @ 0x1
   359  0077                     	ds	2
   360  0079                     button_timer_interrupt@bt:	
   361                           
   362                           ; 1 bytes @ 0x3
   363  0079                     	ds	1
   364  007A                     ??_InterFunction:	
   365                           
   366                           ; 0 bytes @ 0x4
   367  007A                     	ds	2
   368                           
   369                           	psect	cstackBANK0
   370  0020                     __pcstackBANK0:	
   371  0020                     ??_I2C_IdleCheck:	
   372  0020                     ?_month_length:	
   373                           ; 0 bytes @ 0x0
   374                           
   375  0020                     ?___awdiv:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0020                     ?___awmod:	
   379                           ; 2 bytes @ 0x0
   380                           
   381  0020                     month_length@month:	
   382                           ; 2 bytes @ 0x0
   383                           
   384  0020                     ___awdiv@divisor:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0020                     ___awmod@divisor:	
   388                           ; 2 bytes @ 0x0
   389                           
   390                           
   391                           ; 2 bytes @ 0x0
   392  0020                     	ds	1
   393  0021                     ??_month_length:	
   394  0021                     I2C_IdleCheck@mask:	
   395                           ; 0 bytes @ 0x1
   396                           
   397  0021                     month_length@year:	
   398                           ; 1 bytes @ 0x1
   399                           
   400                           
   401                           ; 1 bytes @ 0x1
   402  0021                     	ds	1
   403  0022                     ??_I2C_Stop:	
   404  0022                     ??_I2C_Send:	
   405                           ; 0 bytes @ 0x2
   406                           
   407  0022                     ??_I2C_Receive:	
   408                           ; 0 bytes @ 0x2
   409                           
   410  0022                     ?_I2C_Start:	
   411                           ; 0 bytes @ 0x2
   412                           
   413  0022                     ?_I2C_rStart:	
   414                           ; 1 bytes @ 0x2
   415                           
   416  0022                     I2C_Start@rw:	
   417                           ; 2 bytes @ 0x2
   418                           
   419  0022                     I2C_Send@data:	
   420                           ; 1 bytes @ 0x2
   421                           
   422  0022                     I2C_rStart@adrs:	
   423                           ; 1 bytes @ 0x2
   424                           
   425  0022                     ___awdiv@dividend:	
   426                           ; 2 bytes @ 0x2
   427                           
   428  0022                     ___awmod@dividend:	
   429                           ; 2 bytes @ 0x2
   430                           
   431                           
   432                           ; 2 bytes @ 0x2
   433  0022                     	ds	1
   434  0023                     ??_I2C_Start:	
   435  0023                     I2C_Start@adrs:	
   436                           ; 0 bytes @ 0x3
   437                           
   438  0023                     I2C_Receive@ack:	
   439                           ; 1 bytes @ 0x3
   440                           
   441                           
   442                           ; 1 bytes @ 0x3
   443  0023                     	ds	1
   444  0024                     ??_command:	
   445  0024                     ??_LCD_Putc:	
   446                           ; 0 bytes @ 0x4
   447                           
   448  0024                     ?_LCD_Puts:	
   449                           ; 0 bytes @ 0x4
   450                           
   451  0024                     ?_RTC_Write:	
   452                           ; 0 bytes @ 0x4
   453                           
   454  0024                     ??___awdiv:	
   455                           ; 0 bytes @ 0x4
   456                           
   457  0024                     ??___awmod:	
   458                           ; 0 bytes @ 0x4
   459                           
   460  0024                     I2C_Receive@data:	
   461                           ; 0 bytes @ 0x4
   462                           
   463  0024                     RTC_Write@c:	
   464                           ; 1 bytes @ 0x4
   465                           
   466  0024                     I2C_rStart@rw:	
   467                           ; 1 bytes @ 0x4
   468                           
   469  0024                     LCD_Puts@s:	
   470                           ; 2 bytes @ 0x4
   471                           
   472                           
   473                           ; 2 bytes @ 0x4
   474  0024                     	ds	1
   475  0025                     ??_RTC_Write:	
   476  0025                     command@c:	
   477                           ; 0 bytes @ 0x5
   478                           
   479  0025                     LCD_Putc@c:	
   480                           ; 1 bytes @ 0x5
   481                           
   482  0025                     ___awdiv@counter:	
   483                           ; 1 bytes @ 0x5
   484                           
   485  0025                     ___awmod@counter:	
   486                           ; 1 bytes @ 0x5
   487                           
   488                           
   489                           ; 1 bytes @ 0x5
   490  0025                     	ds	1
   491  0026                     ??_I2C_rStart:	
   492  0026                     ??_LCD_Puts:	
   493                           ; 0 bytes @ 0x6
   494                           
   495  0026                     command@ans:	
   496                           ; 0 bytes @ 0x6
   497                           
   498  0026                     LCD_Putc@ans:	
   499                           ; 1 bytes @ 0x6
   500                           
   501  0026                     RTC_Write@Reg:	
   502                           ; 1 bytes @ 0x6
   503                           
   504  0026                     ___awdiv@sign:	
   505                           ; 1 bytes @ 0x6
   506                           
   507  0026                     ___awmod@sign:	
   508                           ; 1 bytes @ 0x6
   509                           
   510                           
   511                           ; 1 bytes @ 0x6
   512  0026                     	ds	1
   513  0027                     ??_LCD_Clear:	
   514  0027                     ?_LCD_SetCursor:	
   515                           ; 0 bytes @ 0x7
   516                           
   517  0027                     LCD_SetCursor@row:	
   518                           ; 0 bytes @ 0x7
   519                           
   520  0027                     RTC_Write@ans:	
   521                           ; 1 bytes @ 0x7
   522                           
   523  0027                     ___awdiv@quotient:	
   524                           ; 1 bytes @ 0x7
   525                           
   526                           
   527                           ; 2 bytes @ 0x7
   528  0027                     	ds	1
   529  0028                     ??_LCD_SetCursor:	
   530  0028                     ??_RTC_Read:	
   531                           ; 0 bytes @ 0x8
   532                           
   533  0028                     LCD_SetCursor@row_offsets:	
   534                           ; 0 bytes @ 0x8
   535                           
   536  0028                     LCD_Puts@ans:	
   537                           ; 2 bytes @ 0x8
   538                           
   539                           
   540                           ; 2 bytes @ 0x8
   541  0028                     	ds	1
   542  0029                     ??_LCD_Init:	
   543  0029                     ?___bmul:	
   544                           ; 0 bytes @ 0x9
   545                           
   546  0029                     RTC_Read@Reg:	
   547                           ; 1 bytes @ 0x9
   548                           
   549  0029                     ___bmul@multiplicand:	
   550                           ; 1 bytes @ 0x9
   551                           
   552                           
   553                           ; 1 bytes @ 0x9
   554  0029                     	ds	1
   555  002A                     ??___bmul:	
   556  002A                     LCD_SetCursor@col:	
   557                           ; 0 bytes @ 0xA
   558                           
   559  002A                     RTC_Read@data:	
   560                           ; 1 bytes @ 0xA
   561                           
   562                           
   563                           ; 1 bytes @ 0xA
   564  002A                     	ds	1
   565  002B                     RTC_Read@ans:	
   566  002B                     ___bmul@product:	
   567                           ; 1 bytes @ 0xB
   568                           
   569                           
   570                           ; 1 bytes @ 0xB
   571  002B                     	ds	1
   572  002C                     ??_display:	
   573  002C                     ___bmul@multiplier:	
   574                           ; 0 bytes @ 0xC
   575                           
   576                           
   577                           ; 1 bytes @ 0xC
   578  002C                     	ds	2
   579  002E                     ?_timeset:	
   580  002E                     timeset@min_num:	
   581                           ; 0 bytes @ 0xE
   582                           
   583                           
   584                           ; 1 bytes @ 0xE
   585  002E                     	ds	1
   586  002F                     timeset@max_num:	
   587                           
   588                           ; 1 bytes @ 0xF
   589  002F                     	ds	1
   590  0030                     timeset@Reg:	
   591                           
   592                           ; 1 bytes @ 0x10
   593  0030                     	ds	1
   594  0031                     timeset@column:	
   595                           
   596                           ; 1 bytes @ 0x11
   597  0031                     	ds	1
   598  0032                     timeset@row:	
   599                           
   600                           ; 1 bytes @ 0x12
   601  0032                     	ds	1
   602  0033                     ??_timeset:	
   603                           
   604                           ; 0 bytes @ 0x13
   605  0033                     	ds	6
   606  0039                     timeset@t:	
   607                           
   608                           ; 1 bytes @ 0x19
   609  0039                     	ds	1
   610  003A                     timeset@t_350:	
   611                           
   612                           ; 1 bytes @ 0x1A
   613  003A                     	ds	1
   614  003B                     timeset@value:	
   615                           
   616                           ; 1 bytes @ 0x1B
   617  003B                     	ds	1
   618  003C                     ??_main:	
   619                           
   620                           ; 0 bytes @ 0x1C
   621  003C                     	ds	4
   622                           
   623                           	psect	maintext
   624  02A5                     __pmaintext:	
   625 ;;
   626 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   627 ;;
   628 ;; *************** function _main *****************
   629 ;; Defined at:
   630 ;;		line 145 in file "PIC16F1827-I2C03.c"
   631 ;; Parameters:    Size  Location     Type
   632 ;;		None
   633 ;; Auto vars:     Size  Location     Type
   634 ;;		None
   635 ;; Return value:  Size  Location     Type
   636 ;;		None               void
   637 ;; Registers used:
   638 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   639 ;; Tracked objects:
   640 ;;		On entry : 17F/0
   641 ;;		On exit  : 0/0
   642 ;;		Unchanged: 0/0
   643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   644 ;;      Params:         0       0       0       0       0       0
   645 ;;      Locals:         0       0       0       0       0       0
   646 ;;      Temps:          0       4       0       0       0       0
   647 ;;      Totals:         0       4       0       0       0       0
   648 ;;Total ram usage:        4 bytes
   649 ;; Hardware stack levels required when called:    8
   650 ;; This function calls:
   651 ;;		_LCD_Init
   652 ;;		_RTC_Write
   653 ;;		_display
   654 ;;		_month_length
   655 ;;		_timeset
   656 ;; This function is called by:
   657 ;;		Startup code after reset
   658 ;; This function uses a non-reentrant model
   659 ;;
   660                           
   661                           
   662                           ;psect for function _main
   663  02A5                     _main:	
   664                           
   665                           ;PIC16F1827-I2C03.c: 146: OSCCON = 0b01110010;
   666                           
   667                           ;incstack = 0
   668                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   669  02A5  3072               	movlw	114
   670  02A6  0021               	movlb	1	; select bank1
   671  02A7  0099               	movwf	25	;volatile
   672                           
   673                           ;PIC16F1827-I2C03.c: 147: OPTION_REG = 0b00000000;
   674  02A8  0195               	clrf	21	;volatile
   675                           
   676                           ;PIC16F1827-I2C03.c: 148: ANSELA = 0b00000000;
   677  02A9  0023               	movlb	3	; select bank3
   678  02AA  018C               	clrf	12	;volatile
   679                           
   680                           ;PIC16F1827-I2C03.c: 149: ANSELB = 0b00000000;
   681  02AB  018D               	clrf	13	;volatile
   682                           
   683                           ;PIC16F1827-I2C03.c: 150: TRISA = 0b00000011;
   684  02AC  3003               	movlw	3
   685  02AD  0021               	movlb	1	; select bank1
   686  02AE  008C               	movwf	12	;volatile
   687                           
   688                           ;PIC16F1827-I2C03.c: 151: TRISB = 0b00010010;
   689  02AF  3012               	movlw	18
   690  02B0  008D               	movwf	13	;volatile
   691                           
   692                           ;PIC16F1827-I2C03.c: 152: WPUB = 0b00010010;
   693  02B1  3012               	movlw	18
   694  02B2  0024               	movlb	4	; select bank4
   695  02B3  008D               	movwf	13	;volatile
   696                           
   697                           ;PIC16F1827-I2C03.c: 153: PORTA = 0b00000000;
   698  02B4  0020               	movlb	0	; select bank0
   699  02B5  018C               	clrf	12	;volatile
   700                           
   701                           ;PIC16F1827-I2C03.c: 154: PORTB = 0b00000000;
   702  02B6  018D               	clrf	13	;volatile
   703                           
   704                           ;PIC16F1827-I2C03.c: 156: T1CON = 0x21;
   705  02B7  3021               	movlw	33
   706  02B8  0098               	movwf	24	;volatile
   707                           
   708                           ;PIC16F1827-I2C03.c: 157: TMR1H = 0x00;
   709  02B9  0197               	clrf	23	;volatile
   710                           
   711                           ;PIC16F1827-I2C03.c: 158: TMR1L = 0x00;
   712  02BA  0196               	clrf	22	;volatile
   713                           
   714                           ;PIC16F1827-I2C03.c: 159: PIE1bits.TMR1IE = 1;
   715  02BB  0021               	movlb	1	; select bank1
   716  02BC  1411               	bsf	17,0	;volatile
   717                           
   718                           ;PIC16F1827-I2C03.c: 161: SSP1CON1bits.SSPEN = 1;
   719  02BD  0024               	movlb	4	; select bank4
   720  02BE  1695               	bsf	21,5	;volatile
   721                           
   722                           ;PIC16F1827-I2C03.c: 162: SSP1CON1bits.SSPM = 8;
   723  02BF  0815               	movf	21,w	;volatile
   724  02C0  39F0               	andlw	-16
   725  02C1  3808               	iorlw	8
   726  02C2  0095               	movwf	21	;volatile
   727                           
   728                           ;PIC16F1827-I2C03.c: 163: SSP1ADD = 0x13;
   729  02C3  3013               	movlw	19
   730  02C4  0092               	movwf	18	;volatile
   731                           
   732                           ;PIC16F1827-I2C03.c: 164: SSP1STAT = 0x00;
   733  02C5  0194               	clrf	20	;volatile
   734                           
   735                           ;PIC16F1827-I2C03.c: 165: SSP1IE = 1;
   736  02C6  0021               	movlb	1	; select bank1
   737  02C7  1591               	bsf	17,3	;volatile
   738                           
   739                           ;PIC16F1827-I2C03.c: 166: BCL1IE = 1;
   740  02C8  1592               	bsf	18,3	;volatile
   741                           
   742                           ;PIC16F1827-I2C03.c: 167: SSP1IF = 0;
   743  02C9  0020               	movlb	0	; select bank0
   744  02CA  1191               	bcf	17,3	;volatile
   745                           
   746                           ;PIC16F1827-I2C03.c: 168: BCL1IF = 0;
   747  02CB  1192               	bcf	18,3	;volatile
   748                           
   749                           ;PIC16F1827-I2C03.c: 170: INTCONbits.PEIE = 1;
   750  02CC  170B               	bsf	11,6	;volatile
   751                           
   752                           ;PIC16F1827-I2C03.c: 171: INTCONbits.GIE = 1;
   753  02CD  178B               	bsf	11,7	;volatile
   754                           
   755                           ;PIC16F1827-I2C03.c: 173: LCD_Init();
   756  02CE  3184  244E  3182   	fcall	_LCD_Init
   757                           
   758                           ;PIC16F1827-I2C03.c: 175: RTC_Write(0x07, 0x00);
   759  02D1  0020               	movlb	0	; select bank0
   760  02D2  01A4               	clrf	RTC_Write@c
   761  02D3  3007               	movlw	7
   762  02D4  3185  2560  3182   	fcall	_RTC_Write
   763  02D7                     l2114:	
   764                           ;PIC16F1827-I2C03.c: 177: while (1) {
   765                           
   766                           
   767                           ;PIC16F1827-I2C03.c: 178: display();
   768  02D7  3181  21A9  3182   	fcall	_display
   769                           
   770                           ;PIC16F1827-I2C03.c: 179: if (sw_RA0.flag.press) {
   771  02DA  1C72               	btfss	_sw_RA0+2,0
   772  02DB  2B51               	goto	l2122
   773                           
   774                           ;PIC16F1827-I2C03.c: 180: sw_RA0.flag.press = 0;
   775  02DC  1072               	bcf	_sw_RA0+2,0
   776                           
   777                           ;PIC16F1827-I2C03.c: 181: timeset(&YY, 0, 99, 0x06, 0, 0);
   778  02DD  0020               	movlb	0	; select bank0
   779  02DE  01AE               	clrf	timeset@min_num
   780  02DF  3063               	movlw	99
   781  02E0  00BC               	movwf	??_main
   782  02E1  083C               	movf	??_main,w
   783  02E2  00AF               	movwf	timeset@max_num
   784  02E3  3006               	movlw	6
   785  02E4  00BD               	movwf	??_main+1
   786  02E5  083D               	movf	??_main+1,w
   787  02E6  00B0               	movwf	timeset@Reg
   788  02E7  01B1               	clrf	timeset@column
   789  02E8  01B2               	clrf	timeset@row
   790  02E9  3045               	movlw	_YY& (0+255)
   791  02EA  3180  2051  3182   	fcall	_timeset
   792                           
   793                           ;PIC16F1827-I2C03.c: 182: timeset(&MM, 1, 12, 0x05, 3, 0);
   794  02ED  0020               	movlb	0	; select bank0
   795  02EE  01AE               	clrf	timeset@min_num
   796  02EF  0AAE               	incf	timeset@min_num,f
   797  02F0  300C               	movlw	12
   798  02F1  00BC               	movwf	??_main
   799  02F2  083C               	movf	??_main,w
   800  02F3  00AF               	movwf	timeset@max_num
   801  02F4  3005               	movlw	5
   802  02F5  00BD               	movwf	??_main+1
   803  02F6  083D               	movf	??_main+1,w
   804  02F7  00B0               	movwf	timeset@Reg
   805  02F8  3003               	movlw	3
   806  02F9  00BE               	movwf	??_main+2
   807  02FA  083E               	movf	??_main+2,w
   808  02FB  00B1               	movwf	timeset@column
   809  02FC  01B2               	clrf	timeset@row
   810  02FD  3044               	movlw	_MM& (0+255)
   811  02FE  3180  2051  3182   	fcall	_timeset
   812                           
   813                           ;PIC16F1827-I2C03.c: 183: timeset(&DD, 1, month_length(YY, MM), 0x04, 6, 0);
   814  0301  0020               	movlb	0	; select bank0
   815  0302  01AE               	clrf	timeset@min_num
   816  0303  0AAE               	incf	timeset@min_num,f
   817  0304  0844               	movf	_MM,w
   818  0305  00BC               	movwf	??_main
   819  0306  083C               	movf	??_main,w
   820  0307  00A0               	movwf	month_length@month
   821  0308  0845               	movf	_YY,w
   822  0309  3185  25A0  3182   	fcall	_month_length
   823  030C  0020               	movlb	0	; select bank0
   824  030D  00BD               	movwf	??_main+1
   825  030E  083D               	movf	??_main+1,w
   826  030F  00AF               	movwf	timeset@max_num
   827  0310  3004               	movlw	4
   828  0311  00BE               	movwf	??_main+2
   829  0312  083E               	movf	??_main+2,w
   830  0313  00B0               	movwf	timeset@Reg
   831  0314  3006               	movlw	6
   832  0315  00BF               	movwf	??_main+3
   833  0316  083F               	movf	??_main+3,w
   834  0317  00B1               	movwf	timeset@column
   835  0318  01B2               	clrf	timeset@row
   836  0319  3043               	movlw	_DD& (0+255)
   837  031A  3180  2051  3182   	fcall	_timeset
   838                           
   839                           ;PIC16F1827-I2C03.c: 184: timeset(&hh, 0, 23, 0x02, 0, 1);
   840  031D  0020               	movlb	0	; select bank0
   841  031E  01AE               	clrf	timeset@min_num
   842  031F  3017               	movlw	23
   843  0320  00BC               	movwf	??_main
   844  0321  083C               	movf	??_main,w
   845  0322  00AF               	movwf	timeset@max_num
   846  0323  3002               	movlw	2
   847  0324  00BD               	movwf	??_main+1
   848  0325  083D               	movf	??_main+1,w
   849  0326  00B0               	movwf	timeset@Reg
   850  0327  01B1               	clrf	timeset@column
   851  0328  01B2               	clrf	timeset@row
   852  0329  0AB2               	incf	timeset@row,f
   853  032A  3046               	movlw	_hh& (0+255)
   854  032B  3180  2051  3182   	fcall	_timeset
   855                           
   856                           ;PIC16F1827-I2C03.c: 185: timeset(&mm, 0, 59, 0x01, 3, 1);
   857  032E  0020               	movlb	0	; select bank0
   858  032F  01AE               	clrf	timeset@min_num
   859  0330  303B               	movlw	59
   860  0331  00BC               	movwf	??_main
   861  0332  083C               	movf	??_main,w
   862  0333  00AF               	movwf	timeset@max_num
   863  0334  01B0               	clrf	timeset@Reg
   864  0335  0AB0               	incf	timeset@Reg,f
   865  0336  3003               	movlw	3
   866  0337  00BD               	movwf	??_main+1
   867  0338  083D               	movf	??_main+1,w
   868  0339  00B1               	movwf	timeset@column
   869  033A  01B2               	clrf	timeset@row
   870  033B  0AB2               	incf	timeset@row,f
   871  033C  3047               	movlw	_mm& (0+255)
   872  033D  3180  2051  3182   	fcall	_timeset
   873                           
   874                           ;PIC16F1827-I2C03.c: 186: timeset(&ss, 0, 59, 0x00, 6, 1);
   875  0340  0020               	movlb	0	; select bank0
   876  0341  01AE               	clrf	timeset@min_num
   877  0342  303B               	movlw	59
   878  0343  00BC               	movwf	??_main
   879  0344  083C               	movf	??_main,w
   880  0345  00AF               	movwf	timeset@max_num
   881  0346  01B0               	clrf	timeset@Reg
   882  0347  3006               	movlw	6
   883  0348  00BD               	movwf	??_main+1
   884  0349  083D               	movf	??_main+1,w
   885  034A  00B1               	movwf	timeset@column
   886  034B  01B2               	clrf	timeset@row
   887  034C  0AB2               	incf	timeset@row,f
   888  034D  3048               	movlw	_ss& (0+255)
   889  034E  3180  2051  3182   	fcall	_timeset
   890  0351                     l2122:	
   891                           
   892                           ;PIC16F1827-I2C03.c: 187: }
   893                           ;PIC16F1827-I2C03.c: 188: _delay((unsigned long)((1)*(32000000/4000.0)));
   894  0351  300B               	movlw	11
   895  0352  0020               	movlb	0	; select bank0
   896  0353  00BD               	movwf	??_main+1
   897  0354  3062               	movlw	98
   898  0355  00BC               	movwf	??_main
   899  0356                     u1587:	
   900  0356  0BBC               	decfsz	??_main,f
   901  0357  2B56               	goto	u1587
   902  0358  0BBD               	decfsz	??_main+1,f
   903  0359  2B56               	goto	u1587
   904  035A  0000               	nop
   905  035B  2AD7               	goto	l2114
   906  035C                     __end_of_main:	
   907                           
   908                           	psect	text1
   909  0051                     __ptext1:	
   910 ;; *************** function _timeset *****************
   911 ;; Defined at:
   912 ;;		line 77 in file "PIC16F1827-I2C03.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;  value           1    wreg     PTR unsigned char 
   915 ;;		 -> YY(1), MM(1), DD(1), hh(1), 
   916 ;;		 -> mm(1), ss(1), 
   917 ;;  min_num         1   14[BANK0 ] unsigned char 
   918 ;;  max_num         1   15[BANK0 ] unsigned char 
   919 ;;  Reg             1   16[BANK0 ] unsigned char 
   920 ;;  column          1   17[BANK0 ] unsigned char 
   921 ;;  row             1   18[BANK0 ] unsigned char 
   922 ;; Auto vars:     Size  Location     Type
   923 ;;  value           1   27[BANK0 ] PTR unsigned char 
   924 ;;		 -> YY(1), MM(1), DD(1), hh(1), 
   925 ;;		 -> mm(1), ss(1), 
   926 ;;  t               1   26[BANK0 ] unsigned char 
   927 ;;  t               1   25[BANK0 ] unsigned char 
   928 ;; Return value:  Size  Location     Type
   929 ;;		None               void
   930 ;; Registers used:
   931 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   932 ;; Tracked objects:
   933 ;;		On entry : 0/0
   934 ;;		On exit  : 0/0
   935 ;;		Unchanged: 0/0
   936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   937 ;;      Params:         0       5       0       0       0       0
   938 ;;      Locals:         0       3       0       0       0       0
   939 ;;      Temps:          0       6       0       0       0       0
   940 ;;      Totals:         0      14       0       0       0       0
   941 ;;Total ram usage:       14 bytes
   942 ;; Hardware stack levels used:    1
   943 ;; Hardware stack levels required when called:    7
   944 ;; This function calls:
   945 ;;		_LCD_Putc
   946 ;;		_LCD_Puts
   947 ;;		_LCD_SetCursor
   948 ;;		_RTC_Read
   949 ;;		_RTC_Write
   950 ;;		___awdiv
   951 ;;		___awmod
   952 ;;		___bmul
   953 ;;		_display
   954 ;; This function is called by:
   955 ;;		_main
   956 ;; This function uses a non-reentrant model
   957 ;;
   958                           
   959                           
   960                           ;psect for function _timeset
   961  0051                     _timeset:	
   962                           
   963                           ;incstack = 0
   964                           ; Regs used in _timeset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   965                           ;timeset@value stored from wreg
   966  0051  0020               	movlb	0	; select bank0
   967  0052  00BB               	movwf	timeset@value
   968                           
   969                           ;PIC16F1827-I2C03.c: 78: sw_RA1.flags = 0;
   970  0053  01F5               	clrf	_sw_RA1+2
   971  0054                     l2036:	
   972                           ;PIC16F1827-I2C03.c: 79: while (!sw_RA0.flag.press) {
   973                           
   974  0054  1872               	btfsc	_sw_RA0+2,0
   975  0055  29A7               	goto	l2038
   976                           
   977                           ;PIC16F1827-I2C03.c: 80: if (cnt_t1 % 4 >= 2) {
   978  0056  3003               	movlw	3
   979  0057  0020               	movlb	0	; select bank0
   980  0058  0542               	andwf	_cnt_t1,w
   981  0059  00B3               	movwf	??_timeset
   982  005A  3002               	movlw	2
   983  005B  0233               	subwf	??_timeset,w
   984  005C  1C03               	skipc
   985  005D  2873               	goto	l2002
   986                           
   987                           ;PIC16F1827-I2C03.c: 81: display();
   988  005E  3181  21A9  3180   	fcall	_display
   989                           
   990                           ;PIC16F1827-I2C03.c: 82: LCD_SetCursor(column, row);
   991  0061  0020               	movlb	0	; select bank0
   992  0062  0832               	movf	timeset@row,w
   993  0063  00B3               	movwf	??_timeset
   994  0064  0833               	movf	??_timeset,w
   995  0065  00A7               	movwf	LCD_SetCursor@row
   996  0066  0831               	movf	timeset@column,w
   997  0067  3186  2605  3180   	fcall	_LCD_SetCursor
   998                           
   999                           ;PIC16F1827-I2C03.c: 83: LCD_Puts("  ");
  1000  006A  3000               	movlw	low (STR_1| (0+32768))
  1001  006B  0020               	movlb	0	; select bank0
  1002  006C  00A4               	movwf	LCD_Puts@s
  1003  006D  3087               	movlw	high (STR_1| (0+32768))
  1004  006E  00A5               	movwf	LCD_Puts@s+1
  1005  006F  3184  24CA  3180   	fcall	_LCD_Puts
  1006                           
  1007                           ;PIC16F1827-I2C03.c: 84: } else {
  1008  0072  28AD               	goto	l2004
  1009  0073                     l2002:	
  1010                           
  1011                           ;PIC16F1827-I2C03.c: 85: *value = RTC_Read(Reg);
  1012  0073  0020               	movlb	0	; select bank0
  1013  0074  0830               	movf	timeset@Reg,w
  1014  0075  3184  2491  3180   	fcall	_RTC_Read
  1015  0078  0020               	movlb	0	; select bank0
  1016  0079  00B3               	movwf	??_timeset
  1017  007A  083B               	movf	timeset@value,w
  1018  007B  0086               	movwf	6
  1019  007C  0187               	clrf	7
  1020  007D  0833               	movf	??_timeset,w
  1021  007E  0081               	movwf	1
  1022                           
  1023                           ;PIC16F1827-I2C03.c: 86: display();
  1024  007F  3181  21A9  3180   	fcall	_display
  1025                           
  1026                           ;PIC16F1827-I2C03.c: 87: LCD_SetCursor(column, row);
  1027  0082  0020               	movlb	0	; select bank0
  1028  0083  0832               	movf	timeset@row,w
  1029  0084  00B3               	movwf	??_timeset
  1030  0085  0833               	movf	??_timeset,w
  1031  0086  00A7               	movwf	LCD_SetCursor@row
  1032  0087  0831               	movf	timeset@column,w
  1033  0088  3186  2605  3180   	fcall	_LCD_SetCursor
  1034                           
  1035                           ;PIC16F1827-I2C03.c: 88: LCD_Putc(*value / 16 + '0');
  1036  008B  3010               	movlw	16
  1037  008C  0020               	movlb	0	; select bank0
  1038  008D  00A0               	movwf	___awdiv@divisor
  1039  008E  3000               	movlw	0
  1040  008F  00A1               	movwf	___awdiv@divisor+1
  1041  0090  083B               	movf	timeset@value,w
  1042  0091  0086               	movwf	6
  1043  0092  0187               	clrf	7
  1044  0093  0801               	movf	1,w
  1045  0094  00B3               	movwf	??_timeset
  1046  0095  01B4               	clrf	??_timeset+1
  1047  0096  0833               	movf	??_timeset,w
  1048  0097  00A2               	movwf	___awdiv@dividend
  1049  0098  0834               	movf	??_timeset+1,w
  1050  0099  00A3               	movwf	___awdiv@dividend+1
  1051  009A  3183  23B2  3180   	fcall	___awdiv
  1052  009D  0020               	movlb	0	; select bank0
  1053  009E  0820               	movf	?___awdiv,w
  1054  009F  3E30               	addlw	48
  1055  00A0  3185  2540  3180   	fcall	_LCD_Putc
  1056                           
  1057                           ;PIC16F1827-I2C03.c: 89: LCD_Putc(*value % 16 + '0');
  1058  00A3  0020               	movlb	0	; select bank0
  1059  00A4  083B               	movf	timeset@value,w
  1060  00A5  0086               	movwf	6
  1061  00A6  0187               	clrf	7
  1062  00A7  0801               	movf	1,w
  1063  00A8  390F               	andlw	15
  1064  00A9  3E30               	addlw	48
  1065  00AA  3185  2540  3180   	fcall	_LCD_Putc
  1066  00AD                     l2004:	
  1067                           
  1068                           ;PIC16F1827-I2C03.c: 90: }
  1069                           ;PIC16F1827-I2C03.c: 91: if (sw_RA1.flag.press) {
  1070  00AD  1C75               	btfss	_sw_RA1+2,0
  1071  00AE  291A               	goto	l2020
  1072                           
  1073                           ;PIC16F1827-I2C03.c: 92: sw_RA1.flag.press = 0;
  1074  00AF  1075               	bcf	_sw_RA1+2,0
  1075                           
  1076                           ;PIC16F1827-I2C03.c: 93: uint8_t t = *value % 16 + (*value / 16)*10;
  1077  00B0  0020               	movlb	0	; select bank0
  1078  00B1  083B               	movf	timeset@value,w
  1079  00B2  0086               	movwf	6
  1080  00B3  0187               	clrf	7
  1081  00B4  300F               	movlw	15
  1082  00B5  0501               	andwf	1,w
  1083  00B6  00B3               	movwf	??_timeset
  1084  00B7  300A               	movlw	10
  1085  00B8  00B4               	movwf	??_timeset+1
  1086  00B9  0834               	movf	??_timeset+1,w
  1087  00BA  00A9               	movwf	___bmul@multiplicand
  1088  00BB  083B               	movf	timeset@value,w
  1089  00BC  0086               	movwf	6
  1090  00BD  0187               	clrf	7
  1091  00BE  0801               	movf	1,w
  1092  00BF  00B5               	movwf	??_timeset+2
  1093  00C0  01B6               	clrf	??_timeset+3
  1094  00C1  0835               	movf	??_timeset+2,w
  1095  00C2  00A2               	movwf	___awdiv@dividend
  1096  00C3  0836               	movf	??_timeset+3,w
  1097  00C4  00A3               	movwf	___awdiv@dividend+1
  1098  00C5  3010               	movlw	16
  1099  00C6  00A0               	movwf	___awdiv@divisor
  1100  00C7  3000               	movlw	0
  1101  00C8  00A1               	movwf	___awdiv@divisor+1
  1102  00C9  3183  23B2  3180   	fcall	___awdiv
  1103  00CC  0020               	movlb	0	; select bank0
  1104  00CD  0820               	movf	?___awdiv,w
  1105  00CE  3186  2617  3180   	fcall	___bmul
  1106  00D1  0020               	movlb	0	; select bank0
  1107  00D2  0733               	addwf	??_timeset,w
  1108  00D3  00B7               	movwf	??_timeset+4
  1109  00D4  0837               	movf	??_timeset+4,w
  1110  00D5  00B9               	movwf	timeset@t
  1111                           
  1112                           ;PIC16F1827-I2C03.c: 94: if (t >= max_num) {
  1113  00D6  082F               	movf	timeset@max_num,w
  1114  00D7  0239               	subwf	timeset@t,w
  1115  00D8  1C03               	skipc
  1116  00D9  28DF               	goto	l2014
  1117                           
  1118                           ;PIC16F1827-I2C03.c: 95: t = min_num;
  1119  00DA  082E               	movf	timeset@min_num,w
  1120  00DB  00B3               	movwf	??_timeset
  1121  00DC  0833               	movf	??_timeset,w
  1122  00DD  00B9               	movwf	timeset@t
  1123                           
  1124                           ;PIC16F1827-I2C03.c: 96: } else {
  1125  00DE  28E3               	goto	l2016
  1126  00DF                     l2014:	
  1127                           
  1128                           ;PIC16F1827-I2C03.c: 97: t++;
  1129  00DF  3001               	movlw	1
  1130  00E0  00B3               	movwf	??_timeset
  1131  00E1  0833               	movf	??_timeset,w
  1132  00E2  07B9               	addwf	timeset@t,f
  1133  00E3                     l2016:	
  1134                           
  1135                           ;PIC16F1827-I2C03.c: 98: }
  1136                           ;PIC16F1827-I2C03.c: 99: *value = t % 10 + (t / 10)* 16;
  1137  00E3  300A               	movlw	10
  1138  00E4  00A0               	movwf	___awdiv@divisor
  1139  00E5  3000               	movlw	0
  1140  00E6  00A1               	movwf	___awdiv@divisor+1
  1141  00E7  0839               	movf	timeset@t,w
  1142  00E8  00B3               	movwf	??_timeset
  1143  00E9  01B4               	clrf	??_timeset+1
  1144  00EA  0833               	movf	??_timeset,w
  1145  00EB  00A2               	movwf	___awdiv@dividend
  1146  00EC  0834               	movf	??_timeset+1,w
  1147  00ED  00A3               	movwf	___awdiv@dividend+1
  1148  00EE  3183  23B2  3180   	fcall	___awdiv
  1149  00F1  0020               	movlb	0	; select bank0
  1150  00F2  0820               	movf	?___awdiv,w
  1151  00F3  00B5               	movwf	??_timeset+2
  1152  00F4  3004               	movlw	4
  1153  00F5                     u1485:	
  1154  00F5  35B5               	lslf	??_timeset+2,f
  1155  00F6  0B89               	decfsz	9,f
  1156  00F7  28F5               	goto	u1485
  1157  00F8  300A               	movlw	10
  1158  00F9  00A0               	movwf	___awmod@divisor
  1159  00FA  3000               	movlw	0
  1160  00FB  00A1               	movwf	___awmod@divisor+1
  1161  00FC  0839               	movf	timeset@t,w
  1162  00FD  00B6               	movwf	??_timeset+3
  1163  00FE  01B7               	clrf	??_timeset+4
  1164  00FF  0836               	movf	??_timeset+3,w
  1165  0100  00A2               	movwf	___awmod@dividend
  1166  0101  0837               	movf	??_timeset+4,w
  1167  0102  00A3               	movwf	___awmod@dividend+1
  1168  0103  3184  2406  3180   	fcall	___awmod
  1169  0106  0020               	movlb	0	; select bank0
  1170  0107  0820               	movf	?___awmod,w
  1171  0108  0735               	addwf	??_timeset+2,w
  1172  0109  00B8               	movwf	??_timeset+5
  1173  010A  083B               	movf	timeset@value,w
  1174  010B  0086               	movwf	6
  1175  010C  0187               	clrf	7
  1176  010D  0838               	movf	??_timeset+5,w
  1177  010E  0081               	movwf	1
  1178                           
  1179                           ;PIC16F1827-I2C03.c: 100: RTC_Write(Reg, *value);
  1180  010F  083B               	movf	timeset@value,w
  1181  0110  0086               	movwf	6
  1182  0111  0187               	clrf	7
  1183  0112  0801               	movf	1,w
  1184  0113  00B3               	movwf	??_timeset
  1185  0114  0833               	movf	??_timeset,w
  1186  0115  00A4               	movwf	RTC_Write@c
  1187  0116  0830               	movf	timeset@Reg,w
  1188  0117  3185  2560  3180   	fcall	_RTC_Write
  1189  011A                     l2020:	
  1190                           
  1191                           ;PIC16F1827-I2C03.c: 101: }
  1192                           ;PIC16F1827-I2C03.c: 102: if (sw_RA1.flag.long_hold_1) {
  1193  011A  1CF5               	btfss	_sw_RA1+2,1
  1194  011B  2854               	goto	l2036
  1195                           
  1196                           ;PIC16F1827-I2C03.c: 103: sw_RA1.flag.long_hold_1 = 0;
  1197  011C  10F5               	bcf	_sw_RA1+2,1
  1198                           
  1199                           ;PIC16F1827-I2C03.c: 104: uint8_t t = *value % 16 + (*value / 16)*10;
  1200  011D  0020               	movlb	0	; select bank0
  1201  011E  083B               	movf	timeset@value,w
  1202  011F  0086               	movwf	6
  1203  0120  0187               	clrf	7
  1204  0121  300F               	movlw	15
  1205  0122  0501               	andwf	1,w
  1206  0123  00B3               	movwf	??_timeset
  1207  0124  300A               	movlw	10
  1208  0125  00B4               	movwf	??_timeset+1
  1209  0126  0834               	movf	??_timeset+1,w
  1210  0127  00A9               	movwf	___bmul@multiplicand
  1211  0128  083B               	movf	timeset@value,w
  1212  0129  0086               	movwf	6
  1213  012A  0187               	clrf	7
  1214  012B  0801               	movf	1,w
  1215  012C  00B5               	movwf	??_timeset+2
  1216  012D  01B6               	clrf	??_timeset+3
  1217  012E  0835               	movf	??_timeset+2,w
  1218  012F  00A2               	movwf	___awdiv@dividend
  1219  0130  0836               	movf	??_timeset+3,w
  1220  0131  00A3               	movwf	___awdiv@dividend+1
  1221  0132  3010               	movlw	16
  1222  0133  00A0               	movwf	___awdiv@divisor
  1223  0134  3000               	movlw	0
  1224  0135  00A1               	movwf	___awdiv@divisor+1
  1225  0136  3183  23B2  3180   	fcall	___awdiv
  1226  0139  0020               	movlb	0	; select bank0
  1227  013A  0820               	movf	?___awdiv,w
  1228  013B  3186  2617  3180   	fcall	___bmul
  1229  013E  0020               	movlb	0	; select bank0
  1230  013F  0733               	addwf	??_timeset,w
  1231  0140  00B7               	movwf	??_timeset+4
  1232  0141  0837               	movf	??_timeset+4,w
  1233  0142  00BA               	movwf	timeset@t_350
  1234                           
  1235                           ;PIC16F1827-I2C03.c: 105: if (t + 9 >= max_num) {
  1236  0143  083A               	movf	timeset@t_350,w
  1237  0144  3E09               	addlw	9
  1238  0145  00B3               	movwf	??_timeset
  1239  0146  3000               	movlw	0
  1240  0147  1803               	skipnc
  1241  0148  3001               	movlw	1
  1242  0149  00B4               	movwf	??_timeset+1
  1243  014A  0834               	movf	??_timeset+1,w
  1244  014B  3A80               	xorlw	128
  1245  014C  00B5               	movwf	??_timeset+2
  1246  014D  3080               	movlw	128
  1247  014E  0235               	subwf	??_timeset+2,w
  1248  014F  1D03               	skipz
  1249  0150  2953               	goto	u1505
  1250  0151  082F               	movf	timeset@max_num,w
  1251  0152  0233               	subwf	??_timeset,w
  1252  0153                     u1505:	
  1253  0153  1C03               	skipc
  1254  0154  296A               	goto	l2030
  1255                           
  1256                           ;PIC16F1827-I2C03.c: 106: t = t % 10;
  1257  0155  300A               	movlw	10
  1258  0156  0020               	movlb	0	; select bank0
  1259  0157  00A0               	movwf	___awmod@divisor
  1260  0158  3000               	movlw	0
  1261  0159  00A1               	movwf	___awmod@divisor+1
  1262  015A  083A               	movf	timeset@t_350,w
  1263  015B  00B3               	movwf	??_timeset
  1264  015C  01B4               	clrf	??_timeset+1
  1265  015D  0833               	movf	??_timeset,w
  1266  015E  00A2               	movwf	___awmod@dividend
  1267  015F  0834               	movf	??_timeset+1,w
  1268  0160  00A3               	movwf	___awmod@dividend+1
  1269  0161  3184  2406  3180   	fcall	___awmod
  1270  0164  0020               	movlb	0	; select bank0
  1271  0165  0820               	movf	?___awmod,w
  1272  0166  00B5               	movwf	??_timeset+2
  1273  0167  0835               	movf	??_timeset+2,w
  1274  0168  00BA               	movwf	timeset@t_350
  1275                           
  1276                           ;PIC16F1827-I2C03.c: 107: } else {
  1277  0169  296F               	goto	l2032
  1278  016A                     l2030:	
  1279                           
  1280                           ;PIC16F1827-I2C03.c: 108: t += 10;
  1281  016A  300A               	movlw	10
  1282  016B  0020               	movlb	0	; select bank0
  1283  016C  00B3               	movwf	??_timeset
  1284  016D  0833               	movf	??_timeset,w
  1285  016E  07BA               	addwf	timeset@t_350,f
  1286  016F                     l2032:	
  1287                           
  1288                           ;PIC16F1827-I2C03.c: 109: }
  1289                           ;PIC16F1827-I2C03.c: 110: *value = t % 10 + (t / 10)* 16;
  1290  016F  300A               	movlw	10
  1291  0170  00A0               	movwf	___awdiv@divisor
  1292  0171  3000               	movlw	0
  1293  0172  00A1               	movwf	___awdiv@divisor+1
  1294  0173  083A               	movf	timeset@t_350,w
  1295  0174  00B3               	movwf	??_timeset
  1296  0175  01B4               	clrf	??_timeset+1
  1297  0176  0833               	movf	??_timeset,w
  1298  0177  00A2               	movwf	___awdiv@dividend
  1299  0178  0834               	movf	??_timeset+1,w
  1300  0179  00A3               	movwf	___awdiv@dividend+1
  1301  017A  3183  23B2  3180   	fcall	___awdiv
  1302  017D  0020               	movlb	0	; select bank0
  1303  017E  0820               	movf	?___awdiv,w
  1304  017F  00B5               	movwf	??_timeset+2
  1305  0180  3004               	movlw	4
  1306  0181                     u1515:	
  1307  0181  35B5               	lslf	??_timeset+2,f
  1308  0182  0B89               	decfsz	9,f
  1309  0183  2981               	goto	u1515
  1310  0184  300A               	movlw	10
  1311  0185  00A0               	movwf	___awmod@divisor
  1312  0186  3000               	movlw	0
  1313  0187  00A1               	movwf	___awmod@divisor+1
  1314  0188  083A               	movf	timeset@t_350,w
  1315  0189  00B6               	movwf	??_timeset+3
  1316  018A  01B7               	clrf	??_timeset+4
  1317  018B  0836               	movf	??_timeset+3,w
  1318  018C  00A2               	movwf	___awmod@dividend
  1319  018D  0837               	movf	??_timeset+4,w
  1320  018E  00A3               	movwf	___awmod@dividend+1
  1321  018F  3184  2406  3180   	fcall	___awmod
  1322  0192  0020               	movlb	0	; select bank0
  1323  0193  0820               	movf	?___awmod,w
  1324  0194  0735               	addwf	??_timeset+2,w
  1325  0195  00B8               	movwf	??_timeset+5
  1326  0196  083B               	movf	timeset@value,w
  1327  0197  0086               	movwf	6
  1328  0198  0187               	clrf	7
  1329  0199  0838               	movf	??_timeset+5,w
  1330  019A  0081               	movwf	1
  1331                           
  1332                           ;PIC16F1827-I2C03.c: 111: RTC_Write(Reg, *value);
  1333  019B  083B               	movf	timeset@value,w
  1334  019C  0086               	movwf	6
  1335  019D  0187               	clrf	7
  1336  019E  0801               	movf	1,w
  1337  019F  00B3               	movwf	??_timeset
  1338  01A0  0833               	movf	??_timeset,w
  1339  01A1  00A4               	movwf	RTC_Write@c
  1340  01A2  0830               	movf	timeset@Reg,w
  1341  01A3  3185  2560  3180   	fcall	_RTC_Write
  1342  01A6  2854               	goto	l2036
  1343  01A7                     l2038:	
  1344                           
  1345                           ;PIC16F1827-I2C03.c: 112: }
  1346                           ;PIC16F1827-I2C03.c: 113: }
  1347                           ;PIC16F1827-I2C03.c: 114: sw_RA0.flags = 0;
  1348  01A7  01F2               	clrf	_sw_RA0+2
  1349  01A8  0008               	return
  1350  01A9                     __end_of_timeset:	
  1351                           
  1352                           	psect	text2
  1353  01A9                     __ptext2:	
  1354 ;; *************** function _display *****************
  1355 ;; Defined at:
  1356 ;;		line 117 in file "PIC16F1827-I2C03.c"
  1357 ;; Parameters:    Size  Location     Type
  1358 ;;		None
  1359 ;; Auto vars:     Size  Location     Type
  1360 ;;		None
  1361 ;; Return value:  Size  Location     Type
  1362 ;;		None               void
  1363 ;; Registers used:
  1364 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1365 ;; Tracked objects:
  1366 ;;		On entry : 0/0
  1367 ;;		On exit  : 0/0
  1368 ;;		Unchanged: 0/0
  1369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1370 ;;      Params:         0       0       0       0       0       0
  1371 ;;      Locals:         0       0       0       0       0       0
  1372 ;;      Temps:          0       2       0       0       0       0
  1373 ;;      Totals:         0       2       0       0       0       0
  1374 ;;Total ram usage:        2 bytes
  1375 ;; Hardware stack levels used:    1
  1376 ;; Hardware stack levels required when called:    6
  1377 ;; This function calls:
  1378 ;;		_LCD_Putc
  1379 ;;		_LCD_SetCursor
  1380 ;;		_RTC_Read
  1381 ;;		___awdiv
  1382 ;; This function is called by:
  1383 ;;		_timeset
  1384 ;;		_main
  1385 ;; This function uses a non-reentrant model
  1386 ;;
  1387                           
  1388                           
  1389                           ;psect for function _display
  1390  01A9                     _display:	
  1391                           
  1392                           ;PIC16F1827-I2C03.c: 118: ss = RTC_Read(0x00);
  1393                           
  1394                           ;incstack = 0
  1395                           ; Regs used in _display: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1396  01A9  3000               	movlw	0
  1397  01AA  3184  2491  3181   	fcall	_RTC_Read
  1398  01AD  0020               	movlb	0	; select bank0
  1399  01AE  00AC               	movwf	??_display
  1400  01AF  082C               	movf	??_display,w
  1401  01B0  00C8               	movwf	_ss
  1402                           
  1403                           ;PIC16F1827-I2C03.c: 119: mm = RTC_Read(0x01);
  1404  01B1  3001               	movlw	1
  1405  01B2  3184  2491  3181   	fcall	_RTC_Read
  1406  01B5  0020               	movlb	0	; select bank0
  1407  01B6  00AC               	movwf	??_display
  1408  01B7  082C               	movf	??_display,w
  1409  01B8  00C7               	movwf	_mm
  1410                           
  1411                           ;PIC16F1827-I2C03.c: 120: hh = RTC_Read(0x02);
  1412  01B9  3002               	movlw	2
  1413  01BA  3184  2491  3181   	fcall	_RTC_Read
  1414  01BD  0020               	movlb	0	; select bank0
  1415  01BE  00AC               	movwf	??_display
  1416  01BF  082C               	movf	??_display,w
  1417  01C0  00C6               	movwf	_hh
  1418                           
  1419                           ;PIC16F1827-I2C03.c: 121: EE = RTC_Read(0x03);
  1420  01C1  3003               	movlw	3
  1421  01C2  3184  2491  3181   	fcall	_RTC_Read
  1422  01C5  0020               	movlb	0	; select bank0
  1423  01C6  00AC               	movwf	??_display
  1424  01C7  082C               	movf	??_display,w
  1425  01C8  00C1               	movwf	_EE
  1426                           
  1427                           ;PIC16F1827-I2C03.c: 122: DD = RTC_Read(0x04);
  1428  01C9  3004               	movlw	4
  1429  01CA  3184  2491  3181   	fcall	_RTC_Read
  1430  01CD  0020               	movlb	0	; select bank0
  1431  01CE  00AC               	movwf	??_display
  1432  01CF  082C               	movf	??_display,w
  1433  01D0  00C3               	movwf	_DD
  1434                           
  1435                           ;PIC16F1827-I2C03.c: 123: MM = RTC_Read(0x05);
  1436  01D1  3005               	movlw	5
  1437  01D2  3184  2491  3181   	fcall	_RTC_Read
  1438  01D5  0020               	movlb	0	; select bank0
  1439  01D6  00AC               	movwf	??_display
  1440  01D7  082C               	movf	??_display,w
  1441  01D8  00C4               	movwf	_MM
  1442                           
  1443                           ;PIC16F1827-I2C03.c: 124: YY = RTC_Read(0x06);
  1444  01D9  3006               	movlw	6
  1445  01DA  3184  2491  3181   	fcall	_RTC_Read
  1446  01DD  0020               	movlb	0	; select bank0
  1447  01DE  00AC               	movwf	??_display
  1448  01DF  082C               	movf	??_display,w
  1449  01E0  00C5               	movwf	_YY
  1450                           
  1451                           ;PIC16F1827-I2C03.c: 125: LCD_SetCursor(0, 0);
  1452  01E1  01A7               	clrf	LCD_SetCursor@row
  1453  01E2  3000               	movlw	0
  1454  01E3  3186  2605  3181   	fcall	_LCD_SetCursor
  1455                           
  1456                           ;PIC16F1827-I2C03.c: 126: LCD_Putc(YY / 16 + '0');
  1457  01E6  3010               	movlw	16
  1458  01E7  0020               	movlb	0	; select bank0
  1459  01E8  00A0               	movwf	___awdiv@divisor
  1460  01E9  3000               	movlw	0
  1461  01EA  00A1               	movwf	___awdiv@divisor+1
  1462  01EB  0845               	movf	_YY,w
  1463  01EC  00AC               	movwf	??_display
  1464  01ED  01AD               	clrf	??_display+1
  1465  01EE  082C               	movf	??_display,w
  1466  01EF  00A2               	movwf	___awdiv@dividend
  1467  01F0  082D               	movf	??_display+1,w
  1468  01F1  00A3               	movwf	___awdiv@dividend+1
  1469  01F2  3183  23B2  3181   	fcall	___awdiv
  1470  01F5  0020               	movlb	0	; select bank0
  1471  01F6  0820               	movf	?___awdiv,w
  1472  01F7  3E30               	addlw	48
  1473  01F8  3185  2540  3181   	fcall	_LCD_Putc
  1474                           
  1475                           ;PIC16F1827-I2C03.c: 127: LCD_Putc(YY % 16 + '0');
  1476  01FB  0020               	movlb	0	; select bank0
  1477  01FC  0845               	movf	_YY,w
  1478  01FD  390F               	andlw	15
  1479  01FE  3E30               	addlw	48
  1480  01FF  3185  2540  3181   	fcall	_LCD_Putc
  1481                           
  1482                           ;PIC16F1827-I2C03.c: 128: LCD_Putc('/');
  1483  0202  302F               	movlw	47
  1484  0203  3185  2540  3181   	fcall	_LCD_Putc
  1485                           
  1486                           ;PIC16F1827-I2C03.c: 129: LCD_Putc(MM / 16 + '0');
  1487  0206  3010               	movlw	16
  1488  0207  0020               	movlb	0	; select bank0
  1489  0208  00A0               	movwf	___awdiv@divisor
  1490  0209  3000               	movlw	0
  1491  020A  00A1               	movwf	___awdiv@divisor+1
  1492  020B  0844               	movf	_MM,w
  1493  020C  00AC               	movwf	??_display
  1494  020D  01AD               	clrf	??_display+1
  1495  020E  082C               	movf	??_display,w
  1496  020F  00A2               	movwf	___awdiv@dividend
  1497  0210  082D               	movf	??_display+1,w
  1498  0211  00A3               	movwf	___awdiv@dividend+1
  1499  0212  3183  23B2  3181   	fcall	___awdiv
  1500  0215  0020               	movlb	0	; select bank0
  1501  0216  0820               	movf	?___awdiv,w
  1502  0217  3E30               	addlw	48
  1503  0218  3185  2540  3181   	fcall	_LCD_Putc
  1504                           
  1505                           ;PIC16F1827-I2C03.c: 130: LCD_Putc(MM % 16 + '0');
  1506  021B  0020               	movlb	0	; select bank0
  1507  021C  0844               	movf	_MM,w
  1508  021D  390F               	andlw	15
  1509  021E  3E30               	addlw	48
  1510  021F  3185  2540  3181   	fcall	_LCD_Putc
  1511                           
  1512                           ;PIC16F1827-I2C03.c: 131: LCD_Putc('/');
  1513  0222  302F               	movlw	47
  1514  0223  3185  2540  3181   	fcall	_LCD_Putc
  1515                           
  1516                           ;PIC16F1827-I2C03.c: 132: LCD_Putc(DD / 16 + '0');
  1517  0226  3010               	movlw	16
  1518  0227  0020               	movlb	0	; select bank0
  1519  0228  00A0               	movwf	___awdiv@divisor
  1520  0229  3000               	movlw	0
  1521  022A  00A1               	movwf	___awdiv@divisor+1
  1522  022B  0843               	movf	_DD,w
  1523  022C  00AC               	movwf	??_display
  1524  022D  01AD               	clrf	??_display+1
  1525  022E  082C               	movf	??_display,w
  1526  022F  00A2               	movwf	___awdiv@dividend
  1527  0230  082D               	movf	??_display+1,w
  1528  0231  00A3               	movwf	___awdiv@dividend+1
  1529  0232  3183  23B2  3181   	fcall	___awdiv
  1530  0235  0020               	movlb	0	; select bank0
  1531  0236  0820               	movf	?___awdiv,w
  1532  0237  3E30               	addlw	48
  1533  0238  3185  2540  3181   	fcall	_LCD_Putc
  1534                           
  1535                           ;PIC16F1827-I2C03.c: 133: LCD_Putc(DD % 16 + '0');
  1536  023B  0020               	movlb	0	; select bank0
  1537  023C  0843               	movf	_DD,w
  1538  023D  390F               	andlw	15
  1539  023E  3E30               	addlw	48
  1540  023F  3185  2540  3181   	fcall	_LCD_Putc
  1541                           
  1542                           ;PIC16F1827-I2C03.c: 134: LCD_SetCursor(0, 1);
  1543  0242  0020               	movlb	0	; select bank0
  1544  0243  01A7               	clrf	LCD_SetCursor@row
  1545  0244  0AA7               	incf	LCD_SetCursor@row,f
  1546  0245  3000               	movlw	0
  1547  0246  3186  2605  3181   	fcall	_LCD_SetCursor
  1548                           
  1549                           ;PIC16F1827-I2C03.c: 135: LCD_Putc(hh / 16 + '0');
  1550  0249  3010               	movlw	16
  1551  024A  0020               	movlb	0	; select bank0
  1552  024B  00A0               	movwf	___awdiv@divisor
  1553  024C  3000               	movlw	0
  1554  024D  00A1               	movwf	___awdiv@divisor+1
  1555  024E  0846               	movf	_hh,w
  1556  024F  00AC               	movwf	??_display
  1557  0250  01AD               	clrf	??_display+1
  1558  0251  082C               	movf	??_display,w
  1559  0252  00A2               	movwf	___awdiv@dividend
  1560  0253  082D               	movf	??_display+1,w
  1561  0254  00A3               	movwf	___awdiv@dividend+1
  1562  0255  3183  23B2  3181   	fcall	___awdiv
  1563  0258  0020               	movlb	0	; select bank0
  1564  0259  0820               	movf	?___awdiv,w
  1565  025A  3E30               	addlw	48
  1566  025B  3185  2540  3181   	fcall	_LCD_Putc
  1567                           
  1568                           ;PIC16F1827-I2C03.c: 136: LCD_Putc(hh % 16 + '0');
  1569  025E  0020               	movlb	0	; select bank0
  1570  025F  0846               	movf	_hh,w
  1571  0260  390F               	andlw	15
  1572  0261  3E30               	addlw	48
  1573  0262  3185  2540  3181   	fcall	_LCD_Putc
  1574                           
  1575                           ;PIC16F1827-I2C03.c: 137: LCD_Putc(':');
  1576  0265  303A               	movlw	58
  1577  0266  3185  2540  3181   	fcall	_LCD_Putc
  1578                           
  1579                           ;PIC16F1827-I2C03.c: 138: LCD_Putc(mm / 16 + '0');
  1580  0269  3010               	movlw	16
  1581  026A  0020               	movlb	0	; select bank0
  1582  026B  00A0               	movwf	___awdiv@divisor
  1583  026C  3000               	movlw	0
  1584  026D  00A1               	movwf	___awdiv@divisor+1
  1585  026E  0847               	movf	_mm,w
  1586  026F  00AC               	movwf	??_display
  1587  0270  01AD               	clrf	??_display+1
  1588  0271  082C               	movf	??_display,w
  1589  0272  00A2               	movwf	___awdiv@dividend
  1590  0273  082D               	movf	??_display+1,w
  1591  0274  00A3               	movwf	___awdiv@dividend+1
  1592  0275  3183  23B2  3181   	fcall	___awdiv
  1593  0278  0020               	movlb	0	; select bank0
  1594  0279  0820               	movf	?___awdiv,w
  1595  027A  3E30               	addlw	48
  1596  027B  3185  2540  3181   	fcall	_LCD_Putc
  1597                           
  1598                           ;PIC16F1827-I2C03.c: 139: LCD_Putc(mm % 16 + '0');
  1599  027E  0020               	movlb	0	; select bank0
  1600  027F  0847               	movf	_mm,w
  1601  0280  390F               	andlw	15
  1602  0281  3E30               	addlw	48
  1603  0282  3185  2540  3181   	fcall	_LCD_Putc
  1604                           
  1605                           ;PIC16F1827-I2C03.c: 140: LCD_Putc('-');
  1606  0285  302D               	movlw	45
  1607  0286  3185  2540  3181   	fcall	_LCD_Putc
  1608                           
  1609                           ;PIC16F1827-I2C03.c: 141: LCD_Putc(ss / 16 + '0');
  1610  0289  3010               	movlw	16
  1611  028A  0020               	movlb	0	; select bank0
  1612  028B  00A0               	movwf	___awdiv@divisor
  1613  028C  3000               	movlw	0
  1614  028D  00A1               	movwf	___awdiv@divisor+1
  1615  028E  0848               	movf	_ss,w
  1616  028F  00AC               	movwf	??_display
  1617  0290  01AD               	clrf	??_display+1
  1618  0291  082C               	movf	??_display,w
  1619  0292  00A2               	movwf	___awdiv@dividend
  1620  0293  082D               	movf	??_display+1,w
  1621  0294  00A3               	movwf	___awdiv@dividend+1
  1622  0295  3183  23B2  3181   	fcall	___awdiv
  1623  0298  0020               	movlb	0	; select bank0
  1624  0299  0820               	movf	?___awdiv,w
  1625  029A  3E30               	addlw	48
  1626  029B  3185  2540  3181   	fcall	_LCD_Putc
  1627                           
  1628                           ;PIC16F1827-I2C03.c: 142: LCD_Putc(ss % 16 + '0');
  1629  029E  0020               	movlb	0	; select bank0
  1630  029F  0848               	movf	_ss,w
  1631  02A0  390F               	andlw	15
  1632  02A1  3E30               	addlw	48
  1633  02A2  3185  2540         	fcall	_LCD_Putc
  1634  02A4  0008               	return
  1635  02A5                     __end_of_display:	
  1636                           
  1637                           	psect	text3
  1638  03B2                     __ptext3:	
  1639 ;; *************** function ___awdiv *****************
  1640 ;; Defined at:
  1641 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  1642 ;; Parameters:    Size  Location     Type
  1643 ;;  divisor         2    0[BANK0 ] int 
  1644 ;;  dividend        2    2[BANK0 ] int 
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;  quotient        2    7[BANK0 ] int 
  1647 ;;  sign            1    6[BANK0 ] unsigned char 
  1648 ;;  counter         1    5[BANK0 ] unsigned char 
  1649 ;; Return value:  Size  Location     Type
  1650 ;;                  2    0[BANK0 ] int 
  1651 ;; Registers used:
  1652 ;;		wreg, status,2, status,0
  1653 ;; Tracked objects:
  1654 ;;		On entry : 0/0
  1655 ;;		On exit  : 0/0
  1656 ;;		Unchanged: 0/0
  1657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1658 ;;      Params:         0       4       0       0       0       0
  1659 ;;      Locals:         0       4       0       0       0       0
  1660 ;;      Temps:          0       1       0       0       0       0
  1661 ;;      Totals:         0       9       0       0       0       0
  1662 ;;Total ram usage:        9 bytes
  1663 ;; Hardware stack levels used:    1
  1664 ;; Hardware stack levels required when called:    2
  1665 ;; This function calls:
  1666 ;;		Nothing
  1667 ;; This function is called by:
  1668 ;;		_timeset
  1669 ;;		_display
  1670 ;; This function uses a non-reentrant model
  1671 ;;
  1672                           
  1673                           
  1674                           ;psect for function ___awdiv
  1675  03B2                     ___awdiv:	
  1676                           
  1677                           ;incstack = 0
  1678                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1679  03B2  0020               	movlb	0	; select bank0
  1680  03B3  01A6               	clrf	___awdiv@sign
  1681  03B4  1FA1               	btfss	___awdiv@divisor+1,7
  1682  03B5  2BBD               	goto	l1802
  1683  03B6  09A0               	comf	___awdiv@divisor,f
  1684  03B7  09A1               	comf	___awdiv@divisor+1,f
  1685  03B8  0AA0               	incf	___awdiv@divisor,f
  1686  03B9  1903               	skipnz
  1687  03BA  0AA1               	incf	___awdiv@divisor+1,f
  1688  03BB  01A6               	clrf	___awdiv@sign
  1689  03BC  0AA6               	incf	___awdiv@sign,f
  1690  03BD                     l1802:	
  1691  03BD  1FA3               	btfss	___awdiv@dividend+1,7
  1692  03BE  2BC8               	goto	l1808
  1693  03BF  09A2               	comf	___awdiv@dividend,f
  1694  03C0  09A3               	comf	___awdiv@dividend+1,f
  1695  03C1  0AA2               	incf	___awdiv@dividend,f
  1696  03C2  1903               	skipnz
  1697  03C3  0AA3               	incf	___awdiv@dividend+1,f
  1698  03C4  3001               	movlw	1
  1699  03C5  00A4               	movwf	??___awdiv
  1700  03C6  0824               	movf	??___awdiv,w
  1701  03C7  06A6               	xorwf	___awdiv@sign,f
  1702  03C8                     l1808:	
  1703  03C8  01A7               	clrf	___awdiv@quotient
  1704  03C9  01A8               	clrf	___awdiv@quotient+1
  1705  03CA  0821               	movf	___awdiv@divisor+1,w
  1706  03CB  0420               	iorwf	___awdiv@divisor,w
  1707  03CC  1903               	skipnz
  1708  03CD  2BF7               	goto	l1830
  1709  03CE  01A5               	clrf	___awdiv@counter
  1710  03CF  0AA5               	incf	___awdiv@counter,f
  1711  03D0                     l1818:	
  1712  03D0  1BA1               	btfsc	___awdiv@divisor+1,7
  1713  03D1  2BDC               	goto	l1820
  1714  03D2  3001               	movlw	1
  1715  03D3                     u1235:	
  1716  03D3  35A0               	lslf	___awdiv@divisor,f
  1717  03D4  0DA1               	rlf	___awdiv@divisor+1,f
  1718  03D5  0B89               	decfsz	9,f
  1719  03D6  2BD3               	goto	u1235
  1720  03D7  3001               	movlw	1
  1721  03D8  00A4               	movwf	??___awdiv
  1722  03D9  0824               	movf	??___awdiv,w
  1723  03DA  07A5               	addwf	___awdiv@counter,f
  1724  03DB  2BD0               	goto	l1818
  1725  03DC                     l1820:	
  1726  03DC  3001               	movlw	1
  1727  03DD                     u1255:	
  1728  03DD  35A7               	lslf	___awdiv@quotient,f
  1729  03DE  0DA8               	rlf	___awdiv@quotient+1,f
  1730  03DF  0B89               	decfsz	9,f
  1731  03E0  2BDD               	goto	u1255
  1732  03E1  0821               	movf	___awdiv@divisor+1,w
  1733  03E2  0223               	subwf	___awdiv@dividend+1,w
  1734  03E3  1D03               	skipz
  1735  03E4  2BE7               	goto	u1265
  1736  03E5  0820               	movf	___awdiv@divisor,w
  1737  03E6  0222               	subwf	___awdiv@dividend,w
  1738  03E7                     u1265:	
  1739  03E7  1C03               	skipc
  1740  03E8  2BEE               	goto	l1826
  1741  03E9  0820               	movf	___awdiv@divisor,w
  1742  03EA  02A2               	subwf	___awdiv@dividend,f
  1743  03EB  0821               	movf	___awdiv@divisor+1,w
  1744  03EC  3BA3               	subwfb	___awdiv@dividend+1,f
  1745  03ED  1427               	bsf	___awdiv@quotient,0
  1746  03EE                     l1826:	
  1747  03EE  3001               	movlw	1
  1748  03EF                     u1275:	
  1749  03EF  36A1               	lsrf	___awdiv@divisor+1,f
  1750  03F0  0CA0               	rrf	___awdiv@divisor,f
  1751  03F1  0B89               	decfsz	9,f
  1752  03F2  2BEF               	goto	u1275
  1753  03F3  3001               	movlw	1
  1754  03F4  02A5               	subwf	___awdiv@counter,f
  1755  03F5  1D03               	btfss	3,2
  1756  03F6  2BDC               	goto	l1820
  1757  03F7                     l1830:	
  1758  03F7  0826               	movf	___awdiv@sign,w
  1759  03F8  1903               	btfsc	3,2
  1760  03F9  2BFF               	goto	l1834
  1761  03FA  09A7               	comf	___awdiv@quotient,f
  1762  03FB  09A8               	comf	___awdiv@quotient+1,f
  1763  03FC  0AA7               	incf	___awdiv@quotient,f
  1764  03FD  1903               	skipnz
  1765  03FE  0AA8               	incf	___awdiv@quotient+1,f
  1766  03FF                     l1834:	
  1767  03FF  0828               	movf	___awdiv@quotient+1,w
  1768  0400  01A1               	clrf	?___awdiv+1
  1769  0401  07A1               	addwf	?___awdiv+1,f
  1770  0402  0827               	movf	___awdiv@quotient,w
  1771  0403  01A0               	clrf	?___awdiv
  1772  0404  07A0               	addwf	?___awdiv,f
  1773  0405  0008               	return
  1774  0406                     __end_of___awdiv:	
  1775                           
  1776                           	psect	text4
  1777  0491                     __ptext4:	
  1778 ;; *************** function _RTC_Read *****************
  1779 ;; Defined at:
  1780 ;;		line 270 in file "My_header.h"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;  Reg             1    wreg     unsigned char 
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;  Reg             1    9[BANK0 ] unsigned char 
  1785 ;;  ans             1   11[BANK0 ] unsigned char 
  1786 ;;  data            1   10[BANK0 ] unsigned char 
  1787 ;; Return value:  Size  Location     Type
  1788 ;;                  1    wreg      unsigned char 
  1789 ;; Registers used:
  1790 ;;		wreg, status,2, status,0, pclath, cstack
  1791 ;; Tracked objects:
  1792 ;;		On entry : 0/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1796 ;;      Params:         0       0       0       0       0       0
  1797 ;;      Locals:         0       3       0       0       0       0
  1798 ;;      Temps:          0       1       0       0       0       0
  1799 ;;      Totals:         0       4       0       0       0       0
  1800 ;;Total ram usage:        4 bytes
  1801 ;; Hardware stack levels used:    1
  1802 ;; Hardware stack levels required when called:    4
  1803 ;; This function calls:
  1804 ;;		_I2C_Receive
  1805 ;;		_I2C_Send
  1806 ;;		_I2C_Start
  1807 ;;		_I2C_Stop
  1808 ;;		_I2C_rStart
  1809 ;; This function is called by:
  1810 ;;		_timeset
  1811 ;;		_display
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           
  1816                           ;psect for function _RTC_Read
  1817  0491                     _RTC_Read:	
  1818                           
  1819                           ;incstack = 0
  1820                           ; Regs used in _RTC_Read: [wreg+status,2+status,0+pclath+cstack]
  1821                           ;RTC_Read@Reg stored from wreg
  1822  0491  0020               	movlb	0	; select bank0
  1823  0492  00A9               	movwf	RTC_Read@Reg
  1824                           
  1825                           ;My_header.h: 271: uint8_t ans;
  1826                           ;My_header.h: 272: uint8_t data;
  1827                           ;My_header.h: 274: ans = I2C_Start(0x68, 0);
  1828  0493  01A2               	clrf	I2C_Start@rw
  1829  0494  3068               	movlw	104
  1830  0495  3185  25BD  3184   	fcall	_I2C_Start
  1831  0498  0020               	movlb	0	; select bank0
  1832  0499  00A8               	movwf	??_RTC_Read
  1833  049A  0828               	movf	??_RTC_Read,w
  1834  049B  00AB               	movwf	RTC_Read@ans
  1835                           
  1836                           ;My_header.h: 275: if (ans == 0) {
  1837  049C  08AB               	movf	RTC_Read@ans,f
  1838  049D  1D03               	skipz
  1839  049E  2CA3               	goto	l167
  1840                           
  1841                           ;My_header.h: 277: I2C_Send(Reg);
  1842  049F  0829               	movf	RTC_Read@Reg,w
  1843  04A0  3185  25F2  3184   	fcall	_I2C_Send
  1844  04A3                     l167:	
  1845                           
  1846                           ;My_header.h: 278: }
  1847                           ;My_header.h: 279: ans = I2C_rStart(0x68, 1);
  1848  04A3  3068               	movlw	104
  1849  04A4  0020               	movlb	0	; select bank0
  1850  04A5  00A2               	movwf	I2C_rStart@adrs
  1851  04A6  3000               	movlw	0
  1852  04A7  00A3               	movwf	I2C_rStart@adrs+1
  1853  04A8  3001               	movlw	1
  1854  04A9  00A4               	movwf	I2C_rStart@rw
  1855  04AA  3000               	movlw	0
  1856  04AB  00A5               	movwf	I2C_rStart@rw+1
  1857  04AC  3184  24FE  3184   	fcall	_I2C_rStart
  1858  04AF  0020               	movlb	0	; select bank0
  1859  04B0  0822               	movf	?_I2C_rStart,w
  1860  04B1  00A8               	movwf	??_RTC_Read
  1861  04B2  0828               	movf	??_RTC_Read,w
  1862  04B3  00AB               	movwf	RTC_Read@ans
  1863                           
  1864                           ;My_header.h: 280: if (ans == 0) {
  1865  04B4  08AB               	movf	RTC_Read@ans,f
  1866  04B5  1D03               	skipz
  1867  04B6  2CBF               	goto	l168
  1868                           
  1869                           ;My_header.h: 282: data = I2C_Receive(1);
  1870  04B7  3001               	movlw	1
  1871  04B8  3185  2520  3184   	fcall	_I2C_Receive
  1872  04BB  0020               	movlb	0	; select bank0
  1873  04BC  00A8               	movwf	??_RTC_Read
  1874  04BD  0828               	movf	??_RTC_Read,w
  1875  04BE  00AA               	movwf	RTC_Read@data
  1876  04BF                     l168:	
  1877                           
  1878                           ;My_header.h: 283: }
  1879                           ;My_header.h: 284: I2C_Stop();
  1880  04BF  3186  2647  3184   	fcall	_I2C_Stop
  1881                           
  1882                           ;My_header.h: 285: _delay((unsigned long)((26)*(32000000/4000000.0)));
  1883  04C2  3045               	movlw	69
  1884  04C3  0020               	movlb	0	; select bank0
  1885  04C4  00A8               	movwf	??_RTC_Read
  1886  04C5                     u1597:	
  1887  04C5  0BA8               	decfsz	??_RTC_Read,f
  1888  04C6  2CC5               	goto	u1597
  1889                           
  1890                           ;My_header.h: 286: return data;
  1891  04C7  0020               	movlb	0	; select bank0
  1892  04C8  082A               	movf	RTC_Read@data,w
  1893  04C9  0008               	return
  1894  04CA                     __end_of_RTC_Read:	
  1895                           
  1896                           	psect	text5
  1897  04FE                     __ptext5:	
  1898 ;; *************** function _I2C_rStart *****************
  1899 ;; Defined at:
  1900 ;;		line 127 in file "My_header.h"
  1901 ;; Parameters:    Size  Location     Type
  1902 ;;  adrs            2    2[BANK0 ] int 
  1903 ;;  rw              2    4[BANK0 ] int 
  1904 ;; Auto vars:     Size  Location     Type
  1905 ;;		None
  1906 ;; Return value:  Size  Location     Type
  1907 ;;                  2    2[BANK0 ] int 
  1908 ;; Registers used:
  1909 ;;		wreg, status,2, status,0, pclath, cstack
  1910 ;; Tracked objects:
  1911 ;;		On entry : 0/0
  1912 ;;		On exit  : 0/0
  1913 ;;		Unchanged: 0/0
  1914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1915 ;;      Params:         0       4       0       0       0       0
  1916 ;;      Locals:         0       0       0       0       0       0
  1917 ;;      Temps:          0       2       0       0       0       0
  1918 ;;      Totals:         0       6       0       0       0       0
  1919 ;;Total ram usage:        6 bytes
  1920 ;; Hardware stack levels used:    1
  1921 ;; Hardware stack levels required when called:    3
  1922 ;; This function calls:
  1923 ;;		_I2C_IdleCheck
  1924 ;; This function is called by:
  1925 ;;		_RTC_Read
  1926 ;; This function uses a non-reentrant model
  1927 ;;
  1928                           
  1929                           
  1930                           ;psect for function _I2C_rStart
  1931  04FE                     _I2C_rStart:	
  1932                           
  1933                           ;My_header.h: 129: I2C_IdleCheck(0x5);
  1934                           
  1935                           ;incstack = 0
  1936                           ; Regs used in _I2C_rStart: [wreg+status,2+status,0+pclath+cstack]
  1937  04FE  3005               	movlw	5
  1938  04FF  3186  2638  3184   	fcall	_I2C_IdleCheck
  1939                           
  1940                           ;My_header.h: 130: SSP1CON2bits.RSEN = 1;
  1941  0502  0024               	movlb	4	; select bank4
  1942  0503  1496               	bsf	22,1	;volatile
  1943                           
  1944                           ;My_header.h: 132: I2C_IdleCheck(0x5);
  1945  0504  3005               	movlw	5
  1946  0505  3186  2638  3184   	fcall	_I2C_IdleCheck
  1947                           
  1948                           ;My_header.h: 133: AckCheck = 1;
  1949  0508  0020               	movlb	0	; select bank0
  1950  0509  01C0               	clrf	_AckCheck
  1951  050A  0AC0               	incf	_AckCheck,f
  1952                           
  1953                           ;My_header.h: 134: SSP1BUF = (char) ((adrs << 1) + rw);
  1954  050B  3522               	lslf	I2C_rStart@adrs,w
  1955  050C  0724               	addwf	I2C_rStart@rw,w
  1956  050D  0024               	movlb	4	; select bank4
  1957  050E  0091               	movwf	17	;volatile
  1958  050F                     l1740:	
  1959                           ;My_header.h: 135: while (AckCheck);
  1960                           
  1961  050F  0020               	movlb	0	; select bank0
  1962  0510  08C0               	movf	_AckCheck,f
  1963  0511  1D03               	skipz
  1964  0512  2D0F               	goto	l1740
  1965                           
  1966                           ;My_header.h: 136: return SSP1CON2bits.ACKSTAT;
  1967  0513  0024               	movlb	4	; select bank4
  1968  0514  0E16               	swapf	22,w	;volatile
  1969  0515  0C89               	rrf	9,f
  1970  0516  0C89               	rrf	9,f
  1971  0517  3901               	andlw	1
  1972  0518  0020               	movlb	0	; select bank0
  1973  0519  00A6               	movwf	??_I2C_rStart
  1974  051A  01A7               	clrf	??_I2C_rStart+1
  1975  051B  0826               	movf	??_I2C_rStart,w
  1976  051C  00A2               	movwf	?_I2C_rStart
  1977  051D  0827               	movf	??_I2C_rStart+1,w
  1978  051E  00A3               	movwf	?_I2C_rStart+1
  1979  051F  0008               	return
  1980  0520                     __end_of_I2C_rStart:	
  1981                           
  1982                           	psect	text6
  1983  0520                     __ptext6:	
  1984 ;; *************** function _I2C_Receive *****************
  1985 ;; Defined at:
  1986 ;;		line 153 in file "My_header.h"
  1987 ;; Parameters:    Size  Location     Type
  1988 ;;  ack             1    wreg     unsigned char 
  1989 ;; Auto vars:     Size  Location     Type
  1990 ;;  ack             1    3[BANK0 ] unsigned char 
  1991 ;;  data            1    4[BANK0 ] unsigned char 
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  1    wreg      unsigned char 
  1994 ;; Registers used:
  1995 ;;		wreg, status,2, status,0, pclath, cstack
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2001 ;;      Params:         0       0       0       0       0       0
  2002 ;;      Locals:         0       2       0       0       0       0
  2003 ;;      Temps:          0       1       0       0       0       0
  2004 ;;      Totals:         0       3       0       0       0       0
  2005 ;;Total ram usage:        3 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; Hardware stack levels required when called:    3
  2008 ;; This function calls:
  2009 ;;		_I2C_IdleCheck
  2010 ;; This function is called by:
  2011 ;;		_RTC_Read
  2012 ;; This function uses a non-reentrant model
  2013 ;;
  2014                           
  2015                           
  2016                           ;psect for function _I2C_Receive
  2017  0520                     _I2C_Receive:	
  2018                           
  2019                           ;incstack = 0
  2020                           ; Regs used in _I2C_Receive: [wreg+status,2+status,0+pclath+cstack]
  2021                           ;I2C_Receive@ack stored from wreg
  2022  0520  0020               	movlb	0	; select bank0
  2023  0521  00A3               	movwf	I2C_Receive@ack
  2024                           
  2025                           ;My_header.h: 154: uint8_t data;
  2026                           ;My_header.h: 156: I2C_IdleCheck(0x5);
  2027  0522  3005               	movlw	5
  2028  0523  3186  2638  3185   	fcall	_I2C_IdleCheck
  2029                           
  2030                           ;My_header.h: 157: SSP1CON2bits.RCEN = 1;
  2031  0526  0024               	movlb	4	; select bank4
  2032  0527  1596               	bsf	22,3	;volatile
  2033                           
  2034                           ;My_header.h: 158: I2C_IdleCheck(0x4);
  2035  0528  3004               	movlw	4
  2036  0529  3186  2638  3185   	fcall	_I2C_IdleCheck
  2037                           
  2038                           ;My_header.h: 159: data = SSP1BUF;
  2039  052C  0024               	movlb	4	; select bank4
  2040  052D  0811               	movf	17,w	;volatile
  2041  052E  0020               	movlb	0	; select bank0
  2042  052F  00A2               	movwf	??_I2C_Receive
  2043  0530  0822               	movf	??_I2C_Receive,w
  2044  0531  00A4               	movwf	I2C_Receive@data
  2045                           
  2046                           ;My_header.h: 160: I2C_IdleCheck(0x5);
  2047  0532  3005               	movlw	5
  2048  0533  3186  2638         	fcall	_I2C_IdleCheck
  2049                           
  2050                           ;My_header.h: 161: SSP1CON2bits.ACKDT = ack;
  2051  0535  0020               	movlb	0	; select bank0
  2052  0536  0823               	movf	I2C_Receive@ack,w
  2053  0537  0024               	movlb	4	; select bank4
  2054  0538  1D03               	skipz
  2055  0539  1696               	bsf	22,5	;volatile
  2056  053A  1903               	skipnz
  2057  053B  1296               	bcf	22,5	;volatile
  2058                           
  2059                           ;My_header.h: 162: SSP1CON2bits.ACKEN = 1;
  2060  053C  1616               	bsf	22,4	;volatile
  2061                           
  2062                           ;My_header.h: 163: return data;
  2063  053D  0020               	movlb	0	; select bank0
  2064  053E  0824               	movf	I2C_Receive@data,w
  2065  053F  0008               	return
  2066  0540                     __end_of_I2C_Receive:	
  2067                           
  2068                           	psect	text7
  2069  0605                     __ptext7:	
  2070 ;; *************** function _LCD_SetCursor *****************
  2071 ;; Defined at:
  2072 ;;		line 187 in file "My_header.h"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;  col             1    wreg     unsigned char 
  2075 ;;  row             1    7[BANK0 ] unsigned char 
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;  col             1   10[BANK0 ] unsigned char 
  2078 ;;  row_offsets     2    8[BANK0 ] unsigned char [2]
  2079 ;; Return value:  Size  Location     Type
  2080 ;;		None               void
  2081 ;; Registers used:
  2082 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2083 ;; Tracked objects:
  2084 ;;		On entry : 0/0
  2085 ;;		On exit  : 0/0
  2086 ;;		Unchanged: 0/0
  2087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2088 ;;      Params:         0       1       0       0       0       0
  2089 ;;      Locals:         0       3       0       0       0       0
  2090 ;;      Temps:          0       0       0       0       0       0
  2091 ;;      Totals:         0       4       0       0       0       0
  2092 ;;Total ram usage:        4 bytes
  2093 ;; Hardware stack levels used:    1
  2094 ;; Hardware stack levels required when called:    5
  2095 ;; This function calls:
  2096 ;;		_command
  2097 ;; This function is called by:
  2098 ;;		_timeset
  2099 ;;		_display
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           
  2104                           ;psect for function _LCD_SetCursor
  2105  0605                     _LCD_SetCursor:	
  2106                           
  2107                           ;incstack = 0
  2108                           ; Regs used in _LCD_SetCursor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2109                           ;LCD_SetCursor@col stored from wreg
  2110  0605  0020               	movlb	0	; select bank0
  2111  0606  00AA               	movwf	LCD_SetCursor@col
  2112                           
  2113                           ;My_header.h: 188: uint8_t row_offsets[] = {0x00, 0x40};
  2114  0607  084A               	movf	LCD_SetCursor@F2865+1,w
  2115  0608  01A9               	clrf	LCD_SetCursor@row_offsets+1
  2116  0609  07A9               	addwf	LCD_SetCursor@row_offsets+1,f
  2117  060A  0849               	movf	LCD_SetCursor@F2865,w
  2118  060B  01A8               	clrf	LCD_SetCursor@row_offsets
  2119  060C  07A8               	addwf	LCD_SetCursor@row_offsets,f
  2120                           
  2121                           ;My_header.h: 190: command(0x80 | (col + row_offsets[row]));
  2122  060D  0827               	movf	LCD_SetCursor@row,w
  2123  060E  3E28               	addlw	LCD_SetCursor@row_offsets& (0+255)
  2124  060F  0086               	movwf	6
  2125  0610  0187               	clrf	7
  2126  0611  0801               	movf	1,w
  2127  0612  072A               	addwf	LCD_SetCursor@col,w
  2128  0613  3880               	iorlw	128
  2129  0614  3185  2580         	fcall	_command
  2130  0616  0008               	return
  2131  0617                     __end_of_LCD_SetCursor:	
  2132                           
  2133                           	psect	text8
  2134  0540                     __ptext8:	
  2135 ;; *************** function _LCD_Putc *****************
  2136 ;; Defined at:
  2137 ;;		line 193 in file "My_header.h"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;  c               1    wreg     unsigned char 
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;  c               1    5[BANK0 ] unsigned char 
  2142 ;;  ans             1    6[BANK0 ] unsigned char 
  2143 ;; Return value:  Size  Location     Type
  2144 ;;		None               void
  2145 ;; Registers used:
  2146 ;;		wreg, status,2, status,0, pclath, cstack
  2147 ;; Tracked objects:
  2148 ;;		On entry : 0/0
  2149 ;;		On exit  : 0/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2152 ;;      Params:         0       0       0       0       0       0
  2153 ;;      Locals:         0       2       0       0       0       0
  2154 ;;      Temps:          0       1       0       0       0       0
  2155 ;;      Totals:         0       3       0       0       0       0
  2156 ;;Total ram usage:        3 bytes
  2157 ;; Hardware stack levels used:    1
  2158 ;; Hardware stack levels required when called:    4
  2159 ;; This function calls:
  2160 ;;		_I2C_Send
  2161 ;;		_I2C_Start
  2162 ;;		_I2C_Stop
  2163 ;; This function is called by:
  2164 ;;		_timeset
  2165 ;;		_display
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           
  2170                           ;psect for function _LCD_Putc
  2171  0540                     _LCD_Putc:	
  2172                           
  2173                           ;incstack = 0
  2174                           ; Regs used in _LCD_Putc: [wreg+status,2+status,0+pclath+cstack]
  2175                           ;LCD_Putc@c stored from wreg
  2176  0540  0020               	movlb	0	; select bank0
  2177  0541  00A5               	movwf	LCD_Putc@c
  2178                           
  2179                           ;My_header.h: 194: uint8_t ans;
  2180                           ;My_header.h: 196: ans = I2C_Start(0x3E, 0);
  2181  0542  01A2               	clrf	I2C_Start@rw
  2182  0543  303E               	movlw	62
  2183  0544  3185  25BD  3185   	fcall	_I2C_Start
  2184  0547  0020               	movlb	0	; select bank0
  2185  0548  00A4               	movwf	??_LCD_Putc
  2186  0549  0824               	movf	??_LCD_Putc,w
  2187  054A  00A6               	movwf	LCD_Putc@ans
  2188                           
  2189                           ;My_header.h: 197: if (ans == 0) {
  2190  054B  08A6               	movf	LCD_Putc@ans,f
  2191  054C  1D03               	skipz
  2192  054D  2D57               	goto	l143
  2193                           
  2194                           ;My_header.h: 199: I2C_Send(0b11000000);
  2195  054E  30C0               	movlw	192
  2196  054F  3185  25F2  3185   	fcall	_I2C_Send
  2197                           
  2198                           ;My_header.h: 200: I2C_Send(c);
  2199  0552  0020               	movlb	0	; select bank0
  2200  0553  0825               	movf	LCD_Putc@c,w
  2201  0554  3185  25F2  3185   	fcall	_I2C_Send
  2202  0557                     l143:	
  2203                           
  2204                           ;My_header.h: 201: }
  2205                           ;My_header.h: 202: I2C_Stop();
  2206  0557  3186  2647  3185   	fcall	_I2C_Stop
  2207                           
  2208                           ;My_header.h: 203: _delay((unsigned long)((26)*(32000000/4000000.0)));
  2209  055A  3045               	movlw	69
  2210  055B  0020               	movlb	0	; select bank0
  2211  055C  00A4               	movwf	??_LCD_Putc
  2212  055D                     u1607:	
  2213  055D  0BA4               	decfsz	??_LCD_Putc,f
  2214  055E  2D5D               	goto	u1607
  2215  055F  0008               	return
  2216  0560                     __end_of_LCD_Putc:	
  2217                           
  2218                           	psect	text9
  2219  0617                     __ptext9:	
  2220 ;; *************** function ___bmul *****************
  2221 ;; Defined at:
  2222 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul8.c"
  2223 ;; Parameters:    Size  Location     Type
  2224 ;;  multiplier      1    wreg     unsigned char 
  2225 ;;  multiplicand    1    9[BANK0 ] unsigned char 
  2226 ;; Auto vars:     Size  Location     Type
  2227 ;;  multiplier      1   12[BANK0 ] unsigned char 
  2228 ;;  product         1   11[BANK0 ] unsigned char 
  2229 ;; Return value:  Size  Location     Type
  2230 ;;                  1    wreg      unsigned char 
  2231 ;; Registers used:
  2232 ;;		wreg, status,2, status,0
  2233 ;; Tracked objects:
  2234 ;;		On entry : 0/0
  2235 ;;		On exit  : 0/0
  2236 ;;		Unchanged: 0/0
  2237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2238 ;;      Params:         0       1       0       0       0       0
  2239 ;;      Locals:         0       2       0       0       0       0
  2240 ;;      Temps:          0       1       0       0       0       0
  2241 ;;      Totals:         0       4       0       0       0       0
  2242 ;;Total ram usage:        4 bytes
  2243 ;; Hardware stack levels used:    1
  2244 ;; Hardware stack levels required when called:    2
  2245 ;; This function calls:
  2246 ;;		Nothing
  2247 ;; This function is called by:
  2248 ;;		_timeset
  2249 ;; This function uses a non-reentrant model
  2250 ;;
  2251                           
  2252                           
  2253                           ;psect for function ___bmul
  2254  0617                     ___bmul:	
  2255                           
  2256                           ;incstack = 0
  2257                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2258                           ;___bmul@multiplier stored from wreg
  2259  0617  0020               	movlb	0	; select bank0
  2260  0618  00AC               	movwf	___bmul@multiplier
  2261  0619  01AB               	clrf	___bmul@product
  2262  061A                     l1890:	
  2263  061A  1C2C               	btfss	___bmul@multiplier,0
  2264  061B  2E20               	goto	l1894
  2265  061C  0829               	movf	___bmul@multiplicand,w
  2266  061D  00AA               	movwf	??___bmul
  2267  061E  082A               	movf	??___bmul,w
  2268  061F  07AB               	addwf	___bmul@product,f
  2269  0620                     l1894:	
  2270  0620  1003               	clrc
  2271  0621  0DA9               	rlf	___bmul@multiplicand,f
  2272  0622  1003               	clrc
  2273  0623  0CAC               	rrf	___bmul@multiplier,f
  2274  0624  08AC               	movf	___bmul@multiplier,f
  2275  0625  1D03               	skipz
  2276  0626  2E1A               	goto	l1890
  2277  0627  082B               	movf	___bmul@product,w
  2278  0628  0008               	return
  2279  0629                     __end_of___bmul:	
  2280                           
  2281                           	psect	text10
  2282  0406                     __ptext10:	
  2283 ;; *************** function ___awmod *****************
  2284 ;; Defined at:
  2285 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;  divisor         2    0[BANK0 ] int 
  2288 ;;  dividend        2    2[BANK0 ] int 
  2289 ;; Auto vars:     Size  Location     Type
  2290 ;;  sign            1    6[BANK0 ] unsigned char 
  2291 ;;  counter         1    5[BANK0 ] unsigned char 
  2292 ;; Return value:  Size  Location     Type
  2293 ;;                  2    0[BANK0 ] int 
  2294 ;; Registers used:
  2295 ;;		wreg, status,2, status,0
  2296 ;; Tracked objects:
  2297 ;;		On entry : 0/0
  2298 ;;		On exit  : 0/0
  2299 ;;		Unchanged: 0/0
  2300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2301 ;;      Params:         0       4       0       0       0       0
  2302 ;;      Locals:         0       2       0       0       0       0
  2303 ;;      Temps:          0       1       0       0       0       0
  2304 ;;      Totals:         0       7       0       0       0       0
  2305 ;;Total ram usage:        7 bytes
  2306 ;; Hardware stack levels used:    1
  2307 ;; Hardware stack levels required when called:    2
  2308 ;; This function calls:
  2309 ;;		Nothing
  2310 ;; This function is called by:
  2311 ;;		_timeset
  2312 ;; This function uses a non-reentrant model
  2313 ;;
  2314                           
  2315                           
  2316                           ;psect for function ___awmod
  2317  0406                     ___awmod:	
  2318                           
  2319                           ;incstack = 0
  2320                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2321  0406  0020               	movlb	0	; select bank0
  2322  0407  01A6               	clrf	___awmod@sign
  2323  0408  1FA3               	btfss	___awmod@dividend+1,7
  2324  0409  2C11               	goto	l1912
  2325  040A  09A2               	comf	___awmod@dividend,f
  2326  040B  09A3               	comf	___awmod@dividend+1,f
  2327  040C  0AA2               	incf	___awmod@dividend,f
  2328  040D  1903               	skipnz
  2329  040E  0AA3               	incf	___awmod@dividend+1,f
  2330  040F  01A6               	clrf	___awmod@sign
  2331  0410  0AA6               	incf	___awmod@sign,f
  2332  0411                     l1912:	
  2333  0411  1FA1               	btfss	___awmod@divisor+1,7
  2334  0412  2C18               	goto	l1916
  2335  0413  09A0               	comf	___awmod@divisor,f
  2336  0414  09A1               	comf	___awmod@divisor+1,f
  2337  0415  0AA0               	incf	___awmod@divisor,f
  2338  0416  1903               	skipnz
  2339  0417  0AA1               	incf	___awmod@divisor+1,f
  2340  0418                     l1916:	
  2341  0418  0821               	movf	___awmod@divisor+1,w
  2342  0419  0420               	iorwf	___awmod@divisor,w
  2343  041A  1903               	skipnz
  2344  041B  2C3F               	goto	l1934
  2345  041C  01A5               	clrf	___awmod@counter
  2346  041D  0AA5               	incf	___awmod@counter,f
  2347  041E                     l1924:	
  2348  041E  1BA1               	btfsc	___awmod@divisor+1,7
  2349  041F  2C2A               	goto	l1926
  2350  0420  3001               	movlw	1
  2351  0421                     u1385:	
  2352  0421  35A0               	lslf	___awmod@divisor,f
  2353  0422  0DA1               	rlf	___awmod@divisor+1,f
  2354  0423  0B89               	decfsz	9,f
  2355  0424  2C21               	goto	u1385
  2356  0425  3001               	movlw	1
  2357  0426  00A4               	movwf	??___awmod
  2358  0427  0824               	movf	??___awmod,w
  2359  0428  07A5               	addwf	___awmod@counter,f
  2360  0429  2C1E               	goto	l1924
  2361  042A                     l1926:	
  2362  042A  0821               	movf	___awmod@divisor+1,w
  2363  042B  0223               	subwf	___awmod@dividend+1,w
  2364  042C  1D03               	skipz
  2365  042D  2C30               	goto	u1405
  2366  042E  0820               	movf	___awmod@divisor,w
  2367  042F  0222               	subwf	___awmod@dividend,w
  2368  0430                     u1405:	
  2369  0430  1C03               	skipc
  2370  0431  2C36               	goto	l1930
  2371  0432  0820               	movf	___awmod@divisor,w
  2372  0433  02A2               	subwf	___awmod@dividend,f
  2373  0434  0821               	movf	___awmod@divisor+1,w
  2374  0435  3BA3               	subwfb	___awmod@dividend+1,f
  2375  0436                     l1930:	
  2376  0436  3001               	movlw	1
  2377  0437                     u1415:	
  2378  0437  36A1               	lsrf	___awmod@divisor+1,f
  2379  0438  0CA0               	rrf	___awmod@divisor,f
  2380  0439  0B89               	decfsz	9,f
  2381  043A  2C37               	goto	u1415
  2382  043B  3001               	movlw	1
  2383  043C  02A5               	subwf	___awmod@counter,f
  2384  043D  1D03               	btfss	3,2
  2385  043E  2C2A               	goto	l1926
  2386  043F                     l1934:	
  2387  043F  0826               	movf	___awmod@sign,w
  2388  0440  1903               	btfsc	3,2
  2389  0441  2C47               	goto	l1938
  2390  0442  09A2               	comf	___awmod@dividend,f
  2391  0443  09A3               	comf	___awmod@dividend+1,f
  2392  0444  0AA2               	incf	___awmod@dividend,f
  2393  0445  1903               	skipnz
  2394  0446  0AA3               	incf	___awmod@dividend+1,f
  2395  0447                     l1938:	
  2396  0447  0823               	movf	___awmod@dividend+1,w
  2397  0448  01A1               	clrf	?___awmod+1
  2398  0449  07A1               	addwf	?___awmod+1,f
  2399  044A  0822               	movf	___awmod@dividend,w
  2400  044B  01A0               	clrf	?___awmod
  2401  044C  07A0               	addwf	?___awmod,f
  2402  044D  0008               	return
  2403  044E                     __end_of___awmod:	
  2404                           
  2405                           	psect	text11
  2406  0560                     __ptext11:	
  2407 ;; *************** function _RTC_Write *****************
  2408 ;; Defined at:
  2409 ;;		line 257 in file "My_header.h"
  2410 ;; Parameters:    Size  Location     Type
  2411 ;;  Reg             1    wreg     unsigned char 
  2412 ;;  c               1    4[BANK0 ] unsigned char 
  2413 ;; Auto vars:     Size  Location     Type
  2414 ;;  Reg             1    6[BANK0 ] unsigned char 
  2415 ;;  ans             1    7[BANK0 ] unsigned char 
  2416 ;; Return value:  Size  Location     Type
  2417 ;;		None               void
  2418 ;; Registers used:
  2419 ;;		wreg, status,2, status,0, pclath, cstack
  2420 ;; Tracked objects:
  2421 ;;		On entry : 0/0
  2422 ;;		On exit  : 0/0
  2423 ;;		Unchanged: 0/0
  2424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2425 ;;      Params:         0       1       0       0       0       0
  2426 ;;      Locals:         0       2       0       0       0       0
  2427 ;;      Temps:          0       1       0       0       0       0
  2428 ;;      Totals:         0       4       0       0       0       0
  2429 ;;Total ram usage:        4 bytes
  2430 ;; Hardware stack levels used:    1
  2431 ;; Hardware stack levels required when called:    4
  2432 ;; This function calls:
  2433 ;;		_I2C_Send
  2434 ;;		_I2C_Start
  2435 ;;		_I2C_Stop
  2436 ;; This function is called by:
  2437 ;;		_timeset
  2438 ;;		_main
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           
  2443                           ;psect for function _RTC_Write
  2444  0560                     _RTC_Write:	
  2445                           
  2446                           ;incstack = 0
  2447                           ; Regs used in _RTC_Write: [wreg+status,2+status,0+pclath+cstack]
  2448                           ;RTC_Write@Reg stored from wreg
  2449  0560  0020               	movlb	0	; select bank0
  2450  0561  00A6               	movwf	RTC_Write@Reg
  2451                           
  2452                           ;My_header.h: 258: uint8_t ans;
  2453                           ;My_header.h: 260: ans = I2C_Start(0x68, 0);
  2454  0562  01A2               	clrf	I2C_Start@rw
  2455  0563  3068               	movlw	104
  2456  0564  3185  25BD  3185   	fcall	_I2C_Start
  2457  0567  0020               	movlb	0	; select bank0
  2458  0568  00A5               	movwf	??_RTC_Write
  2459  0569  0825               	movf	??_RTC_Write,w
  2460  056A  00A7               	movwf	RTC_Write@ans
  2461                           
  2462                           ;My_header.h: 261: if (ans == 0) {
  2463  056B  08A7               	movf	RTC_Write@ans,f
  2464  056C  1D03               	skipz
  2465  056D  2D77               	goto	l163
  2466                           
  2467                           ;My_header.h: 263: I2C_Send(Reg);
  2468  056E  0826               	movf	RTC_Write@Reg,w
  2469  056F  3185  25F2  3185   	fcall	_I2C_Send
  2470                           
  2471                           ;My_header.h: 264: I2C_Send(c);
  2472  0572  0020               	movlb	0	; select bank0
  2473  0573  0824               	movf	RTC_Write@c,w
  2474  0574  3185  25F2  3185   	fcall	_I2C_Send
  2475  0577                     l163:	
  2476                           
  2477                           ;My_header.h: 265: }
  2478                           ;My_header.h: 266: I2C_Stop();
  2479  0577  3186  2647  3185   	fcall	_I2C_Stop
  2480                           
  2481                           ;My_header.h: 267: _delay((unsigned long)((26)*(32000000/4000000.0)));
  2482  057A  3045               	movlw	69
  2483  057B  0020               	movlb	0	; select bank0
  2484  057C  00A5               	movwf	??_RTC_Write
  2485  057D                     u1617:	
  2486  057D  0BA5               	decfsz	??_RTC_Write,f
  2487  057E  2D7D               	goto	u1617
  2488  057F  0008               	return
  2489  0580                     __end_of_RTC_Write:	
  2490                           
  2491                           	psect	text12
  2492  04CA                     __ptext12:	
  2493 ;; *************** function _LCD_Puts *****************
  2494 ;; Defined at:
  2495 ;;		line 206 in file "My_header.h"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;  s               2    4[BANK0 ] PTR const unsigned char 
  2498 ;;		 -> STR_1(3), 
  2499 ;; Auto vars:     Size  Location     Type
  2500 ;;  ans             2    8[BANK0 ] int 
  2501 ;; Return value:  Size  Location     Type
  2502 ;;		None               void
  2503 ;; Registers used:
  2504 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2505 ;; Tracked objects:
  2506 ;;		On entry : 0/0
  2507 ;;		On exit  : 0/0
  2508 ;;		Unchanged: 0/0
  2509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2510 ;;      Params:         0       2       0       0       0       0
  2511 ;;      Locals:         0       2       0       0       0       0
  2512 ;;      Temps:          0       2       0       0       0       0
  2513 ;;      Totals:         0       6       0       0       0       0
  2514 ;;Total ram usage:        6 bytes
  2515 ;; Hardware stack levels used:    1
  2516 ;; Hardware stack levels required when called:    4
  2517 ;; This function calls:
  2518 ;;		_I2C_Send
  2519 ;;		_I2C_Start
  2520 ;;		_I2C_Stop
  2521 ;; This function is called by:
  2522 ;;		_timeset
  2523 ;; This function uses a non-reentrant model
  2524 ;;
  2525                           
  2526                           
  2527                           ;psect for function _LCD_Puts
  2528  04CA                     _LCD_Puts:	
  2529                           
  2530                           ;My_header.h: 207: int ans;
  2531                           ;My_header.h: 209: ans = I2C_Start(0x3E, 0);
  2532                           
  2533                           ;incstack = 0
  2534                           ; Regs used in _LCD_Puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2535  04CA  0020               	movlb	0	; select bank0
  2536  04CB  01A2               	clrf	I2C_Start@rw
  2537  04CC  303E               	movlw	62
  2538  04CD  3185  25BD  3184   	fcall	_I2C_Start
  2539  04D0  0020               	movlb	0	; select bank0
  2540  04D1  00A6               	movwf	??_LCD_Puts
  2541  04D2  01A7               	clrf	??_LCD_Puts+1
  2542  04D3  0826               	movf	??_LCD_Puts,w
  2543  04D4  00A8               	movwf	LCD_Puts@ans
  2544  04D5  0827               	movf	??_LCD_Puts+1,w
  2545  04D6  00A9               	movwf	LCD_Puts@ans+1
  2546                           
  2547                           ;My_header.h: 210: if (ans == 0) {
  2548  04D7  0829               	movf	LCD_Puts@ans+1,w
  2549  04D8  0428               	iorwf	LCD_Puts@ans,w
  2550  04D9  1D03               	skipz
  2551  04DA  2CFB               	goto	l1856
  2552                           
  2553                           ;My_header.h: 211: I2C_Send(0b01000000);
  2554  04DB  3040               	movlw	64
  2555  04DC  3185  25F2  3184   	fcall	_I2C_Send
  2556  04DF                     l1854:	
  2557                           ;My_header.h: 212: while (*s) {
  2558                           
  2559  04DF  0020               	movlb	0	; select bank0
  2560  04E0  0824               	movf	LCD_Puts@s,w
  2561  04E1  0084               	movwf	4
  2562  04E2  0825               	movf	LCD_Puts@s+1,w
  2563  04E3  0085               	movwf	5
  2564  04E4  0800               	movf	0,w	;code access
  2565  04E5  3800               	iorlw	0
  2566  04E6  1903               	btfsc	3,2
  2567  04E7  2CFB               	goto	l1856
  2568                           
  2569                           ;My_header.h: 213: I2C_Send(*s++);
  2570  04E8  0020               	movlb	0	; select bank0
  2571  04E9  0824               	movf	LCD_Puts@s,w
  2572  04EA  0084               	movwf	4
  2573  04EB  0825               	movf	LCD_Puts@s+1,w
  2574  04EC  0085               	movwf	5
  2575  04ED  0800               	movf	0,w	;code access
  2576  04EE  3185  25F2  3184   	fcall	_I2C_Send
  2577  04F1  3001               	movlw	1
  2578  04F2  0020               	movlb	0	; select bank0
  2579  04F3  07A4               	addwf	LCD_Puts@s,f
  2580  04F4  3000               	movlw	0
  2581  04F5  3DA5               	addwfc	LCD_Puts@s+1,f
  2582                           
  2583                           ;My_header.h: 214: _delay((unsigned long)((26)*(32000000/4000000.0)));
  2584  04F6  3045               	movlw	69
  2585  04F7  00A6               	movwf	??_LCD_Puts
  2586  04F8                     u1627:	
  2587  04F8  0BA6               	decfsz	??_LCD_Puts,f
  2588  04F9  2CF8               	goto	u1627
  2589  04FA  2CDF               	goto	l1854
  2590  04FB                     l1856:	
  2591                           
  2592                           ;My_header.h: 215: }
  2593                           ;My_header.h: 216: }
  2594                           ;My_header.h: 217: I2C_Stop();
  2595  04FB  3186  2647         	fcall	_I2C_Stop
  2596  04FD  0008               	return
  2597  04FE                     __end_of_LCD_Puts:	
  2598                           
  2599                           	psect	text13
  2600  05A0                     __ptext13:	
  2601 ;; *************** function _month_length *****************
  2602 ;; Defined at:
  2603 ;;		line 56 in file "PIC16F1827-I2C03.c"
  2604 ;; Parameters:    Size  Location     Type
  2605 ;;  year            1    wreg     unsigned char 
  2606 ;;  month           1    0[BANK0 ] unsigned char 
  2607 ;; Auto vars:     Size  Location     Type
  2608 ;;  year            1    1[BANK0 ] unsigned char 
  2609 ;; Return value:  Size  Location     Type
  2610 ;;                  1    wreg      unsigned char 
  2611 ;; Registers used:
  2612 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2613 ;; Tracked objects:
  2614 ;;		On entry : 0/0
  2615 ;;		On exit  : 0/0
  2616 ;;		Unchanged: 0/0
  2617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2618 ;;      Params:         0       1       0       0       0       0
  2619 ;;      Locals:         0       1       0       0       0       0
  2620 ;;      Temps:          0       0       0       0       0       0
  2621 ;;      Totals:         0       2       0       0       0       0
  2622 ;;Total ram usage:        2 bytes
  2623 ;; Hardware stack levels used:    1
  2624 ;; Hardware stack levels required when called:    2
  2625 ;; This function calls:
  2626 ;;		Nothing
  2627 ;; This function is called by:
  2628 ;;		_main
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           
  2633                           ;psect for function _month_length
  2634  05A0                     _month_length:	
  2635                           
  2636                           ;incstack = 0
  2637                           ; Regs used in _month_length: [wreg-fsr0h+status,2+status,0]
  2638                           ;month_length@year stored from wreg
  2639  05A0  0020               	movlb	0	; select bank0
  2640  05A1  00A1               	movwf	month_length@year
  2641                           
  2642                           ;PIC16F1827-I2C03.c: 57: switch (month) {
  2643  05A2  2DAF               	goto	l1986
  2644  05A3                     l1966:	
  2645                           ;PIC16F1827-I2C03.c: 58: case 1:
  2646                           
  2647                           
  2648                           ;PIC16F1827-I2C03.c: 59: case 3:
  2649                           ;PIC16F1827-I2C03.c: 60: case 5:
  2650                           ;PIC16F1827-I2C03.c: 61: case 7:
  2651                           ;PIC16F1827-I2C03.c: 62: case 8:
  2652                           ;PIC16F1827-I2C03.c: 63: case 10:
  2653                           ;PIC16F1827-I2C03.c: 64: case 12:
  2654                           ;PIC16F1827-I2C03.c: 65: return 31;
  2655  05A3  301F               	movlw	31
  2656  05A4  0008               	return
  2657  05A5                     l1970:	
  2658                           ;PIC16F1827-I2C03.c: 66: case 4:
  2659                           
  2660                           
  2661                           ;PIC16F1827-I2C03.c: 67: case 6:
  2662                           ;PIC16F1827-I2C03.c: 68: case 9:
  2663                           ;PIC16F1827-I2C03.c: 69: case 11:
  2664                           ;PIC16F1827-I2C03.c: 70: return 30;
  2665  05A5  301E               	movlw	30
  2666  05A6  0008               	return
  2667  05A7                     l1974:	
  2668                           ;PIC16F1827-I2C03.c: 71: case 2:
  2669                           
  2670                           
  2671                           ;PIC16F1827-I2C03.c: 72: if (year % 4 == 0) return 29;
  2672  05A7  0821               	movf	month_length@year,w
  2673  05A8  3903               	andlw	3
  2674  05A9  1D03               	btfss	3,2
  2675  05AA  2DAD               	goto	l1982
  2676  05AB  301D               	movlw	29
  2677  05AC  0008               	return
  2678  05AD                     l1982:	
  2679                           
  2680                           ;PIC16F1827-I2C03.c: 73: else return 28;
  2681  05AD  301C               	movlw	28
  2682                           
  2683                           ;PIC16F1827-I2C03.c: 74: }
  2684  05AE  0008               	return
  2685  05AF                     l1986:	
  2686  05AF  0820               	movf	month_length@month,w
  2687                           
  2688                           ; Switch size 1, requested type "space"
  2689                           ; Number of cases is 12, Range of values is 1 to 12
  2690                           ; switch strategies available:
  2691                           ; Name         Instructions Cycles
  2692                           ; direct_byte           33     9 (fixed)
  2693                           ; simple_byte           37    19 (average)
  2694                           ; jumptable            263     9 (fixed)
  2695                           ;	Chosen strategy is direct_byte
  2696  05B0  3EFF               	addlw	-1
  2697  05B1  1C03               	skipc
  2698  05B2  0008               	return
  2699  05B3  0084               	movwf	4
  2700  05B4  300C               	movlw	12
  2701  05B5  0204               	subwf	4,w
  2702  05B6  1803               	skipnc
  2703  05B7  0008               	return
  2704  05B8  3185               	movlp	high S2154
  2705  05B9  3504               	lslf	4,w
  2706  05BA  3EDA               	addlw	low S2154
  2707  05BB  0082               	movwf	2
  2708  05BC  0008               	return
  2709  05BD                     __end_of_month_length:	
  2710                           
  2711                           	psect	swtext1
  2712  05DA                     __pswtext1:	
  2713  05DA                     S2154:	
  2714  05DA  3185  2DA3         	ljmp	l1966
  2715  05DC  3185  2DA7         	ljmp	l1974
  2716  05DE  3185  2DA3         	ljmp	l1966
  2717  05E0  3185  2DA5         	ljmp	l1970
  2718  05E2  3185  2DA3         	ljmp	l1966
  2719  05E4  3185  2DA5         	ljmp	l1970
  2720  05E6  3185  2DA3         	ljmp	l1966
  2721  05E8  3185  2DA3         	ljmp	l1966
  2722  05EA  3185  2DA5         	ljmp	l1970
  2723  05EC  3185  2DA3         	ljmp	l1966
  2724  05EE  3185  2DA5         	ljmp	l1970
  2725  05F0  3185  2DA3         	ljmp	l1966
  2726                           
  2727                           	psect	text14
  2728  044E                     __ptext14:	
  2729 ;; *************** function _LCD_Init *****************
  2730 ;; Defined at:
  2731 ;;		line 239 in file "My_header.h"
  2732 ;; Parameters:    Size  Location     Type
  2733 ;;		None
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;		None
  2736 ;; Return value:  Size  Location     Type
  2737 ;;		None               void
  2738 ;; Registers used:
  2739 ;;		wreg, status,2, status,0, pclath, cstack
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2745 ;;      Params:         0       0       0       0       0       0
  2746 ;;      Locals:         0       0       0       0       0       0
  2747 ;;      Temps:          0       3       0       0       0       0
  2748 ;;      Totals:         0       3       0       0       0       0
  2749 ;;Total ram usage:        3 bytes
  2750 ;; Hardware stack levels used:    1
  2751 ;; Hardware stack levels required when called:    6
  2752 ;; This function calls:
  2753 ;;		_LCD_Clear
  2754 ;;		_command
  2755 ;; This function is called by:
  2756 ;;		_main
  2757 ;; This function uses a non-reentrant model
  2758 ;;
  2759                           
  2760                           
  2761                           ;psect for function _LCD_Init
  2762  044E                     _LCD_Init:	
  2763                           
  2764                           ;My_header.h: 240: _delay((unsigned long)((40)*(32000000/4000.0)));
  2765                           
  2766                           ;incstack = 0
  2767                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  2768  044E  3002               	movlw	2
  2769  044F  0020               	movlb	0	; select bank0
  2770  0450  00AB               	movwf	??_LCD_Init+2
  2771  0451  30A0               	movlw	160
  2772  0452  00AA               	movwf	??_LCD_Init+1
  2773  0453  3092               	movlw	146
  2774  0454  00A9               	movwf	??_LCD_Init
  2775  0455                     u1637:	
  2776  0455  0BA9               	decfsz	??_LCD_Init,f
  2777  0456  2C55               	goto	u1637
  2778  0457  0BAA               	decfsz	??_LCD_Init+1,f
  2779  0458  2C55               	goto	u1637
  2780  0459  0BAB               	decfsz	??_LCD_Init+2,f
  2781  045A  2C55               	goto	u1637
  2782  045B  0000               	nop
  2783                           
  2784                           ;My_header.h: 241: command(0x38);
  2785  045C  3038               	movlw	56
  2786  045D  3185  2580  3184   	fcall	_command
  2787                           
  2788                           ;My_header.h: 242: command(0x39);
  2789  0460  3039               	movlw	57
  2790  0461  3185  2580  3184   	fcall	_command
  2791                           
  2792                           ;My_header.h: 243: command(0x14);
  2793  0464  3014               	movlw	20
  2794  0465  3185  2580  3184   	fcall	_command
  2795                           
  2796                           ;My_header.h: 244: command(0x70);
  2797  0468  3070               	movlw	112
  2798  0469  3185  2580  3184   	fcall	_command
  2799                           
  2800                           ;My_header.h: 245: command(0x56);
  2801  046C  3056               	movlw	86
  2802  046D  3185  2580  3184   	fcall	_command
  2803                           
  2804                           ;My_header.h: 246: command(0x6C);
  2805  0470  306C               	movlw	108
  2806  0471  3185  2580  3184   	fcall	_command
  2807                           
  2808                           ;My_header.h: 247: _delay((unsigned long)((200)*(32000000/4000.0)));
  2809  0474  3009               	movlw	9
  2810  0475  0020               	movlb	0	; select bank0
  2811  0476  00AB               	movwf	??_LCD_Init+2
  2812  0477  301E               	movlw	30
  2813  0478  00AA               	movwf	??_LCD_Init+1
  2814  0479  30EB               	movlw	235
  2815  047A  00A9               	movwf	??_LCD_Init
  2816  047B                     u1647:	
  2817  047B  0BA9               	decfsz	??_LCD_Init,f
  2818  047C  2C7B               	goto	u1647
  2819  047D  0BAA               	decfsz	??_LCD_Init+1,f
  2820  047E  2C7B               	goto	u1647
  2821  047F  0BAB               	decfsz	??_LCD_Init+2,f
  2822  0480  2C7B               	goto	u1647
  2823  0481  0000               	nop
  2824                           
  2825                           ;My_header.h: 248: command(0x38);
  2826  0482  3038               	movlw	56
  2827  0483  3185  2580  3184   	fcall	_command
  2828                           
  2829                           ;My_header.h: 249: command(0x0C);
  2830  0486  300C               	movlw	12
  2831  0487  3185  2580  3184   	fcall	_command
  2832                           
  2833                           ;My_header.h: 250: command(0x06);
  2834  048A  3006               	movlw	6
  2835  048B  3185  2580  3184   	fcall	_command
  2836                           
  2837                           ;My_header.h: 251: LCD_Clear();
  2838  048E  3186  2629         	fcall	_LCD_Clear
  2839  0490  0008               	return
  2840  0491                     __end_of_LCD_Init:	
  2841                           
  2842                           	psect	text15
  2843  0629                     __ptext15:	
  2844 ;; *************** function _LCD_Clear *****************
  2845 ;; Defined at:
  2846 ;;		line 182 in file "My_header.h"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;		None
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;		None
  2851 ;; Return value:  Size  Location     Type
  2852 ;;		None               void
  2853 ;; Registers used:
  2854 ;;		wreg, status,2, status,0, pclath, cstack
  2855 ;; Tracked objects:
  2856 ;;		On entry : 0/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2860 ;;      Params:         0       0       0       0       0       0
  2861 ;;      Locals:         0       0       0       0       0       0
  2862 ;;      Temps:          0       2       0       0       0       0
  2863 ;;      Totals:         0       2       0       0       0       0
  2864 ;;Total ram usage:        2 bytes
  2865 ;; Hardware stack levels used:    1
  2866 ;; Hardware stack levels required when called:    5
  2867 ;; This function calls:
  2868 ;;		_command
  2869 ;; This function is called by:
  2870 ;;		_LCD_Init
  2871 ;; This function uses a non-reentrant model
  2872 ;;
  2873                           
  2874                           
  2875                           ;psect for function _LCD_Clear
  2876  0629                     _LCD_Clear:	
  2877                           
  2878                           ;My_header.h: 183: command(0x01);
  2879                           
  2880                           ;incstack = 0
  2881                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  2882  0629  3001               	movlw	1
  2883  062A  3185  2580  3186   	fcall	_command
  2884                           
  2885                           ;My_header.h: 184: _delay((unsigned long)((1100)*(32000000/4000000.0)));
  2886  062D  300C               	movlw	12
  2887  062E  0020               	movlb	0	; select bank0
  2888  062F  00A8               	movwf	??_LCD_Clear+1
  2889  0630  306C               	movlw	108
  2890  0631  00A7               	movwf	??_LCD_Clear
  2891  0632                     u1657:	
  2892  0632  0BA7               	decfsz	??_LCD_Clear,f
  2893  0633  2E32               	goto	u1657
  2894  0634  0BA8               	decfsz	??_LCD_Clear+1,f
  2895  0635  2E32               	goto	u1657
  2896  0636  0000               	nop
  2897  0637  0008               	return
  2898  0638                     __end_of_LCD_Clear:	
  2899                           
  2900                           	psect	text16
  2901  0580                     __ptext16:	
  2902 ;; *************** function _command *****************
  2903 ;; Defined at:
  2904 ;;		line 169 in file "My_header.h"
  2905 ;; Parameters:    Size  Location     Type
  2906 ;;  c               1    wreg     unsigned char 
  2907 ;; Auto vars:     Size  Location     Type
  2908 ;;  c               1    5[BANK0 ] unsigned char 
  2909 ;;  ans             1    6[BANK0 ] unsigned char 
  2910 ;; Return value:  Size  Location     Type
  2911 ;;		None               void
  2912 ;; Registers used:
  2913 ;;		wreg, status,2, status,0, pclath, cstack
  2914 ;; Tracked objects:
  2915 ;;		On entry : 0/0
  2916 ;;		On exit  : 0/0
  2917 ;;		Unchanged: 0/0
  2918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2919 ;;      Params:         0       0       0       0       0       0
  2920 ;;      Locals:         0       2       0       0       0       0
  2921 ;;      Temps:          0       1       0       0       0       0
  2922 ;;      Totals:         0       3       0       0       0       0
  2923 ;;Total ram usage:        3 bytes
  2924 ;; Hardware stack levels used:    1
  2925 ;; Hardware stack levels required when called:    4
  2926 ;; This function calls:
  2927 ;;		_I2C_Send
  2928 ;;		_I2C_Start
  2929 ;;		_I2C_Stop
  2930 ;; This function is called by:
  2931 ;;		_LCD_Clear
  2932 ;;		_LCD_SetCursor
  2933 ;;		_LCD_Init
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937                           
  2938                           ;psect for function _command
  2939  0580                     _command:	
  2940                           
  2941                           ;incstack = 0
  2942                           ; Regs used in _command: [wreg+status,2+status,0+pclath+cstack]
  2943                           ;command@c stored from wreg
  2944  0580  0020               	movlb	0	; select bank0
  2945  0581  00A5               	movwf	command@c
  2946                           
  2947                           ;My_header.h: 170: uint8_t ans;
  2948                           ;My_header.h: 172: ans = I2C_Start(0x3E, 0);
  2949  0582  01A2               	clrf	I2C_Start@rw
  2950  0583  303E               	movlw	62
  2951  0584  3185  25BD  3185   	fcall	_I2C_Start
  2952  0587  0020               	movlb	0	; select bank0
  2953  0588  00A4               	movwf	??_command
  2954  0589  0824               	movf	??_command,w
  2955  058A  00A6               	movwf	command@ans
  2956                           
  2957                           ;My_header.h: 173: if (ans == 0) {
  2958  058B  08A6               	movf	command@ans,f
  2959  058C  1D03               	skipz
  2960  058D  2D97               	goto	l131
  2961                           
  2962                           ;My_header.h: 175: I2C_Send(0b10000000);
  2963  058E  3080               	movlw	128
  2964  058F  3185  25F2  3185   	fcall	_I2C_Send
  2965                           
  2966                           ;My_header.h: 176: I2C_Send(c);
  2967  0592  0020               	movlb	0	; select bank0
  2968  0593  0825               	movf	command@c,w
  2969  0594  3185  25F2  3185   	fcall	_I2C_Send
  2970  0597                     l131:	
  2971                           
  2972                           ;My_header.h: 177: }
  2973                           ;My_header.h: 178: I2C_Stop();
  2974  0597  3186  2647  3185   	fcall	_I2C_Stop
  2975                           
  2976                           ;My_header.h: 179: _delay((unsigned long)((26)*(32000000/4000000.0)));
  2977  059A  3045               	movlw	69
  2978  059B  0020               	movlb	0	; select bank0
  2979  059C  00A4               	movwf	??_command
  2980  059D                     u1667:	
  2981  059D  0BA4               	decfsz	??_command,f
  2982  059E  2D9D               	goto	u1667
  2983  059F  0008               	return
  2984  05A0                     __end_of_command:	
  2985                           
  2986                           	psect	text17
  2987  0647                     __ptext17:	
  2988 ;; *************** function _I2C_Stop *****************
  2989 ;; Defined at:
  2990 ;;		line 139 in file "My_header.h"
  2991 ;; Parameters:    Size  Location     Type
  2992 ;;		None
  2993 ;; Auto vars:     Size  Location     Type
  2994 ;;		None
  2995 ;; Return value:  Size  Location     Type
  2996 ;;		None               void
  2997 ;; Registers used:
  2998 ;;		wreg, status,2, status,0, pclath, cstack
  2999 ;; Tracked objects:
  3000 ;;		On entry : 0/0
  3001 ;;		On exit  : 0/0
  3002 ;;		Unchanged: 0/0
  3003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3004 ;;      Params:         0       0       0       0       0       0
  3005 ;;      Locals:         0       0       0       0       0       0
  3006 ;;      Temps:          0       0       0       0       0       0
  3007 ;;      Totals:         0       0       0       0       0       0
  3008 ;;Total ram usage:        0 bytes
  3009 ;; Hardware stack levels used:    1
  3010 ;; Hardware stack levels required when called:    3
  3011 ;; This function calls:
  3012 ;;		_I2C_IdleCheck
  3013 ;; This function is called by:
  3014 ;;		_command
  3015 ;;		_LCD_Putc
  3016 ;;		_LCD_Puts
  3017 ;;		_RTC_Write
  3018 ;;		_RTC_Read
  3019 ;;		_LCD_CreateChar
  3020 ;; This function uses a non-reentrant model
  3021 ;;
  3022                           
  3023                           
  3024                           ;psect for function _I2C_Stop
  3025  0647                     _I2C_Stop:	
  3026                           
  3027                           ;My_header.h: 141: I2C_IdleCheck(0x5);
  3028                           
  3029                           ;incstack = 0
  3030                           ; Regs used in _I2C_Stop: [wreg+status,2+status,0+pclath+cstack]
  3031  0647  3005               	movlw	5
  3032  0648  3186  2638         	fcall	_I2C_IdleCheck
  3033                           
  3034                           ;My_header.h: 142: SSP1CON2bits.PEN = 1;
  3035  064A  0024               	movlb	4	; select bank4
  3036  064B  1516               	bsf	22,2	;volatile
  3037  064C  0008               	return
  3038  064D                     __end_of_I2C_Stop:	
  3039                           
  3040                           	psect	text18
  3041  05BD                     __ptext18:	
  3042 ;; *************** function _I2C_Start *****************
  3043 ;; Defined at:
  3044 ;;		line 115 in file "My_header.h"
  3045 ;; Parameters:    Size  Location     Type
  3046 ;;  adrs            1    wreg     unsigned char 
  3047 ;;  rw              1    2[BANK0 ] unsigned char 
  3048 ;; Auto vars:     Size  Location     Type
  3049 ;;  adrs            1    3[BANK0 ] unsigned char 
  3050 ;; Return value:  Size  Location     Type
  3051 ;;                  1    wreg      unsigned char 
  3052 ;; Registers used:
  3053 ;;		wreg, status,2, status,0, pclath, cstack
  3054 ;; Tracked objects:
  3055 ;;		On entry : 0/0
  3056 ;;		On exit  : 0/0
  3057 ;;		Unchanged: 0/0
  3058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3059 ;;      Params:         0       1       0       0       0       0
  3060 ;;      Locals:         0       1       0       0       0       0
  3061 ;;      Temps:          0       0       0       0       0       0
  3062 ;;      Totals:         0       2       0       0       0       0
  3063 ;;Total ram usage:        2 bytes
  3064 ;; Hardware stack levels used:    1
  3065 ;; Hardware stack levels required when called:    3
  3066 ;; This function calls:
  3067 ;;		_I2C_IdleCheck
  3068 ;; This function is called by:
  3069 ;;		_command
  3070 ;;		_LCD_Putc
  3071 ;;		_LCD_Puts
  3072 ;;		_RTC_Write
  3073 ;;		_RTC_Read
  3074 ;;		_LCD_CreateChar
  3075 ;; This function uses a non-reentrant model
  3076 ;;
  3077                           
  3078                           
  3079                           ;psect for function _I2C_Start
  3080  05BD                     _I2C_Start:	
  3081                           
  3082                           ;incstack = 0
  3083                           ; Regs used in _I2C_Start: [wreg+status,2+status,0+pclath+cstack]
  3084                           ;I2C_Start@adrs stored from wreg
  3085  05BD  0020               	movlb	0	; select bank0
  3086  05BE  00A3               	movwf	I2C_Start@adrs
  3087                           
  3088                           ;My_header.h: 117: I2C_IdleCheck(0x5);
  3089  05BF  3005               	movlw	5
  3090  05C0  3186  2638  3185   	fcall	_I2C_IdleCheck
  3091                           
  3092                           ;My_header.h: 118: SSP1CON2bits.SEN = 1;
  3093  05C3  0024               	movlb	4	; select bank4
  3094  05C4  1416               	bsf	22,0	;volatile
  3095                           
  3096                           ;My_header.h: 120: I2C_IdleCheck(0x5);
  3097  05C5  3005               	movlw	5
  3098  05C6  3186  2638  3185   	fcall	_I2C_IdleCheck
  3099                           
  3100                           ;My_header.h: 121: AckCheck = 1;
  3101  05C9  0020               	movlb	0	; select bank0
  3102  05CA  01C0               	clrf	_AckCheck
  3103  05CB  0AC0               	incf	_AckCheck,f
  3104                           
  3105                           ;My_header.h: 122: SSP1BUF = (uint8_t) ((adrs << 1) + rw);
  3106  05CC  3523               	lslf	I2C_Start@adrs,w
  3107  05CD  0722               	addwf	I2C_Start@rw,w
  3108  05CE  0024               	movlb	4	; select bank4
  3109  05CF  0091               	movwf	17	;volatile
  3110  05D0                     l1710:	
  3111                           ;My_header.h: 123: while (AckCheck);
  3112                           
  3113  05D0  0020               	movlb	0	; select bank0
  3114  05D1  08C0               	movf	_AckCheck,f
  3115  05D2  1D03               	skipz
  3116  05D3  2DD0               	goto	l1710
  3117                           
  3118                           ;My_header.h: 124: return SSP1CON2bits.ACKSTAT;
  3119  05D4  0024               	movlb	4	; select bank4
  3120  05D5  0E16               	swapf	22,w	;volatile
  3121  05D6  0C89               	rrf	9,f
  3122  05D7  0C89               	rrf	9,f
  3123  05D8  3901               	andlw	1
  3124  05D9  0008               	return
  3125  05DA                     __end_of_I2C_Start:	
  3126                           
  3127                           	psect	text19
  3128  05F2                     __ptext19:	
  3129 ;; *************** function _I2C_Send *****************
  3130 ;; Defined at:
  3131 ;;		line 145 in file "My_header.h"
  3132 ;; Parameters:    Size  Location     Type
  3133 ;;  data            1    wreg     unsigned char 
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;  data            1    2[BANK0 ] unsigned char 
  3136 ;; Return value:  Size  Location     Type
  3137 ;;                  2  121[COMMON] int 
  3138 ;; Registers used:
  3139 ;;		wreg, status,2, status,0, pclath, cstack
  3140 ;; Tracked objects:
  3141 ;;		On entry : 0/0
  3142 ;;		On exit  : 0/0
  3143 ;;		Unchanged: 0/0
  3144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3145 ;;      Params:         0       0       0       0       0       0
  3146 ;;      Locals:         0       1       0       0       0       0
  3147 ;;      Temps:          0       0       0       0       0       0
  3148 ;;      Totals:         0       1       0       0       0       0
  3149 ;;Total ram usage:        1 bytes
  3150 ;; Hardware stack levels used:    1
  3151 ;; Hardware stack levels required when called:    3
  3152 ;; This function calls:
  3153 ;;		_I2C_IdleCheck
  3154 ;; This function is called by:
  3155 ;;		_command
  3156 ;;		_LCD_Putc
  3157 ;;		_LCD_Puts
  3158 ;;		_RTC_Write
  3159 ;;		_RTC_Read
  3160 ;;		_LCD_CreateChar
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           
  3165                           ;psect for function _I2C_Send
  3166  05F2                     _I2C_Send:	
  3167                           
  3168                           ;incstack = 0
  3169                           ; Regs used in _I2C_Send: [wreg+status,2+status,0+pclath+cstack]
  3170                           ;I2C_Send@data stored from wreg
  3171  05F2  0020               	movlb	0	; select bank0
  3172  05F3  00A2               	movwf	I2C_Send@data
  3173                           
  3174                           ;My_header.h: 146: I2C_IdleCheck(0x5);
  3175  05F4  3005               	movlw	5
  3176  05F5  3186  2638  3185   	fcall	_I2C_IdleCheck
  3177                           
  3178                           ;My_header.h: 147: AckCheck = 1;
  3179  05F8  0020               	movlb	0	; select bank0
  3180  05F9  01C0               	clrf	_AckCheck
  3181  05FA  0AC0               	incf	_AckCheck,f
  3182                           
  3183                           ;My_header.h: 148: SSP1BUF = data;
  3184  05FB  0822               	movf	I2C_Send@data,w
  3185  05FC  0024               	movlb	4	; select bank4
  3186  05FD  0091               	movwf	17	;volatile
  3187  05FE                     l1726:	
  3188                           ;My_header.h: 149: while (AckCheck);
  3189                           
  3190  05FE  0020               	movlb	0	; select bank0
  3191  05FF  08C0               	movf	_AckCheck,f
  3192  0600  1D03               	skipz
  3193  0601  2DFE               	goto	l1726
  3194                           
  3195                           ;My_header.h: 150: return SSP1CON2bits.ACKSTAT;
  3196                           ;	Return value of _I2C_Send is never used
  3197  0602  0024               	movlb	4	; select bank4
  3198  0603  0816               	movf	22,w	;volatile
  3199  0604  0008               	return
  3200  0605                     __end_of_I2C_Send:	
  3201                           
  3202                           	psect	text20
  3203  0638                     __ptext20:	
  3204 ;; *************** function _I2C_IdleCheck *****************
  3205 ;; Defined at:
  3206 ;;		line 101 in file "My_header.h"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;  mask            1    wreg     unsigned char 
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;  mask            1    1[BANK0 ] unsigned char 
  3211 ;; Return value:  Size  Location     Type
  3212 ;;		None               void
  3213 ;; Registers used:
  3214 ;;		wreg, status,2, status,0
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3220 ;;      Params:         0       0       0       0       0       0
  3221 ;;      Locals:         0       1       0       0       0       0
  3222 ;;      Temps:          0       1       0       0       0       0
  3223 ;;      Totals:         0       2       0       0       0       0
  3224 ;;Total ram usage:        2 bytes
  3225 ;; Hardware stack levels used:    1
  3226 ;; Hardware stack levels required when called:    2
  3227 ;; This function calls:
  3228 ;;		Nothing
  3229 ;; This function is called by:
  3230 ;;		_I2C_Start
  3231 ;;		_I2C_rStart
  3232 ;;		_I2C_Stop
  3233 ;;		_I2C_Send
  3234 ;;		_I2C_Receive
  3235 ;; This function uses a non-reentrant model
  3236 ;;
  3237                           
  3238                           
  3239                           ;psect for function _I2C_IdleCheck
  3240  0638                     _I2C_IdleCheck:	
  3241                           
  3242                           ;incstack = 0
  3243                           ; Regs used in _I2C_IdleCheck: [wreg+status,2+status,0]
  3244                           ;I2C_IdleCheck@mask stored from wreg
  3245  0638  0020               	movlb	0	; select bank0
  3246  0639  00A1               	movwf	I2C_IdleCheck@mask
  3247  063A                     l1700:	
  3248                           ;My_header.h: 102: while ((SSP1CON2 & 0x1F) | (SSP1STAT & mask));
  3249                           
  3250  063A  0821               	movf	I2C_IdleCheck@mask,w
  3251  063B  0024               	movlb	4	; select bank4
  3252  063C  0514               	andwf	20,w	;volatile
  3253  063D  0020               	movlb	0	; select bank0
  3254  063E  00A0               	movwf	??_I2C_IdleCheck
  3255  063F  0024               	movlb	4	; select bank4
  3256  0640  0816               	movf	22,w	;volatile
  3257  0641  391F               	andlw	31
  3258  0642  0020               	movlb	0	; select bank0
  3259  0643  0420               	iorwf	??_I2C_IdleCheck,w
  3260  0644  1903               	btfsc	3,2
  3261  0645  0008               	return
  3262  0646  2E3A               	goto	l1700
  3263  0647                     __end_of_I2C_IdleCheck:	
  3264                           
  3265                           	psect	intentry
  3266  0004                     __pintentry:	
  3267 ;; *************** function _InterFunction *****************
  3268 ;; Defined at:
  3269 ;;		line 40 in file "PIC16F1827-I2C03.c"
  3270 ;; Parameters:    Size  Location     Type
  3271 ;;		None
  3272 ;; Auto vars:     Size  Location     Type
  3273 ;;		None
  3274 ;; Return value:  Size  Location     Type
  3275 ;;		None               void
  3276 ;; Registers used:
  3277 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3278 ;; Tracked objects:
  3279 ;;		On entry : 0/0
  3280 ;;		On exit  : 0/0
  3281 ;;		Unchanged: 0/0
  3282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3283 ;;      Params:         0       0       0       0       0       0
  3284 ;;      Locals:         0       0       0       0       0       0
  3285 ;;      Temps:          2       0       0       0       0       0
  3286 ;;      Totals:         2       0       0       0       0       0
  3287 ;;Total ram usage:        2 bytes
  3288 ;; Hardware stack levels used:    1
  3289 ;; Hardware stack levels required when called:    1
  3290 ;; This function calls:
  3291 ;;		_button_timer_interrupt
  3292 ;; This function is called by:
  3293 ;;		Interrupt level 1
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297  0004                     _InterFunction:	
  3298                           
  3299                           ;incstack = 0
  3300                           ; Regs used in _InterFunction: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3301  0004  147E               	bsf	126,0	;set compiler interrupt flag
  3302  0005  3180               	pagesel	$
  3303  0006  0020               	movlb	0	; select bank0
  3304  0007  087F               	movf	127,w
  3305  0008  00FB               	movwf	??_InterFunction+1
  3306                           
  3307                           ;PIC16F1827-I2C03.c: 41: if (SSP1IF == 1) {
  3308  0009  1D91               	btfss	17,3	;volatile
  3309  000A  2811               	goto	i1l1610
  3310                           
  3311                           ;PIC16F1827-I2C03.c: 42: if (AckCheck == 1) AckCheck = 0;
  3312  000B  0840               	movf	_AckCheck,w
  3313  000C  3A01               	xorlw	1
  3314  000D  1D03               	skipz
  3315  000E  2810               	goto	i1l1608
  3316  000F  01C0               	clrf	_AckCheck
  3317  0010                     i1l1608:	
  3318                           
  3319                           ;PIC16F1827-I2C03.c: 43: SSP1IF = 0;
  3320  0010  1191               	bcf	17,3	;volatile
  3321  0011                     i1l1610:	
  3322                           
  3323                           ;PIC16F1827-I2C03.c: 44: }
  3324                           ;PIC16F1827-I2C03.c: 45: if (BCL1IF == 1) {
  3325  0011  1992               	btfsc	18,3	;volatile
  3326                           
  3327                           ;PIC16F1827-I2C03.c: 46: BCL1IF = 0;
  3328  0012  1192               	bcf	18,3	;volatile
  3329                           
  3330                           ;PIC16F1827-I2C03.c: 47: }
  3331                           ;PIC16F1827-I2C03.c: 48: if (TMR1IF == 1) {
  3332  0013  1C11               	btfss	17,0	;volatile
  3333  0014  2830               	goto	i1l196
  3334                           
  3335                           ;PIC16F1827-I2C03.c: 49: TMR1IF = 0;
  3336  0015  1011               	bcf	17,0	;volatile
  3337                           
  3338                           ;PIC16F1827-I2C03.c: 50: cnt_t1++;
  3339  0016  3001               	movlw	1
  3340  0017  00FA               	movwf	??_InterFunction
  3341  0018  087A               	movf	??_InterFunction,w
  3342  0019  07C2               	addwf	_cnt_t1,f
  3343                           
  3344                           ;PIC16F1827-I2C03.c: 51: button_timer_interrupt(&sw_RA0, !RA0);
  3345  001A  1003               	clrc
  3346  001B  1C0C               	btfss	12,0	;volatile
  3347  001C  1403               	setc
  3348  001D  3000               	movlw	0
  3349  001E  1803               	btfsc	3,0
  3350  001F  3001               	movlw	1
  3351  0020  00F6               	movwf	button_timer_interrupt@sw_value
  3352  0021  3070               	movlw	_sw_RA0& (0+255)
  3353  0022  3183  235C  3180   	fcall	_button_timer_interrupt
  3354                           
  3355                           ;PIC16F1827-I2C03.c: 52: button_timer_interrupt(&sw_RA1, !RA1);
  3356  0025  1003               	clrc
  3357  0026  0020               	movlb	0	; select bank0
  3358  0027  1C8C               	btfss	12,1	;volatile
  3359  0028  1403               	setc
  3360  0029  3000               	movlw	0
  3361  002A  1803               	btfsc	3,0
  3362  002B  3001               	movlw	1
  3363  002C  00F6               	movwf	button_timer_interrupt@sw_value
  3364  002D  3073               	movlw	_sw_RA1& (0+255)
  3365  002E  3183  235C         	fcall	_button_timer_interrupt
  3366  0030                     i1l196:	
  3367  0030  087B               	movf	??_InterFunction+1,w
  3368  0031  0020               	movlb	0	; select bank0
  3369  0032  00FF               	movwf	127
  3370  0033  107E               	bcf	126,0	;clear compiler interrupt flag
  3371  0034  0009               	retfie
  3372  0035                     __end_of_InterFunction:	
  3373                           
  3374                           	psect	text22
  3375  035C                     __ptext22:	
  3376 ;; *************** function _button_timer_interrupt *****************
  3377 ;; Defined at:
  3378 ;;		line 36 in file "My_header.h"
  3379 ;; Parameters:    Size  Location     Type
  3380 ;;  bt              1    wreg     PTR struct button
  3381 ;;		 -> sw_RA1(3), sw_RA0(3), 
  3382 ;;  sw_value        1    0[COMMON] unsigned char 
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;  bt              1    3[COMMON] PTR struct button
  3385 ;;		 -> sw_RA1(3), sw_RA0(3), 
  3386 ;; Return value:  Size  Location     Type
  3387 ;;		None               void
  3388 ;; Registers used:
  3389 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3395 ;;      Params:         1       0       0       0       0       0
  3396 ;;      Locals:         1       0       0       0       0       0
  3397 ;;      Temps:          2       0       0       0       0       0
  3398 ;;      Totals:         4       0       0       0       0       0
  3399 ;;Total ram usage:        4 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; This function calls:
  3402 ;;		Nothing
  3403 ;; This function is called by:
  3404 ;;		_InterFunction
  3405 ;; This function uses a non-reentrant model
  3406 ;;
  3407                           
  3408                           
  3409                           ;psect for function _button_timer_interrupt
  3410  035C                     _button_timer_interrupt:	
  3411                           
  3412                           ;incstack = 0
  3413                           ; Regs used in _button_timer_interrupt: [wreg+fsr1l+fsr1h+status,2+status,0]
  3414                           ;button_timer_interrupt@bt stored from wreg
  3415  035C  00F9               	movwf	button_timer_interrupt@bt
  3416                           
  3417                           ;My_header.h: 37: if (sw_value) {
  3418  035D  0876               	movf	button_timer_interrupt@sw_value,w
  3419  035E  1903               	btfsc	3,2
  3420  035F  2B77               	goto	i1l1466
  3421                           
  3422                           ;My_header.h: 38: if (bt->cnt_sw < 200 + 1) bt->cnt_sw++;
  3423  0360  0879               	movf	button_timer_interrupt@bt,w
  3424  0361  0086               	movwf	6
  3425  0362  0187               	clrf	7
  3426  0363  3F40               	moviw [0]fsr1
  3427  0364  00F7               	movwf	??_button_timer_interrupt
  3428  0365  3F41               	moviw [1]fsr1
  3429  0366  00F8               	movwf	??_button_timer_interrupt+1
  3430  0367  3000               	movlw	0
  3431  0368  0278               	subwf	??_button_timer_interrupt+1,w
  3432  0369  30C9               	movlw	201
  3433  036A  1903               	skipnz
  3434  036B  0277               	subwf	??_button_timer_interrupt,w
  3435  036C  1803               	skipnc
  3436  036D  0008               	return
  3437  036E  0879               	movf	button_timer_interrupt@bt,w
  3438  036F  0086               	movwf	6
  3439  0370  0187               	clrf	7
  3440  0371  3001               	movlw	1
  3441  0372  0781               	addwf	1,f
  3442  0373  3141               	addfsr 1,1
  3443  0374  1803               	skipnc
  3444  0375  0A81               	incf	1,f
  3445                           
  3446                           ;My_header.h: 39: } else {
  3447  0376  0008               	return
  3448  0377                     i1l1466:	
  3449                           
  3450                           ;My_header.h: 40: if (bt->cnt_sw >= 200)bt->flag.long_hold_2 = 1;
  3451  0377  0879               	movf	button_timer_interrupt@bt,w
  3452  0378  0086               	movwf	6
  3453  0379  0187               	clrf	7
  3454  037A  3F40               	moviw [0]fsr1
  3455  037B  00F7               	movwf	??_button_timer_interrupt
  3456  037C  3F41               	moviw [1]fsr1
  3457  037D  00F8               	movwf	??_button_timer_interrupt+1
  3458  037E  3000               	movlw	0
  3459  037F  0278               	subwf	??_button_timer_interrupt+1,w
  3460  0380  30C8               	movlw	200
  3461  0381  1903               	skipnz
  3462  0382  0277               	subwf	??_button_timer_interrupt,w
  3463  0383  1C03               	skipc
  3464  0384  2B8B               	goto	i1l1470
  3465  0385  0879               	movf	button_timer_interrupt@bt,w
  3466  0386  3E02               	addlw	2
  3467  0387  0086               	movwf	6
  3468  0388  0187               	clrf	7
  3469  0389  1501               	bsf	1,2
  3470  038A  2BAB               	goto	i1l67
  3471  038B                     i1l1470:	
  3472                           
  3473                           ;My_header.h: 41: else if (bt->cnt_sw >= 15)bt->flag.long_hold_1 = 1;
  3474  038B  0879               	movf	button_timer_interrupt@bt,w
  3475  038C  0086               	movwf	6
  3476  038D  0187               	clrf	7
  3477  038E  3F40               	moviw [0]fsr1
  3478  038F  00F7               	movwf	??_button_timer_interrupt
  3479  0390  3F41               	moviw [1]fsr1
  3480  0391  00F8               	movwf	??_button_timer_interrupt+1
  3481  0392  3000               	movlw	0
  3482  0393  0278               	subwf	??_button_timer_interrupt+1,w
  3483  0394  300F               	movlw	15
  3484  0395  1903               	skipnz
  3485  0396  0277               	subwf	??_button_timer_interrupt,w
  3486  0397  1C03               	skipc
  3487  0398  2B9F               	goto	i1l1474
  3488  0399  0879               	movf	button_timer_interrupt@bt,w
  3489  039A  3E02               	addlw	2
  3490  039B  0086               	movwf	6
  3491  039C  0187               	clrf	7
  3492  039D  1481               	bsf	1,1
  3493  039E  2BAB               	goto	i1l67
  3494  039F                     i1l1474:	
  3495                           
  3496                           ;My_header.h: 42: else if (bt->cnt_sw >= 1)bt->flag.press = 1;
  3497  039F  0879               	movf	button_timer_interrupt@bt,w
  3498  03A0  0086               	movwf	6
  3499  03A1  0187               	clrf	7
  3500  03A2  0016               	moviw fsr1++
  3501  03A3  0401               	iorwf	1,w
  3502  03A4  1903               	skipnz
  3503  03A5  2BAB               	goto	i1l67
  3504  03A6  0879               	movf	button_timer_interrupt@bt,w
  3505  03A7  3E02               	addlw	2
  3506  03A8  0086               	movwf	6
  3507  03A9  0187               	clrf	7
  3508  03AA  1401               	bsf	1,0
  3509  03AB                     i1l67:	
  3510                           
  3511                           ;My_header.h: 43: bt->cnt_sw = 0;
  3512  03AB  0879               	movf	button_timer_interrupt@bt,w
  3513  03AC  0086               	movwf	6
  3514  03AD  0187               	clrf	7
  3515  03AE  3000               	movlw	0
  3516  03AF  3FC0               	movwi [0]fsr1
  3517  03B0  3FC1               	movwi [1]fsr1
  3518  03B1  0008               	return
  3519  03B2                     __end_of_button_timer_interrupt:	
  3520  007E                     btemp	set	126	;btemp
  3521  007E                     pic14e$flags	set	126
  3522  007E                     wtemp	set	126
  3523  007E                     wtemp0	set	126
  3524  0080                     wtemp1	set	128
  3525  0082                     wtemp2	set	130
  3526  0084                     wtemp3	set	132
  3527  0086                     wtemp4	set	134
  3528  0088                     wtemp5	set	136
  3529  007F                     wtemp6	set	127
  3530  007E                     ttemp	set	126
  3531  007E                     ttemp0	set	126
  3532  0081                     ttemp1	set	129
  3533  0084                     ttemp2	set	132
  3534  0087                     ttemp3	set	135
  3535  007F                     ttemp4	set	127
  3536  007E                     ltemp	set	126
  3537  007E                     ltemp0	set	126
  3538  0082                     ltemp1	set	130
  3539  0086                     ltemp2	set	134
  3540  0080                     ltemp3	set	128


Data Sizes:
    Strings     3
    Constant    0
    Data        2
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     32      43
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    timeset@value	PTR unsigned char  size(1) Largest target is 1
		 -> YY(BANK0[1]), MM(BANK0[1]), DD(BANK0[1]), hh(BANK0[1]), 
		 -> mm(BANK0[1]), ss(BANK0[1]), 

    LCD_Puts@s	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    ringbuf_num@rb.buf	PTR unsigned char  size(1) Largest target is 0

    ringbuf_pop@rb.buf	PTR unsigned char  size(1) Largest target is 0

    ringbuf_push@rb.buf	PTR unsigned char  size(1) Largest target is 0

    S34ringbuf$buf	PTR unsigned char  size(1) Largest target is 0

    ringbuf_init@rb.buf	PTR unsigned char  size(1) Largest target is 0

    button_timer_interrupt@bt	PTR struct button size(1) Largest target is 3
		 -> sw_RA1(COMMON[3]), sw_RA0(COMMON[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _InterFunction in COMMON

    _InterFunction->_button_timer_interrupt

Critical Paths under _main in BANK0

    _main->_timeset
    _timeset->_display
    _display->_RTC_Read
    _RTC_Read->_I2C_rStart
    _I2C_rStart->_I2C_IdleCheck
    _I2C_Receive->_I2C_IdleCheck
    _LCD_SetCursor->_command
    _LCD_Putc->_I2C_Start
    ___bmul->___awdiv
    _RTC_Write->_I2C_Start
    _LCD_Puts->_I2C_Start
    _LCD_Init->_LCD_Clear
    _LCD_Clear->_command
    _command->_I2C_Start
    _I2C_Stop->_I2C_IdleCheck
    _I2C_Start->_I2C_IdleCheck
    _I2C_Send->_I2C_IdleCheck

Critical Paths under _InterFunction in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterFunction in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterFunction in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _InterFunction in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _InterFunction in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   30200
                                             28 BANK0      4     4      0
                           _LCD_Init
                          _RTC_Write
                            _display
                       _month_length
                            _timeset
 ---------------------------------------------------------------------------------
 (1) _timeset                                             14     9      5   20728
                                             14 BANK0     14     9      5
                           _LCD_Putc
                           _LCD_Puts
                      _LCD_SetCursor
                           _RTC_Read
                          _RTC_Write
                            ___awdiv
                            ___awmod
                             ___bmul
                            _display
                       _month_length (ARG)
 ---------------------------------------------------------------------------------
 (2) _display                                              2     2      0    6338
                                             12 BANK0      2     2      0
                           _LCD_Putc
                      _LCD_SetCursor
                           _RTC_Read
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    2733
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _RTC_Read                                             4     4      0    1340
                                              8 BANK0      4     4      0
                        _I2C_Receive
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
                         _I2C_rStart
 ---------------------------------------------------------------------------------
 (4) _I2C_rStart                                           6     2      4     301
                                              2 BANK0      6     2      4
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (4) _I2C_Receive                                          3     3      0      96
                                              2 BANK0      3     3      0
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (3) _LCD_SetCursor                                        4     3      1    1390
                                              7 BANK0      4     3      1
                            _command
 ---------------------------------------------------------------------------------
 (3) _LCD_Putc                                             3     3      0     875
                                              4 BANK0      3     3      0
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     344
                                              9 BANK0      4     3      1
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4    1057
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _RTC_Write                                            4     3      1    1218
                                              4 BANK0      4     3      1
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _LCD_Puts                                             6     4      2    1013
                                              4 BANK0      6     4      2
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (1) _month_length                                         2     1      1     166
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             3     3      0    1750
                                              9 BANK0      3     3      0
                          _LCD_Clear
                            _command
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            2     2      0     875
                                              7 BANK0      2     2      0
                            _command
 ---------------------------------------------------------------------------------
 (4) _command                                              3     3      0     875
                                              4 BANK0      3     3      0
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0      31
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            2     1      1     717
                                              2 BANK0      2     1      1
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (4) _I2C_Send                                             1     1      0      62
                                              2 BANK0      1     1      0
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (5) _I2C_IdleCheck                                        2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterFunction                                        2     2      0     524
                                              4 COMMON     2     2      0
             _button_timer_interrupt
 ---------------------------------------------------------------------------------
 (8) _button_timer_interrupt                               4     3      1     524
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCD_Clear
       _command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     _command
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
   _RTC_Write
     _I2C_Send
       _I2C_IdleCheck
     _I2C_Start
       _I2C_IdleCheck
     _I2C_Stop
       _I2C_IdleCheck
   _display
     _LCD_Putc
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
     _LCD_SetCursor
       _command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     _RTC_Read
       _I2C_Receive
         _I2C_IdleCheck
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
       _I2C_rStart
         _I2C_IdleCheck
     ___awdiv
   _month_length
   _timeset
     _LCD_Putc
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
     _LCD_Puts
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
     _LCD_SetCursor
       _command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     _RTC_Read
       _I2C_Receive
         _I2C_IdleCheck
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
       _I2C_rStart
         _I2C_IdleCheck
     _RTC_Write
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
     ___awdiv
     ___awmod
     ___bmul
       ___awdiv (ARG)
     _display
       _LCD_Putc
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
       _LCD_SetCursor
         _command
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
       _RTC_Read
         _I2C_Receive
           _I2C_IdleCheck
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
         _I2C_rStart
           _I2C_IdleCheck
       ___awdiv
     _month_length (ARG)

 _InterFunction (ROOT)
   _button_timer_interrupt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      37       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     20      2B       6       53.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      37      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Jan 09 16:26:16 2015

                              pc 0002                   ___bmul@product 002B               __size_of_I2C_Start 001D  
                    __CFG_CP$OFF 0000                               _DD 0043                               _EE 0041  
                             _MM 0044                               _YY 0045                     ___awdiv@sign 0026  
                             _hh 0046                               _mm 0047                               _ss 0048  
                   timeset@t_350 003A                    _LCD_SetCursor 0605                              l131 0597  
                            l143 0557                              l163 0577                              l167 04A3  
                            l168 04BF                              _RA0 0060                              _RA1 0061  
                   __CFG_CPD$OFF 0000                     timeset@value 003B                     ___awmod@sign 0026  
            __size_of_I2C_rStart 0022             __size_of_I2C_Receive 0020                     __CFG_BORV$LO 0000  
                            wreg 0009                             S2154 05DA                     __CFG_LVP$OFF 0000  
                           l2002 0073                             l2020 011A                             l2004 00AD  
                           l2030 016A                             l2014 00DF                             l2032 016F  
                           l2016 00E3                             l2122 0351                             l2114 02D7  
                           l2036 0054                             l2038 01A7                             l1700 063A  
                           l1710 05D0                             l1802 03BD                             l1740 050F  
                           l1820 03DC                             l1726 05FE                             l1830 03F7  
                           l1912 0411                             l1808 03C8                             l1930 0436  
                           l1834 03FF                             l1826 03EE                             l1818 03D0  
                           l1924 041E                             l1916 0418                             l1854 04DF  
                           l1926 042A                             l1934 043F                    timeset@column 0031  
                           l1856 04FB                             l1970 05A5                             l1938 0447  
                           l1890 061A                             l1982 05AD                             l1974 05A7  
                           l1966 05A3                             l1894 0620                             l1986 05AF  
                           STR_1 0700                             u1235 03D3                             u1405 0430  
                           u1415 0437                             u1255 03DD                             u1265 03E7  
                           u1505 0153                             u1275 03EF                             u1515 0181  
                           u1607 055D                             u1617 057D                             u1385 0421  
                           u1627 04F8                             u1637 0455                             u1485 00F5  
                           u1647 047B                             u1657 0632                             u1667 059D  
                           u1587 0356                             u1597 04C5                             i1l67 03AB  
                           _WPUB 020D                     __CFG_WRT$OFF 0000                             _main 02A5  
       button_timer_interrupt@bt 0079               __size_of_LCD_Clear 000F                             fsr0h 0005  
                           fsr1h 0007                             fsr0l 0004                             indf0 0000  
                           indf1 0001                             fsr1l 0006                 __end_of_I2C_Send 0605  
                           btemp 007E                 __end_of_I2C_Stop 064D                             ltemp 007E  
                           start 0035                             ttemp 007E                             wtemp 007E  
                  __CFG_IESO$OFF 0000                ___bmul@multiplier 002C           __size_of_I2C_IdleCheck 000F  
               __end_of_LCD_Init 0491                    __CFG_PLLEN$ON 0000                 __end_of_LCD_Putc 0560  
               __end_of_LCD_Puts 04FE                   ?_LCD_SetCursor 0027                            ?_main 0076  
                __end_of___awdiv 0406                      LCD_Putc@ans 0026                    __CFG_WDTE$OFF 0000  
                __end_of___awmod 044E                  ___awdiv@divisor 0020                            _T1CON 0018  
                 timeset@max_num 002F                            i1l196 0030                  ___awdiv@counter 0025  
                 timeset@min_num 002E                      LCD_Puts@ans 0028                            _TMR1H 0017  
                          _TMR1L 0016                            _PORTA 000C                            _PORTB 000D  
                          _TRISA 008C                            _TRISB 008D                     RTC_Read@data 002A  
                 __CFG_FCMEN$OFF 0000                  __end_of_command 05A0                  __end_of_display 02A5  
               __end_of_RTC_Read 04CA                __end_of_I2C_Start 05DA                   __CFG_BOREN$OFF 0000  
                          ltemp0 007E                            ltemp1 0082                            ltemp2 0086  
                          ltemp3 0080                  __end_of_timeset 01A9                            ttemp0 007E  
                          ttemp1 0081                            ttemp2 0084                            ttemp3 0087  
                          ttemp4 007F                            status 0003           __size_of_InterFunction 0031  
                          wtemp0 007E                            wtemp1 0080                            wtemp2 0082  
                          wtemp3 0084                            wtemp4 0086                            wtemp5 0088  
                          wtemp6 007F               __size_of_RTC_Write 0020                month_length@month 0020  
                 __CFG_MCLRE$OFF 0000                  __initialization 0037                     __end_of_main 035C  
                         ??_main 003C                __end_of_LCD_Clear 0638                     RTC_Write@Reg 0026  
                   RTC_Write@ans 0027                           _BCL1IE 0493                           _BCL1IF 0093  
                  _I2C_IdleCheck 0638                 ___awdiv@dividend 0022                           _ANSELA 018C  
                         _ANSELB 018D                           i1l1610 0011                           i1l1470 038B  
                         i1l1608 0010                           i1l1474 039F                           i1l1466 0377  
                         _OSCCON 0099                           _TMR1IF 0088                           _SSP1IE 048B  
                         _SSP1IF 008B                     ??_I2C_rStart 0026                   __CFG_PWRTE$OFF 0000  
                         ___bmul 0617                        ??___awdiv 0024                        ??___awmod 0024  
                ??_LCD_SetCursor 0028                           _cnt_t1 0042                 ___awdiv@quotient 0027  
                         _sw_RA0 0070                           _sw_RA1 0073                  ___awmod@divisor 0020  
                ___awmod@counter 0025                    _InterFunction 0004                        ??_command 0024  
                      ??_display 002C                __end_of_RTC_Write 0580                        ?_I2C_Send 0076  
                      ?_I2C_Stop 0076               __end_of_I2C_rStart 0520                   ?_I2C_IdleCheck 0076  
                      ??_timeset 0033          __end_of__initialization 004D                        ?_LCD_Init 0076  
                      ?_LCD_Putc 0076                        ?_LCD_Puts 0024              ___bmul@multiplicand 0029  
                 __pcstackCOMMON 0076                        LCD_Putc@c 0025                     __pidataBANK0 0703  
                      LCD_Puts@s 0024                   ?_InterFunction 0076                        ?_RTC_Read 0076  
                     ??_I2C_Send 0022                       ??_I2C_Stop 0022                       __pbssBANK0 0040  
                     ??_LCD_Init 0029                       ??_LCD_Putc 0024                       ??_LCD_Puts 0026  
                     __pmaintext 02A5                          ?___bmul 0029                       __pintentry 0004  
                     ??_RTC_Read 0028                    ??_I2C_Receive 0022                     I2C_Send@data 0022  
                ??_I2C_IdleCheck 0020                          _SSP1ADD 0212                          _SSP1BUF 0211  
       ??_button_timer_interrupt 0077                    ?_month_length 0020                        _I2C_Start 05BD  
                 I2C_Receive@ack 0023                  __size_of___bmul 0012                          ___awdiv 03B2  
                        ___awmod 0406                  ??_InterFunction 007A                  __CFG_STVREN$OFF 0000  
       LCD_SetCursor@row_offsets 0028                          __ptext1 0051                          __ptext2 01A9  
                        __ptext3 03B2                          __ptext4 0491                          __ptext5 04FE  
                        __ptext6 0520                          __ptext7 0605                          __ptext8 0540  
                        __ptext9 0617                          _command 0580                          _display 01A9  
               ___awmod@dividend 0022                        _LCD_Clear 0629              __end_of_I2C_Receive 0540  
                        _timeset 0051             end_of_initialization 004D                 LCD_SetCursor@col 002A  
               LCD_SetCursor@row 0027                   ??_month_length 0021                       ?_I2C_Start 0022  
                   I2C_rStart@rw 0024                     __pstringtext 0700                 __CFG_FOSC$INTOSC 0000  
                     ?_LCD_Clear 0076                        _RTC_Write 0560                __size_of_I2C_Send 0013  
              __size_of_I2C_Stop 0006                       command@ans 0026  __size_of_button_timer_interrupt 0056  
              __size_of_LCD_Init 0043                __size_of_LCD_Putc 0020                __size_of_LCD_Puts 0034  
                 __end_of___bmul 0629                      RTC_Read@Reg 0029                      RTC_Read@ans 002B  
          __end_of_LCD_SetCursor 0617                      _I2C_Receive 0520                __size_of_RTC_Read 0039  
            start_initialization 0037                 month_length@year 0021                       ?_RTC_Write 0024  
                    ??_I2C_Start 0023                         ??___bmul 002A                      __pdataBANK0 0049  
         _button_timer_interrupt 035C             __end_of_month_length 05BD                      __pbssCOMMON 0070  
                      ___latbits 0001                    __pcstackBANK0 0020                      ??_LCD_Clear 0027  
            __end_of__stringdata 0703                         ?___awdiv 0020                         ?___awmod 0020  
                      __pswtext1 05DA                         ?_command 0076                         ?_display 0076  
                    I2C_Start@rw 0022                         _I2C_Send 05F2                         _I2C_Stop 0647  
          __end_of_I2C_IdleCheck 0647                      ??_RTC_Write 0025                         ?_timeset 002E  
                       _LCD_Init 044E                         _LCD_Putc 0540                         _LCD_Puts 04CA  
                       _PIE1bits 0091                         _SSP1CON1 0215                         _SSP1CON2 0216  
                       _SSP1STAT 0214                         _AckCheck 0040            __end_of_InterFunction 0035  
                       _RTC_Read 0491                      __stringdata 0700                       timeset@Reg 0030  
                     timeset@row 0032   button_timer_interrupt@sw_value 0076                    I2C_Start@adrs 0023  
             LCD_SetCursor@F2865 0049                  I2C_Receive@data 0024                       RTC_Write@c 0024  
                     _I2C_rStart 04FE            __size_of_month_length 001D                 __size_of___awdiv 0054  
               __size_of___awmod 0048                I2C_IdleCheck@mask 0021                     ?_I2C_Receive 0076  
               __size_of_command 0020                 __size_of_display 00FC                         __ptext10 0406  
                       __ptext11 0560                         __ptext20 0638                         __ptext12 04CA  
                       __ptext13 05A0                         __ptext22 035C                         __ptext14 044E  
                       __ptext15 0629                         __ptext16 0580                         __ptext17 0647  
                       __ptext18 05BD                         __ptext19 05F2                     _SSP1CON1bits 0215  
                   _SSP1CON2bits 0216                 __size_of_timeset 0158                   I2C_rStart@adrs 0022  
                  __size_of_main 00B7                     _month_length 05A0          ?_button_timer_interrupt 0076  
                       command@c 0025                       _INTCONbits 000B                      pic14e$flags 007E  
                       intlevel1 0000           __size_of_LCD_SetCursor 0012                __CFG_CLKOUTEN$OFF 0000  
                    ?_I2C_rStart 0022   __end_of_button_timer_interrupt 03B2                         timeset@t 0039  
                     _OPTION_REG 0095  
