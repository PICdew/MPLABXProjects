

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Jan 22 19:35:01 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	intentry,global,class=CODE,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	dabs	1,0x7E,2
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0013                     	;# 
    68  0014                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001C                     	;# 
    78  001E                     	;# 
    79  001F                     	;# 
    80  008C                     	;# 
    81  008D                     	;# 
    82  0091                     	;# 
    83  0092                     	;# 
    84  0093                     	;# 
    85  0094                     	;# 
    86  0095                     	;# 
    87  0096                     	;# 
    88  0097                     	;# 
    89  0098                     	;# 
    90  0099                     	;# 
    91  009A                     	;# 
    92  009B                     	;# 
    93  009B                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009E                     	;# 
    97  010C                     	;# 
    98  010D                     	;# 
    99  0111                     	;# 
   100  0112                     	;# 
   101  0113                     	;# 
   102  0114                     	;# 
   103  0115                     	;# 
   104  0116                     	;# 
   105  0117                     	;# 
   106  0118                     	;# 
   107  0119                     	;# 
   108  011A                     	;# 
   109  011B                     	;# 
   110  011D                     	;# 
   111  011E                     	;# 
   112  018C                     	;# 
   113  018D                     	;# 
   114  0191                     	;# 
   115  0191                     	;# 
   116  0192                     	;# 
   117  0193                     	;# 
   118  0193                     	;# 
   119  0193                     	;# 
   120  0194                     	;# 
   121  0195                     	;# 
   122  0196                     	;# 
   123  0199                     	;# 
   124  019A                     	;# 
   125  019B                     	;# 
   126  019B                     	;# 
   127  019B                     	;# 
   128  019B                     	;# 
   129  019C                     	;# 
   130  019C                     	;# 
   131  019D                     	;# 
   132  019E                     	;# 
   133  019F                     	;# 
   134  020C                     	;# 
   135  020D                     	;# 
   136  0211                     	;# 
   137  0211                     	;# 
   138  0212                     	;# 
   139  0212                     	;# 
   140  0213                     	;# 
   141  0213                     	;# 
   142  0214                     	;# 
   143  0214                     	;# 
   144  0215                     	;# 
   145  0215                     	;# 
   146  0215                     	;# 
   147  0216                     	;# 
   148  0216                     	;# 
   149  0217                     	;# 
   150  0217                     	;# 
   151  0219                     	;# 
   152  021A                     	;# 
   153  021B                     	;# 
   154  021C                     	;# 
   155  021D                     	;# 
   156  021E                     	;# 
   157  021F                     	;# 
   158  0291                     	;# 
   159  0291                     	;# 
   160  0292                     	;# 
   161  0293                     	;# 
   162  0294                     	;# 
   163  0295                     	;# 
   164  0295                     	;# 
   165  0296                     	;# 
   166  0298                     	;# 
   167  0298                     	;# 
   168  0299                     	;# 
   169  029A                     	;# 
   170  029B                     	;# 
   171  029C                     	;# 
   172  029C                     	;# 
   173  029D                     	;# 
   174  029E                     	;# 
   175  029E                     	;# 
   176  0311                     	;# 
   177  0311                     	;# 
   178  0312                     	;# 
   179  0313                     	;# 
   180  0318                     	;# 
   181  0318                     	;# 
   182  0319                     	;# 
   183  031A                     	;# 
   184  0394                     	;# 
   185  0395                     	;# 
   186  0396                     	;# 
   187  039A                     	;# 
   188  039C                     	;# 
   189  039D                     	;# 
   190  039E                     	;# 
   191  039F                     	;# 
   192  0415                     	;# 
   193  0416                     	;# 
   194  0417                     	;# 
   195  041C                     	;# 
   196  041D                     	;# 
   197  041E                     	;# 
   198  0FE4                     	;# 
   199  0FE5                     	;# 
   200  0FE6                     	;# 
   201  0FE7                     	;# 
   202  0FE8                     	;# 
   203  0FE9                     	;# 
   204  0FEA                     	;# 
   205  0FEB                     	;# 
   206  0FED                     	;# 
   207  0FEE                     	;# 
   208  0FEF                     	;# 
   209                           
   210                           	psect	idataBANK0
   211  07FE                     __pidataBANK0:	
   212                           
   213                           ;initializer for LCD_SetCursor@F3069
   214  07FE  3400               	retlw	0
   215  07FF  3440               	retlw	64
   216                           
   217                           	psect	stringtext
   218  0800                     __pstringtext:	
   219  0800                     _dpowers:	
   220  0800  3401               	retlw	1
   221  0801  3400               	retlw	0
   222  0802  340A               	retlw	10
   223  0803  3400               	retlw	0
   224  0804  3464               	retlw	100
   225  0805  3400               	retlw	0
   226  0806  34E8               	retlw	232
   227  0807  3403               	retlw	3
   228  0808  3410               	retlw	16
   229  0809  3427               	retlw	39
   230  080A                     __end_of_dpowers:	
   231  000B                     _INTCONbits	set	11
   232  000C                     _PORTA	set	12
   233  000D                     _PORTB	set	13
   234  0018                     _T1CON	set	24
   235  0018                     _T1CONbits	set	24
   236  0017                     _TMR1H	set	23
   237  0016                     _TMR1L	set	22
   238  0093                     _BCL1IF	set	147
   239  0060                     _RA0	set	96
   240  0061                     _RA1	set	97
   241  008D                     _RCIF	set	141
   242  008B                     _SSP1IF	set	139
   243  0088                     _TMR1IF	set	136
   244  008C                     _TXIF	set	140
   245  009B                     _ADRES	set	155
   246  009D                     _ADCON0bits	set	157
   247  009E                     _ADCON1bits	set	158
   248  0095                     _OPTION_REG	set	149
   249  0095                     _OPTION_REGbits	set	149
   250  0099                     _OSCCON	set	153
   251  0091                     _PIE1bits	set	145
   252  008C                     _TRISA	set	140
   253  008D                     _TRISB	set	141
   254  048C                     _TXIE	set	1164
   255  011D                     _APFCON0bits	set	285
   256  011E                     _APFCON1bits	set	286
   257  0117                     _FVRCON	set	279
   258  0868                     _LATB0	set	2152
   259  018C                     _ANSELA	set	396
   260  018D                     _ANSELB	set	397
   261  0199                     _RCREG	set	409
   262  019D                     _RCSTA	set	413
   263  019C                     _SPBRGH	set	412
   264  019B                     _SPBRGL	set	411
   265  019A                     _TXREG	set	410
   266  019E                     _TXSTA	set	414
   267  0CFB                     _BRG16	set	3323
   268  0CEF                     _SPEN	set	3311
   269  0212                     _SSP1ADD	set	530
   270  0211                     _SSP1BUF	set	529
   271  0215                     _SSP1CON1	set	533
   272  0216                     _SSP1CON2	set	534
   273  0216                     _SSP1CON2bits	set	534
   274  0214                     _SSP1STAT	set	532
   275  020D                     _WPUB	set	525
   276  080A                     __stringdata:	
   277  080A                     STR_2:	
   278  080A  3425               	retlw	37	;'%'
   279  080B  3463               	retlw	99	;'c'
   280  080C  3425               	retlw	37	;'%'
   281  080D  3464               	retlw	100	;'d'
   282  080E  342E               	retlw	46	;'.'
   283  080F  3425               	retlw	37	;'%'
   284  0810  3430               	retlw	48	;'0'
   285  0811  3432               	retlw	50	;'2'
   286  0812  3464               	retlw	100	;'d'
   287  0813  3400               	retlw	0
   288  0814                     STR_1:	
   289  0814  3453               	retlw	83	;'S'
   290  0815  3461               	retlw	97	;'a'
   291  0816  3473               	retlw	115	;'s'
   292  0817  3473               	retlw	115	;'s'
   293  0818  346F               	retlw	111	;'o'
   294  0819  3472               	retlw	114	;'r'
   295  081A  3400               	retlw	0
   296  081B                     __end_of__stringdata:	
   297                           
   298                           ; #config settings
   299  0000                     
   300                           	psect	cinit
   301  0042                     start_initialization:	
   302  0042                     __initialization:	
   303                           
   304                           ; Clear objects allocated to COMMON
   305  0042  01F8               	clrf	__pbssCOMMON& (0+127)
   306  0043  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   307  0044  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   308  0045  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
   309                           
   310                           ; Clear objects allocated to BANK0
   311  0046  01E0               	clrf	__pbssBANK0& (0+127)
   312  0047  01E1               	clrf	(__pbssBANK0+1)& (0+127)
   313  0048  01E2               	clrf	(__pbssBANK0+2)& (0+127)
   314  0049  01E3               	clrf	(__pbssBANK0+3)& (0+127)
   315  004A  01E4               	clrf	(__pbssBANK0+4)& (0+127)
   316  004B  01E5               	clrf	(__pbssBANK0+5)& (0+127)
   317  004C  01E6               	clrf	(__pbssBANK0+6)& (0+127)
   318                           
   319                           ; Initialize objects allocated to BANK0
   320  004D  3187  27FE  3180   	fcall	__pidataBANK0	;fetch initializer
   321  0050  00E7               	movwf	__pdataBANK0& (0+127)
   322  0051  3187  27FF         	fcall	__pidataBANK0+1	;fetch initializer
   323  0053  00E8               	movwf	(__pdataBANK0+1)& (0+127)
   324  0054                     end_of_initialization:	
   325                           ;End of C runtime variable initialization code
   326                           
   327  0054                     __end_of__initialization:	
   328  0054  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
   329  0055  0020               	movlb	0
   330  0056  3182  2A53         	ljmp	_main	;jump to C main() function
   331                           
   332                           	psect	bssCOMMON
   333  0078                     __pbssCOMMON:	
   334  0078                     _cnt_t1:	
   335  0078                     	ds	1
   336  0079                     _sw_RA0:	
   337  0079                     	ds	3
   338                           
   339                           	psect	bssBANK0
   340  0060                     __pbssBANK0:	
   341  0060                     _tx_buf:	
   342  0060                     	ds	4
   343  0064                     _sw_RA1:	
   344  0064                     	ds	3
   345                           
   346                           	psect	dataBANK0
   347  0067                     __pdataBANK0:	
   348  0067                     LCD_SetCursor@F3069:	
   349  0067                     	ds	2
   350                           
   351                           	psect	cstackBANK2
   352  0120                     __pcstackBANK2:	
   353  0120                     main@tmbuf:	
   354                           
   355                           ; 50 bytes @ 0x0
   356  0120                     	ds	50
   357                           
   358                           	psect	cstackBANK1
   359  00A0                     __pcstackBANK1:	
   360  00A0                     main@buf:	
   361                           
   362                           ; 70 bytes @ 0x0
   363  00A0                     	ds	70
   364                           
   365                           	psect	cstackCOMMON
   366  0070                     __pcstackCOMMON:	
   367  0070                     ?_isdigit:	
   368  0070                     ?_button_timer_interrupt:	
   369                           ; 1 bit 
   370                           
   371  0070                     ??_ringbuf_pop:	
   372                           ; 0 bytes @ 0x0
   373                           
   374  0070                     ??_ringbuf_num:	
   375                           ; 0 bytes @ 0x0
   376                           
   377  0070                     ?_UART_init:	
   378                           ; 0 bytes @ 0x0
   379                           
   380  0070                     ?_tx_send:	
   381                           ; 0 bytes @ 0x0
   382                           
   383  0070                     ?_tx_sends:	
   384                           ; 0 bytes @ 0x0
   385                           
   386  0070                     ?_interrupt_TXIF:	
   387                           ; 0 bytes @ 0x0
   388                           
   389  0070                     ?_I2C_IdleCheck:	
   390                           ; 0 bytes @ 0x0
   391                           
   392  0070                     ?_I2C_init:	
   393                           ; 0 bytes @ 0x0
   394                           
   395  0070                     ?_I2C_Stop:	
   396                           ; 0 bytes @ 0x0
   397                           
   398  0070                     ?_LCD_Command:	
   399                           ; 0 bytes @ 0x0
   400                           
   401  0070                     ?_LCD_Clear:	
   402                           ; 0 bytes @ 0x0
   403                           
   404  0070                     ?_LCD_init:	
   405                           ; 0 bytes @ 0x0
   406                           
   407  0070                     ?_TM_init:	
   408                           ; 0 bytes @ 0x0
   409                           
   410  0070                     ?_isr:	
   411                           ; 0 bytes @ 0x0
   412                           
   413  0070                     ?_main:	
   414                           ; 0 bytes @ 0x0
   415                           
   416  0070                     ?i1_ringbuf_push:	
   417                           ; 0 bytes @ 0x0
   418                           
   419  0070                     ?i1_tx_send:	
   420                           ; 0 bytes @ 0x0
   421                           
   422  0070                     ?_ringbuf_pop:	
   423                           ; 0 bytes @ 0x0
   424                           
   425  0070                     ?_ringbuf_num:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0070                     ?_I2C_Send:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ?_I2C_Receive:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     button_timer_interrupt@sw_value:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     i1ringbuf_push@asciicode:	
   438                           ; 1 bytes @ 0x0
   439                           
   440                           
   441                           ; 1 bytes @ 0x0
   442  0070                     	ds	1
   443  0071                     ??_button_timer_interrupt:	
   444  0071                     ??i1_ringbuf_push:	
   445                           ; 0 bytes @ 0x1
   446                           
   447  0071                     ringbuf_num@rb:	
   448                           ; 0 bytes @ 0x1
   449                           
   450                           
   451                           ; 1 bytes @ 0x1
   452  0071                     	ds	1
   453  0072                     ringbuf_pop@ret:	
   454                           
   455                           ; 1 bytes @ 0x2
   456  0072                     	ds	1
   457  0073                     button_timer_interrupt@bt:	
   458  0073                     ringbuf_pop@rb:	
   459                           ; 1 bytes @ 0x3
   460                           
   461  0073                     i1ringbuf_push@rb:	
   462                           ; 1 bytes @ 0x3
   463                           
   464                           
   465                           ; 1 bytes @ 0x3
   466  0073                     	ds	1
   467  0074                     ??_interrupt_TXIF:	
   468  0074                     ??i1_tx_send:	
   469                           ; 0 bytes @ 0x4
   470                           
   471                           
   472                           ; 0 bytes @ 0x4
   473  0074                     	ds	1
   474  0075                     i1tx_send@asciicode:	
   475                           
   476                           ; 1 bytes @ 0x5
   477  0075                     	ds	1
   478  0076                     ??_isr:	
   479                           
   480                           ; 0 bytes @ 0x6
   481  0076                     	ds	2
   482                           
   483                           	psect	cstackBANK0
   484  0020                     __pcstackBANK0:	
   485  0020                     ??_isdigit:	
   486  0020                     ?_ringbuf_init:	
   487                           ; 0 bytes @ 0x0
   488                           
   489  0020                     ?_ringbuf_push:	
   490                           ; 0 bytes @ 0x0
   491                           
   492  0020                     ??_UART_init:	
   493                           ; 0 bytes @ 0x0
   494                           
   495  0020                     ?_Delay_ms:	
   496                           ; 0 bytes @ 0x0
   497                           
   498  0020                     ??_I2C_IdleCheck:	
   499                           ; 0 bytes @ 0x0
   500                           
   501  0020                     ??_I2C_init:	
   502                           ; 0 bytes @ 0x0
   503                           
   504  0020                     ?_abs:	
   505                           ; 0 bytes @ 0x0
   506                           
   507  0020                     ?___lwdiv:	
   508                           ; 2 bytes @ 0x0
   509                           
   510  0020                     ringbuf_init@internal_buf:	
   511                           ; 2 bytes @ 0x0
   512                           
   513  0020                     ringbuf_push@asciicode:	
   514                           ; 1 bytes @ 0x0
   515                           
   516  0020                     UART_init@device:	
   517                           ; 1 bytes @ 0x0
   518                           
   519  0020                     _isdigit$814:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  0020                     Delay_ms@ms:	
   523                           ; 1 bytes @ 0x0
   524                           
   525  0020                     abs@a:	
   526                           ; 2 bytes @ 0x0
   527                           
   528  0020                     ___lwdiv@divisor:	
   529                           ; 2 bytes @ 0x0
   530                           
   531                           
   532                           ; 2 bytes @ 0x0
   533  0020                     	ds	1
   534  0021                     ??_ringbuf_push:	
   535  0021                     ringbuf_init@bufsize:	
   536                           ; 0 bytes @ 0x1
   537                           
   538  0021                     I2C_IdleCheck@mask:	
   539                           ; 1 bytes @ 0x1
   540                           
   541  0021                     isdigit@c:	
   542                           ; 1 bytes @ 0x1
   543                           
   544                           
   545                           ; 1 bytes @ 0x1
   546  0021                     	ds	1
   547  0022                     ??_abs:	
   548  0022                     ??_ringbuf_init:	
   549                           ; 0 bytes @ 0x2
   550                           
   551  0022                     ??_Delay_ms:	
   552                           ; 0 bytes @ 0x2
   553                           
   554  0022                     ??_I2C_Stop:	
   555                           ; 0 bytes @ 0x2
   556                           
   557  0022                     ??_I2C_Send:	
   558                           ; 0 bytes @ 0x2
   559                           
   560  0022                     ??_I2C_Receive:	
   561                           ; 0 bytes @ 0x2
   562                           
   563  0022                     ?_I2C_Start:	
   564                           ; 0 bytes @ 0x2
   565                           
   566  0022                     ?_I2C_rStart:	
   567                           ; 1 bytes @ 0x2
   568                           
   569  0022                     I2C_Start@rw:	
   570                           ; 1 bytes @ 0x2
   571                           
   572  0022                     I2C_Send@data:	
   573                           ; 1 bytes @ 0x2
   574                           
   575  0022                     I2C_rStart@adrs:	
   576                           ; 1 bytes @ 0x2
   577                           
   578  0022                     ___lwdiv@dividend:	
   579                           ; 2 bytes @ 0x2
   580                           
   581                           
   582                           ; 2 bytes @ 0x2
   583  0022                     	ds	1
   584  0023                     ??_I2C_Start:	
   585  0023                     ringbuf_init@rb:	
   586                           ; 0 bytes @ 0x3
   587                           
   588  0023                     ringbuf_push@rb:	
   589                           ; 1 bytes @ 0x3
   590                           
   591  0023                     I2C_Start@adrs:	
   592                           ; 1 bytes @ 0x3
   593                           
   594  0023                     I2C_Receive@ack:	
   595                           ; 1 bytes @ 0x3
   596                           
   597                           
   598                           ; 1 bytes @ 0x3
   599  0023                     	ds	1
   600  0024                     ??_tx_send:	
   601  0024                     ??_tx_sends:	
   602                           ; 0 bytes @ 0x4
   603                           
   604  0024                     ??_LCD_Command:	
   605                           ; 0 bytes @ 0x4
   606                           
   607  0024                     ?_LCD_Puts:	
   608                           ; 0 bytes @ 0x4
   609                           
   610  0024                     ??_TM_init:	
   611                           ; 0 bytes @ 0x4
   612                           
   613  0024                     ??___lwdiv:	
   614                           ; 0 bytes @ 0x4
   615                           
   616  0024                     ?___awdiv:	
   617                           ; 0 bytes @ 0x4
   618                           
   619  0024                     I2C_Receive@data:	
   620                           ; 2 bytes @ 0x4
   621                           
   622  0024                     Delay_ms@i:	
   623                           ; 1 bytes @ 0x4
   624                           
   625  0024                     I2C_rStart@rw:	
   626                           ; 2 bytes @ 0x4
   627                           
   628  0024                     LCD_Puts@s:	
   629                           ; 2 bytes @ 0x4
   630                           
   631  0024                     ___awdiv@divisor:	
   632                           ; 2 bytes @ 0x4
   633                           
   634                           
   635                           ; 2 bytes @ 0x4
   636  0024                     	ds	1
   637  0025                     tx_send@asciicode:	
   638  0025                     LCD_Command@c:	
   639                           ; 1 bytes @ 0x5
   640                           
   641  0025                     TM_init@config:	
   642                           ; 1 bytes @ 0x5
   643                           
   644  0025                     ___lwdiv@quotient:	
   645                           ; 1 bytes @ 0x5
   646                           
   647                           
   648                           ; 2 bytes @ 0x5
   649  0025                     	ds	1
   650  0026                     ??_I2C_rStart:	
   651  0026                     ??_LCD_Puts:	
   652                           ; 0 bytes @ 0x6
   653                           
   654  0026                     ?_TM_Read:	
   655                           ; 0 bytes @ 0x6
   656                           
   657  0026                     tx_sends@asciicode:	
   658                           ; 2 bytes @ 0x6
   659                           
   660  0026                     LCD_Command@ans:	
   661                           ; 1 bytes @ 0x6
   662                           
   663  0026                     TM_init@ans:	
   664                           ; 1 bytes @ 0x6
   665                           
   666  0026                     ___awdiv@dividend:	
   667                           ; 1 bytes @ 0x6
   668                           
   669                           
   670                           ; 2 bytes @ 0x6
   671  0026                     	ds	1
   672  0027                     ??_LCD_Clear:	
   673  0027                     ?_LCD_SetCursor:	
   674                           ; 0 bytes @ 0x7
   675                           
   676  0027                     tx_sends@i:	
   677                           ; 0 bytes @ 0x7
   678                           
   679  0027                     LCD_SetCursor@row:	
   680                           ; 1 bytes @ 0x7
   681                           
   682  0027                     ___lwdiv@counter:	
   683                           ; 1 bytes @ 0x7
   684                           
   685                           
   686                           ; 1 bytes @ 0x7
   687  0027                     	ds	1
   688  0028                     ??_LCD_SetCursor:	
   689  0028                     ??_TM_Read:	
   690                           ; 0 bytes @ 0x8
   691                           
   692  0028                     ??___awdiv:	
   693                           ; 0 bytes @ 0x8
   694                           
   695  0028                     ?___lwmod:	
   696                           ; 0 bytes @ 0x8
   697                           
   698  0028                     LCD_SetCursor@row_offsets:	
   699                           ; 2 bytes @ 0x8
   700                           
   701  0028                     LCD_Puts@ans:	
   702                           ; 2 bytes @ 0x8
   703                           
   704  0028                     ___lwmod@divisor:	
   705                           ; 2 bytes @ 0x8
   706                           
   707                           
   708                           ; 2 bytes @ 0x8
   709  0028                     	ds	1
   710  0029                     ??_LCD_init:	
   711  0029                     ___awdiv@counter:	
   712                           ; 0 bytes @ 0x9
   713                           
   714                           
   715                           ; 1 bytes @ 0x9
   716  0029                     	ds	1
   717  002A                     LCD_SetCursor@col:	
   718  002A                     ___awdiv@sign:	
   719                           ; 1 bytes @ 0xA
   720                           
   721  002A                     ___lwmod@dividend:	
   722                           ; 1 bytes @ 0xA
   723                           
   724                           
   725                           ; 2 bytes @ 0xA
   726  002A                     	ds	1
   727  002B                     ___awdiv@quotient:	
   728                           
   729                           ; 2 bytes @ 0xB
   730  002B                     	ds	1
   731  002C                     ??___lwmod:	
   732                           
   733                           ; 0 bytes @ 0xC
   734  002C                     	ds	1
   735  002D                     ?___wmul:	
   736  002D                     TM_Read@dataH:	
   737                           ; 2 bytes @ 0xD
   738                           
   739  002D                     ___lwmod@counter:	
   740                           ; 1 bytes @ 0xD
   741                           
   742  002D                     ___wmul@multiplier:	
   743                           ; 1 bytes @ 0xD
   744                           
   745                           
   746                           ; 2 bytes @ 0xD
   747  002D                     	ds	1
   748  002E                     TM_Read@dataL:	
   749                           
   750                           ; 1 bytes @ 0xE
   751  002E                     	ds	1
   752  002F                     TM_Read@ans:	
   753  002F                     ___wmul@multiplicand:	
   754                           ; 1 bytes @ 0xF
   755                           
   756                           
   757                           ; 2 bytes @ 0xF
   758  002F                     	ds	2
   759  0031                     ??___wmul:	
   760  0031                     ___wmul@product:	
   761                           ; 0 bytes @ 0x11
   762                           
   763                           
   764                           ; 2 bytes @ 0x11
   765  0031                     	ds	2
   766  0033                     ?___awmod:	
   767  0033                     ___awmod@divisor:	
   768                           ; 2 bytes @ 0x13
   769                           
   770                           
   771                           ; 2 bytes @ 0x13
   772  0033                     	ds	2
   773  0035                     ___awmod@dividend:	
   774                           
   775                           ; 2 bytes @ 0x15
   776  0035                     	ds	2
   777  0037                     ??___awmod:	
   778                           
   779                           ; 0 bytes @ 0x17
   780  0037                     	ds	1
   781  0038                     ___awmod@counter:	
   782                           
   783                           ; 1 bytes @ 0x18
   784  0038                     	ds	1
   785  0039                     ___awmod@sign:	
   786                           
   787                           ; 1 bytes @ 0x19
   788  0039                     	ds	1
   789  003A                     ?_sprintf:	
   790  003A                     sprintf@f:	
   791                           ; 2 bytes @ 0x1A
   792                           
   793                           
   794                           ; 2 bytes @ 0x1A
   795  003A                     	ds	8
   796  0042                     ??_sprintf:	
   797                           
   798                           ; 0 bytes @ 0x22
   799  0042                     	ds	4
   800  0046                     sprintf@prec:	
   801                           
   802                           ; 1 bytes @ 0x26
   803  0046                     	ds	1
   804  0047                     sprintf@ap:	
   805                           
   806                           ; 1 bytes @ 0x27
   807  0047                     	ds	1
   808  0048                     sprintf@flag:	
   809                           
   810                           ; 1 bytes @ 0x28
   811  0048                     	ds	1
   812  0049                     sprintf@width:	
   813                           
   814                           ; 2 bytes @ 0x29
   815  0049                     	ds	2
   816  004B                     sprintf@_val:	
   817                           
   818                           ; 3 bytes @ 0x2B
   819  004B                     	ds	3
   820  004E                     sprintf@sp:	
   821                           
   822                           ; 1 bytes @ 0x2E
   823  004E                     	ds	1
   824  004F                     sprintf@c:	
   825                           
   826                           ; 1 bytes @ 0x2F
   827  004F                     	ds	1
   828  0050                     ??_main:	
   829                           
   830                           ; 0 bytes @ 0x30
   831  0050                     	ds	10
   832  005A                     _main$1087:	
   833                           
   834                           ; 2 bytes @ 0x3A
   835  005A                     	ds	2
   836  005C                     _main$1088:	
   837                           
   838                           ; 2 bytes @ 0x3C
   839  005C                     	ds	2
   840  005E                     main@temp:	
   841                           
   842                           ; 2 bytes @ 0x3E
   843  005E                     	ds	2
   844                           
   845                           	psect	maintext
   846  0253                     __pmaintext:	
   847 ;;
   848 ;;Main: autosize = 0, tempsize = 10, incstack = 0, save=0
   849 ;;
   850 ;; *************** function _main *****************
   851 ;; Defined at:
   852 ;;		line 47 in file "PIC16F1827-I2Ctemperature01.c"
   853 ;; Parameters:    Size  Location     Type
   854 ;;		None
   855 ;; Auto vars:     Size  Location     Type
   856 ;;  tmbuf          50    0[BANK2 ] unsigned char [50]
   857 ;;  temp            2   62[BANK0 ] int 
   858 ;;  buf            70    0[BANK1 ] unsigned char [70]
   859 ;; Return value:  Size  Location     Type
   860 ;;		None               void
   861 ;; Registers used:
   862 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   863 ;; Tracked objects:
   864 ;;		On entry : 17F/0
   865 ;;		On exit  : 0/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   868 ;;      Params:         0       0       0       0       0       0
   869 ;;      Locals:         0       6      70      50       0       0
   870 ;;      Temps:          0      10       0       0       0       0
   871 ;;      Totals:         0      16      70      50       0       0
   872 ;;Total ram usage:      136 bytes
   873 ;; Hardware stack levels required when called:    8
   874 ;; This function calls:
   875 ;;		_Delay_ms
   876 ;;		_I2C_init
   877 ;;		_LCD_Clear
   878 ;;		_LCD_Puts
   879 ;;		_LCD_SetCursor
   880 ;;		_LCD_init
   881 ;;		_TM_Read
   882 ;;		_TM_init
   883 ;;		_UART_init
   884 ;;		___awdiv
   885 ;;		___awmod
   886 ;;		___wmul
   887 ;;		_abs
   888 ;;		_ringbuf_init
   889 ;;		_sprintf
   890 ;;		_tx_send
   891 ;;		_tx_sends
   892 ;; This function is called by:
   893 ;;		Startup code after reset
   894 ;; This function uses a non-reentrant model
   895 ;;
   896                           
   897                           
   898                           ;psect for function _main
   899  0253                     _main:	
   900                           
   901                           ;PIC16F1827-I2Ctemperature01.c: 48: OSCCON = 0b01110000;
   902                           
   903                           ;incstack = 0
   904                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   905  0253  3070               	movlw	112
   906  0254  0021               	movlb	1	; select bank1
   907  0255  0099               	movwf	25	;volatile
   908                           
   909                           ;PIC16F1827-I2Ctemperature01.c: 49: OPTION_REG = 0b00000000;
   910  0256  0195               	clrf	21	;volatile
   911                           
   912                           ;PIC16F1827-I2Ctemperature01.c: 50: ANSELA = 0b00000000;
   913  0257  0023               	movlb	3	; select bank3
   914  0258  018C               	clrf	12	;volatile
   915                           
   916                           ;PIC16F1827-I2Ctemperature01.c: 51: ANSELB = 0b00000000;
   917  0259  018D               	clrf	13	;volatile
   918                           
   919                           ;PIC16F1827-I2Ctemperature01.c: 52: TRISA = 0b00000011;
   920  025A  3003               	movlw	3
   921  025B  0021               	movlb	1	; select bank1
   922  025C  008C               	movwf	12	;volatile
   923                           
   924                           ;PIC16F1827-I2Ctemperature01.c: 53: TRISB = 0b00010110;
   925  025D  3016               	movlw	22
   926  025E  008D               	movwf	13	;volatile
   927                           
   928                           ;PIC16F1827-I2Ctemperature01.c: 54: WPUB = 0b00010010;
   929  025F  3012               	movlw	18
   930  0260  0024               	movlb	4	; select bank4
   931  0261  008D               	movwf	13	;volatile
   932                           
   933                           ;PIC16F1827-I2Ctemperature01.c: 55: PORTA = 0b00000000;
   934  0262  0020               	movlb	0	; select bank0
   935  0263  018C               	clrf	12	;volatile
   936                           
   937                           ;PIC16F1827-I2Ctemperature01.c: 56: PORTB = 0b00000000;
   938  0264  018D               	clrf	13	;volatile
   939                           
   940                           ;PIC16F1827-I2Ctemperature01.c: 57: APFCON0bits.RXDTSEL = 1;
   941  0265  0022               	movlb	2	; select bank2
   942  0266  179D               	bsf	29,7	;volatile
   943                           
   944                           ;PIC16F1827-I2Ctemperature01.c: 58: APFCON1bits.TXCKSEL = 1;
   945  0267  141E               	bsf	30,0	;volatile
   946                           
   947                           ;PIC16F1827-I2Ctemperature01.c: 60: T1CON = 0x21;
   948  0268  3021               	movlw	33
   949  0269  0020               	movlb	0	; select bank0
   950  026A  0098               	movwf	24	;volatile
   951                           
   952                           ;PIC16F1827-I2Ctemperature01.c: 61: TMR1H = 0x00;
   953  026B  0197               	clrf	23	;volatile
   954                           
   955                           ;PIC16F1827-I2Ctemperature01.c: 62: TMR1L = 0x00;
   956  026C  0196               	clrf	22	;volatile
   957                           
   958                           ;PIC16F1827-I2Ctemperature01.c: 63: PIE1bits.TMR1IE = 1;
   959  026D  0021               	movlb	1	; select bank1
   960  026E  1411               	bsf	17,0	;volatile
   961                           
   962                           ;PIC16F1827-I2Ctemperature01.c: 65: I2C_init();
   963  026F  318F  278A  3182   	fcall	_I2C_init
   964                           
   965                           ;PIC16F1827-I2Ctemperature01.c: 66: LCD_init();
   966  0272  3185  2538  3182   	fcall	_LCD_init
   967                           
   968                           ;PIC16F1827-I2Ctemperature01.c: 67: UART_init(0);
   969  0275  3000               	movlw	0
   970  0276  3187  27E6  3182   	fcall	_UART_init
   971                           
   972                           ;PIC16F1827-I2Ctemperature01.c: 68: TM_init(0b01100000);
   973  0279  3060               	movlw	96
   974  027A  3186  26E8  3182   	fcall	_TM_init
   975                           
   976                           ;PIC16F1827-I2Ctemperature01.c: 70: INTCONbits.PEIE = 1;
   977  027D  170B               	bsf	11,6	;volatile
   978                           
   979                           ;PIC16F1827-I2Ctemperature01.c: 71: INTCONbits.GIE = 1;
   980  027E  178B               	bsf	11,7	;volatile
   981                           
   982                           ;PIC16F1827-I2Ctemperature01.c: 73: uint8_t buf[70];
   983                           ;PIC16F1827-I2Ctemperature01.c: 74: ringbuf_init(&tx_buf, buf, sizeof (buf));
   984  027F  30A0               	movlw	main@buf& (0+255)
   985  0280  0020               	movlb	0	; select bank0
   986  0281  00D0               	movwf	??_main
   987  0282  0850               	movf	??_main,w
   988  0283  00A0               	movwf	ringbuf_init@internal_buf
   989  0284  3046               	movlw	70
   990  0285  00D1               	movwf	??_main+1
   991  0286  0851               	movf	??_main+1,w
   992  0287  00A1               	movwf	ringbuf_init@bufsize
   993  0288  3060               	movlw	_tx_buf& (0+255)
   994  0289  3187  2766  3182   	fcall	_ringbuf_init
   995  028C                     l2251:	
   996                           ;PIC16F1827-I2Ctemperature01.c: 76: while (1) {
   997                           
   998                           
   999                           ;PIC16F1827-I2Ctemperature01.c: 77: if (sw_RA0.flag.press) {
  1000  028C  1C7B               	btfss	_sw_RA0+2,0
  1001  028D  2AA8               	goto	l2263
  1002                           
  1003                           ;PIC16F1827-I2Ctemperature01.c: 78: sw_RA0.flag.press = 0;
  1004  028E  107B               	bcf	_sw_RA0+2,0
  1005                           
  1006                           ;PIC16F1827-I2Ctemperature01.c: 79: LCD_Clear();
  1007  028F  318F  27B0  3182   	fcall	_LCD_Clear
  1008                           
  1009                           ;PIC16F1827-I2Ctemperature01.c: 80: LCD_SetCursor(0, 0);
  1010  0292  0020               	movlb	0	; select bank0
  1011  0293  01A7               	clrf	LCD_SetCursor@row
  1012  0294  3000               	movlw	0
  1013  0295  318F  27EE  3182   	fcall	_LCD_SetCursor
  1014                           
  1015                           ;PIC16F1827-I2Ctemperature01.c: 81: LCD_Puts("Sassor");
  1016  0298  3014               	movlw	low (STR_1| (0+32768))
  1017  0299  0020               	movlb	0	; select bank0
  1018  029A  00A4               	movwf	LCD_Puts@s
  1019  029B  3088               	movlw	high (STR_1| (0+32768))
  1020  029C  00A5               	movwf	LCD_Puts@s+1
  1021  029D  3185  25B2  3182   	fcall	_LCD_Puts
  1022                           
  1023                           ;PIC16F1827-I2Ctemperature01.c: 82: Delay_ms(5000);
  1024  02A0  3088               	movlw	136
  1025  02A1  0020               	movlb	0	; select bank0
  1026  02A2  00A0               	movwf	Delay_ms@ms
  1027  02A3  3013               	movlw	19
  1028  02A4  00A1               	movwf	Delay_ms@ms+1
  1029  02A5  3187  279C  3182   	fcall	_Delay_ms
  1030  02A8                     l2263:	
  1031                           
  1032                           ;PIC16F1827-I2Ctemperature01.c: 83: }
  1033                           ;PIC16F1827-I2Ctemperature01.c: 85: int16_t temp = TM_Read();
  1034  02A8  3184  24A3  3182   	fcall	_TM_Read
  1035  02AB  0020               	movlb	0	; select bank0
  1036  02AC  0827               	movf	?_TM_Read+1,w
  1037  02AD  01DF               	clrf	main@temp+1
  1038  02AE  07DF               	addwf	main@temp+1,f
  1039  02AF  0826               	movf	?_TM_Read,w
  1040  02B0  01DE               	clrf	main@temp
  1041  02B1  07DE               	addwf	main@temp,f
  1042                           
  1043                           ;PIC16F1827-I2Ctemperature01.c: 86: uint8_t tmbuf[50];
  1044                           ;PIC16F1827-I2Ctemperature01.c: 87: sprintf(tmbuf, "%c%d.%02d", '-' * ((temp >> 15)&1) +
      +                           '+' * (1 - ((temp >> 15)&1)), abs(temp) / 256, abs(temp) / 64 * 100 / 4 % 100);
  1045  02B2  3040               	movlw	64
  1046  02B3  00A4               	movwf	___awdiv@divisor
  1047  02B4  3000               	movlw	0
  1048  02B5  00A5               	movwf	___awdiv@divisor+1
  1049  02B6  085F               	movf	main@temp+1,w
  1050  02B7  01A1               	clrf	abs@a+1
  1051  02B8  07A1               	addwf	abs@a+1,f
  1052  02B9  085E               	movf	main@temp,w
  1053  02BA  01A0               	clrf	abs@a
  1054  02BB  07A0               	addwf	abs@a,f
  1055  02BC  318F  27BF  3182   	fcall	_abs
  1056  02BF  0020               	movlb	0	; select bank0
  1057  02C0  0821               	movf	?_abs+1,w
  1058  02C1  01A7               	clrf	___awdiv@dividend+1
  1059  02C2  07A7               	addwf	___awdiv@dividend+1,f
  1060  02C3  0820               	movf	?_abs,w
  1061  02C4  01A6               	clrf	___awdiv@dividend
  1062  02C5  07A6               	addwf	___awdiv@dividend,f
  1063  02C6  3184  244F  3182   	fcall	___awdiv
  1064  02C9  0020               	movlb	0	; select bank0
  1065  02CA  0825               	movf	?___awdiv+1,w
  1066  02CB  01AE               	clrf	___wmul@multiplier+1
  1067  02CC  07AE               	addwf	___wmul@multiplier+1,f
  1068  02CD  0824               	movf	?___awdiv,w
  1069  02CE  01AD               	clrf	___wmul@multiplier
  1070  02CF  07AD               	addwf	___wmul@multiplier,f
  1071  02D0  3064               	movlw	100
  1072  02D1  00AF               	movwf	___wmul@multiplicand
  1073  02D2  3000               	movlw	0
  1074  02D3  00B0               	movwf	___wmul@multiplicand+1
  1075  02D4  3187  2748  3182   	fcall	___wmul
  1076  02D7  0020               	movlb	0	; select bank0
  1077  02D8  082E               	movf	?___wmul+1,w
  1078  02D9  01DB               	clrf	_main$1087+1
  1079  02DA  07DB               	addwf	_main$1087+1,f
  1080  02DB  082D               	movf	?___wmul,w
  1081  02DC  01DA               	clrf	_main$1087
  1082  02DD  07DA               	addwf	_main$1087,f
  1083                           
  1084                           ;PIC16F1827-I2Ctemperature01.c: 86: uint8_t tmbuf[50];
  1085                           ;PIC16F1827-I2Ctemperature01.c: 87: sprintf(tmbuf, "%c%d.%02d", '-' * ((temp >> 15)&1) +
      +                           '+' * (1 - ((temp >> 15)&1)), abs(temp) / 256, abs(temp) / 64 * 100 / 4 % 100);
  1086  02DE  085F               	movf	main@temp+1,w
  1087  02DF  00D1               	movwf	??_main+1
  1088  02E0  085E               	movf	main@temp,w
  1089  02E1  00D0               	movwf	??_main
  1090  02E2  300F               	movlw	15
  1091  02E3  00D2               	movwf	??_main+2
  1092  02E4                     u2125:	
  1093  02E4  0D51               	rlf	??_main+1,w
  1094  02E5  0CD1               	rrf	??_main+1,f
  1095  02E6  0CD0               	rrf	??_main,f
  1096  02E7  0BD2               	decfsz	??_main+2,f
  1097  02E8  2AE4               	goto	u2125
  1098  02E9  3001               	movlw	1
  1099  02EA  0550               	andwf	??_main,w
  1100  02EB  00AD               	movwf	___wmul@multiplier
  1101  02EC  3000               	movlw	0
  1102  02ED  0551               	andwf	??_main+1,w
  1103  02EE  00AE               	movwf	___wmul@multiplier+1
  1104  02EF  302D               	movlw	45
  1105  02F0  00AF               	movwf	___wmul@multiplicand
  1106  02F1  3000               	movlw	0
  1107  02F2  00B0               	movwf	___wmul@multiplicand+1
  1108  02F3  3187  2748  3182   	fcall	___wmul
  1109  02F6  0020               	movlb	0	; select bank0
  1110  02F7  082D               	movf	?___wmul,w
  1111  02F8  00D3               	movwf	??_main+3
  1112  02F9  082E               	movf	?___wmul+1,w
  1113  02FA  00D4               	movwf	??_main+4
  1114  02FB  085F               	movf	main@temp+1,w
  1115  02FC  00D6               	movwf	??_main+6
  1116  02FD  085E               	movf	main@temp,w
  1117  02FE  00D5               	movwf	??_main+5
  1118  02FF  300F               	movlw	15
  1119  0300  00D7               	movwf	??_main+7
  1120  0301                     u2135:	
  1121  0301  0D56               	rlf	??_main+6,w
  1122  0302  0CD6               	rrf	??_main+6,f
  1123  0303  0CD5               	rrf	??_main+5,f
  1124  0304  0BD7               	decfsz	??_main+7,f
  1125  0305  2B01               	goto	u2135
  1126  0306  3001               	movlw	1
  1127  0307  0555               	andwf	??_main+5,w
  1128  0308  00D8               	movwf	??_main+8
  1129  0309  3000               	movlw	0
  1130  030A  0556               	andwf	??_main+6,w
  1131  030B  00D9               	movwf	??_main+9
  1132  030C  09D8               	comf	??_main+8,f
  1133  030D  09D9               	comf	??_main+9,f
  1134  030E  0AD8               	incf	??_main+8,f
  1135  030F  1903               	skipnz
  1136  0310  0AD9               	incf	??_main+9,f
  1137  0311  0858               	movf	??_main+8,w
  1138  0312  3E01               	addlw	1
  1139  0313  00AD               	movwf	___wmul@multiplier
  1140  0314  3000               	movlw	0
  1141  0315  3D59               	addwfc	??_main+9,w
  1142  0316  00AE               	movwf	___wmul@multiplier+1
  1143  0317  302B               	movlw	43
  1144  0318  00AF               	movwf	___wmul@multiplicand
  1145  0319  3000               	movlw	0
  1146  031A  00B0               	movwf	___wmul@multiplicand+1
  1147  031B  3187  2748  3182   	fcall	___wmul
  1148  031E  0020               	movlb	0	; select bank0
  1149  031F  082D               	movf	?___wmul,w
  1150  0320  0753               	addwf	??_main+3,w
  1151  0321  00DC               	movwf	_main$1088
  1152  0322  082E               	movf	?___wmul+1,w
  1153  0323  3D54               	addwfc	??_main+4,w
  1154  0324  00DD               	movwf	_main$1088+1
  1155                           
  1156                           ;PIC16F1827-I2Ctemperature01.c: 86: uint8_t tmbuf[50];
  1157                           ;PIC16F1827-I2Ctemperature01.c: 87: sprintf(tmbuf, "%c%d.%02d", '-' * ((temp >> 15)&1) +
      +                           '+' * (1 - ((temp >> 15)&1)), abs(temp) / 256, abs(temp) / 64 * 100 / 4 % 100);
  1158  0325  300A               	movlw	low (STR_2| (0+32768))
  1159  0326  00BA               	movwf	sprintf@f
  1160  0327  3088               	movlw	high (STR_2| (0+32768))
  1161  0328  00BB               	movwf	sprintf@f+1
  1162  0329  085D               	movf	_main$1088+1,w
  1163  032A  01BD               	clrf	?_sprintf+3
  1164  032B  07BD               	addwf	?_sprintf+3,f
  1165  032C  085C               	movf	_main$1088,w
  1166  032D  01BC               	clrf	?_sprintf+2
  1167  032E  07BC               	addwf	?_sprintf+2,f
  1168  032F  3000               	movlw	0
  1169  0330  00A4               	movwf	___awdiv@divisor
  1170  0331  3001               	movlw	1
  1171  0332  00A5               	movwf	___awdiv@divisor+1
  1172  0333  085F               	movf	main@temp+1,w
  1173  0334  01A1               	clrf	abs@a+1
  1174  0335  07A1               	addwf	abs@a+1,f
  1175  0336  085E               	movf	main@temp,w
  1176  0337  01A0               	clrf	abs@a
  1177  0338  07A0               	addwf	abs@a,f
  1178  0339  318F  27BF  3182   	fcall	_abs
  1179  033C  0020               	movlb	0	; select bank0
  1180  033D  0821               	movf	?_abs+1,w
  1181  033E  01A7               	clrf	___awdiv@dividend+1
  1182  033F  07A7               	addwf	___awdiv@dividend+1,f
  1183  0340  0820               	movf	?_abs,w
  1184  0341  01A6               	clrf	___awdiv@dividend
  1185  0342  07A6               	addwf	___awdiv@dividend,f
  1186  0343  3184  244F  3182   	fcall	___awdiv
  1187  0346  0020               	movlb	0	; select bank0
  1188  0347  0825               	movf	?___awdiv+1,w
  1189  0348  01BF               	clrf	?_sprintf+5
  1190  0349  07BF               	addwf	?_sprintf+5,f
  1191  034A  0824               	movf	?___awdiv,w
  1192  034B  01BE               	clrf	?_sprintf+4
  1193  034C  07BE               	addwf	?_sprintf+4,f
  1194  034D  3064               	movlw	100
  1195  034E  00B3               	movwf	___awmod@divisor
  1196  034F  3000               	movlw	0
  1197  0350  00B4               	movwf	___awmod@divisor+1
  1198  0351  3004               	movlw	4
  1199  0352  00A4               	movwf	___awdiv@divisor
  1200  0353  3000               	movlw	0
  1201  0354  00A5               	movwf	___awdiv@divisor+1
  1202  0355  085B               	movf	_main$1087+1,w
  1203  0356  01A7               	clrf	___awdiv@dividend+1
  1204  0357  07A7               	addwf	___awdiv@dividend+1,f
  1205  0358  085A               	movf	_main$1087,w
  1206  0359  01A6               	clrf	___awdiv@dividend
  1207  035A  07A6               	addwf	___awdiv@dividend,f
  1208  035B  3184  244F  3182   	fcall	___awdiv
  1209  035E  0020               	movlb	0	; select bank0
  1210  035F  0825               	movf	?___awdiv+1,w
  1211  0360  01B6               	clrf	___awmod@dividend+1
  1212  0361  07B6               	addwf	___awmod@dividend+1,f
  1213  0362  0824               	movf	?___awdiv,w
  1214  0363  01B5               	clrf	___awmod@dividend
  1215  0364  07B5               	addwf	___awmod@dividend,f
  1216  0365  3184  24F0  3182   	fcall	___awmod
  1217  0368  0020               	movlb	0	; select bank0
  1218  0369  0834               	movf	?___awmod+1,w
  1219  036A  01C1               	clrf	?_sprintf+7
  1220  036B  07C1               	addwf	?_sprintf+7,f
  1221  036C  0833               	movf	?___awmod,w
  1222  036D  01C0               	clrf	?_sprintf+6
  1223  036E  07C0               	addwf	?_sprintf+6,f
  1224  036F  3020               	movlw	main@tmbuf& (0+255)
  1225  0370  3180  2058  3182   	fcall	_sprintf
  1226                           
  1227                           ;PIC16F1827-I2Ctemperature01.c: 88: LCD_Clear();
  1228  0373  318F  27B0  3182   	fcall	_LCD_Clear
  1229                           
  1230                           ;PIC16F1827-I2Ctemperature01.c: 89: LCD_SetCursor(0, 1);
  1231  0376  0020               	movlb	0	; select bank0
  1232  0377  01A7               	clrf	LCD_SetCursor@row
  1233  0378  0AA7               	incf	LCD_SetCursor@row,f
  1234  0379  3000               	movlw	0
  1235  037A  318F  27EE  3182   	fcall	_LCD_SetCursor
  1236                           
  1237                           ;PIC16F1827-I2Ctemperature01.c: 90: LCD_Puts(&tmbuf);
  1238  037D  3020               	movlw	low main@tmbuf
  1239  037E  0020               	movlb	0	; select bank0
  1240  037F  00A4               	movwf	LCD_Puts@s
  1241  0380  3001               	movlw	high main@tmbuf
  1242  0381  00A5               	movwf	LCD_Puts@s+1
  1243  0382  3185  25B2  3182   	fcall	_LCD_Puts
  1244                           
  1245                           ;PIC16F1827-I2Ctemperature01.c: 91: tx_sends(&tmbuf);
  1246  0385  3020               	movlw	main@tmbuf& (0+255)
  1247  0386  3186  26C3  3182   	fcall	_tx_sends
  1248                           
  1249                           ;PIC16F1827-I2Ctemperature01.c: 92: tx_send('\r');
  1250  0389  300D               	movlw	13
  1251  038A  318F  2795  3182   	fcall	_tx_send
  1252                           
  1253                           ;PIC16F1827-I2Ctemperature01.c: 93: Delay_ms(1000);
  1254  038D  30E8               	movlw	232
  1255  038E  0020               	movlb	0	; select bank0
  1256  038F  00A0               	movwf	Delay_ms@ms
  1257  0390  3003               	movlw	3
  1258  0391  00A1               	movwf	Delay_ms@ms+1
  1259  0392  3187  279C  3182   	fcall	_Delay_ms
  1260  0395  2A8C               	goto	l2251
  1261  0396                     __end_of_main:	
  1262                           
  1263                           	psect	text1
  1264  06C3                     __ptext1:	
  1265 ;; *************** function _tx_sends *****************
  1266 ;; Defined at:
  1267 ;;		line 163 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  1268 ;; Parameters:    Size  Location     Type
  1269 ;;  asciicode       1    wreg     PTR unsigned char 
  1270 ;;		 -> main@tmbuf(50), 
  1271 ;; Auto vars:     Size  Location     Type
  1272 ;;  asciicode       1    6[BANK0 ] PTR unsigned char 
  1273 ;;		 -> main@tmbuf(50), 
  1274 ;;  i               1    7[BANK0 ] unsigned char 
  1275 ;; Return value:  Size  Location     Type
  1276 ;;		None               void
  1277 ;; Registers used:
  1278 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1279 ;; Tracked objects:
  1280 ;;		On entry : 0/0
  1281 ;;		On exit  : 0/0
  1282 ;;		Unchanged: 0/0
  1283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1284 ;;      Params:         0       0       0       0       0       0
  1285 ;;      Locals:         0       2       0       0       0       0
  1286 ;;      Temps:          0       2       0       0       0       0
  1287 ;;      Totals:         0       4       0       0       0       0
  1288 ;;Total ram usage:        4 bytes
  1289 ;; Hardware stack levels used:    1
  1290 ;; Hardware stack levels required when called:    4
  1291 ;; This function calls:
  1292 ;;		_ringbuf_push
  1293 ;; This function is called by:
  1294 ;;		_main
  1295 ;; This function uses a non-reentrant model
  1296 ;;
  1297                           
  1298                           
  1299                           ;psect for function _tx_sends
  1300  06C3                     _tx_sends:	
  1301                           
  1302                           ;incstack = 0
  1303                           ; Regs used in _tx_sends: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1304                           ;tx_sends@asciicode stored from wreg
  1305  06C3  0020               	movlb	0	; select bank0
  1306  06C4  00A6               	movwf	tx_sends@asciicode
  1307                           
  1308                           ;My_header.h: 164: uint8_t i;
  1309                           ;My_header.h: 165: for (i = 0; asciicode[i]; i++) {
  1310  06C5  01A7               	clrf	tx_sends@i
  1311  06C6                     l1813:	
  1312  06C6  0827               	movf	tx_sends@i,w
  1313  06C7  0726               	addwf	tx_sends@asciicode,w
  1314  06C8  00A4               	movwf	??_tx_sends
  1315  06C9  0824               	movf	??_tx_sends,w
  1316  06CA  0086               	movwf	6
  1317  06CB  3001               	movlw	1	; select bank2/3
  1318  06CC  0087               	movwf	7
  1319  06CD  0881               	movf	1,f
  1320  06CE  1903               	btfsc	3,2
  1321  06CF  2EE5               	goto	l161
  1322                           
  1323                           ;My_header.h: 166: ringbuf_push(&tx_buf, asciicode[i]);
  1324  06D0  0827               	movf	tx_sends@i,w
  1325  06D1  0726               	addwf	tx_sends@asciicode,w
  1326  06D2  00A4               	movwf	??_tx_sends
  1327  06D3  0824               	movf	??_tx_sends,w
  1328  06D4  0086               	movwf	6
  1329  06D5  3001               	movlw	1	; select bank2/3
  1330  06D6  0087               	movwf	7
  1331  06D7  0801               	movf	1,w
  1332  06D8  00A5               	movwf	??_tx_sends+1
  1333  06D9  0825               	movf	??_tx_sends+1,w
  1334  06DA  00A0               	movwf	ringbuf_push@asciicode
  1335  06DB  3060               	movlw	_tx_buf& (0+255)
  1336  06DC  3186  2615  3186   	fcall	_ringbuf_push
  1337  06DF  3001               	movlw	1
  1338  06E0  0020               	movlb	0	; select bank0
  1339  06E1  00A4               	movwf	??_tx_sends
  1340  06E2  0824               	movf	??_tx_sends,w
  1341  06E3  07A7               	addwf	tx_sends@i,f
  1342  06E4  2EC6               	goto	l1813
  1343  06E5                     l161:	
  1344                           
  1345                           ;My_header.h: 167: }
  1346                           ;My_header.h: 168: PIE1bits.TXIE = 1;
  1347  06E5  0021               	movlb	1	; select bank1
  1348  06E6  1611               	bsf	17,4	;volatile
  1349  06E7  0008               	return
  1350  06E8                     __end_of_tx_sends:	
  1351                           
  1352                           	psect	text2
  1353  0F95                     __ptext2:	
  1354 ;; *************** function _tx_send *****************
  1355 ;; Defined at:
  1356 ;;		line 158 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  1357 ;; Parameters:    Size  Location     Type
  1358 ;;  asciicode       1    wreg     unsigned char 
  1359 ;; Auto vars:     Size  Location     Type
  1360 ;;  asciicode       1    5[BANK0 ] unsigned char 
  1361 ;; Return value:  Size  Location     Type
  1362 ;;		None               void
  1363 ;; Registers used:
  1364 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1365 ;; Tracked objects:
  1366 ;;		On entry : 0/0
  1367 ;;		On exit  : 0/0
  1368 ;;		Unchanged: 0/0
  1369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1370 ;;      Params:         0       0       0       0       0       0
  1371 ;;      Locals:         0       1       0       0       0       0
  1372 ;;      Temps:          0       1       0       0       0       0
  1373 ;;      Totals:         0       2       0       0       0       0
  1374 ;;Total ram usage:        2 bytes
  1375 ;; Hardware stack levels used:    1
  1376 ;; Hardware stack levels required when called:    4
  1377 ;; This function calls:
  1378 ;;		_ringbuf_push
  1379 ;; This function is called by:
  1380 ;;		_main
  1381 ;; This function uses a non-reentrant model
  1382 ;;
  1383                           
  1384                           
  1385                           ;psect for function _tx_send
  1386  0F95                     _tx_send:	
  1387                           
  1388                           ;incstack = 0
  1389                           ; Regs used in _tx_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1390                           ;tx_send@asciicode stored from wreg
  1391  0F95  0020               	movlb	0	; select bank0
  1392  0F96  00A5               	movwf	tx_send@asciicode
  1393                           
  1394                           ;My_header.h: 159: ringbuf_push(&tx_buf, asciicode);
  1395  0F97  0825               	movf	tx_send@asciicode,w
  1396  0F98  00A4               	movwf	??_tx_send
  1397  0F99  0824               	movf	??_tx_send,w
  1398  0F9A  00A0               	movwf	ringbuf_push@asciicode
  1399  0F9B  3060               	movlw	_tx_buf& (0+255)
  1400  0F9C  3186  2615         	fcall	_ringbuf_push
  1401                           
  1402                           ;My_header.h: 160: PIE1bits.TXIE = 1;
  1403  0F9E  0021               	movlb	1	; select bank1
  1404  0F9F  1611               	bsf	17,4	;volatile
  1405  0FA0  0008               	return
  1406  0FA1                     __end_of_tx_send:	
  1407                           
  1408                           	psect	text3
  1409  0615                     __ptext3:	
  1410 ;; *************** function _ringbuf_push *****************
  1411 ;; Defined at:
  1412 ;;		line 118 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  1413 ;; Parameters:    Size  Location     Type
  1414 ;;  rb              1    wreg     PTR struct ringbuf
  1415 ;;		 -> tx_buf(4), 
  1416 ;;  asciicode       1    0[BANK0 ] unsigned char 
  1417 ;; Auto vars:     Size  Location     Type
  1418 ;;  rb              1    3[BANK0 ] PTR struct ringbuf
  1419 ;;		 -> tx_buf(4), 
  1420 ;; Return value:  Size  Location     Type
  1421 ;;		None               void
  1422 ;; Registers used:
  1423 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/0
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1429 ;;      Params:         0       1       0       0       0       0
  1430 ;;      Locals:         0       1       0       0       0       0
  1431 ;;      Temps:          0       2       0       0       0       0
  1432 ;;      Totals:         0       4       0       0       0       0
  1433 ;;Total ram usage:        4 bytes
  1434 ;; Hardware stack levels used:    1
  1435 ;; Hardware stack levels required when called:    3
  1436 ;; This function calls:
  1437 ;;		Nothing
  1438 ;; This function is called by:
  1439 ;;		_tx_send
  1440 ;;		_tx_sends
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           
  1445                           ;psect for function _ringbuf_push
  1446  0615                     _ringbuf_push:	
  1447                           
  1448                           ;incstack = 0
  1449                           ; Regs used in _ringbuf_push: [wreg-fsr1h+status,2+status,0]
  1450                           ;ringbuf_push@rb stored from wreg
  1451  0615  0020               	movlb	0	; select bank0
  1452  0616  00A3               	movwf	ringbuf_push@rb
  1453                           
  1454                           ;My_header.h: 119: rb->buf[rb->head] = asciicode;
  1455  0617  0820               	movf	ringbuf_push@asciicode,w
  1456  0618  00A1               	movwf	??_ringbuf_push
  1457  0619  0823               	movf	ringbuf_push@rb,w
  1458  061A  0086               	movwf	6
  1459  061B  0187               	clrf	7
  1460  061C  0823               	movf	ringbuf_push@rb,w
  1461  061D  3E02               	addlw	2
  1462  061E  0084               	movwf	4
  1463  061F  0185               	clrf	5
  1464  0620  0800               	movf	0,w
  1465  0621  0701               	addwf	1,w
  1466  0622  00A2               	movwf	??_ringbuf_push+1
  1467  0623  0822               	movf	??_ringbuf_push+1,w
  1468  0624  0086               	movwf	6
  1469  0625  0187               	clrf	7
  1470  0626  0821               	movf	??_ringbuf_push,w
  1471  0627  0081               	movwf	1
  1472                           
  1473                           ;My_header.h: 120: rb->head++;
  1474  0628  3001               	movlw	1
  1475  0629  00A1               	movwf	??_ringbuf_push
  1476  062A  0823               	movf	ringbuf_push@rb,w
  1477  062B  3E02               	addlw	2
  1478  062C  0086               	movwf	6
  1479  062D  0187               	clrf	7
  1480  062E  0821               	movf	??_ringbuf_push,w
  1481  062F  0781               	addwf	1,f
  1482                           
  1483                           ;My_header.h: 121: if (rb->head >= rb->size) {
  1484  0630  0823               	movf	ringbuf_push@rb,w
  1485  0631  3E02               	addlw	2
  1486  0632  0086               	movwf	6
  1487  0633  0187               	clrf	7
  1488  0634  0A23               	incf	ringbuf_push@rb,w
  1489  0635  0084               	movwf	4
  1490  0636  0185               	clrf	5
  1491  0637  0800               	movf	0,w
  1492  0638  0201               	subwf	1,w
  1493  0639  1C03               	skipc
  1494  063A  0008               	return
  1495                           
  1496                           ;My_header.h: 122: rb->head = 0;
  1497  063B  0823               	movf	ringbuf_push@rb,w
  1498  063C  3E02               	addlw	2
  1499  063D  0086               	movwf	6
  1500  063E  0187               	clrf	7
  1501  063F  0181               	clrf	1
  1502  0640  0008               	return
  1503  0641                     __end_of_ringbuf_push:	
  1504                           
  1505                           	psect	text4
  1506  0058                     __ptext4:	
  1507 ;; *************** function _sprintf *****************
  1508 ;; Defined at:
  1509 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;  sp              1    wreg     PTR unsigned char 
  1512 ;;		 -> main@tmbuf(50), 
  1513 ;;  f               2   26[BANK0 ] PTR const unsigned char 
  1514 ;;		 -> STR_2(10), 
  1515 ;; Auto vars:     Size  Location     Type
  1516 ;;  sp              1   46[BANK0 ] PTR unsigned char 
  1517 ;;		 -> main@tmbuf(50), 
  1518 ;;  _val            3   43[BANK0 ] struct .
  1519 ;;  width           2   41[BANK0 ] int 
  1520 ;;  c               1   47[BANK0 ] char 
  1521 ;;  flag            1   40[BANK0 ] unsigned char 
  1522 ;;  ap              1   39[BANK0 ] PTR void [1]
  1523 ;;		 -> ?_sprintf(2), 
  1524 ;;  prec            1   38[BANK0 ] char 
  1525 ;; Return value:  Size  Location     Type
  1526 ;;                  2   26[BANK0 ] int 
  1527 ;; Registers used:
  1528 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1529 ;; Tracked objects:
  1530 ;;		On entry : 0/0
  1531 ;;		On exit  : 0/0
  1532 ;;		Unchanged: 0/0
  1533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1534 ;;      Params:         0       8       0       0       0       0
  1535 ;;      Locals:         0      10       0       0       0       0
  1536 ;;      Temps:          0       4       0       0       0       0
  1537 ;;      Totals:         0      22       0       0       0       0
  1538 ;;Total ram usage:       22 bytes
  1539 ;; Hardware stack levels used:    1
  1540 ;; Hardware stack levels required when called:    4
  1541 ;; This function calls:
  1542 ;;		___lwdiv
  1543 ;;		___lwmod
  1544 ;;		___wmul
  1545 ;;		_isdigit
  1546 ;; This function is called by:
  1547 ;;		_main
  1548 ;; This function uses a non-reentrant model
  1549 ;;
  1550                           
  1551                           
  1552                           ;psect for function _sprintf
  1553  0058                     _sprintf:	
  1554                           
  1555                           ;incstack = 0
  1556                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1557                           ;sprintf@sp stored from wreg
  1558  0058  0020               	movlb	0	; select bank0
  1559  0059  00CE               	movwf	sprintf@sp
  1560                           
  1561                           ;doprnt.c: 494: va_list ap;
  1562                           ;doprnt.c: 499: signed char c;
  1563                           ;doprnt.c: 501: int width;
  1564                           ;doprnt.c: 506: signed char prec;
  1565                           ;doprnt.c: 508: unsigned char flag;
  1566                           ;doprnt.c: 527: union {
  1567                           ;doprnt.c: 528: unsigned int _val;
  1568                           ;doprnt.c: 529: struct {
  1569                           ;doprnt.c: 530: const char * _cp;
  1570                           ;doprnt.c: 531: unsigned _len;
  1571                           ;doprnt.c: 532: } _str;
  1572                           ;doprnt.c: 533: } _val;
  1573                           ;doprnt.c: 542: *ap = __va_start();
  1574  005A  303C               	movlw	(?_sprintf+2)& (0+255)
  1575  005B  00C2               	movwf	??_sprintf
  1576  005C  0842               	movf	??_sprintf,w
  1577  005D  00C7               	movwf	sprintf@ap
  1578  005E                     l2039:	
  1579                           ;doprnt.c: 545: while(c = *f++) {
  1580                           
  1581  005E  083B               	movf	sprintf@f+1,w
  1582  005F  00C3               	movwf	??_sprintf+1
  1583  0060  083A               	movf	sprintf@f,w
  1584  0061  00C2               	movwf	??_sprintf
  1585  0062  0ABA               	incf	sprintf@f,f
  1586  0063  1903               	skipnz
  1587  0064  0ABB               	incf	sprintf@f+1,f
  1588  0065  0842               	movf	??_sprintf,w
  1589  0066  0084               	movwf	4
  1590  0067  0843               	movf	??_sprintf+1,w
  1591  0068  0085               	movwf	5
  1592  0069  0800               	movf	0,w	;code access
  1593  006A  00C4               	movwf	??_sprintf+2
  1594  006B  0844               	movf	??_sprintf+2,w
  1595  006C  00CF               	movwf	sprintf@c
  1596  006D  08CF               	movf	sprintf@c,f
  1597  006E  1903               	btfsc	3,2
  1598  006F  2A4C               	goto	l2041
  1599                           
  1600                           ;doprnt.c: 547: if(c != '%')
  1601  0070  084F               	movf	sprintf@c,w
  1602  0071  3A25               	xorlw	37
  1603  0072  1903               	skipnz
  1604  0073  2881               	goto	l1915
  1605                           
  1606                           ;doprnt.c: 549: {
  1607                           ;doprnt.c: 550: ((*sp++ = (c)));
  1608  0074  084F               	movf	sprintf@c,w
  1609  0075  00C2               	movwf	??_sprintf
  1610  0076  084E               	movf	sprintf@sp,w
  1611  0077  0086               	movwf	6
  1612  0078  3001               	movlw	1	; select bank2/3
  1613  0079  0087               	movwf	7
  1614  007A  0842               	movf	??_sprintf,w
  1615  007B  0081               	movwf	1
  1616  007C  3001               	movlw	1
  1617  007D  00C2               	movwf	??_sprintf
  1618  007E  0842               	movf	??_sprintf,w
  1619  007F  07CE               	addwf	sprintf@sp,f
  1620                           
  1621                           ;doprnt.c: 551: continue;
  1622  0080  285E               	goto	l2039
  1623  0081                     l1915:	
  1624                           
  1625                           ;doprnt.c: 552: }
  1626                           ;doprnt.c: 555: width = 0;
  1627  0081  01C9               	clrf	sprintf@width
  1628  0082  01CA               	clrf	sprintf@width+1
  1629                           
  1630                           ;doprnt.c: 557: flag = 0;
  1631  0083  01C8               	clrf	sprintf@flag
  1632                           
  1633                           ;doprnt.c: 560: switch(*f) {
  1634                           
  1635                           ;doprnt.c: 559: for(;;) {
  1636  0084  288A               	goto	l1921
  1637  0085                     l292:	
  1638                           ;doprnt.c: 588: case '0':
  1639                           
  1640                           
  1641                           ;doprnt.c: 589: flag |= 0x04;
  1642  0085  1548               	bsf	sprintf@flag,2
  1643                           
  1644                           ;doprnt.c: 590: f++;
  1645  0086  3001               	movlw	1
  1646  0087  07BA               	addwf	sprintf@f,f
  1647  0088  3000               	movlw	0
  1648  0089  3DBB               	addwfc	sprintf@f+1,f
  1649  008A                     l1921:	
  1650                           ;doprnt.c: 593: }
  1651                           
  1652                           ;doprnt.c: 591: continue;
  1653                           
  1654  008A  083A               	movf	sprintf@f,w
  1655  008B  0084               	movwf	4
  1656  008C  083B               	movf	sprintf@f+1,w
  1657  008D  0085               	movwf	5
  1658  008E  0800               	movf	0,w	;code access
  1659                           
  1660                           ; Switch size 1, requested type "space"
  1661                           ; Number of cases is 1, Range of values is 48 to 48
  1662                           ; switch strategies available:
  1663                           ; Name         Instructions Cycles
  1664                           ; simple_byte            4     3 (average)
  1665                           ; direct_byte           11     9 (fixed)
  1666                           ; jumptable            263     9 (fixed)
  1667                           ;	Chosen strategy is simple_byte
  1668  008F  3A30               	xorlw	48	; case 48
  1669  0090  1903               	skipnz
  1670  0091  2885               	goto	l292
  1671  0092  2893               	goto	l1923
  1672  0093                     l1923:	
  1673                           ;doprnt.c: 595: }
  1674                           
  1675                           ;doprnt.c: 594: break;
  1676                           
  1677                           
  1678                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  1679  0093  083A               	movf	sprintf@f,w
  1680  0094  0084               	movwf	4
  1681  0095  083B               	movf	sprintf@f+1,w
  1682  0096  0085               	movwf	5
  1683  0097  0800               	movf	0,w	;code access
  1684  0098  318F  27CE  3180   	fcall	_isdigit
  1685  009B  1C03               	btfss	3,0
  1686  009C  2936               	goto	l1965
  1687                           
  1688                           ;doprnt.c: 607: width = 0;
  1689  009D  0020               	movlb	0	; select bank0
  1690  009E  01C9               	clrf	sprintf@width
  1691  009F  01CA               	clrf	sprintf@width+1
  1692  00A0                     l1927:	
  1693                           ;doprnt.c: 608: do {
  1694                           
  1695                           
  1696                           ;doprnt.c: 609: width *= 10;
  1697  00A0  300A               	movlw	10
  1698  00A1  0020               	movlb	0	; select bank0
  1699  00A2  00AD               	movwf	___wmul@multiplier
  1700  00A3  3000               	movlw	0
  1701  00A4  00AE               	movwf	___wmul@multiplier+1
  1702  00A5  084A               	movf	sprintf@width+1,w
  1703  00A6  01B0               	clrf	___wmul@multiplicand+1
  1704  00A7  07B0               	addwf	___wmul@multiplicand+1,f
  1705  00A8  0849               	movf	sprintf@width,w
  1706  00A9  01AF               	clrf	___wmul@multiplicand
  1707  00AA  07AF               	addwf	___wmul@multiplicand,f
  1708  00AB  3187  2748  3180   	fcall	___wmul
  1709  00AE  0020               	movlb	0	; select bank0
  1710  00AF  082E               	movf	?___wmul+1,w
  1711  00B0  01CA               	clrf	sprintf@width+1
  1712  00B1  07CA               	addwf	sprintf@width+1,f
  1713  00B2  082D               	movf	?___wmul,w
  1714  00B3  01C9               	clrf	sprintf@width
  1715  00B4  07C9               	addwf	sprintf@width,f
  1716                           
  1717                           ;doprnt.c: 610: width += *f++ - '0';
  1718  00B5  083A               	movf	sprintf@f,w
  1719  00B6  0084               	movwf	4
  1720  00B7  083B               	movf	sprintf@f+1,w
  1721  00B8  0085               	movwf	5
  1722  00B9  0800               	movf	0,w	;code access
  1723  00BA  3ED0               	addlw	208
  1724  00BB  00C2               	movwf	??_sprintf
  1725  00BC  30FF               	movlw	255
  1726  00BD  1803               	skipnc
  1727  00BE  3000               	movlw	0
  1728  00BF  00C3               	movwf	??_sprintf+1
  1729  00C0  0842               	movf	??_sprintf,w
  1730  00C1  07C9               	addwf	sprintf@width,f
  1731  00C2  0843               	movf	??_sprintf+1,w
  1732  00C3  3DCA               	addwfc	sprintf@width+1,f
  1733  00C4  3001               	movlw	1
  1734  00C5  07BA               	addwf	sprintf@f,f
  1735  00C6  3000               	movlw	0
  1736  00C7  3DBB               	addwfc	sprintf@f+1,f
  1737                           
  1738                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  1739  00C8  083A               	movf	sprintf@f,w
  1740  00C9  0084               	movwf	4
  1741  00CA  083B               	movf	sprintf@f+1,w
  1742  00CB  0085               	movwf	5
  1743  00CC  0800               	movf	0,w	;code access
  1744  00CD  318F  27CE  3180   	fcall	_isdigit
  1745  00D0  1C03               	btfss	3,0
  1746  00D1  2936               	goto	l1965
  1747  00D2  28A0               	goto	l1927
  1748  00D3                     l1935:	
  1749                           ;doprnt.c: 759: dostring:
  1750                           
  1751                           ;doprnt.c: 707: case 'i':
  1752                           ;doprnt.c: 708: break;
  1753                           
  1754                           ;doprnt.c: 706: case 'd':
  1755                           
  1756                           ;doprnt.c: 647: goto alldone;
  1757                           
  1758                           ;doprnt.c: 646: case 0:
  1759                           
  1760                           ;doprnt.c: 617: }
  1761                           ;doprnt.c: 644: switch(c = *f++) {
  1762                           
  1763                           
  1764                           ;doprnt.c: 766: if(width > _val._str._len)
  1765  00D3  0020               	movlb	0	; select bank0
  1766  00D4  084A               	movf	sprintf@width+1,w
  1767  00D5  024D               	subwf	sprintf@_val+2,w
  1768  00D6  1D03               	skipz
  1769  00D7  28DA               	goto	u1625
  1770  00D8  0849               	movf	sprintf@width,w
  1771  00D9  024C               	subwf	sprintf@_val+1,w
  1772  00DA                     u1625:	
  1773  00DA  1803               	skipnc
  1774  00DB  28E1               	goto	l1939
  1775                           
  1776                           ;doprnt.c: 767: width -= _val._str._len;
  1777  00DC  084C               	movf	sprintf@_val+1,w
  1778  00DD  02C9               	subwf	sprintf@width,f
  1779  00DE  084D               	movf	sprintf@_val+2,w
  1780  00DF  3BCA               	subwfb	sprintf@width+1,f
  1781  00E0  28E3               	goto	l1945
  1782  00E1                     l1939:	
  1783                           
  1784                           ;doprnt.c: 768: else
  1785                           ;doprnt.c: 769: width = 0;
  1786  00E1  01C9               	clrf	sprintf@width
  1787  00E2  01CA               	clrf	sprintf@width+1
  1788  00E3                     l1945:	
  1789                           ;doprnt.c: 773: while(width--)
  1790                           
  1791  00E3  30FF               	movlw	255
  1792  00E4  07C9               	addwf	sprintf@width,f
  1793  00E5  30FF               	movlw	255
  1794  00E6  3DCA               	addwfc	sprintf@width+1,f
  1795  00E7  30FF               	movlw	255
  1796  00E8  064A               	xorwf	sprintf@width+1,w
  1797  00E9  1D03               	skipz
  1798  00EA  28ED               	goto	u1635
  1799  00EB  30FF               	movlw	255
  1800  00EC  0649               	xorwf	sprintf@width,w
  1801  00ED                     u1635:	
  1802  00ED  1903               	btfsc	3,2
  1803  00EE  290F               	goto	l1953
  1804                           
  1805                           ;doprnt.c: 774: ((*sp++ = (' ')));
  1806  00EF  3020               	movlw	32
  1807  00F0  00C2               	movwf	??_sprintf
  1808  00F1  084E               	movf	sprintf@sp,w
  1809  00F2  0086               	movwf	6
  1810  00F3  3001               	movlw	1	; select bank2/3
  1811  00F4  0087               	movwf	7
  1812  00F5  0842               	movf	??_sprintf,w
  1813  00F6  0081               	movwf	1
  1814  00F7  3001               	movlw	1
  1815  00F8  00C2               	movwf	??_sprintf
  1816  00F9  0842               	movf	??_sprintf,w
  1817  00FA  07CE               	addwf	sprintf@sp,f
  1818  00FB  28E3               	goto	l1945
  1819  00FC                     l1947:	
  1820                           ;doprnt.c: 776: while(_val._str._len--)
  1821                           
  1822                           
  1823                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
  1824  00FC  084B               	movf	sprintf@_val,w
  1825  00FD  0086               	movwf	6
  1826  00FE  0187               	clrf	7
  1827  00FF  0801               	movf	1,w
  1828  0100  00C2               	movwf	??_sprintf
  1829  0101  084E               	movf	sprintf@sp,w
  1830  0102  0086               	movwf	6
  1831  0103  3001               	movlw	1	; select bank2/3
  1832  0104  0087               	movwf	7
  1833  0105  0842               	movf	??_sprintf,w
  1834  0106  0081               	movwf	1
  1835  0107  3001               	movlw	1
  1836  0108  00C2               	movwf	??_sprintf
  1837  0109  0842               	movf	??_sprintf,w
  1838  010A  07CB               	addwf	sprintf@_val,f
  1839  010B  3001               	movlw	1
  1840  010C  00C2               	movwf	??_sprintf
  1841  010D  0842               	movf	??_sprintf,w
  1842  010E  07CE               	addwf	sprintf@sp,f
  1843  010F                     l1953:	
  1844  010F  3001               	movlw	1
  1845  0110  3E4B               	addlw	sprintf@_val& (0+255)
  1846  0111  0086               	movwf	6
  1847  0112  0187               	clrf	7
  1848  0113  3001               	movlw	1
  1849  0114  0281               	subwf	1,f
  1850  0115  3141               	addfsr 1,1
  1851  0116  3000               	movlw	0
  1852  0117  3B81               	subwfb	1,f
  1853  0118  317F               	addfsr 1,-1
  1854  0119  3F40               	moviw [0]fsr1
  1855  011A  3AFF               	xorlw	255
  1856  011B  1D03               	skipz
  1857  011C  291F               	goto	u1645
  1858  011D  3F41               	moviw [1]fsr1
  1859  011E  3AFF               	xorlw	255
  1860  011F                     u1645:	
  1861  011F  1903               	btfsc	3,2
  1862  0120  285E               	goto	l2039
  1863  0121  28FC               	goto	l1947
  1864  0122                     l1955:	
  1865                           ;doprnt.c: 793: case 'c':
  1866                           
  1867                           ;doprnt.c: 783: continue;
  1868                           
  1869                           
  1870                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  1871  0122  0847               	movf	sprintf@ap,w
  1872  0123  0086               	movwf	6
  1873  0124  0187               	clrf	7
  1874  0125  0801               	movf	1,w
  1875  0126  00C2               	movwf	??_sprintf
  1876  0127  0842               	movf	??_sprintf,w
  1877  0128  00CF               	movwf	sprintf@c
  1878  0129  3002               	movlw	2
  1879  012A  00C2               	movwf	??_sprintf
  1880  012B  0842               	movf	??_sprintf,w
  1881  012C  07C7               	addwf	sprintf@ap,f
  1882  012D                     l1959:	
  1883                           ;doprnt.c: 811: default:
  1884                           
  1885                           
  1886                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
  1887  012D  304F               	movlw	sprintf@c& (0+255)
  1888  012E  00C2               	movwf	??_sprintf
  1889  012F  0842               	movf	??_sprintf,w
  1890  0130  00CB               	movwf	sprintf@_val
  1891                           
  1892                           ;doprnt.c: 815: _val._str._len = 1;
  1893  0131  3001               	movlw	1
  1894  0132  00CC               	movwf	sprintf@_val+1
  1895  0133  3000               	movlw	0
  1896  0134  00CD               	movwf	sprintf@_val+2
  1897                           
  1898                           ;doprnt.c: 816: goto dostring;
  1899  0135  28D3               	goto	l1935
  1900  0136                     l1965:	
  1901                           ;doprnt.c: 831: }
  1902                           
  1903  0136  0020               	movlb	0	; select bank0
  1904  0137  083B               	movf	sprintf@f+1,w
  1905  0138  00C3               	movwf	??_sprintf+1
  1906  0139  083A               	movf	sprintf@f,w
  1907  013A  00C2               	movwf	??_sprintf
  1908  013B  0ABA               	incf	sprintf@f,f
  1909  013C  1903               	skipnz
  1910  013D  0ABB               	incf	sprintf@f+1,f
  1911  013E  0842               	movf	??_sprintf,w
  1912  013F  0084               	movwf	4
  1913  0140  0843               	movf	??_sprintf+1,w
  1914  0141  0085               	movwf	5
  1915  0142  0800               	movf	0,w	;code access
  1916  0143  00CF               	movwf	sprintf@c
  1917                           
  1918                           ; Switch size 1, requested type "space"
  1919                           ; Number of cases is 4, Range of values is 0 to 105
  1920                           ; switch strategies available:
  1921                           ; Name         Instructions Cycles
  1922                           ; simple_byte           13     7 (average)
  1923                           ; direct_byte          218     6 (fixed)
  1924                           ; jumptable            260     6 (fixed)
  1925                           ;	Chosen strategy is simple_byte
  1926  0144  3A00               	xorlw	0	; case 0
  1927  0145  1903               	skipnz
  1928  0146  2A4C               	goto	l2041
  1929  0147  3A63               	xorlw	99	; case 99
  1930  0148  1903               	skipnz
  1931  0149  2922               	goto	l1955
  1932  014A  3A07               	xorlw	7	; case 100
  1933  014B  1903               	skipnz
  1934  014C  2951               	goto	l1967
  1935  014D  3A0D               	xorlw	13	; case 105
  1936  014E  1903               	skipnz
  1937  014F  2951               	goto	l1967
  1938  0150  292D               	goto	l1959
  1939  0151                     l1967:	
  1940                           
  1941                           ;doprnt.c: 1262: {
  1942                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1943  0151  0020               	movlb	0	; select bank0
  1944  0152  0847               	movf	sprintf@ap,w
  1945  0153  0086               	movwf	6
  1946  0154  0187               	clrf	7
  1947  0155  3F40               	moviw [0]fsr1
  1948  0156  00CB               	movwf	sprintf@_val
  1949  0157  3F41               	moviw [1]fsr1
  1950  0158  00CC               	movwf	sprintf@_val+1
  1951  0159  3002               	movlw	2
  1952  015A  00C2               	movwf	??_sprintf
  1953  015B  0842               	movf	??_sprintf,w
  1954  015C  07C7               	addwf	sprintf@ap,f
  1955                           
  1956                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  1957  015D  1FCC               	btfss	sprintf@_val+1,7
  1958  015E  2968               	goto	l1977
  1959                           
  1960                           ;doprnt.c: 1271: flag |= 0x03;
  1961  015F  3003               	movlw	3
  1962  0160  00C2               	movwf	??_sprintf
  1963  0161  0842               	movf	??_sprintf,w
  1964  0162  04C8               	iorwf	sprintf@flag,f
  1965                           
  1966                           ;doprnt.c: 1272: _val._val = -_val._val;
  1967  0163  09CB               	comf	sprintf@_val,f
  1968  0164  09CC               	comf	sprintf@_val+1,f
  1969  0165  0ACB               	incf	sprintf@_val,f
  1970  0166  1903               	skipnz
  1971  0167  0ACC               	incf	sprintf@_val+1,f
  1972  0168                     l1977:	
  1973                           
  1974                           ;doprnt.c: 1273: }
  1975                           ;doprnt.c: 1275: }
  1976                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1977  0168  01CF               	clrf	sprintf@c
  1978  0169  0ACF               	incf	sprintf@c,f
  1979  016A  084F               	movf	sprintf@c,w
  1980  016B  3A05               	xorlw	5
  1981  016C  1903               	btfsc	3,2
  1982  016D  298D               	goto	l1989
  1983  016E                     l1981:	
  1984                           
  1985                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  1986  016E  084F               	movf	sprintf@c,w
  1987  016F  00C2               	movwf	??_sprintf
  1988  0170  01C3               	clrf	??_sprintf+1
  1989  0171  35C2               	lslf	??_sprintf,f
  1990  0172  0DC3               	rlf	??_sprintf+1,f
  1991  0173  3000               	movlw	low (_dpowers| (0+32768))
  1992  0174  0742               	addwf	??_sprintf,w
  1993  0175  0084               	movwf	4
  1994  0176  3088               	movlw	high (_dpowers| (0+32768))
  1995  0177  3D43               	addwfc	??_sprintf+1,w
  1996  0178  0085               	movwf	5
  1997  0179  3F00               	moviw [0]fsr0
  1998  017A  00C4               	movwf	??_sprintf+2
  1999  017B  3F01               	moviw [1]fsr0
  2000  017C  00C5               	movwf	??_sprintf+3
  2001  017D  0845               	movf	??_sprintf+3,w
  2002  017E  024C               	subwf	sprintf@_val+1,w
  2003  017F  1D03               	skipz
  2004  0180  2983               	goto	u1675
  2005  0181  0844               	movf	??_sprintf+2,w
  2006  0182  024B               	subwf	sprintf@_val,w
  2007  0183                     u1675:	
  2008  0183  1C03               	btfss	3,0
  2009  0184  298D               	goto	l1989
  2010                           
  2011                           ;doprnt.c: 1316: break;
  2012  0185  3001               	movlw	1
  2013  0186  00C2               	movwf	??_sprintf
  2014  0187  0842               	movf	??_sprintf,w
  2015  0188  07CF               	addwf	sprintf@c,f
  2016  0189  084F               	movf	sprintf@c,w
  2017  018A  3A05               	xorlw	5
  2018  018B  1D03               	skipz
  2019  018C  296E               	goto	l1981
  2020  018D                     l1989:	
  2021                           
  2022                           ;doprnt.c: 1354: if(width && flag & 0x03)
  2023  018D  084A               	movf	sprintf@width+1,w
  2024  018E  0449               	iorwf	sprintf@width,w
  2025  018F  1903               	skipnz
  2026  0190  2999               	goto	l320
  2027  0191  0848               	movf	sprintf@flag,w
  2028  0192  3903               	andlw	3
  2029  0193  1903               	btfsc	3,2
  2030  0194  2999               	goto	l320
  2031                           
  2032                           ;doprnt.c: 1355: width--;
  2033  0195  30FF               	movlw	255
  2034  0196  07C9               	addwf	sprintf@width,f
  2035  0197  30FF               	movlw	255
  2036  0198  3DCA               	addwfc	sprintf@width+1,f
  2037  0199                     l320:	
  2038                           
  2039                           ;doprnt.c: 1390: if(width > c)
  2040  0199  084F               	movf	sprintf@c,w
  2041  019A  00C2               	movwf	??_sprintf
  2042  019B  01C3               	clrf	??_sprintf+1
  2043  019C  1BC2               	btfsc	??_sprintf,7
  2044  019D  03C3               	decf	??_sprintf+1,f
  2045  019E  0843               	movf	??_sprintf+1,w
  2046  019F  3A80               	xorlw	128
  2047  01A0  00C4               	movwf	??_sprintf+2
  2048  01A1  084A               	movf	sprintf@width+1,w
  2049  01A2  3A80               	xorlw	128
  2050  01A3  0244               	subwf	??_sprintf+2,w
  2051  01A4  1D03               	skipz
  2052  01A5  29A8               	goto	u1715
  2053  01A6  0849               	movf	sprintf@width,w
  2054  01A7  0242               	subwf	??_sprintf,w
  2055  01A8                     u1715:	
  2056  01A8  1803               	skipnc
  2057  01A9  29B5               	goto	l1997
  2058                           
  2059                           ;doprnt.c: 1391: width -= c;
  2060  01AA  0020               	movlb	0	; select bank0
  2061  01AB  084F               	movf	sprintf@c,w
  2062  01AC  00C2               	movwf	??_sprintf
  2063  01AD  01C3               	clrf	??_sprintf+1
  2064  01AE  1BC2               	btfsc	??_sprintf,7
  2065  01AF  03C3               	decf	??_sprintf+1,f
  2066  01B0  0842               	movf	??_sprintf,w
  2067  01B1  02C9               	subwf	sprintf@width,f
  2068  01B2  0843               	movf	??_sprintf+1,w
  2069  01B3  3BCA               	subwfb	sprintf@width+1,f
  2070  01B4  29B8               	goto	l1999
  2071  01B5                     l1997:	
  2072                           
  2073                           ;doprnt.c: 1392: else
  2074                           ;doprnt.c: 1393: width = 0;
  2075  01B5  0020               	movlb	0	; select bank0
  2076  01B6  01C9               	clrf	sprintf@width
  2077  01B7  01CA               	clrf	sprintf@width+1
  2078  01B8                     l1999:	
  2079                           
  2080                           ;doprnt.c: 1396: if(flag & 0x04) {
  2081  01B8  1D48               	btfss	sprintf@flag,2
  2082  01B9  29DF               	goto	l2015
  2083                           
  2084                           ;doprnt.c: 1401: if(flag & 0x03)
  2085  01BA  0848               	movf	sprintf@flag,w
  2086  01BB  3903               	andlw	3
  2087  01BC  1903               	btfsc	3,2
  2088  01BD  29CA               	goto	l2007
  2089                           
  2090                           ;doprnt.c: 1402: ((*sp++ = ('-')));
  2091  01BE  302D               	movlw	45
  2092  01BF  00C2               	movwf	??_sprintf
  2093  01C0  084E               	movf	sprintf@sp,w
  2094  01C1  0086               	movwf	6
  2095  01C2  3001               	movlw	1	; select bank2/3
  2096  01C3  0087               	movwf	7
  2097  01C4  0842               	movf	??_sprintf,w
  2098  01C5  0081               	movwf	1
  2099  01C6  3001               	movlw	1
  2100  01C7  00C2               	movwf	??_sprintf
  2101  01C8  0842               	movf	??_sprintf,w
  2102  01C9  07CE               	addwf	sprintf@sp,f
  2103  01CA                     l2007:	
  2104                           
  2105                           ;doprnt.c: 1424: if(width)
  2106  01CA  084A               	movf	sprintf@width+1,w
  2107  01CB  0449               	iorwf	sprintf@width,w
  2108  01CC  1903               	skipnz
  2109  01CD  2A07               	goto	l2029
  2110                           
  2111                           ;doprnt.c: 1426: ((*sp++ = ('0')));
  2112                           
  2113                           ;doprnt.c: 1425: do
  2114  01CE  3030               	movlw	48
  2115  01CF  00C2               	movwf	??_sprintf
  2116  01D0  084E               	movf	sprintf@sp,w
  2117  01D1  0086               	movwf	6
  2118  01D2  3001               	movlw	1	; select bank2/3
  2119  01D3  0087               	movwf	7
  2120  01D4  0842               	movf	??_sprintf,w
  2121  01D5  0081               	movwf	1
  2122  01D6  3001               	movlw	1
  2123  01D7  00C2               	movwf	??_sprintf
  2124  01D8  0842               	movf	??_sprintf,w
  2125  01D9  07CE               	addwf	sprintf@sp,f
  2126                           
  2127                           ;doprnt.c: 1427: while(--width);
  2128  01DA  30FF               	movlw	255
  2129  01DB  07C9               	addwf	sprintf@width,f
  2130  01DC  30FF               	movlw	255
  2131  01DD  3DCA               	addwfc	sprintf@width+1,f
  2132  01DE  29CA               	goto	l2007
  2133  01DF                     l2015:	
  2134                           ;doprnt.c: 1429: } else
  2135                           
  2136                           
  2137                           ;doprnt.c: 1431: {
  2138                           ;doprnt.c: 1433: if(width
  2139                           ;doprnt.c: 1437: )
  2140  01DF  084A               	movf	sprintf@width+1,w
  2141  01E0  0449               	iorwf	sprintf@width,w
  2142  01E1  1903               	skipnz
  2143  01E2  29F7               	goto	l2023
  2144  01E3                     l2017:	
  2145                           ;doprnt.c: 1438: do
  2146                           
  2147                           
  2148                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  2149  01E3  3020               	movlw	32
  2150  01E4  00C2               	movwf	??_sprintf
  2151  01E5  084E               	movf	sprintf@sp,w
  2152  01E6  0086               	movwf	6
  2153  01E7  3001               	movlw	1	; select bank2/3
  2154  01E8  0087               	movwf	7
  2155  01E9  0842               	movf	??_sprintf,w
  2156  01EA  0081               	movwf	1
  2157  01EB  3001               	movlw	1
  2158  01EC  00C2               	movwf	??_sprintf
  2159  01ED  0842               	movf	??_sprintf,w
  2160  01EE  07CE               	addwf	sprintf@sp,f
  2161                           
  2162                           ;doprnt.c: 1440: while(--width);
  2163  01EF  30FF               	movlw	255
  2164  01F0  07C9               	addwf	sprintf@width,f
  2165  01F1  30FF               	movlw	255
  2166  01F2  3DCA               	addwfc	sprintf@width+1,f
  2167  01F3  084A               	movf	sprintf@width+1,w
  2168  01F4  0449               	iorwf	sprintf@width,w
  2169  01F5  1D03               	skipz
  2170  01F6  29E3               	goto	l2017
  2171  01F7                     l2023:	
  2172                           
  2173                           ;doprnt.c: 1447: if(flag & 0x03)
  2174  01F7  0848               	movf	sprintf@flag,w
  2175  01F8  3903               	andlw	3
  2176  01F9  1903               	btfsc	3,2
  2177  01FA  2A07               	goto	l2029
  2178                           
  2179                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  2180  01FB  302D               	movlw	45
  2181  01FC  00C2               	movwf	??_sprintf
  2182  01FD  084E               	movf	sprintf@sp,w
  2183  01FE  0086               	movwf	6
  2184  01FF  3001               	movlw	1	; select bank2/3
  2185  0200  0087               	movwf	7
  2186  0201  0842               	movf	??_sprintf,w
  2187  0202  0081               	movwf	1
  2188  0203  3001               	movlw	1
  2189  0204  00C2               	movwf	??_sprintf
  2190  0205  0842               	movf	??_sprintf,w
  2191  0206  07CE               	addwf	sprintf@sp,f
  2192  0207                     l2029:	
  2193                           
  2194                           ;doprnt.c: 1478: }
  2195                           ;doprnt.c: 1481: prec = c;
  2196  0207  084F               	movf	sprintf@c,w
  2197  0208  00C2               	movwf	??_sprintf
  2198  0209  0842               	movf	??_sprintf,w
  2199  020A  00C6               	movwf	sprintf@prec
  2200  020B                     l2037:	
  2201                           ;doprnt.c: 1483: while(prec--) {
  2202                           
  2203  020B  30FF               	movlw	-1
  2204  020C  00C2               	movwf	??_sprintf
  2205  020D  0842               	movf	??_sprintf,w
  2206  020E  07C6               	addwf	sprintf@prec,f
  2207  020F  0846               	movf	sprintf@prec,w
  2208  0210  3AFF               	xorlw	255
  2209  0211  1903               	btfsc	3,2
  2210  0212  285E               	goto	l2039
  2211                           
  2212                           ;doprnt.c: 1487: {
  2213                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  2214  0213  300A               	movlw	10
  2215  0214  00A8               	movwf	___lwmod@divisor
  2216  0215  3000               	movlw	0
  2217  0216  00A9               	movwf	___lwmod@divisor+1
  2218  0217  0846               	movf	sprintf@prec,w
  2219  0218  00C2               	movwf	??_sprintf
  2220  0219  01C3               	clrf	??_sprintf+1
  2221  021A  35C2               	lslf	??_sprintf,f
  2222  021B  0DC3               	rlf	??_sprintf+1,f
  2223  021C  3000               	movlw	low (_dpowers| (0+32768))
  2224  021D  0742               	addwf	??_sprintf,w
  2225  021E  0084               	movwf	4
  2226  021F  3088               	movlw	high (_dpowers| (0+32768))
  2227  0220  3D43               	addwfc	??_sprintf+1,w
  2228  0221  0085               	movwf	5
  2229  0222  3F00               	moviw [0]fsr0
  2230  0223  00A0               	movwf	___lwdiv@divisor
  2231  0224  3F01               	moviw [1]fsr0
  2232  0225  00A1               	movwf	___lwdiv@divisor+1
  2233  0226  084C               	movf	sprintf@_val+1,w
  2234  0227  01A3               	clrf	___lwdiv@dividend+1
  2235  0228  07A3               	addwf	___lwdiv@dividend+1,f
  2236  0229  084B               	movf	sprintf@_val,w
  2237  022A  01A2               	clrf	___lwdiv@dividend
  2238  022B  07A2               	addwf	___lwdiv@dividend,f
  2239  022C  3185  257B  3180   	fcall	___lwdiv
  2240  022F  0020               	movlb	0	; select bank0
  2241  0230  0821               	movf	?___lwdiv+1,w
  2242  0231  01AB               	clrf	___lwmod@dividend+1
  2243  0232  07AB               	addwf	___lwmod@dividend+1,f
  2244  0233  0820               	movf	?___lwdiv,w
  2245  0234  01AA               	clrf	___lwmod@dividend
  2246  0235  07AA               	addwf	___lwmod@dividend,f
  2247  0236  3185  25E6  3180   	fcall	___lwmod
  2248  0239  0020               	movlb	0	; select bank0
  2249  023A  0828               	movf	?___lwmod,w
  2250  023B  3E30               	addlw	48
  2251  023C  00C4               	movwf	??_sprintf+2
  2252  023D  0844               	movf	??_sprintf+2,w
  2253  023E  00CF               	movwf	sprintf@c
  2254                           
  2255                           ;doprnt.c: 1532: }
  2256                           ;doprnt.c: 1533: ((*sp++ = (c)));
  2257  023F  084F               	movf	sprintf@c,w
  2258  0240  00C2               	movwf	??_sprintf
  2259  0241  084E               	movf	sprintf@sp,w
  2260  0242  0086               	movwf	6
  2261  0243  3001               	movlw	1	; select bank2/3
  2262  0244  0087               	movwf	7
  2263  0245  0842               	movf	??_sprintf,w
  2264  0246  0081               	movwf	1
  2265  0247  3001               	movlw	1
  2266  0248  00C2               	movwf	??_sprintf
  2267  0249  0842               	movf	??_sprintf,w
  2268  024A  07CE               	addwf	sprintf@sp,f
  2269  024B  2A0B               	goto	l2037
  2270  024C                     l2041:	
  2271                           ;doprnt.c: 1534: }
  2272                           ;doprnt.c: 1542: }
  2273                           ;doprnt.c: 1544: alldone:
  2274                           
  2275                           
  2276                           ;doprnt.c: 1547: *sp = 0;
  2277  024C  0020               	movlb	0	; select bank0
  2278  024D  084E               	movf	sprintf@sp,w
  2279  024E  0086               	movwf	6
  2280  024F  3001               	movlw	1	; select bank2/3
  2281  0250  0087               	movwf	7
  2282  0251  0181               	clrf	1
  2283  0252  0008               	return
  2284  0253                     __end_of_sprintf:	
  2285                           ;doprnt.c: 1549: return 0;
  2286                           ;	Return value of _sprintf is never used
  2287                           
  2288                           
  2289                           	psect	text5
  2290  0FCE                     __ptext5:	
  2291 ;; *************** function _isdigit *****************
  2292 ;; Defined at:
  2293 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;  c               1    wreg     unsigned char 
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;  c               1    1[BANK0 ] unsigned char 
  2298 ;; Return value:  Size  Location     Type
  2299 ;;		None               void
  2300 ;; Registers used:
  2301 ;;		wreg, status,2, status,0
  2302 ;; Tracked objects:
  2303 ;;		On entry : 0/0
  2304 ;;		On exit  : 0/0
  2305 ;;		Unchanged: 0/0
  2306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2307 ;;      Params:         0       0       0       0       0       0
  2308 ;;      Locals:         0       2       0       0       0       0
  2309 ;;      Temps:          0       0       0       0       0       0
  2310 ;;      Totals:         0       2       0       0       0       0
  2311 ;;Total ram usage:        2 bytes
  2312 ;; Hardware stack levels used:    1
  2313 ;; Hardware stack levels required when called:    3
  2314 ;; This function calls:
  2315 ;;		Nothing
  2316 ;; This function is called by:
  2317 ;;		_sprintf
  2318 ;; This function uses a non-reentrant model
  2319 ;;
  2320                           
  2321                           
  2322                           ;psect for function _isdigit
  2323  0FCE                     _isdigit:	
  2324                           
  2325                           ;incstack = 0
  2326                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2327                           ;isdigit@c stored from wreg
  2328  0FCE  0020               	movlb	0	; select bank0
  2329  0FCF  00A1               	movwf	isdigit@c
  2330  0FD0  01A0               	clrf	_isdigit$814
  2331  0FD1  303A               	movlw	58
  2332  0FD2  0221               	subwf	isdigit@c,w
  2333  0FD3  1803               	skipnc
  2334  0FD4  2FDB               	goto	l1675
  2335  0FD5  3030               	movlw	48
  2336  0FD6  0221               	subwf	isdigit@c,w
  2337  0FD7  1C03               	skipc
  2338  0FD8  2FDB               	goto	l1675
  2339  0FD9  01A0               	clrf	_isdigit$814
  2340  0FDA  0AA0               	incf	_isdigit$814,f
  2341  0FDB                     l1675:	
  2342  0FDB  0C20               	rrf	_isdigit$814,w
  2343  0FDC  0008               	return
  2344  0FDD                     __end_of_isdigit:	
  2345                           
  2346                           	psect	text6
  2347  0748                     __ptext6:	
  2348 ;; *************** function ___wmul *****************
  2349 ;; Defined at:
  2350 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  2351 ;; Parameters:    Size  Location     Type
  2352 ;;  multiplier      2   13[BANK0 ] unsigned int 
  2353 ;;  multiplicand    2   15[BANK0 ] unsigned int 
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;  product         2   17[BANK0 ] unsigned int 
  2356 ;; Return value:  Size  Location     Type
  2357 ;;                  2   13[BANK0 ] unsigned int 
  2358 ;; Registers used:
  2359 ;;		wreg, status,2, status,0
  2360 ;; Tracked objects:
  2361 ;;		On entry : 0/0
  2362 ;;		On exit  : 0/0
  2363 ;;		Unchanged: 0/0
  2364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2365 ;;      Params:         0       4       0       0       0       0
  2366 ;;      Locals:         0       2       0       0       0       0
  2367 ;;      Temps:          0       0       0       0       0       0
  2368 ;;      Totals:         0       6       0       0       0       0
  2369 ;;Total ram usage:        6 bytes
  2370 ;; Hardware stack levels used:    1
  2371 ;; Hardware stack levels required when called:    3
  2372 ;; This function calls:
  2373 ;;		Nothing
  2374 ;; This function is called by:
  2375 ;;		_main
  2376 ;;		_sprintf
  2377 ;; This function uses a non-reentrant model
  2378 ;;
  2379                           
  2380                           
  2381                           ;psect for function ___wmul
  2382  0748                     ___wmul:	
  2383                           
  2384                           ;incstack = 0
  2385                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2386  0748  0020               	movlb	0	; select bank0
  2387  0749  01B1               	clrf	___wmul@product
  2388  074A  01B2               	clrf	___wmul@product+1
  2389  074B                     l1681:	
  2390  074B  1C2D               	btfss	___wmul@multiplier,0
  2391  074C  2F51               	goto	l421
  2392  074D  082F               	movf	___wmul@multiplicand,w
  2393  074E  07B1               	addwf	___wmul@product,f
  2394  074F  0830               	movf	___wmul@multiplicand+1,w
  2395  0750  3DB2               	addwfc	___wmul@product+1,f
  2396  0751                     l421:	
  2397  0751  3001               	movlw	1
  2398  0752                     u1205:	
  2399  0752  35AF               	lslf	___wmul@multiplicand,f
  2400  0753  0DB0               	rlf	___wmul@multiplicand+1,f
  2401  0754  0B89               	decfsz	9,f
  2402  0755  2F52               	goto	u1205
  2403  0756  3001               	movlw	1
  2404  0757                     u1215:	
  2405  0757  36AE               	lsrf	___wmul@multiplier+1,f
  2406  0758  0CAD               	rrf	___wmul@multiplier,f
  2407  0759  0B89               	decfsz	9,f
  2408  075A  2F57               	goto	u1215
  2409  075B  082E               	movf	___wmul@multiplier+1,w
  2410  075C  042D               	iorwf	___wmul@multiplier,w
  2411  075D  1D03               	skipz
  2412  075E  2F4B               	goto	l1681
  2413  075F  0832               	movf	___wmul@product+1,w
  2414  0760  01AE               	clrf	?___wmul+1
  2415  0761  07AE               	addwf	?___wmul+1,f
  2416  0762  0831               	movf	___wmul@product,w
  2417  0763  01AD               	clrf	?___wmul
  2418  0764  07AD               	addwf	?___wmul,f
  2419  0765  0008               	return
  2420  0766                     __end_of___wmul:	
  2421                           
  2422                           	psect	text7
  2423  05E6                     __ptext7:	
  2424 ;; *************** function ___lwmod *****************
  2425 ;; Defined at:
  2426 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  2427 ;; Parameters:    Size  Location     Type
  2428 ;;  divisor         2    8[BANK0 ] unsigned int 
  2429 ;;  dividend        2   10[BANK0 ] unsigned int 
  2430 ;; Auto vars:     Size  Location     Type
  2431 ;;  counter         1   13[BANK0 ] unsigned char 
  2432 ;; Return value:  Size  Location     Type
  2433 ;;                  2    8[BANK0 ] unsigned int 
  2434 ;; Registers used:
  2435 ;;		wreg, status,2, status,0
  2436 ;; Tracked objects:
  2437 ;;		On entry : 0/0
  2438 ;;		On exit  : 0/0
  2439 ;;		Unchanged: 0/0
  2440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2441 ;;      Params:         0       4       0       0       0       0
  2442 ;;      Locals:         0       1       0       0       0       0
  2443 ;;      Temps:          0       1       0       0       0       0
  2444 ;;      Totals:         0       6       0       0       0       0
  2445 ;;Total ram usage:        6 bytes
  2446 ;; Hardware stack levels used:    1
  2447 ;; Hardware stack levels required when called:    3
  2448 ;; This function calls:
  2449 ;;		Nothing
  2450 ;; This function is called by:
  2451 ;;		_sprintf
  2452 ;; This function uses a non-reentrant model
  2453 ;;
  2454                           
  2455                           
  2456                           ;psect for function ___lwmod
  2457  05E6                     ___lwmod:	
  2458                           
  2459                           ;incstack = 0
  2460                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2461  05E6  0020               	movlb	0	; select bank0
  2462  05E7  0829               	movf	___lwmod@divisor+1,w
  2463  05E8  0428               	iorwf	___lwmod@divisor,w
  2464  05E9  1903               	skipnz
  2465  05EA  2E0E               	goto	l1735
  2466  05EB  01AD               	clrf	___lwmod@counter
  2467  05EC  0AAD               	incf	___lwmod@counter,f
  2468  05ED                     l1725:	
  2469  05ED  1BA9               	btfsc	___lwmod@divisor+1,7
  2470  05EE  2DF9               	goto	l1727
  2471  05EF  3001               	movlw	1
  2472  05F0                     u1315:	
  2473  05F0  35A8               	lslf	___lwmod@divisor,f
  2474  05F1  0DA9               	rlf	___lwmod@divisor+1,f
  2475  05F2  0B89               	decfsz	9,f
  2476  05F3  2DF0               	goto	u1315
  2477  05F4  3001               	movlw	1
  2478  05F5  00AC               	movwf	??___lwmod
  2479  05F6  082C               	movf	??___lwmod,w
  2480  05F7  07AD               	addwf	___lwmod@counter,f
  2481  05F8  2DED               	goto	l1725
  2482  05F9                     l1727:	
  2483  05F9  0829               	movf	___lwmod@divisor+1,w
  2484  05FA  022B               	subwf	___lwmod@dividend+1,w
  2485  05FB  1D03               	skipz
  2486  05FC  2DFF               	goto	u1335
  2487  05FD  0828               	movf	___lwmod@divisor,w
  2488  05FE  022A               	subwf	___lwmod@dividend,w
  2489  05FF                     u1335:	
  2490  05FF  1C03               	skipc
  2491  0600  2E05               	goto	l1731
  2492  0601  0828               	movf	___lwmod@divisor,w
  2493  0602  02AA               	subwf	___lwmod@dividend,f
  2494  0603  0829               	movf	___lwmod@divisor+1,w
  2495  0604  3BAB               	subwfb	___lwmod@dividend+1,f
  2496  0605                     l1731:	
  2497  0605  3001               	movlw	1
  2498  0606                     u1345:	
  2499  0606  36A9               	lsrf	___lwmod@divisor+1,f
  2500  0607  0CA8               	rrf	___lwmod@divisor,f
  2501  0608  0B89               	decfsz	9,f
  2502  0609  2E06               	goto	u1345
  2503  060A  3001               	movlw	1
  2504  060B  02AD               	subwf	___lwmod@counter,f
  2505  060C  1D03               	btfss	3,2
  2506  060D  2DF9               	goto	l1727
  2507  060E                     l1735:	
  2508  060E  082B               	movf	___lwmod@dividend+1,w
  2509  060F  01A9               	clrf	?___lwmod+1
  2510  0610  07A9               	addwf	?___lwmod+1,f
  2511  0611  082A               	movf	___lwmod@dividend,w
  2512  0612  01A8               	clrf	?___lwmod
  2513  0613  07A8               	addwf	?___lwmod,f
  2514  0614  0008               	return
  2515  0615                     __end_of___lwmod:	
  2516                           
  2517                           	psect	text8
  2518  057B                     __ptext8:	
  2519 ;; *************** function ___lwdiv *****************
  2520 ;; Defined at:
  2521 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  2522 ;; Parameters:    Size  Location     Type
  2523 ;;  divisor         2    0[BANK0 ] unsigned int 
  2524 ;;  dividend        2    2[BANK0 ] unsigned int 
  2525 ;; Auto vars:     Size  Location     Type
  2526 ;;  quotient        2    5[BANK0 ] unsigned int 
  2527 ;;  counter         1    7[BANK0 ] unsigned char 
  2528 ;; Return value:  Size  Location     Type
  2529 ;;                  2    0[BANK0 ] unsigned int 
  2530 ;; Registers used:
  2531 ;;		wreg, status,2, status,0
  2532 ;; Tracked objects:
  2533 ;;		On entry : 0/0
  2534 ;;		On exit  : 0/0
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2537 ;;      Params:         0       4       0       0       0       0
  2538 ;;      Locals:         0       3       0       0       0       0
  2539 ;;      Temps:          0       1       0       0       0       0
  2540 ;;      Totals:         0       8       0       0       0       0
  2541 ;;Total ram usage:        8 bytes
  2542 ;; Hardware stack levels used:    1
  2543 ;; Hardware stack levels required when called:    3
  2544 ;; This function calls:
  2545 ;;		Nothing
  2546 ;; This function is called by:
  2547 ;;		_sprintf
  2548 ;; This function uses a non-reentrant model
  2549 ;;
  2550                           
  2551                           
  2552                           ;psect for function ___lwdiv
  2553  057B                     ___lwdiv:	
  2554                           
  2555                           ;incstack = 0
  2556                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2557  057B  0020               	movlb	0	; select bank0
  2558  057C  01A5               	clrf	___lwdiv@quotient
  2559  057D  01A6               	clrf	___lwdiv@quotient+1
  2560  057E  0821               	movf	___lwdiv@divisor+1,w
  2561  057F  0420               	iorwf	___lwdiv@divisor,w
  2562  0580  1903               	skipnz
  2563  0581  2DAB               	goto	l1713
  2564  0582  01A7               	clrf	___lwdiv@counter
  2565  0583  0AA7               	incf	___lwdiv@counter,f
  2566  0584                     l1701:	
  2567  0584  1BA1               	btfsc	___lwdiv@divisor+1,7
  2568  0585  2D90               	goto	l1703
  2569  0586  3001               	movlw	1
  2570  0587                     u1245:	
  2571  0587  35A0               	lslf	___lwdiv@divisor,f
  2572  0588  0DA1               	rlf	___lwdiv@divisor+1,f
  2573  0589  0B89               	decfsz	9,f
  2574  058A  2D87               	goto	u1245
  2575  058B  3001               	movlw	1
  2576  058C  00A4               	movwf	??___lwdiv
  2577  058D  0824               	movf	??___lwdiv,w
  2578  058E  07A7               	addwf	___lwdiv@counter,f
  2579  058F  2D84               	goto	l1701
  2580  0590                     l1703:	
  2581  0590  3001               	movlw	1
  2582  0591                     u1265:	
  2583  0591  35A5               	lslf	___lwdiv@quotient,f
  2584  0592  0DA6               	rlf	___lwdiv@quotient+1,f
  2585  0593  0B89               	decfsz	9,f
  2586  0594  2D91               	goto	u1265
  2587  0595  0821               	movf	___lwdiv@divisor+1,w
  2588  0596  0223               	subwf	___lwdiv@dividend+1,w
  2589  0597  1D03               	skipz
  2590  0598  2D9B               	goto	u1275
  2591  0599  0820               	movf	___lwdiv@divisor,w
  2592  059A  0222               	subwf	___lwdiv@dividend,w
  2593  059B                     u1275:	
  2594  059B  1C03               	skipc
  2595  059C  2DA2               	goto	l1709
  2596  059D  0820               	movf	___lwdiv@divisor,w
  2597  059E  02A2               	subwf	___lwdiv@dividend,f
  2598  059F  0821               	movf	___lwdiv@divisor+1,w
  2599  05A0  3BA3               	subwfb	___lwdiv@dividend+1,f
  2600  05A1  1425               	bsf	___lwdiv@quotient,0
  2601  05A2                     l1709:	
  2602  05A2  3001               	movlw	1
  2603  05A3                     u1285:	
  2604  05A3  36A1               	lsrf	___lwdiv@divisor+1,f
  2605  05A4  0CA0               	rrf	___lwdiv@divisor,f
  2606  05A5  0B89               	decfsz	9,f
  2607  05A6  2DA3               	goto	u1285
  2608  05A7  3001               	movlw	1
  2609  05A8  02A7               	subwf	___lwdiv@counter,f
  2610  05A9  1D03               	btfss	3,2
  2611  05AA  2D90               	goto	l1703
  2612  05AB                     l1713:	
  2613  05AB  0826               	movf	___lwdiv@quotient+1,w
  2614  05AC  01A1               	clrf	?___lwdiv+1
  2615  05AD  07A1               	addwf	?___lwdiv+1,f
  2616  05AE  0825               	movf	___lwdiv@quotient,w
  2617  05AF  01A0               	clrf	?___lwdiv
  2618  05B0  07A0               	addwf	?___lwdiv,f
  2619  05B1  0008               	return
  2620  05B2                     __end_of___lwdiv:	
  2621                           
  2622                           	psect	text9
  2623  0766                     __ptext9:	
  2624 ;; *************** function _ringbuf_init *****************
  2625 ;; Defined at:
  2626 ;;		line 111 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  2627 ;; Parameters:    Size  Location     Type
  2628 ;;  rb              1    wreg     PTR struct ringbuf
  2629 ;;		 -> tx_buf(4), 
  2630 ;;  internal_buf    1    0[BANK0 ] PTR unsigned char 
  2631 ;;		 -> main@buf(70), 
  2632 ;;  bufsize         1    1[BANK0 ] unsigned char 
  2633 ;; Auto vars:     Size  Location     Type
  2634 ;;  rb              1    3[BANK0 ] PTR struct ringbuf
  2635 ;;		 -> tx_buf(4), 
  2636 ;; Return value:  Size  Location     Type
  2637 ;;		None               void
  2638 ;; Registers used:
  2639 ;;		wreg, fsr1l, fsr1h, status,2
  2640 ;; Tracked objects:
  2641 ;;		On entry : 0/0
  2642 ;;		On exit  : 0/0
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2645 ;;      Params:         0       2       0       0       0       0
  2646 ;;      Locals:         0       1       0       0       0       0
  2647 ;;      Temps:          0       1       0       0       0       0
  2648 ;;      Totals:         0       4       0       0       0       0
  2649 ;;Total ram usage:        4 bytes
  2650 ;; Hardware stack levels used:    1
  2651 ;; Hardware stack levels required when called:    3
  2652 ;; This function calls:
  2653 ;;		Nothing
  2654 ;; This function is called by:
  2655 ;;		_main
  2656 ;; This function uses a non-reentrant model
  2657 ;;
  2658                           
  2659                           
  2660                           ;psect for function _ringbuf_init
  2661  0766                     _ringbuf_init:	
  2662                           
  2663                           ;incstack = 0
  2664                           ; Regs used in _ringbuf_init: [wreg+fsr1l+fsr1h+status,2]
  2665                           ;ringbuf_init@rb stored from wreg
  2666  0766  0020               	movlb	0	; select bank0
  2667  0767  00A3               	movwf	ringbuf_init@rb
  2668                           
  2669                           ;My_header.h: 112: rb->buf = internal_buf;
  2670  0768  0820               	movf	ringbuf_init@internal_buf,w
  2671  0769  00A2               	movwf	??_ringbuf_init
  2672  076A  0823               	movf	ringbuf_init@rb,w
  2673  076B  0086               	movwf	6
  2674  076C  0187               	clrf	7
  2675  076D  0822               	movf	??_ringbuf_init,w
  2676  076E  0081               	movwf	1
  2677                           
  2678                           ;My_header.h: 113: rb->size = bufsize;
  2679  076F  0821               	movf	ringbuf_init@bufsize,w
  2680  0770  00A2               	movwf	??_ringbuf_init
  2681  0771  0A23               	incf	ringbuf_init@rb,w
  2682  0772  0086               	movwf	6
  2683  0773  0187               	clrf	7
  2684  0774  0822               	movf	??_ringbuf_init,w
  2685  0775  0081               	movwf	1
  2686                           
  2687                           ;My_header.h: 114: rb->head = 0;
  2688  0776  0823               	movf	ringbuf_init@rb,w
  2689  0777  3E02               	addlw	2
  2690  0778  0086               	movwf	6
  2691  0779  0187               	clrf	7
  2692  077A  0181               	clrf	1
  2693                           
  2694                           ;My_header.h: 115: rb->tail = 0;
  2695  077B  0823               	movf	ringbuf_init@rb,w
  2696  077C  3E03               	addlw	3
  2697  077D  0086               	movwf	6
  2698  077E  0187               	clrf	7
  2699  077F  0181               	clrf	1
  2700  0780  0008               	return
  2701  0781                     __end_of_ringbuf_init:	
  2702                           
  2703                           	psect	text10
  2704  0FBF                     __ptext10:	
  2705 ;; *************** function _abs *****************
  2706 ;; Defined at:
  2707 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\abs.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;  a               2    0[BANK0 ] int 
  2710 ;; Auto vars:     Size  Location     Type
  2711 ;;		None
  2712 ;; Return value:  Size  Location     Type
  2713 ;;                  2    0[BANK0 ] int 
  2714 ;; Registers used:
  2715 ;;		wreg, status,2, status,0
  2716 ;; Tracked objects:
  2717 ;;		On entry : 0/0
  2718 ;;		On exit  : 0/0
  2719 ;;		Unchanged: 0/0
  2720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2721 ;;      Params:         0       2       0       0       0       0
  2722 ;;      Locals:         0       0       0       0       0       0
  2723 ;;      Temps:          0       2       0       0       0       0
  2724 ;;      Totals:         0       4       0       0       0       0
  2725 ;;Total ram usage:        4 bytes
  2726 ;; Hardware stack levels used:    1
  2727 ;; Hardware stack levels required when called:    3
  2728 ;; This function calls:
  2729 ;;		Nothing
  2730 ;; This function is called by:
  2731 ;;		_main
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735                           
  2736                           ;psect for function _abs
  2737  0FBF                     _abs:	
  2738                           
  2739                           ;incstack = 0
  2740                           ; Regs used in _abs: [wreg+status,2+status,0]
  2741  0FBF  0020               	movlb	0	; select bank0
  2742  0FC0  1FA1               	btfss	abs@a+1,7
  2743  0FC1  0008               	return
  2744  0FC2  0920               	comf	abs@a,w
  2745  0FC3  00A2               	movwf	??_abs
  2746  0FC4  0921               	comf	abs@a+1,w
  2747  0FC5  00A3               	movwf	??_abs+1
  2748  0FC6  0AA2               	incf	??_abs,f
  2749  0FC7  1903               	skipnz
  2750  0FC8  0AA3               	incf	??_abs+1,f
  2751  0FC9  0822               	movf	??_abs,w
  2752  0FCA  00A0               	movwf	?_abs
  2753  0FCB  0823               	movf	??_abs+1,w
  2754  0FCC  00A1               	movwf	?_abs+1
  2755  0FCD  0008               	return
  2756  0FCE                     __end_of_abs:	
  2757                           
  2758                           	psect	text11
  2759  04F0                     __ptext11:	
  2760 ;; *************** function ___awmod *****************
  2761 ;; Defined at:
  2762 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;  divisor         2   19[BANK0 ] int 
  2765 ;;  dividend        2   21[BANK0 ] int 
  2766 ;; Auto vars:     Size  Location     Type
  2767 ;;  sign            1   25[BANK0 ] unsigned char 
  2768 ;;  counter         1   24[BANK0 ] unsigned char 
  2769 ;; Return value:  Size  Location     Type
  2770 ;;                  2   19[BANK0 ] int 
  2771 ;; Registers used:
  2772 ;;		wreg, status,2, status,0
  2773 ;; Tracked objects:
  2774 ;;		On entry : 0/0
  2775 ;;		On exit  : 0/0
  2776 ;;		Unchanged: 0/0
  2777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2778 ;;      Params:         0       4       0       0       0       0
  2779 ;;      Locals:         0       2       0       0       0       0
  2780 ;;      Temps:          0       1       0       0       0       0
  2781 ;;      Totals:         0       7       0       0       0       0
  2782 ;;Total ram usage:        7 bytes
  2783 ;; Hardware stack levels used:    1
  2784 ;; Hardware stack levels required when called:    3
  2785 ;; This function calls:
  2786 ;;		Nothing
  2787 ;; This function is called by:
  2788 ;;		_main
  2789 ;; This function uses a non-reentrant model
  2790 ;;
  2791                           
  2792                           
  2793                           ;psect for function ___awmod
  2794  04F0                     ___awmod:	
  2795                           
  2796                           ;incstack = 0
  2797                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2798  04F0  0020               	movlb	0	; select bank0
  2799  04F1  01B9               	clrf	___awmod@sign
  2800  04F2  1FB6               	btfss	___awmod@dividend+1,7
  2801  04F3  2CFB               	goto	l2097
  2802  04F4  09B5               	comf	___awmod@dividend,f
  2803  04F5  09B6               	comf	___awmod@dividend+1,f
  2804  04F6  0AB5               	incf	___awmod@dividend,f
  2805  04F7  1903               	skipnz
  2806  04F8  0AB6               	incf	___awmod@dividend+1,f
  2807  04F9  01B9               	clrf	___awmod@sign
  2808  04FA  0AB9               	incf	___awmod@sign,f
  2809  04FB                     l2097:	
  2810  04FB  1FB4               	btfss	___awmod@divisor+1,7
  2811  04FC  2D02               	goto	l2101
  2812  04FD  09B3               	comf	___awmod@divisor,f
  2813  04FE  09B4               	comf	___awmod@divisor+1,f
  2814  04FF  0AB3               	incf	___awmod@divisor,f
  2815  0500  1903               	skipnz
  2816  0501  0AB4               	incf	___awmod@divisor+1,f
  2817  0502                     l2101:	
  2818  0502  0834               	movf	___awmod@divisor+1,w
  2819  0503  0433               	iorwf	___awmod@divisor,w
  2820  0504  1903               	skipnz
  2821  0505  2D29               	goto	l2119
  2822  0506  01B8               	clrf	___awmod@counter
  2823  0507  0AB8               	incf	___awmod@counter,f
  2824  0508                     l2109:	
  2825  0508  1BB4               	btfsc	___awmod@divisor+1,7
  2826  0509  2D14               	goto	l2111
  2827  050A  3001               	movlw	1
  2828  050B                     u1945:	
  2829  050B  35B3               	lslf	___awmod@divisor,f
  2830  050C  0DB4               	rlf	___awmod@divisor+1,f
  2831  050D  0B89               	decfsz	9,f
  2832  050E  2D0B               	goto	u1945
  2833  050F  3001               	movlw	1
  2834  0510  00B7               	movwf	??___awmod
  2835  0511  0837               	movf	??___awmod,w
  2836  0512  07B8               	addwf	___awmod@counter,f
  2837  0513  2D08               	goto	l2109
  2838  0514                     l2111:	
  2839  0514  0834               	movf	___awmod@divisor+1,w
  2840  0515  0236               	subwf	___awmod@dividend+1,w
  2841  0516  1D03               	skipz
  2842  0517  2D1A               	goto	u1965
  2843  0518  0833               	movf	___awmod@divisor,w
  2844  0519  0235               	subwf	___awmod@dividend,w
  2845  051A                     u1965:	
  2846  051A  1C03               	skipc
  2847  051B  2D20               	goto	l2115
  2848  051C  0833               	movf	___awmod@divisor,w
  2849  051D  02B5               	subwf	___awmod@dividend,f
  2850  051E  0834               	movf	___awmod@divisor+1,w
  2851  051F  3BB6               	subwfb	___awmod@dividend+1,f
  2852  0520                     l2115:	
  2853  0520  3001               	movlw	1
  2854  0521                     u1975:	
  2855  0521  36B4               	lsrf	___awmod@divisor+1,f
  2856  0522  0CB3               	rrf	___awmod@divisor,f
  2857  0523  0B89               	decfsz	9,f
  2858  0524  2D21               	goto	u1975
  2859  0525  3001               	movlw	1
  2860  0526  02B8               	subwf	___awmod@counter,f
  2861  0527  1D03               	btfss	3,2
  2862  0528  2D14               	goto	l2111
  2863  0529                     l2119:	
  2864  0529  0839               	movf	___awmod@sign,w
  2865  052A  1903               	btfsc	3,2
  2866  052B  2D31               	goto	l2123
  2867  052C  09B5               	comf	___awmod@dividend,f
  2868  052D  09B6               	comf	___awmod@dividend+1,f
  2869  052E  0AB5               	incf	___awmod@dividend,f
  2870  052F  1903               	skipnz
  2871  0530  0AB6               	incf	___awmod@dividend+1,f
  2872  0531                     l2123:	
  2873  0531  0836               	movf	___awmod@dividend+1,w
  2874  0532  01B4               	clrf	?___awmod+1
  2875  0533  07B4               	addwf	?___awmod+1,f
  2876  0534  0835               	movf	___awmod@dividend,w
  2877  0535  01B3               	clrf	?___awmod
  2878  0536  07B3               	addwf	?___awmod,f
  2879  0537  0008               	return
  2880  0538                     __end_of___awmod:	
  2881                           
  2882                           	psect	text12
  2883  044F                     __ptext12:	
  2884 ;; *************** function ___awdiv *****************
  2885 ;; Defined at:
  2886 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  divisor         2    4[BANK0 ] int 
  2889 ;;  dividend        2    6[BANK0 ] int 
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;  quotient        2   11[BANK0 ] int 
  2892 ;;  sign            1   10[BANK0 ] unsigned char 
  2893 ;;  counter         1    9[BANK0 ] unsigned char 
  2894 ;; Return value:  Size  Location     Type
  2895 ;;                  2    4[BANK0 ] int 
  2896 ;; Registers used:
  2897 ;;		wreg, status,2, status,0
  2898 ;; Tracked objects:
  2899 ;;		On entry : 0/0
  2900 ;;		On exit  : 0/0
  2901 ;;		Unchanged: 0/0
  2902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2903 ;;      Params:         0       4       0       0       0       0
  2904 ;;      Locals:         0       4       0       0       0       0
  2905 ;;      Temps:          0       1       0       0       0       0
  2906 ;;      Totals:         0       9       0       0       0       0
  2907 ;;Total ram usage:        9 bytes
  2908 ;; Hardware stack levels used:    1
  2909 ;; Hardware stack levels required when called:    3
  2910 ;; This function calls:
  2911 ;;		Nothing
  2912 ;; This function is called by:
  2913 ;;		_main
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           
  2918                           ;psect for function ___awdiv
  2919  044F                     ___awdiv:	
  2920                           
  2921                           ;incstack = 0
  2922                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2923  044F  0020               	movlb	0	; select bank0
  2924  0450  01AA               	clrf	___awdiv@sign
  2925  0451  1FA5               	btfss	___awdiv@divisor+1,7
  2926  0452  2C5A               	goto	l2053
  2927  0453  09A4               	comf	___awdiv@divisor,f
  2928  0454  09A5               	comf	___awdiv@divisor+1,f
  2929  0455  0AA4               	incf	___awdiv@divisor,f
  2930  0456  1903               	skipnz
  2931  0457  0AA5               	incf	___awdiv@divisor+1,f
  2932  0458  01AA               	clrf	___awdiv@sign
  2933  0459  0AAA               	incf	___awdiv@sign,f
  2934  045A                     l2053:	
  2935  045A  1FA7               	btfss	___awdiv@dividend+1,7
  2936  045B  2C65               	goto	l2059
  2937  045C  09A6               	comf	___awdiv@dividend,f
  2938  045D  09A7               	comf	___awdiv@dividend+1,f
  2939  045E  0AA6               	incf	___awdiv@dividend,f
  2940  045F  1903               	skipnz
  2941  0460  0AA7               	incf	___awdiv@dividend+1,f
  2942  0461  3001               	movlw	1
  2943  0462  00A8               	movwf	??___awdiv
  2944  0463  0828               	movf	??___awdiv,w
  2945  0464  06AA               	xorwf	___awdiv@sign,f
  2946  0465                     l2059:	
  2947  0465  01AB               	clrf	___awdiv@quotient
  2948  0466  01AC               	clrf	___awdiv@quotient+1
  2949  0467  0825               	movf	___awdiv@divisor+1,w
  2950  0468  0424               	iorwf	___awdiv@divisor,w
  2951  0469  1903               	skipnz
  2952  046A  2C94               	goto	l2081
  2953  046B  01A9               	clrf	___awdiv@counter
  2954  046C  0AA9               	incf	___awdiv@counter,f
  2955  046D                     l2069:	
  2956  046D  1BA5               	btfsc	___awdiv@divisor+1,7
  2957  046E  2C79               	goto	l2071
  2958  046F  3001               	movlw	1
  2959  0470                     u1845:	
  2960  0470  35A4               	lslf	___awdiv@divisor,f
  2961  0471  0DA5               	rlf	___awdiv@divisor+1,f
  2962  0472  0B89               	decfsz	9,f
  2963  0473  2C70               	goto	u1845
  2964  0474  3001               	movlw	1
  2965  0475  00A8               	movwf	??___awdiv
  2966  0476  0828               	movf	??___awdiv,w
  2967  0477  07A9               	addwf	___awdiv@counter,f
  2968  0478  2C6D               	goto	l2069
  2969  0479                     l2071:	
  2970  0479  3001               	movlw	1
  2971  047A                     u1865:	
  2972  047A  35AB               	lslf	___awdiv@quotient,f
  2973  047B  0DAC               	rlf	___awdiv@quotient+1,f
  2974  047C  0B89               	decfsz	9,f
  2975  047D  2C7A               	goto	u1865
  2976  047E  0825               	movf	___awdiv@divisor+1,w
  2977  047F  0227               	subwf	___awdiv@dividend+1,w
  2978  0480  1D03               	skipz
  2979  0481  2C84               	goto	u1875
  2980  0482  0824               	movf	___awdiv@divisor,w
  2981  0483  0226               	subwf	___awdiv@dividend,w
  2982  0484                     u1875:	
  2983  0484  1C03               	skipc
  2984  0485  2C8B               	goto	l2077
  2985  0486  0824               	movf	___awdiv@divisor,w
  2986  0487  02A6               	subwf	___awdiv@dividend,f
  2987  0488  0825               	movf	___awdiv@divisor+1,w
  2988  0489  3BA7               	subwfb	___awdiv@dividend+1,f
  2989  048A  142B               	bsf	___awdiv@quotient,0
  2990  048B                     l2077:	
  2991  048B  3001               	movlw	1
  2992  048C                     u1885:	
  2993  048C  36A5               	lsrf	___awdiv@divisor+1,f
  2994  048D  0CA4               	rrf	___awdiv@divisor,f
  2995  048E  0B89               	decfsz	9,f
  2996  048F  2C8C               	goto	u1885
  2997  0490  3001               	movlw	1
  2998  0491  02A9               	subwf	___awdiv@counter,f
  2999  0492  1D03               	btfss	3,2
  3000  0493  2C79               	goto	l2071
  3001  0494                     l2081:	
  3002  0494  082A               	movf	___awdiv@sign,w
  3003  0495  1903               	btfsc	3,2
  3004  0496  2C9C               	goto	l2085
  3005  0497  09AB               	comf	___awdiv@quotient,f
  3006  0498  09AC               	comf	___awdiv@quotient+1,f
  3007  0499  0AAB               	incf	___awdiv@quotient,f
  3008  049A  1903               	skipnz
  3009  049B  0AAC               	incf	___awdiv@quotient+1,f
  3010  049C                     l2085:	
  3011  049C  082C               	movf	___awdiv@quotient+1,w
  3012  049D  01A5               	clrf	?___awdiv+1
  3013  049E  07A5               	addwf	?___awdiv+1,f
  3014  049F  082B               	movf	___awdiv@quotient,w
  3015  04A0  01A4               	clrf	?___awdiv
  3016  04A1  07A4               	addwf	?___awdiv,f
  3017  04A2  0008               	return
  3018  04A3                     __end_of___awdiv:	
  3019                           
  3020                           	psect	text13
  3021  07E6                     __ptext13:	
  3022 ;; *************** function _UART_init *****************
  3023 ;; Defined at:
  3024 ;;		line 146 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;  device          1    wreg     unsigned char 
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;  device          1    0[BANK0 ] unsigned char 
  3029 ;; Return value:  Size  Location     Type
  3030 ;;		None               void
  3031 ;; Registers used:
  3032 ;;		wreg, status,2, status,0
  3033 ;; Tracked objects:
  3034 ;;		On entry : 0/0
  3035 ;;		On exit  : 0/0
  3036 ;;		Unchanged: 0/0
  3037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3038 ;;      Params:         0       0       0       0       0       0
  3039 ;;      Locals:         0       1       0       0       0       0
  3040 ;;      Temps:          0       0       0       0       0       0
  3041 ;;      Totals:         0       1       0       0       0       0
  3042 ;;Total ram usage:        1 bytes
  3043 ;; Hardware stack levels used:    1
  3044 ;; Hardware stack levels required when called:    3
  3045 ;; This function calls:
  3046 ;;		Nothing
  3047 ;; This function is called by:
  3048 ;;		_main
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           
  3053                           ;psect for function _UART_init
  3054  07E6                     _UART_init:	
  3055                           
  3056                           ;incstack = 0
  3057                           ; Regs used in _UART_init: [wreg+status,2+status,0]
  3058                           ;UART_init@device stored from wreg
  3059  07E6  0020               	movlb	0	; select bank0
  3060  07E7  00A0               	movwf	UART_init@device
  3061                           
  3062                           ;My_header.h: 147: if (device == 0) {
  3063  07E8  08A0               	movf	UART_init@device,f
  3064  07E9  1D03               	skipz
  3065  07EA  0008               	return
  3066                           
  3067                           ;My_header.h: 148: SPEN = 1;
  3068  07EB  0023               	movlb	3	; select bank3
  3069  07EC  179D               	bsf	29,7	;volatile
  3070                           
  3071                           ;My_header.h: 149: RCSTA = 0x90;
  3072  07ED  3090               	movlw	144
  3073  07EE  009D               	movwf	29	;volatile
  3074                           
  3075                           ;My_header.h: 150: BRG16 = 0;
  3076  07EF  119F               	bcf	31,3	;volatile
  3077                           
  3078                           ;My_header.h: 151: SPBRGH = 0;
  3079  07F0  019C               	clrf	28	;volatile
  3080                           
  3081                           ;My_header.h: 152: SPBRGL = 207;
  3082  07F1  30CF               	movlw	207
  3083  07F2  009B               	movwf	27	;volatile
  3084                           
  3085                           ;My_header.h: 153: TXSTA = 0x24;
  3086  07F3  3024               	movlw	36
  3087  07F4  009E               	movwf	30	;volatile
  3088                           
  3089                           ;My_header.h: 154: PIE1bits.RCIE = 1;
  3090  07F5  0021               	movlb	1	; select bank1
  3091  07F6  1691               	bsf	17,5	;volatile
  3092  07F7  0008               	return
  3093  07F8                     __end_of_UART_init:	
  3094                           
  3095                           	psect	text14
  3096  06E8                     __ptext14:	
  3097 ;; *************** function _TM_init *****************
  3098 ;; Defined at:
  3099 ;;		line 384 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  3100 ;; Parameters:    Size  Location     Type
  3101 ;;  config          1    wreg     unsigned char 
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;  config          1    5[BANK0 ] unsigned char 
  3104 ;;  ans             1    6[BANK0 ] unsigned char 
  3105 ;; Return value:  Size  Location     Type
  3106 ;;		None               void
  3107 ;; Registers used:
  3108 ;;		wreg, status,2, status,0, pclath, cstack
  3109 ;; Tracked objects:
  3110 ;;		On entry : 0/0
  3111 ;;		On exit  : 0/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3114 ;;      Params:         0       0       0       0       0       0
  3115 ;;      Locals:         0       2       0       0       0       0
  3116 ;;      Temps:          0       1       0       0       0       0
  3117 ;;      Totals:         0       3       0       0       0       0
  3118 ;;Total ram usage:        3 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; Hardware stack levels required when called:    5
  3121 ;; This function calls:
  3122 ;;		_I2C_Send
  3123 ;;		_I2C_Start
  3124 ;;		_I2C_Stop
  3125 ;; This function is called by:
  3126 ;;		_main
  3127 ;; This function uses a non-reentrant model
  3128 ;;
  3129                           
  3130                           
  3131                           ;psect for function _TM_init
  3132  06E8                     _TM_init:	
  3133                           
  3134                           ;incstack = 0
  3135                           ; Regs used in _TM_init: [wreg+status,2+status,0+pclath+cstack]
  3136                           ;TM_init@config stored from wreg
  3137  06E8  0020               	movlb	0	; select bank0
  3138  06E9  00A5               	movwf	TM_init@config
  3139                           
  3140                           ;My_header.h: 385: uint8_t ans;
  3141                           ;My_header.h: 386: ans = I2C_Start(0x48, 0);
  3142  06EA  01A2               	clrf	I2C_Start@rw
  3143  06EB  3048               	movlw	72
  3144  06EC  3187  2781  3186   	fcall	_I2C_Start
  3145  06EF  0020               	movlb	0	; select bank0
  3146  06F0  00A4               	movwf	??_TM_init
  3147  06F1  0824               	movf	??_TM_init,w
  3148  06F2  00A6               	movwf	TM_init@ans
  3149                           
  3150                           ;My_header.h: 387: if (ans == 0) {
  3151  06F3  08A6               	movf	TM_init@ans,f
  3152  06F4  1D03               	skipz
  3153  06F5  2EFF               	goto	l251
  3154                           
  3155                           ;My_header.h: 388: I2C_Send(0x01);
  3156  06F6  3001               	movlw	1
  3157  06F7  318F  27DD  3186   	fcall	_I2C_Send
  3158                           
  3159                           ;My_header.h: 389: I2C_Send(config);
  3160  06FA  0020               	movlb	0	; select bank0
  3161  06FB  0825               	movf	TM_init@config,w
  3162  06FC  318F  27DD  3186   	fcall	_I2C_Send
  3163  06FF                     l251:	
  3164                           
  3165                           ;My_header.h: 390: }
  3166                           ;My_header.h: 391: I2C_Stop();
  3167  06FF  3187  27F8  3186   	fcall	_I2C_Stop
  3168                           
  3169                           ;My_header.h: 392: _delay((unsigned long)((26)*(32000000/4000000.0)));
  3170  0702  3045               	movlw	69
  3171  0703  0020               	movlb	0	; select bank0
  3172  0704  00A4               	movwf	??_TM_init
  3173  0705                     u2147:	
  3174  0705  0BA4               	decfsz	??_TM_init,f
  3175  0706  2F05               	goto	u2147
  3176  0707  0008               	return
  3177  0708                     __end_of_TM_init:	
  3178                           
  3179                           	psect	text15
  3180  04A3                     __ptext15:	
  3181 ;; *************** function _TM_Read *****************
  3182 ;; Defined at:
  3183 ;;		line 395 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  3184 ;; Parameters:    Size  Location     Type
  3185 ;;		None
  3186 ;; Auto vars:     Size  Location     Type
  3187 ;;  ans             1   15[BANK0 ] unsigned char 
  3188 ;;  dataL           1   14[BANK0 ] unsigned char 
  3189 ;;  dataH           1   13[BANK0 ] unsigned char 
  3190 ;; Return value:  Size  Location     Type
  3191 ;;                  2    6[BANK0 ] unsigned int 
  3192 ;; Registers used:
  3193 ;;		wreg, status,2, status,0, pclath, cstack
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3199 ;;      Params:         0       2       0       0       0       0
  3200 ;;      Locals:         0       3       0       0       0       0
  3201 ;;      Temps:          0       5       0       0       0       0
  3202 ;;      Totals:         0      10       0       0       0       0
  3203 ;;Total ram usage:       10 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; Hardware stack levels required when called:    5
  3206 ;; This function calls:
  3207 ;;		_I2C_Receive
  3208 ;;		_I2C_Send
  3209 ;;		_I2C_Start
  3210 ;;		_I2C_Stop
  3211 ;;		_I2C_rStart
  3212 ;; This function is called by:
  3213 ;;		_main
  3214 ;; This function uses a non-reentrant model
  3215 ;;
  3216                           
  3217                           
  3218                           ;psect for function _TM_Read
  3219  04A3                     _TM_Read:	
  3220                           
  3221                           ;My_header.h: 396: uint8_t dataH;
  3222                           ;My_header.h: 397: uint8_t dataL;
  3223                           ;My_header.h: 398: uint8_t ans;
  3224                           ;My_header.h: 399: ans = I2C_Start(0x48, 0);
  3225                           
  3226                           ;incstack = 0
  3227                           ; Regs used in _TM_Read: [wreg+status,2+status,0+pclath+cstack]
  3228  04A3  0020               	movlb	0	; select bank0
  3229  04A4  01A2               	clrf	I2C_Start@rw
  3230  04A5  3048               	movlw	72
  3231  04A6  3187  2781  3184   	fcall	_I2C_Start
  3232  04A9  0020               	movlb	0	; select bank0
  3233  04AA  00A8               	movwf	??_TM_Read
  3234  04AB  0828               	movf	??_TM_Read,w
  3235  04AC  00AF               	movwf	TM_Read@ans
  3236                           
  3237                           ;My_header.h: 400: if (ans == 0) {
  3238  04AD  08AF               	movf	TM_Read@ans,f
  3239  04AE  1D03               	skipz
  3240  04AF  2CB4               	goto	l255
  3241                           
  3242                           ;My_header.h: 401: I2C_Send(0x00);
  3243  04B0  3000               	movlw	0
  3244  04B1  318F  27DD  3184   	fcall	_I2C_Send
  3245  04B4                     l255:	
  3246                           
  3247                           ;My_header.h: 402: }
  3248                           ;My_header.h: 403: ans = I2C_rStart(0x48, 1);
  3249  04B4  3048               	movlw	72
  3250  04B5  0020               	movlb	0	; select bank0
  3251  04B6  00A2               	movwf	I2C_rStart@adrs
  3252  04B7  3000               	movlw	0
  3253  04B8  00A3               	movwf	I2C_rStart@adrs+1
  3254  04B9  3001               	movlw	1
  3255  04BA  00A4               	movwf	I2C_rStart@rw
  3256  04BB  3000               	movlw	0
  3257  04BC  00A5               	movwf	I2C_rStart@rw+1
  3258  04BD  3187  27B6  3184   	fcall	_I2C_rStart
  3259  04C0  0020               	movlb	0	; select bank0
  3260  04C1  00A8               	movwf	??_TM_Read
  3261  04C2  0828               	movf	??_TM_Read,w
  3262  04C3  00AF               	movwf	TM_Read@ans
  3263                           
  3264                           ;My_header.h: 404: if (ans == 0) {
  3265  04C4  08AF               	movf	TM_Read@ans,f
  3266  04C5  1D03               	skipz
  3267  04C6  2CD7               	goto	l256
  3268                           
  3269                           ;My_header.h: 405: dataH = I2C_Receive(0);
  3270  04C7  3000               	movlw	0
  3271  04C8  3187  2708  3184   	fcall	_I2C_Receive
  3272  04CB  0020               	movlb	0	; select bank0
  3273  04CC  00A8               	movwf	??_TM_Read
  3274  04CD  0828               	movf	??_TM_Read,w
  3275  04CE  00AD               	movwf	TM_Read@dataH
  3276                           
  3277                           ;My_header.h: 406: dataL = I2C_Receive(1);
  3278  04CF  3001               	movlw	1
  3279  04D0  3187  2708  3184   	fcall	_I2C_Receive
  3280  04D3  0020               	movlb	0	; select bank0
  3281  04D4  00A8               	movwf	??_TM_Read
  3282  04D5  0828               	movf	??_TM_Read,w
  3283  04D6  00AE               	movwf	TM_Read@dataL
  3284  04D7                     l256:	
  3285                           
  3286                           ;My_header.h: 407: }
  3287                           ;My_header.h: 408: I2C_Stop();
  3288  04D7  3187  27F8  3184   	fcall	_I2C_Stop
  3289                           
  3290                           ;My_header.h: 409: _delay((unsigned long)((26)*(32000000/4000000.0)));
  3291  04DA  3045               	movlw	69
  3292  04DB  0020               	movlb	0	; select bank0
  3293  04DC  00A8               	movwf	??_TM_Read
  3294  04DD                     u2157:	
  3295  04DD  0BA8               	decfsz	??_TM_Read,f
  3296  04DE  2CDD               	goto	u2157
  3297                           
  3298                           ;My_header.h: 414: return (dataH << 8) +dataL;
  3299  04DF  0020               	movlb	0	; select bank0
  3300  04E0  082E               	movf	TM_Read@dataL,w
  3301  04E1  00A8               	movwf	??_TM_Read
  3302  04E2  01A9               	clrf	??_TM_Read+1
  3303  04E3  082D               	movf	TM_Read@dataH,w
  3304  04E4  00AA               	movwf	??_TM_Read+2
  3305  04E5  01AB               	clrf	??_TM_Read+3
  3306  04E6  082A               	movf	??_TM_Read+2,w
  3307  04E7  00AB               	movwf	??_TM_Read+3
  3308  04E8  01AA               	clrf	??_TM_Read+2
  3309  04E9  0828               	movf	??_TM_Read,w
  3310  04EA  072A               	addwf	??_TM_Read+2,w
  3311  04EB  00A6               	movwf	?_TM_Read
  3312  04EC  0829               	movf	??_TM_Read+1,w
  3313  04ED  3D2B               	addwfc	??_TM_Read+3,w
  3314  04EE  00A7               	movwf	?_TM_Read+1
  3315  04EF  0008               	return
  3316  04F0                     __end_of_TM_Read:	
  3317                           
  3318                           	psect	text16
  3319  07B6                     __ptext16:	
  3320 ;; *************** function _I2C_rStart *****************
  3321 ;; Defined at:
  3322 ;;		line 222 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  3323 ;; Parameters:    Size  Location     Type
  3324 ;;  adrs            2    2[BANK0 ] int 
  3325 ;;  rw              2    4[BANK0 ] int 
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;		None
  3328 ;; Return value:  Size  Location     Type
  3329 ;;                  1    wreg      unsigned char 
  3330 ;; Registers used:
  3331 ;;		wreg, status,2, status,0, pclath, cstack
  3332 ;; Tracked objects:
  3333 ;;		On entry : 0/0
  3334 ;;		On exit  : 0/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3337 ;;      Params:         0       4       0       0       0       0
  3338 ;;      Locals:         0       0       0       0       0       0
  3339 ;;      Temps:          0       0       0       0       0       0
  3340 ;;      Totals:         0       4       0       0       0       0
  3341 ;;Total ram usage:        4 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; Hardware stack levels required when called:    4
  3344 ;; This function calls:
  3345 ;;		_I2C_IdleCheck
  3346 ;; This function is called by:
  3347 ;;		_TM_Read
  3348 ;;		_RTC_Read
  3349 ;; This function uses a non-reentrant model
  3350 ;;
  3351                           
  3352                           
  3353                           ;psect for function _I2C_rStart
  3354  07B6                     _I2C_rStart:	
  3355                           
  3356                           ;My_header.h: 224: I2C_IdleCheck(0x5);
  3357                           
  3358                           ;incstack = 0
  3359                           ; Regs used in _I2C_rStart: [wreg+status,2+status,0+pclath+cstack]
  3360  07B6  3005               	movlw	5
  3361  07B7  318F  27A1  3187   	fcall	_I2C_IdleCheck
  3362                           
  3363                           ;My_header.h: 225: SSP1CON2bits.RSEN = 1;
  3364  07BA  0024               	movlb	4	; select bank4
  3365  07BB  1496               	bsf	22,1	;volatile
  3366                           
  3367                           ;My_header.h: 227: I2C_IdleCheck(0x5);
  3368  07BC  3005               	movlw	5
  3369  07BD  318F  27A1  3187   	fcall	_I2C_IdleCheck
  3370                           
  3371                           ;My_header.h: 228: SSP1IF = 0;
  3372  07C0  0020               	movlb	0	; select bank0
  3373  07C1  1191               	bcf	17,3	;volatile
  3374                           
  3375                           ;My_header.h: 229: SSP1BUF = (char) ((adrs << 1) + rw);
  3376  07C2  3522               	lslf	I2C_rStart@adrs,w
  3377  07C3  0724               	addwf	I2C_rStart@rw,w
  3378  07C4  0024               	movlb	4	; select bank4
  3379  07C5  0091               	movwf	17	;volatile
  3380  07C6                     l192:	
  3381                           ;My_header.h: 230: while (!SSP1IF);
  3382                           
  3383  07C6  0020               	movlb	0	; select bank0
  3384  07C7  1D91               	btfss	17,3	;volatile
  3385  07C8  2FC6               	goto	l192
  3386                           
  3387                           ;My_header.h: 231: return SSP1CON2bits.ACKSTAT;
  3388  07C9  0024               	movlb	4	; select bank4
  3389  07CA  0E16               	swapf	22,w	;volatile
  3390  07CB  0C89               	rrf	9,f
  3391  07CC  0C89               	rrf	9,f
  3392  07CD  3901               	andlw	1
  3393  07CE  0008               	return
  3394  07CF                     __end_of_I2C_rStart:	
  3395                           
  3396                           	psect	text17
  3397  0708                     __ptext17:	
  3398 ;; *************** function _I2C_Receive *****************
  3399 ;; Defined at:
  3400 ;;		line 248 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  3401 ;; Parameters:    Size  Location     Type
  3402 ;;  ack             1    wreg     unsigned char 
  3403 ;; Auto vars:     Size  Location     Type
  3404 ;;  ack             1    3[BANK0 ] unsigned char 
  3405 ;;  data            1    4[BANK0 ] unsigned char 
  3406 ;; Return value:  Size  Location     Type
  3407 ;;                  1    wreg      unsigned char 
  3408 ;; Registers used:
  3409 ;;		wreg, status,2, status,0, pclath, cstack
  3410 ;; Tracked objects:
  3411 ;;		On entry : 0/0
  3412 ;;		On exit  : 0/0
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3415 ;;      Params:         0       0       0       0       0       0
  3416 ;;      Locals:         0       2       0       0       0       0
  3417 ;;      Temps:          0       1       0       0       0       0
  3418 ;;      Totals:         0       3       0       0       0       0
  3419 ;;Total ram usage:        3 bytes
  3420 ;; Hardware stack levels used:    1
  3421 ;; Hardware stack levels required when called:    4
  3422 ;; This function calls:
  3423 ;;		_I2C_IdleCheck
  3424 ;; This function is called by:
  3425 ;;		_TM_Read
  3426 ;;		_RTC_Read
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           
  3431                           ;psect for function _I2C_Receive
  3432  0708                     _I2C_Receive:	
  3433                           
  3434                           ;incstack = 0
  3435                           ; Regs used in _I2C_Receive: [wreg+status,2+status,0+pclath+cstack]
  3436                           ;I2C_Receive@ack stored from wreg
  3437  0708  0020               	movlb	0	; select bank0
  3438  0709  00A3               	movwf	I2C_Receive@ack
  3439                           
  3440                           ;My_header.h: 249: uint8_t data;
  3441                           ;My_header.h: 251: I2C_IdleCheck(0x5);
  3442  070A  3005               	movlw	5
  3443  070B  318F  27A1  3187   	fcall	_I2C_IdleCheck
  3444                           
  3445                           ;My_header.h: 252: SSP1CON2bits.RCEN = 1;
  3446  070E  0024               	movlb	4	; select bank4
  3447  070F  1596               	bsf	22,3	;volatile
  3448                           
  3449                           ;My_header.h: 253: I2C_IdleCheck(0x4);
  3450  0710  3004               	movlw	4
  3451  0711  318F  27A1  3187   	fcall	_I2C_IdleCheck
  3452                           
  3453                           ;My_header.h: 254: data = SSP1BUF;
  3454  0714  0024               	movlb	4	; select bank4
  3455  0715  0811               	movf	17,w	;volatile
  3456  0716  0020               	movlb	0	; select bank0
  3457  0717  00A2               	movwf	??_I2C_Receive
  3458  0718  0822               	movf	??_I2C_Receive,w
  3459  0719  00A4               	movwf	I2C_Receive@data
  3460                           
  3461                           ;My_header.h: 255: I2C_IdleCheck(0x5);
  3462  071A  3005               	movlw	5
  3463  071B  318F  27A1         	fcall	_I2C_IdleCheck
  3464                           
  3465                           ;My_header.h: 256: SSP1CON2bits.ACKDT = ack;
  3466  071D  0020               	movlb	0	; select bank0
  3467  071E  0823               	movf	I2C_Receive@ack,w
  3468  071F  0024               	movlb	4	; select bank4
  3469  0720  1D03               	skipz
  3470  0721  1696               	bsf	22,5	;volatile
  3471  0722  1903               	skipnz
  3472  0723  1296               	bcf	22,5	;volatile
  3473                           
  3474                           ;My_header.h: 257: SSP1CON2bits.ACKEN = 1;
  3475  0724  1616               	bsf	22,4	;volatile
  3476                           
  3477                           ;My_header.h: 258: return data;
  3478  0725  0020               	movlb	0	; select bank0
  3479  0726  0824               	movf	I2C_Receive@data,w
  3480  0727  0008               	return
  3481  0728                     __end_of_I2C_Receive:	
  3482                           
  3483                           	psect	text18
  3484  0538                     __ptext18:	
  3485 ;; *************** function _LCD_init *****************
  3486 ;; Defined at:
  3487 ;;		line 334 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  3488 ;; Parameters:    Size  Location     Type
  3489 ;;		None
  3490 ;; Auto vars:     Size  Location     Type
  3491 ;;		None
  3492 ;; Return value:  Size  Location     Type
  3493 ;;		None               void
  3494 ;; Registers used:
  3495 ;;		wreg, status,2, status,0, pclath, cstack
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3501 ;;      Params:         0       0       0       0       0       0
  3502 ;;      Locals:         0       0       0       0       0       0
  3503 ;;      Temps:          0       3       0       0       0       0
  3504 ;;      Totals:         0       3       0       0       0       0
  3505 ;;Total ram usage:        3 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; Hardware stack levels required when called:    7
  3508 ;; This function calls:
  3509 ;;		_LCD_Clear
  3510 ;;		_LCD_Command
  3511 ;; This function is called by:
  3512 ;;		_main
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           
  3517                           ;psect for function _LCD_init
  3518  0538                     _LCD_init:	
  3519                           
  3520                           ;My_header.h: 335: _delay((unsigned long)((40)*(32000000/4000.0)));
  3521                           
  3522                           ;incstack = 0
  3523                           ; Regs used in _LCD_init: [wreg+status,2+status,0+pclath+cstack]
  3524  0538  3002               	movlw	2
  3525  0539  0020               	movlb	0	; select bank0
  3526  053A  00AB               	movwf	??_LCD_init+2
  3527  053B  30A0               	movlw	160
  3528  053C  00AA               	movwf	??_LCD_init+1
  3529  053D  3092               	movlw	146
  3530  053E  00A9               	movwf	??_LCD_init
  3531  053F                     u2167:	
  3532  053F  0BA9               	decfsz	??_LCD_init,f
  3533  0540  2D3F               	goto	u2167
  3534  0541  0BAA               	decfsz	??_LCD_init+1,f
  3535  0542  2D3F               	goto	u2167
  3536  0543  0BAB               	decfsz	??_LCD_init+2,f
  3537  0544  2D3F               	goto	u2167
  3538  0545  0000               	nop
  3539                           
  3540                           ;My_header.h: 336: LCD_Command(0x38);
  3541  0546  3038               	movlw	56
  3542  0547  3187  2728  3185   	fcall	_LCD_Command
  3543                           
  3544                           ;My_header.h: 337: LCD_Command(0x39);
  3545  054A  3039               	movlw	57
  3546  054B  3187  2728  3185   	fcall	_LCD_Command
  3547                           
  3548                           ;My_header.h: 338: LCD_Command(0x14);
  3549  054E  3014               	movlw	20
  3550  054F  3187  2728  3185   	fcall	_LCD_Command
  3551                           
  3552                           ;My_header.h: 339: LCD_Command(0x70);
  3553  0552  3070               	movlw	112
  3554  0553  3187  2728  3185   	fcall	_LCD_Command
  3555                           
  3556                           ;My_header.h: 340: LCD_Command(0x56);
  3557  0556  3056               	movlw	86
  3558  0557  3187  2728  3185   	fcall	_LCD_Command
  3559                           
  3560                           ;My_header.h: 341: LCD_Command(0x6C);
  3561  055A  306C               	movlw	108
  3562  055B  3187  2728  3185   	fcall	_LCD_Command
  3563                           
  3564                           ;My_header.h: 342: _delay((unsigned long)((200)*(32000000/4000.0)));
  3565  055E  3009               	movlw	9
  3566  055F  0020               	movlb	0	; select bank0
  3567  0560  00AB               	movwf	??_LCD_init+2
  3568  0561  301E               	movlw	30
  3569  0562  00AA               	movwf	??_LCD_init+1
  3570  0563  30EB               	movlw	235
  3571  0564  00A9               	movwf	??_LCD_init
  3572  0565                     u2177:	
  3573  0565  0BA9               	decfsz	??_LCD_init,f
  3574  0566  2D65               	goto	u2177
  3575  0567  0BAA               	decfsz	??_LCD_init+1,f
  3576  0568  2D65               	goto	u2177
  3577  0569  0BAB               	decfsz	??_LCD_init+2,f
  3578  056A  2D65               	goto	u2177
  3579  056B  0000               	nop
  3580                           
  3581                           ;My_header.h: 343: LCD_Command(0x38);
  3582  056C  3038               	movlw	56
  3583  056D  3187  2728  3185   	fcall	_LCD_Command
  3584                           
  3585                           ;My_header.h: 344: LCD_Command(0x0C);
  3586  0570  300C               	movlw	12
  3587  0571  3187  2728  3185   	fcall	_LCD_Command
  3588                           
  3589                           ;My_header.h: 345: LCD_Command(0x06);
  3590  0574  3006               	movlw	6
  3591  0575  3187  2728  3185   	fcall	_LCD_Command
  3592                           
  3593                           ;My_header.h: 346: LCD_Clear();
  3594  0578  318F  27B0         	fcall	_LCD_Clear
  3595  057A  0008               	return
  3596  057B                     __end_of_LCD_init:	
  3597                           
  3598                           	psect	text19
  3599  0FB0                     __ptext19:	
  3600 ;; *************** function _LCD_Clear *****************
  3601 ;; Defined at:
  3602 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  3603 ;; Parameters:    Size  Location     Type
  3604 ;;		None
  3605 ;; Auto vars:     Size  Location     Type
  3606 ;;		None
  3607 ;; Return value:  Size  Location     Type
  3608 ;;		None               void
  3609 ;; Registers used:
  3610 ;;		wreg, status,2, status,0, pclath, cstack
  3611 ;; Tracked objects:
  3612 ;;		On entry : 0/0
  3613 ;;		On exit  : 0/0
  3614 ;;		Unchanged: 0/0
  3615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3616 ;;      Params:         0       0       0       0       0       0
  3617 ;;      Locals:         0       0       0       0       0       0
  3618 ;;      Temps:          0       2       0       0       0       0
  3619 ;;      Totals:         0       2       0       0       0       0
  3620 ;;Total ram usage:        2 bytes
  3621 ;; Hardware stack levels used:    1
  3622 ;; Hardware stack levels required when called:    6
  3623 ;; This function calls:
  3624 ;;		_LCD_Command
  3625 ;; This function is called by:
  3626 ;;		_LCD_init
  3627 ;;		_main
  3628 ;; This function uses a non-reentrant model
  3629 ;;
  3630                           
  3631                           
  3632                           ;psect for function _LCD_Clear
  3633  0FB0                     _LCD_Clear:	
  3634                           
  3635                           ;My_header.h: 278: LCD_Command(0x01);
  3636                           
  3637                           ;incstack = 0
  3638                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  3639  0FB0  3001               	movlw	1
  3640  0FB1  3187  2728  318F   	fcall	_LCD_Command
  3641                           
  3642                           ;My_header.h: 279: _delay((unsigned long)((1100)*(32000000/4000000.0)));
  3643  0FB4  300C               	movlw	12
  3644  0FB5  0020               	movlb	0	; select bank0
  3645  0FB6  00A8               	movwf	??_LCD_Clear+1
  3646  0FB7  306C               	movlw	108
  3647  0FB8  00A7               	movwf	??_LCD_Clear
  3648  0FB9                     u2187:	
  3649  0FB9  0BA7               	decfsz	??_LCD_Clear,f
  3650  0FBA  2FB9               	goto	u2187
  3651  0FBB  0BA8               	decfsz	??_LCD_Clear+1,f
  3652  0FBC  2FB9               	goto	u2187
  3653  0FBD  0000               	nop
  3654  0FBE  0008               	return
  3655  0FBF                     __end_of_LCD_Clear:	
  3656                           
  3657                           	psect	text20
  3658  0FEE                     __ptext20:	
  3659 ;; *************** function _LCD_SetCursor *****************
  3660 ;; Defined at:
  3661 ;;		line 282 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  3662 ;; Parameters:    Size  Location     Type
  3663 ;;  col             1    wreg     unsigned char 
  3664 ;;  row             1    7[BANK0 ] unsigned char 
  3665 ;; Auto vars:     Size  Location     Type
  3666 ;;  col             1   10[BANK0 ] unsigned char 
  3667 ;;  row_offsets     2    8[BANK0 ] unsigned char [2]
  3668 ;; Return value:  Size  Location     Type
  3669 ;;		None               void
  3670 ;; Registers used:
  3671 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3672 ;; Tracked objects:
  3673 ;;		On entry : 0/0
  3674 ;;		On exit  : 0/0
  3675 ;;		Unchanged: 0/0
  3676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3677 ;;      Params:         0       1       0       0       0       0
  3678 ;;      Locals:         0       3       0       0       0       0
  3679 ;;      Temps:          0       0       0       0       0       0
  3680 ;;      Totals:         0       4       0       0       0       0
  3681 ;;Total ram usage:        4 bytes
  3682 ;; Hardware stack levels used:    1
  3683 ;; Hardware stack levels required when called:    6
  3684 ;; This function calls:
  3685 ;;		_LCD_Command
  3686 ;; This function is called by:
  3687 ;;		_main
  3688 ;; This function uses a non-reentrant model
  3689 ;;
  3690                           
  3691                           
  3692                           ;psect for function _LCD_SetCursor
  3693  0FEE                     _LCD_SetCursor:	
  3694                           
  3695                           ;incstack = 0
  3696                           ; Regs used in _LCD_SetCursor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3697                           ;LCD_SetCursor@col stored from wreg
  3698  0FEE  0020               	movlb	0	; select bank0
  3699  0FEF  00AA               	movwf	LCD_SetCursor@col
  3700                           
  3701                           ;My_header.h: 283: uint8_t row_offsets[] = {0x00, 0x40};
  3702  0FF0  0868               	movf	LCD_SetCursor@F3069+1,w
  3703  0FF1  01A9               	clrf	LCD_SetCursor@row_offsets+1
  3704  0FF2  07A9               	addwf	LCD_SetCursor@row_offsets+1,f
  3705  0FF3  0867               	movf	LCD_SetCursor@F3069,w
  3706  0FF4  01A8               	clrf	LCD_SetCursor@row_offsets
  3707  0FF5  07A8               	addwf	LCD_SetCursor@row_offsets,f
  3708                           
  3709                           ;My_header.h: 285: LCD_Command(0x80 | (col + row_offsets[row]));
  3710  0FF6  0827               	movf	LCD_SetCursor@row,w
  3711  0FF7  3E28               	addlw	LCD_SetCursor@row_offsets& (0+255)
  3712  0FF8  0086               	movwf	6
  3713  0FF9  0187               	clrf	7
  3714  0FFA  0801               	movf	1,w
  3715  0FFB  072A               	addwf	LCD_SetCursor@col,w
  3716  0FFC  3880               	iorlw	128
  3717  0FFD  3187  2728         	fcall	_LCD_Command
  3718  0FFF  0008               	return
  3719  1000                     __end_of_LCD_SetCursor:	
  3720                           
  3721                           	psect	text21
  3722  0728                     __ptext21:	
  3723 ;; *************** function _LCD_Command *****************
  3724 ;; Defined at:
  3725 ;;		line 264 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  3726 ;; Parameters:    Size  Location     Type
  3727 ;;  c               1    wreg     unsigned char 
  3728 ;; Auto vars:     Size  Location     Type
  3729 ;;  c               1    5[BANK0 ] unsigned char 
  3730 ;;  ans             1    6[BANK0 ] unsigned char 
  3731 ;; Return value:  Size  Location     Type
  3732 ;;		None               void
  3733 ;; Registers used:
  3734 ;;		wreg, status,2, status,0, pclath, cstack
  3735 ;; Tracked objects:
  3736 ;;		On entry : 0/0
  3737 ;;		On exit  : 0/0
  3738 ;;		Unchanged: 0/0
  3739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3740 ;;      Params:         0       0       0       0       0       0
  3741 ;;      Locals:         0       2       0       0       0       0
  3742 ;;      Temps:          0       1       0       0       0       0
  3743 ;;      Totals:         0       3       0       0       0       0
  3744 ;;Total ram usage:        3 bytes
  3745 ;; Hardware stack levels used:    1
  3746 ;; Hardware stack levels required when called:    5
  3747 ;; This function calls:
  3748 ;;		_I2C_Send
  3749 ;;		_I2C_Start
  3750 ;;		_I2C_Stop
  3751 ;; This function is called by:
  3752 ;;		_LCD_Clear
  3753 ;;		_LCD_SetCursor
  3754 ;;		_LCD_init
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           
  3759                           ;psect for function _LCD_Command
  3760  0728                     _LCD_Command:	
  3761                           
  3762                           ;incstack = 0
  3763                           ; Regs used in _LCD_Command: [wreg+status,2+status,0+pclath+cstack]
  3764                           ;LCD_Command@c stored from wreg
  3765  0728  0020               	movlb	0	; select bank0
  3766  0729  00A5               	movwf	LCD_Command@c
  3767                           
  3768                           ;My_header.h: 265: uint8_t ans;
  3769                           ;My_header.h: 267: ans = I2C_Start(0x3E, 0);
  3770  072A  01A2               	clrf	I2C_Start@rw
  3771  072B  303E               	movlw	62
  3772  072C  3187  2781  3187   	fcall	_I2C_Start
  3773  072F  0020               	movlb	0	; select bank0
  3774  0730  00A4               	movwf	??_LCD_Command
  3775  0731  0824               	movf	??_LCD_Command,w
  3776  0732  00A6               	movwf	LCD_Command@ans
  3777                           
  3778                           ;My_header.h: 268: if (ans == 0) {
  3779  0733  08A6               	movf	LCD_Command@ans,f
  3780  0734  1D03               	skipz
  3781  0735  2F3F               	goto	l210
  3782                           
  3783                           ;My_header.h: 270: I2C_Send(0b10000000);
  3784  0736  3080               	movlw	128
  3785  0737  318F  27DD  3187   	fcall	_I2C_Send
  3786                           
  3787                           ;My_header.h: 271: I2C_Send(c);
  3788  073A  0020               	movlb	0	; select bank0
  3789  073B  0825               	movf	LCD_Command@c,w
  3790  073C  318F  27DD  3187   	fcall	_I2C_Send
  3791  073F                     l210:	
  3792                           
  3793                           ;My_header.h: 272: }
  3794                           ;My_header.h: 273: I2C_Stop();
  3795  073F  3187  27F8  3187   	fcall	_I2C_Stop
  3796                           
  3797                           ;My_header.h: 274: _delay((unsigned long)((26)*(32000000/4000000.0)));
  3798  0742  3045               	movlw	69
  3799  0743  0020               	movlb	0	; select bank0
  3800  0744  00A4               	movwf	??_LCD_Command
  3801  0745                     u2197:	
  3802  0745  0BA4               	decfsz	??_LCD_Command,f
  3803  0746  2F45               	goto	u2197
  3804  0747  0008               	return
  3805  0748                     __end_of_LCD_Command:	
  3806                           
  3807                           	psect	text22
  3808  05B2                     __ptext22:	
  3809 ;; *************** function _LCD_Puts *****************
  3810 ;; Defined at:
  3811 ;;		line 301 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  3812 ;; Parameters:    Size  Location     Type
  3813 ;;  s               2    4[BANK0 ] PTR const unsigned char 
  3814 ;;		 -> main@tmbuf(50), STR_1(7), 
  3815 ;; Auto vars:     Size  Location     Type
  3816 ;;  ans             2    8[BANK0 ] int 
  3817 ;; Return value:  Size  Location     Type
  3818 ;;		None               void
  3819 ;; Registers used:
  3820 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3821 ;; Tracked objects:
  3822 ;;		On entry : 0/0
  3823 ;;		On exit  : 0/0
  3824 ;;		Unchanged: 0/0
  3825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3826 ;;      Params:         0       2       0       0       0       0
  3827 ;;      Locals:         0       2       0       0       0       0
  3828 ;;      Temps:          0       2       0       0       0       0
  3829 ;;      Totals:         0       6       0       0       0       0
  3830 ;;Total ram usage:        6 bytes
  3831 ;; Hardware stack levels used:    1
  3832 ;; Hardware stack levels required when called:    5
  3833 ;; This function calls:
  3834 ;;		_I2C_Send
  3835 ;;		_I2C_Start
  3836 ;;		_I2C_Stop
  3837 ;; This function is called by:
  3838 ;;		_main
  3839 ;; This function uses a non-reentrant model
  3840 ;;
  3841                           
  3842                           
  3843                           ;psect for function _LCD_Puts
  3844  05B2                     _LCD_Puts:	
  3845                           
  3846                           ;My_header.h: 302: int ans;
  3847                           ;My_header.h: 304: ans = I2C_Start(0x3E, 0);
  3848                           
  3849                           ;incstack = 0
  3850                           ; Regs used in _LCD_Puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3851  05B2  0020               	movlb	0	; select bank0
  3852  05B3  01A2               	clrf	I2C_Start@rw
  3853  05B4  303E               	movlw	62
  3854  05B5  3187  2781  3185   	fcall	_I2C_Start
  3855  05B8  0020               	movlb	0	; select bank0
  3856  05B9  00A6               	movwf	??_LCD_Puts
  3857  05BA  01A7               	clrf	??_LCD_Puts+1
  3858  05BB  0826               	movf	??_LCD_Puts,w
  3859  05BC  00A8               	movwf	LCD_Puts@ans
  3860  05BD  0827               	movf	??_LCD_Puts+1,w
  3861  05BE  00A9               	movwf	LCD_Puts@ans+1
  3862                           
  3863                           ;My_header.h: 305: if (ans == 0) {
  3864  05BF  0829               	movf	LCD_Puts@ans+1,w
  3865  05C0  0428               	iorwf	LCD_Puts@ans,w
  3866  05C1  1D03               	skipz
  3867  05C2  2DE3               	goto	l1853
  3868                           
  3869                           ;My_header.h: 306: I2C_Send(0b01000000);
  3870  05C3  3040               	movlw	64
  3871  05C4  318F  27DD  3185   	fcall	_I2C_Send
  3872  05C7                     l1851:	
  3873                           ;My_header.h: 307: while (*s) {
  3874                           
  3875  05C7  0020               	movlb	0	; select bank0
  3876  05C8  0824               	movf	LCD_Puts@s,w
  3877  05C9  0084               	movwf	4
  3878  05CA  0825               	movf	LCD_Puts@s+1,w
  3879  05CB  0085               	movwf	5
  3880  05CC  0800               	movf	0,w	;code access
  3881  05CD  3800               	iorlw	0
  3882  05CE  1903               	btfsc	3,2
  3883  05CF  2DE3               	goto	l1853
  3884                           
  3885                           ;My_header.h: 308: I2C_Send(*s++);
  3886  05D0  0020               	movlb	0	; select bank0
  3887  05D1  0824               	movf	LCD_Puts@s,w
  3888  05D2  0084               	movwf	4
  3889  05D3  0825               	movf	LCD_Puts@s+1,w
  3890  05D4  0085               	movwf	5
  3891  05D5  0800               	movf	0,w	;code access
  3892  05D6  318F  27DD  3185   	fcall	_I2C_Send
  3893  05D9  3001               	movlw	1
  3894  05DA  0020               	movlb	0	; select bank0
  3895  05DB  07A4               	addwf	LCD_Puts@s,f
  3896  05DC  3000               	movlw	0
  3897  05DD  3DA5               	addwfc	LCD_Puts@s+1,f
  3898                           
  3899                           ;My_header.h: 309: _delay((unsigned long)((26)*(32000000/4000000.0)));
  3900  05DE  3045               	movlw	69
  3901  05DF  00A6               	movwf	??_LCD_Puts
  3902  05E0                     u2207:	
  3903  05E0  0BA6               	decfsz	??_LCD_Puts,f
  3904  05E1  2DE0               	goto	u2207
  3905  05E2  2DC7               	goto	l1851
  3906  05E3                     l1853:	
  3907                           
  3908                           ;My_header.h: 310: }
  3909                           ;My_header.h: 311: }
  3910                           ;My_header.h: 312: I2C_Stop();
  3911  05E3  3187  27F8         	fcall	_I2C_Stop
  3912  05E5  0008               	return
  3913  05E6                     __end_of_LCD_Puts:	
  3914                           
  3915                           	psect	text23
  3916  07F8                     __ptext23:	
  3917 ;; *************** function _I2C_Stop *****************
  3918 ;; Defined at:
  3919 ;;		line 234 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  3920 ;; Parameters:    Size  Location     Type
  3921 ;;		None
  3922 ;; Auto vars:     Size  Location     Type
  3923 ;;		None
  3924 ;; Return value:  Size  Location     Type
  3925 ;;		None               void
  3926 ;; Registers used:
  3927 ;;		wreg, status,2, status,0, pclath, cstack
  3928 ;; Tracked objects:
  3929 ;;		On entry : 0/0
  3930 ;;		On exit  : 0/0
  3931 ;;		Unchanged: 0/0
  3932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3933 ;;      Params:         0       0       0       0       0       0
  3934 ;;      Locals:         0       0       0       0       0       0
  3935 ;;      Temps:          0       0       0       0       0       0
  3936 ;;      Totals:         0       0       0       0       0       0
  3937 ;;Total ram usage:        0 bytes
  3938 ;; Hardware stack levels used:    1
  3939 ;; Hardware stack levels required when called:    4
  3940 ;; This function calls:
  3941 ;;		_I2C_IdleCheck
  3942 ;; This function is called by:
  3943 ;;		_LCD_Command
  3944 ;;		_LCD_Puts
  3945 ;;		_TM_init
  3946 ;;		_TM_Read
  3947 ;;		_LCD_Putc
  3948 ;;		_LCD_CreateChar
  3949 ;;		_RTC_Write
  3950 ;;		_RTC_Read
  3951 ;; This function uses a non-reentrant model
  3952 ;;
  3953                           
  3954                           
  3955                           ;psect for function _I2C_Stop
  3956  07F8                     _I2C_Stop:	
  3957                           
  3958                           ;My_header.h: 236: I2C_IdleCheck(0x5);
  3959                           
  3960                           ;incstack = 0
  3961                           ; Regs used in _I2C_Stop: [wreg+status,2+status,0+pclath+cstack]
  3962  07F8  3005               	movlw	5
  3963  07F9  318F  27A1         	fcall	_I2C_IdleCheck
  3964                           
  3965                           ;My_header.h: 237: SSP1CON2bits.PEN = 1;
  3966  07FB  0024               	movlb	4	; select bank4
  3967  07FC  1516               	bsf	22,2	;volatile
  3968  07FD  0008               	return
  3969  07FE                     __end_of_I2C_Stop:	
  3970                           
  3971                           	psect	text24
  3972  0781                     __ptext24:	
  3973 ;; *************** function _I2C_Start *****************
  3974 ;; Defined at:
  3975 ;;		line 210 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;  adrs            1    wreg     unsigned char 
  3978 ;;  rw              1    2[BANK0 ] unsigned char 
  3979 ;; Auto vars:     Size  Location     Type
  3980 ;;  adrs            1    3[BANK0 ] unsigned char 
  3981 ;; Return value:  Size  Location     Type
  3982 ;;                  1    wreg      unsigned char 
  3983 ;; Registers used:
  3984 ;;		wreg, status,2, status,0, pclath, cstack
  3985 ;; Tracked objects:
  3986 ;;		On entry : 0/0
  3987 ;;		On exit  : 0/0
  3988 ;;		Unchanged: 0/0
  3989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3990 ;;      Params:         0       1       0       0       0       0
  3991 ;;      Locals:         0       1       0       0       0       0
  3992 ;;      Temps:          0       0       0       0       0       0
  3993 ;;      Totals:         0       2       0       0       0       0
  3994 ;;Total ram usage:        2 bytes
  3995 ;; Hardware stack levels used:    1
  3996 ;; Hardware stack levels required when called:    4
  3997 ;; This function calls:
  3998 ;;		_I2C_IdleCheck
  3999 ;; This function is called by:
  4000 ;;		_LCD_Command
  4001 ;;		_LCD_Puts
  4002 ;;		_TM_init
  4003 ;;		_TM_Read
  4004 ;;		_LCD_Putc
  4005 ;;		_LCD_CreateChar
  4006 ;;		_RTC_Write
  4007 ;;		_RTC_Read
  4008 ;; This function uses a non-reentrant model
  4009 ;;
  4010                           
  4011                           
  4012                           ;psect for function _I2C_Start
  4013  0781                     _I2C_Start:	
  4014                           
  4015                           ;incstack = 0
  4016                           ; Regs used in _I2C_Start: [wreg+status,2+status,0+pclath+cstack]
  4017                           ;I2C_Start@adrs stored from wreg
  4018  0781  0020               	movlb	0	; select bank0
  4019  0782  00A3               	movwf	I2C_Start@adrs
  4020                           
  4021                           ;My_header.h: 212: I2C_IdleCheck(0x5);
  4022  0783  3005               	movlw	5
  4023  0784  318F  27A1  3187   	fcall	_I2C_IdleCheck
  4024                           
  4025                           ;My_header.h: 213: SSP1CON2bits.SEN = 1;
  4026  0787  0024               	movlb	4	; select bank4
  4027  0788  1416               	bsf	22,0	;volatile
  4028                           
  4029                           ;My_header.h: 215: I2C_IdleCheck(0x5);
  4030  0789  3005               	movlw	5
  4031  078A  318F  27A1  3187   	fcall	_I2C_IdleCheck
  4032                           
  4033                           ;My_header.h: 216: SSP1IF = 0;
  4034  078D  0020               	movlb	0	; select bank0
  4035  078E  1191               	bcf	17,3	;volatile
  4036                           
  4037                           ;My_header.h: 217: SSP1BUF = (uint8_t) ((adrs << 1) + rw);
  4038  078F  3523               	lslf	I2C_Start@adrs,w
  4039  0790  0722               	addwf	I2C_Start@rw,w
  4040  0791  0024               	movlb	4	; select bank4
  4041  0792  0091               	movwf	17	;volatile
  4042  0793                     l186:	
  4043                           ;My_header.h: 218: while (!SSP1IF);
  4044                           
  4045  0793  0020               	movlb	0	; select bank0
  4046  0794  1D91               	btfss	17,3	;volatile
  4047  0795  2F93               	goto	l186
  4048                           
  4049                           ;My_header.h: 219: return SSP1CON2bits.ACKSTAT;
  4050  0796  0024               	movlb	4	; select bank4
  4051  0797  0E16               	swapf	22,w	;volatile
  4052  0798  0C89               	rrf	9,f
  4053  0799  0C89               	rrf	9,f
  4054  079A  3901               	andlw	1
  4055  079B  0008               	return
  4056  079C                     __end_of_I2C_Start:	
  4057                           
  4058                           	psect	text25
  4059  0FDD                     __ptext25:	
  4060 ;; *************** function _I2C_Send *****************
  4061 ;; Defined at:
  4062 ;;		line 240 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  4063 ;; Parameters:    Size  Location     Type
  4064 ;;  data            1    wreg     unsigned char 
  4065 ;; Auto vars:     Size  Location     Type
  4066 ;;  data            1    2[BANK0 ] unsigned char 
  4067 ;; Return value:  Size  Location     Type
  4068 ;;                  1    wreg      unsigned char 
  4069 ;; Registers used:
  4070 ;;		wreg, status,2, status,0, pclath, cstack
  4071 ;; Tracked objects:
  4072 ;;		On entry : 0/0
  4073 ;;		On exit  : 0/0
  4074 ;;		Unchanged: 0/0
  4075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4076 ;;      Params:         0       0       0       0       0       0
  4077 ;;      Locals:         0       1       0       0       0       0
  4078 ;;      Temps:          0       0       0       0       0       0
  4079 ;;      Totals:         0       1       0       0       0       0
  4080 ;;Total ram usage:        1 bytes
  4081 ;; Hardware stack levels used:    1
  4082 ;; Hardware stack levels required when called:    4
  4083 ;; This function calls:
  4084 ;;		_I2C_IdleCheck
  4085 ;; This function is called by:
  4086 ;;		_LCD_Command
  4087 ;;		_LCD_Puts
  4088 ;;		_TM_init
  4089 ;;		_TM_Read
  4090 ;;		_LCD_Putc
  4091 ;;		_LCD_CreateChar
  4092 ;;		_RTC_Write
  4093 ;;		_RTC_Read
  4094 ;; This function uses a non-reentrant model
  4095 ;;
  4096                           
  4097                           
  4098                           ;psect for function _I2C_Send
  4099  0FDD                     _I2C_Send:	
  4100                           
  4101                           ;incstack = 0
  4102                           ; Regs used in _I2C_Send: [wreg+status,2+status,0+pclath+cstack]
  4103                           ;I2C_Send@data stored from wreg
  4104  0FDD  0020               	movlb	0	; select bank0
  4105  0FDE  00A2               	movwf	I2C_Send@data
  4106                           
  4107                           ;My_header.h: 241: I2C_IdleCheck(0x5);
  4108  0FDF  3005               	movlw	5
  4109  0FE0  318F  27A1  318F   	fcall	_I2C_IdleCheck
  4110                           
  4111                           ;My_header.h: 242: SSP1IF = 0;
  4112  0FE3  0020               	movlb	0	; select bank0
  4113  0FE4  1191               	bcf	17,3	;volatile
  4114                           
  4115                           ;My_header.h: 243: SSP1BUF = data;
  4116  0FE5  0822               	movf	I2C_Send@data,w
  4117  0FE6  0024               	movlb	4	; select bank4
  4118  0FE7  0091               	movwf	17	;volatile
  4119  0FE8                     l201:	
  4120                           ;My_header.h: 244: while (!SSP1IF);
  4121                           
  4122  0FE8  0020               	movlb	0	; select bank0
  4123  0FE9  1D91               	btfss	17,3	;volatile
  4124  0FEA  2FE8               	goto	l201
  4125                           
  4126                           ;My_header.h: 245: return SSP1CON2bits.ACKSTAT;
  4127                           ;	Return value of _I2C_Send is never used
  4128  0FEB  0024               	movlb	4	; select bank4
  4129  0FEC  0816               	movf	22,w	;volatile
  4130  0FED  0008               	return
  4131  0FEE                     __end_of_I2C_Send:	
  4132                           
  4133                           	psect	text26
  4134  0FA1                     __ptext26:	
  4135 ;; *************** function _I2C_IdleCheck *****************
  4136 ;; Defined at:
  4137 ;;		line 196 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;  mask            1    wreg     unsigned char 
  4140 ;; Auto vars:     Size  Location     Type
  4141 ;;  mask            1    1[BANK0 ] unsigned char 
  4142 ;; Return value:  Size  Location     Type
  4143 ;;		None               void
  4144 ;; Registers used:
  4145 ;;		wreg, status,2, status,0
  4146 ;; Tracked objects:
  4147 ;;		On entry : 0/0
  4148 ;;		On exit  : 0/0
  4149 ;;		Unchanged: 0/0
  4150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4151 ;;      Params:         0       0       0       0       0       0
  4152 ;;      Locals:         0       1       0       0       0       0
  4153 ;;      Temps:          0       1       0       0       0       0
  4154 ;;      Totals:         0       2       0       0       0       0
  4155 ;;Total ram usage:        2 bytes
  4156 ;; Hardware stack levels used:    1
  4157 ;; Hardware stack levels required when called:    3
  4158 ;; This function calls:
  4159 ;;		Nothing
  4160 ;; This function is called by:
  4161 ;;		_I2C_Start
  4162 ;;		_I2C_rStart
  4163 ;;		_I2C_Stop
  4164 ;;		_I2C_Send
  4165 ;;		_I2C_Receive
  4166 ;; This function uses a non-reentrant model
  4167 ;;
  4168                           
  4169                           
  4170                           ;psect for function _I2C_IdleCheck
  4171  0FA1                     _I2C_IdleCheck:	
  4172                           
  4173                           ;incstack = 0
  4174                           ; Regs used in _I2C_IdleCheck: [wreg+status,2+status,0]
  4175                           ;I2C_IdleCheck@mask stored from wreg
  4176  0FA1  0020               	movlb	0	; select bank0
  4177  0FA2  00A1               	movwf	I2C_IdleCheck@mask
  4178  0FA3                     l1571:	
  4179                           ;My_header.h: 197: while ((SSP1CON2 & 0x1F) | (SSP1STAT & mask));
  4180                           
  4181  0FA3  0821               	movf	I2C_IdleCheck@mask,w
  4182  0FA4  0024               	movlb	4	; select bank4
  4183  0FA5  0514               	andwf	20,w	;volatile
  4184  0FA6  0020               	movlb	0	; select bank0
  4185  0FA7  00A0               	movwf	??_I2C_IdleCheck
  4186  0FA8  0024               	movlb	4	; select bank4
  4187  0FA9  0816               	movf	22,w	;volatile
  4188  0FAA  391F               	andlw	31
  4189  0FAB  0020               	movlb	0	; select bank0
  4190  0FAC  0420               	iorwf	??_I2C_IdleCheck,w
  4191  0FAD  1903               	btfsc	3,2
  4192  0FAE  0008               	return
  4193  0FAF  2FA3               	goto	l1571
  4194  0FB0                     __end_of_I2C_IdleCheck:	
  4195                           
  4196                           	psect	text27
  4197  0F8A                     __ptext27:	
  4198 ;; *************** function _I2C_init *****************
  4199 ;; Defined at:
  4200 ;;		line 200 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  4201 ;; Parameters:    Size  Location     Type
  4202 ;;		None
  4203 ;; Auto vars:     Size  Location     Type
  4204 ;;		None
  4205 ;; Return value:  Size  Location     Type
  4206 ;;		None               void
  4207 ;; Registers used:
  4208 ;;		wreg
  4209 ;; Tracked objects:
  4210 ;;		On entry : 0/0
  4211 ;;		On exit  : 0/0
  4212 ;;		Unchanged: 0/0
  4213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4214 ;;      Params:         0       0       0       0       0       0
  4215 ;;      Locals:         0       0       0       0       0       0
  4216 ;;      Temps:          0       0       0       0       0       0
  4217 ;;      Totals:         0       0       0       0       0       0
  4218 ;;Total ram usage:        0 bytes
  4219 ;; Hardware stack levels used:    1
  4220 ;; Hardware stack levels required when called:    3
  4221 ;; This function calls:
  4222 ;;		Nothing
  4223 ;; This function is called by:
  4224 ;;		_main
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           
  4229                           ;psect for function _I2C_init
  4230  0F8A                     _I2C_init:	
  4231                           
  4232                           ;My_header.h: 201: SSP1STAT = 0b10000000;
  4233                           
  4234                           ;incstack = 0
  4235                           ; Regs used in _I2C_init: [wreg]
  4236  0F8A  3080               	movlw	128
  4237  0F8B  0024               	movlb	4	; select bank4
  4238  0F8C  0094               	movwf	20	;volatile
  4239                           
  4240                           ;My_header.h: 202: SSP1CON1 = 0b00101000;
  4241  0F8D  3028               	movlw	40
  4242  0F8E  0095               	movwf	21	;volatile
  4243                           
  4244                           ;My_header.h: 203: SSP1ADD = 0x13;
  4245  0F8F  3013               	movlw	19
  4246  0F90  0092               	movwf	18	;volatile
  4247                           
  4248                           ;My_header.h: 206: SSP1IF = 0;
  4249  0F91  0020               	movlb	0	; select bank0
  4250  0F92  1191               	bcf	17,3	;volatile
  4251                           
  4252                           ;My_header.h: 207: BCL1IF = 0;
  4253  0F93  1192               	bcf	18,3	;volatile
  4254  0F94  0008               	return
  4255  0F95                     __end_of_I2C_init:	
  4256                           
  4257                           	psect	text28
  4258  079C                     __ptext28:	
  4259 ;; *************** function _Delay_ms *****************
  4260 ;; Defined at:
  4261 ;;		line 184 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  4262 ;; Parameters:    Size  Location     Type
  4263 ;;  ms              2    0[BANK0 ] unsigned int 
  4264 ;; Auto vars:     Size  Location     Type
  4265 ;;  i               2    4[BANK0 ] unsigned int 
  4266 ;; Return value:  Size  Location     Type
  4267 ;;		None               void
  4268 ;; Registers used:
  4269 ;;		wreg, status,2
  4270 ;; Tracked objects:
  4271 ;;		On entry : 0/0
  4272 ;;		On exit  : 0/0
  4273 ;;		Unchanged: 0/0
  4274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4275 ;;      Params:         0       2       0       0       0       0
  4276 ;;      Locals:         0       2       0       0       0       0
  4277 ;;      Temps:          0       2       0       0       0       0
  4278 ;;      Totals:         0       6       0       0       0       0
  4279 ;;Total ram usage:        6 bytes
  4280 ;; Hardware stack levels used:    1
  4281 ;; Hardware stack levels required when called:    3
  4282 ;; This function calls:
  4283 ;;		Nothing
  4284 ;; This function is called by:
  4285 ;;		_main
  4286 ;; This function uses a non-reentrant model
  4287 ;;
  4288                           
  4289                           
  4290                           ;psect for function _Delay_ms
  4291  079C                     _Delay_ms:	
  4292                           
  4293                           ;My_header.h: 185: uint16_t i;
  4294                           ;My_header.h: 186: for (i = 0; i < ms; i++) {
  4295                           
  4296                           ;incstack = 0
  4297                           ; Regs used in _Delay_ms: [wreg+status,2]
  4298  079C  0020               	movlb	0	; select bank0
  4299  079D  01A4               	clrf	Delay_ms@i
  4300  079E  01A5               	clrf	Delay_ms@i+1
  4301  079F                     l171:	
  4302  079F  0821               	movf	Delay_ms@ms+1,w
  4303  07A0  0225               	subwf	Delay_ms@i+1,w
  4304  07A1  1D03               	skipz
  4305  07A2  2FA5               	goto	u1525
  4306  07A3  0820               	movf	Delay_ms@ms,w
  4307  07A4  0224               	subwf	Delay_ms@i,w
  4308  07A5                     u1525:	
  4309  07A5  1803               	btfsc	3,0
  4310  07A6  0008               	return
  4311                           
  4312                           ;My_header.h: 187: _delay((unsigned long)((1)*(32000000/4000.0)));
  4313  07A7  300B               	movlw	11
  4314  07A8  00A3               	movwf	??_Delay_ms+1
  4315  07A9  3062               	movlw	98
  4316  07AA  00A2               	movwf	??_Delay_ms
  4317  07AB                     u2217:	
  4318  07AB  0BA2               	decfsz	??_Delay_ms,f
  4319  07AC  2FAB               	goto	u2217
  4320  07AD  0BA3               	decfsz	??_Delay_ms+1,f
  4321  07AE  2FAB               	goto	u2217
  4322  07AF  0000               	nop
  4323  07B0  3001               	movlw	1
  4324  07B1  0020               	movlb	0	; select bank0
  4325  07B2  07A4               	addwf	Delay_ms@i,f
  4326  07B3  3000               	movlw	0
  4327  07B4  3DA5               	addwfc	Delay_ms@i+1,f
  4328  07B5  2F9F               	goto	l171
  4329  07B6                     __end_of_Delay_ms:	
  4330                           
  4331                           	psect	intentry
  4332  0004                     __pintentry:	
  4333 ;; *************** function _isr *****************
  4334 ;; Defined at:
  4335 ;;		line 32 in file "PIC16F1827-I2Ctemperature01.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;		None
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;		None
  4340 ;; Return value:  Size  Location     Type
  4341 ;;		None               void
  4342 ;; Registers used:
  4343 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4349 ;;      Params:         0       0       0       0       0       0
  4350 ;;      Locals:         0       0       0       0       0       0
  4351 ;;      Temps:          2       0       0       0       0       0
  4352 ;;      Totals:         2       0       0       0       0       0
  4353 ;;Total ram usage:        2 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    2
  4356 ;; This function calls:
  4357 ;;		_button_timer_interrupt
  4358 ;;		_interrupt_TXIF
  4359 ;;		i1_tx_send
  4360 ;; This function is called by:
  4361 ;;		Interrupt level 1
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365  0004                     _isr:	
  4366                           
  4367                           ;incstack = 0
  4368                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4369  0004  147E               	bsf	126,0	;set compiler interrupt flag
  4370  0005  3180               	pagesel	$
  4371  0006  0020               	movlb	0	; select bank0
  4372  0007  087F               	movf	127,w
  4373  0008  00F7               	movwf	??_isr+1
  4374                           
  4375                           ;PIC16F1827-I2Ctemperature01.c: 33: interrupt_TXIF();
  4376  0009  3187  27CF  3180   	fcall	_interrupt_TXIF
  4377                           
  4378                           ;PIC16F1827-I2Ctemperature01.c: 34: if (RCIF) {
  4379  000C  0020               	movlb	0	; select bank0
  4380  000D  1E91               	btfss	17,5	;volatile
  4381  000E  2815               	goto	i1l2197
  4382                           
  4383                           ;PIC16F1827-I2Ctemperature01.c: 35: RCIF = 0;
  4384  000F  1291               	bcf	17,5	;volatile
  4385                           
  4386                           ;PIC16F1827-I2Ctemperature01.c: 36: tx_send(RCREG);
  4387  0010  0023               	movlb	3	; select bank3
  4388  0011  0819               	movf	25,w	;volatile
  4389  0012  318F  277F  3180   	fcall	i1_tx_send
  4390  0015                     i1l2197:	
  4391                           
  4392                           ;PIC16F1827-I2Ctemperature01.c: 37: }
  4393                           ;PIC16F1827-I2Ctemperature01.c: 38: if (TMR1IF == 1) {
  4394  0015  0020               	movlb	0	; select bank0
  4395  0016  1C11               	btfss	17,0	;volatile
  4396  0017  283B               	goto	i1l269
  4397                           
  4398                           ;PIC16F1827-I2Ctemperature01.c: 39: TMR1IF = 0;
  4399  0018  1011               	bcf	17,0	;volatile
  4400                           
  4401                           ;PIC16F1827-I2Ctemperature01.c: 40: cnt_t1++;
  4402  0019  3001               	movlw	1
  4403  001A  00F6               	movwf	??_isr
  4404  001B  0876               	movf	??_isr,w
  4405  001C  07F8               	addwf	_cnt_t1,f
  4406                           
  4407                           ;PIC16F1827-I2Ctemperature01.c: 41: if (cnt_t1 % 16 == 0)LATB0 = ~LATB0;
  4408  001D  0878               	movf	_cnt_t1,w
  4409  001E  390F               	andlw	15
  4410  001F  1D03               	btfss	3,2
  4411  0020  2824               	goto	i1l2207
  4412  0021  3001               	movlw	1
  4413  0022  0022               	movlb	2	; select bank2
  4414  0023  068D               	xorwf	13,f
  4415  0024                     i1l2207:	
  4416                           
  4417                           ;PIC16F1827-I2Ctemperature01.c: 42: button_timer_interrupt(&sw_RA0, !RA0);
  4418  0024  1003               	clrc
  4419  0025  0020               	movlb	0	; select bank0
  4420  0026  1C0C               	btfss	12,0	;volatile
  4421  0027  1403               	setc
  4422  0028  3000               	movlw	0
  4423  0029  1803               	btfsc	3,0
  4424  002A  3001               	movlw	1
  4425  002B  00F0               	movwf	button_timer_interrupt@sw_value
  4426  002C  3079               	movlw	_sw_RA0& (0+255)
  4427  002D  3183  2396  3180   	fcall	_button_timer_interrupt
  4428                           
  4429                           ;PIC16F1827-I2Ctemperature01.c: 43: button_timer_interrupt(&sw_RA1, !RA1);
  4430  0030  1003               	clrc
  4431  0031  0020               	movlb	0	; select bank0
  4432  0032  1C8C               	btfss	12,1	;volatile
  4433  0033  1403               	setc
  4434  0034  3000               	movlw	0
  4435  0035  1803               	btfsc	3,0
  4436  0036  3001               	movlw	1
  4437  0037  00F0               	movwf	button_timer_interrupt@sw_value
  4438  0038  3064               	movlw	_sw_RA1& (0+255)
  4439  0039  3183  2396         	fcall	_button_timer_interrupt
  4440  003B                     i1l269:	
  4441  003B  0877               	movf	??_isr+1,w
  4442  003C  0020               	movlb	0	; select bank0
  4443  003D  00FF               	movwf	127
  4444  003E  107E               	bcf	126,0	;clear compiler interrupt flag
  4445  003F  0009               	retfie
  4446  0040                     __end_of_isr:	
  4447                           
  4448                           	psect	text30
  4449  0F7F                     __ptext30:	
  4450 ;; *************** function i1_tx_send *****************
  4451 ;; Defined at:
  4452 ;;		line 158 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  4453 ;; Parameters:    Size  Location     Type
  4454 ;;  asciicode       1    wreg     unsigned char 
  4455 ;; Auto vars:     Size  Location     Type
  4456 ;;  asciicode       1    5[COMMON] unsigned char 
  4457 ;; Return value:  Size  Location     Type
  4458 ;;		None               void
  4459 ;; Registers used:
  4460 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4461 ;; Tracked objects:
  4462 ;;		On entry : 0/0
  4463 ;;		On exit  : 0/0
  4464 ;;		Unchanged: 0/0
  4465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4466 ;;      Params:         0       0       0       0       0       0
  4467 ;;      Locals:         1       0       0       0       0       0
  4468 ;;      Temps:          1       0       0       0       0       0
  4469 ;;      Totals:         2       0       0       0       0       0
  4470 ;;Total ram usage:        2 bytes
  4471 ;; Hardware stack levels used:    1
  4472 ;; Hardware stack levels required when called:    1
  4473 ;; This function calls:
  4474 ;;		i1_ringbuf_push
  4475 ;; This function is called by:
  4476 ;;		_isr
  4477 ;; This function uses a non-reentrant model
  4478 ;;
  4479                           
  4480                           
  4481                           ;psect for function i1_tx_send
  4482  0F7F                     i1_tx_send:	
  4483                           
  4484                           ;incstack = 0
  4485                           ; Regs used in i1_tx_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4486                           ;i1tx_send@asciicode stored from wreg
  4487  0F7F  00F5               	movwf	i1tx_send@asciicode
  4488                           
  4489                           ;My_header.h: 159: ringbuf_push(&tx_buf, asciicode);
  4490  0F80  0875               	movf	i1tx_send@asciicode,w
  4491  0F81  00F4               	movwf	??i1_tx_send
  4492  0F82  0874               	movf	??i1_tx_send,w
  4493  0F83  00F0               	movwf	i1ringbuf_push@asciicode
  4494  0F84  3060               	movlw	_tx_buf& (0+255)
  4495  0F85  3186  266D         	fcall	i1_ringbuf_push
  4496                           
  4497                           ;My_header.h: 160: PIE1bits.TXIE = 1;
  4498  0F87  0021               	movlb	1	; select bank1
  4499  0F88  1611               	bsf	17,4	;volatile
  4500  0F89  0008               	return
  4501  0F8A                     __end_ofi1_tx_send:	
  4502                           
  4503                           	psect	text31
  4504  066D                     __ptext31:	
  4505 ;; *************** function i1_ringbuf_push *****************
  4506 ;; Defined at:
  4507 ;;		line 118 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;  rb              1    wreg     PTR struct ringbuf
  4510 ;;		 -> tx_buf(4), 
  4511 ;;  asciicode       1    0[COMMON] unsigned char 
  4512 ;; Auto vars:     Size  Location     Type
  4513 ;;  rb              1    3[COMMON] PTR struct ringbuf
  4514 ;;		 -> tx_buf(4), 
  4515 ;; Return value:  Size  Location     Type
  4516 ;;		None               void
  4517 ;; Registers used:
  4518 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  4519 ;; Tracked objects:
  4520 ;;		On entry : 0/0
  4521 ;;		On exit  : 0/0
  4522 ;;		Unchanged: 0/0
  4523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4524 ;;      Params:         1       0       0       0       0       0
  4525 ;;      Locals:         1       0       0       0       0       0
  4526 ;;      Temps:          2       0       0       0       0       0
  4527 ;;      Totals:         4       0       0       0       0       0
  4528 ;;Total ram usage:        4 bytes
  4529 ;; Hardware stack levels used:    1
  4530 ;; This function calls:
  4531 ;;		Nothing
  4532 ;; This function is called by:
  4533 ;;		i1_tx_send
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           
  4538                           ;psect for function i1_ringbuf_push
  4539  066D                     i1_ringbuf_push:	
  4540                           
  4541                           ;incstack = 0
  4542                           ; Regs used in i1_ringbuf_push: [wreg-fsr1h+status,2+status,0]
  4543                           ;i1ringbuf_push@rb stored from wreg
  4544  066D  00F3               	movwf	i1ringbuf_push@rb
  4545                           
  4546                           ;My_header.h: 119: rb->buf[rb->head] = asciicode;
  4547  066E  0870               	movf	i1ringbuf_push@asciicode,w
  4548  066F  00F1               	movwf	??i1_ringbuf_push
  4549  0670  0873               	movf	i1ringbuf_push@rb,w
  4550  0671  0086               	movwf	6
  4551  0672  0187               	clrf	7
  4552  0673  0873               	movf	i1ringbuf_push@rb,w
  4553  0674  3E02               	addlw	2
  4554  0675  0084               	movwf	4
  4555  0676  0185               	clrf	5
  4556  0677  0800               	movf	0,w
  4557  0678  0701               	addwf	1,w
  4558  0679  00F2               	movwf	??i1_ringbuf_push+1
  4559  067A  0872               	movf	??i1_ringbuf_push+1,w
  4560  067B  0086               	movwf	6
  4561  067C  0187               	clrf	7
  4562  067D  0871               	movf	??i1_ringbuf_push,w
  4563  067E  0081               	movwf	1
  4564                           
  4565                           ;My_header.h: 120: rb->head++;
  4566  067F  3001               	movlw	1
  4567  0680  00F1               	movwf	??i1_ringbuf_push
  4568  0681  0873               	movf	i1ringbuf_push@rb,w
  4569  0682  3E02               	addlw	2
  4570  0683  0086               	movwf	6
  4571  0684  0187               	clrf	7
  4572  0685  0871               	movf	??i1_ringbuf_push,w
  4573  0686  0781               	addwf	1,f
  4574                           
  4575                           ;My_header.h: 121: if (rb->head >= rb->size) {
  4576  0687  0873               	movf	i1ringbuf_push@rb,w
  4577  0688  3E02               	addlw	2
  4578  0689  0086               	movwf	6
  4579  068A  0187               	clrf	7
  4580  068B  0A73               	incf	i1ringbuf_push@rb,w
  4581  068C  0084               	movwf	4
  4582  068D  0185               	clrf	5
  4583  068E  0800               	movf	0,w
  4584  068F  0201               	subwf	1,w
  4585  0690  1C03               	skipc
  4586  0691  0008               	return
  4587                           
  4588                           ;My_header.h: 122: rb->head = 0;
  4589  0692  0873               	movf	i1ringbuf_push@rb,w
  4590  0693  3E02               	addlw	2
  4591  0694  0086               	movwf	6
  4592  0695  0187               	clrf	7
  4593  0696  0181               	clrf	1
  4594  0697  0008               	return
  4595  0698                     __end_ofi1_ringbuf_push:	
  4596                           
  4597                           	psect	text32
  4598  07CF                     __ptext32:	
  4599 ;; *************** function _interrupt_TXIF *****************
  4600 ;; Defined at:
  4601 ;;		line 171 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  4602 ;; Parameters:    Size  Location     Type
  4603 ;;		None
  4604 ;; Auto vars:     Size  Location     Type
  4605 ;;		None
  4606 ;; Return value:  Size  Location     Type
  4607 ;;		None               void
  4608 ;; Registers used:
  4609 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4610 ;; Tracked objects:
  4611 ;;		On entry : 0/0
  4612 ;;		On exit  : 0/0
  4613 ;;		Unchanged: 0/0
  4614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4615 ;;      Params:         0       0       0       0       0       0
  4616 ;;      Locals:         0       0       0       0       0       0
  4617 ;;      Temps:          0       0       0       0       0       0
  4618 ;;      Totals:         0       0       0       0       0       0
  4619 ;;Total ram usage:        0 bytes
  4620 ;; Hardware stack levels used:    1
  4621 ;; Hardware stack levels required when called:    1
  4622 ;; This function calls:
  4623 ;;		_ringbuf_num
  4624 ;;		_ringbuf_pop
  4625 ;; This function is called by:
  4626 ;;		_isr
  4627 ;; This function uses a non-reentrant model
  4628 ;;
  4629                           
  4630                           
  4631                           ;psect for function _interrupt_TXIF
  4632  07CF                     _interrupt_TXIF:	
  4633                           
  4634                           ;My_header.h: 172: if (TXIE && TXIF) {
  4635                           
  4636                           ;incstack = 0
  4637                           ; Regs used in _interrupt_TXIF: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4638  07CF  0021               	movlb	1	; select bank1
  4639  07D0  1E11               	btfss	17,4	;volatile
  4640  07D1  0008               	return
  4641  07D2  0020               	movlb	0	; select bank0
  4642  07D3  1E11               	btfss	17,4	;volatile
  4643  07D4  0008               	return
  4644                           
  4645                           ;My_header.h: 173: TXIF = 0;
  4646  07D5  1211               	bcf	17,4	;volatile
  4647                           
  4648                           ;My_header.h: 174: if (ringbuf_num(&tx_buf) > 0) {
  4649  07D6  3060               	movlw	_tx_buf& (0+255)
  4650  07D7  3186  2698  3187   	fcall	_ringbuf_num
  4651  07DA  3A00               	xorlw	0
  4652  07DB  1903               	skipnz
  4653  07DC  2FE3               	goto	i1l166
  4654                           
  4655                           ;My_header.h: 175: TXREG = ringbuf_pop(&tx_buf);
  4656  07DD  3060               	movlw	_tx_buf& (0+255)
  4657  07DE  3186  2641         	fcall	_ringbuf_pop
  4658  07E0  0023               	movlb	3	; select bank3
  4659  07E1  009A               	movwf	26	;volatile
  4660                           
  4661                           ;My_header.h: 176: } else {
  4662  07E2  0008               	return
  4663  07E3                     i1l166:	
  4664                           
  4665                           ;My_header.h: 177: PIE1bits.TXIE = 0;
  4666  07E3  0021               	movlb	1	; select bank1
  4667  07E4  1211               	bcf	17,4	;volatile
  4668  07E5  0008               	return
  4669  07E6                     __end_of_interrupt_TXIF:	
  4670                           
  4671                           	psect	text33
  4672  0641                     __ptext33:	
  4673 ;; *************** function _ringbuf_pop *****************
  4674 ;; Defined at:
  4675 ;;		line 126 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  4676 ;; Parameters:    Size  Location     Type
  4677 ;;  rb              1    wreg     PTR struct ringbuf
  4678 ;;		 -> tx_buf(4), 
  4679 ;; Auto vars:     Size  Location     Type
  4680 ;;  rb              1    3[COMMON] PTR struct ringbuf
  4681 ;;		 -> tx_buf(4), 
  4682 ;;  ret             1    2[COMMON] unsigned char 
  4683 ;; Return value:  Size  Location     Type
  4684 ;;                  1    wreg      unsigned char 
  4685 ;; Registers used:
  4686 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  4687 ;; Tracked objects:
  4688 ;;		On entry : 0/0
  4689 ;;		On exit  : 0/0
  4690 ;;		Unchanged: 0/0
  4691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4692 ;;      Params:         0       0       0       0       0       0
  4693 ;;      Locals:         2       0       0       0       0       0
  4694 ;;      Temps:          2       0       0       0       0       0
  4695 ;;      Totals:         4       0       0       0       0       0
  4696 ;;Total ram usage:        4 bytes
  4697 ;; Hardware stack levels used:    1
  4698 ;; This function calls:
  4699 ;;		Nothing
  4700 ;; This function is called by:
  4701 ;;		_interrupt_TXIF
  4702 ;; This function uses a non-reentrant model
  4703 ;;
  4704                           
  4705                           
  4706                           ;psect for function _ringbuf_pop
  4707  0641                     _ringbuf_pop:	
  4708                           
  4709                           ;incstack = 0
  4710                           ; Regs used in _ringbuf_pop: [wreg-fsr1h+status,2+status,0]
  4711                           ;ringbuf_pop@rb stored from wreg
  4712  0641  00F3               	movwf	ringbuf_pop@rb
  4713                           
  4714                           ;My_header.h: 127: uint8_t ret = rb->buf[rb->tail];
  4715  0642  0873               	movf	ringbuf_pop@rb,w
  4716  0643  0086               	movwf	6
  4717  0644  0187               	clrf	7
  4718  0645  0873               	movf	ringbuf_pop@rb,w
  4719  0646  3E03               	addlw	3
  4720  0647  0084               	movwf	4
  4721  0648  0185               	clrf	5
  4722  0649  0800               	movf	0,w
  4723  064A  0701               	addwf	1,w
  4724  064B  00F0               	movwf	??_ringbuf_pop
  4725  064C  0870               	movf	??_ringbuf_pop,w
  4726  064D  0086               	movwf	6
  4727  064E  0187               	clrf	7
  4728  064F  0801               	movf	1,w
  4729  0650  00F1               	movwf	??_ringbuf_pop+1
  4730  0651  0871               	movf	??_ringbuf_pop+1,w
  4731  0652  00F2               	movwf	ringbuf_pop@ret
  4732                           
  4733                           ;My_header.h: 128: rb->tail++;
  4734  0653  3001               	movlw	1
  4735  0654  00F0               	movwf	??_ringbuf_pop
  4736  0655  0873               	movf	ringbuf_pop@rb,w
  4737  0656  3E03               	addlw	3
  4738  0657  0086               	movwf	6
  4739  0658  0187               	clrf	7
  4740  0659  0870               	movf	??_ringbuf_pop,w
  4741  065A  0781               	addwf	1,f
  4742                           
  4743                           ;My_header.h: 129: if (rb->tail >= rb->size) {
  4744  065B  0873               	movf	ringbuf_pop@rb,w
  4745  065C  3E03               	addlw	3
  4746  065D  0086               	movwf	6
  4747  065E  0187               	clrf	7
  4748  065F  0A73               	incf	ringbuf_pop@rb,w
  4749  0660  0084               	movwf	4
  4750  0661  0185               	clrf	5
  4751  0662  0800               	movf	0,w
  4752  0663  0201               	subwf	1,w
  4753  0664  1C03               	skipc
  4754  0665  2E6B               	goto	i1l1623
  4755                           
  4756                           ;My_header.h: 130: rb->tail = 0;
  4757  0666  0873               	movf	ringbuf_pop@rb,w
  4758  0667  3E03               	addlw	3
  4759  0668  0086               	movwf	6
  4760  0669  0187               	clrf	7
  4761  066A  0181               	clrf	1
  4762  066B                     i1l1623:	
  4763                           
  4764                           ;My_header.h: 131: }
  4765                           ;My_header.h: 132: return ret;
  4766  066B  0872               	movf	ringbuf_pop@ret,w
  4767  066C  0008               	return
  4768  066D                     __end_of_ringbuf_pop:	
  4769                           
  4770                           	psect	text34
  4771  0698                     __ptext34:	
  4772 ;; *************** function _ringbuf_num *****************
  4773 ;; Defined at:
  4774 ;;		line 135 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;  rb              1    wreg     PTR struct ringbuf
  4777 ;;		 -> tx_buf(4), 
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;  rb              1    1[COMMON] PTR struct ringbuf
  4780 ;;		 -> tx_buf(4), 
  4781 ;; Return value:  Size  Location     Type
  4782 ;;                  1    wreg      unsigned char 
  4783 ;; Registers used:
  4784 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  4785 ;; Tracked objects:
  4786 ;;		On entry : 0/0
  4787 ;;		On exit  : 0/0
  4788 ;;		Unchanged: 0/0
  4789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4790 ;;      Params:         0       0       0       0       0       0
  4791 ;;      Locals:         1       0       0       0       0       0
  4792 ;;      Temps:          1       0       0       0       0       0
  4793 ;;      Totals:         2       0       0       0       0       0
  4794 ;;Total ram usage:        2 bytes
  4795 ;; Hardware stack levels used:    1
  4796 ;; This function calls:
  4797 ;;		Nothing
  4798 ;; This function is called by:
  4799 ;;		_interrupt_TXIF
  4800 ;; This function uses a non-reentrant model
  4801 ;;
  4802                           
  4803                           
  4804                           ;psect for function _ringbuf_num
  4805  0698                     _ringbuf_num:	
  4806                           
  4807                           ;incstack = 0
  4808                           ; Regs used in _ringbuf_num: [wreg-fsr1h+status,2+status,0]
  4809                           ;ringbuf_num@rb stored from wreg
  4810  0698  00F1               	movwf	ringbuf_num@rb
  4811                           
  4812                           ;My_header.h: 136: if (rb->head >= rb->tail) {
  4813  0699  0871               	movf	ringbuf_num@rb,w
  4814  069A  3E02               	addlw	2
  4815  069B  0086               	movwf	6
  4816  069C  0187               	clrf	7
  4817  069D  0871               	movf	ringbuf_num@rb,w
  4818  069E  3E03               	addlw	3
  4819  069F  0084               	movwf	4
  4820  06A0  0185               	clrf	5
  4821  06A1  0800               	movf	0,w
  4822  06A2  0201               	subwf	1,w
  4823  06A3  1C03               	skipc
  4824  06A4  2EB1               	goto	i1l1635
  4825                           
  4826                           ;My_header.h: 137: return (rb->head - rb->tail);
  4827  06A5  0871               	movf	ringbuf_num@rb,w
  4828  06A6  3E02               	addlw	2
  4829  06A7  0086               	movwf	6
  4830  06A8  0187               	clrf	7
  4831  06A9  0871               	movf	ringbuf_num@rb,w
  4832  06AA  3E03               	addlw	3
  4833  06AB  0084               	movwf	4
  4834  06AC  0185               	clrf	5
  4835  06AD  0300               	decf	0,w
  4836  06AE  3AFF               	xorlw	255
  4837  06AF  0701               	addwf	1,w
  4838                           
  4839                           ;My_header.h: 138: } else {
  4840  06B0  0008               	return
  4841  06B1                     i1l1635:	
  4842                           
  4843                           ;My_header.h: 139: return (rb->size + rb->head - rb->tail);
  4844  06B1  0871               	movf	ringbuf_num@rb,w
  4845  06B2  3E02               	addlw	2
  4846  06B3  0086               	movwf	6
  4847  06B4  0187               	clrf	7
  4848  06B5  0A71               	incf	ringbuf_num@rb,w
  4849  06B6  0084               	movwf	4
  4850  06B7  0185               	clrf	5
  4851  06B8  0800               	movf	0,w
  4852  06B9  00F0               	movwf	??_ringbuf_num
  4853  06BA  0871               	movf	ringbuf_num@rb,w
  4854  06BB  3E03               	addlw	3
  4855  06BC  0084               	movwf	4
  4856  06BD  0185               	clrf	5
  4857  06BE  0300               	decf	0,w
  4858  06BF  3AFF               	xorlw	255
  4859  06C0  0770               	addwf	??_ringbuf_num,w
  4860  06C1  0701               	addwf	1,w
  4861  06C2  0008               	return
  4862  06C3                     __end_of_ringbuf_num:	
  4863                           
  4864                           	psect	text35
  4865  0396                     __ptext35:	
  4866 ;; *************** function _button_timer_interrupt *****************
  4867 ;; Defined at:
  4868 ;;		line 85 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header.h"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;  bt              1    wreg     PTR struct button
  4871 ;;		 -> sw_RA1(3), sw_RA0(3), 
  4872 ;;  sw_value        1    0[COMMON] unsigned char 
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;  bt              1    3[COMMON] PTR struct button
  4875 ;;		 -> sw_RA1(3), sw_RA0(3), 
  4876 ;; Return value:  Size  Location     Type
  4877 ;;		None               void
  4878 ;; Registers used:
  4879 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4880 ;; Tracked objects:
  4881 ;;		On entry : 0/0
  4882 ;;		On exit  : 0/0
  4883 ;;		Unchanged: 0/0
  4884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4885 ;;      Params:         1       0       0       0       0       0
  4886 ;;      Locals:         1       0       0       0       0       0
  4887 ;;      Temps:          2       0       0       0       0       0
  4888 ;;      Totals:         4       0       0       0       0       0
  4889 ;;Total ram usage:        4 bytes
  4890 ;; Hardware stack levels used:    1
  4891 ;; This function calls:
  4892 ;;		Nothing
  4893 ;; This function is called by:
  4894 ;;		_isr
  4895 ;; This function uses a non-reentrant model
  4896 ;;
  4897                           
  4898                           
  4899                           ;psect for function _button_timer_interrupt
  4900  0396                     _button_timer_interrupt:	
  4901                           
  4902                           ;incstack = 0
  4903                           ; Regs used in _button_timer_interrupt: [wreg+fsr1l+fsr1h+status,2+status,0]
  4904                           ;button_timer_interrupt@bt stored from wreg
  4905  0396  00F3               	movwf	button_timer_interrupt@bt
  4906                           
  4907                           ;My_header.h: 86: if (sw_value) {
  4908  0397  0870               	movf	button_timer_interrupt@sw_value,w
  4909  0398  1903               	btfsc	3,2
  4910  0399  2BF1               	goto	i1l1763
  4911                           
  4912                           ;My_header.h: 87: if (bt->cnt_sw < 150 + 1) bt->cnt_sw++;
  4913  039A  0873               	movf	button_timer_interrupt@bt,w
  4914  039B  0086               	movwf	6
  4915  039C  0187               	clrf	7
  4916  039D  3F40               	moviw [0]fsr1
  4917  039E  00F1               	movwf	??_button_timer_interrupt
  4918  039F  3F41               	moviw [1]fsr1
  4919  03A0  00F2               	movwf	??_button_timer_interrupt+1
  4920  03A1  3000               	movlw	0
  4921  03A2  0272               	subwf	??_button_timer_interrupt+1,w
  4922  03A3  3097               	movlw	151
  4923  03A4  1903               	skipnz
  4924  03A5  0271               	subwf	??_button_timer_interrupt,w
  4925  03A6  1803               	skipnc
  4926  03A7  2BB0               	goto	i1l1753
  4927  03A8  0873               	movf	button_timer_interrupt@bt,w
  4928  03A9  0086               	movwf	6
  4929  03AA  0187               	clrf	7
  4930  03AB  3001               	movlw	1
  4931  03AC  0781               	addwf	1,f
  4932  03AD  3141               	addfsr 1,1
  4933  03AE  1803               	skipnc
  4934  03AF  0A81               	incf	1,f
  4935  03B0                     i1l1753:	
  4936                           
  4937                           ;My_header.h: 88: if (bt->cnt_sw == 150)bt->flag.long_holding_3 = 1;
  4938  03B0  0873               	movf	button_timer_interrupt@bt,w
  4939  03B1  0086               	movwf	6
  4940  03B2  0187               	clrf	7
  4941  03B3  3F40               	moviw [0]fsr1
  4942  03B4  3A96               	xorlw	150
  4943  03B5  1D03               	skipz
  4944  03B6  2BB9               	goto	u139_25
  4945  03B7  3F41               	moviw [1]fsr1
  4946  03B8  3A00               	xorlw	0
  4947  03B9                     u139_25:	
  4948  03B9  1D03               	skipz
  4949  03BA  2BC0               	goto	i1l119
  4950  03BB  0873               	movf	button_timer_interrupt@bt,w
  4951  03BC  3E02               	addlw	2
  4952  03BD  0086               	movwf	6
  4953  03BE  0187               	clrf	7
  4954  03BF  1781               	bsf	1,7
  4955  03C0                     i1l119:	
  4956                           
  4957                           ;My_header.h: 89: if (bt->cnt_sw == 75)bt->flag.long_holding_2 = 1;
  4958  03C0  0873               	movf	button_timer_interrupt@bt,w
  4959  03C1  0086               	movwf	6
  4960  03C2  0187               	clrf	7
  4961  03C3  3F40               	moviw [0]fsr1
  4962  03C4  3A4B               	xorlw	75
  4963  03C5  1D03               	skipz
  4964  03C6  2BC9               	goto	u140_25
  4965  03C7  3F41               	moviw [1]fsr1
  4966  03C8  3A00               	xorlw	0
  4967  03C9                     u140_25:	
  4968  03C9  1D03               	skipz
  4969  03CA  2BD0               	goto	i1l120
  4970  03CB  0873               	movf	button_timer_interrupt@bt,w
  4971  03CC  3E02               	addlw	2
  4972  03CD  0086               	movwf	6
  4973  03CE  0187               	clrf	7
  4974  03CF  1701               	bsf	1,6
  4975  03D0                     i1l120:	
  4976                           
  4977                           ;My_header.h: 90: if (bt->cnt_sw == 30)bt->flag.long_holding_1 = 1;
  4978  03D0  0873               	movf	button_timer_interrupt@bt,w
  4979  03D1  0086               	movwf	6
  4980  03D2  0187               	clrf	7
  4981  03D3  3F40               	moviw [0]fsr1
  4982  03D4  3A1E               	xorlw	30
  4983  03D5  1D03               	skipz
  4984  03D6  2BD9               	goto	u141_25
  4985  03D7  3F41               	moviw [1]fsr1
  4986  03D8  3A00               	xorlw	0
  4987  03D9                     u141_25:	
  4988  03D9  1D03               	skipz
  4989  03DA  2BE0               	goto	i1l121
  4990  03DB  0873               	movf	button_timer_interrupt@bt,w
  4991  03DC  3E02               	addlw	2
  4992  03DD  0086               	movwf	6
  4993  03DE  0187               	clrf	7
  4994  03DF  1681               	bsf	1,5
  4995  03E0                     i1l121:	
  4996                           
  4997                           ;My_header.h: 91: if (bt->cnt_sw == 2)bt->flag.pressing = 1;
  4998  03E0  0873               	movf	button_timer_interrupt@bt,w
  4999  03E1  0086               	movwf	6
  5000  03E2  0187               	clrf	7
  5001  03E3  3F40               	moviw [0]fsr1
  5002  03E4  3A02               	xorlw	2
  5003  03E5  1D03               	skipz
  5004  03E6  2BE9               	goto	u142_25
  5005  03E7  3F41               	moviw [1]fsr1
  5006  03E8  3A00               	xorlw	0
  5007  03E9                     u142_25:	
  5008  03E9  1D03               	skipz
  5009  03EA  0008               	return
  5010  03EB  0873               	movf	button_timer_interrupt@bt,w
  5011  03EC  3E02               	addlw	2
  5012  03ED  0086               	movwf	6
  5013  03EE  0187               	clrf	7
  5014  03EF  1601               	bsf	1,4
  5015                           
  5016                           ;My_header.h: 92: } else {
  5017  03F0  0008               	return
  5018  03F1                     i1l1763:	
  5019                           
  5020                           ;My_header.h: 93: if (bt->cnt_sw >= 150)bt->flag.long_hold_3 = 1;
  5021  03F1  0873               	movf	button_timer_interrupt@bt,w
  5022  03F2  0086               	movwf	6
  5023  03F3  0187               	clrf	7
  5024  03F4  3F40               	moviw [0]fsr1
  5025  03F5  00F1               	movwf	??_button_timer_interrupt
  5026  03F6  3F41               	moviw [1]fsr1
  5027  03F7  00F2               	movwf	??_button_timer_interrupt+1
  5028  03F8  3000               	movlw	0
  5029  03F9  0272               	subwf	??_button_timer_interrupt+1,w
  5030  03FA  3096               	movlw	150
  5031  03FB  1903               	skipnz
  5032  03FC  0271               	subwf	??_button_timer_interrupt,w
  5033  03FD  1C03               	skipc
  5034  03FE  2C05               	goto	i1l1767
  5035  03FF  0873               	movf	button_timer_interrupt@bt,w
  5036  0400  3E02               	addlw	2
  5037  0401  0086               	movwf	6
  5038  0402  0187               	clrf	7
  5039  0403  1581               	bsf	1,3
  5040  0404  2C40               	goto	i1l125
  5041  0405                     i1l1767:	
  5042                           
  5043                           ;My_header.h: 94: else if (bt->cnt_sw >= 75)bt->flag.long_hold_2 = 1;
  5044  0405  0873               	movf	button_timer_interrupt@bt,w
  5045  0406  0086               	movwf	6
  5046  0407  0187               	clrf	7
  5047  0408  3F40               	moviw [0]fsr1
  5048  0409  00F1               	movwf	??_button_timer_interrupt
  5049  040A  3F41               	moviw [1]fsr1
  5050  040B  00F2               	movwf	??_button_timer_interrupt+1
  5051  040C  3000               	movlw	0
  5052  040D  0272               	subwf	??_button_timer_interrupt+1,w
  5053  040E  304B               	movlw	75
  5054  040F  1903               	skipnz
  5055  0410  0271               	subwf	??_button_timer_interrupt,w
  5056  0411  1C03               	skipc
  5057  0412  2C19               	goto	i1l1771
  5058  0413  0873               	movf	button_timer_interrupt@bt,w
  5059  0414  3E02               	addlw	2
  5060  0415  0086               	movwf	6
  5061  0416  0187               	clrf	7
  5062  0417  1501               	bsf	1,2
  5063  0418  2C40               	goto	i1l125
  5064  0419                     i1l1771:	
  5065                           
  5066                           ;My_header.h: 95: else if (bt->cnt_sw >= 30)bt->flag.long_hold_1 = 1;
  5067  0419  0873               	movf	button_timer_interrupt@bt,w
  5068  041A  0086               	movwf	6
  5069  041B  0187               	clrf	7
  5070  041C  3F40               	moviw [0]fsr1
  5071  041D  00F1               	movwf	??_button_timer_interrupt
  5072  041E  3F41               	moviw [1]fsr1
  5073  041F  00F2               	movwf	??_button_timer_interrupt+1
  5074  0420  3000               	movlw	0
  5075  0421  0272               	subwf	??_button_timer_interrupt+1,w
  5076  0422  301E               	movlw	30
  5077  0423  1903               	skipnz
  5078  0424  0271               	subwf	??_button_timer_interrupt,w
  5079  0425  1C03               	skipc
  5080  0426  2C2D               	goto	i1l1775
  5081  0427  0873               	movf	button_timer_interrupt@bt,w
  5082  0428  3E02               	addlw	2
  5083  0429  0086               	movwf	6
  5084  042A  0187               	clrf	7
  5085  042B  1481               	bsf	1,1
  5086  042C  2C40               	goto	i1l125
  5087  042D                     i1l1775:	
  5088                           
  5089                           ;My_header.h: 96: else if (bt->cnt_sw >= 2)bt->flag.press = 1;
  5090  042D  0873               	movf	button_timer_interrupt@bt,w
  5091  042E  0086               	movwf	6
  5092  042F  0187               	clrf	7
  5093  0430  3F40               	moviw [0]fsr1
  5094  0431  00F1               	movwf	??_button_timer_interrupt
  5095  0432  3F41               	moviw [1]fsr1
  5096  0433  00F2               	movwf	??_button_timer_interrupt+1
  5097  0434  3000               	movlw	0
  5098  0435  0272               	subwf	??_button_timer_interrupt+1,w
  5099  0436  3002               	movlw	2
  5100  0437  1903               	skipnz
  5101  0438  0271               	subwf	??_button_timer_interrupt,w
  5102  0439  1C03               	skipc
  5103  043A  2C40               	goto	i1l125
  5104  043B  0873               	movf	button_timer_interrupt@bt,w
  5105  043C  3E02               	addlw	2
  5106  043D  0086               	movwf	6
  5107  043E  0187               	clrf	7
  5108  043F  1401               	bsf	1,0
  5109  0440                     i1l125:	
  5110                           
  5111                           ;My_header.h: 97: bt->cnt_sw = 0;
  5112  0440  0873               	movf	button_timer_interrupt@bt,w
  5113  0441  0086               	movwf	6
  5114  0442  0187               	clrf	7
  5115  0443  3000               	movlw	0
  5116  0444  3FC0               	movwi [0]fsr1
  5117  0445  3FC1               	movwi [1]fsr1
  5118                           
  5119                           ;My_header.h: 98: bt->flags &= 0x0F;
  5120  0446  300F               	movlw	15
  5121  0447  00F1               	movwf	??_button_timer_interrupt
  5122  0448  0873               	movf	button_timer_interrupt@bt,w
  5123  0449  3E02               	addlw	2
  5124  044A  0086               	movwf	6
  5125  044B  0187               	clrf	7
  5126  044C  0871               	movf	??_button_timer_interrupt,w
  5127  044D  0581               	andwf	1,f
  5128  044E  0008               	return
  5129  044F                     __end_of_button_timer_interrupt:	
  5130  007E                     btemp	set	126	;btemp
  5131  007E                     pic14e$flags	set	126
  5132  007E                     wtemp	set	126
  5133  007E                     wtemp0	set	126
  5134  0080                     wtemp1	set	128
  5135  0082                     wtemp2	set	130
  5136  0084                     wtemp3	set	132
  5137  0086                     wtemp4	set	134
  5138  0088                     wtemp5	set	136
  5139  007F                     wtemp6	set	127
  5140  007E                     ttemp	set	126
  5141  007E                     ttemp0	set	126
  5142  0081                     ttemp1	set	129
  5143  0084                     ttemp2	set	132
  5144  0087                     ttemp3	set	135
  5145  007F                     ttemp4	set	127
  5146  007E                     ltemp	set	126
  5147  007E                     ltemp0	set	126
  5148  0082                     ltemp1	set	130
  5149  0086                     ltemp2	set	134
  5150  0080                     ltemp3	set	128


Data Sizes:
    Strings     17
    Constant    10
    Data        2
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      12
    BANK0            80     64      73
    BANK1            80     70      70
    BANK2            80     50      50
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_2(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 50
		 -> main@tmbuf(BANK2[50]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S614$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    LCD_Puts@s	PTR const unsigned char  size(2) Largest target is 50
		 -> main@tmbuf(BANK2[50]), STR_1(CODE[7]), 

    tx_sends@asciicode	PTR unsigned char  size(1) Largest target is 50
		 -> main@tmbuf(BANK2[50]), 

    tx_buf.buf	PTR unsigned char  size(1) Largest target is 70
		 -> main@buf(BANK1[70]), 

    ringbuf_num@rb.buf	PTR unsigned char  size(1) Largest target is 70
		 -> main@buf(BANK1[70]), 

    ringbuf_num@rb	PTR struct ringbuf size(1) Largest target is 5
		 -> tx_buf(BANK0[4]), 

    ringbuf_pop@rb.buf	PTR unsigned char  size(1) Largest target is 70
		 -> main@buf(BANK1[70]), 

    ringbuf_pop@rb	PTR struct ringbuf size(1) Largest target is 5
		 -> tx_buf(BANK0[4]), 

    ringbuf_push@rb.buf	PTR unsigned char  size(1) Largest target is 70
		 -> main@buf(BANK1[70]), 

    ringbuf_push@rb	PTR struct ringbuf size(1) Largest target is 5
		 -> tx_buf(BANK0[4]), 

    S224ringbuf$buf	PTR unsigned char  size(1) Largest target is 70
		 -> main@buf(BANK1[70]), 

    ringbuf_init@rb.buf	PTR unsigned char  size(1) Largest target is 70
		 -> main@buf(BANK1[70]), 

    ringbuf_init@internal_buf	PTR unsigned char  size(1) Largest target is 70
		 -> main@buf(BANK1[70]), 

    ringbuf_init@rb	PTR struct ringbuf size(1) Largest target is 5
		 -> tx_buf(BANK0[4]), 

    button_timer_interrupt@bt	PTR struct button size(1) Largest target is 3
		 -> sw_RA1(BANK0[3]), sw_RA0(COMMON[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_tx_send
    i1_tx_send->i1_ringbuf_push
    _interrupt_TXIF->_ringbuf_pop

Critical Paths under _main in BANK0

    _main->_sprintf
    _tx_sends->_ringbuf_push
    _tx_send->_ringbuf_push
    _sprintf->___awmod
    ___wmul->___awdiv
    ___lwmod->___lwdiv
    ___awmod->___wmul
    ___awdiv->_abs
    _TM_init->_I2C_Start
    _TM_Read->_I2C_rStart
    _I2C_rStart->_I2C_IdleCheck
    _I2C_Receive->_I2C_IdleCheck
    _LCD_init->_LCD_Clear
    _LCD_Clear->_LCD_Command
    _LCD_SetCursor->_LCD_Command
    _LCD_Command->_I2C_Start
    _LCD_Puts->_I2C_Start
    _I2C_Stop->_I2C_IdleCheck
    _I2C_Start->_I2C_IdleCheck
    _I2C_Send->_I2C_IdleCheck

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               136   136      0   14334
                                             48 BANK0     16    16      0
                                              0 BANK1     70    70      0
                                              0 BANK2     50    50      0
                           _Delay_ms
                           _I2C_init
                          _LCD_Clear
                           _LCD_Puts
                      _LCD_SetCursor
                           _LCD_init
                            _TM_Read
                            _TM_init
                          _UART_init
                            ___awdiv
                            ___awmod
                             ___wmul
                                _abs
                       _ringbuf_init
                            _sprintf
                            _tx_send
                           _tx_sends
 ---------------------------------------------------------------------------------
 (1) _tx_sends                                             4     4      0     584
                                              4 BANK0      4     4      0
                       _ringbuf_push
 ---------------------------------------------------------------------------------
 (1) _tx_send                                              2     2      0     480
                                              4 BANK0      2     2      0
                       _ringbuf_push
 ---------------------------------------------------------------------------------
 (2) _ringbuf_push                                         4     3      1     458
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             22    14      8    2839
                                             26 BANK0     22    14      8
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                                _abs (ARG)
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     804
                                             13 BANK0      6     2      4
                            ___awdiv (ARG)
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     337
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     340
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _ringbuf_init                                         4     2      2     373
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _abs                                                  4     2      2     244
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     474
                                             19 BANK0      7     3      4
                            ___awdiv (ARG)
                             ___wmul (ARG)
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     834
                                              4 BANK0      9     5      4
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TM_init                                              3     3      0     889
                                              4 BANK0      3     3      0
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (1) _TM_Read                                             10     8      2    1425
                                              6 BANK0     10     8      2
                        _I2C_Receive
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
                         _I2C_rStart
 ---------------------------------------------------------------------------------
 (2) _I2C_rStart                                           4     0      4     422
                                              2 BANK0      4     0      4
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (2) _I2C_Receive                                          3     3      0      67
                                              2 BANK0      3     3      0
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             3     3      0    1778
                                              9 BANK0      3     3      0
                          _LCD_Clear
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            2     2      0     889
                                              7 BANK0      2     2      0
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (1) _LCD_SetCursor                                        4     3      1    1135
                                              7 BANK0      4     3      1
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          3     3      0     889
                                              4 BANK0      3     3      0
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (1) _LCD_Puts                                             6     4      2    1090
                                              4 BANK0      6     4      2
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _I2C_Stop                                             0     0      0      22
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            2     1      1     778
                                              2 BANK0      2     1      1
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (2) _I2C_Send                                             1     1      0      44
                                              2 BANK0      1     1      0
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (3) _I2C_IdleCheck                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Delay_ms                                             6     4      2     224
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  2     2      0    1403
                                              6 COMMON     2     2      0
             _button_timer_interrupt
                     _interrupt_TXIF
                          i1_tx_send
 ---------------------------------------------------------------------------------
 (7) i1_tx_send                                            2     2      0     202
                                              4 COMMON     2     2      0
                     i1_ringbuf_push
 ---------------------------------------------------------------------------------
 (8) i1_ringbuf_push                                       4     3      1     180
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (7) _interrupt_TXIF                                       0     0      0     435
                        _ringbuf_num
                        _ringbuf_pop
 ---------------------------------------------------------------------------------
 (8) _ringbuf_pop                                          4     4      0     218
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (8) _ringbuf_num                                          2     2      0     217
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (7) _button_timer_interrupt                               4     3      1     766
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_ms
   _I2C_init
   _LCD_Clear
     _LCD_Command
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
   _LCD_Puts
     _I2C_Send
       _I2C_IdleCheck
     _I2C_Start
       _I2C_IdleCheck
     _I2C_Stop
       _I2C_IdleCheck
   _LCD_SetCursor
     _LCD_Command
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
   _LCD_init
     _LCD_Clear
       _LCD_Command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     _LCD_Command
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
   _TM_Read
     _I2C_Receive
       _I2C_IdleCheck
     _I2C_Send
       _I2C_IdleCheck
     _I2C_Start
       _I2C_IdleCheck
     _I2C_Stop
       _I2C_IdleCheck
     _I2C_rStart
       _I2C_IdleCheck
   _TM_init
     _I2C_Send
       _I2C_IdleCheck
     _I2C_Start
       _I2C_IdleCheck
     _I2C_Stop
       _I2C_IdleCheck
   _UART_init
   ___awdiv
     _abs (ARG)
   ___awmod
     ___awdiv (ARG)
       _abs (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         _abs (ARG)
       _abs (ARG)
     _abs (ARG)
   ___wmul
     ___awdiv (ARG)
       _abs (ARG)
     _abs (ARG)
   _abs
   _ringbuf_init
   _sprintf
     ___awdiv (ARG)
       _abs (ARG)
     ___awmod (ARG)
       ___awdiv (ARG)
         _abs (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           _abs (ARG)
         _abs (ARG)
       _abs (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         _abs (ARG)
       _abs (ARG)
     _abs (ARG)
     _isdigit (ARG)
   _tx_send
     _ringbuf_push
   _tx_sends
     _ringbuf_push

 _isr (ROOT)
   _button_timer_interrupt
   _interrupt_TXIF
     _ringbuf_num
     _ringbuf_pop
   i1_tx_send
     i1_ringbuf_push

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      CD       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     40      49       6       91.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     46      46       8       87.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     32      32      10       62.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      CD      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Jan 22 19:35:01 2015

         __end_ofi1_ringbuf_push 0698               __size_of_I2C_Start 001B                      __CFG_CP$OFF 0000  
                   ?_LCD_Command 0070                     ___awdiv@sign 002A              ___wmul@multiplicand 002F  
         __end_of_interrupt_TXIF 07E6                    _LCD_SetCursor 0FEE                              l201 0FE8  
                            l210 073F                              l320 0199                              l161 06E5  
                            l171 079F                              l251 06FF                              l421 0751  
                            l255 04B4                              l192 07C6                              l256 04D7  
                            l186 0793                              l292 0085                              _RA0 0060  
                            _RA1 0061                     __CFG_CPD$OFF 0000                              _abs 0FBF  
                            _isr 0004                     ___awmod@sign 0039              __size_of_I2C_rStart 0019  
           __size_of_I2C_Receive 0020                     __CFG_BORV$LO 0000                              wreg 0009  
                   __CFG_LVP$OFF 0000                             ?_abs 0020                             l2101 0502  
                           l2111 0514                             l2023 01F7                             l2007 01CA  
                           l2015 01DF                             l2017 01E3                             l2041 024C  
                           l2123 0531                             l2115 0520                             l2053 045A  
                           l2109 0508                             l2037 020B                             l2029 0207  
                           l2071 0479                             l2119 0529                             l2039 005E  
                           l2081 0494                             l2059 0465                             l2251 028C  
                           l2085 049C                             l2077 048B                             l2069 046D  
                           l1701 0584                             l1703 0590                             l2263 02A8  
                           l2097 04FB                             l1713 05AB                             l1571 0FA3  
                           l1731 0605                             l1709 05A2                             l1725 05ED  
                           l1813 06C6                             l1727 05F9                             l1735 060E  
                           l1681 074B                             l1921 008A                             l1851 05C7  
                           l1675 0FDB                             l1923 0093                             l1915 0081  
                           l1853 05E3                             l1935 00D3                             l1927 00A0  
                           l1953 010F                             l1945 00E3                             l1955 0122  
                           l1947 00FC                             l1939 00E1                             l1981 016E  
                           l1965 0136                             l1959 012D                             l1967 0151  
                           l1977 0168                             l1997 01B5                             l1989 018D  
                           l1999 01B8                             ?_isr 0070                             STR_1 0814  
                           STR_2 080A                             u1205 0752                             u1215 0757  
                           u1315 05F0                             u1245 0587                             u2125 02E4  
                           u2207 05E0                             u1335 05FF                             u2135 0301  
                           u2217 07AB                             u1265 0591                             u1345 0606  
                           u2147 0705                             u1275 059B                             u1525 07A5  
                           u2157 04DD                             u1285 05A3                             u2167 053F  
                           u2177 0565                             u1625 00DA                             u2187 0FB9  
                           u1715 01A8                             u1635 00ED                             u2197 0745  
                           u1645 011F                             u1675 0183                             u1845 0470  
                           u1865 047A                             u1945 050B                             u1875 0484  
                           u1885 048C                             u1965 051A                             u1975 0521  
                           _RCIF 008D                             _SPEN 0CEF                             _TXIE 048C  
                           _TXIF 008C                             _WPUB 020D                     __CFG_WRT$OFF 0000  
                           abs@a 0020                             _main 0253         button_timer_interrupt@bt 0073  
             __size_of_LCD_Clear 000F                             fsr0h 0005                             fsr1h 0007  
                           fsr0l 0004                             indf0 0000                             indf1 0001  
                           fsr1l 0006                 __end_of_I2C_Send 0FEE                             btemp 007E  
               __end_of_I2C_Stop 07FE                             ltemp 007E                 __end_of_I2C_init 0F95  
                           start 0040                             ttemp 007E                  __end_of_TM_Read 04F0  
                           wtemp 007E                    __CFG_IESO$OFF 0000                  __end_of_TM_init 0708  
         __size_of_I2C_IdleCheck 000F                            ??_abs 0022                  ?i1_ringbuf_push 0070  
                          ??_isr 0076                    __CFG_PLLEN$ON 0000                 __end_of_LCD_Puts 05E6  
                 ?_LCD_SetCursor 0027                  ?_interrupt_TXIF 0070                 __end_of_LCD_init 057B  
                          ?_main 0070                  __end_of___awdiv 04A3                            _ADRES 009B  
                          _BRG16 0CFB                    __CFG_WDTE$OFF 0000                  __end_of___awmod 0538  
                ___awdiv@divisor 0024                            _T1CON 0018                            _LATB0 0868  
                __end_of___lwdiv 05B2                            i1l120 03D0                            i1l121 03E0  
                          i1l125 0440                            i1l119 03C0                            i1l166 07E3  
                __end_of___lwmod 0615                            i1l269 003B                  ___awdiv@counter 0029  
                          _RCREG 0199                      LCD_Puts@ans 0028                            _RCSTA 019D  
                          _TMR1H 0017                            _TMR1L 0016                            _PORTA 000C  
                          _PORTB 000D                            _TRISA 008C                            _TRISB 008D  
                          _TXREG 019A                            _TXSTA 019E                   __CFG_FCMEN$OFF 0000  
             __size_of_UART_init 0012            ringbuf_push@asciicode 0020                  __end_of_dpowers 080A  
                __end_of_isdigit 0FDD                __end_of_I2C_Start 079C                   __CFG_BOREN$OFF 0000  
                   LCD_Command@c 0025                            ltemp0 007E                            ltemp1 0082  
                          ltemp2 0086                            ltemp3 0080                            ttemp0 007E  
                          ttemp1 0081                            ttemp2 0084                            ttemp3 0087  
                          ttemp4 007F                            status 0003                            wtemp0 007E  
                          wtemp1 0080                            wtemp2 0082                            wtemp3 0084  
                          wtemp4 0086                            wtemp5 0088                            wtemp6 007F  
                __end_of_sprintf 0253                  __end_of_tx_send 0FA1                 __end_of_Delay_ms 07B6  
                 __CFG_MCLRE$OFF 0000                  __initialization 0042                     __end_of_main 0396  
            ringbuf_init@bufsize 0021                           ??_main 0050                __end_of_LCD_Clear 0FBF  
             __size_ofi1_tx_send 000B                           _BCL1IF 0093                    _I2C_IdleCheck 0FA1  
               ___awdiv@dividend 0026                           _ANSELA 018C                           _ANSELB 018D  
                      ??_TM_Read 0028                           i1l2207 0024                           i1l1623 066B  
                         i1l1635 06B1                           i1l2197 0015                           i1l1753 03B0  
                         i1l1771 0419                           i1l1763 03F1                           i1l1775 042D  
                         i1l1767 0405                           u140_25 03C9                           u141_25 03D9  
                         u142_25 03E9                           _FVRCON 0117                           u139_25 03B9  
                         _OSCCON 0099                        ??_TM_init 0024                           _TMR1IF 0088  
                         _SPBRGH 019C                           _SPBRGL 019B                           _SSP1IF 008B  
                   ??_I2C_rStart 0026                   __CFG_PWRTE$OFF 0000                     ?_ringbuf_pop 0070  
                   ?_ringbuf_num 0070                           ___wmul 0748                __end_of_UART_init 07F8  
                      ??___awdiv 0028                        ??___awmod 0037                  ??_LCD_SetCursor 0028  
                      ??___lwdiv 0024                           _cnt_t1 0078                        ??___lwmod 002C  
               ___awdiv@quotient 002B                           _sw_RA0 0079                           _sw_RA1 0064  
                ___awmod@divisor 0033                  ___awmod@counter 0038                           _tx_buf 0060  
           __size_of_LCD_Command 0020                        ??_isdigit 0020                        ?_I2C_Send 0070  
                      ?_I2C_Stop 0070                  UART_init@device 0020                        ?_I2C_init 0070  
             __end_of_I2C_rStart 07CF                   ?_I2C_IdleCheck 0070                        ??_sprintf 0042  
                      ??_tx_send 0024                 __end_of_tx_sends 06E8          __end_of__initialization 0054  
                      ?_LCD_Puts 0024                        ?_LCD_init 0070                __end_ofi1_tx_send 0F8A  
                 __pcstackCOMMON 0070                     __pidataBANK0 07FE                        LCD_Puts@s 0024  
                 _OPTION_REGbits 0095                       ??_I2C_Send 0022                       ??_I2C_Stop 0022  
                     ??_I2C_init 0020                        ?_Delay_ms 0020                     sprintf@width 0049  
                     __pbssBANK0 0060                       ??_LCD_Puts 0026                       ??_LCD_init 0029  
               ??i1_ringbuf_push 0071                       __pmaintext 0253                 ??_interrupt_TXIF 0074  
                        ?___wmul 002D                       __pintentry 0004                    ??_I2C_Receive 0022  
                   I2C_Send@data 0022                  ??_I2C_IdleCheck 0020                       ??_Delay_ms 0022  
                        _SSP1ADD 0212                          _SSP1BUF 0211                          _TM_Read 04A3  
                  TM_init@config 0025         ??_button_timer_interrupt 0071                          _TM_init 06E8  
                      _I2C_Start 0781                   I2C_Receive@ack 0023                    ?_ringbuf_init 0020  
                        ___awdiv 044F                          ___awmod 04F0                    ?_ringbuf_push 0020  
                __size_of___wmul 001E                          ___lwdiv 057B                          ___lwmod 05E6  
           __size_of_ringbuf_pop 002C             __size_of_ringbuf_num 002B                  __CFG_STVREN$OFF 0000  
       LCD_SetCursor@row_offsets 0028                        ?_tx_sends 0070                          __ptext1 06C3  
                        __ptext2 0F95                          __ptext3 0615                          __ptext4 0058  
                        __ptext5 0FCE                          __ptext6 0748                          __ptext7 05E6  
                        __ptext8 057B                          __ptext9 0766                     TM_Read@dataH 002D  
                   TM_Read@dataL 002E                        _T1CONbits 0018                          _dpowers 0800  
                   __size_of_abs 000F                          _isdigit 0FCE                     __size_of_isr 003C  
               ___awmod@dividend 0035                        _LCD_Clear 0FB0              __end_of_I2C_Receive 0728  
                        main@buf 00A0                          _sprintf 0058                          _tx_send 0F95  
           end_of_initialization 0054                 LCD_SetCursor@col 002A                        Delay_ms@i 0024  
               LCD_SetCursor@row 0027                   LCD_Command@ans 0026                       ?_I2C_Start 0022  
                   I2C_rStart@rw 0024                   ??_ringbuf_init 0022                   ??_ringbuf_push 0021  
                   __pstringtext 0800                       ??_tx_sends 0024                        _UART_init 07E6  
               __CFG_FOSC$INTOSC 0000                       ?_LCD_Clear 0070                __size_of_I2C_Send 0011  
              __size_of_I2C_Stop 0006                __size_of_I2C_init 000B  __size_of_button_timer_interrupt 00B9  
              __size_of_LCD_Puts 0034                __size_of_LCD_init 0043                   ringbuf_init@rb 0023  
                      i1_tx_send 0F7F                   ringbuf_pop@ret 0072                    ??_LCD_Command 0024  
                 __end_of___wmul 0766            __end_of_LCD_SetCursor 1000                   ringbuf_push@rb 0023  
                     ?_UART_init 0070                      _I2C_Receive 0708              start_initialization 0042  
                    __end_of_abs 0FCE                      __end_of_isr 0040                __size_of_Delay_ms 001A  
                    ??_I2C_Start 0023                      _APFCON0bits 011D                      _APFCON1bits 011E  
                     ?i1_tx_send 0070                         ??___wmul 0031                      __pdataBANK0 0067  
         _button_timer_interrupt 0396              __end_of_LCD_Command 0748                      __pbssCOMMON 0078  
                      ___latbits 0001                    __pcstackBANK0 0020                    __pcstackBANK1 00A0  
                  __pcstackBANK2 0120                      ??_LCD_Clear 0027              __end_of__stringdata 081B  
           __end_of_ringbuf_init 0781             __end_of_ringbuf_push 0641                 tx_send@asciicode 0025  
                       ?_TM_Read 0026                         ?_TM_init 0070                      sprintf@_val 004B  
                    sprintf@flag 0048                      sprintf@prec 0046                        _main$1087 005A  
                      _main$1088 005C                 ___lwdiv@dividend 0022                         ?___awdiv 0024  
                       ?___awmod 0033                         ?___lwdiv 0020                         ?___lwmod 0028  
                    ??_UART_init 0020                __size_of_tx_sends 0025                      I2C_Start@rw 0022  
                       ?_isdigit 0070                         _I2C_Send 0FDD                         _I2C_Stop 07F8  
                       _I2C_init 0F8A            __end_of_I2C_IdleCheck 0FB0                 ___lwdiv@quotient 0025  
                       ?_sprintf 003A                         ?_tx_send 0070         ringbuf_init@internal_buf 0020  
                 ___wmul@product 0031                         _LCD_Puts 05B2                         _LCD_init 0538  
                       _PIE1bits 0091                    ??_ringbuf_pop 0070                    ??_ringbuf_num 0070  
                    ??i1_tx_send 0074                         _SSP1CON1 0215                         _SSP1CON2 0216  
                       _SSP1STAT 0214                      _LCD_Command 0728                       _ADCON0bits 009D  
        __size_ofi1_ringbuf_push 002B                       _ADCON1bits 009E                      __stringdata 080A  
              ___wmul@multiplier 002D   button_timer_interrupt@sw_value 0070          __size_of_interrupt_TXIF 0017  
                      main@tmbuf 0120                         _Delay_ms 079C                    ringbuf_pop@rb 0073  
                  ringbuf_num@rb 0071                    I2C_Start@adrs 0023               LCD_SetCursor@F3069 0067  
               __size_of_TM_Read 004D                  I2C_Receive@data 0024                 __size_of_TM_init 0020  
                     _I2C_rStart 07B6                 __size_of___awdiv 0054                 __size_of___awmod 0048  
              I2C_IdleCheck@mask 0021                 __size_of___lwdiv 0037                 __size_of___lwmod 002F  
                   ?_I2C_Receive 0070                tx_sends@asciicode 0026                      _isdigit$814 0020  
            __end_of_ringbuf_pop 066D              __end_of_ringbuf_num 06C3               i1tx_send@asciicode 0075  
          __size_of_ringbuf_init 001B            __size_of_ringbuf_push 002C                 __size_of_isdigit 000F  
                ___lwdiv@divisor 0020                  ___lwdiv@counter 0027                         __ptext10 0FBF  
                       __ptext11 04F0                         __ptext20 0FEE                         __ptext12 044F  
                       __ptext21 0728                         __ptext13 07E6                         __ptext30 0F7F  
                       __ptext22 05B2                         __ptext14 06E8                         __ptext31 066D  
                       __ptext23 07F8                         __ptext15 04A3                         __ptext32 07CF  
                       __ptext24 0781                         __ptext16 07B6                         __ptext33 0641  
                       __ptext25 0FDD                         __ptext17 0708                         __ptext34 0698  
                       __ptext26 0FA1                         __ptext18 0538                         __ptext35 0396  
                       __ptext27 0F8A                         __ptext19 0FB0                         __ptext28 079C  
                   _SSP1CON2bits 0216                 i1ringbuf_push@rb 0073                 __size_of_sprintf 01FB  
               __size_of_tx_send 000C                   I2C_rStart@adrs 0022                    __size_of_main 0143  
                     TM_Read@ans 002F          ?_button_timer_interrupt 0070                     _ringbuf_init 0766  
                   _ringbuf_push 0615                         main@temp 005E                         _tx_sends 06C3  
                     _INTCONbits 000B                       Delay_ms@ms 0020                         isdigit@c 0021  
                    pic14e$flags 007E                         intlevel1 0000                        sprintf@ap 0047  
                      sprintf@sp 004E                 ___lwmod@dividend 002A           __size_of_LCD_SetCursor 0012  
                      tx_sends@i 0027                       TM_init@ans 0026                __CFG_CLKOUTEN$OFF 0000  
                    ?_I2C_rStart 0022   __end_of_button_timer_interrupt 044F                      _ringbuf_pop 0641  
                    _ringbuf_num 0698                   i1_ringbuf_push 066D                       _OPTION_REG 0095  
                 _interrupt_TXIF 07CF                         sprintf@c 004F                         sprintf@f 003A  
                ___lwmod@divisor 0028                  ___lwmod@counter 002D          i1ringbuf_push@asciicode 0070  
