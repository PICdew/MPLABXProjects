

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri Jan 23 11:11:11 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	swtext1,local,class=CONST,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	intentry,global,class=CODE,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	dabs	1,0x7E,2
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0013                     	;# 
    68  0014                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001C                     	;# 
    78  001E                     	;# 
    79  001F                     	;# 
    80  008C                     	;# 
    81  008D                     	;# 
    82  0091                     	;# 
    83  0092                     	;# 
    84  0093                     	;# 
    85  0094                     	;# 
    86  0095                     	;# 
    87  0096                     	;# 
    88  0097                     	;# 
    89  0098                     	;# 
    90  0099                     	;# 
    91  009A                     	;# 
    92  009B                     	;# 
    93  009B                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009E                     	;# 
    97  010C                     	;# 
    98  010D                     	;# 
    99  0111                     	;# 
   100  0112                     	;# 
   101  0113                     	;# 
   102  0114                     	;# 
   103  0115                     	;# 
   104  0116                     	;# 
   105  0117                     	;# 
   106  0118                     	;# 
   107  0119                     	;# 
   108  011A                     	;# 
   109  011B                     	;# 
   110  011D                     	;# 
   111  011E                     	;# 
   112  018C                     	;# 
   113  018D                     	;# 
   114  0191                     	;# 
   115  0191                     	;# 
   116  0192                     	;# 
   117  0193                     	;# 
   118  0193                     	;# 
   119  0193                     	;# 
   120  0194                     	;# 
   121  0195                     	;# 
   122  0196                     	;# 
   123  0199                     	;# 
   124  019A                     	;# 
   125  019B                     	;# 
   126  019B                     	;# 
   127  019B                     	;# 
   128  019B                     	;# 
   129  019C                     	;# 
   130  019C                     	;# 
   131  019D                     	;# 
   132  019E                     	;# 
   133  019F                     	;# 
   134  020C                     	;# 
   135  020D                     	;# 
   136  0211                     	;# 
   137  0211                     	;# 
   138  0212                     	;# 
   139  0212                     	;# 
   140  0213                     	;# 
   141  0213                     	;# 
   142  0214                     	;# 
   143  0214                     	;# 
   144  0215                     	;# 
   145  0215                     	;# 
   146  0215                     	;# 
   147  0216                     	;# 
   148  0216                     	;# 
   149  0217                     	;# 
   150  0217                     	;# 
   151  0219                     	;# 
   152  021A                     	;# 
   153  021B                     	;# 
   154  021C                     	;# 
   155  021D                     	;# 
   156  021E                     	;# 
   157  021F                     	;# 
   158  0291                     	;# 
   159  0291                     	;# 
   160  0292                     	;# 
   161  0293                     	;# 
   162  0294                     	;# 
   163  0295                     	;# 
   164  0295                     	;# 
   165  0296                     	;# 
   166  0298                     	;# 
   167  0298                     	;# 
   168  0299                     	;# 
   169  029A                     	;# 
   170  029B                     	;# 
   171  029C                     	;# 
   172  029C                     	;# 
   173  029D                     	;# 
   174  029E                     	;# 
   175  029E                     	;# 
   176  0311                     	;# 
   177  0311                     	;# 
   178  0312                     	;# 
   179  0313                     	;# 
   180  0318                     	;# 
   181  0318                     	;# 
   182  0319                     	;# 
   183  031A                     	;# 
   184  0394                     	;# 
   185  0395                     	;# 
   186  0396                     	;# 
   187  039A                     	;# 
   188  039C                     	;# 
   189  039D                     	;# 
   190  039E                     	;# 
   191  039F                     	;# 
   192  0415                     	;# 
   193  0416                     	;# 
   194  0417                     	;# 
   195  041C                     	;# 
   196  041D                     	;# 
   197  041E                     	;# 
   198  0FE4                     	;# 
   199  0FE5                     	;# 
   200  0FE6                     	;# 
   201  0FE7                     	;# 
   202  0FE8                     	;# 
   203  0FE9                     	;# 
   204  0FEA                     	;# 
   205  0FEB                     	;# 
   206  0FED                     	;# 
   207  0FEE                     	;# 
   208  0FEF                     	;# 
   209                           
   210                           	psect	idataBANK0
   211  0002                     __pidataBANK0:	
   212                           
   213                           ;initializer for LCD_SetCursor@F2883
   214  0002  3400               	retlw	0
   215  0003  3440               	retlw	64
   216  000B                     _INTCONbits	set	11
   217  000C                     _PORTA	set	12
   218  000D                     _PORTB	set	13
   219  0018                     _T1CON	set	24
   220  0018                     _T1CONbits	set	24
   221  0017                     _TMR1H	set	23
   222  0016                     _TMR1L	set	22
   223  0093                     _BCL1IF	set	147
   224  0060                     _RA0	set	96
   225  0061                     _RA1	set	97
   226  008D                     _RCIF	set	141
   227  008B                     _SSP1IF	set	139
   228  0088                     _TMR1IF	set	136
   229  008C                     _TXIF	set	140
   230  009B                     _ADRES	set	155
   231  009D                     _ADCON0bits	set	157
   232  009E                     _ADCON1bits	set	158
   233  0095                     _OPTION_REG	set	149
   234  0095                     _OPTION_REGbits	set	149
   235  0099                     _OSCCON	set	153
   236  0091                     _PIE1bits	set	145
   237  008C                     _TRISA	set	140
   238  008D                     _TRISB	set	141
   239  048C                     _TXIE	set	1164
   240  011D                     _APFCON0bits	set	285
   241  011E                     _APFCON1bits	set	286
   242  0117                     _FVRCON	set	279
   243  0868                     _LATB0	set	2152
   244  018C                     _ANSELA	set	396
   245  018D                     _ANSELB	set	397
   246  0199                     _RCREG	set	409
   247  019D                     _RCSTA	set	413
   248  019C                     _SPBRGH	set	412
   249  019B                     _SPBRGL	set	411
   250  019A                     _TXREG	set	410
   251  019E                     _TXSTA	set	414
   252  0CFB                     _BRG16	set	3323
   253  0CEF                     _SPEN	set	3311
   254  0212                     _SSP1ADD	set	530
   255  0211                     _SSP1BUF	set	529
   256  0215                     _SSP1CON1	set	533
   257  0216                     _SSP1CON2	set	534
   258  0216                     _SSP1CON2bits	set	534
   259  0214                     _SSP1STAT	set	532
   260  020D                     _WPUB	set	525
   261                           
   262                           	psect	stringtext
   263  0800                     __pstringtext:	
   264  0800                     __stringdata:	
   265  0800                     STR_2:	
   266  0800  3452               	retlw	82	;'R'
   267  0801  3465               	retlw	101	;'e'
   268  0802  3461               	retlw	97	;'a'
   269  0803  346C               	retlw	108	;'l'
   270  0804  3420               	retlw	32	;' '
   271  0805  3454               	retlw	84	;'T'
   272  0806  3469               	retlw	105	;'i'
   273  0807  346D               	retlw	109	;'m'
   274  0808  3465               	retlw	101	;'e'
   275  0809  3420               	retlw	32	;' '
   276  080A  3443               	retlw	67	;'C'
   277  080B  346C               	retlw	108	;'l'
   278  080C  346F               	retlw	111	;'o'
   279  080D  3463               	retlw	99	;'c'
   280  080E  346B               	retlw	107	;'k'
   281  080F  340A               	retlw	10
   282  0810  3400               	retlw	0
   283  0811                     STR_1:	
   284  0811  3420               	retlw	32	;' '
   285  0812  3420               	retlw	32	;' '
   286  0813  3400               	retlw	0
   287  0814                     __end_of__stringdata:	
   288                           
   289                           ; #config settings
   290  0000                     
   291                           	psect	cinit
   292  0042                     start_initialization:	
   293  0042                     __initialization:	
   294                           
   295                           ; Clear objects allocated to COMMON
   296  0042  01F8               	clrf	__pbssCOMMON& (0+127)
   297  0043  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   298  0044  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   299  0045  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
   300                           
   301                           ; Clear objects allocated to BANK0
   302  0046  303F               	movlw	low __pbssBANK0
   303  0047  0084               	movwf	4
   304  0048  3000               	movlw	high __pbssBANK0
   305  0049  0085               	movwf	5
   306  004A  300D               	movlw	13
   307  004B  3187  27F9  3180   	fcall	clear_ram0
   308                           
   309                           ; Clear objects allocated to BANK1
   310  004E  0021               	movlb	1	; select bank1
   311  004F  01E6               	clrf	__pbssBANK1& (0+127)
   312                           
   313                           ; Initialize objects allocated to BANK0
   314  0050  0020               	movlb	0	; select bank0
   315  0051  3180  2002  3180   	fcall	__pidataBANK0	;fetch initializer
   316  0054  00CC               	movwf	__pdataBANK0& (0+127)
   317  0055  3180  2003         	fcall	__pidataBANK0+1	;fetch initializer
   318  0057  00CD               	movwf	(__pdataBANK0+1)& (0+127)
   319  0058                     end_of_initialization:	
   320                           ;End of C runtime variable initialization code
   321                           
   322  0058                     __end_of__initialization:	
   323  0058  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
   324  0059  0020               	movlb	0
   325  005A  3180  285C         	ljmp	_main	;jump to C main() function
   326                           
   327                           	psect	bssCOMMON
   328  0078                     __pbssCOMMON:	
   329  0078                     _cnt_t1:	
   330  0078                     	ds	1
   331  0079                     _sw_RA1:	
   332  0079                     	ds	3
   333                           
   334                           	psect	bssBANK0
   335  003F                     __pbssBANK0:	
   336  003F                     _tx_buf:	
   337  003F                     	ds	4
   338  0043                     _sw_RA0:	
   339  0043                     	ds	3
   340  0046                     _DD:	
   341  0046                     	ds	1
   342  0047                     _MM:	
   343  0047                     	ds	1
   344  0048                     _YY:	
   345  0048                     	ds	1
   346  0049                     _hh:	
   347  0049                     	ds	1
   348  004A                     _mm:	
   349  004A                     	ds	1
   350  004B                     _ss:	
   351  004B                     	ds	1
   352                           
   353                           	psect	dataBANK0
   354  004C                     __pdataBANK0:	
   355  004C                     LCD_SetCursor@F2883:	
   356  004C                     	ds	2
   357                           
   358                           	psect	bssBANK1
   359  00E6                     __pbssBANK1:	
   360  00E6                     _EE:	
   361  00E6                     	ds	1
   362                           
   363                           	psect	clrtext
   364  07F9                     clear_ram0:	
   365                           ;	Called with FSR0 containing the base address, and
   366                           ;	WREG with the size to clear
   367                           
   368  07F9  0064               	clrwdt	;clear the watchdog before getting into this loop
   369  07FA                     clrloop0:	
   370  07FA  0180               	clrf	0	;clear RAM location pointed to by FSR
   371  07FB  3101               	addfsr 0,1
   372  07FC  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   373  07FD  2FFA               	goto	clrloop0	;have we reached the end yet?
   374  07FE  3400               	retlw	0	;all done for this memory range, return
   375                           
   376                           	psect	cstackBANK1
   377  00A0                     __pcstackBANK1:	
   378  00A0                     main@buf:	
   379                           
   380                           ; 70 bytes @ 0x0
   381  00A0                     	ds	70
   382                           
   383                           	psect	cstackCOMMON
   384  0070                     __pcstackCOMMON:	
   385  0070                     ?_display:	
   386  0070                     ?_button_timer_interrupt:	
   387                           ; 0 bytes @ 0x0
   388                           
   389  0070                     ??_ringbuf_pop:	
   390                           ; 0 bytes @ 0x0
   391                           
   392  0070                     ??_ringbuf_num:	
   393                           ; 0 bytes @ 0x0
   394                           
   395  0070                     ?_UART_init:	
   396                           ; 0 bytes @ 0x0
   397                           
   398  0070                     ?_tx_send:	
   399                           ; 0 bytes @ 0x0
   400                           
   401  0070                     ?_interrupt_TXIF:	
   402                           ; 0 bytes @ 0x0
   403                           
   404  0070                     ?_I2C_IdleCheck:	
   405                           ; 0 bytes @ 0x0
   406                           
   407  0070                     ?_I2C_init:	
   408                           ; 0 bytes @ 0x0
   409                           
   410  0070                     ?_I2C_Stop:	
   411                           ; 0 bytes @ 0x0
   412                           
   413  0070                     ?_LCD_Command:	
   414                           ; 0 bytes @ 0x0
   415                           
   416  0070                     ?_LCD_Clear:	
   417                           ; 0 bytes @ 0x0
   418                           
   419  0070                     ?_LCD_Putc:	
   420                           ; 0 bytes @ 0x0
   421                           
   422  0070                     ?_LCD_init:	
   423                           ; 0 bytes @ 0x0
   424                           
   425  0070                     ?_isr:	
   426                           ; 0 bytes @ 0x0
   427                           
   428  0070                     ?_main:	
   429                           ; 0 bytes @ 0x0
   430                           
   431  0070                     ?i1_ringbuf_push:	
   432                           ; 0 bytes @ 0x0
   433                           
   434  0070                     ?i1_tx_send:	
   435                           ; 0 bytes @ 0x0
   436                           
   437  0070                     ?_ringbuf_pop:	
   438                           ; 0 bytes @ 0x0
   439                           
   440  0070                     ?_ringbuf_num:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ?_I2C_Send:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ?_I2C_Receive:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     ?_RTC_Read:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     button_timer_interrupt@sw_value:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     i1ringbuf_push@asciicode:	
   456                           ; 1 bytes @ 0x0
   457                           
   458                           
   459                           ; 1 bytes @ 0x0
   460  0070                     	ds	1
   461  0071                     ??_button_timer_interrupt:	
   462  0071                     ??i1_ringbuf_push:	
   463                           ; 0 bytes @ 0x1
   464                           
   465  0071                     ringbuf_num@rb:	
   466                           ; 0 bytes @ 0x1
   467                           
   468                           
   469                           ; 1 bytes @ 0x1
   470  0071                     	ds	1
   471  0072                     ringbuf_pop@ret:	
   472                           
   473                           ; 1 bytes @ 0x2
   474  0072                     	ds	1
   475  0073                     button_timer_interrupt@bt:	
   476  0073                     ringbuf_pop@rb:	
   477                           ; 1 bytes @ 0x3
   478                           
   479  0073                     i1ringbuf_push@rb:	
   480                           ; 1 bytes @ 0x3
   481                           
   482                           
   483                           ; 1 bytes @ 0x3
   484  0073                     	ds	1
   485  0074                     ??_interrupt_TXIF:	
   486  0074                     ??i1_tx_send:	
   487                           ; 0 bytes @ 0x4
   488                           
   489                           
   490                           ; 0 bytes @ 0x4
   491  0074                     	ds	1
   492  0075                     i1tx_send@asciicode:	
   493                           
   494                           ; 1 bytes @ 0x5
   495  0075                     	ds	1
   496  0076                     ??_isr:	
   497                           
   498                           ; 0 bytes @ 0x6
   499  0076                     	ds	2
   500                           
   501                           	psect	cstackBANK0
   502  0020                     __pcstackBANK0:	
   503  0020                     ?_ringbuf_init:	
   504  0020                     ?_ringbuf_push:	
   505                           ; 0 bytes @ 0x0
   506                           
   507  0020                     ??_UART_init:	
   508                           ; 0 bytes @ 0x0
   509                           
   510  0020                     ??_I2C_IdleCheck:	
   511                           ; 0 bytes @ 0x0
   512                           
   513  0020                     ??_I2C_init:	
   514                           ; 0 bytes @ 0x0
   515                           
   516  0020                     ?_month_length:	
   517                           ; 0 bytes @ 0x0
   518                           
   519  0020                     ?___awdiv:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  0020                     ?___awmod:	
   523                           ; 2 bytes @ 0x0
   524                           
   525  0020                     ringbuf_init@internal_buf:	
   526                           ; 2 bytes @ 0x0
   527                           
   528  0020                     ringbuf_push@asciicode:	
   529                           ; 1 bytes @ 0x0
   530                           
   531  0020                     UART_init@device:	
   532                           ; 1 bytes @ 0x0
   533                           
   534  0020                     month_length@month:	
   535                           ; 1 bytes @ 0x0
   536                           
   537  0020                     ___awdiv@divisor:	
   538                           ; 1 bytes @ 0x0
   539                           
   540  0020                     ___awmod@divisor:	
   541                           ; 2 bytes @ 0x0
   542                           
   543                           
   544                           ; 2 bytes @ 0x0
   545  0020                     	ds	1
   546  0021                     ??_ringbuf_push:	
   547  0021                     ??_month_length:	
   548                           ; 0 bytes @ 0x1
   549                           
   550  0021                     ringbuf_init@bufsize:	
   551                           ; 0 bytes @ 0x1
   552                           
   553  0021                     I2C_IdleCheck@mask:	
   554                           ; 1 bytes @ 0x1
   555                           
   556  0021                     month_length@year:	
   557                           ; 1 bytes @ 0x1
   558                           
   559                           
   560                           ; 1 bytes @ 0x1
   561  0021                     	ds	1
   562  0022                     ??_ringbuf_init:	
   563  0022                     ??_I2C_Stop:	
   564                           ; 0 bytes @ 0x2
   565                           
   566  0022                     ??_I2C_Send:	
   567                           ; 0 bytes @ 0x2
   568                           
   569  0022                     ??_I2C_Receive:	
   570                           ; 0 bytes @ 0x2
   571                           
   572  0022                     ?_I2C_Start:	
   573                           ; 0 bytes @ 0x2
   574                           
   575  0022                     ?_I2C_rStart:	
   576                           ; 1 bytes @ 0x2
   577                           
   578  0022                     I2C_Start@rw:	
   579                           ; 1 bytes @ 0x2
   580                           
   581  0022                     I2C_Send@data:	
   582                           ; 1 bytes @ 0x2
   583                           
   584  0022                     I2C_rStart@adrs:	
   585                           ; 1 bytes @ 0x2
   586                           
   587  0022                     ___awdiv@dividend:	
   588                           ; 2 bytes @ 0x2
   589                           
   590  0022                     ___awmod@dividend:	
   591                           ; 2 bytes @ 0x2
   592                           
   593                           
   594                           ; 2 bytes @ 0x2
   595  0022                     	ds	1
   596  0023                     ??_I2C_Start:	
   597  0023                     ringbuf_init@rb:	
   598                           ; 0 bytes @ 0x3
   599                           
   600  0023                     ringbuf_push@rb:	
   601                           ; 1 bytes @ 0x3
   602                           
   603  0023                     I2C_Start@adrs:	
   604                           ; 1 bytes @ 0x3
   605                           
   606  0023                     I2C_Receive@ack:	
   607                           ; 1 bytes @ 0x3
   608                           
   609                           
   610                           ; 1 bytes @ 0x3
   611  0023                     	ds	1
   612  0024                     ??_tx_send:	
   613  0024                     ?_tx_sends:	
   614                           ; 0 bytes @ 0x4
   615                           
   616  0024                     ??_LCD_Command:	
   617                           ; 0 bytes @ 0x4
   618                           
   619  0024                     ??_LCD_Putc:	
   620                           ; 0 bytes @ 0x4
   621                           
   622  0024                     ?_LCD_Puts:	
   623                           ; 0 bytes @ 0x4
   624                           
   625  0024                     ?_RTC_Write:	
   626                           ; 0 bytes @ 0x4
   627                           
   628  0024                     ??___awdiv:	
   629                           ; 0 bytes @ 0x4
   630                           
   631  0024                     ??___awmod:	
   632                           ; 0 bytes @ 0x4
   633                           
   634  0024                     I2C_Receive@data:	
   635                           ; 0 bytes @ 0x4
   636                           
   637  0024                     RTC_Write@data:	
   638                           ; 1 bytes @ 0x4
   639                           
   640  0024                     tx_sends@asciicode:	
   641                           ; 1 bytes @ 0x4
   642                           
   643  0024                     I2C_rStart@rw:	
   644                           ; 2 bytes @ 0x4
   645                           
   646  0024                     LCD_Puts@s:	
   647                           ; 2 bytes @ 0x4
   648                           
   649                           
   650                           ; 2 bytes @ 0x4
   651  0024                     	ds	1
   652  0025                     ??_RTC_Write:	
   653  0025                     tx_send@asciicode:	
   654                           ; 0 bytes @ 0x5
   655                           
   656  0025                     LCD_Command@c:	
   657                           ; 1 bytes @ 0x5
   658                           
   659  0025                     LCD_Putc@c:	
   660                           ; 1 bytes @ 0x5
   661                           
   662  0025                     ___awdiv@counter:	
   663                           ; 1 bytes @ 0x5
   664                           
   665  0025                     ___awmod@counter:	
   666                           ; 1 bytes @ 0x5
   667                           
   668                           
   669                           ; 1 bytes @ 0x5
   670  0025                     	ds	1
   671  0026                     ??_tx_sends:	
   672  0026                     ??_I2C_rStart:	
   673                           ; 0 bytes @ 0x6
   674                           
   675  0026                     ??_LCD_Puts:	
   676                           ; 0 bytes @ 0x6
   677                           
   678  0026                     ??_RTC_Read:	
   679                           ; 0 bytes @ 0x6
   680                           
   681  0026                     LCD_Command@ans:	
   682                           ; 0 bytes @ 0x6
   683                           
   684  0026                     LCD_Putc@ans:	
   685                           ; 1 bytes @ 0x6
   686                           
   687  0026                     RTC_Write@Reg:	
   688                           ; 1 bytes @ 0x6
   689                           
   690  0026                     ___awdiv@sign:	
   691                           ; 1 bytes @ 0x6
   692                           
   693  0026                     ___awmod@sign:	
   694                           ; 1 bytes @ 0x6
   695                           
   696                           
   697                           ; 1 bytes @ 0x6
   698  0026                     	ds	1
   699  0027                     ??_LCD_Clear:	
   700  0027                     ?_LCD_SetCursor:	
   701                           ; 0 bytes @ 0x7
   702                           
   703  0027                     LCD_SetCursor@row:	
   704                           ; 0 bytes @ 0x7
   705                           
   706  0027                     RTC_Write@ans:	
   707                           ; 1 bytes @ 0x7
   708                           
   709  0027                     RTC_Read@Reg:	
   710                           ; 1 bytes @ 0x7
   711                           
   712  0027                     ___awdiv@quotient:	
   713                           ; 1 bytes @ 0x7
   714                           
   715                           
   716                           ; 2 bytes @ 0x7
   717  0027                     	ds	1
   718  0028                     ??_LCD_SetCursor:	
   719  0028                     RTC_Read@data:	
   720                           ; 0 bytes @ 0x8
   721                           
   722  0028                     LCD_SetCursor@row_offsets:	
   723                           ; 1 bytes @ 0x8
   724                           
   725  0028                     LCD_Puts@ans:	
   726                           ; 2 bytes @ 0x8
   727                           
   728                           
   729                           ; 2 bytes @ 0x8
   730  0028                     	ds	1
   731  0029                     ??_LCD_init:	
   732  0029                     ?___bmul:	
   733                           ; 0 bytes @ 0x9
   734                           
   735  0029                     tx_sends@i:	
   736                           ; 1 bytes @ 0x9
   737                           
   738  0029                     RTC_Read@ans:	
   739                           ; 1 bytes @ 0x9
   740                           
   741  0029                     ___bmul@multiplicand:	
   742                           ; 1 bytes @ 0x9
   743                           
   744                           
   745                           ; 1 bytes @ 0x9
   746  0029                     	ds	1
   747  002A                     ??___bmul:	
   748  002A                     LCD_SetCursor@col:	
   749                           ; 0 bytes @ 0xA
   750                           
   751                           
   752                           ; 1 bytes @ 0xA
   753  002A                     	ds	1
   754  002B                     ??_display:	
   755  002B                     ___bmul@product:	
   756                           ; 0 bytes @ 0xB
   757                           
   758                           
   759                           ; 1 bytes @ 0xB
   760  002B                     	ds	1
   761  002C                     ___bmul@multiplier:	
   762                           
   763                           ; 1 bytes @ 0xC
   764  002C                     	ds	1
   765  002D                     ?_timeset:	
   766  002D                     timeset@min_num:	
   767                           ; 0 bytes @ 0xD
   768                           
   769                           
   770                           ; 1 bytes @ 0xD
   771  002D                     	ds	1
   772  002E                     timeset@max_num:	
   773                           
   774                           ; 1 bytes @ 0xE
   775  002E                     	ds	1
   776  002F                     timeset@Reg:	
   777                           
   778                           ; 1 bytes @ 0xF
   779  002F                     	ds	1
   780  0030                     timeset@column:	
   781                           
   782                           ; 1 bytes @ 0x10
   783  0030                     	ds	1
   784  0031                     timeset@row:	
   785                           
   786                           ; 1 bytes @ 0x11
   787  0031                     	ds	1
   788  0032                     ??_timeset:	
   789                           
   790                           ; 0 bytes @ 0x12
   791  0032                     	ds	6
   792  0038                     timeset@t:	
   793                           
   794                           ; 1 bytes @ 0x18
   795  0038                     	ds	1
   796  0039                     timeset@t_583:	
   797                           
   798                           ; 1 bytes @ 0x19
   799  0039                     	ds	1
   800  003A                     timeset@value:	
   801                           
   802                           ; 1 bytes @ 0x1A
   803  003A                     	ds	1
   804  003B                     ??_main:	
   805                           
   806                           ; 0 bytes @ 0x1B
   807  003B                     	ds	4
   808                           
   809                           	psect	maintext
   810  005C                     __pmaintext:	
   811 ;;
   812 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   813 ;;
   814 ;; *************** function _main *****************
   815 ;; Defined at:
   816 ;;		line 144 in file "PIC16F1827-I2C_LCD_RTC01.c"
   817 ;; Parameters:    Size  Location     Type
   818 ;;		None
   819 ;; Auto vars:     Size  Location     Type
   820 ;;  buf            70    0[BANK1 ] unsigned char [70]
   821 ;; Return value:  Size  Location     Type
   822 ;;		None               void
   823 ;; Registers used:
   824 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   825 ;; Tracked objects:
   826 ;;		On entry : 17F/0
   827 ;;		On exit  : 0/0
   828 ;;		Unchanged: 0/0
   829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   830 ;;      Params:         0       0       0       0       0       0
   831 ;;      Locals:         0       0      70       0       0       0
   832 ;;      Temps:          0       4       0       0       0       0
   833 ;;      Totals:         0       4      70       0       0       0
   834 ;;Total ram usage:       74 bytes
   835 ;; Hardware stack levels required when called:    9
   836 ;; This function calls:
   837 ;;		_I2C_init
   838 ;;		_LCD_init
   839 ;;		_RTC_Write
   840 ;;		_UART_init
   841 ;;		_display
   842 ;;		_month_length
   843 ;;		_ringbuf_init
   844 ;;		_timeset
   845 ;;		_tx_send
   846 ;;		_tx_sends
   847 ;; This function is called by:
   848 ;;		Startup code after reset
   849 ;; This function uses a non-reentrant model
   850 ;;
   851                           
   852                           
   853                           ;psect for function _main
   854  005C                     _main:	
   855                           
   856                           ;PIC16F1827-I2C_LCD_RTC01.c: 145: OSCCON = 0b11110000;
   857                           
   858                           ;incstack = 0
   859                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   860  005C  30F0               	movlw	240
   861  005D  0021               	movlb	1	; select bank1
   862  005E  0099               	movwf	25	;volatile
   863                           
   864                           ;PIC16F1827-I2C_LCD_RTC01.c: 146: OPTION_REG = 0b00000000;
   865  005F  0195               	clrf	21	;volatile
   866                           
   867                           ;PIC16F1827-I2C_LCD_RTC01.c: 147: ANSELA = 0b00000000;
   868  0060  0023               	movlb	3	; select bank3
   869  0061  018C               	clrf	12	;volatile
   870                           
   871                           ;PIC16F1827-I2C_LCD_RTC01.c: 148: ANSELB = 0b00000000;
   872  0062  018D               	clrf	13	;volatile
   873                           
   874                           ;PIC16F1827-I2C_LCD_RTC01.c: 149: TRISA = 0b00000011;
   875  0063  3003               	movlw	3
   876  0064  0021               	movlb	1	; select bank1
   877  0065  008C               	movwf	12	;volatile
   878                           
   879                           ;PIC16F1827-I2C_LCD_RTC01.c: 150: TRISB = 0b00010110;
   880  0066  3016               	movlw	22
   881  0067  008D               	movwf	13	;volatile
   882                           
   883                           ;PIC16F1827-I2C_LCD_RTC01.c: 151: WPUB = 0b00010010;
   884  0068  3012               	movlw	18
   885  0069  0024               	movlb	4	; select bank4
   886  006A  008D               	movwf	13	;volatile
   887                           
   888                           ;PIC16F1827-I2C_LCD_RTC01.c: 152: PORTA = 0b00000000;
   889  006B  0020               	movlb	0	; select bank0
   890  006C  018C               	clrf	12	;volatile
   891                           
   892                           ;PIC16F1827-I2C_LCD_RTC01.c: 153: PORTB = 0b00000000;
   893  006D  018D               	clrf	13	;volatile
   894                           
   895                           ;PIC16F1827-I2C_LCD_RTC01.c: 154: APFCON0bits.RXDTSEL = 1;
   896  006E  0022               	movlb	2	; select bank2
   897  006F  179D               	bsf	29,7	;volatile
   898                           
   899                           ;PIC16F1827-I2C_LCD_RTC01.c: 155: APFCON1bits.TXCKSEL = 1;
   900  0070  141E               	bsf	30,0	;volatile
   901                           
   902                           ;PIC16F1827-I2C_LCD_RTC01.c: 157: T1CON = 0x21;
   903  0071  3021               	movlw	33
   904  0072  0020               	movlb	0	; select bank0
   905  0073  0098               	movwf	24	;volatile
   906                           
   907                           ;PIC16F1827-I2C_LCD_RTC01.c: 158: TMR1H = 0x00;
   908  0074  0197               	clrf	23	;volatile
   909                           
   910                           ;PIC16F1827-I2C_LCD_RTC01.c: 159: TMR1L = 0x00;
   911  0075  0196               	clrf	22	;volatile
   912                           
   913                           ;PIC16F1827-I2C_LCD_RTC01.c: 160: PIE1bits.TMR1IE = 1;
   914  0076  0021               	movlb	1	; select bank1
   915  0077  1411               	bsf	17,0	;volatile
   916                           
   917                           ;PIC16F1827-I2C_LCD_RTC01.c: 162: I2C_init();
   918  0078  318F  276D  3180   	fcall	_I2C_init
   919                           
   920                           ;PIC16F1827-I2C_LCD_RTC01.c: 163: LCD_init();
   921  007B  3185  256B  3180   	fcall	_LCD_init
   922                           
   923                           ;PIC16F1827-I2C_LCD_RTC01.c: 164: UART_init(0);
   924  007E  3000               	movlw	0
   925  007F  318F  27B3  3180   	fcall	_UART_init
   926                           
   927                           ;PIC16F1827-I2C_LCD_RTC01.c: 166: INTCONbits.PEIE = 1;
   928  0082  170B               	bsf	11,6	;volatile
   929                           
   930                           ;PIC16F1827-I2C_LCD_RTC01.c: 167: INTCONbits.GIE = 1;
   931  0083  178B               	bsf	11,7	;volatile
   932                           
   933                           ;PIC16F1827-I2C_LCD_RTC01.c: 169: uint8_t buf[70];
   934                           ;PIC16F1827-I2C_LCD_RTC01.c: 170: ringbuf_init(&tx_buf, buf, sizeof (buf));
   935  0084  30A0               	movlw	main@buf& (0+255)
   936  0085  0020               	movlb	0	; select bank0
   937  0086  00BB               	movwf	??_main
   938  0087  083B               	movf	??_main,w
   939  0088  00A0               	movwf	ringbuf_init@internal_buf
   940  0089  3046               	movlw	70
   941  008A  00BC               	movwf	??_main+1
   942  008B  083C               	movf	??_main+1,w
   943  008C  00A1               	movwf	ringbuf_init@bufsize
   944  008D  303F               	movlw	_tx_buf& (0+255)
   945  008E  3187  2792  3180   	fcall	_ringbuf_init
   946                           
   947                           ;PIC16F1827-I2C_LCD_RTC01.c: 172: RTC_Write(0x07, 0x00);
   948  0091  0020               	movlb	0	; select bank0
   949  0092  01A4               	clrf	RTC_Write@data
   950  0093  3007               	movlw	7
   951  0094  3187  2735  3180   	fcall	_RTC_Write
   952  0097                     l2026:	
   953                           ;PIC16F1827-I2C_LCD_RTC01.c: 174: while (1) {
   954                           
   955                           
   956                           ;PIC16F1827-I2C_LCD_RTC01.c: 175: display();
   957  0097  3183  2319  3180   	fcall	_display
   958                           
   959                           ;PIC16F1827-I2C_LCD_RTC01.c: 176: if (sw_RA1.flag.press) {
   960  009A  1C7B               	btfss	_sw_RA1+2,0
   961  009B  294C               	goto	l2034
   962                           
   963                           ;PIC16F1827-I2C_LCD_RTC01.c: 177: sw_RA1.flag.press=0;
   964  009C  107B               	bcf	_sw_RA1+2,0
   965                           
   966                           ;PIC16F1827-I2C_LCD_RTC01.c: 178: tx_send('2');
   967  009D  3032               	movlw	50
   968  009E  318F  2778  3180   	fcall	_tx_send
   969                           
   970                           ;PIC16F1827-I2C_LCD_RTC01.c: 179: tx_send('0');
   971  00A1  3030               	movlw	48
   972  00A2  318F  2778  3180   	fcall	_tx_send
   973                           
   974                           ;PIC16F1827-I2C_LCD_RTC01.c: 180: tx_send(((YY & 0xF0) >> 4) + '0');
   975  00A5  0020               	movlb	0	; select bank0
   976  00A6  0848               	movf	_YY,w
   977  00A7  00BB               	movwf	??_main
   978  00A8  3004               	movlw	4
   979  00A9                     u1545:	
   980  00A9  36BB               	lsrf	??_main,f
   981  00AA  0B89               	decfsz	9,f
   982  00AB  28A9               	goto	u1545
   983  00AC  083B               	movf	??_main,w
   984  00AD  390F               	andlw	15
   985  00AE  3E30               	addlw	48
   986  00AF  318F  2778  3180   	fcall	_tx_send
   987                           
   988                           ;PIC16F1827-I2C_LCD_RTC01.c: 181: tx_send((YY & 0x0F) + '0');
   989  00B2  0020               	movlb	0	; select bank0
   990  00B3  0848               	movf	_YY,w
   991  00B4  390F               	andlw	15
   992  00B5  3E30               	addlw	48
   993  00B6  318F  2778  3180   	fcall	_tx_send
   994                           
   995                           ;PIC16F1827-I2C_LCD_RTC01.c: 182: tx_send('/');
   996  00B9  302F               	movlw	47
   997  00BA  318F  2778  3180   	fcall	_tx_send
   998                           
   999                           ;PIC16F1827-I2C_LCD_RTC01.c: 183: tx_send(((MM & 0xF0) >> 4) + '0');
  1000  00BD  0020               	movlb	0	; select bank0
  1001  00BE  0847               	movf	_MM,w
  1002  00BF  00BB               	movwf	??_main
  1003  00C0  3004               	movlw	4
  1004  00C1                     u1555:	
  1005  00C1  36BB               	lsrf	??_main,f
  1006  00C2  0B89               	decfsz	9,f
  1007  00C3  28C1               	goto	u1555
  1008  00C4  083B               	movf	??_main,w
  1009  00C5  390F               	andlw	15
  1010  00C6  3E30               	addlw	48
  1011  00C7  318F  2778  3180   	fcall	_tx_send
  1012                           
  1013                           ;PIC16F1827-I2C_LCD_RTC01.c: 184: tx_send((MM & 0x0F) + '0');
  1014  00CA  0020               	movlb	0	; select bank0
  1015  00CB  0847               	movf	_MM,w
  1016  00CC  390F               	andlw	15
  1017  00CD  3E30               	addlw	48
  1018  00CE  318F  2778  3180   	fcall	_tx_send
  1019                           
  1020                           ;PIC16F1827-I2C_LCD_RTC01.c: 185: tx_send('/');
  1021  00D1  302F               	movlw	47
  1022  00D2  318F  2778  3180   	fcall	_tx_send
  1023                           
  1024                           ;PIC16F1827-I2C_LCD_RTC01.c: 186: tx_send(((DD & 0xF0) >> 4) + '0');
  1025  00D5  0020               	movlb	0	; select bank0
  1026  00D6  0846               	movf	_DD,w
  1027  00D7  00BB               	movwf	??_main
  1028  00D8  3004               	movlw	4
  1029  00D9                     u1565:	
  1030  00D9  36BB               	lsrf	??_main,f
  1031  00DA  0B89               	decfsz	9,f
  1032  00DB  28D9               	goto	u1565
  1033  00DC  083B               	movf	??_main,w
  1034  00DD  390F               	andlw	15
  1035  00DE  3E30               	addlw	48
  1036  00DF  318F  2778  3180   	fcall	_tx_send
  1037                           
  1038                           ;PIC16F1827-I2C_LCD_RTC01.c: 187: tx_send((DD & 0x0F) + '0');
  1039  00E2  0020               	movlb	0	; select bank0
  1040  00E3  0846               	movf	_DD,w
  1041  00E4  390F               	andlw	15
  1042  00E5  3E30               	addlw	48
  1043  00E6  318F  2778  3180   	fcall	_tx_send
  1044                           
  1045                           ;PIC16F1827-I2C_LCD_RTC01.c: 188: tx_send('(');
  1046  00E9  3028               	movlw	40
  1047  00EA  318F  2778  3180   	fcall	_tx_send
  1048                           
  1049                           ;PIC16F1827-I2C_LCD_RTC01.c: 189: tx_send((EE & 0x0F) + '0');
  1050  00ED  0021               	movlb	1	; select bank1
  1051  00EE  0866               	movf	_EE^(0+128),w
  1052  00EF  390F               	andlw	15
  1053  00F0  3E30               	addlw	48
  1054  00F1  318F  2778  3180   	fcall	_tx_send
  1055                           
  1056                           ;PIC16F1827-I2C_LCD_RTC01.c: 190: tx_send(')');
  1057  00F4  3029               	movlw	41
  1058  00F5  318F  2778  3180   	fcall	_tx_send
  1059                           
  1060                           ;PIC16F1827-I2C_LCD_RTC01.c: 191: tx_send(((hh & 0xF0) >> 4) + '0');
  1061  00F8  0020               	movlb	0	; select bank0
  1062  00F9  0849               	movf	_hh,w
  1063  00FA  00BB               	movwf	??_main
  1064  00FB  3004               	movlw	4
  1065  00FC                     u1575:	
  1066  00FC  36BB               	lsrf	??_main,f
  1067  00FD  0B89               	decfsz	9,f
  1068  00FE  28FC               	goto	u1575
  1069  00FF  083B               	movf	??_main,w
  1070  0100  390F               	andlw	15
  1071  0101  3E30               	addlw	48
  1072  0102  318F  2778  3180   	fcall	_tx_send
  1073                           
  1074                           ;PIC16F1827-I2C_LCD_RTC01.c: 192: tx_send((hh & 0x0F) + '0');
  1075  0105  0020               	movlb	0	; select bank0
  1076  0106  0849               	movf	_hh,w
  1077  0107  390F               	andlw	15
  1078  0108  3E30               	addlw	48
  1079  0109  318F  2778  3180   	fcall	_tx_send
  1080                           
  1081                           ;PIC16F1827-I2C_LCD_RTC01.c: 193: tx_send(':');
  1082  010C  303A               	movlw	58
  1083  010D  318F  2778  3180   	fcall	_tx_send
  1084                           
  1085                           ;PIC16F1827-I2C_LCD_RTC01.c: 194: tx_send(((mm & 0xF0) >> 4) + '0');
  1086  0110  0020               	movlb	0	; select bank0
  1087  0111  084A               	movf	_mm,w
  1088  0112  00BB               	movwf	??_main
  1089  0113  3004               	movlw	4
  1090  0114                     u1585:	
  1091  0114  36BB               	lsrf	??_main,f
  1092  0115  0B89               	decfsz	9,f
  1093  0116  2914               	goto	u1585
  1094  0117  083B               	movf	??_main,w
  1095  0118  390F               	andlw	15
  1096  0119  3E30               	addlw	48
  1097  011A  318F  2778  3180   	fcall	_tx_send
  1098                           
  1099                           ;PIC16F1827-I2C_LCD_RTC01.c: 195: tx_send((mm & 0x0F) + '0');
  1100  011D  0020               	movlb	0	; select bank0
  1101  011E  084A               	movf	_mm,w
  1102  011F  390F               	andlw	15
  1103  0120  3E30               	addlw	48
  1104  0121  318F  2778  3180   	fcall	_tx_send
  1105                           
  1106                           ;PIC16F1827-I2C_LCD_RTC01.c: 196: tx_send('-');
  1107  0124  302D               	movlw	45
  1108  0125  318F  2778  3180   	fcall	_tx_send
  1109                           
  1110                           ;PIC16F1827-I2C_LCD_RTC01.c: 197: tx_send(((ss & 0xF0) >> 4) + '0');
  1111  0128  0020               	movlb	0	; select bank0
  1112  0129  084B               	movf	_ss,w
  1113  012A  00BB               	movwf	??_main
  1114  012B  3004               	movlw	4
  1115  012C                     u1595:	
  1116  012C  36BB               	lsrf	??_main,f
  1117  012D  0B89               	decfsz	9,f
  1118  012E  292C               	goto	u1595
  1119  012F  083B               	movf	??_main,w
  1120  0130  390F               	andlw	15
  1121  0131  3E30               	addlw	48
  1122  0132  318F  2778  3180   	fcall	_tx_send
  1123                           
  1124                           ;PIC16F1827-I2C_LCD_RTC01.c: 198: tx_send((ss & 0x0F) + '0');
  1125  0135  0020               	movlb	0	; select bank0
  1126  0136  084B               	movf	_ss,w
  1127  0137  390F               	andlw	15
  1128  0138  3E30               	addlw	48
  1129  0139  318F  2778  3180   	fcall	_tx_send
  1130                           
  1131                           ;PIC16F1827-I2C_LCD_RTC01.c: 199: tx_send('.');
  1132  013C  302E               	movlw	46
  1133  013D  318F  2778  3180   	fcall	_tx_send
  1134                           
  1135                           ;PIC16F1827-I2C_LCD_RTC01.c: 200: tx_send('\n');
  1136  0140  300A               	movlw	10
  1137  0141  318F  2778  3180   	fcall	_tx_send
  1138                           
  1139                           ;PIC16F1827-I2C_LCD_RTC01.c: 201: tx_sends("Real Time Clock\n");
  1140  0144  3000               	movlw	low (STR_2| (0+32768))
  1141  0145  0020               	movlb	0	; select bank0
  1142  0146  00A4               	movwf	tx_sends@asciicode
  1143  0147  3088               	movlw	high (STR_2| (0+32768))
  1144  0148  00A5               	movwf	tx_sends@asciicode+1
  1145  0149  3186  261A  3180   	fcall	_tx_sends
  1146  014C                     l2034:	
  1147                           
  1148                           ;PIC16F1827-I2C_LCD_RTC01.c: 202: }
  1149                           ;PIC16F1827-I2C_LCD_RTC01.c: 203: if (sw_RA0.flag.long_holding_1) {
  1150  014C  0020               	movlb	0	; select bank0
  1151  014D  1EC5               	btfss	_sw_RA0+2,5
  1152  014E  2897               	goto	l2026
  1153                           
  1154                           ;PIC16F1827-I2C_LCD_RTC01.c: 204: sw_RA0.flag.long_holding_1 = 0;
  1155  014F  12C5               	bcf	_sw_RA0+2,5
  1156                           
  1157                           ;PIC16F1827-I2C_LCD_RTC01.c: 205: timeset(&YY, 0, 99, 0x06, 0, 0);
  1158  0150  01AD               	clrf	timeset@min_num
  1159  0151  3063               	movlw	99
  1160  0152  00BB               	movwf	??_main
  1161  0153  083B               	movf	??_main,w
  1162  0154  00AE               	movwf	timeset@max_num
  1163  0155  3006               	movlw	6
  1164  0156  00BC               	movwf	??_main+1
  1165  0157  083C               	movf	??_main+1,w
  1166  0158  00AF               	movwf	timeset@Reg
  1167  0159  01B0               	clrf	timeset@column
  1168  015A  01B1               	clrf	timeset@row
  1169  015B  3048               	movlw	_YY& (0+255)
  1170  015C  3181  21C4  3180   	fcall	_timeset
  1171                           
  1172                           ;PIC16F1827-I2C_LCD_RTC01.c: 206: timeset(&MM, 1, 12, 0x05, 3, 0);
  1173  015F  0020               	movlb	0	; select bank0
  1174  0160  01AD               	clrf	timeset@min_num
  1175  0161  0AAD               	incf	timeset@min_num,f
  1176  0162  300C               	movlw	12
  1177  0163  00BB               	movwf	??_main
  1178  0164  083B               	movf	??_main,w
  1179  0165  00AE               	movwf	timeset@max_num
  1180  0166  3005               	movlw	5
  1181  0167  00BC               	movwf	??_main+1
  1182  0168  083C               	movf	??_main+1,w
  1183  0169  00AF               	movwf	timeset@Reg
  1184  016A  3003               	movlw	3
  1185  016B  00BD               	movwf	??_main+2
  1186  016C  083D               	movf	??_main+2,w
  1187  016D  00B0               	movwf	timeset@column
  1188  016E  01B1               	clrf	timeset@row
  1189  016F  3047               	movlw	_MM& (0+255)
  1190  0170  3181  21C4  3180   	fcall	_timeset
  1191                           
  1192                           ;PIC16F1827-I2C_LCD_RTC01.c: 207: timeset(&DD, 1, month_length(YY, MM), 0x04, 6, 0);
  1193  0173  0020               	movlb	0	; select bank0
  1194  0174  01AD               	clrf	timeset@min_num
  1195  0175  0AAD               	incf	timeset@min_num,f
  1196  0176  0847               	movf	_MM,w
  1197  0177  00BB               	movwf	??_main
  1198  0178  083B               	movf	??_main,w
  1199  0179  00A0               	movwf	month_length@month
  1200  017A  0848               	movf	_YY,w
  1201  017B  3187  2775  3180   	fcall	_month_length
  1202  017E  0020               	movlb	0	; select bank0
  1203  017F  00BC               	movwf	??_main+1
  1204  0180  083C               	movf	??_main+1,w
  1205  0181  00AE               	movwf	timeset@max_num
  1206  0182  3004               	movlw	4
  1207  0183  00BD               	movwf	??_main+2
  1208  0184  083D               	movf	??_main+2,w
  1209  0185  00AF               	movwf	timeset@Reg
  1210  0186  3006               	movlw	6
  1211  0187  00BE               	movwf	??_main+3
  1212  0188  083E               	movf	??_main+3,w
  1213  0189  00B0               	movwf	timeset@column
  1214  018A  01B1               	clrf	timeset@row
  1215  018B  3046               	movlw	_DD& (0+255)
  1216  018C  3181  21C4  3180   	fcall	_timeset
  1217                           
  1218                           ;PIC16F1827-I2C_LCD_RTC01.c: 208: timeset(&hh, 0, 23, 0x02, 0, 1);
  1219  018F  0020               	movlb	0	; select bank0
  1220  0190  01AD               	clrf	timeset@min_num
  1221  0191  3017               	movlw	23
  1222  0192  00BB               	movwf	??_main
  1223  0193  083B               	movf	??_main,w
  1224  0194  00AE               	movwf	timeset@max_num
  1225  0195  3002               	movlw	2
  1226  0196  00BC               	movwf	??_main+1
  1227  0197  083C               	movf	??_main+1,w
  1228  0198  00AF               	movwf	timeset@Reg
  1229  0199  01B0               	clrf	timeset@column
  1230  019A  01B1               	clrf	timeset@row
  1231  019B  0AB1               	incf	timeset@row,f
  1232  019C  3049               	movlw	_hh& (0+255)
  1233  019D  3181  21C4  3180   	fcall	_timeset
  1234                           
  1235                           ;PIC16F1827-I2C_LCD_RTC01.c: 209: timeset(&mm, 0, 59, 0x01, 3, 1);
  1236  01A0  0020               	movlb	0	; select bank0
  1237  01A1  01AD               	clrf	timeset@min_num
  1238  01A2  303B               	movlw	59
  1239  01A3  00BB               	movwf	??_main
  1240  01A4  083B               	movf	??_main,w
  1241  01A5  00AE               	movwf	timeset@max_num
  1242  01A6  01AF               	clrf	timeset@Reg
  1243  01A7  0AAF               	incf	timeset@Reg,f
  1244  01A8  3003               	movlw	3
  1245  01A9  00BC               	movwf	??_main+1
  1246  01AA  083C               	movf	??_main+1,w
  1247  01AB  00B0               	movwf	timeset@column
  1248  01AC  01B1               	clrf	timeset@row
  1249  01AD  0AB1               	incf	timeset@row,f
  1250  01AE  304A               	movlw	_mm& (0+255)
  1251  01AF  3181  21C4  3180   	fcall	_timeset
  1252                           
  1253                           ;PIC16F1827-I2C_LCD_RTC01.c: 210: timeset(&ss, 0, 59, 0x00, 6, 1);
  1254  01B2  0020               	movlb	0	; select bank0
  1255  01B3  01AD               	clrf	timeset@min_num
  1256  01B4  303B               	movlw	59
  1257  01B5  00BB               	movwf	??_main
  1258  01B6  083B               	movf	??_main,w
  1259  01B7  00AE               	movwf	timeset@max_num
  1260  01B8  01AF               	clrf	timeset@Reg
  1261  01B9  3006               	movlw	6
  1262  01BA  00BC               	movwf	??_main+1
  1263  01BB  083C               	movf	??_main+1,w
  1264  01BC  00B0               	movwf	timeset@column
  1265  01BD  01B1               	clrf	timeset@row
  1266  01BE  0AB1               	incf	timeset@row,f
  1267  01BF  304B               	movlw	_ss& (0+255)
  1268  01C0  3181  21C4  3180   	fcall	_timeset
  1269  01C3  2897               	goto	l2026
  1270  01C4                     __end_of_main:	
  1271                           
  1272                           	psect	text1
  1273  061A                     __ptext1:	
  1274 ;; *************** function _tx_sends *****************
  1275 ;; Defined at:
  1276 ;;		line 163 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  1277 ;; Parameters:    Size  Location     Type
  1278 ;;  asciicode       2    4[BANK0 ] PTR unsigned char 
  1279 ;;		 -> STR_2(17), 
  1280 ;; Auto vars:     Size  Location     Type
  1281 ;;  i               1    9[BANK0 ] unsigned char 
  1282 ;; Return value:  Size  Location     Type
  1283 ;;		None               void
  1284 ;; Registers used:
  1285 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1286 ;; Tracked objects:
  1287 ;;		On entry : 0/0
  1288 ;;		On exit  : 0/0
  1289 ;;		Unchanged: 0/0
  1290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1291 ;;      Params:         0       2       0       0       0       0
  1292 ;;      Locals:         0       1       0       0       0       0
  1293 ;;      Temps:          0       3       0       0       0       0
  1294 ;;      Totals:         0       6       0       0       0       0
  1295 ;;Total ram usage:        6 bytes
  1296 ;; Hardware stack levels used:    1
  1297 ;; Hardware stack levels required when called:    4
  1298 ;; This function calls:
  1299 ;;		_ringbuf_push
  1300 ;; This function is called by:
  1301 ;;		_main
  1302 ;; This function uses a non-reentrant model
  1303 ;;
  1304                           
  1305                           
  1306                           ;psect for function _tx_sends
  1307  061A                     _tx_sends:	
  1308                           
  1309                           ;My_header_16F.h: 164: uint8_t i;
  1310                           ;My_header_16F.h: 165: for (i = 0; asciicode[i]; i++) {
  1311                           
  1312                           ;incstack = 0
  1313                           ; Regs used in _tx_sends: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1314  061A  0020               	movlb	0	; select bank0
  1315  061B  01A9               	clrf	tx_sends@i
  1316  061C                     l1794:	
  1317  061C  0825               	movf	tx_sends@asciicode+1,w
  1318  061D  00A7               	movwf	??_tx_sends+1
  1319  061E  0824               	movf	tx_sends@asciicode,w
  1320  061F  00A6               	movwf	??_tx_sends
  1321  0620  0829               	movf	tx_sends@i,w
  1322  0621  0726               	addwf	??_tx_sends,w
  1323  0622  0084               	movwf	4
  1324  0623  0827               	movf	??_tx_sends+1,w
  1325  0624  1803               	skipnc
  1326  0625  0A27               	incf	??_tx_sends+1,w
  1327  0626  0085               	movwf	5
  1328  0627  0800               	movf	0,w	;code access
  1329  0628  3800               	iorlw	0
  1330  0629  1903               	btfsc	3,2
  1331  062A  2E44               	goto	l159
  1332                           
  1333                           ;My_header_16F.h: 166: ringbuf_push(&tx_buf, asciicode[i]);
  1334  062B  0825               	movf	tx_sends@asciicode+1,w
  1335  062C  00A7               	movwf	??_tx_sends+1
  1336  062D  0824               	movf	tx_sends@asciicode,w
  1337  062E  00A6               	movwf	??_tx_sends
  1338  062F  0829               	movf	tx_sends@i,w
  1339  0630  0726               	addwf	??_tx_sends,w
  1340  0631  0084               	movwf	4
  1341  0632  0827               	movf	??_tx_sends+1,w
  1342  0633  1803               	skipnc
  1343  0634  0A27               	incf	??_tx_sends+1,w
  1344  0635  0085               	movwf	5
  1345  0636  0800               	movf	0,w	;code access
  1346  0637  00A8               	movwf	??_tx_sends+2
  1347  0638  0828               	movf	??_tx_sends+2,w
  1348  0639  00A0               	movwf	ringbuf_push@asciicode
  1349  063A  303F               	movlw	_tx_buf& (0+255)
  1350  063B  3186  2647  3186   	fcall	_ringbuf_push
  1351  063E  3001               	movlw	1
  1352  063F  0020               	movlb	0	; select bank0
  1353  0640  00A6               	movwf	??_tx_sends
  1354  0641  0826               	movf	??_tx_sends,w
  1355  0642  07A9               	addwf	tx_sends@i,f
  1356  0643  2E1C               	goto	l1794
  1357  0644                     l159:	
  1358                           
  1359                           ;My_header_16F.h: 167: }
  1360                           ;My_header_16F.h: 168: PIE1bits.TXIE = 1;
  1361  0644  0021               	movlb	1	; select bank1
  1362  0645  1611               	bsf	17,4	;volatile
  1363  0646  0008               	return
  1364  0647                     __end_of_tx_sends:	
  1365                           
  1366                           	psect	text2
  1367  0F78                     __ptext2:	
  1368 ;; *************** function _tx_send *****************
  1369 ;; Defined at:
  1370 ;;		line 158 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;  asciicode       1    wreg     unsigned char 
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;  asciicode       1    5[BANK0 ] unsigned char 
  1375 ;; Return value:  Size  Location     Type
  1376 ;;		None               void
  1377 ;; Registers used:
  1378 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1379 ;; Tracked objects:
  1380 ;;		On entry : 0/0
  1381 ;;		On exit  : 0/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1384 ;;      Params:         0       0       0       0       0       0
  1385 ;;      Locals:         0       1       0       0       0       0
  1386 ;;      Temps:          0       1       0       0       0       0
  1387 ;;      Totals:         0       2       0       0       0       0
  1388 ;;Total ram usage:        2 bytes
  1389 ;; Hardware stack levels used:    1
  1390 ;; Hardware stack levels required when called:    4
  1391 ;; This function calls:
  1392 ;;		_ringbuf_push
  1393 ;; This function is called by:
  1394 ;;		_main
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398                           
  1399                           ;psect for function _tx_send
  1400  0F78                     _tx_send:	
  1401                           
  1402                           ;incstack = 0
  1403                           ; Regs used in _tx_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1404                           ;tx_send@asciicode stored from wreg
  1405  0F78  0020               	movlb	0	; select bank0
  1406  0F79  00A5               	movwf	tx_send@asciicode
  1407                           
  1408                           ;My_header_16F.h: 159: ringbuf_push(&tx_buf, asciicode);
  1409  0F7A  0825               	movf	tx_send@asciicode,w
  1410  0F7B  00A4               	movwf	??_tx_send
  1411  0F7C  0824               	movf	??_tx_send,w
  1412  0F7D  00A0               	movwf	ringbuf_push@asciicode
  1413  0F7E  303F               	movlw	_tx_buf& (0+255)
  1414  0F7F  3186  2647         	fcall	_ringbuf_push
  1415                           
  1416                           ;My_header_16F.h: 160: PIE1bits.TXIE = 1;
  1417  0F81  0021               	movlb	1	; select bank1
  1418  0F82  1611               	bsf	17,4	;volatile
  1419  0F83  0008               	return
  1420  0F84                     __end_of_tx_send:	
  1421                           
  1422                           	psect	text3
  1423  0647                     __ptext3:	
  1424 ;; *************** function _ringbuf_push *****************
  1425 ;; Defined at:
  1426 ;;		line 118 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;  rb              1    wreg     PTR struct ringbuf
  1429 ;;		 -> tx_buf(4), 
  1430 ;;  asciicode       1    0[BANK0 ] unsigned char 
  1431 ;; Auto vars:     Size  Location     Type
  1432 ;;  rb              1    3[BANK0 ] PTR struct ringbuf
  1433 ;;		 -> tx_buf(4), 
  1434 ;; Return value:  Size  Location     Type
  1435 ;;		None               void
  1436 ;; Registers used:
  1437 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  1438 ;; Tracked objects:
  1439 ;;		On entry : 0/0
  1440 ;;		On exit  : 0/0
  1441 ;;		Unchanged: 0/0
  1442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1443 ;;      Params:         0       1       0       0       0       0
  1444 ;;      Locals:         0       1       0       0       0       0
  1445 ;;      Temps:          0       2       0       0       0       0
  1446 ;;      Totals:         0       4       0       0       0       0
  1447 ;;Total ram usage:        4 bytes
  1448 ;; Hardware stack levels used:    1
  1449 ;; Hardware stack levels required when called:    3
  1450 ;; This function calls:
  1451 ;;		Nothing
  1452 ;; This function is called by:
  1453 ;;		_tx_send
  1454 ;;		_tx_sends
  1455 ;; This function uses a non-reentrant model
  1456 ;;
  1457                           
  1458                           
  1459                           ;psect for function _ringbuf_push
  1460  0647                     _ringbuf_push:	
  1461                           
  1462                           ;incstack = 0
  1463                           ; Regs used in _ringbuf_push: [wreg-fsr1h+status,2+status,0]
  1464                           ;ringbuf_push@rb stored from wreg
  1465  0647  0020               	movlb	0	; select bank0
  1466  0648  00A3               	movwf	ringbuf_push@rb
  1467                           
  1468                           ;My_header_16F.h: 119: rb->buf[rb->head] = asciicode;
  1469  0649  0820               	movf	ringbuf_push@asciicode,w
  1470  064A  00A1               	movwf	??_ringbuf_push
  1471  064B  0823               	movf	ringbuf_push@rb,w
  1472  064C  0086               	movwf	6
  1473  064D  0187               	clrf	7
  1474  064E  0823               	movf	ringbuf_push@rb,w
  1475  064F  3E02               	addlw	2
  1476  0650  0084               	movwf	4
  1477  0651  0185               	clrf	5
  1478  0652  0800               	movf	0,w
  1479  0653  0701               	addwf	1,w
  1480  0654  00A2               	movwf	??_ringbuf_push+1
  1481  0655  0822               	movf	??_ringbuf_push+1,w
  1482  0656  0086               	movwf	6
  1483  0657  0187               	clrf	7
  1484  0658  0821               	movf	??_ringbuf_push,w
  1485  0659  0081               	movwf	1
  1486                           
  1487                           ;My_header_16F.h: 120: rb->head++;
  1488  065A  3001               	movlw	1
  1489  065B  00A1               	movwf	??_ringbuf_push
  1490  065C  0823               	movf	ringbuf_push@rb,w
  1491  065D  3E02               	addlw	2
  1492  065E  0086               	movwf	6
  1493  065F  0187               	clrf	7
  1494  0660  0821               	movf	??_ringbuf_push,w
  1495  0661  0781               	addwf	1,f
  1496                           
  1497                           ;My_header_16F.h: 121: if (rb->head >= rb->size) {
  1498  0662  0823               	movf	ringbuf_push@rb,w
  1499  0663  3E02               	addlw	2
  1500  0664  0086               	movwf	6
  1501  0665  0187               	clrf	7
  1502  0666  0A23               	incf	ringbuf_push@rb,w
  1503  0667  0084               	movwf	4
  1504  0668  0185               	clrf	5
  1505  0669  0800               	movf	0,w
  1506  066A  0201               	subwf	1,w
  1507  066B  1C03               	skipc
  1508  066C  0008               	return
  1509                           
  1510                           ;My_header_16F.h: 122: rb->head = 0;
  1511  066D  0823               	movf	ringbuf_push@rb,w
  1512  066E  3E02               	addlw	2
  1513  066F  0086               	movwf	6
  1514  0670  0187               	clrf	7
  1515  0671  0181               	clrf	1
  1516  0672  0008               	return
  1517  0673                     __end_of_ringbuf_push:	
  1518                           
  1519                           	psect	text4
  1520  01C4                     __ptext4:	
  1521 ;; *************** function _timeset *****************
  1522 ;; Defined at:
  1523 ;;		line 76 in file "PIC16F1827-I2C_LCD_RTC01.c"
  1524 ;; Parameters:    Size  Location     Type
  1525 ;;  value           1    wreg     PTR unsigned char 
  1526 ;;		 -> YY(1), MM(1), DD(1), hh(1), 
  1527 ;;		 -> mm(1), ss(1), 
  1528 ;;  min_num         1   13[BANK0 ] unsigned char 
  1529 ;;  max_num         1   14[BANK0 ] unsigned char 
  1530 ;;  Reg             1   15[BANK0 ] unsigned char 
  1531 ;;  column          1   16[BANK0 ] unsigned char 
  1532 ;;  row             1   17[BANK0 ] unsigned char 
  1533 ;; Auto vars:     Size  Location     Type
  1534 ;;  value           1   26[BANK0 ] PTR unsigned char 
  1535 ;;		 -> YY(1), MM(1), DD(1), hh(1), 
  1536 ;;		 -> mm(1), ss(1), 
  1537 ;;  t               1   25[BANK0 ] unsigned char 
  1538 ;;  t               1   24[BANK0 ] unsigned char 
  1539 ;; Return value:  Size  Location     Type
  1540 ;;		None               void
  1541 ;; Registers used:
  1542 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1543 ;; Tracked objects:
  1544 ;;		On entry : 0/0
  1545 ;;		On exit  : 0/0
  1546 ;;		Unchanged: 0/0
  1547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1548 ;;      Params:         0       5       0       0       0       0
  1549 ;;      Locals:         0       3       0       0       0       0
  1550 ;;      Temps:          0       6       0       0       0       0
  1551 ;;      Totals:         0      14       0       0       0       0
  1552 ;;Total ram usage:       14 bytes
  1553 ;; Hardware stack levels used:    1
  1554 ;; Hardware stack levels required when called:    8
  1555 ;; This function calls:
  1556 ;;		_LCD_Putc
  1557 ;;		_LCD_Puts
  1558 ;;		_LCD_SetCursor
  1559 ;;		_RTC_Read
  1560 ;;		_RTC_Write
  1561 ;;		___awdiv
  1562 ;;		___awmod
  1563 ;;		___bmul
  1564 ;;		_display
  1565 ;; This function is called by:
  1566 ;;		_main
  1567 ;; This function uses a non-reentrant model
  1568 ;;
  1569                           
  1570                           
  1571                           ;psect for function _timeset
  1572  01C4                     _timeset:	
  1573                           
  1574                           ;incstack = 0
  1575                           ; Regs used in _timeset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1576                           ;timeset@value stored from wreg
  1577  01C4  0020               	movlb	0	; select bank0
  1578  01C5  00BA               	movwf	timeset@value
  1579                           
  1580                           ;PIC16F1827-I2C_LCD_RTC01.c: 77: sw_RA0.flags = 0;
  1581  01C6  01C5               	clrf	_sw_RA0+2
  1582                           
  1583                           ;PIC16F1827-I2C_LCD_RTC01.c: 78: sw_RA1.flags = 0;
  1584  01C7  01FB               	clrf	_sw_RA1+2
  1585  01C8                     l1906:	
  1586                           ;PIC16F1827-I2C_LCD_RTC01.c: 79: while (!sw_RA0.flag.press) {
  1587                           
  1588  01C8  0020               	movlb	0	; select bank0
  1589  01C9  1845               	btfsc	_sw_RA0+2,0
  1590  01CA  2B17               	goto	l1908
  1591                           
  1592                           ;PIC16F1827-I2C_LCD_RTC01.c: 80: if (cnt_t1 % 16 >= 8) {
  1593  01CB  300F               	movlw	15
  1594  01CC  0578               	andwf	_cnt_t1,w
  1595  01CD  00B2               	movwf	??_timeset
  1596  01CE  3008               	movlw	8
  1597  01CF  0232               	subwf	??_timeset,w
  1598  01D0  1C03               	skipc
  1599  01D1  29E3               	goto	l1872
  1600                           
  1601                           ;PIC16F1827-I2C_LCD_RTC01.c: 81: LCD_SetCursor(column, row);
  1602  01D2  0831               	movf	timeset@row,w
  1603  01D3  00B2               	movwf	??_timeset
  1604  01D4  0832               	movf	??_timeset,w
  1605  01D5  00A7               	movwf	LCD_SetCursor@row
  1606  01D6  0830               	movf	timeset@column,w
  1607  01D7  318F  27D7  3181   	fcall	_LCD_SetCursor
  1608                           
  1609                           ;PIC16F1827-I2C_LCD_RTC01.c: 82: LCD_Puts("  ");
  1610  01DA  3011               	movlw	low (STR_1| (0+32768))
  1611  01DB  0020               	movlb	0	; select bank0
  1612  01DC  00A4               	movwf	LCD_Puts@s
  1613  01DD  3088               	movlw	high (STR_1| (0+32768))
  1614  01DE  00A5               	movwf	LCD_Puts@s+1
  1615  01DF  3185  25E6  3181   	fcall	_LCD_Puts
  1616                           
  1617                           ;PIC16F1827-I2C_LCD_RTC01.c: 83: } else {
  1618  01E2  2A1D               	goto	l1874
  1619  01E3                     l1872:	
  1620                           
  1621                           ;PIC16F1827-I2C_LCD_RTC01.c: 84: *value = RTC_Read(Reg);
  1622  01E3  0020               	movlb	0	; select bank0
  1623  01E4  082F               	movf	timeset@Reg,w
  1624  01E5  3185  25AE  3181   	fcall	_RTC_Read
  1625  01E8  0020               	movlb	0	; select bank0
  1626  01E9  00B2               	movwf	??_timeset
  1627  01EA  083A               	movf	timeset@value,w
  1628  01EB  0086               	movwf	6
  1629  01EC  0187               	clrf	7
  1630  01ED  0832               	movf	??_timeset,w
  1631  01EE  0081               	movwf	1
  1632                           
  1633                           ;PIC16F1827-I2C_LCD_RTC01.c: 85: display();
  1634  01EF  3183  2319  3181   	fcall	_display
  1635                           
  1636                           ;PIC16F1827-I2C_LCD_RTC01.c: 86: LCD_SetCursor(column, row);
  1637  01F2  0020               	movlb	0	; select bank0
  1638  01F3  0831               	movf	timeset@row,w
  1639  01F4  00B2               	movwf	??_timeset
  1640  01F5  0832               	movf	??_timeset,w
  1641  01F6  00A7               	movwf	LCD_SetCursor@row
  1642  01F7  0830               	movf	timeset@column,w
  1643  01F8  318F  27D7  3181   	fcall	_LCD_SetCursor
  1644                           
  1645                           ;PIC16F1827-I2C_LCD_RTC01.c: 87: LCD_Putc(*value / 16 + '0');
  1646  01FB  3010               	movlw	16
  1647  01FC  0020               	movlb	0	; select bank0
  1648  01FD  00A0               	movwf	___awdiv@divisor
  1649  01FE  3000               	movlw	0
  1650  01FF  00A1               	movwf	___awdiv@divisor+1
  1651  0200  083A               	movf	timeset@value,w
  1652  0201  0086               	movwf	6
  1653  0202  0187               	clrf	7
  1654  0203  0801               	movf	1,w
  1655  0204  00B2               	movwf	??_timeset
  1656  0205  01B3               	clrf	??_timeset+1
  1657  0206  0832               	movf	??_timeset,w
  1658  0207  00A2               	movwf	___awdiv@dividend
  1659  0208  0833               	movf	??_timeset+1,w
  1660  0209  00A3               	movwf	___awdiv@dividend+1
  1661  020A  3184  24CF  3181   	fcall	___awdiv
  1662  020D  0020               	movlb	0	; select bank0
  1663  020E  0820               	movf	?___awdiv,w
  1664  020F  3E30               	addlw	48
  1665  0210  3187  2715  3181   	fcall	_LCD_Putc
  1666                           
  1667                           ;PIC16F1827-I2C_LCD_RTC01.c: 88: LCD_Putc(*value % 16 + '0');
  1668  0213  0020               	movlb	0	; select bank0
  1669  0214  083A               	movf	timeset@value,w
  1670  0215  0086               	movwf	6
  1671  0216  0187               	clrf	7
  1672  0217  0801               	movf	1,w
  1673  0218  390F               	andlw	15
  1674  0219  3E30               	addlw	48
  1675  021A  3187  2715  3181   	fcall	_LCD_Putc
  1676  021D                     l1874:	
  1677                           
  1678                           ;PIC16F1827-I2C_LCD_RTC01.c: 89: }
  1679                           ;PIC16F1827-I2C_LCD_RTC01.c: 90: if (sw_RA1.flag.press) {
  1680  021D  1C7B               	btfss	_sw_RA1+2,0
  1681  021E  2A8A               	goto	l1890
  1682                           
  1683                           ;PIC16F1827-I2C_LCD_RTC01.c: 91: sw_RA1.flag.press = 0;
  1684  021F  107B               	bcf	_sw_RA1+2,0
  1685                           
  1686                           ;PIC16F1827-I2C_LCD_RTC01.c: 92: uint8_t t = *value % 16 + (*value / 16)*10;
  1687  0220  0020               	movlb	0	; select bank0
  1688  0221  083A               	movf	timeset@value,w
  1689  0222  0086               	movwf	6
  1690  0223  0187               	clrf	7
  1691  0224  300F               	movlw	15
  1692  0225  0501               	andwf	1,w
  1693  0226  00B2               	movwf	??_timeset
  1694  0227  300A               	movlw	10
  1695  0228  00B3               	movwf	??_timeset+1
  1696  0229  0833               	movf	??_timeset+1,w
  1697  022A  00A9               	movwf	___bmul@multiplicand
  1698  022B  083A               	movf	timeset@value,w
  1699  022C  0086               	movwf	6
  1700  022D  0187               	clrf	7
  1701  022E  0801               	movf	1,w
  1702  022F  00B4               	movwf	??_timeset+2
  1703  0230  01B5               	clrf	??_timeset+3
  1704  0231  0834               	movf	??_timeset+2,w
  1705  0232  00A2               	movwf	___awdiv@dividend
  1706  0233  0835               	movf	??_timeset+3,w
  1707  0234  00A3               	movwf	___awdiv@dividend+1
  1708  0235  3010               	movlw	16
  1709  0236  00A0               	movwf	___awdiv@divisor
  1710  0237  3000               	movlw	0
  1711  0238  00A1               	movwf	___awdiv@divisor+1
  1712  0239  3184  24CF  3181   	fcall	___awdiv
  1713  023C  0020               	movlb	0	; select bank0
  1714  023D  0820               	movf	?___awdiv,w
  1715  023E  318F  27C5  3181   	fcall	___bmul
  1716  0241  0020               	movlb	0	; select bank0
  1717  0242  0732               	addwf	??_timeset,w
  1718  0243  00B6               	movwf	??_timeset+4
  1719  0244  0836               	movf	??_timeset+4,w
  1720  0245  00B8               	movwf	timeset@t
  1721                           
  1722                           ;PIC16F1827-I2C_LCD_RTC01.c: 93: if (t >= max_num) {
  1723  0246  082E               	movf	timeset@max_num,w
  1724  0247  0238               	subwf	timeset@t,w
  1725  0248  1C03               	skipc
  1726  0249  2A4F               	goto	l1884
  1727                           
  1728                           ;PIC16F1827-I2C_LCD_RTC01.c: 94: t = min_num;
  1729  024A  082D               	movf	timeset@min_num,w
  1730  024B  00B2               	movwf	??_timeset
  1731  024C  0832               	movf	??_timeset,w
  1732  024D  00B8               	movwf	timeset@t
  1733                           
  1734                           ;PIC16F1827-I2C_LCD_RTC01.c: 95: } else {
  1735  024E  2A53               	goto	l1886
  1736  024F                     l1884:	
  1737                           
  1738                           ;PIC16F1827-I2C_LCD_RTC01.c: 96: t++;
  1739  024F  3001               	movlw	1
  1740  0250  00B2               	movwf	??_timeset
  1741  0251  0832               	movf	??_timeset,w
  1742  0252  07B8               	addwf	timeset@t,f
  1743  0253                     l1886:	
  1744                           
  1745                           ;PIC16F1827-I2C_LCD_RTC01.c: 97: }
  1746                           ;PIC16F1827-I2C_LCD_RTC01.c: 98: *value = t % 10 + (t / 10)* 16;
  1747  0253  300A               	movlw	10
  1748  0254  00A0               	movwf	___awdiv@divisor
  1749  0255  3000               	movlw	0
  1750  0256  00A1               	movwf	___awdiv@divisor+1
  1751  0257  0838               	movf	timeset@t,w
  1752  0258  00B2               	movwf	??_timeset
  1753  0259  01B3               	clrf	??_timeset+1
  1754  025A  0832               	movf	??_timeset,w
  1755  025B  00A2               	movwf	___awdiv@dividend
  1756  025C  0833               	movf	??_timeset+1,w
  1757  025D  00A3               	movwf	___awdiv@dividend+1
  1758  025E  3184  24CF  3181   	fcall	___awdiv
  1759  0261  0020               	movlb	0	; select bank0
  1760  0262  0820               	movf	?___awdiv,w
  1761  0263  00B4               	movwf	??_timeset+2
  1762  0264  3004               	movlw	4
  1763  0265                     u1385:	
  1764  0265  35B4               	lslf	??_timeset+2,f
  1765  0266  0B89               	decfsz	9,f
  1766  0267  2A65               	goto	u1385
  1767  0268  300A               	movlw	10
  1768  0269  00A0               	movwf	___awmod@divisor
  1769  026A  3000               	movlw	0
  1770  026B  00A1               	movwf	___awmod@divisor+1
  1771  026C  0838               	movf	timeset@t,w
  1772  026D  00B5               	movwf	??_timeset+3
  1773  026E  01B6               	clrf	??_timeset+4
  1774  026F  0835               	movf	??_timeset+3,w
  1775  0270  00A2               	movwf	___awmod@dividend
  1776  0271  0836               	movf	??_timeset+4,w
  1777  0272  00A3               	movwf	___awmod@dividend+1
  1778  0273  3185  2523  3181   	fcall	___awmod
  1779  0276  0020               	movlb	0	; select bank0
  1780  0277  0820               	movf	?___awmod,w
  1781  0278  0734               	addwf	??_timeset+2,w
  1782  0279  00B7               	movwf	??_timeset+5
  1783  027A  083A               	movf	timeset@value,w
  1784  027B  0086               	movwf	6
  1785  027C  0187               	clrf	7
  1786  027D  0837               	movf	??_timeset+5,w
  1787  027E  0081               	movwf	1
  1788                           
  1789                           ;PIC16F1827-I2C_LCD_RTC01.c: 99: RTC_Write(Reg, *value);
  1790  027F  083A               	movf	timeset@value,w
  1791  0280  0086               	movwf	6
  1792  0281  0187               	clrf	7
  1793  0282  0801               	movf	1,w
  1794  0283  00B2               	movwf	??_timeset
  1795  0284  0832               	movf	??_timeset,w
  1796  0285  00A4               	movwf	RTC_Write@data
  1797  0286  082F               	movf	timeset@Reg,w
  1798  0287  3187  2735  3181   	fcall	_RTC_Write
  1799  028A                     l1890:	
  1800                           
  1801                           ;PIC16F1827-I2C_LCD_RTC01.c: 100: }
  1802                           ;PIC16F1827-I2C_LCD_RTC01.c: 101: if (sw_RA1.flag.long_holding_1) {
  1803  028A  1EFB               	btfss	_sw_RA1+2,5
  1804  028B  29C8               	goto	l1906
  1805                           
  1806                           ;PIC16F1827-I2C_LCD_RTC01.c: 102: sw_RA1.flag.long_holding_1 = 0;
  1807  028C  12FB               	bcf	_sw_RA1+2,5
  1808                           
  1809                           ;PIC16F1827-I2C_LCD_RTC01.c: 103: uint8_t t = *value % 16 + (*value / 16)*10;
  1810  028D  0020               	movlb	0	; select bank0
  1811  028E  083A               	movf	timeset@value,w
  1812  028F  0086               	movwf	6
  1813  0290  0187               	clrf	7
  1814  0291  300F               	movlw	15
  1815  0292  0501               	andwf	1,w
  1816  0293  00B2               	movwf	??_timeset
  1817  0294  300A               	movlw	10
  1818  0295  00B3               	movwf	??_timeset+1
  1819  0296  0833               	movf	??_timeset+1,w
  1820  0297  00A9               	movwf	___bmul@multiplicand
  1821  0298  083A               	movf	timeset@value,w
  1822  0299  0086               	movwf	6
  1823  029A  0187               	clrf	7
  1824  029B  0801               	movf	1,w
  1825  029C  00B4               	movwf	??_timeset+2
  1826  029D  01B5               	clrf	??_timeset+3
  1827  029E  0834               	movf	??_timeset+2,w
  1828  029F  00A2               	movwf	___awdiv@dividend
  1829  02A0  0835               	movf	??_timeset+3,w
  1830  02A1  00A3               	movwf	___awdiv@dividend+1
  1831  02A2  3010               	movlw	16
  1832  02A3  00A0               	movwf	___awdiv@divisor
  1833  02A4  3000               	movlw	0
  1834  02A5  00A1               	movwf	___awdiv@divisor+1
  1835  02A6  3184  24CF  3181   	fcall	___awdiv
  1836  02A9  0020               	movlb	0	; select bank0
  1837  02AA  0820               	movf	?___awdiv,w
  1838  02AB  318F  27C5  3181   	fcall	___bmul
  1839  02AE  0020               	movlb	0	; select bank0
  1840  02AF  0732               	addwf	??_timeset,w
  1841  02B0  00B6               	movwf	??_timeset+4
  1842  02B1  0836               	movf	??_timeset+4,w
  1843  02B2  00B9               	movwf	timeset@t_583
  1844                           
  1845                           ;PIC16F1827-I2C_LCD_RTC01.c: 104: if (t + 9 >= max_num) {
  1846  02B3  0839               	movf	timeset@t_583,w
  1847  02B4  3E09               	addlw	9
  1848  02B5  00B2               	movwf	??_timeset
  1849  02B6  3000               	movlw	0
  1850  02B7  1803               	skipnc
  1851  02B8  3001               	movlw	1
  1852  02B9  00B3               	movwf	??_timeset+1
  1853  02BA  0833               	movf	??_timeset+1,w
  1854  02BB  3A80               	xorlw	128
  1855  02BC  00B4               	movwf	??_timeset+2
  1856  02BD  3080               	movlw	128
  1857  02BE  0234               	subwf	??_timeset+2,w
  1858  02BF  1D03               	skipz
  1859  02C0  2AC3               	goto	u1405
  1860  02C1  082E               	movf	timeset@max_num,w
  1861  02C2  0232               	subwf	??_timeset,w
  1862  02C3                     u1405:	
  1863  02C3  1C03               	skipc
  1864  02C4  2ADA               	goto	l1900
  1865                           
  1866                           ;PIC16F1827-I2C_LCD_RTC01.c: 105: t = t % 10;
  1867  02C5  300A               	movlw	10
  1868  02C6  0020               	movlb	0	; select bank0
  1869  02C7  00A0               	movwf	___awmod@divisor
  1870  02C8  3000               	movlw	0
  1871  02C9  00A1               	movwf	___awmod@divisor+1
  1872  02CA  0839               	movf	timeset@t_583,w
  1873  02CB  00B2               	movwf	??_timeset
  1874  02CC  01B3               	clrf	??_timeset+1
  1875  02CD  0832               	movf	??_timeset,w
  1876  02CE  00A2               	movwf	___awmod@dividend
  1877  02CF  0833               	movf	??_timeset+1,w
  1878  02D0  00A3               	movwf	___awmod@dividend+1
  1879  02D1  3185  2523  3181   	fcall	___awmod
  1880  02D4  0020               	movlb	0	; select bank0
  1881  02D5  0820               	movf	?___awmod,w
  1882  02D6  00B4               	movwf	??_timeset+2
  1883  02D7  0834               	movf	??_timeset+2,w
  1884  02D8  00B9               	movwf	timeset@t_583
  1885                           
  1886                           ;PIC16F1827-I2C_LCD_RTC01.c: 106: } else {
  1887  02D9  2ADF               	goto	l1902
  1888  02DA                     l1900:	
  1889                           
  1890                           ;PIC16F1827-I2C_LCD_RTC01.c: 107: t += 10;
  1891  02DA  300A               	movlw	10
  1892  02DB  0020               	movlb	0	; select bank0
  1893  02DC  00B2               	movwf	??_timeset
  1894  02DD  0832               	movf	??_timeset,w
  1895  02DE  07B9               	addwf	timeset@t_583,f
  1896  02DF                     l1902:	
  1897                           
  1898                           ;PIC16F1827-I2C_LCD_RTC01.c: 108: }
  1899                           ;PIC16F1827-I2C_LCD_RTC01.c: 109: *value = t % 10 + (t / 10)* 16;
  1900  02DF  300A               	movlw	10
  1901  02E0  00A0               	movwf	___awdiv@divisor
  1902  02E1  3000               	movlw	0
  1903  02E2  00A1               	movwf	___awdiv@divisor+1
  1904  02E3  0839               	movf	timeset@t_583,w
  1905  02E4  00B2               	movwf	??_timeset
  1906  02E5  01B3               	clrf	??_timeset+1
  1907  02E6  0832               	movf	??_timeset,w
  1908  02E7  00A2               	movwf	___awdiv@dividend
  1909  02E8  0833               	movf	??_timeset+1,w
  1910  02E9  00A3               	movwf	___awdiv@dividend+1
  1911  02EA  3184  24CF  3181   	fcall	___awdiv
  1912  02ED  0020               	movlb	0	; select bank0
  1913  02EE  0820               	movf	?___awdiv,w
  1914  02EF  00B4               	movwf	??_timeset+2
  1915  02F0  3004               	movlw	4
  1916  02F1                     u1415:	
  1917  02F1  35B4               	lslf	??_timeset+2,f
  1918  02F2  0B89               	decfsz	9,f
  1919  02F3  2AF1               	goto	u1415
  1920  02F4  300A               	movlw	10
  1921  02F5  00A0               	movwf	___awmod@divisor
  1922  02F6  3000               	movlw	0
  1923  02F7  00A1               	movwf	___awmod@divisor+1
  1924  02F8  0839               	movf	timeset@t_583,w
  1925  02F9  00B5               	movwf	??_timeset+3
  1926  02FA  01B6               	clrf	??_timeset+4
  1927  02FB  0835               	movf	??_timeset+3,w
  1928  02FC  00A2               	movwf	___awmod@dividend
  1929  02FD  0836               	movf	??_timeset+4,w
  1930  02FE  00A3               	movwf	___awmod@dividend+1
  1931  02FF  3185  2523  3181   	fcall	___awmod
  1932  0302  0020               	movlb	0	; select bank0
  1933  0303  0820               	movf	?___awmod,w
  1934  0304  0734               	addwf	??_timeset+2,w
  1935  0305  00B7               	movwf	??_timeset+5
  1936  0306  083A               	movf	timeset@value,w
  1937  0307  0086               	movwf	6
  1938  0308  0187               	clrf	7
  1939  0309  0837               	movf	??_timeset+5,w
  1940  030A  0081               	movwf	1
  1941                           
  1942                           ;PIC16F1827-I2C_LCD_RTC01.c: 110: RTC_Write(Reg, *value);
  1943  030B  083A               	movf	timeset@value,w
  1944  030C  0086               	movwf	6
  1945  030D  0187               	clrf	7
  1946  030E  0801               	movf	1,w
  1947  030F  00B2               	movwf	??_timeset
  1948  0310  0832               	movf	??_timeset,w
  1949  0311  00A4               	movwf	RTC_Write@data
  1950  0312  082F               	movf	timeset@Reg,w
  1951  0313  3187  2735  3181   	fcall	_RTC_Write
  1952  0316  29C8               	goto	l1906
  1953  0317                     l1908:	
  1954                           
  1955                           ;PIC16F1827-I2C_LCD_RTC01.c: 111: }
  1956                           ;PIC16F1827-I2C_LCD_RTC01.c: 112: }
  1957                           ;PIC16F1827-I2C_LCD_RTC01.c: 113: sw_RA0.flags = 0;
  1958  0317  01C5               	clrf	_sw_RA0+2
  1959  0318  0008               	return
  1960  0319                     __end_of_timeset:	
  1961                           
  1962                           	psect	text5
  1963  0319                     __ptext5:	
  1964 ;; *************** function _display *****************
  1965 ;; Defined at:
  1966 ;;		line 116 in file "PIC16F1827-I2C_LCD_RTC01.c"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;		None
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;		None
  1971 ;; Return value:  Size  Location     Type
  1972 ;;		None               void
  1973 ;; Registers used:
  1974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1980 ;;      Params:         0       0       0       0       0       0
  1981 ;;      Locals:         0       0       0       0       0       0
  1982 ;;      Temps:          0       2       0       0       0       0
  1983 ;;      Totals:         0       2       0       0       0       0
  1984 ;;Total ram usage:        2 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; Hardware stack levels required when called:    7
  1987 ;; This function calls:
  1988 ;;		_LCD_Putc
  1989 ;;		_LCD_SetCursor
  1990 ;;		_RTC_Read
  1991 ;;		___awdiv
  1992 ;; This function is called by:
  1993 ;;		_timeset
  1994 ;;		_main
  1995 ;; This function uses a non-reentrant model
  1996 ;;
  1997                           
  1998                           
  1999                           ;psect for function _display
  2000  0319                     _display:	
  2001                           
  2002                           ;PIC16F1827-I2C_LCD_RTC01.c: 117: ss = RTC_Read(0x00);
  2003                           
  2004                           ;incstack = 0
  2005                           ; Regs used in _display: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2006  0319  3000               	movlw	0
  2007  031A  3185  25AE  3183   	fcall	_RTC_Read
  2008  031D  0020               	movlb	0	; select bank0
  2009  031E  00AB               	movwf	??_display
  2010  031F  082B               	movf	??_display,w
  2011  0320  00CB               	movwf	_ss
  2012                           
  2013                           ;PIC16F1827-I2C_LCD_RTC01.c: 118: mm = RTC_Read(0x01);
  2014  0321  3001               	movlw	1
  2015  0322  3185  25AE  3183   	fcall	_RTC_Read
  2016  0325  0020               	movlb	0	; select bank0
  2017  0326  00AB               	movwf	??_display
  2018  0327  082B               	movf	??_display,w
  2019  0328  00CA               	movwf	_mm
  2020                           
  2021                           ;PIC16F1827-I2C_LCD_RTC01.c: 119: hh = RTC_Read(0x02);
  2022  0329  3002               	movlw	2
  2023  032A  3185  25AE  3183   	fcall	_RTC_Read
  2024  032D  0020               	movlb	0	; select bank0
  2025  032E  00AB               	movwf	??_display
  2026  032F  082B               	movf	??_display,w
  2027  0330  00C9               	movwf	_hh
  2028                           
  2029                           ;PIC16F1827-I2C_LCD_RTC01.c: 120: EE = RTC_Read(0x03);
  2030  0331  3003               	movlw	3
  2031  0332  3185  25AE  3183   	fcall	_RTC_Read
  2032  0335  0020               	movlb	0	; select bank0
  2033  0336  00AB               	movwf	??_display
  2034  0337  082B               	movf	??_display,w
  2035  0338  0021               	movlb	1	; select bank1
  2036  0339  00E6               	movwf	_EE^(0+128)
  2037                           
  2038                           ;PIC16F1827-I2C_LCD_RTC01.c: 121: DD = RTC_Read(0x04);
  2039  033A  3004               	movlw	4
  2040  033B  3185  25AE  3183   	fcall	_RTC_Read
  2041  033E  0020               	movlb	0	; select bank0
  2042  033F  00AB               	movwf	??_display
  2043  0340  082B               	movf	??_display,w
  2044  0341  00C6               	movwf	_DD
  2045                           
  2046                           ;PIC16F1827-I2C_LCD_RTC01.c: 122: MM = RTC_Read(0x05);
  2047  0342  3005               	movlw	5
  2048  0343  3185  25AE  3183   	fcall	_RTC_Read
  2049  0346  0020               	movlb	0	; select bank0
  2050  0347  00AB               	movwf	??_display
  2051  0348  082B               	movf	??_display,w
  2052  0349  00C7               	movwf	_MM
  2053                           
  2054                           ;PIC16F1827-I2C_LCD_RTC01.c: 123: YY = RTC_Read(0x06);
  2055  034A  3006               	movlw	6
  2056  034B  3185  25AE  3183   	fcall	_RTC_Read
  2057  034E  0020               	movlb	0	; select bank0
  2058  034F  00AB               	movwf	??_display
  2059  0350  082B               	movf	??_display,w
  2060  0351  00C8               	movwf	_YY
  2061                           
  2062                           ;PIC16F1827-I2C_LCD_RTC01.c: 124: LCD_SetCursor(0, 0);
  2063  0352  01A7               	clrf	LCD_SetCursor@row
  2064  0353  3000               	movlw	0
  2065  0354  318F  27D7  3183   	fcall	_LCD_SetCursor
  2066                           
  2067                           ;PIC16F1827-I2C_LCD_RTC01.c: 125: LCD_Putc(YY / 16 + '0');
  2068  0357  3010               	movlw	16
  2069  0358  0020               	movlb	0	; select bank0
  2070  0359  00A0               	movwf	___awdiv@divisor
  2071  035A  3000               	movlw	0
  2072  035B  00A1               	movwf	___awdiv@divisor+1
  2073  035C  0848               	movf	_YY,w
  2074  035D  00AB               	movwf	??_display
  2075  035E  01AC               	clrf	??_display+1
  2076  035F  082B               	movf	??_display,w
  2077  0360  00A2               	movwf	___awdiv@dividend
  2078  0361  082C               	movf	??_display+1,w
  2079  0362  00A3               	movwf	___awdiv@dividend+1
  2080  0363  3184  24CF  3183   	fcall	___awdiv
  2081  0366  0020               	movlb	0	; select bank0
  2082  0367  0820               	movf	?___awdiv,w
  2083  0368  3E30               	addlw	48
  2084  0369  3187  2715  3183   	fcall	_LCD_Putc
  2085                           
  2086                           ;PIC16F1827-I2C_LCD_RTC01.c: 126: LCD_Putc(YY % 16 + '0');
  2087  036C  0020               	movlb	0	; select bank0
  2088  036D  0848               	movf	_YY,w
  2089  036E  390F               	andlw	15
  2090  036F  3E30               	addlw	48
  2091  0370  3187  2715  3183   	fcall	_LCD_Putc
  2092                           
  2093                           ;PIC16F1827-I2C_LCD_RTC01.c: 127: LCD_Putc('/');
  2094  0373  302F               	movlw	47
  2095  0374  3187  2715  3183   	fcall	_LCD_Putc
  2096                           
  2097                           ;PIC16F1827-I2C_LCD_RTC01.c: 128: LCD_Putc(MM / 16 + '0');
  2098  0377  3010               	movlw	16
  2099  0378  0020               	movlb	0	; select bank0
  2100  0379  00A0               	movwf	___awdiv@divisor
  2101  037A  3000               	movlw	0
  2102  037B  00A1               	movwf	___awdiv@divisor+1
  2103  037C  0847               	movf	_MM,w
  2104  037D  00AB               	movwf	??_display
  2105  037E  01AC               	clrf	??_display+1
  2106  037F  082B               	movf	??_display,w
  2107  0380  00A2               	movwf	___awdiv@dividend
  2108  0381  082C               	movf	??_display+1,w
  2109  0382  00A3               	movwf	___awdiv@dividend+1
  2110  0383  3184  24CF  3183   	fcall	___awdiv
  2111  0386  0020               	movlb	0	; select bank0
  2112  0387  0820               	movf	?___awdiv,w
  2113  0388  3E30               	addlw	48
  2114  0389  3187  2715  3183   	fcall	_LCD_Putc
  2115                           
  2116                           ;PIC16F1827-I2C_LCD_RTC01.c: 129: LCD_Putc(MM % 16 + '0');
  2117  038C  0020               	movlb	0	; select bank0
  2118  038D  0847               	movf	_MM,w
  2119  038E  390F               	andlw	15
  2120  038F  3E30               	addlw	48
  2121  0390  3187  2715  3183   	fcall	_LCD_Putc
  2122                           
  2123                           ;PIC16F1827-I2C_LCD_RTC01.c: 130: LCD_Putc('/');
  2124  0393  302F               	movlw	47
  2125  0394  3187  2715  3183   	fcall	_LCD_Putc
  2126                           
  2127                           ;PIC16F1827-I2C_LCD_RTC01.c: 131: LCD_Putc(DD / 16 + '0');
  2128  0397  3010               	movlw	16
  2129  0398  0020               	movlb	0	; select bank0
  2130  0399  00A0               	movwf	___awdiv@divisor
  2131  039A  3000               	movlw	0
  2132  039B  00A1               	movwf	___awdiv@divisor+1
  2133  039C  0846               	movf	_DD,w
  2134  039D  00AB               	movwf	??_display
  2135  039E  01AC               	clrf	??_display+1
  2136  039F  082B               	movf	??_display,w
  2137  03A0  00A2               	movwf	___awdiv@dividend
  2138  03A1  082C               	movf	??_display+1,w
  2139  03A2  00A3               	movwf	___awdiv@dividend+1
  2140  03A3  3184  24CF  3183   	fcall	___awdiv
  2141  03A6  0020               	movlb	0	; select bank0
  2142  03A7  0820               	movf	?___awdiv,w
  2143  03A8  3E30               	addlw	48
  2144  03A9  3187  2715  3183   	fcall	_LCD_Putc
  2145                           
  2146                           ;PIC16F1827-I2C_LCD_RTC01.c: 132: LCD_Putc(DD % 16 + '0');
  2147  03AC  0020               	movlb	0	; select bank0
  2148  03AD  0846               	movf	_DD,w
  2149  03AE  390F               	andlw	15
  2150  03AF  3E30               	addlw	48
  2151  03B0  3187  2715  3183   	fcall	_LCD_Putc
  2152                           
  2153                           ;PIC16F1827-I2C_LCD_RTC01.c: 133: LCD_SetCursor(0, 1);
  2154  03B3  0020               	movlb	0	; select bank0
  2155  03B4  01A7               	clrf	LCD_SetCursor@row
  2156  03B5  0AA7               	incf	LCD_SetCursor@row,f
  2157  03B6  3000               	movlw	0
  2158  03B7  318F  27D7  3183   	fcall	_LCD_SetCursor
  2159                           
  2160                           ;PIC16F1827-I2C_LCD_RTC01.c: 134: LCD_Putc(hh / 16 + '0');
  2161  03BA  3010               	movlw	16
  2162  03BB  0020               	movlb	0	; select bank0
  2163  03BC  00A0               	movwf	___awdiv@divisor
  2164  03BD  3000               	movlw	0
  2165  03BE  00A1               	movwf	___awdiv@divisor+1
  2166  03BF  0849               	movf	_hh,w
  2167  03C0  00AB               	movwf	??_display
  2168  03C1  01AC               	clrf	??_display+1
  2169  03C2  082B               	movf	??_display,w
  2170  03C3  00A2               	movwf	___awdiv@dividend
  2171  03C4  082C               	movf	??_display+1,w
  2172  03C5  00A3               	movwf	___awdiv@dividend+1
  2173  03C6  3184  24CF  3183   	fcall	___awdiv
  2174  03C9  0020               	movlb	0	; select bank0
  2175  03CA  0820               	movf	?___awdiv,w
  2176  03CB  3E30               	addlw	48
  2177  03CC  3187  2715  3183   	fcall	_LCD_Putc
  2178                           
  2179                           ;PIC16F1827-I2C_LCD_RTC01.c: 135: LCD_Putc(hh % 16 + '0');
  2180  03CF  0020               	movlb	0	; select bank0
  2181  03D0  0849               	movf	_hh,w
  2182  03D1  390F               	andlw	15
  2183  03D2  3E30               	addlw	48
  2184  03D3  3187  2715  3183   	fcall	_LCD_Putc
  2185                           
  2186                           ;PIC16F1827-I2C_LCD_RTC01.c: 136: LCD_Putc(':');
  2187  03D6  303A               	movlw	58
  2188  03D7  3187  2715  3183   	fcall	_LCD_Putc
  2189                           
  2190                           ;PIC16F1827-I2C_LCD_RTC01.c: 137: LCD_Putc(mm / 16 + '0');
  2191  03DA  3010               	movlw	16
  2192  03DB  0020               	movlb	0	; select bank0
  2193  03DC  00A0               	movwf	___awdiv@divisor
  2194  03DD  3000               	movlw	0
  2195  03DE  00A1               	movwf	___awdiv@divisor+1
  2196  03DF  084A               	movf	_mm,w
  2197  03E0  00AB               	movwf	??_display
  2198  03E1  01AC               	clrf	??_display+1
  2199  03E2  082B               	movf	??_display,w
  2200  03E3  00A2               	movwf	___awdiv@dividend
  2201  03E4  082C               	movf	??_display+1,w
  2202  03E5  00A3               	movwf	___awdiv@dividend+1
  2203  03E6  3184  24CF  3183   	fcall	___awdiv
  2204  03E9  0020               	movlb	0	; select bank0
  2205  03EA  0820               	movf	?___awdiv,w
  2206  03EB  3E30               	addlw	48
  2207  03EC  3187  2715  3183   	fcall	_LCD_Putc
  2208                           
  2209                           ;PIC16F1827-I2C_LCD_RTC01.c: 138: LCD_Putc(mm % 16 + '0');
  2210  03EF  0020               	movlb	0	; select bank0
  2211  03F0  084A               	movf	_mm,w
  2212  03F1  390F               	andlw	15
  2213  03F2  3E30               	addlw	48
  2214  03F3  3187  2715  3183   	fcall	_LCD_Putc
  2215                           
  2216                           ;PIC16F1827-I2C_LCD_RTC01.c: 139: LCD_Putc('-');
  2217  03F6  302D               	movlw	45
  2218  03F7  3187  2715  3183   	fcall	_LCD_Putc
  2219                           
  2220                           ;PIC16F1827-I2C_LCD_RTC01.c: 140: LCD_Putc(ss / 16 + '0');
  2221  03FA  3010               	movlw	16
  2222  03FB  0020               	movlb	0	; select bank0
  2223  03FC  00A0               	movwf	___awdiv@divisor
  2224  03FD  3000               	movlw	0
  2225  03FE  00A1               	movwf	___awdiv@divisor+1
  2226  03FF  084B               	movf	_ss,w
  2227  0400  00AB               	movwf	??_display
  2228  0401  01AC               	clrf	??_display+1
  2229  0402  082B               	movf	??_display,w
  2230  0403  00A2               	movwf	___awdiv@dividend
  2231  0404  082C               	movf	??_display+1,w
  2232  0405  00A3               	movwf	___awdiv@dividend+1
  2233  0406  3184  24CF  3183   	fcall	___awdiv
  2234  0409  0020               	movlb	0	; select bank0
  2235  040A  0820               	movf	?___awdiv,w
  2236  040B  3E30               	addlw	48
  2237  040C  3187  2715  3183   	fcall	_LCD_Putc
  2238                           
  2239                           ;PIC16F1827-I2C_LCD_RTC01.c: 141: LCD_Putc(ss % 16 + '0');
  2240  040F  0020               	movlb	0	; select bank0
  2241  0410  084B               	movf	_ss,w
  2242  0411  390F               	andlw	15
  2243  0412  3E30               	addlw	48
  2244  0413  3187  2715         	fcall	_LCD_Putc
  2245  0415  0008               	return
  2246  0416                     __end_of_display:	
  2247                           
  2248                           	psect	text6
  2249  04CF                     __ptext6:	
  2250 ;; *************** function ___awdiv *****************
  2251 ;; Defined at:
  2252 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  2253 ;; Parameters:    Size  Location     Type
  2254 ;;  divisor         2    0[BANK0 ] int 
  2255 ;;  dividend        2    2[BANK0 ] int 
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;  quotient        2    7[BANK0 ] int 
  2258 ;;  sign            1    6[BANK0 ] unsigned char 
  2259 ;;  counter         1    5[BANK0 ] unsigned char 
  2260 ;; Return value:  Size  Location     Type
  2261 ;;                  2    0[BANK0 ] int 
  2262 ;; Registers used:
  2263 ;;		wreg, status,2, status,0
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2269 ;;      Params:         0       4       0       0       0       0
  2270 ;;      Locals:         0       4       0       0       0       0
  2271 ;;      Temps:          0       1       0       0       0       0
  2272 ;;      Totals:         0       9       0       0       0       0
  2273 ;;Total ram usage:        9 bytes
  2274 ;; Hardware stack levels used:    1
  2275 ;; Hardware stack levels required when called:    3
  2276 ;; This function calls:
  2277 ;;		Nothing
  2278 ;; This function is called by:
  2279 ;;		_timeset
  2280 ;;		_display
  2281 ;; This function uses a non-reentrant model
  2282 ;;
  2283                           
  2284                           
  2285                           ;psect for function ___awdiv
  2286  04CF                     ___awdiv:	
  2287                           
  2288                           ;incstack = 0
  2289                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2290  04CF  0020               	movlb	0	; select bank0
  2291  04D0  01A6               	clrf	___awdiv@sign
  2292  04D1  1FA1               	btfss	___awdiv@divisor+1,7
  2293  04D2  2CDA               	goto	l1548
  2294  04D3  09A0               	comf	___awdiv@divisor,f
  2295  04D4  09A1               	comf	___awdiv@divisor+1,f
  2296  04D5  0AA0               	incf	___awdiv@divisor,f
  2297  04D6  1903               	skipnz
  2298  04D7  0AA1               	incf	___awdiv@divisor+1,f
  2299  04D8  01A6               	clrf	___awdiv@sign
  2300  04D9  0AA6               	incf	___awdiv@sign,f
  2301  04DA                     l1548:	
  2302  04DA  1FA3               	btfss	___awdiv@dividend+1,7
  2303  04DB  2CE5               	goto	l1554
  2304  04DC  09A2               	comf	___awdiv@dividend,f
  2305  04DD  09A3               	comf	___awdiv@dividend+1,f
  2306  04DE  0AA2               	incf	___awdiv@dividend,f
  2307  04DF  1903               	skipnz
  2308  04E0  0AA3               	incf	___awdiv@dividend+1,f
  2309  04E1  3001               	movlw	1
  2310  04E2  00A4               	movwf	??___awdiv
  2311  04E3  0824               	movf	??___awdiv,w
  2312  04E4  06A6               	xorwf	___awdiv@sign,f
  2313  04E5                     l1554:	
  2314  04E5  01A7               	clrf	___awdiv@quotient
  2315  04E6  01A8               	clrf	___awdiv@quotient+1
  2316  04E7  0821               	movf	___awdiv@divisor+1,w
  2317  04E8  0420               	iorwf	___awdiv@divisor,w
  2318  04E9  1903               	skipnz
  2319  04EA  2D14               	goto	l1576
  2320  04EB  01A5               	clrf	___awdiv@counter
  2321  04EC  0AA5               	incf	___awdiv@counter,f
  2322  04ED                     l1564:	
  2323  04ED  1BA1               	btfsc	___awdiv@divisor+1,7
  2324  04EE  2CF9               	goto	l1566
  2325  04EF  3001               	movlw	1
  2326  04F0                     u945:	
  2327  04F0  35A0               	lslf	___awdiv@divisor,f
  2328  04F1  0DA1               	rlf	___awdiv@divisor+1,f
  2329  04F2  0B89               	decfsz	9,f
  2330  04F3  2CF0               	goto	u945
  2331  04F4  3001               	movlw	1
  2332  04F5  00A4               	movwf	??___awdiv
  2333  04F6  0824               	movf	??___awdiv,w
  2334  04F7  07A5               	addwf	___awdiv@counter,f
  2335  04F8  2CED               	goto	l1564
  2336  04F9                     l1566:	
  2337  04F9  3001               	movlw	1
  2338  04FA                     u965:	
  2339  04FA  35A7               	lslf	___awdiv@quotient,f
  2340  04FB  0DA8               	rlf	___awdiv@quotient+1,f
  2341  04FC  0B89               	decfsz	9,f
  2342  04FD  2CFA               	goto	u965
  2343  04FE  0821               	movf	___awdiv@divisor+1,w
  2344  04FF  0223               	subwf	___awdiv@dividend+1,w
  2345  0500  1D03               	skipz
  2346  0501  2D04               	goto	u975
  2347  0502  0820               	movf	___awdiv@divisor,w
  2348  0503  0222               	subwf	___awdiv@dividend,w
  2349  0504                     u975:	
  2350  0504  1C03               	skipc
  2351  0505  2D0B               	goto	l1572
  2352  0506  0820               	movf	___awdiv@divisor,w
  2353  0507  02A2               	subwf	___awdiv@dividend,f
  2354  0508  0821               	movf	___awdiv@divisor+1,w
  2355  0509  3BA3               	subwfb	___awdiv@dividend+1,f
  2356  050A  1427               	bsf	___awdiv@quotient,0
  2357  050B                     l1572:	
  2358  050B  3001               	movlw	1
  2359  050C                     u985:	
  2360  050C  36A1               	lsrf	___awdiv@divisor+1,f
  2361  050D  0CA0               	rrf	___awdiv@divisor,f
  2362  050E  0B89               	decfsz	9,f
  2363  050F  2D0C               	goto	u985
  2364  0510  3001               	movlw	1
  2365  0511  02A5               	subwf	___awdiv@counter,f
  2366  0512  1D03               	btfss	3,2
  2367  0513  2CF9               	goto	l1566
  2368  0514                     l1576:	
  2369  0514  0826               	movf	___awdiv@sign,w
  2370  0515  1903               	btfsc	3,2
  2371  0516  2D1C               	goto	l1580
  2372  0517  09A7               	comf	___awdiv@quotient,f
  2373  0518  09A8               	comf	___awdiv@quotient+1,f
  2374  0519  0AA7               	incf	___awdiv@quotient,f
  2375  051A  1903               	skipnz
  2376  051B  0AA8               	incf	___awdiv@quotient+1,f
  2377  051C                     l1580:	
  2378  051C  0828               	movf	___awdiv@quotient+1,w
  2379  051D  01A1               	clrf	?___awdiv+1
  2380  051E  07A1               	addwf	?___awdiv+1,f
  2381  051F  0827               	movf	___awdiv@quotient,w
  2382  0520  01A0               	clrf	?___awdiv
  2383  0521  07A0               	addwf	?___awdiv,f
  2384  0522  0008               	return
  2385  0523                     __end_of___awdiv:	
  2386                           
  2387                           	psect	text7
  2388  05AE                     __ptext7:	
  2389 ;; *************** function _RTC_Read *****************
  2390 ;; Defined at:
  2391 ;;		line 365 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  2392 ;; Parameters:    Size  Location     Type
  2393 ;;  Reg             1    wreg     unsigned char 
  2394 ;; Auto vars:     Size  Location     Type
  2395 ;;  Reg             1    7[BANK0 ] unsigned char 
  2396 ;;  ans             1    9[BANK0 ] unsigned char 
  2397 ;;  data            1    8[BANK0 ] unsigned char 
  2398 ;; Return value:  Size  Location     Type
  2399 ;;                  1    wreg      unsigned char 
  2400 ;; Registers used:
  2401 ;;		wreg, status,2, status,0, pclath, cstack
  2402 ;; Tracked objects:
  2403 ;;		On entry : 0/0
  2404 ;;		On exit  : 0/0
  2405 ;;		Unchanged: 0/0
  2406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2407 ;;      Params:         0       0       0       0       0       0
  2408 ;;      Locals:         0       3       0       0       0       0
  2409 ;;      Temps:          0       1       0       0       0       0
  2410 ;;      Totals:         0       4       0       0       0       0
  2411 ;;Total ram usage:        4 bytes
  2412 ;; Hardware stack levels used:    1
  2413 ;; Hardware stack levels required when called:    5
  2414 ;; This function calls:
  2415 ;;		_I2C_Receive
  2416 ;;		_I2C_Send
  2417 ;;		_I2C_Start
  2418 ;;		_I2C_Stop
  2419 ;;		_I2C_rStart
  2420 ;; This function is called by:
  2421 ;;		_timeset
  2422 ;;		_display
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425                           
  2426                           
  2427                           ;psect for function _RTC_Read
  2428  05AE                     _RTC_Read:	
  2429                           
  2430                           ;incstack = 0
  2431                           ; Regs used in _RTC_Read: [wreg+status,2+status,0+pclath+cstack]
  2432                           ;RTC_Read@Reg stored from wreg
  2433  05AE  0020               	movlb	0	; select bank0
  2434  05AF  00A7               	movwf	RTC_Read@Reg
  2435                           
  2436                           ;My_header_16F.h: 366: uint8_t ans;
  2437                           ;My_header_16F.h: 367: uint8_t data;
  2438                           ;My_header_16F.h: 369: ans = I2C_Start(0x68, 0);
  2439  05B0  01A2               	clrf	I2C_Start@rw
  2440  05B1  3068               	movlw	104
  2441  05B2  3187  27AD  3185   	fcall	_I2C_Start
  2442  05B5  0020               	movlb	0	; select bank0
  2443  05B6  00A6               	movwf	??_RTC_Read
  2444  05B7  0826               	movf	??_RTC_Read,w
  2445  05B8  00A9               	movwf	RTC_Read@ans
  2446                           
  2447                           ;My_header_16F.h: 370: if (ans == 0) {
  2448  05B9  08A9               	movf	RTC_Read@ans,f
  2449  05BA  1D03               	skipz
  2450  05BB  2DC0               	goto	l244
  2451                           
  2452                           ;My_header_16F.h: 371: I2C_Send(Reg);
  2453  05BC  0827               	movf	RTC_Read@Reg,w
  2454  05BD  318F  27A2  3185   	fcall	_I2C_Send
  2455  05C0                     l244:	
  2456                           
  2457                           ;My_header_16F.h: 372: }
  2458                           ;My_header_16F.h: 373: ans = I2C_rStart(0x68, 1);
  2459  05C0  3068               	movlw	104
  2460  05C1  0020               	movlb	0	; select bank0
  2461  05C2  00A2               	movwf	I2C_rStart@adrs
  2462  05C3  3000               	movlw	0
  2463  05C4  00A3               	movwf	I2C_rStart@adrs+1
  2464  05C5  3001               	movlw	1
  2465  05C6  00A4               	movwf	I2C_rStart@rw
  2466  05C7  3000               	movlw	0
  2467  05C8  00A5               	movwf	I2C_rStart@rw+1
  2468  05C9  3187  27C8  3185   	fcall	_I2C_rStart
  2469  05CC  0020               	movlb	0	; select bank0
  2470  05CD  00A6               	movwf	??_RTC_Read
  2471  05CE  0826               	movf	??_RTC_Read,w
  2472  05CF  00A9               	movwf	RTC_Read@ans
  2473                           
  2474                           ;My_header_16F.h: 374: if (ans == 0) {
  2475  05D0  08A9               	movf	RTC_Read@ans,f
  2476  05D1  1D03               	skipz
  2477  05D2  2DDB               	goto	l245
  2478                           
  2479                           ;My_header_16F.h: 375: data = I2C_Receive(1);
  2480  05D3  3001               	movlw	1
  2481  05D4  3186  26F5  3185   	fcall	_I2C_Receive
  2482  05D7  0020               	movlb	0	; select bank0
  2483  05D8  00A6               	movwf	??_RTC_Read
  2484  05D9  0826               	movf	??_RTC_Read,w
  2485  05DA  00A8               	movwf	RTC_Read@data
  2486  05DB                     l245:	
  2487                           
  2488                           ;My_header_16F.h: 376: }
  2489                           ;My_header_16F.h: 377: I2C_Stop();
  2490  05DB  318F  275C  3185   	fcall	_I2C_Stop
  2491                           
  2492                           ;My_header_16F.h: 378: _delay((unsigned long)((26)*(32000000/4000000.0)));
  2493  05DE  3045               	movlw	69
  2494  05DF  0020               	movlb	0	; select bank0
  2495  05E0  00A6               	movwf	??_RTC_Read
  2496  05E1                     u1617:	
  2497  05E1  0BA6               	decfsz	??_RTC_Read,f
  2498  05E2  2DE1               	goto	u1617
  2499                           
  2500                           ;My_header_16F.h: 379: return data;
  2501  05E3  0020               	movlb	0	; select bank0
  2502  05E4  0828               	movf	RTC_Read@data,w
  2503  05E5  0008               	return
  2504  05E6                     __end_of_RTC_Read:	
  2505                           
  2506                           	psect	text8
  2507  07C8                     __ptext8:	
  2508 ;; *************** function _I2C_rStart *****************
  2509 ;; Defined at:
  2510 ;;		line 222 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;  adrs            2    2[BANK0 ] int 
  2513 ;;  rw              2    4[BANK0 ] int 
  2514 ;; Auto vars:     Size  Location     Type
  2515 ;;		None
  2516 ;; Return value:  Size  Location     Type
  2517 ;;                  1    wreg      unsigned char 
  2518 ;; Registers used:
  2519 ;;		wreg, status,2, status,0, pclath, cstack
  2520 ;; Tracked objects:
  2521 ;;		On entry : 0/0
  2522 ;;		On exit  : 0/0
  2523 ;;		Unchanged: 0/0
  2524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2525 ;;      Params:         0       4       0       0       0       0
  2526 ;;      Locals:         0       0       0       0       0       0
  2527 ;;      Temps:          0       0       0       0       0       0
  2528 ;;      Totals:         0       4       0       0       0       0
  2529 ;;Total ram usage:        4 bytes
  2530 ;; Hardware stack levels used:    1
  2531 ;; Hardware stack levels required when called:    4
  2532 ;; This function calls:
  2533 ;;		_I2C_IdleCheck
  2534 ;; This function is called by:
  2535 ;;		_RTC_Read
  2536 ;;		_TM_Read
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           
  2541                           ;psect for function _I2C_rStart
  2542  07C8                     _I2C_rStart:	
  2543                           
  2544                           ;My_header_16F.h: 224: I2C_IdleCheck(0x5);
  2545                           
  2546                           ;incstack = 0
  2547                           ; Regs used in _I2C_rStart: [wreg+status,2+status,0+pclath+cstack]
  2548  07C8  3005               	movlw	5
  2549  07C9  318F  2784  3187   	fcall	_I2C_IdleCheck
  2550                           
  2551                           ;My_header_16F.h: 225: SSP1CON2bits.RSEN = 1;
  2552  07CC  0024               	movlb	4	; select bank4
  2553  07CD  1496               	bsf	22,1	;volatile
  2554                           
  2555                           ;My_header_16F.h: 227: I2C_IdleCheck(0x5);
  2556  07CE  3005               	movlw	5
  2557  07CF  318F  2784  3187   	fcall	_I2C_IdleCheck
  2558                           
  2559                           ;My_header_16F.h: 228: SSP1IF = 0;
  2560  07D2  0020               	movlb	0	; select bank0
  2561  07D3  1191               	bcf	17,3	;volatile
  2562                           
  2563                           ;My_header_16F.h: 229: SSP1BUF = (char) ((adrs << 1) + rw);
  2564  07D4  3522               	lslf	I2C_rStart@adrs,w
  2565  07D5  0724               	addwf	I2C_rStart@rw,w
  2566  07D6  0024               	movlb	4	; select bank4
  2567  07D7  0091               	movwf	17	;volatile
  2568  07D8                     l190:	
  2569                           ;My_header_16F.h: 230: while (!SSP1IF);
  2570                           
  2571  07D8  0020               	movlb	0	; select bank0
  2572  07D9  1D91               	btfss	17,3	;volatile
  2573  07DA  2FD8               	goto	l190
  2574                           
  2575                           ;My_header_16F.h: 231: return SSP1CON2bits.ACKSTAT;
  2576  07DB  0024               	movlb	4	; select bank4
  2577  07DC  0E16               	swapf	22,w	;volatile
  2578  07DD  0C89               	rrf	9,f
  2579  07DE  0C89               	rrf	9,f
  2580  07DF  3901               	andlw	1
  2581  07E0  0008               	return
  2582  07E1                     __end_of_I2C_rStart:	
  2583                           
  2584                           	psect	text9
  2585  06F5                     __ptext9:	
  2586 ;; *************** function _I2C_Receive *****************
  2587 ;; Defined at:
  2588 ;;		line 248 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  2589 ;; Parameters:    Size  Location     Type
  2590 ;;  ack             1    wreg     unsigned char 
  2591 ;; Auto vars:     Size  Location     Type
  2592 ;;  ack             1    3[BANK0 ] unsigned char 
  2593 ;;  data            1    4[BANK0 ] unsigned char 
  2594 ;; Return value:  Size  Location     Type
  2595 ;;                  1    wreg      unsigned char 
  2596 ;; Registers used:
  2597 ;;		wreg, status,2, status,0, pclath, cstack
  2598 ;; Tracked objects:
  2599 ;;		On entry : 0/0
  2600 ;;		On exit  : 0/0
  2601 ;;		Unchanged: 0/0
  2602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2603 ;;      Params:         0       0       0       0       0       0
  2604 ;;      Locals:         0       2       0       0       0       0
  2605 ;;      Temps:          0       1       0       0       0       0
  2606 ;;      Totals:         0       3       0       0       0       0
  2607 ;;Total ram usage:        3 bytes
  2608 ;; Hardware stack levels used:    1
  2609 ;; Hardware stack levels required when called:    4
  2610 ;; This function calls:
  2611 ;;		_I2C_IdleCheck
  2612 ;; This function is called by:
  2613 ;;		_RTC_Read
  2614 ;;		_TM_Read
  2615 ;; This function uses a non-reentrant model
  2616 ;;
  2617                           
  2618                           
  2619                           ;psect for function _I2C_Receive
  2620  06F5                     _I2C_Receive:	
  2621                           
  2622                           ;incstack = 0
  2623                           ; Regs used in _I2C_Receive: [wreg+status,2+status,0+pclath+cstack]
  2624                           ;I2C_Receive@ack stored from wreg
  2625  06F5  0020               	movlb	0	; select bank0
  2626  06F6  00A3               	movwf	I2C_Receive@ack
  2627                           
  2628                           ;My_header_16F.h: 249: uint8_t data;
  2629                           ;My_header_16F.h: 251: I2C_IdleCheck(0x5);
  2630  06F7  3005               	movlw	5
  2631  06F8  318F  2784  3186   	fcall	_I2C_IdleCheck
  2632                           
  2633                           ;My_header_16F.h: 252: SSP1CON2bits.RCEN = 1;
  2634  06FB  0024               	movlb	4	; select bank4
  2635  06FC  1596               	bsf	22,3	;volatile
  2636                           
  2637                           ;My_header_16F.h: 253: I2C_IdleCheck(0x4);
  2638  06FD  3004               	movlw	4
  2639  06FE  318F  2784  3186   	fcall	_I2C_IdleCheck
  2640                           
  2641                           ;My_header_16F.h: 254: data = SSP1BUF;
  2642  0701  0024               	movlb	4	; select bank4
  2643  0702  0811               	movf	17,w	;volatile
  2644  0703  0020               	movlb	0	; select bank0
  2645  0704  00A2               	movwf	??_I2C_Receive
  2646  0705  0822               	movf	??_I2C_Receive,w
  2647  0706  00A4               	movwf	I2C_Receive@data
  2648                           
  2649                           ;My_header_16F.h: 255: I2C_IdleCheck(0x5);
  2650  0707  3005               	movlw	5
  2651  0708  318F  2784         	fcall	_I2C_IdleCheck
  2652                           
  2653                           ;My_header_16F.h: 256: SSP1CON2bits.ACKDT = ack;
  2654  070A  0020               	movlb	0	; select bank0
  2655  070B  0823               	movf	I2C_Receive@ack,w
  2656  070C  0024               	movlb	4	; select bank4
  2657  070D  1D03               	skipz
  2658  070E  1696               	bsf	22,5	;volatile
  2659  070F  1903               	skipnz
  2660  0710  1296               	bcf	22,5	;volatile
  2661                           
  2662                           ;My_header_16F.h: 257: SSP1CON2bits.ACKEN = 1;
  2663  0711  1616               	bsf	22,4	;volatile
  2664                           
  2665                           ;My_header_16F.h: 258: return data;
  2666  0712  0020               	movlb	0	; select bank0
  2667  0713  0824               	movf	I2C_Receive@data,w
  2668  0714  0008               	return
  2669  0715                     __end_of_I2C_Receive:	
  2670                           
  2671                           	psect	text10
  2672  0FD7                     __ptext10:	
  2673 ;; *************** function _LCD_SetCursor *****************
  2674 ;; Defined at:
  2675 ;;		line 282 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  2676 ;; Parameters:    Size  Location     Type
  2677 ;;  col             1    wreg     unsigned char 
  2678 ;;  row             1    7[BANK0 ] unsigned char 
  2679 ;; Auto vars:     Size  Location     Type
  2680 ;;  col             1   10[BANK0 ] unsigned char 
  2681 ;;  row_offsets     2    8[BANK0 ] unsigned char [2]
  2682 ;; Return value:  Size  Location     Type
  2683 ;;		None               void
  2684 ;; Registers used:
  2685 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2686 ;; Tracked objects:
  2687 ;;		On entry : 0/0
  2688 ;;		On exit  : 0/0
  2689 ;;		Unchanged: 0/0
  2690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2691 ;;      Params:         0       1       0       0       0       0
  2692 ;;      Locals:         0       3       0       0       0       0
  2693 ;;      Temps:          0       0       0       0       0       0
  2694 ;;      Totals:         0       4       0       0       0       0
  2695 ;;Total ram usage:        4 bytes
  2696 ;; Hardware stack levels used:    1
  2697 ;; Hardware stack levels required when called:    6
  2698 ;; This function calls:
  2699 ;;		_LCD_Command
  2700 ;; This function is called by:
  2701 ;;		_timeset
  2702 ;;		_display
  2703 ;; This function uses a non-reentrant model
  2704 ;;
  2705                           
  2706                           
  2707                           ;psect for function _LCD_SetCursor
  2708  0FD7                     _LCD_SetCursor:	
  2709                           
  2710                           ;incstack = 0
  2711                           ; Regs used in _LCD_SetCursor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2712                           ;LCD_SetCursor@col stored from wreg
  2713  0FD7  0020               	movlb	0	; select bank0
  2714  0FD8  00AA               	movwf	LCD_SetCursor@col
  2715                           
  2716                           ;My_header_16F.h: 283: uint8_t row_offsets[] = {0x00, 0x40};
  2717  0FD9  084D               	movf	LCD_SetCursor@F2883+1,w
  2718  0FDA  01A9               	clrf	LCD_SetCursor@row_offsets+1
  2719  0FDB  07A9               	addwf	LCD_SetCursor@row_offsets+1,f
  2720  0FDC  084C               	movf	LCD_SetCursor@F2883,w
  2721  0FDD  01A8               	clrf	LCD_SetCursor@row_offsets
  2722  0FDE  07A8               	addwf	LCD_SetCursor@row_offsets,f
  2723                           
  2724                           ;My_header_16F.h: 285: LCD_Command(0x80 | (col + row_offsets[row]));
  2725  0FDF  0827               	movf	LCD_SetCursor@row,w
  2726  0FE0  3E28               	addlw	LCD_SetCursor@row_offsets& (0+255)
  2727  0FE1  0086               	movwf	6
  2728  0FE2  0187               	clrf	7
  2729  0FE3  0801               	movf	1,w
  2730  0FE4  072A               	addwf	LCD_SetCursor@col,w
  2731  0FE5  3880               	iorlw	128
  2732  0FE6  3187  2755         	fcall	_LCD_Command
  2733  0FE8  0008               	return
  2734  0FE9                     __end_of_LCD_SetCursor:	
  2735                           
  2736                           	psect	text11
  2737  0715                     __ptext11:	
  2738 ;; *************** function _LCD_Putc *****************
  2739 ;; Defined at:
  2740 ;;		line 288 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  2741 ;; Parameters:    Size  Location     Type
  2742 ;;  c               1    wreg     unsigned char 
  2743 ;; Auto vars:     Size  Location     Type
  2744 ;;  c               1    5[BANK0 ] unsigned char 
  2745 ;;  ans             1    6[BANK0 ] unsigned char 
  2746 ;; Return value:  Size  Location     Type
  2747 ;;		None               void
  2748 ;; Registers used:
  2749 ;;		wreg, status,2, status,0, pclath, cstack
  2750 ;; Tracked objects:
  2751 ;;		On entry : 0/0
  2752 ;;		On exit  : 0/0
  2753 ;;		Unchanged: 0/0
  2754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2755 ;;      Params:         0       0       0       0       0       0
  2756 ;;      Locals:         0       2       0       0       0       0
  2757 ;;      Temps:          0       1       0       0       0       0
  2758 ;;      Totals:         0       3       0       0       0       0
  2759 ;;Total ram usage:        3 bytes
  2760 ;; Hardware stack levels used:    1
  2761 ;; Hardware stack levels required when called:    5
  2762 ;; This function calls:
  2763 ;;		_I2C_Send
  2764 ;;		_I2C_Start
  2765 ;;		_I2C_Stop
  2766 ;; This function is called by:
  2767 ;;		_timeset
  2768 ;;		_display
  2769 ;; This function uses a non-reentrant model
  2770 ;;
  2771                           
  2772                           
  2773                           ;psect for function _LCD_Putc
  2774  0715                     _LCD_Putc:	
  2775                           
  2776                           ;incstack = 0
  2777                           ; Regs used in _LCD_Putc: [wreg+status,2+status,0+pclath+cstack]
  2778                           ;LCD_Putc@c stored from wreg
  2779  0715  0020               	movlb	0	; select bank0
  2780  0716  00A5               	movwf	LCD_Putc@c
  2781                           
  2782                           ;My_header_16F.h: 289: uint8_t ans;
  2783                           ;My_header_16F.h: 291: ans = I2C_Start(0x3E, 0);
  2784  0717  01A2               	clrf	I2C_Start@rw
  2785  0718  303E               	movlw	62
  2786  0719  3187  27AD  3187   	fcall	_I2C_Start
  2787  071C  0020               	movlb	0	; select bank0
  2788  071D  00A4               	movwf	??_LCD_Putc
  2789  071E  0824               	movf	??_LCD_Putc,w
  2790  071F  00A6               	movwf	LCD_Putc@ans
  2791                           
  2792                           ;My_header_16F.h: 292: if (ans == 0) {
  2793  0720  08A6               	movf	LCD_Putc@ans,f
  2794  0721  1D03               	skipz
  2795  0722  2F2C               	goto	l220
  2796                           
  2797                           ;My_header_16F.h: 294: I2C_Send(0b11000000);
  2798  0723  30C0               	movlw	192
  2799  0724  318F  27A2  3187   	fcall	_I2C_Send
  2800                           
  2801                           ;My_header_16F.h: 295: I2C_Send(c);
  2802  0727  0020               	movlb	0	; select bank0
  2803  0728  0825               	movf	LCD_Putc@c,w
  2804  0729  318F  27A2  3187   	fcall	_I2C_Send
  2805  072C                     l220:	
  2806                           
  2807                           ;My_header_16F.h: 296: }
  2808                           ;My_header_16F.h: 297: I2C_Stop();
  2809  072C  318F  275C  3187   	fcall	_I2C_Stop
  2810                           
  2811                           ;My_header_16F.h: 298: _delay((unsigned long)((26)*(32000000/4000000.0)));
  2812  072F  3045               	movlw	69
  2813  0730  0020               	movlb	0	; select bank0
  2814  0731  00A4               	movwf	??_LCD_Putc
  2815  0732                     u1627:	
  2816  0732  0BA4               	decfsz	??_LCD_Putc,f
  2817  0733  2F32               	goto	u1627
  2818  0734  0008               	return
  2819  0735                     __end_of_LCD_Putc:	
  2820                           
  2821                           	psect	text12
  2822  0FC5                     __ptext12:	
  2823 ;; *************** function ___bmul *****************
  2824 ;; Defined at:
  2825 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul8.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;  multiplier      1    wreg     unsigned char 
  2828 ;;  multiplicand    1    9[BANK0 ] unsigned char 
  2829 ;; Auto vars:     Size  Location     Type
  2830 ;;  multiplier      1   12[BANK0 ] unsigned char 
  2831 ;;  product         1   11[BANK0 ] unsigned char 
  2832 ;; Return value:  Size  Location     Type
  2833 ;;                  1    wreg      unsigned char 
  2834 ;; Registers used:
  2835 ;;		wreg, status,2, status,0
  2836 ;; Tracked objects:
  2837 ;;		On entry : 0/0
  2838 ;;		On exit  : 0/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2841 ;;      Params:         0       1       0       0       0       0
  2842 ;;      Locals:         0       2       0       0       0       0
  2843 ;;      Temps:          0       1       0       0       0       0
  2844 ;;      Totals:         0       4       0       0       0       0
  2845 ;;Total ram usage:        4 bytes
  2846 ;; Hardware stack levels used:    1
  2847 ;; Hardware stack levels required when called:    3
  2848 ;; This function calls:
  2849 ;;		Nothing
  2850 ;; This function is called by:
  2851 ;;		_timeset
  2852 ;; This function uses a non-reentrant model
  2853 ;;
  2854                           
  2855                           
  2856                           ;psect for function ___bmul
  2857  0FC5                     ___bmul:	
  2858                           
  2859                           ;incstack = 0
  2860                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2861                           ;___bmul@multiplier stored from wreg
  2862  0FC5  0020               	movlb	0	; select bank0
  2863  0FC6  00AC               	movwf	___bmul@multiplier
  2864  0FC7  01AB               	clrf	___bmul@product
  2865  0FC8                     l1668:	
  2866  0FC8  1C2C               	btfss	___bmul@multiplier,0
  2867  0FC9  2FCE               	goto	l1672
  2868  0FCA  0829               	movf	___bmul@multiplicand,w
  2869  0FCB  00AA               	movwf	??___bmul
  2870  0FCC  082A               	movf	??___bmul,w
  2871  0FCD  07AB               	addwf	___bmul@product,f
  2872  0FCE                     l1672:	
  2873  0FCE  1003               	clrc
  2874  0FCF  0DA9               	rlf	___bmul@multiplicand,f
  2875  0FD0  1003               	clrc
  2876  0FD1  0CAC               	rrf	___bmul@multiplier,f
  2877  0FD2  08AC               	movf	___bmul@multiplier,f
  2878  0FD3  1D03               	skipz
  2879  0FD4  2FC8               	goto	l1668
  2880  0FD5  082B               	movf	___bmul@product,w
  2881  0FD6  0008               	return
  2882  0FD7                     __end_of___bmul:	
  2883                           
  2884                           	psect	text13
  2885  0523                     __ptext13:	
  2886 ;; *************** function ___awmod *****************
  2887 ;; Defined at:
  2888 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;  divisor         2    0[BANK0 ] int 
  2891 ;;  dividend        2    2[BANK0 ] int 
  2892 ;; Auto vars:     Size  Location     Type
  2893 ;;  sign            1    6[BANK0 ] unsigned char 
  2894 ;;  counter         1    5[BANK0 ] unsigned char 
  2895 ;; Return value:  Size  Location     Type
  2896 ;;                  2    0[BANK0 ] int 
  2897 ;; Registers used:
  2898 ;;		wreg, status,2, status,0
  2899 ;; Tracked objects:
  2900 ;;		On entry : 0/0
  2901 ;;		On exit  : 0/0
  2902 ;;		Unchanged: 0/0
  2903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2904 ;;      Params:         0       4       0       0       0       0
  2905 ;;      Locals:         0       2       0       0       0       0
  2906 ;;      Temps:          0       1       0       0       0       0
  2907 ;;      Totals:         0       7       0       0       0       0
  2908 ;;Total ram usage:        7 bytes
  2909 ;; Hardware stack levels used:    1
  2910 ;; Hardware stack levels required when called:    3
  2911 ;; This function calls:
  2912 ;;		Nothing
  2913 ;; This function is called by:
  2914 ;;		_timeset
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           
  2918                           
  2919                           ;psect for function ___awmod
  2920  0523                     ___awmod:	
  2921                           
  2922                           ;incstack = 0
  2923                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2924  0523  0020               	movlb	0	; select bank0
  2925  0524  01A6               	clrf	___awmod@sign
  2926  0525  1FA3               	btfss	___awmod@dividend+1,7
  2927  0526  2D2E               	goto	l1690
  2928  0527  09A2               	comf	___awmod@dividend,f
  2929  0528  09A3               	comf	___awmod@dividend+1,f
  2930  0529  0AA2               	incf	___awmod@dividend,f
  2931  052A  1903               	skipnz
  2932  052B  0AA3               	incf	___awmod@dividend+1,f
  2933  052C  01A6               	clrf	___awmod@sign
  2934  052D  0AA6               	incf	___awmod@sign,f
  2935  052E                     l1690:	
  2936  052E  1FA1               	btfss	___awmod@divisor+1,7
  2937  052F  2D35               	goto	l1694
  2938  0530  09A0               	comf	___awmod@divisor,f
  2939  0531  09A1               	comf	___awmod@divisor+1,f
  2940  0532  0AA0               	incf	___awmod@divisor,f
  2941  0533  1903               	skipnz
  2942  0534  0AA1               	incf	___awmod@divisor+1,f
  2943  0535                     l1694:	
  2944  0535  0821               	movf	___awmod@divisor+1,w
  2945  0536  0420               	iorwf	___awmod@divisor,w
  2946  0537  1903               	skipnz
  2947  0538  2D5C               	goto	l1712
  2948  0539  01A5               	clrf	___awmod@counter
  2949  053A  0AA5               	incf	___awmod@counter,f
  2950  053B                     l1702:	
  2951  053B  1BA1               	btfsc	___awmod@divisor+1,7
  2952  053C  2D47               	goto	l1704
  2953  053D  3001               	movlw	1
  2954  053E                     u1125:	
  2955  053E  35A0               	lslf	___awmod@divisor,f
  2956  053F  0DA1               	rlf	___awmod@divisor+1,f
  2957  0540  0B89               	decfsz	9,f
  2958  0541  2D3E               	goto	u1125
  2959  0542  3001               	movlw	1
  2960  0543  00A4               	movwf	??___awmod
  2961  0544  0824               	movf	??___awmod,w
  2962  0545  07A5               	addwf	___awmod@counter,f
  2963  0546  2D3B               	goto	l1702
  2964  0547                     l1704:	
  2965  0547  0821               	movf	___awmod@divisor+1,w
  2966  0548  0223               	subwf	___awmod@dividend+1,w
  2967  0549  1D03               	skipz
  2968  054A  2D4D               	goto	u1145
  2969  054B  0820               	movf	___awmod@divisor,w
  2970  054C  0222               	subwf	___awmod@dividend,w
  2971  054D                     u1145:	
  2972  054D  1C03               	skipc
  2973  054E  2D53               	goto	l1708
  2974  054F  0820               	movf	___awmod@divisor,w
  2975  0550  02A2               	subwf	___awmod@dividend,f
  2976  0551  0821               	movf	___awmod@divisor+1,w
  2977  0552  3BA3               	subwfb	___awmod@dividend+1,f
  2978  0553                     l1708:	
  2979  0553  3001               	movlw	1
  2980  0554                     u1155:	
  2981  0554  36A1               	lsrf	___awmod@divisor+1,f
  2982  0555  0CA0               	rrf	___awmod@divisor,f
  2983  0556  0B89               	decfsz	9,f
  2984  0557  2D54               	goto	u1155
  2985  0558  3001               	movlw	1
  2986  0559  02A5               	subwf	___awmod@counter,f
  2987  055A  1D03               	btfss	3,2
  2988  055B  2D47               	goto	l1704
  2989  055C                     l1712:	
  2990  055C  0826               	movf	___awmod@sign,w
  2991  055D  1903               	btfsc	3,2
  2992  055E  2D64               	goto	l1716
  2993  055F  09A2               	comf	___awmod@dividend,f
  2994  0560  09A3               	comf	___awmod@dividend+1,f
  2995  0561  0AA2               	incf	___awmod@dividend,f
  2996  0562  1903               	skipnz
  2997  0563  0AA3               	incf	___awmod@dividend+1,f
  2998  0564                     l1716:	
  2999  0564  0823               	movf	___awmod@dividend+1,w
  3000  0565  01A1               	clrf	?___awmod+1
  3001  0566  07A1               	addwf	?___awmod+1,f
  3002  0567  0822               	movf	___awmod@dividend,w
  3003  0568  01A0               	clrf	?___awmod
  3004  0569  07A0               	addwf	?___awmod,f
  3005  056A  0008               	return
  3006  056B                     __end_of___awmod:	
  3007                           
  3008                           	psect	text14
  3009  0735                     __ptext14:	
  3010 ;; *************** function _RTC_Write *****************
  3011 ;; Defined at:
  3012 ;;		line 352 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;  Reg             1    wreg     unsigned char 
  3015 ;;  data            1    4[BANK0 ] unsigned char 
  3016 ;; Auto vars:     Size  Location     Type
  3017 ;;  Reg             1    6[BANK0 ] unsigned char 
  3018 ;;  ans             1    7[BANK0 ] unsigned char 
  3019 ;; Return value:  Size  Location     Type
  3020 ;;		None               void
  3021 ;; Registers used:
  3022 ;;		wreg, status,2, status,0, pclath, cstack
  3023 ;; Tracked objects:
  3024 ;;		On entry : 0/0
  3025 ;;		On exit  : 0/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3028 ;;      Params:         0       1       0       0       0       0
  3029 ;;      Locals:         0       2       0       0       0       0
  3030 ;;      Temps:          0       1       0       0       0       0
  3031 ;;      Totals:         0       4       0       0       0       0
  3032 ;;Total ram usage:        4 bytes
  3033 ;; Hardware stack levels used:    1
  3034 ;; Hardware stack levels required when called:    5
  3035 ;; This function calls:
  3036 ;;		_I2C_Send
  3037 ;;		_I2C_Start
  3038 ;;		_I2C_Stop
  3039 ;; This function is called by:
  3040 ;;		_timeset
  3041 ;;		_main
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           
  3046                           ;psect for function _RTC_Write
  3047  0735                     _RTC_Write:	
  3048                           
  3049                           ;incstack = 0
  3050                           ; Regs used in _RTC_Write: [wreg+status,2+status,0+pclath+cstack]
  3051                           ;RTC_Write@Reg stored from wreg
  3052  0735  0020               	movlb	0	; select bank0
  3053  0736  00A6               	movwf	RTC_Write@Reg
  3054                           
  3055                           ;My_header_16F.h: 353: uint8_t ans;
  3056                           ;My_header_16F.h: 355: ans = I2C_Start(0x68, 0);
  3057  0737  01A2               	clrf	I2C_Start@rw
  3058  0738  3068               	movlw	104
  3059  0739  3187  27AD  3187   	fcall	_I2C_Start
  3060  073C  0020               	movlb	0	; select bank0
  3061  073D  00A5               	movwf	??_RTC_Write
  3062  073E  0825               	movf	??_RTC_Write,w
  3063  073F  00A7               	movwf	RTC_Write@ans
  3064                           
  3065                           ;My_header_16F.h: 356: if (ans == 0) {
  3066  0740  08A7               	movf	RTC_Write@ans,f
  3067  0741  1D03               	skipz
  3068  0742  2F4C               	goto	l240
  3069                           
  3070                           ;My_header_16F.h: 358: I2C_Send(Reg);
  3071  0743  0826               	movf	RTC_Write@Reg,w
  3072  0744  318F  27A2  3187   	fcall	_I2C_Send
  3073                           
  3074                           ;My_header_16F.h: 359: I2C_Send(data);
  3075  0747  0020               	movlb	0	; select bank0
  3076  0748  0824               	movf	RTC_Write@data,w
  3077  0749  318F  27A2  3187   	fcall	_I2C_Send
  3078  074C                     l240:	
  3079                           
  3080                           ;My_header_16F.h: 360: }
  3081                           ;My_header_16F.h: 361: I2C_Stop();
  3082  074C  318F  275C  3187   	fcall	_I2C_Stop
  3083                           
  3084                           ;My_header_16F.h: 362: _delay((unsigned long)((26)*(32000000/4000000.0)));
  3085  074F  3045               	movlw	69
  3086  0750  0020               	movlb	0	; select bank0
  3087  0751  00A5               	movwf	??_RTC_Write
  3088  0752                     u1637:	
  3089  0752  0BA5               	decfsz	??_RTC_Write,f
  3090  0753  2F52               	goto	u1637
  3091  0754  0008               	return
  3092  0755                     __end_of_RTC_Write:	
  3093                           
  3094                           	psect	text15
  3095  05E6                     __ptext15:	
  3096 ;; *************** function _LCD_Puts *****************
  3097 ;; Defined at:
  3098 ;;		line 301 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  3099 ;; Parameters:    Size  Location     Type
  3100 ;;  s               2    4[BANK0 ] PTR const unsigned char 
  3101 ;;		 -> STR_1(3), 
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;  ans             2    8[BANK0 ] int 
  3104 ;; Return value:  Size  Location     Type
  3105 ;;		None               void
  3106 ;; Registers used:
  3107 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3108 ;; Tracked objects:
  3109 ;;		On entry : 0/0
  3110 ;;		On exit  : 0/0
  3111 ;;		Unchanged: 0/0
  3112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3113 ;;      Params:         0       2       0       0       0       0
  3114 ;;      Locals:         0       2       0       0       0       0
  3115 ;;      Temps:          0       2       0       0       0       0
  3116 ;;      Totals:         0       6       0       0       0       0
  3117 ;;Total ram usage:        6 bytes
  3118 ;; Hardware stack levels used:    1
  3119 ;; Hardware stack levels required when called:    5
  3120 ;; This function calls:
  3121 ;;		_I2C_Send
  3122 ;;		_I2C_Start
  3123 ;;		_I2C_Stop
  3124 ;; This function is called by:
  3125 ;;		_timeset
  3126 ;; This function uses a non-reentrant model
  3127 ;;
  3128                           
  3129                           
  3130                           ;psect for function _LCD_Puts
  3131  05E6                     _LCD_Puts:	
  3132                           
  3133                           ;My_header_16F.h: 302: int ans;
  3134                           ;My_header_16F.h: 304: ans = I2C_Start(0x3E, 0);
  3135                           
  3136                           ;incstack = 0
  3137                           ; Regs used in _LCD_Puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3138  05E6  0020               	movlb	0	; select bank0
  3139  05E7  01A2               	clrf	I2C_Start@rw
  3140  05E8  303E               	movlw	62
  3141  05E9  3187  27AD  3185   	fcall	_I2C_Start
  3142  05EC  0020               	movlb	0	; select bank0
  3143  05ED  00A6               	movwf	??_LCD_Puts
  3144  05EE  01A7               	clrf	??_LCD_Puts+1
  3145  05EF  0826               	movf	??_LCD_Puts,w
  3146  05F0  00A8               	movwf	LCD_Puts@ans
  3147  05F1  0827               	movf	??_LCD_Puts+1,w
  3148  05F2  00A9               	movwf	LCD_Puts@ans+1
  3149                           
  3150                           ;My_header_16F.h: 305: if (ans == 0) {
  3151  05F3  0829               	movf	LCD_Puts@ans+1,w
  3152  05F4  0428               	iorwf	LCD_Puts@ans,w
  3153  05F5  1D03               	skipz
  3154  05F6  2E17               	goto	l1634
  3155                           
  3156                           ;My_header_16F.h: 306: I2C_Send(0b01000000);
  3157  05F7  3040               	movlw	64
  3158  05F8  318F  27A2  3185   	fcall	_I2C_Send
  3159  05FB                     l1632:	
  3160                           ;My_header_16F.h: 307: while (*s) {
  3161                           
  3162  05FB  0020               	movlb	0	; select bank0
  3163  05FC  0824               	movf	LCD_Puts@s,w
  3164  05FD  0084               	movwf	4
  3165  05FE  0825               	movf	LCD_Puts@s+1,w
  3166  05FF  0085               	movwf	5
  3167  0600  0800               	movf	0,w	;code access
  3168  0601  3800               	iorlw	0
  3169  0602  1903               	btfsc	3,2
  3170  0603  2E17               	goto	l1634
  3171                           
  3172                           ;My_header_16F.h: 308: I2C_Send(*s++);
  3173  0604  0020               	movlb	0	; select bank0
  3174  0605  0824               	movf	LCD_Puts@s,w
  3175  0606  0084               	movwf	4
  3176  0607  0825               	movf	LCD_Puts@s+1,w
  3177  0608  0085               	movwf	5
  3178  0609  0800               	movf	0,w	;code access
  3179  060A  318F  27A2  3185   	fcall	_I2C_Send
  3180  060D  3001               	movlw	1
  3181  060E  0020               	movlb	0	; select bank0
  3182  060F  07A4               	addwf	LCD_Puts@s,f
  3183  0610  3000               	movlw	0
  3184  0611  3DA5               	addwfc	LCD_Puts@s+1,f
  3185                           
  3186                           ;My_header_16F.h: 309: _delay((unsigned long)((26)*(32000000/4000000.0)));
  3187  0612  3045               	movlw	69
  3188  0613  00A6               	movwf	??_LCD_Puts
  3189  0614                     u1647:	
  3190  0614  0BA6               	decfsz	??_LCD_Puts,f
  3191  0615  2E14               	goto	u1647
  3192  0616  2DFB               	goto	l1632
  3193  0617                     l1634:	
  3194                           
  3195                           ;My_header_16F.h: 310: }
  3196                           ;My_header_16F.h: 311: }
  3197                           ;My_header_16F.h: 312: I2C_Stop();
  3198  0617  318F  275C         	fcall	_I2C_Stop
  3199  0619  0008               	return
  3200  061A                     __end_of_LCD_Puts:	
  3201                           
  3202                           	psect	text16
  3203  0792                     __ptext16:	
  3204 ;; *************** function _ringbuf_init *****************
  3205 ;; Defined at:
  3206 ;;		line 111 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;  rb              1    wreg     PTR struct ringbuf
  3209 ;;		 -> tx_buf(4), 
  3210 ;;  internal_buf    1    0[BANK0 ] PTR unsigned char 
  3211 ;;		 -> main@buf(70), 
  3212 ;;  bufsize         1    1[BANK0 ] unsigned char 
  3213 ;; Auto vars:     Size  Location     Type
  3214 ;;  rb              1    3[BANK0 ] PTR struct ringbuf
  3215 ;;		 -> tx_buf(4), 
  3216 ;; Return value:  Size  Location     Type
  3217 ;;		None               void
  3218 ;; Registers used:
  3219 ;;		wreg, fsr1l, fsr1h, status,2
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3225 ;;      Params:         0       2       0       0       0       0
  3226 ;;      Locals:         0       1       0       0       0       0
  3227 ;;      Temps:          0       1       0       0       0       0
  3228 ;;      Totals:         0       4       0       0       0       0
  3229 ;;Total ram usage:        4 bytes
  3230 ;; Hardware stack levels used:    1
  3231 ;; Hardware stack levels required when called:    3
  3232 ;; This function calls:
  3233 ;;		Nothing
  3234 ;; This function is called by:
  3235 ;;		_main
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           
  3240                           ;psect for function _ringbuf_init
  3241  0792                     _ringbuf_init:	
  3242                           
  3243                           ;incstack = 0
  3244                           ; Regs used in _ringbuf_init: [wreg+fsr1l+fsr1h+status,2]
  3245                           ;ringbuf_init@rb stored from wreg
  3246  0792  0020               	movlb	0	; select bank0
  3247  0793  00A3               	movwf	ringbuf_init@rb
  3248                           
  3249                           ;My_header_16F.h: 112: rb->buf = internal_buf;
  3250  0794  0820               	movf	ringbuf_init@internal_buf,w
  3251  0795  00A2               	movwf	??_ringbuf_init
  3252  0796  0823               	movf	ringbuf_init@rb,w
  3253  0797  0086               	movwf	6
  3254  0798  0187               	clrf	7
  3255  0799  0822               	movf	??_ringbuf_init,w
  3256  079A  0081               	movwf	1
  3257                           
  3258                           ;My_header_16F.h: 113: rb->size = bufsize;
  3259  079B  0821               	movf	ringbuf_init@bufsize,w
  3260  079C  00A2               	movwf	??_ringbuf_init
  3261  079D  0A23               	incf	ringbuf_init@rb,w
  3262  079E  0086               	movwf	6
  3263  079F  0187               	clrf	7
  3264  07A0  0822               	movf	??_ringbuf_init,w
  3265  07A1  0081               	movwf	1
  3266                           
  3267                           ;My_header_16F.h: 114: rb->head = 0;
  3268  07A2  0823               	movf	ringbuf_init@rb,w
  3269  07A3  3E02               	addlw	2
  3270  07A4  0086               	movwf	6
  3271  07A5  0187               	clrf	7
  3272  07A6  0181               	clrf	1
  3273                           
  3274                           ;My_header_16F.h: 115: rb->tail = 0;
  3275  07A7  0823               	movf	ringbuf_init@rb,w
  3276  07A8  3E03               	addlw	3
  3277  07A9  0086               	movwf	6
  3278  07AA  0187               	clrf	7
  3279  07AB  0181               	clrf	1
  3280  07AC  0008               	return
  3281  07AD                     __end_of_ringbuf_init:	
  3282                           
  3283                           	psect	text17
  3284  0775                     __ptext17:	
  3285 ;; *************** function _month_length *****************
  3286 ;; Defined at:
  3287 ;;		line 55 in file "PIC16F1827-I2C_LCD_RTC01.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;  year            1    wreg     unsigned char 
  3290 ;;  month           1    0[BANK0 ] unsigned char 
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;  year            1    1[BANK0 ] unsigned char 
  3293 ;; Return value:  Size  Location     Type
  3294 ;;                  1    wreg      unsigned char 
  3295 ;; Registers used:
  3296 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3302 ;;      Params:         0       1       0       0       0       0
  3303 ;;      Locals:         0       1       0       0       0       0
  3304 ;;      Temps:          0       0       0       0       0       0
  3305 ;;      Totals:         0       2       0       0       0       0
  3306 ;;Total ram usage:        2 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; Hardware stack levels required when called:    3
  3309 ;; This function calls:
  3310 ;;		Nothing
  3311 ;; This function is called by:
  3312 ;;		_main
  3313 ;; This function uses a non-reentrant model
  3314 ;;
  3315                           
  3316                           
  3317                           ;psect for function _month_length
  3318  0775                     _month_length:	
  3319                           
  3320                           ;incstack = 0
  3321                           ; Regs used in _month_length: [wreg-fsr0h+status,2+status,0]
  3322                           ;month_length@year stored from wreg
  3323  0775  0020               	movlb	0	; select bank0
  3324  0776  00A1               	movwf	month_length@year
  3325                           
  3326                           ;PIC16F1827-I2C_LCD_RTC01.c: 56: switch (month) {
  3327  0777  2F84               	goto	l1856
  3328  0778                     l1836:	
  3329                           ;PIC16F1827-I2C_LCD_RTC01.c: 57: case 1:
  3330                           
  3331                           
  3332                           ;PIC16F1827-I2C_LCD_RTC01.c: 58: case 3:
  3333                           ;PIC16F1827-I2C_LCD_RTC01.c: 59: case 5:
  3334                           ;PIC16F1827-I2C_LCD_RTC01.c: 60: case 7:
  3335                           ;PIC16F1827-I2C_LCD_RTC01.c: 61: case 8:
  3336                           ;PIC16F1827-I2C_LCD_RTC01.c: 62: case 10:
  3337                           ;PIC16F1827-I2C_LCD_RTC01.c: 63: case 12:
  3338                           ;PIC16F1827-I2C_LCD_RTC01.c: 64: return 31;
  3339  0778  301F               	movlw	31
  3340  0779  0008               	return
  3341  077A                     l1840:	
  3342                           ;PIC16F1827-I2C_LCD_RTC01.c: 65: case 4:
  3343                           
  3344                           
  3345                           ;PIC16F1827-I2C_LCD_RTC01.c: 66: case 6:
  3346                           ;PIC16F1827-I2C_LCD_RTC01.c: 67: case 9:
  3347                           ;PIC16F1827-I2C_LCD_RTC01.c: 68: case 11:
  3348                           ;PIC16F1827-I2C_LCD_RTC01.c: 69: return 30;
  3349  077A  301E               	movlw	30
  3350  077B  0008               	return
  3351  077C                     l1844:	
  3352                           ;PIC16F1827-I2C_LCD_RTC01.c: 70: case 2:
  3353                           
  3354                           
  3355                           ;PIC16F1827-I2C_LCD_RTC01.c: 71: if (year % 4 == 0) return 29;
  3356  077C  0821               	movf	month_length@year,w
  3357  077D  3903               	andlw	3
  3358  077E  1D03               	btfss	3,2
  3359  077F  2F82               	goto	l1852
  3360  0780  301D               	movlw	29
  3361  0781  0008               	return
  3362  0782                     l1852:	
  3363                           
  3364                           ;PIC16F1827-I2C_LCD_RTC01.c: 72: else return 28;
  3365  0782  301C               	movlw	28
  3366                           
  3367                           ;PIC16F1827-I2C_LCD_RTC01.c: 73: }
  3368  0783  0008               	return
  3369  0784                     l1856:	
  3370  0784  0820               	movf	month_length@month,w
  3371                           
  3372                           ; Switch size 1, requested type "space"
  3373                           ; Number of cases is 12, Range of values is 1 to 12
  3374                           ; switch strategies available:
  3375                           ; Name         Instructions Cycles
  3376                           ; direct_byte           33     9 (fixed)
  3377                           ; simple_byte           37    19 (average)
  3378                           ; jumptable            263     9 (fixed)
  3379                           ;	Chosen strategy is direct_byte
  3380  0785  3EFF               	addlw	-1
  3381  0786  1C03               	skipc
  3382  0787  0008               	return
  3383  0788  0084               	movwf	4
  3384  0789  300C               	movlw	12
  3385  078A  0204               	subwf	4,w
  3386  078B  1803               	skipnc
  3387  078C  0008               	return
  3388  078D  3187               	movlp	high S2070
  3389  078E  3504               	lslf	4,w
  3390  078F  3EE1               	addlw	low S2070
  3391  0790  0082               	movwf	2
  3392  0791  0008               	return
  3393  0792                     __end_of_month_length:	
  3394                           
  3395                           	psect	swtext1
  3396  07E1                     __pswtext1:	
  3397  07E1                     S2070:	
  3398  07E1  3187  2F78         	ljmp	l1836
  3399  07E3  3187  2F7C         	ljmp	l1844
  3400  07E5  3187  2F78         	ljmp	l1836
  3401  07E7  3187  2F7A         	ljmp	l1840
  3402  07E9  3187  2F78         	ljmp	l1836
  3403  07EB  3187  2F7A         	ljmp	l1840
  3404  07ED  3187  2F78         	ljmp	l1836
  3405  07EF  3187  2F78         	ljmp	l1836
  3406  07F1  3187  2F7A         	ljmp	l1840
  3407  07F3  3187  2F78         	ljmp	l1836
  3408  07F5  3187  2F7A         	ljmp	l1840
  3409  07F7  3187  2F78         	ljmp	l1836
  3410                           
  3411                           	psect	text18
  3412  0FB3                     __ptext18:	
  3413 ;; *************** function _UART_init *****************
  3414 ;; Defined at:
  3415 ;;		line 146 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  3416 ;; Parameters:    Size  Location     Type
  3417 ;;  device          1    wreg     unsigned char 
  3418 ;; Auto vars:     Size  Location     Type
  3419 ;;  device          1    0[BANK0 ] unsigned char 
  3420 ;; Return value:  Size  Location     Type
  3421 ;;		None               void
  3422 ;; Registers used:
  3423 ;;		wreg, status,2, status,0
  3424 ;; Tracked objects:
  3425 ;;		On entry : 0/0
  3426 ;;		On exit  : 0/0
  3427 ;;		Unchanged: 0/0
  3428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3429 ;;      Params:         0       0       0       0       0       0
  3430 ;;      Locals:         0       1       0       0       0       0
  3431 ;;      Temps:          0       0       0       0       0       0
  3432 ;;      Totals:         0       1       0       0       0       0
  3433 ;;Total ram usage:        1 bytes
  3434 ;; Hardware stack levels used:    1
  3435 ;; Hardware stack levels required when called:    3
  3436 ;; This function calls:
  3437 ;;		Nothing
  3438 ;; This function is called by:
  3439 ;;		_main
  3440 ;; This function uses a non-reentrant model
  3441 ;;
  3442                           
  3443                           
  3444                           ;psect for function _UART_init
  3445  0FB3                     _UART_init:	
  3446                           
  3447                           ;incstack = 0
  3448                           ; Regs used in _UART_init: [wreg+status,2+status,0]
  3449                           ;UART_init@device stored from wreg
  3450  0FB3  0020               	movlb	0	; select bank0
  3451  0FB4  00A0               	movwf	UART_init@device
  3452                           
  3453                           ;My_header_16F.h: 147: if (device == 0) {
  3454  0FB5  08A0               	movf	UART_init@device,f
  3455  0FB6  1D03               	skipz
  3456  0FB7  0008               	return
  3457                           
  3458                           ;My_header_16F.h: 148: SPEN = 1;
  3459  0FB8  0023               	movlb	3	; select bank3
  3460  0FB9  179D               	bsf	29,7	;volatile
  3461                           
  3462                           ;My_header_16F.h: 149: RCSTA = 0x90;
  3463  0FBA  3090               	movlw	144
  3464  0FBB  009D               	movwf	29	;volatile
  3465                           
  3466                           ;My_header_16F.h: 150: BRG16 = 0;
  3467  0FBC  119F               	bcf	31,3	;volatile
  3468                           
  3469                           ;My_header_16F.h: 151: SPBRGH = 0;
  3470  0FBD  019C               	clrf	28	;volatile
  3471                           
  3472                           ;My_header_16F.h: 152: SPBRGL = 207;
  3473  0FBE  30CF               	movlw	207
  3474  0FBF  009B               	movwf	27	;volatile
  3475                           
  3476                           ;My_header_16F.h: 153: TXSTA = 0x24;
  3477  0FC0  3024               	movlw	36
  3478  0FC1  009E               	movwf	30	;volatile
  3479                           
  3480                           ;My_header_16F.h: 154: PIE1bits.RCIE = 1;
  3481  0FC2  0021               	movlb	1	; select bank1
  3482  0FC3  1691               	bsf	17,5	;volatile
  3483  0FC4  0008               	return
  3484  0FC5                     __end_of_UART_init:	
  3485                           
  3486                           	psect	text19
  3487  056B                     __ptext19:	
  3488 ;; *************** function _LCD_init *****************
  3489 ;; Defined at:
  3490 ;;		line 334 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  3491 ;; Parameters:    Size  Location     Type
  3492 ;;		None
  3493 ;; Auto vars:     Size  Location     Type
  3494 ;;		None
  3495 ;; Return value:  Size  Location     Type
  3496 ;;		None               void
  3497 ;; Registers used:
  3498 ;;		wreg, status,2, status,0, pclath, cstack
  3499 ;; Tracked objects:
  3500 ;;		On entry : 0/0
  3501 ;;		On exit  : 0/0
  3502 ;;		Unchanged: 0/0
  3503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3504 ;;      Params:         0       0       0       0       0       0
  3505 ;;      Locals:         0       0       0       0       0       0
  3506 ;;      Temps:          0       3       0       0       0       0
  3507 ;;      Totals:         0       3       0       0       0       0
  3508 ;;Total ram usage:        3 bytes
  3509 ;; Hardware stack levels used:    1
  3510 ;; Hardware stack levels required when called:    7
  3511 ;; This function calls:
  3512 ;;		_LCD_Clear
  3513 ;;		_LCD_Command
  3514 ;; This function is called by:
  3515 ;;		_main
  3516 ;; This function uses a non-reentrant model
  3517 ;;
  3518                           
  3519                           
  3520                           ;psect for function _LCD_init
  3521  056B                     _LCD_init:	
  3522                           
  3523                           ;My_header_16F.h: 335: _delay((unsigned long)((40)*(32000000/4000.0)));
  3524                           
  3525                           ;incstack = 0
  3526                           ; Regs used in _LCD_init: [wreg+status,2+status,0+pclath+cstack]
  3527  056B  3002               	movlw	2
  3528  056C  0020               	movlb	0	; select bank0
  3529  056D  00AB               	movwf	??_LCD_init+2
  3530  056E  30A0               	movlw	160
  3531  056F  00AA               	movwf	??_LCD_init+1
  3532  0570  3092               	movlw	146
  3533  0571  00A9               	movwf	??_LCD_init
  3534  0572                     u1657:	
  3535  0572  0BA9               	decfsz	??_LCD_init,f
  3536  0573  2D72               	goto	u1657
  3537  0574  0BAA               	decfsz	??_LCD_init+1,f
  3538  0575  2D72               	goto	u1657
  3539  0576  0BAB               	decfsz	??_LCD_init+2,f
  3540  0577  2D72               	goto	u1657
  3541  0578  0000               	nop
  3542                           
  3543                           ;My_header_16F.h: 336: LCD_Command(0x38);
  3544  0579  3038               	movlw	56
  3545  057A  3187  2755  3185   	fcall	_LCD_Command
  3546                           
  3547                           ;My_header_16F.h: 337: LCD_Command(0x39);
  3548  057D  3039               	movlw	57
  3549  057E  3187  2755  3185   	fcall	_LCD_Command
  3550                           
  3551                           ;My_header_16F.h: 338: LCD_Command(0x14);
  3552  0581  3014               	movlw	20
  3553  0582  3187  2755  3185   	fcall	_LCD_Command
  3554                           
  3555                           ;My_header_16F.h: 339: LCD_Command(0x70);
  3556  0585  3070               	movlw	112
  3557  0586  3187  2755  3185   	fcall	_LCD_Command
  3558                           
  3559                           ;My_header_16F.h: 340: LCD_Command(0x56);
  3560  0589  3056               	movlw	86
  3561  058A  3187  2755  3185   	fcall	_LCD_Command
  3562                           
  3563                           ;My_header_16F.h: 341: LCD_Command(0x6C);
  3564  058D  306C               	movlw	108
  3565  058E  3187  2755  3185   	fcall	_LCD_Command
  3566                           
  3567                           ;My_header_16F.h: 342: _delay((unsigned long)((200)*(32000000/4000.0)));
  3568  0591  3009               	movlw	9
  3569  0592  0020               	movlb	0	; select bank0
  3570  0593  00AB               	movwf	??_LCD_init+2
  3571  0594  301E               	movlw	30
  3572  0595  00AA               	movwf	??_LCD_init+1
  3573  0596  30EB               	movlw	235
  3574  0597  00A9               	movwf	??_LCD_init
  3575  0598                     u1667:	
  3576  0598  0BA9               	decfsz	??_LCD_init,f
  3577  0599  2D98               	goto	u1667
  3578  059A  0BAA               	decfsz	??_LCD_init+1,f
  3579  059B  2D98               	goto	u1667
  3580  059C  0BAB               	decfsz	??_LCD_init+2,f
  3581  059D  2D98               	goto	u1667
  3582  059E  0000               	nop
  3583                           
  3584                           ;My_header_16F.h: 343: LCD_Command(0x38);
  3585  059F  3038               	movlw	56
  3586  05A0  3187  2755  3185   	fcall	_LCD_Command
  3587                           
  3588                           ;My_header_16F.h: 344: LCD_Command(0x0C);
  3589  05A3  300C               	movlw	12
  3590  05A4  3187  2755  3185   	fcall	_LCD_Command
  3591                           
  3592                           ;My_header_16F.h: 345: LCD_Command(0x06);
  3593  05A7  3006               	movlw	6
  3594  05A8  3187  2755  3185   	fcall	_LCD_Command
  3595                           
  3596                           ;My_header_16F.h: 346: LCD_Clear();
  3597  05AB  318F  2793         	fcall	_LCD_Clear
  3598  05AD  0008               	return
  3599  05AE                     __end_of_LCD_init:	
  3600                           
  3601                           	psect	text20
  3602  0F93                     __ptext20:	
  3603 ;; *************** function _LCD_Clear *****************
  3604 ;; Defined at:
  3605 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;		None
  3608 ;; Auto vars:     Size  Location     Type
  3609 ;;		None
  3610 ;; Return value:  Size  Location     Type
  3611 ;;		None               void
  3612 ;; Registers used:
  3613 ;;		wreg, status,2, status,0, pclath, cstack
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3619 ;;      Params:         0       0       0       0       0       0
  3620 ;;      Locals:         0       0       0       0       0       0
  3621 ;;      Temps:          0       2       0       0       0       0
  3622 ;;      Totals:         0       2       0       0       0       0
  3623 ;;Total ram usage:        2 bytes
  3624 ;; Hardware stack levels used:    1
  3625 ;; Hardware stack levels required when called:    6
  3626 ;; This function calls:
  3627 ;;		_LCD_Command
  3628 ;; This function is called by:
  3629 ;;		_LCD_init
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633                           
  3634                           ;psect for function _LCD_Clear
  3635  0F93                     _LCD_Clear:	
  3636                           
  3637                           ;My_header_16F.h: 278: LCD_Command(0x01);
  3638                           
  3639                           ;incstack = 0
  3640                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  3641  0F93  3001               	movlw	1
  3642  0F94  3187  2755  318F   	fcall	_LCD_Command
  3643                           
  3644                           ;My_header_16F.h: 279: _delay((unsigned long)((1100)*(32000000/4000000.0)));
  3645  0F97  300C               	movlw	12
  3646  0F98  0020               	movlb	0	; select bank0
  3647  0F99  00A8               	movwf	??_LCD_Clear+1
  3648  0F9A  306C               	movlw	108
  3649  0F9B  00A7               	movwf	??_LCD_Clear
  3650  0F9C                     u1677:	
  3651  0F9C  0BA7               	decfsz	??_LCD_Clear,f
  3652  0F9D  2F9C               	goto	u1677
  3653  0F9E  0BA8               	decfsz	??_LCD_Clear+1,f
  3654  0F9F  2F9C               	goto	u1677
  3655  0FA0  0000               	nop
  3656  0FA1  0008               	return
  3657  0FA2                     __end_of_LCD_Clear:	
  3658                           
  3659                           	psect	text21
  3660  0755                     __ptext21:	
  3661 ;; *************** function _LCD_Command *****************
  3662 ;; Defined at:
  3663 ;;		line 264 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;  c               1    wreg     unsigned char 
  3666 ;; Auto vars:     Size  Location     Type
  3667 ;;  c               1    5[BANK0 ] unsigned char 
  3668 ;;  ans             1    6[BANK0 ] unsigned char 
  3669 ;; Return value:  Size  Location     Type
  3670 ;;		None               void
  3671 ;; Registers used:
  3672 ;;		wreg, status,2, status,0, pclath, cstack
  3673 ;; Tracked objects:
  3674 ;;		On entry : 0/0
  3675 ;;		On exit  : 0/0
  3676 ;;		Unchanged: 0/0
  3677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3678 ;;      Params:         0       0       0       0       0       0
  3679 ;;      Locals:         0       2       0       0       0       0
  3680 ;;      Temps:          0       1       0       0       0       0
  3681 ;;      Totals:         0       3       0       0       0       0
  3682 ;;Total ram usage:        3 bytes
  3683 ;; Hardware stack levels used:    1
  3684 ;; Hardware stack levels required when called:    5
  3685 ;; This function calls:
  3686 ;;		_I2C_Send
  3687 ;;		_I2C_Start
  3688 ;;		_I2C_Stop
  3689 ;; This function is called by:
  3690 ;;		_LCD_Clear
  3691 ;;		_LCD_SetCursor
  3692 ;;		_LCD_init
  3693 ;; This function uses a non-reentrant model
  3694 ;;
  3695                           
  3696                           
  3697                           ;psect for function _LCD_Command
  3698  0755                     _LCD_Command:	
  3699                           
  3700                           ;incstack = 0
  3701                           ; Regs used in _LCD_Command: [wreg+status,2+status,0+pclath+cstack]
  3702                           ;LCD_Command@c stored from wreg
  3703  0755  0020               	movlb	0	; select bank0
  3704  0756  00A5               	movwf	LCD_Command@c
  3705                           
  3706                           ;My_header_16F.h: 265: uint8_t ans;
  3707                           ;My_header_16F.h: 267: ans = I2C_Start(0x3E, 0);
  3708  0757  01A2               	clrf	I2C_Start@rw
  3709  0758  303E               	movlw	62
  3710  0759  3187  27AD  3187   	fcall	_I2C_Start
  3711  075C  0020               	movlb	0	; select bank0
  3712  075D  00A4               	movwf	??_LCD_Command
  3713  075E  0824               	movf	??_LCD_Command,w
  3714  075F  00A6               	movwf	LCD_Command@ans
  3715                           
  3716                           ;My_header_16F.h: 268: if (ans == 0) {
  3717  0760  08A6               	movf	LCD_Command@ans,f
  3718  0761  1D03               	skipz
  3719  0762  2F6C               	goto	l208
  3720                           
  3721                           ;My_header_16F.h: 270: I2C_Send(0b10000000);
  3722  0763  3080               	movlw	128
  3723  0764  318F  27A2  3187   	fcall	_I2C_Send
  3724                           
  3725                           ;My_header_16F.h: 271: I2C_Send(c);
  3726  0767  0020               	movlb	0	; select bank0
  3727  0768  0825               	movf	LCD_Command@c,w
  3728  0769  318F  27A2  3187   	fcall	_I2C_Send
  3729  076C                     l208:	
  3730                           
  3731                           ;My_header_16F.h: 272: }
  3732                           ;My_header_16F.h: 273: I2C_Stop();
  3733  076C  318F  275C  3187   	fcall	_I2C_Stop
  3734                           
  3735                           ;My_header_16F.h: 274: _delay((unsigned long)((26)*(32000000/4000000.0)));
  3736  076F  3045               	movlw	69
  3737  0770  0020               	movlb	0	; select bank0
  3738  0771  00A4               	movwf	??_LCD_Command
  3739  0772                     u1687:	
  3740  0772  0BA4               	decfsz	??_LCD_Command,f
  3741  0773  2F72               	goto	u1687
  3742  0774  0008               	return
  3743  0775                     __end_of_LCD_Command:	
  3744                           
  3745                           	psect	text22
  3746  0F5C                     __ptext22:	
  3747 ;; *************** function _I2C_Stop *****************
  3748 ;; Defined at:
  3749 ;;		line 234 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;		None
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;		None
  3754 ;; Return value:  Size  Location     Type
  3755 ;;		None               void
  3756 ;; Registers used:
  3757 ;;		wreg, status,2, status,0, pclath, cstack
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3763 ;;      Params:         0       0       0       0       0       0
  3764 ;;      Locals:         0       0       0       0       0       0
  3765 ;;      Temps:          0       0       0       0       0       0
  3766 ;;      Totals:         0       0       0       0       0       0
  3767 ;;Total ram usage:        0 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    4
  3770 ;; This function calls:
  3771 ;;		_I2C_IdleCheck
  3772 ;; This function is called by:
  3773 ;;		_LCD_Command
  3774 ;;		_LCD_Putc
  3775 ;;		_LCD_Puts
  3776 ;;		_RTC_Write
  3777 ;;		_RTC_Read
  3778 ;;		_LCD_CreateChar
  3779 ;;		_TM_init
  3780 ;;		_TM_Read
  3781 ;; This function uses a non-reentrant model
  3782 ;;
  3783                           
  3784                           
  3785                           ;psect for function _I2C_Stop
  3786  0F5C                     _I2C_Stop:	
  3787                           
  3788                           ;My_header_16F.h: 236: I2C_IdleCheck(0x5);
  3789                           
  3790                           ;incstack = 0
  3791                           ; Regs used in _I2C_Stop: [wreg+status,2+status,0+pclath+cstack]
  3792  0F5C  3005               	movlw	5
  3793  0F5D  318F  2784         	fcall	_I2C_IdleCheck
  3794                           
  3795                           ;My_header_16F.h: 237: SSP1CON2bits.PEN = 1;
  3796  0F5F  0024               	movlb	4	; select bank4
  3797  0F60  1516               	bsf	22,2	;volatile
  3798  0F61  0008               	return
  3799  0F62                     __end_of_I2C_Stop:	
  3800                           
  3801                           	psect	text23
  3802  07AD                     __ptext23:	
  3803 ;; *************** function _I2C_Start *****************
  3804 ;; Defined at:
  3805 ;;		line 210 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  3806 ;; Parameters:    Size  Location     Type
  3807 ;;  adrs            1    wreg     unsigned char 
  3808 ;;  rw              1    2[BANK0 ] unsigned char 
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;  adrs            1    3[BANK0 ] unsigned char 
  3811 ;; Return value:  Size  Location     Type
  3812 ;;                  1    wreg      unsigned char 
  3813 ;; Registers used:
  3814 ;;		wreg, status,2, status,0, pclath, cstack
  3815 ;; Tracked objects:
  3816 ;;		On entry : 0/0
  3817 ;;		On exit  : 0/0
  3818 ;;		Unchanged: 0/0
  3819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3820 ;;      Params:         0       1       0       0       0       0
  3821 ;;      Locals:         0       1       0       0       0       0
  3822 ;;      Temps:          0       0       0       0       0       0
  3823 ;;      Totals:         0       2       0       0       0       0
  3824 ;;Total ram usage:        2 bytes
  3825 ;; Hardware stack levels used:    1
  3826 ;; Hardware stack levels required when called:    4
  3827 ;; This function calls:
  3828 ;;		_I2C_IdleCheck
  3829 ;; This function is called by:
  3830 ;;		_LCD_Command
  3831 ;;		_LCD_Putc
  3832 ;;		_LCD_Puts
  3833 ;;		_RTC_Write
  3834 ;;		_RTC_Read
  3835 ;;		_LCD_CreateChar
  3836 ;;		_TM_init
  3837 ;;		_TM_Read
  3838 ;; This function uses a non-reentrant model
  3839 ;;
  3840                           
  3841                           
  3842                           ;psect for function _I2C_Start
  3843  07AD                     _I2C_Start:	
  3844                           
  3845                           ;incstack = 0
  3846                           ; Regs used in _I2C_Start: [wreg+status,2+status,0+pclath+cstack]
  3847                           ;I2C_Start@adrs stored from wreg
  3848  07AD  0020               	movlb	0	; select bank0
  3849  07AE  00A3               	movwf	I2C_Start@adrs
  3850                           
  3851                           ;My_header_16F.h: 212: I2C_IdleCheck(0x5);
  3852  07AF  3005               	movlw	5
  3853  07B0  318F  2784  3187   	fcall	_I2C_IdleCheck
  3854                           
  3855                           ;My_header_16F.h: 213: SSP1CON2bits.SEN = 1;
  3856  07B3  0024               	movlb	4	; select bank4
  3857  07B4  1416               	bsf	22,0	;volatile
  3858                           
  3859                           ;My_header_16F.h: 215: I2C_IdleCheck(0x5);
  3860  07B5  3005               	movlw	5
  3861  07B6  318F  2784  3187   	fcall	_I2C_IdleCheck
  3862                           
  3863                           ;My_header_16F.h: 216: SSP1IF = 0;
  3864  07B9  0020               	movlb	0	; select bank0
  3865  07BA  1191               	bcf	17,3	;volatile
  3866                           
  3867                           ;My_header_16F.h: 217: SSP1BUF = (uint8_t) ((adrs << 1) + rw);
  3868  07BB  3523               	lslf	I2C_Start@adrs,w
  3869  07BC  0722               	addwf	I2C_Start@rw,w
  3870  07BD  0024               	movlb	4	; select bank4
  3871  07BE  0091               	movwf	17	;volatile
  3872  07BF                     l184:	
  3873                           ;My_header_16F.h: 218: while (!SSP1IF);
  3874                           
  3875  07BF  0020               	movlb	0	; select bank0
  3876  07C0  1D91               	btfss	17,3	;volatile
  3877  07C1  2FBF               	goto	l184
  3878                           
  3879                           ;My_header_16F.h: 219: return SSP1CON2bits.ACKSTAT;
  3880  07C2  0024               	movlb	4	; select bank4
  3881  07C3  0E16               	swapf	22,w	;volatile
  3882  07C4  0C89               	rrf	9,f
  3883  07C5  0C89               	rrf	9,f
  3884  07C6  3901               	andlw	1
  3885  07C7  0008               	return
  3886  07C8                     __end_of_I2C_Start:	
  3887                           
  3888                           	psect	text24
  3889  0FA2                     __ptext24:	
  3890 ;; *************** function _I2C_Send *****************
  3891 ;; Defined at:
  3892 ;;		line 240 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;  data            1    wreg     unsigned char 
  3895 ;; Auto vars:     Size  Location     Type
  3896 ;;  data            1    2[BANK0 ] unsigned char 
  3897 ;; Return value:  Size  Location     Type
  3898 ;;                  1    wreg      unsigned char 
  3899 ;; Registers used:
  3900 ;;		wreg, status,2, status,0, pclath, cstack
  3901 ;; Tracked objects:
  3902 ;;		On entry : 0/0
  3903 ;;		On exit  : 0/0
  3904 ;;		Unchanged: 0/0
  3905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3906 ;;      Params:         0       0       0       0       0       0
  3907 ;;      Locals:         0       1       0       0       0       0
  3908 ;;      Temps:          0       0       0       0       0       0
  3909 ;;      Totals:         0       1       0       0       0       0
  3910 ;;Total ram usage:        1 bytes
  3911 ;; Hardware stack levels used:    1
  3912 ;; Hardware stack levels required when called:    4
  3913 ;; This function calls:
  3914 ;;		_I2C_IdleCheck
  3915 ;; This function is called by:
  3916 ;;		_LCD_Command
  3917 ;;		_LCD_Putc
  3918 ;;		_LCD_Puts
  3919 ;;		_RTC_Write
  3920 ;;		_RTC_Read
  3921 ;;		_LCD_CreateChar
  3922 ;;		_TM_init
  3923 ;;		_TM_Read
  3924 ;; This function uses a non-reentrant model
  3925 ;;
  3926                           
  3927                           
  3928                           ;psect for function _I2C_Send
  3929  0FA2                     _I2C_Send:	
  3930                           
  3931                           ;incstack = 0
  3932                           ; Regs used in _I2C_Send: [wreg+status,2+status,0+pclath+cstack]
  3933                           ;I2C_Send@data stored from wreg
  3934  0FA2  0020               	movlb	0	; select bank0
  3935  0FA3  00A2               	movwf	I2C_Send@data
  3936                           
  3937                           ;My_header_16F.h: 241: I2C_IdleCheck(0x5);
  3938  0FA4  3005               	movlw	5
  3939  0FA5  318F  2784  318F   	fcall	_I2C_IdleCheck
  3940                           
  3941                           ;My_header_16F.h: 242: SSP1IF = 0;
  3942  0FA8  0020               	movlb	0	; select bank0
  3943  0FA9  1191               	bcf	17,3	;volatile
  3944                           
  3945                           ;My_header_16F.h: 243: SSP1BUF = data;
  3946  0FAA  0822               	movf	I2C_Send@data,w
  3947  0FAB  0024               	movlb	4	; select bank4
  3948  0FAC  0091               	movwf	17	;volatile
  3949  0FAD                     l199:	
  3950                           ;My_header_16F.h: 244: while (!SSP1IF);
  3951                           
  3952  0FAD  0020               	movlb	0	; select bank0
  3953  0FAE  1D91               	btfss	17,3	;volatile
  3954  0FAF  2FAD               	goto	l199
  3955                           
  3956                           ;My_header_16F.h: 245: return SSP1CON2bits.ACKSTAT;
  3957                           ;	Return value of _I2C_Send is never used
  3958  0FB0  0024               	movlb	4	; select bank4
  3959  0FB1  0816               	movf	22,w	;volatile
  3960  0FB2  0008               	return
  3961  0FB3                     __end_of_I2C_Send:	
  3962                           
  3963                           	psect	text25
  3964  0F84                     __ptext25:	
  3965 ;; *************** function _I2C_IdleCheck *****************
  3966 ;; Defined at:
  3967 ;;		line 196 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  3968 ;; Parameters:    Size  Location     Type
  3969 ;;  mask            1    wreg     unsigned char 
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;  mask            1    1[BANK0 ] unsigned char 
  3972 ;; Return value:  Size  Location     Type
  3973 ;;		None               void
  3974 ;; Registers used:
  3975 ;;		wreg, status,2, status,0
  3976 ;; Tracked objects:
  3977 ;;		On entry : 0/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3981 ;;      Params:         0       0       0       0       0       0
  3982 ;;      Locals:         0       1       0       0       0       0
  3983 ;;      Temps:          0       1       0       0       0       0
  3984 ;;      Totals:         0       2       0       0       0       0
  3985 ;;Total ram usage:        2 bytes
  3986 ;; Hardware stack levels used:    1
  3987 ;; Hardware stack levels required when called:    3
  3988 ;; This function calls:
  3989 ;;		Nothing
  3990 ;; This function is called by:
  3991 ;;		_I2C_Start
  3992 ;;		_I2C_rStart
  3993 ;;		_I2C_Stop
  3994 ;;		_I2C_Send
  3995 ;;		_I2C_Receive
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998                           
  3999                           
  4000                           ;psect for function _I2C_IdleCheck
  4001  0F84                     _I2C_IdleCheck:	
  4002                           
  4003                           ;incstack = 0
  4004                           ; Regs used in _I2C_IdleCheck: [wreg+status,2+status,0]
  4005                           ;I2C_IdleCheck@mask stored from wreg
  4006  0F84  0020               	movlb	0	; select bank0
  4007  0F85  00A1               	movwf	I2C_IdleCheck@mask
  4008  0F86                     l1452:	
  4009                           ;My_header_16F.h: 197: while ((SSP1CON2 & 0x1F) | (SSP1STAT & mask));
  4010                           
  4011  0F86  0821               	movf	I2C_IdleCheck@mask,w
  4012  0F87  0024               	movlb	4	; select bank4
  4013  0F88  0514               	andwf	20,w	;volatile
  4014  0F89  0020               	movlb	0	; select bank0
  4015  0F8A  00A0               	movwf	??_I2C_IdleCheck
  4016  0F8B  0024               	movlb	4	; select bank4
  4017  0F8C  0816               	movf	22,w	;volatile
  4018  0F8D  391F               	andlw	31
  4019  0F8E  0020               	movlb	0	; select bank0
  4020  0F8F  0420               	iorwf	??_I2C_IdleCheck,w
  4021  0F90  1903               	btfsc	3,2
  4022  0F91  0008               	return
  4023  0F92  2F86               	goto	l1452
  4024  0F93                     __end_of_I2C_IdleCheck:	
  4025                           
  4026                           	psect	text26
  4027  0F6D                     __ptext26:	
  4028 ;; *************** function _I2C_init *****************
  4029 ;; Defined at:
  4030 ;;		line 200 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;		None
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;		None
  4035 ;; Return value:  Size  Location     Type
  4036 ;;		None               void
  4037 ;; Registers used:
  4038 ;;		wreg
  4039 ;; Tracked objects:
  4040 ;;		On entry : 0/0
  4041 ;;		On exit  : 0/0
  4042 ;;		Unchanged: 0/0
  4043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4044 ;;      Params:         0       0       0       0       0       0
  4045 ;;      Locals:         0       0       0       0       0       0
  4046 ;;      Temps:          0       0       0       0       0       0
  4047 ;;      Totals:         0       0       0       0       0       0
  4048 ;;Total ram usage:        0 bytes
  4049 ;; Hardware stack levels used:    1
  4050 ;; Hardware stack levels required when called:    3
  4051 ;; This function calls:
  4052 ;;		Nothing
  4053 ;; This function is called by:
  4054 ;;		_main
  4055 ;; This function uses a non-reentrant model
  4056 ;;
  4057                           
  4058                           
  4059                           ;psect for function _I2C_init
  4060  0F6D                     _I2C_init:	
  4061                           
  4062                           ;My_header_16F.h: 201: SSP1STAT = 0b10000000;
  4063                           
  4064                           ;incstack = 0
  4065                           ; Regs used in _I2C_init: [wreg]
  4066  0F6D  3080               	movlw	128
  4067  0F6E  0024               	movlb	4	; select bank4
  4068  0F6F  0094               	movwf	20	;volatile
  4069                           
  4070                           ;My_header_16F.h: 202: SSP1CON1 = 0b00101000;
  4071  0F70  3028               	movlw	40
  4072  0F71  0095               	movwf	21	;volatile
  4073                           
  4074                           ;My_header_16F.h: 203: SSP1ADD = 0x13;
  4075  0F72  3013               	movlw	19
  4076  0F73  0092               	movwf	18	;volatile
  4077                           
  4078                           ;My_header_16F.h: 206: SSP1IF = 0;
  4079  0F74  0020               	movlb	0	; select bank0
  4080  0F75  1191               	bcf	17,3	;volatile
  4081                           
  4082                           ;My_header_16F.h: 207: BCL1IF = 0;
  4083  0F76  1192               	bcf	18,3	;volatile
  4084  0F77  0008               	return
  4085  0F78                     __end_of_I2C_init:	
  4086                           
  4087                           	psect	intentry
  4088  0004                     __pintentry:	
  4089 ;; *************** function _isr *****************
  4090 ;; Defined at:
  4091 ;;		line 40 in file "PIC16F1827-I2C_LCD_RTC01.c"
  4092 ;; Parameters:    Size  Location     Type
  4093 ;;		None
  4094 ;; Auto vars:     Size  Location     Type
  4095 ;;		None
  4096 ;; Return value:  Size  Location     Type
  4097 ;;		None               void
  4098 ;; Registers used:
  4099 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4100 ;; Tracked objects:
  4101 ;;		On entry : 0/0
  4102 ;;		On exit  : 0/0
  4103 ;;		Unchanged: 0/0
  4104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4105 ;;      Params:         0       0       0       0       0       0
  4106 ;;      Locals:         0       0       0       0       0       0
  4107 ;;      Temps:          2       0       0       0       0       0
  4108 ;;      Totals:         2       0       0       0       0       0
  4109 ;;Total ram usage:        2 bytes
  4110 ;; Hardware stack levels used:    1
  4111 ;; Hardware stack levels required when called:    2
  4112 ;; This function calls:
  4113 ;;		_button_timer_interrupt
  4114 ;;		_interrupt_TXIF
  4115 ;;		i1_tx_send
  4116 ;; This function is called by:
  4117 ;;		Interrupt level 1
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121  0004                     _isr:	
  4122                           
  4123                           ;incstack = 0
  4124                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4125  0004  147E               	bsf	126,0	;set compiler interrupt flag
  4126  0005  3180               	pagesel	$
  4127  0006  0020               	movlb	0	; select bank0
  4128  0007  087F               	movf	127,w
  4129  0008  00F7               	movwf	??_isr+1
  4130                           
  4131                           ;PIC16F1827-I2C_LCD_RTC01.c: 41: interrupt_TXIF();
  4132  0009  318F  27E9  3180   	fcall	_interrupt_TXIF
  4133                           
  4134                           ;PIC16F1827-I2C_LCD_RTC01.c: 42: if (RCIF) {
  4135  000C  0020               	movlb	0	; select bank0
  4136  000D  1E91               	btfss	17,5	;volatile
  4137  000E  2815               	goto	i1l1972
  4138                           
  4139                           ;PIC16F1827-I2C_LCD_RTC01.c: 43: RCIF = 0;
  4140  000F  1291               	bcf	17,5	;volatile
  4141                           
  4142                           ;PIC16F1827-I2C_LCD_RTC01.c: 44: tx_send(RCREG);
  4143  0010  0023               	movlb	3	; select bank3
  4144  0011  0819               	movf	25,w	;volatile
  4145  0012  318F  2762  3180   	fcall	i1_tx_send
  4146  0015                     i1l1972:	
  4147                           
  4148                           ;PIC16F1827-I2C_LCD_RTC01.c: 45: }
  4149                           ;PIC16F1827-I2C_LCD_RTC01.c: 46: if (TMR1IF == 1) {
  4150  0015  0020               	movlb	0	; select bank0
  4151  0016  1C11               	btfss	17,0	;volatile
  4152  0017  283B               	goto	i1l281
  4153                           
  4154                           ;PIC16F1827-I2C_LCD_RTC01.c: 47: TMR1IF = 0;
  4155  0018  1011               	bcf	17,0	;volatile
  4156                           
  4157                           ;PIC16F1827-I2C_LCD_RTC01.c: 48: cnt_t1++;
  4158  0019  3001               	movlw	1
  4159  001A  00F6               	movwf	??_isr
  4160  001B  0876               	movf	??_isr,w
  4161  001C  07F8               	addwf	_cnt_t1,f
  4162                           
  4163                           ;PIC16F1827-I2C_LCD_RTC01.c: 49: if (cnt_t1 % 16 == 0)LATB0 = ~LATB0;
  4164  001D  0878               	movf	_cnt_t1,w
  4165  001E  390F               	andlw	15
  4166  001F  1D03               	btfss	3,2
  4167  0020  2824               	goto	i1l1982
  4168  0021  3001               	movlw	1
  4169  0022  0022               	movlb	2	; select bank2
  4170  0023  068D               	xorwf	13,f
  4171  0024                     i1l1982:	
  4172                           
  4173                           ;PIC16F1827-I2C_LCD_RTC01.c: 50: button_timer_interrupt(&sw_RA0, !RA0);
  4174  0024  1003               	clrc
  4175  0025  0020               	movlb	0	; select bank0
  4176  0026  1C0C               	btfss	12,0	;volatile
  4177  0027  1403               	setc
  4178  0028  3000               	movlw	0
  4179  0029  1803               	btfsc	3,0
  4180  002A  3001               	movlw	1
  4181  002B  00F0               	movwf	button_timer_interrupt@sw_value
  4182  002C  3043               	movlw	_sw_RA0& (0+255)
  4183  002D  3184  2416  3180   	fcall	_button_timer_interrupt
  4184                           
  4185                           ;PIC16F1827-I2C_LCD_RTC01.c: 51: button_timer_interrupt(&sw_RA1, !RA1);
  4186  0030  1003               	clrc
  4187  0031  0020               	movlb	0	; select bank0
  4188  0032  1C8C               	btfss	12,1	;volatile
  4189  0033  1403               	setc
  4190  0034  3000               	movlw	0
  4191  0035  1803               	btfsc	3,0
  4192  0036  3001               	movlw	1
  4193  0037  00F0               	movwf	button_timer_interrupt@sw_value
  4194  0038  3079               	movlw	_sw_RA1& (0+255)
  4195  0039  3184  2416         	fcall	_button_timer_interrupt
  4196  003B                     i1l281:	
  4197  003B  0877               	movf	??_isr+1,w
  4198  003C  0020               	movlb	0	; select bank0
  4199  003D  00FF               	movwf	127
  4200  003E  107E               	bcf	126,0	;clear compiler interrupt flag
  4201  003F  0009               	retfie
  4202  0040                     __end_of_isr:	
  4203                           
  4204                           	psect	text28
  4205  0F62                     __ptext28:	
  4206 ;; *************** function i1_tx_send *****************
  4207 ;; Defined at:
  4208 ;;		line 158 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;  asciicode       1    wreg     unsigned char 
  4211 ;; Auto vars:     Size  Location     Type
  4212 ;;  asciicode       1    5[COMMON] unsigned char 
  4213 ;; Return value:  Size  Location     Type
  4214 ;;		None               void
  4215 ;; Registers used:
  4216 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4217 ;; Tracked objects:
  4218 ;;		On entry : 0/0
  4219 ;;		On exit  : 0/0
  4220 ;;		Unchanged: 0/0
  4221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4222 ;;      Params:         0       0       0       0       0       0
  4223 ;;      Locals:         1       0       0       0       0       0
  4224 ;;      Temps:          1       0       0       0       0       0
  4225 ;;      Totals:         2       0       0       0       0       0
  4226 ;;Total ram usage:        2 bytes
  4227 ;; Hardware stack levels used:    1
  4228 ;; Hardware stack levels required when called:    1
  4229 ;; This function calls:
  4230 ;;		i1_ringbuf_push
  4231 ;; This function is called by:
  4232 ;;		_isr
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           
  4237                           ;psect for function i1_tx_send
  4238  0F62                     i1_tx_send:	
  4239                           
  4240                           ;incstack = 0
  4241                           ; Regs used in i1_tx_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4242                           ;i1tx_send@asciicode stored from wreg
  4243  0F62  00F5               	movwf	i1tx_send@asciicode
  4244                           
  4245                           ;My_header_16F.h: 159: ringbuf_push(&tx_buf, asciicode);
  4246  0F63  0875               	movf	i1tx_send@asciicode,w
  4247  0F64  00F4               	movwf	??i1_tx_send
  4248  0F65  0874               	movf	??i1_tx_send,w
  4249  0F66  00F0               	movwf	i1ringbuf_push@asciicode
  4250  0F67  303F               	movlw	_tx_buf& (0+255)
  4251  0F68  3186  269F         	fcall	i1_ringbuf_push
  4252                           
  4253                           ;My_header_16F.h: 160: PIE1bits.TXIE = 1;
  4254  0F6A  0021               	movlb	1	; select bank1
  4255  0F6B  1611               	bsf	17,4	;volatile
  4256  0F6C  0008               	return
  4257  0F6D                     __end_ofi1_tx_send:	
  4258                           
  4259                           	psect	text29
  4260  069F                     __ptext29:	
  4261 ;; *************** function i1_ringbuf_push *****************
  4262 ;; Defined at:
  4263 ;;		line 118 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  4264 ;; Parameters:    Size  Location     Type
  4265 ;;  rb              1    wreg     PTR struct ringbuf
  4266 ;;		 -> tx_buf(4), 
  4267 ;;  asciicode       1    0[COMMON] unsigned char 
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;  rb              1    3[COMMON] PTR struct ringbuf
  4270 ;;		 -> tx_buf(4), 
  4271 ;; Return value:  Size  Location     Type
  4272 ;;		None               void
  4273 ;; Registers used:
  4274 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  4275 ;; Tracked objects:
  4276 ;;		On entry : 0/0
  4277 ;;		On exit  : 0/0
  4278 ;;		Unchanged: 0/0
  4279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4280 ;;      Params:         1       0       0       0       0       0
  4281 ;;      Locals:         1       0       0       0       0       0
  4282 ;;      Temps:          2       0       0       0       0       0
  4283 ;;      Totals:         4       0       0       0       0       0
  4284 ;;Total ram usage:        4 bytes
  4285 ;; Hardware stack levels used:    1
  4286 ;; This function calls:
  4287 ;;		Nothing
  4288 ;; This function is called by:
  4289 ;;		i1_tx_send
  4290 ;; This function uses a non-reentrant model
  4291 ;;
  4292                           
  4293                           
  4294                           ;psect for function i1_ringbuf_push
  4295  069F                     i1_ringbuf_push:	
  4296                           
  4297                           ;incstack = 0
  4298                           ; Regs used in i1_ringbuf_push: [wreg-fsr1h+status,2+status,0]
  4299                           ;i1ringbuf_push@rb stored from wreg
  4300  069F  00F3               	movwf	i1ringbuf_push@rb
  4301                           
  4302                           ;My_header_16F.h: 119: rb->buf[rb->head] = asciicode;
  4303  06A0  0870               	movf	i1ringbuf_push@asciicode,w
  4304  06A1  00F1               	movwf	??i1_ringbuf_push
  4305  06A2  0873               	movf	i1ringbuf_push@rb,w
  4306  06A3  0086               	movwf	6
  4307  06A4  0187               	clrf	7
  4308  06A5  0873               	movf	i1ringbuf_push@rb,w
  4309  06A6  3E02               	addlw	2
  4310  06A7  0084               	movwf	4
  4311  06A8  0185               	clrf	5
  4312  06A9  0800               	movf	0,w
  4313  06AA  0701               	addwf	1,w
  4314  06AB  00F2               	movwf	??i1_ringbuf_push+1
  4315  06AC  0872               	movf	??i1_ringbuf_push+1,w
  4316  06AD  0086               	movwf	6
  4317  06AE  0187               	clrf	7
  4318  06AF  0871               	movf	??i1_ringbuf_push,w
  4319  06B0  0081               	movwf	1
  4320                           
  4321                           ;My_header_16F.h: 120: rb->head++;
  4322  06B1  3001               	movlw	1
  4323  06B2  00F1               	movwf	??i1_ringbuf_push
  4324  06B3  0873               	movf	i1ringbuf_push@rb,w
  4325  06B4  3E02               	addlw	2
  4326  06B5  0086               	movwf	6
  4327  06B6  0187               	clrf	7
  4328  06B7  0871               	movf	??i1_ringbuf_push,w
  4329  06B8  0781               	addwf	1,f
  4330                           
  4331                           ;My_header_16F.h: 121: if (rb->head >= rb->size) {
  4332  06B9  0873               	movf	i1ringbuf_push@rb,w
  4333  06BA  3E02               	addlw	2
  4334  06BB  0086               	movwf	6
  4335  06BC  0187               	clrf	7
  4336  06BD  0A73               	incf	i1ringbuf_push@rb,w
  4337  06BE  0084               	movwf	4
  4338  06BF  0185               	clrf	5
  4339  06C0  0800               	movf	0,w
  4340  06C1  0201               	subwf	1,w
  4341  06C2  1C03               	skipc
  4342  06C3  0008               	return
  4343                           
  4344                           ;My_header_16F.h: 122: rb->head = 0;
  4345  06C4  0873               	movf	i1ringbuf_push@rb,w
  4346  06C5  3E02               	addlw	2
  4347  06C6  0086               	movwf	6
  4348  06C7  0187               	clrf	7
  4349  06C8  0181               	clrf	1
  4350  06C9  0008               	return
  4351  06CA                     __end_ofi1_ringbuf_push:	
  4352                           
  4353                           	psect	text30
  4354  0FE9                     __ptext30:	
  4355 ;; *************** function _interrupt_TXIF *****************
  4356 ;; Defined at:
  4357 ;;		line 171 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  4358 ;; Parameters:    Size  Location     Type
  4359 ;;		None
  4360 ;; Auto vars:     Size  Location     Type
  4361 ;;		None
  4362 ;; Return value:  Size  Location     Type
  4363 ;;		None               void
  4364 ;; Registers used:
  4365 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4366 ;; Tracked objects:
  4367 ;;		On entry : 0/0
  4368 ;;		On exit  : 0/0
  4369 ;;		Unchanged: 0/0
  4370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4371 ;;      Params:         0       0       0       0       0       0
  4372 ;;      Locals:         0       0       0       0       0       0
  4373 ;;      Temps:          0       0       0       0       0       0
  4374 ;;      Totals:         0       0       0       0       0       0
  4375 ;;Total ram usage:        0 bytes
  4376 ;; Hardware stack levels used:    1
  4377 ;; Hardware stack levels required when called:    1
  4378 ;; This function calls:
  4379 ;;		_ringbuf_num
  4380 ;;		_ringbuf_pop
  4381 ;; This function is called by:
  4382 ;;		_isr
  4383 ;; This function uses a non-reentrant model
  4384 ;;
  4385                           
  4386                           
  4387                           ;psect for function _interrupt_TXIF
  4388  0FE9                     _interrupt_TXIF:	
  4389                           
  4390                           ;My_header_16F.h: 172: if (TXIE && TXIF) {
  4391                           
  4392                           ;incstack = 0
  4393                           ; Regs used in _interrupt_TXIF: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4394  0FE9  0021               	movlb	1	; select bank1
  4395  0FEA  1E11               	btfss	17,4	;volatile
  4396  0FEB  0008               	return
  4397  0FEC  0020               	movlb	0	; select bank0
  4398  0FED  1E11               	btfss	17,4	;volatile
  4399  0FEE  0008               	return
  4400                           
  4401                           ;My_header_16F.h: 173: TXIF = 0;
  4402  0FEF  1211               	bcf	17,4	;volatile
  4403                           
  4404                           ;My_header_16F.h: 174: if (ringbuf_num(&tx_buf) > 0) {
  4405  0FF0  303F               	movlw	_tx_buf& (0+255)
  4406  0FF1  3186  26CA  318F   	fcall	_ringbuf_num
  4407  0FF4  3A00               	xorlw	0
  4408  0FF5  1903               	skipnz
  4409  0FF6  2FFD               	goto	i1l164
  4410                           
  4411                           ;My_header_16F.h: 175: TXREG = ringbuf_pop(&tx_buf);
  4412  0FF7  303F               	movlw	_tx_buf& (0+255)
  4413  0FF8  3186  2673         	fcall	_ringbuf_pop
  4414  0FFA  0023               	movlb	3	; select bank3
  4415  0FFB  009A               	movwf	26	;volatile
  4416                           
  4417                           ;My_header_16F.h: 176: } else {
  4418  0FFC  0008               	return
  4419  0FFD                     i1l164:	
  4420                           
  4421                           ;My_header_16F.h: 177: PIE1bits.TXIE = 0;
  4422  0FFD  0021               	movlb	1	; select bank1
  4423  0FFE  1211               	bcf	17,4	;volatile
  4424  0FFF  0008               	return
  4425  1000                     __end_of_interrupt_TXIF:	
  4426                           
  4427                           	psect	text31
  4428  0673                     __ptext31:	
  4429 ;; *************** function _ringbuf_pop *****************
  4430 ;; Defined at:
  4431 ;;		line 126 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  4432 ;; Parameters:    Size  Location     Type
  4433 ;;  rb              1    wreg     PTR struct ringbuf
  4434 ;;		 -> tx_buf(4), 
  4435 ;; Auto vars:     Size  Location     Type
  4436 ;;  rb              1    3[COMMON] PTR struct ringbuf
  4437 ;;		 -> tx_buf(4), 
  4438 ;;  ret             1    2[COMMON] unsigned char 
  4439 ;; Return value:  Size  Location     Type
  4440 ;;                  1    wreg      unsigned char 
  4441 ;; Registers used:
  4442 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  4443 ;; Tracked objects:
  4444 ;;		On entry : 0/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4448 ;;      Params:         0       0       0       0       0       0
  4449 ;;      Locals:         2       0       0       0       0       0
  4450 ;;      Temps:          2       0       0       0       0       0
  4451 ;;      Totals:         4       0       0       0       0       0
  4452 ;;Total ram usage:        4 bytes
  4453 ;; Hardware stack levels used:    1
  4454 ;; This function calls:
  4455 ;;		Nothing
  4456 ;; This function is called by:
  4457 ;;		_interrupt_TXIF
  4458 ;; This function uses a non-reentrant model
  4459 ;;
  4460                           
  4461                           
  4462                           ;psect for function _ringbuf_pop
  4463  0673                     _ringbuf_pop:	
  4464                           
  4465                           ;incstack = 0
  4466                           ; Regs used in _ringbuf_pop: [wreg-fsr1h+status,2+status,0]
  4467                           ;ringbuf_pop@rb stored from wreg
  4468  0673  00F3               	movwf	ringbuf_pop@rb
  4469                           
  4470                           ;My_header_16F.h: 127: uint8_t ret = rb->buf[rb->tail];
  4471  0674  0873               	movf	ringbuf_pop@rb,w
  4472  0675  0086               	movwf	6
  4473  0676  0187               	clrf	7
  4474  0677  0873               	movf	ringbuf_pop@rb,w
  4475  0678  3E03               	addlw	3
  4476  0679  0084               	movwf	4
  4477  067A  0185               	clrf	5
  4478  067B  0800               	movf	0,w
  4479  067C  0701               	addwf	1,w
  4480  067D  00F0               	movwf	??_ringbuf_pop
  4481  067E  0870               	movf	??_ringbuf_pop,w
  4482  067F  0086               	movwf	6
  4483  0680  0187               	clrf	7
  4484  0681  0801               	movf	1,w
  4485  0682  00F1               	movwf	??_ringbuf_pop+1
  4486  0683  0871               	movf	??_ringbuf_pop+1,w
  4487  0684  00F2               	movwf	ringbuf_pop@ret
  4488                           
  4489                           ;My_header_16F.h: 128: rb->tail++;
  4490  0685  3001               	movlw	1
  4491  0686  00F0               	movwf	??_ringbuf_pop
  4492  0687  0873               	movf	ringbuf_pop@rb,w
  4493  0688  3E03               	addlw	3
  4494  0689  0086               	movwf	6
  4495  068A  0187               	clrf	7
  4496  068B  0870               	movf	??_ringbuf_pop,w
  4497  068C  0781               	addwf	1,f
  4498                           
  4499                           ;My_header_16F.h: 129: if (rb->tail >= rb->size) {
  4500  068D  0873               	movf	ringbuf_pop@rb,w
  4501  068E  3E03               	addlw	3
  4502  068F  0086               	movwf	6
  4503  0690  0187               	clrf	7
  4504  0691  0A73               	incf	ringbuf_pop@rb,w
  4505  0692  0084               	movwf	4
  4506  0693  0185               	clrf	5
  4507  0694  0800               	movf	0,w
  4508  0695  0201               	subwf	1,w
  4509  0696  1C03               	skipc
  4510  0697  2E9D               	goto	i1l1600
  4511                           
  4512                           ;My_header_16F.h: 130: rb->tail = 0;
  4513  0698  0873               	movf	ringbuf_pop@rb,w
  4514  0699  3E03               	addlw	3
  4515  069A  0086               	movwf	6
  4516  069B  0187               	clrf	7
  4517  069C  0181               	clrf	1
  4518  069D                     i1l1600:	
  4519                           
  4520                           ;My_header_16F.h: 131: }
  4521                           ;My_header_16F.h: 132: return ret;
  4522  069D  0872               	movf	ringbuf_pop@ret,w
  4523  069E  0008               	return
  4524  069F                     __end_of_ringbuf_pop:	
  4525                           
  4526                           	psect	text32
  4527  06CA                     __ptext32:	
  4528 ;; *************** function _ringbuf_num *****************
  4529 ;; Defined at:
  4530 ;;		line 135 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  4531 ;; Parameters:    Size  Location     Type
  4532 ;;  rb              1    wreg     PTR struct ringbuf
  4533 ;;		 -> tx_buf(4), 
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;  rb              1    1[COMMON] PTR struct ringbuf
  4536 ;;		 -> tx_buf(4), 
  4537 ;; Return value:  Size  Location     Type
  4538 ;;                  1    wreg      unsigned char 
  4539 ;; Registers used:
  4540 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  4541 ;; Tracked objects:
  4542 ;;		On entry : 0/0
  4543 ;;		On exit  : 0/0
  4544 ;;		Unchanged: 0/0
  4545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4546 ;;      Params:         0       0       0       0       0       0
  4547 ;;      Locals:         1       0       0       0       0       0
  4548 ;;      Temps:          1       0       0       0       0       0
  4549 ;;      Totals:         2       0       0       0       0       0
  4550 ;;Total ram usage:        2 bytes
  4551 ;; Hardware stack levels used:    1
  4552 ;; This function calls:
  4553 ;;		Nothing
  4554 ;; This function is called by:
  4555 ;;		_interrupt_TXIF
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           
  4560                           ;psect for function _ringbuf_num
  4561  06CA                     _ringbuf_num:	
  4562                           
  4563                           ;incstack = 0
  4564                           ; Regs used in _ringbuf_num: [wreg-fsr1h+status,2+status,0]
  4565                           ;ringbuf_num@rb stored from wreg
  4566  06CA  00F1               	movwf	ringbuf_num@rb
  4567                           
  4568                           ;My_header_16F.h: 136: if (rb->head >= rb->tail) {
  4569  06CB  0871               	movf	ringbuf_num@rb,w
  4570  06CC  3E02               	addlw	2
  4571  06CD  0086               	movwf	6
  4572  06CE  0187               	clrf	7
  4573  06CF  0871               	movf	ringbuf_num@rb,w
  4574  06D0  3E03               	addlw	3
  4575  06D1  0084               	movwf	4
  4576  06D2  0185               	clrf	5
  4577  06D3  0800               	movf	0,w
  4578  06D4  0201               	subwf	1,w
  4579  06D5  1C03               	skipc
  4580  06D6  2EE3               	goto	i1l1612
  4581                           
  4582                           ;My_header_16F.h: 137: return (rb->head - rb->tail);
  4583  06D7  0871               	movf	ringbuf_num@rb,w
  4584  06D8  3E02               	addlw	2
  4585  06D9  0086               	movwf	6
  4586  06DA  0187               	clrf	7
  4587  06DB  0871               	movf	ringbuf_num@rb,w
  4588  06DC  3E03               	addlw	3
  4589  06DD  0084               	movwf	4
  4590  06DE  0185               	clrf	5
  4591  06DF  0300               	decf	0,w
  4592  06E0  3AFF               	xorlw	255
  4593  06E1  0701               	addwf	1,w
  4594                           
  4595                           ;My_header_16F.h: 138: } else {
  4596  06E2  0008               	return
  4597  06E3                     i1l1612:	
  4598                           
  4599                           ;My_header_16F.h: 139: return (rb->size + rb->head - rb->tail);
  4600  06E3  0871               	movf	ringbuf_num@rb,w
  4601  06E4  3E02               	addlw	2
  4602  06E5  0086               	movwf	6
  4603  06E6  0187               	clrf	7
  4604  06E7  0A71               	incf	ringbuf_num@rb,w
  4605  06E8  0084               	movwf	4
  4606  06E9  0185               	clrf	5
  4607  06EA  0800               	movf	0,w
  4608  06EB  00F0               	movwf	??_ringbuf_num
  4609  06EC  0871               	movf	ringbuf_num@rb,w
  4610  06ED  3E03               	addlw	3
  4611  06EE  0084               	movwf	4
  4612  06EF  0185               	clrf	5
  4613  06F0  0300               	decf	0,w
  4614  06F1  3AFF               	xorlw	255
  4615  06F2  0770               	addwf	??_ringbuf_num,w
  4616  06F3  0701               	addwf	1,w
  4617  06F4  0008               	return
  4618  06F5                     __end_of_ringbuf_num:	
  4619                           
  4620                           	psect	text33
  4621  0416                     __ptext33:	
  4622 ;; *************** function _button_timer_interrupt *****************
  4623 ;; Defined at:
  4624 ;;		line 85 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\include\My_header_16F.h"
  4625 ;; Parameters:    Size  Location     Type
  4626 ;;  bt              1    wreg     PTR struct button
  4627 ;;		 -> sw_RA1(3), sw_RA0(3), 
  4628 ;;  sw_value        1    0[COMMON] unsigned char 
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;  bt              1    3[COMMON] PTR struct button
  4631 ;;		 -> sw_RA1(3), sw_RA0(3), 
  4632 ;; Return value:  Size  Location     Type
  4633 ;;		None               void
  4634 ;; Registers used:
  4635 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4636 ;; Tracked objects:
  4637 ;;		On entry : 0/0
  4638 ;;		On exit  : 0/0
  4639 ;;		Unchanged: 0/0
  4640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4641 ;;      Params:         1       0       0       0       0       0
  4642 ;;      Locals:         1       0       0       0       0       0
  4643 ;;      Temps:          2       0       0       0       0       0
  4644 ;;      Totals:         4       0       0       0       0       0
  4645 ;;Total ram usage:        4 bytes
  4646 ;; Hardware stack levels used:    1
  4647 ;; This function calls:
  4648 ;;		Nothing
  4649 ;; This function is called by:
  4650 ;;		_isr
  4651 ;; This function uses a non-reentrant model
  4652 ;;
  4653                           
  4654                           
  4655                           ;psect for function _button_timer_interrupt
  4656  0416                     _button_timer_interrupt:	
  4657                           
  4658                           ;incstack = 0
  4659                           ; Regs used in _button_timer_interrupt: [wreg+fsr1l+fsr1h+status,2+status,0]
  4660                           ;button_timer_interrupt@bt stored from wreg
  4661  0416  00F3               	movwf	button_timer_interrupt@bt
  4662                           
  4663                           ;My_header_16F.h: 86: if (sw_value) {
  4664  0417  0870               	movf	button_timer_interrupt@sw_value,w
  4665  0418  1903               	btfsc	3,2
  4666  0419  2C71               	goto	i1l1744
  4667                           
  4668                           ;My_header_16F.h: 87: if (bt->cnt_sw < 150 + 1) bt->cnt_sw++;
  4669  041A  0873               	movf	button_timer_interrupt@bt,w
  4670  041B  0086               	movwf	6
  4671  041C  0187               	clrf	7
  4672  041D  3F40               	moviw [0]fsr1
  4673  041E  00F1               	movwf	??_button_timer_interrupt
  4674  041F  3F41               	moviw [1]fsr1
  4675  0420  00F2               	movwf	??_button_timer_interrupt+1
  4676  0421  3000               	movlw	0
  4677  0422  0272               	subwf	??_button_timer_interrupt+1,w
  4678  0423  3097               	movlw	151
  4679  0424  1903               	skipnz
  4680  0425  0271               	subwf	??_button_timer_interrupt,w
  4681  0426  1803               	skipnc
  4682  0427  2C30               	goto	i1l1734
  4683  0428  0873               	movf	button_timer_interrupt@bt,w
  4684  0429  0086               	movwf	6
  4685  042A  0187               	clrf	7
  4686  042B  3001               	movlw	1
  4687  042C  0781               	addwf	1,f
  4688  042D  3141               	addfsr 1,1
  4689  042E  1803               	skipnc
  4690  042F  0A81               	incf	1,f
  4691  0430                     i1l1734:	
  4692                           
  4693                           ;My_header_16F.h: 88: if (bt->cnt_sw == 150)bt->flag.long_holding_3 = 1;
  4694  0430  0873               	movf	button_timer_interrupt@bt,w
  4695  0431  0086               	movwf	6
  4696  0432  0187               	clrf	7
  4697  0433  3F40               	moviw [0]fsr1
  4698  0434  3A96               	xorlw	150
  4699  0435  1D03               	skipz
  4700  0436  2C39               	goto	u121_25
  4701  0437  3F41               	moviw [1]fsr1
  4702  0438  3A00               	xorlw	0
  4703  0439                     u121_25:	
  4704  0439  1D03               	skipz
  4705  043A  2C40               	goto	i1l117
  4706  043B  0873               	movf	button_timer_interrupt@bt,w
  4707  043C  3E02               	addlw	2
  4708  043D  0086               	movwf	6
  4709  043E  0187               	clrf	7
  4710  043F  1781               	bsf	1,7
  4711  0440                     i1l117:	
  4712                           
  4713                           ;My_header_16F.h: 89: if (bt->cnt_sw == 75)bt->flag.long_holding_2 = 1;
  4714  0440  0873               	movf	button_timer_interrupt@bt,w
  4715  0441  0086               	movwf	6
  4716  0442  0187               	clrf	7
  4717  0443  3F40               	moviw [0]fsr1
  4718  0444  3A4B               	xorlw	75
  4719  0445  1D03               	skipz
  4720  0446  2C49               	goto	u122_25
  4721  0447  3F41               	moviw [1]fsr1
  4722  0448  3A00               	xorlw	0
  4723  0449                     u122_25:	
  4724  0449  1D03               	skipz
  4725  044A  2C50               	goto	i1l118
  4726  044B  0873               	movf	button_timer_interrupt@bt,w
  4727  044C  3E02               	addlw	2
  4728  044D  0086               	movwf	6
  4729  044E  0187               	clrf	7
  4730  044F  1701               	bsf	1,6
  4731  0450                     i1l118:	
  4732                           
  4733                           ;My_header_16F.h: 90: if (bt->cnt_sw == 30)bt->flag.long_holding_1 = 1;
  4734  0450  0873               	movf	button_timer_interrupt@bt,w
  4735  0451  0086               	movwf	6
  4736  0452  0187               	clrf	7
  4737  0453  3F40               	moviw [0]fsr1
  4738  0454  3A1E               	xorlw	30
  4739  0455  1D03               	skipz
  4740  0456  2C59               	goto	u123_25
  4741  0457  3F41               	moviw [1]fsr1
  4742  0458  3A00               	xorlw	0
  4743  0459                     u123_25:	
  4744  0459  1D03               	skipz
  4745  045A  2C60               	goto	i1l119
  4746  045B  0873               	movf	button_timer_interrupt@bt,w
  4747  045C  3E02               	addlw	2
  4748  045D  0086               	movwf	6
  4749  045E  0187               	clrf	7
  4750  045F  1681               	bsf	1,5
  4751  0460                     i1l119:	
  4752                           
  4753                           ;My_header_16F.h: 91: if (bt->cnt_sw == 2)bt->flag.pressing = 1;
  4754  0460  0873               	movf	button_timer_interrupt@bt,w
  4755  0461  0086               	movwf	6
  4756  0462  0187               	clrf	7
  4757  0463  3F40               	moviw [0]fsr1
  4758  0464  3A02               	xorlw	2
  4759  0465  1D03               	skipz
  4760  0466  2C69               	goto	u124_25
  4761  0467  3F41               	moviw [1]fsr1
  4762  0468  3A00               	xorlw	0
  4763  0469                     u124_25:	
  4764  0469  1D03               	skipz
  4765  046A  0008               	return
  4766  046B  0873               	movf	button_timer_interrupt@bt,w
  4767  046C  3E02               	addlw	2
  4768  046D  0086               	movwf	6
  4769  046E  0187               	clrf	7
  4770  046F  1601               	bsf	1,4
  4771                           
  4772                           ;My_header_16F.h: 92: } else {
  4773  0470  0008               	return
  4774  0471                     i1l1744:	
  4775                           
  4776                           ;My_header_16F.h: 93: if (bt->cnt_sw >= 150)bt->flag.long_hold_3 = 1;
  4777  0471  0873               	movf	button_timer_interrupt@bt,w
  4778  0472  0086               	movwf	6
  4779  0473  0187               	clrf	7
  4780  0474  3F40               	moviw [0]fsr1
  4781  0475  00F1               	movwf	??_button_timer_interrupt
  4782  0476  3F41               	moviw [1]fsr1
  4783  0477  00F2               	movwf	??_button_timer_interrupt+1
  4784  0478  3000               	movlw	0
  4785  0479  0272               	subwf	??_button_timer_interrupt+1,w
  4786  047A  3096               	movlw	150
  4787  047B  1903               	skipnz
  4788  047C  0271               	subwf	??_button_timer_interrupt,w
  4789  047D  1C03               	skipc
  4790  047E  2C85               	goto	i1l1748
  4791  047F  0873               	movf	button_timer_interrupt@bt,w
  4792  0480  3E02               	addlw	2
  4793  0481  0086               	movwf	6
  4794  0482  0187               	clrf	7
  4795  0483  1581               	bsf	1,3
  4796  0484  2CC0               	goto	i1l123
  4797  0485                     i1l1748:	
  4798                           
  4799                           ;My_header_16F.h: 94: else if (bt->cnt_sw >= 75)bt->flag.long_hold_2 = 1;
  4800  0485  0873               	movf	button_timer_interrupt@bt,w
  4801  0486  0086               	movwf	6
  4802  0487  0187               	clrf	7
  4803  0488  3F40               	moviw [0]fsr1
  4804  0489  00F1               	movwf	??_button_timer_interrupt
  4805  048A  3F41               	moviw [1]fsr1
  4806  048B  00F2               	movwf	??_button_timer_interrupt+1
  4807  048C  3000               	movlw	0
  4808  048D  0272               	subwf	??_button_timer_interrupt+1,w
  4809  048E  304B               	movlw	75
  4810  048F  1903               	skipnz
  4811  0490  0271               	subwf	??_button_timer_interrupt,w
  4812  0491  1C03               	skipc
  4813  0492  2C99               	goto	i1l1752
  4814  0493  0873               	movf	button_timer_interrupt@bt,w
  4815  0494  3E02               	addlw	2
  4816  0495  0086               	movwf	6
  4817  0496  0187               	clrf	7
  4818  0497  1501               	bsf	1,2
  4819  0498  2CC0               	goto	i1l123
  4820  0499                     i1l1752:	
  4821                           
  4822                           ;My_header_16F.h: 95: else if (bt->cnt_sw >= 30)bt->flag.long_hold_1 = 1;
  4823  0499  0873               	movf	button_timer_interrupt@bt,w
  4824  049A  0086               	movwf	6
  4825  049B  0187               	clrf	7
  4826  049C  3F40               	moviw [0]fsr1
  4827  049D  00F1               	movwf	??_button_timer_interrupt
  4828  049E  3F41               	moviw [1]fsr1
  4829  049F  00F2               	movwf	??_button_timer_interrupt+1
  4830  04A0  3000               	movlw	0
  4831  04A1  0272               	subwf	??_button_timer_interrupt+1,w
  4832  04A2  301E               	movlw	30
  4833  04A3  1903               	skipnz
  4834  04A4  0271               	subwf	??_button_timer_interrupt,w
  4835  04A5  1C03               	skipc
  4836  04A6  2CAD               	goto	i1l1756
  4837  04A7  0873               	movf	button_timer_interrupt@bt,w
  4838  04A8  3E02               	addlw	2
  4839  04A9  0086               	movwf	6
  4840  04AA  0187               	clrf	7
  4841  04AB  1481               	bsf	1,1
  4842  04AC  2CC0               	goto	i1l123
  4843  04AD                     i1l1756:	
  4844                           
  4845                           ;My_header_16F.h: 96: else if (bt->cnt_sw >= 2)bt->flag.press = 1;
  4846  04AD  0873               	movf	button_timer_interrupt@bt,w
  4847  04AE  0086               	movwf	6
  4848  04AF  0187               	clrf	7
  4849  04B0  3F40               	moviw [0]fsr1
  4850  04B1  00F1               	movwf	??_button_timer_interrupt
  4851  04B2  3F41               	moviw [1]fsr1
  4852  04B3  00F2               	movwf	??_button_timer_interrupt+1
  4853  04B4  3000               	movlw	0
  4854  04B5  0272               	subwf	??_button_timer_interrupt+1,w
  4855  04B6  3002               	movlw	2
  4856  04B7  1903               	skipnz
  4857  04B8  0271               	subwf	??_button_timer_interrupt,w
  4858  04B9  1C03               	skipc
  4859  04BA  2CC0               	goto	i1l123
  4860  04BB  0873               	movf	button_timer_interrupt@bt,w
  4861  04BC  3E02               	addlw	2
  4862  04BD  0086               	movwf	6
  4863  04BE  0187               	clrf	7
  4864  04BF  1401               	bsf	1,0
  4865  04C0                     i1l123:	
  4866                           
  4867                           ;My_header_16F.h: 97: bt->cnt_sw = 0;
  4868  04C0  0873               	movf	button_timer_interrupt@bt,w
  4869  04C1  0086               	movwf	6
  4870  04C2  0187               	clrf	7
  4871  04C3  3000               	movlw	0
  4872  04C4  3FC0               	movwi [0]fsr1
  4873  04C5  3FC1               	movwi [1]fsr1
  4874                           
  4875                           ;My_header_16F.h: 98: bt->flags &= 0x0F;
  4876  04C6  300F               	movlw	15
  4877  04C7  00F1               	movwf	??_button_timer_interrupt
  4878  04C8  0873               	movf	button_timer_interrupt@bt,w
  4879  04C9  3E02               	addlw	2
  4880  04CA  0086               	movwf	6
  4881  04CB  0187               	clrf	7
  4882  04CC  0871               	movf	??_button_timer_interrupt,w
  4883  04CD  0581               	andwf	1,f
  4884  04CE  0008               	return
  4885  04CF                     __end_of_button_timer_interrupt:	
  4886  007E                     btemp	set	126	;btemp
  4887  007E                     pic14e$flags	set	126
  4888  007E                     wtemp	set	126
  4889  007E                     wtemp0	set	126
  4890  0080                     wtemp1	set	128
  4891  0082                     wtemp2	set	130
  4892  0084                     wtemp3	set	132
  4893  0086                     wtemp4	set	134
  4894  0088                     wtemp5	set	136
  4895  007F                     wtemp6	set	127
  4896  007E                     ttemp	set	126
  4897  007E                     ttemp0	set	126
  4898  0081                     ttemp1	set	129
  4899  0084                     ttemp2	set	132
  4900  0087                     ttemp3	set	135
  4901  007F                     ttemp4	set	127
  4902  007E                     ltemp	set	126
  4903  007E                     ltemp0	set	126
  4904  0082                     ltemp1	set	130
  4905  0086                     ltemp2	set	134
  4906  0080                     ltemp3	set	128


Data Sizes:
    Strings     20
    Constant    0
    Data        2
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      12
    BANK0            80     31      46
    BANK1            80     70      71
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    timeset@value	PTR unsigned char  size(1) Largest target is 1
		 -> YY(BANK0[1]), MM(BANK0[1]), DD(BANK0[1]), hh(BANK0[1]), 
		 -> mm(BANK0[1]), ss(BANK0[1]), 

    LCD_Puts@s	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    tx_sends@asciicode	PTR unsigned char  size(2) Largest target is 17
		 -> STR_2(CODE[17]), 

    tx_buf.buf	PTR unsigned char  size(1) Largest target is 70
		 -> main@buf(BANK1[70]), 

    ringbuf_num@rb.buf	PTR unsigned char  size(1) Largest target is 70
		 -> main@buf(BANK1[70]), 

    ringbuf_num@rb	PTR struct ringbuf size(1) Largest target is 5
		 -> tx_buf(BANK0[4]), 

    ringbuf_pop@rb.buf	PTR unsigned char  size(1) Largest target is 70
		 -> main@buf(BANK1[70]), 

    ringbuf_pop@rb	PTR struct ringbuf size(1) Largest target is 5
		 -> tx_buf(BANK0[4]), 

    ringbuf_push@rb.buf	PTR unsigned char  size(1) Largest target is 70
		 -> main@buf(BANK1[70]), 

    ringbuf_push@rb	PTR struct ringbuf size(1) Largest target is 5
		 -> tx_buf(BANK0[4]), 

    S224ringbuf$buf	PTR unsigned char  size(1) Largest target is 70
		 -> main@buf(BANK1[70]), 

    ringbuf_init@rb.buf	PTR unsigned char  size(1) Largest target is 70
		 -> main@buf(BANK1[70]), 

    ringbuf_init@internal_buf	PTR unsigned char  size(1) Largest target is 70
		 -> main@buf(BANK1[70]), 

    ringbuf_init@rb	PTR struct ringbuf size(1) Largest target is 5
		 -> tx_buf(BANK0[4]), 

    button_timer_interrupt@bt	PTR struct button size(1) Largest target is 3
		 -> sw_RA1(COMMON[3]), sw_RA0(BANK0[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_tx_send
    i1_tx_send->i1_ringbuf_push
    _interrupt_TXIF->_ringbuf_pop

Critical Paths under _main in BANK0

    _main->_timeset
    _tx_sends->_ringbuf_push
    _tx_send->_ringbuf_push
    _timeset->___bmul
    _timeset->_display
    _display->_LCD_SetCursor
    _RTC_Read->_I2C_rStart
    _I2C_rStart->_I2C_IdleCheck
    _I2C_Receive->_I2C_IdleCheck
    _LCD_SetCursor->_LCD_Command
    _LCD_Putc->_I2C_Start
    ___bmul->___awdiv
    _RTC_Write->_I2C_Start
    _LCD_Puts->_I2C_Start
    _LCD_init->_LCD_Clear
    _LCD_Clear->_LCD_Command
    _LCD_Command->_I2C_Start
    _I2C_Stop->_I2C_IdleCheck
    _I2C_Start->_I2C_IdleCheck
    _I2C_Send->_I2C_IdleCheck

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                74    74      0   29229
                                             27 BANK0      4     4      0
                                              0 BANK1     70    70      0
                           _I2C_init
                           _LCD_init
                          _RTC_Write
                          _UART_init
                            _display
                       _month_length
                       _ringbuf_init
                            _timeset
                            _tx_send
                           _tx_sends
 ---------------------------------------------------------------------------------
 (1) _tx_sends                                             6     4      2     637
                                              4 BANK0      6     4      2
                       _ringbuf_push
 ---------------------------------------------------------------------------------
 (1) _tx_send                                              2     2      0     480
                                              4 BANK0      2     2      0
                       _ringbuf_push
 ---------------------------------------------------------------------------------
 (2) _ringbuf_push                                         4     3      1     458
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _timeset                                             14     9      5   18717
                                             13 BANK0     14     9      5
                           _LCD_Putc
                           _LCD_Puts
                      _LCD_SetCursor
                           _RTC_Read
                          _RTC_Write
                            ___awdiv
                            ___awmod
                             ___bmul
                            _display
                       _month_length (ARG)
 ---------------------------------------------------------------------------------
 (2) _display                                              2     2      0    5884
                                             11 BANK0      2     2      0
                           _LCD_Putc
                      _LCD_SetCursor
                           _RTC_Read
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    2258
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _RTC_Read                                             4     4      0    1424
                                              6 BANK0      4     4      0
                        _I2C_Receive
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
                         _I2C_rStart
 ---------------------------------------------------------------------------------
 (4) _I2C_rStart                                           4     0      4     422
                                              2 BANK0      4     0      4
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (4) _I2C_Receive                                          3     3      0      67
                                              2 BANK0      3     3      0
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (3) _LCD_SetCursor                                        4     3      1    1313
                                              7 BANK0      4     3      1
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (3) _LCD_Putc                                             3     3      0     889
                                              4 BANK0      3     3      0
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     270
                                              9 BANK0      4     3      1
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     830
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _RTC_Write                                            4     3      1    1178
                                              4 BANK0      4     3      1
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _LCD_Puts                                             6     4      2    1001
                                              4 BANK0      6     4      2
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (1) _ringbuf_init                                         4     2      2     373
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _month_length                                         2     1      1     133
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             3     3      0    1778
                                              9 BANK0      3     3      0
                          _LCD_Clear
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            2     2      0     889
                                              7 BANK0      2     2      0
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (4) _LCD_Command                                          3     3      0     889
                                              4 BANK0      3     3      0
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0      22
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            2     1      1     778
                                              2 BANK0      2     1      1
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (4) _I2C_Send                                             1     1      0      44
                                              2 BANK0      1     1      0
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (5) _I2C_IdleCheck                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  2     2      0    1403
                                              6 COMMON     2     2      0
             _button_timer_interrupt
                     _interrupt_TXIF
                          i1_tx_send
 ---------------------------------------------------------------------------------
 (8) i1_tx_send                                            2     2      0     202
                                              4 COMMON     2     2      0
                     i1_ringbuf_push
 ---------------------------------------------------------------------------------
 (9) i1_ringbuf_push                                       4     3      1     180
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (8) _interrupt_TXIF                                       0     0      0     435
                        _ringbuf_num
                        _ringbuf_pop
 ---------------------------------------------------------------------------------
 (9) _ringbuf_pop                                          4     4      0     218
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (9) _ringbuf_num                                          2     2      0     217
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _button_timer_interrupt                               4     3      1     766
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_init
   _LCD_init
     _LCD_Clear
       _LCD_Command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     _LCD_Command
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
   _RTC_Write
     _I2C_Send
       _I2C_IdleCheck
     _I2C_Start
       _I2C_IdleCheck
     _I2C_Stop
       _I2C_IdleCheck
   _UART_init
   _display
     _LCD_Putc
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
     _LCD_SetCursor
       _LCD_Command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     _RTC_Read
       _I2C_Receive
         _I2C_IdleCheck
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
       _I2C_rStart
         _I2C_IdleCheck
     ___awdiv
   _month_length
   _ringbuf_init
   _timeset
     _LCD_Putc
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
     _LCD_Puts
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
     _LCD_SetCursor
       _LCD_Command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     _RTC_Read
       _I2C_Receive
         _I2C_IdleCheck
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
       _I2C_rStart
         _I2C_IdleCheck
     _RTC_Write
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
     ___awdiv
     ___awmod
     ___bmul
       ___awdiv (ARG)
     _display
       _LCD_Putc
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
       _LCD_SetCursor
         _LCD_Command
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
       _RTC_Read
         _I2C_Receive
           _I2C_IdleCheck
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
         _I2C_rStart
           _I2C_IdleCheck
       ___awdiv
     _month_length (ARG)
   _tx_send
     _ringbuf_push
   _tx_sends
     _ringbuf_push

 _isr (ROOT)
   _button_timer_interrupt
   _interrupt_TXIF
     _ringbuf_num
     _ringbuf_pop
   i1_tx_send
     i1_ringbuf_push

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      81       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1F      2E       6       57.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     46      47       8       88.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      81      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Jan 23 11:11:11 2015

                              pc 0002           __end_ofi1_ringbuf_push 06CA                   ___bmul@product 002B  
             __size_of_I2C_Start 001B                      __CFG_CP$OFF 0000                     ?_LCD_Command 0070  
                             _DD 0046                               _EE 00E6                               _MM 0047  
                             _YY 0048                     ___awdiv@sign 0026                               _hh 0049  
                             _mm 004A                               _ss 004B           __end_of_interrupt_TXIF 1000  
                   timeset@t_583 0039                    _LCD_SetCursor 0FD7                              l220 072C  
                            l208 076C                              l240 074C                              l244 05C0  
                            l245 05DB                              l190 07D8                              l159 0644  
                            l184 07BF                              l199 0FAD                              _RA0 0060  
                            _RA1 0061                     __CFG_CPD$OFF 0000                              u945 04F0  
                            u965 04FA                              u975 0504                              u985 050C  
                   timeset@value 003A                              _isr 0004                     ___awmod@sign 0026  
            __size_of_I2C_rStart 0019             __size_of_I2C_Receive 0020                     __CFG_BORV$LO 0000  
                            wreg 0009                             S2070 07E1                     __CFG_LVP$OFF 0000  
                           l2034 014C                             l2026 0097                             l1452 0F86  
                           l1702 053B                             l1632 05FB                             l1704 0547  
                           l1712 055C                             l1634 0617                             l1554 04E5  
                           l1716 0564                             l1708 0553                             l1580 051C  
                           l1572 050B                             l1564 04ED                             l1548 04DA  
                           l1900 02DA                             l1566 04F9                             l1902 02DF  
                           l1840 077A                             l1672 0FCE                             l1576 0514  
                           l1690 052E                             l1906 01C8                             l1852 0782  
                           l1844 077C                             l1836 0778                             l1668 0FC8  
                           l1908 0317                             l1694 0535                    timeset@column 0030  
                           l1856 0784                             l1872 01E3                             l1890 028A  
                           l1874 021D                             l1794 061C                             l1884 024F  
                           l1886 0253                             ?_isr 0070                             STR_1 0811  
                           STR_2 0800                             u1125 053E                             u1145 054D  
                           u1155 0554                             u1405 02C3                             u1415 02F1  
                           u1617 05E1                             u1385 0265                             u1545 00A9  
                           u1627 0732                             u1555 00C1                             u1637 0752  
                           u1565 00D9                             u1647 0614                             u1575 00FC  
                           u1657 0572                             u1585 0114                             u1667 0598  
                           u1595 012C                             u1677 0F9C                             u1687 0772  
                           _RCIF 008D                             _SPEN 0CEF                             _TXIE 048C  
                           _TXIF 008C                             _WPUB 020D                     __CFG_WRT$OFF 0000  
                           _main 005C         button_timer_interrupt@bt 0073               __size_of_LCD_Clear 000F  
                           fsr0h 0005                             fsr1h 0007                             fsr0l 0004  
                           indf0 0000                             indf1 0001                             fsr1l 0006  
               __end_of_I2C_Send 0FB3                             btemp 007E                 __end_of_I2C_Stop 0F62  
                           ltemp 007E                 __end_of_I2C_init 0F78                             start 0040  
                           ttemp 007E                             wtemp 007E                    __CFG_IESO$OFF 0000  
              ___bmul@multiplier 002C           __size_of_I2C_IdleCheck 000F                  ?i1_ringbuf_push 0070  
                          ??_isr 0076                    __CFG_PLLEN$ON 0000                 __end_of_LCD_Putc 0735  
               __end_of_LCD_Puts 061A                   ?_LCD_SetCursor 0027                  ?_interrupt_TXIF 0070  
               __end_of_LCD_init 05AE                            ?_main 0070                  __end_of___awdiv 0523  
                          _ADRES 009B                      LCD_Putc@ans 0026                            _BRG16 0CFB  
                  __CFG_WDTE$OFF 0000                  __end_of___awmod 056B                  ___awdiv@divisor 0020  
                          _T1CON 0018                            _LATB0 0868                   timeset@max_num 002E  
                          i1l123 04C0                            i1l117 0440                            i1l118 0450  
                          i1l119 0460                            i1l164 0FFD                            i1l281 003B  
                ___awdiv@counter 0025                            _RCREG 0199                   timeset@min_num 002D  
                    LCD_Puts@ans 0028                            _RCSTA 019D                            _TMR1H 0017  
                          _TMR1L 0016                            _PORTA 000C                            _PORTB 000D  
                          _TRISA 008C                            _TRISB 008D                     RTC_Read@data 0028  
                          _TXREG 019A                            _TXSTA 019E                   __CFG_FCMEN$OFF 0000  
                __end_of_display 0416               __size_of_UART_init 0012            ringbuf_push@asciicode 0020  
               __end_of_RTC_Read 05E6                __end_of_I2C_Start 07C8                   __CFG_BOREN$OFF 0000  
                   LCD_Command@c 0025                            ltemp0 007E                            ltemp1 0082  
                          ltemp2 0086                            ltemp3 0080                  __end_of_timeset 0319  
                          ttemp0 007E                            ttemp1 0081                            ttemp2 0084  
                          ttemp3 0087                            ttemp4 007F                            status 0003  
                          wtemp0 007E                            wtemp1 0080                            wtemp2 0082  
                          wtemp3 0084                            wtemp4 0086                            wtemp5 0088  
                          wtemp6 007F               __size_of_RTC_Write 0020                  __end_of_tx_send 0F84  
              month_length@month 0020                   __CFG_MCLRE$OFF 0000                  __initialization 0042  
                   __end_of_main 01C4              ringbuf_init@bufsize 0021                           ??_main 003B  
              __end_of_LCD_Clear 0FA2               __size_ofi1_tx_send 000B                     RTC_Write@Reg 0026  
                   RTC_Write@ans 0027                           _BCL1IF 0093                    _I2C_IdleCheck 0F84  
               ___awdiv@dividend 0022                           _ANSELA 018C                           _ANSELB 018D  
                         i1l1600 069D                           i1l1612 06E3                           u121_25 0439  
                         i1l1734 0430                           i1l1752 0499                           i1l1744 0471  
                         i1l1756 04AD                           i1l1748 0485                           u122_25 0449  
                         i1l1972 0015                           u123_25 0459                           i1l1982 0024  
                         u124_25 0469                           _FVRCON 0117                           _OSCCON 0099  
                         _TMR1IF 0088                           _SPBRGH 019C                           _SPBRGL 019B  
                         _SSP1IF 008B                     ??_I2C_rStart 0026                   __CFG_PWRTE$OFF 0000  
                         ___bmul 0FC5                     ?_ringbuf_pop 0070                     ?_ringbuf_num 0070  
              __end_of_UART_init 0FC5                        ??___awdiv 0024                        ??___awmod 0024  
                ??_LCD_SetCursor 0028                           _cnt_t1 0078                 ___awdiv@quotient 0027  
                         _sw_RA0 0043                           _sw_RA1 0079                  ___awmod@divisor 0020  
                ___awmod@counter 0025                           _tx_buf 003F             __size_of_LCD_Command 0020  
                      ??_display 002B                __end_of_RTC_Write 0755                        ?_I2C_Send 0070  
                      ?_I2C_Stop 0070                  UART_init@device 0020                        ?_I2C_init 0070  
             __end_of_I2C_rStart 07E1                   ?_I2C_IdleCheck 0070                        ??_timeset 0032  
                      ??_tx_send 0024                 __end_of_tx_sends 0647          __end_of__initialization 0058  
                      ?_LCD_Putc 0070                        ?_LCD_Puts 0024                        ?_LCD_init 0070  
              __end_ofi1_tx_send 0F6D              ___bmul@multiplicand 0029                   __pcstackCOMMON 0070  
                      LCD_Putc@c 0025                     __pidataBANK0 0002                        LCD_Puts@s 0024  
                      ?_RTC_Read 0070                   _OPTION_REGbits 0095                       ??_I2C_Send 0022  
                     ??_I2C_Stop 0022                       ??_I2C_init 0020                       __pbssBANK0 003F  
                     __pbssBANK1 00E6                       ??_LCD_Putc 0024                       ??_LCD_Puts 0026  
                     ??_LCD_init 0029                 ??i1_ringbuf_push 0071                    RTC_Write@data 0024  
                     __pmaintext 005C                 ??_interrupt_TXIF 0074                          ?___bmul 0029  
                     __pintentry 0004                       ??_RTC_Read 0026                    ??_I2C_Receive 0022  
                   I2C_Send@data 0022                  ??_I2C_IdleCheck 0020                          _SSP1ADD 0212  
                        _SSP1BUF 0211         ??_button_timer_interrupt 0071                    ?_month_length 0020  
                      _I2C_Start 07AD                   I2C_Receive@ack 0023                  __size_of___bmul 0012  
                  ?_ringbuf_init 0020                          ___awdiv 04CF                          ___awmod 0523  
                  ?_ringbuf_push 0020             __size_of_ringbuf_pop 002C             __size_of_ringbuf_num 002B  
                __CFG_STVREN$OFF 0000         LCD_SetCursor@row_offsets 0028                        ?_tx_sends 0024  
                        __ptext1 061A                          __ptext2 0F78                          __ptext3 0647  
                        __ptext4 01C4                          __ptext5 0319                          __ptext6 04CF  
                        __ptext7 05AE                          __ptext8 07C8                          __ptext9 06F5  
                        _display 0319                        _T1CONbits 0018                     __size_of_isr 003C  
               ___awmod@dividend 0022                        _LCD_Clear 0F93              __end_of_I2C_Receive 0715  
                        _timeset 01C4                          main@buf 00A0                          clrloop0 07FA  
                        _tx_send 0F78             end_of_initialization 0058                 LCD_SetCursor@col 002A  
               LCD_SetCursor@row 0027                   ??_month_length 0021                   LCD_Command@ans 0026  
                     ?_I2C_Start 0022                     I2C_rStart@rw 0024                   ??_ringbuf_init 0022  
                 ??_ringbuf_push 0021                     __pstringtext 0800                       ??_tx_sends 0026  
                      _UART_init 0FB3                 __CFG_FOSC$INTOSC 0000                       ?_LCD_Clear 0070  
                      _RTC_Write 0735                __size_of_I2C_Send 0011                __size_of_I2C_Stop 0006  
              __size_of_I2C_init 000B  __size_of_button_timer_interrupt 00B9                __size_of_LCD_Putc 0020  
              __size_of_LCD_Puts 0034                __size_of_LCD_init 0043                   ringbuf_init@rb 0023  
                      i1_tx_send 0F62                   ringbuf_pop@ret 0072                    ??_LCD_Command 0024  
                 __end_of___bmul 0FD7                      RTC_Read@Reg 0027                      RTC_Read@ans 0029  
          __end_of_LCD_SetCursor 0FE9                   ringbuf_push@rb 0023                       ?_UART_init 0070  
                    _I2C_Receive 06F5                __size_of_RTC_Read 0038              start_initialization 0042  
               month_length@year 0021                       ?_RTC_Write 0024                      __end_of_isr 0040  
                    ??_I2C_Start 0023                      _APFCON0bits 011D                      _APFCON1bits 011E  
                       ??___bmul 002A                       ?i1_tx_send 0070                      __pdataBANK0 004C  
         _button_timer_interrupt 0416             __end_of_month_length 0792              __end_of_LCD_Command 0775  
                    __pbssCOMMON 0078                        ___latbits 0001                    __pcstackBANK0 0020  
                  __pcstackBANK1 00A0                      ??_LCD_Clear 0027              __end_of__stringdata 0814  
           __end_of_ringbuf_init 07AD             __end_of_ringbuf_push 0673                 tx_send@asciicode 0025  
                       ?___awdiv 0020                         ?___awmod 0020                      ??_UART_init 0020  
                      __pswtext1 07E1                         ?_display 0070                __size_of_tx_sends 002D  
                    I2C_Start@rw 0022                         _I2C_Send 0FA2                         _I2C_Stop 0F5C  
                       _I2C_init 0F6D            __end_of_I2C_IdleCheck 0F93                      ??_RTC_Write 0025  
                       ?_timeset 002D                         ?_tx_send 0070         ringbuf_init@internal_buf 0020  
                       _LCD_Putc 0715                         _LCD_Puts 05E6                         _LCD_init 056B  
                      clear_ram0 07F9                         _PIE1bits 0091                    ??_ringbuf_pop 0070  
                  ??_ringbuf_num 0070                      ??i1_tx_send 0074                         _SSP1CON1 0215  
                       _SSP1CON2 0216                         _SSP1STAT 0214                      _LCD_Command 0755  
                       _RTC_Read 05AE                       _ADCON0bits 009D          __size_ofi1_ringbuf_push 002B  
                     _ADCON1bits 009E                      __stringdata 0800                       timeset@Reg 002F  
                     timeset@row 0031   button_timer_interrupt@sw_value 0070          __size_of_interrupt_TXIF 0017  
                  ringbuf_pop@rb 0073                    ringbuf_num@rb 0071                    I2C_Start@adrs 0023  
             LCD_SetCursor@F2883 004C                  I2C_Receive@data 0024                       _I2C_rStart 07C8  
          __size_of_month_length 001D                 __size_of___awdiv 0054                 __size_of___awmod 0048  
              I2C_IdleCheck@mask 0021                     ?_I2C_Receive 0070                tx_sends@asciicode 0024  
            __end_of_ringbuf_pop 069F              __end_of_ringbuf_num 06F5               i1tx_send@asciicode 0075  
          __size_of_ringbuf_init 001B                 __size_of_display 00FD            __size_of_ringbuf_push 002C  
                       __ptext10 0FD7                         __ptext11 0715                         __ptext20 0F93  
                       __ptext12 0FC5                         __ptext21 0755                         __ptext13 0523  
                       __ptext30 0FE9                         __ptext22 0F5C                         __ptext14 0735  
                       __ptext31 0673                         __ptext23 07AD                         __ptext15 05E6  
                       __ptext32 06CA                         __ptext24 0FA2                         __ptext16 0792  
                       __ptext33 0416                         __ptext25 0F84                         __ptext17 0775  
                       __ptext26 0F6D                         __ptext18 0FB3                         __ptext19 056B  
                       __ptext28 0F62                         __ptext29 069F                     _SSP1CON2bits 0216  
               __size_of_timeset 0155                 i1ringbuf_push@rb 0073                 __size_of_tx_send 000C  
                 I2C_rStart@adrs 0022                    __size_of_main 0168                     _month_length 0775  
        ?_button_timer_interrupt 0070                     _ringbuf_init 0792                     _ringbuf_push 0647  
                       _tx_sends 061A                       _INTCONbits 000B                      pic14e$flags 007E  
                       intlevel1 0000           __size_of_LCD_SetCursor 0012                        tx_sends@i 0029  
              __CFG_CLKOUTEN$OFF 0000                      ?_I2C_rStart 0022   __end_of_button_timer_interrupt 04CF  
                    _ringbuf_pop 0673                      _ringbuf_num 06CA                         timeset@t 0038  
                 i1_ringbuf_push 069F                       _OPTION_REG 0095                   _interrupt_TXIF 0FE9  
        i1ringbuf_push@asciicode 0070  
