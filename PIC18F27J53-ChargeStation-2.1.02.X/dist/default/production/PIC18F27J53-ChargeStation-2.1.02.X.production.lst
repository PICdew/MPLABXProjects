

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Wed Nov 11 14:23:39 2015

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F27J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    91                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    92  0000                     
    93                           	psect	idataCOMRAM
    94  003AA4                     __pidataCOMRAM:
    95                           	opt stack 0
    96                           
    97                           ;initializer for I2C_LCD_SetCursor@F8672
    98  003AA4  00                 	db	0
    99  003AA5  40                 	db	64
   100                           
   101                           ;initializer for sleep_loop@prev_power_sw
   102  003AA6  01                 	db	1
   103                           
   104                           	psect	idataBANK0
   105  003AA7                     __pidataBANK0:
   106                           	opt stack 0
   107                           
   108                           ;initializer for epoch_to_caltime@month_cache
   109  003AA7  01                 	db	1
   110                           
   111                           	psect	smallconst
   112  000F00                     __psmallconst:
   113                           	opt stack 0
   114  000F00  00                 	db	0
   115  000F01                     _weekday_3char:
   116                           	opt stack 0
   117  000F01  53                 	db	83
   118  000F02  55                 	db	85
   119  000F03  4E                 	db	78
   120  000F04  00                 	db	0
   121  000F05  4D                 	db	77
   122  000F06  4F                 	db	79
   123  000F07  4E                 	db	78
   124  000F08  00                 	db	0
   125  000F09  54                 	db	84
   126  000F0A  55                 	db	85
   127  000F0B  45                 	db	69
   128  000F0C  00                 	db	0
   129  000F0D  57                 	db	87
   130  000F0E  45                 	db	69
   131  000F0F  44                 	db	68
   132  000F10  00                 	db	0
   133  000F11  54                 	db	84
   134  000F12  48                 	db	72
   135  000F13  55                 	db	85
   136  000F14  00                 	db	0
   137  000F15  46                 	db	70
   138  000F16  52                 	db	82
   139  000F17  49                 	db	73
   140  000F18  00                 	db	0
   141  000F19  53                 	db	83
   142  000F1A  41                 	db	65
   143  000F1B  54                 	db	84
   144  000F1C  00                 	db	0
   145  000F1D                     __end_of_weekday_3char:
   146                           	opt stack 0
   147  0000                     _ANCON0	set	3912
   148  0000                     _ANCON1	set	3913
   149  0000                     _PADCFG1bits	set	3900
   150  0000                     _RTCCAL	set	3902
   151  0000                     _RTCCFGbits	set	3903
   152  0000                     _RTCVALH	set	3899
   153  0000                     _RTCVALL	set	3898
   154  0000                     _T5CONbits	set	3874
   155  0000                     _ADRES	set	4035
   156  0000                     _ADCON0bits	set	4034
   157  0000                     _ADCON1bits	set	4033
   158  0000                     _BAUDCON1bits	set	3966
   159  0000                     _CTMUCONH	set	4019
   160  0000                     _CTMUCONHbits	set	4019
   161  0000                     _CTMUCONL	set	4018
   162  0000                     _CTMUCONLbits	set	4018
   163  0000                     _CTMUICON	set	4017
   164  0000                     _EECON2	set	4007
   165  0000                     _INTCON2bits	set	4081
   166  0000                     _INTCONbits	set	4082
   167  0000                     _IPR1bits	set	3999
   168  0000                     _IPR2bits	set	4002
   169  0000                     _IPR5bits	set	3993
   170  0000                     _OSCCONbits	set	4051
   171  0000                     _OSCTUNEbits	set	3995
   172  0000                     _PIE1bits	set	3997
   173  0000                     _PIE2bits	set	4000
   174  0000                     _PIE5bits	set	3985
   175  0000                     _PIR1bits	set	3998
   176  0000                     _PIR2bits	set	4001
   177  0000                     _PIR5bits	set	3992
   178  0000                     _PORTAbits	set	3968
   179  0000                     _PORTBbits	set	3969
   180  0000                     _RCREG1	set	4015
   181  0000                     _RCSTA1bits	set	4012
   182  0000                     _SPBRG1	set	4016
   183  0000                     _SPBRGH1	set	3967
   184  0000                     _SSP1ADD	set	4040
   185  0000                     _SSP1BUF	set	4041
   186  0000                     _SSP1CON1	set	4038
   187  0000                     _SSP1CON2	set	4037
   188  0000                     _SSP1CON2bits	set	4037
   189  0000                     _SSP1STAT	set	4039
   190  0000                     _T0CONbits	set	4053
   191  0000                     _T1CONbits	set	4045
   192  0000                     _T3CONbits	set	3961
   193  0000                     _TMR1H	set	4047
   194  0000                     _TRISA	set	3986
   195  0000                     _TRISB	set	3987
   196  0000                     _TRISC	set	3988
   197  0000                     _TXREG1	set	4014
   198  0000                     _TXSTA1bits	set	4013
   199  0000                     _BCL1IF	set	32011
   200  0000                     _LATA5	set	31821
   201  0000                     _LATA6	set	31822
   202  0000                     _LATA7	set	31823
   203  0000                     _LATB2	set	31826
   204  0000                     _LATB6	set	31830
   205  0000                     _LATB7	set	31831
   206  0000                     _LATC2	set	31834
   207  0000                     _SSP1IF	set	31987
   208  000F1D                     STR_13:
   209  000F1D  41                 	db	65	;'A'
   210  000F1E  6C                 	db	108	;'l'
   211  000F1F  77                 	db	119	;'w'
   212  000F20  61                 	db	97	;'a'
   213  000F21  79                 	db	121	;'y'
   214  000F22  73                 	db	115	;'s'
   215  000F23  4F                 	db	79	;'O'
   216  000F24  4E                 	db	78	;'N'
   217  000F25  00                 	db	0
   218  000F26                     STR_14:
   219  000F26  41                 	db	65	;'A'
   220  000F27  75                 	db	117	;'u'
   221  000F28  74                 	db	116	;'t'
   222  000F29  6F                 	db	111	;'o'
   223  000F2A  53                 	db	83	;'S'
   224  000F2B  74                 	db	116	;'t'
   225  000F2C  6F                 	db	111	;'o'
   226  000F2D  70                 	db	112	;'p'
   227  000F2E  00                 	db	0
   228  000F2F                     STR_12:
   229  000F2F  52                 	db	82	;'R'
   230  000F30  65                 	db	101	;'e'
   231  000F31  73                 	db	115	;'s'
   232  000F32  65                 	db	101	;'e'
   233  000F33  74                 	db	116	;'t'
   234  000F34  65                 	db	101	;'e'
   235  000F35  64                 	db	100	;'d'
   236  000F36  00                 	db	0
   237  000F37                     STR_9:
   238  000F37  53                 	db	83	;'S'
   239  000F38  74                 	db	116	;'t'
   240  000F39  61                 	db	97	;'a'
   241  000F3A  74                 	db	116	;'t'
   242  000F3B  69                 	db	105	;'i'
   243  000F3C  6F                 	db	111	;'o'
   244  000F3D  6E                 	db	110	;'n'
   245  000F3E  00                 	db	0
   246  000F3F                     STR_11:
   247  000F3F  52                 	db	82	;'R'
   248  000F40  65                 	db	101	;'e'
   249  000F41  73                 	db	115	;'s'
   250  000F42  65                 	db	101	;'e'
   251  000F43  74                 	db	116	;'t'
   252  000F44  3F                 	db	63	;'?'
   253  000F45  00                 	db	0
   254  000F46                     STR_5:
   255  000F46  43                 	db	67	;'C'
   256  000F47  45                 	db	69	;'E'
   257  000F48  4E                 	db	78	;'N'
   258  000F49  54                 	db	84	;'T'
   259  000F4A  45                 	db	69	;'E'
   260  000F4B  52                 	db	82	;'R'
   261  000F4C  00                 	db	0
   262  000F4D                     STR_8:
   263  000F4D  43                 	db	67	;'C'
   264  000F4E  68                 	db	104	;'h'
   265  000F4F  61                 	db	97	;'a'
   266  000F50  72                 	db	114	;'r'
   267  000F51  67                 	db	103	;'g'
   268  000F52  65                 	db	101	;'e'
   269  000F53  00                 	db	0
   270  000F54                     STR_4:
   271  000F54  43                 	db	67	;'C'
   272  000F55  65                 	db	101	;'e'
   273  000F56  6E                 	db	110	;'n'
   274  000F57  74                 	db	116	;'t'
   275  000F58  65                 	db	101	;'e'
   276  000F59  72                 	db	114	;'r'
   277  000F5A  00                 	db	0
   278  000F5B                     STR_3:
   279  000F5B  52                 	db	82	;'R'
   280  000F5C  49                 	db	73	;'I'
   281  000F5D  47                 	db	71	;'G'
   282  000F5E  48                 	db	72	;'H'
   283  000F5F  54                 	db	84	;'T'
   284  000F60  00                 	db	0
   285  000F61                     STR_2:
   286  000F61  52                 	db	82	;'R'
   287  000F62  69                 	db	105	;'i'
   288  000F63  67                 	db	103	;'g'
   289  000F64  68                 	db	104	;'h'
   290  000F65  74                 	db	116	;'t'
   291  000F66  00                 	db	0
   292  000F67                     STR_7:
   293  000F67  4C                 	db	76	;'L'
   294  000F68  45                 	db	69	;'E'
   295  000F69  46                 	db	70	;'F'
   296  000F6A  54                 	db	84	;'T'
   297  000F6B  00                 	db	0
   298  000F6C                     STR_6:
   299  000F6C  4C                 	db	76	;'L'
   300  000F6D  65                 	db	101	;'e'
   301  000F6E  66                 	db	102	;'f'
   302  000F6F  74                 	db	116	;'t'
   303  000F70  00                 	db	0
   304  000F71                     STR_10:
   305  000F71  6D                 	db	109	;'m'
   306  000F72  41                 	db	65	;'A'
   307  000F73  68                 	db	104	;'h'
   308  000F74  00                 	db	0
   309  000F75                     STR_1:
   310  000F75  20                 	db	32
   311  000F76  20                 	db	32
   312  000F77  00                 	db	0
   313  0000                     
   314                           ; #config settings
   315  000F78  00                 	db	0	; dummy byte at the end
   316  0000                     
   317                           	psect	cinit
   318  0032B2                     __pcinit:
   319                           	opt stack 0
   320  0032B2                     start_initialization:
   321                           	opt stack 0
   322  0032B2                     __initialization:
   323                           	opt stack 0
   324                           
   325                           ; Clear objects allocated to BANK1 (8 bytes)
   326  0032B2  EE01  F0C8         	lfsr	0,__pbssBANK1
   327  0032B6  0E08               	movlw	8
   328  0032B8                     clear_0:
   329  0032B8  6AEE               	clrf	postinc0,c
   330  0032BA  06E8               	decf	wreg,f,c
   331  0032BC  E1FD               	bnz	clear_0
   332                           
   333                           ; Clear objects allocated to BANK0 (80 bytes)
   334  0032BE  EE00  F060         	lfsr	0,__pbssBANK0
   335  0032C2  0E50               	movlw	80
   336  0032C4                     clear_1:
   337  0032C4  6AEE               	clrf	postinc0,c
   338  0032C6  06E8               	decf	wreg,f,c
   339  0032C8  E1FD               	bnz	clear_1
   340                           
   341                           ; Clear objects allocated to COMRAM (27 bytes)
   342  0032CA  EE00  F022         	lfsr	0,__pbssCOMRAM
   343  0032CE  0E1B               	movlw	27
   344  0032D0                     clear_2:
   345  0032D0  6AEE               	clrf	postinc0,c
   346  0032D2  06E8               	decf	wreg,f,c
   347  0032D4  E1FD               	bnz	clear_2
   348                           
   349                           ; Initialize objects allocated to BANK0 (1 bytes)
   350                           ; load TBLPTR registers with __pidataBANK0
   351  0032D6  0EA7               	movlw	low __pidataBANK0
   352  0032D8  6EF6               	movwf	tblptrl,c
   353  0032DA  0E3A               	movlw	high __pidataBANK0
   354  0032DC  6EF7               	movwf	tblptrh,c
   355  0032DE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   356  0032E0  6EF8               	movwf	tblptru,c
   357  0032E2  0009               	tblrd		*+	;fetch initializer
   358  0032E4  CFF5 F0F6          	movff	tablat,__pdataBANK0
   359                           
   360                           ; Initialize objects allocated to COMRAM (3 bytes)
   361                           ; load TBLPTR registers with __pidataCOMRAM
   362  0032E8  0EA4               	movlw	low __pidataCOMRAM
   363  0032EA  6EF6               	movwf	tblptrl,c
   364  0032EC  0E3A               	movlw	high __pidataCOMRAM
   365  0032EE  6EF7               	movwf	tblptrh,c
   366  0032F0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   367  0032F2  6EF8               	movwf	tblptru,c
   368  0032F4  0009               	tblrd		*+	;fetch initializer
   369  0032F6  CFF5 F03D          	movff	tablat,__pdataCOMRAM
   370  0032FA  0009               	tblrd		*+	;fetch initializer
   371  0032FC  CFF5 F03E          	movff	tablat,__pdataCOMRAM+1
   372  003300  0009               	tblrd		*+	;fetch initializer
   373  003302  CFF5 F03F          	movff	tablat,__pdataCOMRAM+2
   374  003306                     end_of_initialization:
   375                           	opt stack 0
   376  003306                     __end_of__initialization:
   377                           	opt stack 0
   378  003306  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   379  003308  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   380  00330A  0100               	movlb	0
   381  00330C  EFE2  F00F         	goto	_main	;jump to C main() function
   382                           tblptru	equ	0xFF8
   383                           tblptrh	equ	0xFF7
   384                           tblptrl	equ	0xFF6
   385                           tablat	equ	0xFF5
   386                           postinc0	equ	0xFEE
   387                           wreg	equ	0xFE8
   388                           
   389                           	psect	bssCOMRAM
   390  000022                     __pbssCOMRAM:
   391                           	opt stack 0
   392  000022                     _I:
   393                           	opt stack 0
   394  000022                     	ds	6
   395  000028                     _auto_cut_ON:
   396                           	opt stack 0
   397  000028                     	ds	3
   398  00002B                     ISR@cnt_t0:
   399                           	opt stack 0
   400  00002B                     	ds	2
   401  00002D                     millis_timer@cnt:
   402                           	opt stack 0
   403  00002D                     	ds	2
   404  00002F                     _halfsec:
   405                           	opt stack 0
   406  00002F                     	ds	1
   407  000030                     _print_port:
   408                           	opt stack 0
   409  000030                     	ds	1
   410  000031                     _sleep_flag:
   411                           	opt stack 0
   412  000031                     	ds	1
   413  000032                     _sw0:
   414                           	opt stack 0
   415  000032                     	ds	4
   416  000036                     _sw1:
   417                           	opt stack 0
   418  000036                     	ds	4
   419  00003A                     _d_display:
   420                           	opt stack 0
   421  00003A                     	ds	3
   422                           tblptru	equ	0xFF8
   423                           tblptrh	equ	0xFF7
   424                           tblptrl	equ	0xFF6
   425                           tablat	equ	0xFF5
   426                           postinc0	equ	0xFEE
   427                           wreg	equ	0xFE8
   428                           
   429                           	psect	dataCOMRAM
   430  00003D                     __pdataCOMRAM:
   431                           	opt stack 0
   432  00003D                     I2C_LCD_SetCursor@F8672:
   433                           	opt stack 0
   434  00003D                     	ds	2
   435  00003F                     sleep_loop@prev_power_sw:
   436                           	opt stack 0
   437  00003F                     	ds	1
   438                           tblptru	equ	0xFF8
   439                           tblptrh	equ	0xFF7
   440                           tblptrl	equ	0xFF6
   441                           tablat	equ	0xFF5
   442                           postinc0	equ	0xFEE
   443                           wreg	equ	0xFE8
   444                           
   445                           	psect	bssBANK0
   446  000060                     __pbssBANK0:
   447                           	opt stack 0
   448  000060                     _S:
   449                           	opt stack 0
   450  000060                     	ds	12
   451  00006C                     _s:
   452                           	opt stack 0
   453  00006C                     	ds	12
   454  000078                     _cut_cnt:
   455                           	opt stack 0
   456  000078                     	ds	6
   457  00007E                     _ms:
   458                           	opt stack 0
   459  00007E                     	ds	4
   460  000082                     _d1:
   461                           	opt stack 0
   462  000082                     	ds	3
   463  000085                     lchika@cnt:
   464                           	opt stack 0
   465  000085                     	ds	3
   466  000088                     lchika@cntf:
   467                           	opt stack 0
   468  000088                     	ds	3
   469  00008B                     epoch_to_caltime@day_cache:
   470                           	opt stack 0
   471  00008B                     	ds	2
   472  00008D                     RTCC_loop@prev_halfsec:
   473                           	opt stack 0
   474  00008D                     	ds	1
   475  00008E                     _colon:
   476                           	opt stack 0
   477  00008E                     	ds	1
   478  00008F                     _cut_flag:
   479                           	opt stack 0
   480  00008F                     	ds	1
   481  000090                     _display_flag:
   482                           	opt stack 0
   483  000090                     	ds	1
   484  000091                     _edit_flag:
   485                           	opt stack 0
   486  000091                     	ds	1
   487  000092                     _print_content:
   488                           	opt stack 0
   489  000092                     	ds	1
   490  000093                     _time_change_flag:
   491                           	opt stack 0
   492  000093                     	ds	1
   493  000094                     epoch_to_caltime@year_cache:
   494                           	opt stack 0
   495  000094                     	ds	1
   496  000095                     _rx_buf:
   497                           	opt stack 0
   498  000095                     	ds	8
   499  00009D                     _caltime_now:
   500                           	opt stack 0
   501  00009D                     	ds	7
   502  0000A4                     _epoch_now:
   503                           	opt stack 0
   504  0000A4                     	ds	4
   505  0000A8                     _sw:
   506                           	opt stack 0
   507  0000A8                     	ds	4
   508  0000AC                     _sw2:
   509                           	opt stack 0
   510  0000AC                     	ds	4
   511                           tblptru	equ	0xFF8
   512                           tblptrh	equ	0xFF7
   513                           tblptrl	equ	0xFF6
   514                           tablat	equ	0xFF5
   515                           postinc0	equ	0xFEE
   516                           wreg	equ	0xFE8
   517                           
   518                           	psect	dataBANK0
   519  0000F6                     __pdataBANK0:
   520                           	opt stack 0
   521  0000F6                     epoch_to_caltime@month_cache:
   522                           	opt stack 0
   523  0000F6                     	ds	1
   524                           tblptru	equ	0xFF8
   525                           tblptrh	equ	0xFF7
   526                           tblptrl	equ	0xFF6
   527                           tablat	equ	0xFF5
   528                           postinc0	equ	0xFEE
   529                           wreg	equ	0xFE8
   530                           
   531                           	psect	bssBANK1
   532  0001C8                     __pbssBANK1:
   533                           	opt stack 0
   534  0001C8                     _tx_buf:
   535                           	opt stack 0
   536  0001C8                     	ds	8
   537                           tblptru	equ	0xFF8
   538                           tblptrh	equ	0xFF7
   539                           tblptrl	equ	0xFF6
   540                           tablat	equ	0xFF5
   541                           postinc0	equ	0xFEE
   542                           wreg	equ	0xFE8
   543                           
   544                           	psect	cstackBANK1
   545  000100                     __pcstackBANK1:
   546                           	opt stack 0
   547  000100                     main_init@txbuf:
   548                           	opt stack 0
   549                           
   550                           ; 200 bytes @ 0x0
   551  000100                     	ds	200
   552                           tblptru	equ	0xFF8
   553                           tblptrh	equ	0xFF7
   554                           tblptrl	equ	0xFF6
   555                           tablat	equ	0xFF5
   556                           postinc0	equ	0xFEE
   557                           wreg	equ	0xFE8
   558                           
   559                           	psect	cstackBANK0
   560  0000B0                     __pcstackBANK0:
   561                           	opt stack 0
   562  0000B0                     ??_ADC:
   563  0000B0                     ??_Delay_ms:
   564  0000B0                     ?___awdiv:
   565                           	opt stack 0
   566  0000B0                     ?___awmod:
   567                           	opt stack 0
   568  0000B0                     ?___lwmod:
   569                           	opt stack 0
   570  0000B0                     ?___lldiv:
   571                           	opt stack 0
   572  0000B0                     timer1_init@prescaler:
   573                           	opt stack 0
   574  0000B0                     I2C_Start@rw:
   575                           	opt stack 0
   576  0000B0                     I2C_Send@data:
   577                           	opt stack 0
   578  0000B0                     ringbuf_init@rb:
   579                           	opt stack 0
   580  0000B0                     delay_set@d:
   581                           	opt stack 0
   582  0000B0                     RTCC_to_caltime@ct:
   583                           	opt stack 0
   584  0000B0                     ___awdiv@dividend:
   585                           	opt stack 0
   586  0000B0                     ___awmod@dividend:
   587                           	opt stack 0
   588  0000B0                     ___lwmod@dividend:
   589                           	opt stack 0
   590  0000B0                     ___lldiv@dividend:
   591                           	opt stack 0
   592                           
   593                           ; 4 bytes @ 0x0
   594  0000B0                     	ds	1
   595  0000B1                     ADC@ch:
   596                           	opt stack 0
   597  0000B1                     I2C_Start@adrs:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x1
   601  0000B1                     	ds	1
   602  0000B2                     ?___wmul:
   603                           	opt stack 0
   604  0000B2                     I2C_LCD_Command@c:
   605                           	opt stack 0
   606  0000B2                     I2C_LCD_Putc@c:
   607                           	opt stack 0
   608  0000B2                     RTCC_to_caltime@dumy:
   609                           	opt stack 0
   610  0000B2                     ringbuf_init@internal_buf:
   611                           	opt stack 0
   612  0000B2                     delay_set@value:
   613                           	opt stack 0
   614  0000B2                     I2C_LCD_Puts@s:
   615                           	opt stack 0
   616  0000B2                     ___wmul@multiplier:
   617                           	opt stack 0
   618  0000B2                     ___awdiv@divisor:
   619                           	opt stack 0
   620  0000B2                     ___awmod@divisor:
   621                           	opt stack 0
   622  0000B2                     ___lwmod@divisor:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x2
   626  0000B2                     	ds	1
   627  0000B3                     I2C_LCD_Command@ans:
   628                           	opt stack 0
   629  0000B3                     I2C_LCD_Putc@ans:
   630                           	opt stack 0
   631                           
   632                           ; 1 bytes @ 0x3
   633  0000B3                     	ds	1
   634  0000B4                     ??_I2C_LCD_Clear:
   635  0000B4                     ??_I2C_LCD_Puts:
   636  0000B4                     ?___lwdiv:
   637                           	opt stack 0
   638  0000B4                     I2C_LCD_SetCursor@row:
   639                           	opt stack 0
   640  0000B4                     month_length@month:
   641                           	opt stack 0
   642  0000B4                     nomal_mode_loop@i:
   643                           	opt stack 0
   644  0000B4                     ___awdiv@counter:
   645                           	opt stack 0
   646  0000B4                     ringbuf_init@bufsize:
   647                           	opt stack 0
   648  0000B4                     ___wmul@multiplicand:
   649                           	opt stack 0
   650  0000B4                     ___lwdiv@dividend:
   651                           	opt stack 0
   652  0000B4                     ___lldiv@divisor:
   653                           	opt stack 0
   654                           
   655                           ; 4 bytes @ 0x4
   656  0000B4                     	ds	1
   657  0000B5                     ??_month_length:
   658  0000B5                     ___awdiv@sign:
   659                           	opt stack 0
   660  0000B5                     I2C_LCD_SetCursor@row_offsets:
   661                           	opt stack 0
   662  0000B5                     I2C_LCD_Puts@ans:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0x5
   666  0000B5                     	ds	1
   667  0000B6                     ___wmul@product:
   668                           	opt stack 0
   669  0000B6                     ___awdiv@quotient:
   670                           	opt stack 0
   671  0000B6                     ___lwdiv@divisor:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x6
   675  0000B6                     	ds	1
   676  0000B7                     I2C_LCD_SetCursor@col:
   677                           	opt stack 0
   678                           
   679                           ; 1 bytes @ 0x7
   680  0000B7                     	ds	1
   681  0000B8                     ??_Auto_cut:
   682  0000B8                     ___lwdiv@counter:
   683                           	opt stack 0
   684  0000B8                     caltime_to_RTCC@ct:
   685                           	opt stack 0
   686  0000B8                     ___lldiv@quotient:
   687                           	opt stack 0
   688                           
   689                           ; 4 bytes @ 0x8
   690  0000B8                     	ds	1
   691  0000B9                     month_length@year:
   692                           	opt stack 0
   693  0000B9                     ___lwdiv@quotient:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0x9
   697  0000B9                     	ds	1
   698  0000BA                     Auto_cut@i:
   699                           	opt stack 0
   700                           
   701                           ; 1 bytes @ 0xA
   702  0000BA                     	ds	1
   703  0000BB                     my_utoa@str:
   704                           	opt stack 0
   705                           
   706                           ; 2 bytes @ 0xB
   707  0000BB                     	ds	1
   708  0000BC                     ___lldiv@counter:
   709                           	opt stack 0
   710                           
   711                           ; 1 bytes @ 0xC
   712  0000BC                     	ds	1
   713  0000BD                     ?___lmul:
   714                           	opt stack 0
   715  0000BD                     my_utoa@value:
   716                           	opt stack 0
   717  0000BD                     ___lmul@multiplier:
   718                           	opt stack 0
   719                           
   720                           ; 4 bytes @ 0xD
   721  0000BD                     	ds	2
   722  0000BF                     my_utoa@digits:
   723                           	opt stack 0
   724                           
   725                           ; 1 bytes @ 0xF
   726  0000BF                     	ds	1
   727  0000C0                     my_utoa@d:
   728                           	opt stack 0
   729                           
   730                           ; 1 bytes @ 0x10
   731  0000C0                     	ds	1
   732  0000C1                     my_utoa@v:
   733                           	opt stack 0
   734  0000C1                     ___lmul@multiplicand:
   735                           	opt stack 0
   736                           
   737                           ; 4 bytes @ 0x11
   738  0000C1                     	ds	2
   739  0000C3                     display_dec@edit:
   740                           	opt stack 0
   741                           
   742                           ; 1 bytes @ 0x13
   743  0000C3                     	ds	1
   744  0000C4                     display_dec@str:
   745                           	opt stack 0
   746                           
   747                           ; 10 bytes @ 0x14
   748  0000C4                     	ds	1
   749  0000C5                     ___lmul@product:
   750                           	opt stack 0
   751                           
   752                           ; 4 bytes @ 0x15
   753  0000C5                     	ds	4
   754  0000C9                     ?_get_quot_rem:
   755                           	opt stack 0
   756  0000C9                     get_quot_rem@quot:
   757                           	opt stack 0
   758  0000C9                     caltime_to_epoch@ct:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x19
   762  0000C9                     	ds	2
   763  0000CB                     get_quot_rem@div:
   764                           	opt stack 0
   765  0000CB                     caltime_to_epoch@ep:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0x1B
   769  0000CB                     	ds	2
   770  0000CD                     ??_caltime_to_epoch:
   771  0000CD                     get_quot_rem@num:
   772                           	opt stack 0
   773                           
   774                           ; 4 bytes @ 0x1D
   775  0000CD                     	ds	1
   776  0000CE                     display_dec@dec:
   777                           	opt stack 0
   778                           
   779                           ; 1 bytes @ 0x1E
   780  0000CE                     	ds	3
   781  0000D1                     caltime_to_epoch@year:
   782                           	opt stack 0
   783  0000D1                     epoch_to_caltime@ct:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x21
   787  0000D1                     	ds	1
   788  0000D2                     caltime_to_epoch@month_2136:
   789                           	opt stack 0
   790                           
   791                           ; 1 bytes @ 0x22
   792  0000D2                     	ds	1
   793  0000D3                     epoch_to_caltime@ep:
   794                           	opt stack 0
   795  0000D3                     caltime_to_epoch@epoch:
   796                           	opt stack 0
   797                           
   798                           ; 4 bytes @ 0x23
   799  0000D3                     	ds	2
   800  0000D5                     ??_epoch_to_caltime:
   801                           
   802                           ; 0 bytes @ 0x25
   803  0000D5                     	ds	2
   804  0000D7                     caltime_to_epoch@month:
   805                           	opt stack 0
   806  0000D7                     epoch_to_caltime@day_since_epoch:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0x27
   810  0000D7                     	ds	1
   811  0000D8                     RTCC_from_RTCC@ct:
   812                           	opt stack 0
   813                           
   814                           ; 2 bytes @ 0x28
   815  0000D8                     	ds	1
   816  0000D9                     epoch_to_caltime@day:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0x29
   820  0000D9                     	ds	1
   821  0000DA                     RTCC_from_RTCC@ep:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x2A
   825  0000DA                     	ds	1
   826  0000DB                     epoch_to_caltime@year:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0x2B
   830  0000DB                     	ds	1
   831  0000DC                     epoch_to_caltime@month:
   832                           	opt stack 0
   833  0000DC                     sleep_loop@i_2520:
   834                           	opt stack 0
   835  0000DC                     display_time_0802@ct:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0x2C
   839  0000DC                     	ds	1
   840  0000DD                     sleep_loop@i:
   841                           	opt stack 0
   842  0000DD                     epoch_to_caltime@num:
   843                           	opt stack 0
   844                           
   845                           ; 4 bytes @ 0x2D
   846  0000DD                     	ds	1
   847  0000DE                     display_time_0802@ep:
   848                           	opt stack 0
   849                           
   850                           ; 2 bytes @ 0x2E
   851  0000DE                     	ds	2
   852  0000E0                     ??_display_time_0802:
   853                           
   854                           ; 0 bytes @ 0x30
   855  0000E0                     	ds	1
   856  0000E1                     RTCC_from_epoch@ct:
   857                           	opt stack 0
   858  0000E1                     display_LCD@str:
   859                           	opt stack 0
   860                           
   861                           ; 10 bytes @ 0x31
   862  0000E1                     	ds	2
   863  0000E3                     RTCC_from_epoch@ep:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x33
   867  0000E3                     	ds	2
   868  0000E5                     RTCC_adjust_time_inc@ct:
   869                           	opt stack 0
   870  0000E5                     RTCC_adjust_time_dec@ct:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0x35
   874  0000E5                     	ds	2
   875  0000E7                     RTCC_adjust_time_inc@ep:
   876                           	opt stack 0
   877  0000E7                     RTCC_adjust_time_dec@ep:
   878                           	opt stack 0
   879                           
   880                           ; 2 bytes @ 0x37
   881  0000E7                     	ds	2
   882  0000E9                     ??_RTCC_adjust_time_inc:
   883  0000E9                     ??_RTCC_adjust_time_dec:
   884                           
   885                           ; 0 bytes @ 0x39
   886  0000E9                     	ds	4
   887  0000ED                     RTCC_adjust_time_inc@i_2218:
   888                           	opt stack 0
   889  0000ED                     RTCC_adjust_time_dec@i_2231:
   890                           	opt stack 0
   891                           
   892                           ; 1 bytes @ 0x3D
   893  0000ED                     	ds	1
   894  0000EE                     RTCC_adjust_time_inc@i:
   895                           	opt stack 0
   896  0000EE                     RTCC_adjust_time_dec@i:
   897                           	opt stack 0
   898                           
   899                           ; 1 bytes @ 0x3E
   900  0000EE                     	ds	1
   901  0000EF                     RTCC_adjust_time_button@mode:
   902                           	opt stack 0
   903                           
   904                           ; 2 bytes @ 0x3F
   905  0000EF                     	ds	2
   906  0000F1                     RTCC_adjust_time_button@cnt_inc:
   907                           	opt stack 0
   908                           
   909                           ; 2 bytes @ 0x41
   910  0000F1                     	ds	2
   911  0000F3                     RTCC_adjust_time_button@cnt_dec:
   912                           	opt stack 0
   913                           
   914                           ; 2 bytes @ 0x43
   915  0000F3                     	ds	2
   916  0000F5                     main@i:
   917                           	opt stack 0
   918                           
   919                           ; 1 bytes @ 0x45
   920  0000F5                     	ds	1
   921                           tblptru	equ	0xFF8
   922                           tblptrh	equ	0xFF7
   923                           tblptrl	equ	0xFF6
   924                           tablat	equ	0xFF5
   925                           postinc0	equ	0xFEE
   926                           wreg	equ	0xFE8
   927                           
   928                           	psect	cstackCOMRAM
   929  000001                     __pcstackCOMRAM:
   930                           	opt stack 0
   931  000001                     ?_ringbuf_num:
   932                           	opt stack 0
   933  000001                     ?i2___awdiv:
   934                           	opt stack 0
   935  000001                     ?i2___lwdiv:
   936                           	opt stack 0
   937  000001                     ?i2___lldiv:
   938                           	opt stack 0
   939  000001                     i2LED@value:
   940                           	opt stack 0
   941  000001                     ringbuf_num@rb:
   942                           	opt stack 0
   943  000001                     delay_timer_interrupt@d:
   944                           	opt stack 0
   945  000001                     button_timer_interrupt@bt:
   946                           	opt stack 0
   947  000001                     i2___awdiv@dividend:
   948                           	opt stack 0
   949  000001                     i2___lwdiv@dividend:
   950                           	opt stack 0
   951  000001                     i2___lldiv@dividend:
   952                           	opt stack 0
   953                           
   954                           ; 4 bytes @ 0x0
   955  000001                     	ds	1
   956  000002                     i2LED@b:
   957                           	opt stack 0
   958                           
   959                           ; 1 bytes @ 0x1
   960  000002                     	ds	1
   961  000003                     ??_ringbuf_num:
   962  000003                     button_timer_interrupt@sw_value:
   963                           	opt stack 0
   964  000003                     i2___awdiv@divisor:
   965                           	opt stack 0
   966  000003                     i2___lwdiv@divisor:
   967                           	opt stack 0
   968                           
   969                           ; 2 bytes @ 0x2
   970  000003                     	ds	1
   971  000004                     
   972                           ; 0 bytes @ 0x3
   973  000004                     	ds	1
   974  000005                     i2___awdiv@counter:
   975                           	opt stack 0
   976  000005                     i2___lwdiv@quotient:
   977                           	opt stack 0
   978  000005                     i2___lldiv@divisor:
   979                           	opt stack 0
   980                           
   981                           ; 4 bytes @ 0x4
   982  000005                     	ds	1
   983  000006                     i2___awdiv@sign:
   984                           	opt stack 0
   985                           
   986                           ; 1 bytes @ 0x5
   987  000006                     	ds	1
   988  000007                     i2___lwdiv@counter:
   989                           	opt stack 0
   990  000007                     i2___awdiv@quotient:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0x6
   994  000007                     	ds	2
   995  000009                     ??_lchika:
   996  000009                     ringbuf_put@rb:
   997                           	opt stack 0
   998  000009                     ringbuf_pop@rb:
   999                           	opt stack 0
  1000  000009                     i2___lldiv@quotient:
  1001                           	opt stack 0
  1002                           
  1003                           ; 4 bytes @ 0x8
  1004  000009                     	ds	2
  1005  00000B                     ??_ringbuf_pop:
  1006  00000B                     ringbuf_put@asciicode:
  1007                           	opt stack 0
  1008                           
  1009                           ; 1 bytes @ 0xA
  1010  00000B                     	ds	1
  1011  00000C                     ??_ringbuf_put:
  1012  00000C                     lchika@i:
  1013                           	opt stack 0
  1014                           
  1015                           ; 1 bytes @ 0xB
  1016  00000C                     	ds	1
  1017  00000D                     i2___lldiv@counter:
  1018                           	opt stack 0
  1019                           
  1020                           ; 1 bytes @ 0xC
  1021  00000D                     	ds	1
  1022  00000E                     ??_integrating:
  1023                           
  1024                           ; 0 bytes @ 0xD
  1025  00000E                     	ds	1
  1026  00000F                     ringbuf_pop@ret:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0xE
  1030  00000F                     	ds	1
  1031  000010                     UART_ISR@ascii:
  1032                           	opt stack 0
  1033  000010                     tx_send@asciicode:
  1034                           	opt stack 0
  1035  000010                     integrating@port:
  1036                           	opt stack 0
  1037                           
  1038                           ; 1 bytes @ 0xF
  1039  000010                     	ds	1
  1040  000011                     ??_ISR:
  1041                           
  1042                           ; 0 bytes @ 0x10
  1043  000011                     	ds	14
  1044  00001F                     ISR@ascii:
  1045                           	opt stack 0
  1046                           
  1047                           ; 1 bytes @ 0x1E
  1048  00001F                     	ds	1
  1049  000020                     ??_timer0_init:
  1050  000020                     ??_timer3_init:
  1051  000020                     ??_I2C_IdleCheck:
  1052  000020                     ??_x_to_d:
  1053  000020                     ?_ADC:
  1054                           	opt stack 0
  1055  000020                     timer1_init@clock_select:
  1056                           	opt stack 0
  1057  000020                     ADC_init@p_ref:
  1058                           	opt stack 0
  1059  000020                     d_to_x@dec:
  1060                           	opt stack 0
  1061  000020                     OUT@value:
  1062                           	opt stack 0
  1063  000020                     LED@value:
  1064                           	opt stack 0
  1065  000020                     sw_flag_read@bit_and:
  1066                           	opt stack 0
  1067  000020                     sw_flag_clear@bit_and:
  1068                           	opt stack 0
  1069  000020                     ___awmod@counter:
  1070                           	opt stack 0
  1071  000020                     ___lwmod@counter:
  1072                           	opt stack 0
  1073  000020                     Delay_ms@ms:
  1074                           	opt stack 0
  1075                           
  1076                           ; 2 bytes @ 0x1F
  1077  000020                     	ds	1
  1078  000021                     ??_timer1_init:
  1079  000021                     timer0_init@prescaler:
  1080                           	opt stack 0
  1081  000021                     timer3_init@prescaler:
  1082                           	opt stack 0
  1083  000021                     I2C_IdleCheck@mask:
  1084                           	opt stack 0
  1085  000021                     x_to_d@hex:
  1086                           	opt stack 0
  1087  000021                     OUT@b:
  1088                           	opt stack 0
  1089  000021                     LED@b:
  1090                           	opt stack 0
  1091  000021                     sw_flag_read@port:
  1092                           	opt stack 0
  1093  000021                     sw_flag_clear@port:
  1094                           	opt stack 0
  1095  000021                     ___awmod@sign:
  1096                           	opt stack 0
  1097                           
  1098                           ; 1 bytes @ 0x20
  1099  000021                     	ds	1
  1100  000022                     tblptru	equ	0xFF8
  1101                           tblptrh	equ	0xFF7
  1102                           tblptrl	equ	0xFF6
  1103                           tablat	equ	0xFF5
  1104                           postinc0	equ	0xFEE
  1105                           wreg	equ	0xFE8
  1106                           
  1107                           ; 0 bytes @ 0x21
  1108 ;;
  1109 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1110 ;;
  1111 ;; *************** function _main *****************
  1112 ;; Defined at:
  1113 ;;		line 100 in file "main.c"
  1114 ;; Parameters:    Size  Location     Type
  1115 ;;		None
  1116 ;; Auto vars:     Size  Location     Type
  1117 ;;  i               1   69[BANK0 ] unsigned char 
  1118 ;; Return value:  Size  Location     Type
  1119 ;;                  2  724[None  ] int 
  1120 ;; Registers used:
  1121 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1122 ;; Tracked objects:
  1123 ;;		On entry : 0/0
  1124 ;;		On exit  : 0/0
  1125 ;;		Unchanged: 0/0
  1126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1128 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1130 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1131 ;;Total ram usage:        1 bytes
  1132 ;; Hardware stack levels required when called:   10
  1133 ;; This function calls:
  1134 ;;		_Auto_cut
  1135 ;;		_Delay_ms
  1136 ;;		_I2C_LCD_Clear
  1137 ;;		_I2C_LCD_Puts
  1138 ;;		_I2C_LCD_SetCursor
  1139 ;;		_LED
  1140 ;;		_OUT
  1141 ;;		_RTCC_adjust_time_button
  1142 ;;		_RTCC_from_RTCC
  1143 ;;		_RTCC_loop
  1144 ;;		_display_LCD
  1145 ;;		_main_init
  1146 ;;		_nomal_mode_loop
  1147 ;;		_sleep_loop
  1148 ;; This function is called by:
  1149 ;;		Startup code after reset
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           	psect	text0
  1154  001FC4                     __ptext0:
  1155                           	opt stack 0
  1156  001FC4                     _main:
  1157                           	opt stack 21
  1158                           
  1159                           ;main.c: 101: main_init();
  1160                           
  1161                           ;incstack = 0
  1162  001FC4  ECA6  F018         	call	_main_init	;wreg free
  1163                           
  1164                           ;main.c: 102: INTCONbits.GIE = 1;
  1165  001FC8  8EF2               	bsf	intcon,7,c	;volatile
  1166                           
  1167                           ;main.c: 106: RTCC_from_RTCC(&caltime_now, &epoch_now);
  1168  001FCA  0E9D               	movlw	low _caltime_now
  1169  001FCC  0100               	movlb	0	; () banked
  1170  001FCE  6FD8               	movwf	RTCC_from_RTCC@ct& (0+255),b
  1171  001FD0  0E00               	movlw	high _caltime_now
  1172  001FD2  0100               	movlb	0	; () banked
  1173  001FD4  6FD9               	movwf	(RTCC_from_RTCC@ct+1)& (0+255),b
  1174  001FD6  0EA4               	movlw	low _epoch_now
  1175  001FD8  0100               	movlb	0	; () banked
  1176  001FDA  6FDA               	movwf	RTCC_from_RTCC@ep& (0+255),b
  1177  001FDC  0E00               	movlw	high _epoch_now
  1178  001FDE  0100               	movlb	0	; () banked
  1179  001FE0  6FDB               	movwf	(RTCC_from_RTCC@ep+1)& (0+255),b
  1180  001FE2  ECCF  F01C         	call	_RTCC_from_RTCC	;wreg free
  1181                           
  1182                           ;main.c: 107: print_content = TIME;
  1183  001FE6  0E01               	movlw	1
  1184  001FE8  0100               	movlb	0	; () banked
  1185  001FEA  6F92               	movwf	_print_content& (0+255),b
  1186                           
  1187                           ; BSR set to: 0
  1188                           ;main.c: 109: I2C_LCD_Clear();
  1189  001FEC  ECFE  F01C         	call	_I2C_LCD_Clear	;wreg free
  1190                           
  1191                           ;main.c: 110: I2C_LCD_SetCursor(0, 0);
  1192  001FF0  0E00               	movlw	0
  1193  001FF2  0100               	movlb	0	; () banked
  1194  001FF4  6FB4               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  1195  001FF6  0E00               	movlw	0
  1196  001FF8  EC5E  F01C         	call	_I2C_LCD_SetCursor
  1197                           
  1198                           ;main.c: 111: I2C_LCD_Puts("Charge");
  1199  001FFC  0E4D               	movlw	low STR_8
  1200  001FFE  0100               	movlb	0	; () banked
  1201  002000  6FB2               	movwf	I2C_LCD_Puts@s& (0+255),b
  1202  002002  0E0F               	movlw	high STR_8
  1203  002004  0100               	movlb	0	; () banked
  1204  002006  6FB3               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  1205  002008  EC98  F017         	call	_I2C_LCD_Puts	;wreg free
  1206                           
  1207                           ;main.c: 112: I2C_LCD_SetCursor(0, 1);
  1208  00200C  0E01               	movlw	1
  1209  00200E  0100               	movlb	0	; () banked
  1210  002010  6FB4               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  1211  002012  0E00               	movlw	0
  1212  002014  EC5E  F01C         	call	_I2C_LCD_SetCursor
  1213                           
  1214                           ;main.c: 113: I2C_LCD_Puts("Station");
  1215  002018  0E37               	movlw	low STR_9
  1216  00201A  0100               	movlb	0	; () banked
  1217  00201C  6FB2               	movwf	I2C_LCD_Puts@s& (0+255),b
  1218  00201E  0E0F               	movlw	high STR_9
  1219  002020  0100               	movlb	0	; () banked
  1220  002022  6FB3               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  1221  002024  EC98  F017         	call	_I2C_LCD_Puts	;wreg free
  1222                           
  1223                           ;main.c: 114: Delay_ms(2000);
  1224  002028  0E07               	movlw	7
  1225  00202A  6E21               	movwf	Delay_ms@ms+1,c
  1226  00202C  0ED0               	movlw	208
  1227  00202E  6E20               	movwf	Delay_ms@ms,c
  1228  002030  EC87  F01C         	call	_Delay_ms	;wreg free
  1229                           
  1230                           ;main.c: 116: uint8_t i;
  1231                           ;main.c: 118: for (i = 0; i < 3; i++) {
  1232  002034  0E00               	movlw	0
  1233  002036  0100               	movlb	0	; () banked
  1234  002038  6FF5               	movwf	main@i& (0+255),b
  1235  00203A                     l5841:
  1236                           
  1237                           ; BSR set to: 0
  1238  00203A  0E02               	movlw	2
  1239  00203C  0100               	movlb	0	; () banked
  1240  00203E  65F5               	cpfsgt	main@i& (0+255),b
  1241  002040  D001               	goto	l5845
  1242  002042  D027               	goto	l5855
  1243  002044                     l5845:
  1244                           
  1245                           ; BSR set to: 0
  1246                           ;main.c: 119: OUT(i, 1);
  1247  002044  0E01               	movlw	1
  1248  002046  6E20               	movwf	OUT@value,c
  1249  002048  0100               	movlb	0	; () banked
  1250  00204A  51F5               	movf	main@i& (0+255),w,b
  1251  00204C  EC39  F01B         	call	_OUT
  1252                           
  1253                           ;main.c: 120: LED(i, 1);
  1254  002050  0E01               	movlw	1
  1255  002052  6E20               	movwf	LED@value,c
  1256  002054  0100               	movlb	0	; () banked
  1257  002056  51F5               	movf	main@i& (0+255),w,b
  1258  002058  EC1A  F01B         	call	_LED
  1259                           
  1260                           ;main.c: 121: cut_cnt[i] = 0;
  1261  00205C  0100               	movlb	0	; () banked
  1262  00205E  51F5               	movf	main@i& (0+255),w,b
  1263  002060  0D02               	mullw	2
  1264  002062  0E78               	movlw	low _cut_cnt
  1265  002064  24F3               	addwf	prodl,w,c
  1266  002066  6ED9               	movwf	fsr2l,c
  1267  002068  0E00               	movlw	high _cut_cnt
  1268  00206A  20F4               	addwfc	prodh,w,c
  1269  00206C  6EDA               	movwf	fsr2h,c
  1270  00206E  0E00               	movlw	0
  1271  002070  6EDE               	movwf	postinc2,c
  1272  002072  0E00               	movlw	0
  1273  002074  6EDD               	movwf	postdec2,c
  1274                           
  1275                           ; BSR set to: 0
  1276                           ;main.c: 122: auto_cut_ON[i] = 1;
  1277  002076  0100               	movlb	0	; () banked
  1278  002078  51F5               	movf	main@i& (0+255),w,b
  1279  00207A  0D01               	mullw	1
  1280  00207C  0E28               	movlw	low _auto_cut_ON
  1281  00207E  24F3               	addwf	prodl,w,c
  1282  002080  6ED9               	movwf	fsr2l,c
  1283  002082  0E00               	movlw	high _auto_cut_ON
  1284  002084  20F4               	addwfc	prodh,w,c
  1285  002086  6EDA               	movwf	fsr2h,c
  1286  002088  0E01               	movlw	1
  1287  00208A  6EDF               	movwf	indf2,c
  1288                           
  1289                           ; BSR set to: 0
  1290  00208C  0100               	movlb	0	; () banked
  1291  00208E  2BF5               	incf	main@i& (0+255),f,b
  1292  002090  D7D4               	goto	l5841
  1293  002092                     l5855:
  1294                           
  1295                           ;main.c: 126: if (!sleep_flag) {
  1296  002092  5031               	movf	_sleep_flag,w,c
  1297  002094  A4D8               	btfss	status,2,c
  1298  002096  D052               	goto	l5893
  1299                           
  1300                           ;main.c: 127: if (!edit_flag.flags) {
  1301  002098  0100               	movlb	0	; () banked
  1302  00209A  5191               	movf	_edit_flag& (0+255),w,b
  1303  00209C  A4D8               	btfss	status,2,c
  1304  00209E  D018               	goto	l729
  1305                           
  1306                           ; BSR set to: 0
  1307                           ;main.c: 128: nomal_mode_loop();
  1308  0020A0  ECF6  F00D         	call	_nomal_mode_loop	;wreg free
  1309                           
  1310                           ;main.c: 129: if (sw.flag.press) {
  1311  0020A4  0100               	movlb	0	; () banked
  1312  0020A6  A1AA               	btfss	(_sw+2)& (0+255),0,b
  1313  0020A8  D013               	goto	l729
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;main.c: 130: sw.flag.press = 0;
  1317  0020AA  0100               	movlb	0	; () banked
  1318  0020AC  91AA               	bcf	(_sw+2)& (0+255),0,b
  1319                           
  1320                           ; BSR set to: 0
  1321                           ;main.c: 131: if (print_content == CURRENT)print_content = INTEGRATING;
  1322  0020AE  0E02               	movlw	2
  1323  0020B0  0100               	movlb	0	; () banked
  1324  0020B2  1992               	xorwf	_print_content& (0+255),w,b
  1325  0020B4  A4D8               	btfss	status,2,c
  1326  0020B6  D002               	goto	l5869
  1327                           
  1328                           ; BSR set to: 0
  1329  0020B8  0E03               	movlw	3
  1330  0020BA  D008               	goto	L2
  1331  0020BC                     l5869:
  1332                           
  1333                           ; BSR set to: 0
  1334                           ;main.c: 132: else if (print_content == INTEGRATING)print_content = TIME;
  1335  0020BC  0E03               	movlw	3
  1336  0020BE  0100               	movlb	0	; () banked
  1337  0020C0  1992               	xorwf	_print_content& (0+255),w,b
  1338  0020C2  A4D8               	btfss	status,2,c
  1339  0020C4  D002               	goto	l5873
  1340                           
  1341                           ; BSR set to: 0
  1342  0020C6  0E01               	movlw	1
  1343  0020C8  D001               	goto	L2
  1344  0020CA                     l5873:
  1345                           
  1346                           ; BSR set to: 0
  1347                           ;main.c: 133: else print_content = CURRENT;
  1348  0020CA  0E02               	movlw	2
  1349  0020CC                     L2:
  1350  0020CC  0100               	movlb	0	; () banked
  1351  0020CE  6F92               	movwf	_print_content& (0+255),b
  1352  0020D0                     l729:
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;main.c: 134: }
  1356                           ;main.c: 135: }
  1357                           ;main.c: 136: if (cut_flag) {
  1358  0020D0  0100               	movlb	0	; () banked
  1359  0020D2  518F               	movf	_cut_flag& (0+255),w,b
  1360  0020D4  B4D8               	btfsc	status,2,c
  1361  0020D6  D005               	goto	l5879
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;main.c: 137: cut_flag = 0;
  1365  0020D8  0E00               	movlw	0
  1366  0020DA  0100               	movlb	0	; () banked
  1367  0020DC  6F8F               	movwf	_cut_flag& (0+255),b
  1368                           
  1369                           ; BSR set to: 0
  1370                           ;main.c: 138: Auto_cut();
  1371  0020DE  EC4F  F012         	call	_Auto_cut	;wreg free
  1372  0020E2                     l5879:
  1373                           
  1374                           ;main.c: 139: }
  1375                           ;main.c: 140: RTCC_loop();
  1376  0020E2  ECF8  F01A         	call	_RTCC_loop	;wreg free
  1377                           
  1378                           ;main.c: 141: if (time_change_flag) {
  1379  0020E6  0100               	movlb	0	; () banked
  1380  0020E8  5193               	movf	_time_change_flag& (0+255),w,b
  1381  0020EA  B4D8               	btfsc	status,2,c
  1382  0020EC  D006               	goto	l5883
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;main.c: 142: time_change_flag = 0;
  1386  0020EE  0E00               	movlw	0
  1387  0020F0  0100               	movlb	0	; () banked
  1388  0020F2  6F93               	movwf	_time_change_flag& (0+255),b
  1389                           
  1390                           ;main.c: 143: display_flag = 1;
  1391  0020F4  0E01               	movlw	1
  1392  0020F6  0100               	movlb	0	; () banked
  1393  0020F8  6F90               	movwf	_display_flag& (0+255),b
  1394  0020FA                     l5883:
  1395                           
  1396                           ; BSR set to: 0
  1397                           ;main.c: 144: }
  1398                           ;main.c: 145: if (print_content == TIME)RTCC_adjust_time_button(&sw, &sw0, &sw1);
  1399  0020FA  0100               	movlb	0	; () banked
  1400  0020FC  0592               	decf	_print_content& (0+255),w,b
  1401  0020FE  A4D8               	btfss	status,2,c
  1402  002100  D014               	goto	l5887
  1403                           
  1404                           ; BSR set to: 0
  1405  002102  0EA8               	movlw	low _sw
  1406  002104  0100               	movlb	0	; () banked
  1407  002106  6FEF               	movwf	RTCC_adjust_time_button@mode& (0+255),b
  1408  002108  0E00               	movlw	high _sw
  1409  00210A  0100               	movlb	0	; () banked
  1410  00210C  6FF0               	movwf	(RTCC_adjust_time_button@mode+1)& (0+255),b
  1411  00210E  0E32               	movlw	low _sw0
  1412  002110  0100               	movlb	0	; () banked
  1413  002112  6FF1               	movwf	RTCC_adjust_time_button@cnt_inc& (0+255),b
  1414  002114  0E00               	movlw	high _sw0
  1415  002116  0100               	movlb	0	; () banked
  1416  002118  6FF2               	movwf	(RTCC_adjust_time_button@cnt_inc+1)& (0+255),b
  1417  00211A  0E36               	movlw	low _sw1
  1418  00211C  0100               	movlb	0	; () banked
  1419  00211E  6FF3               	movwf	RTCC_adjust_time_button@cnt_dec& (0+255),b
  1420  002120  0E00               	movlw	high _sw1
  1421  002122  0100               	movlb	0	; () banked
  1422  002124  6FF4               	movwf	(RTCC_adjust_time_button@cnt_dec+1)& (0+255),b
  1423  002126  EC3D  F011         	call	_RTCC_adjust_time_button	;wreg free
  1424  00212A                     l5887:
  1425                           
  1426                           ;main.c: 146: if (display_flag) {
  1427  00212A  0100               	movlb	0	; () banked
  1428  00212C  5190               	movf	_display_flag& (0+255),w,b
  1429  00212E  B4D8               	btfsc	status,2,c
  1430  002130  D005               	goto	l5893
  1431                           
  1432                           ; BSR set to: 0
  1433                           ;main.c: 147: display_flag = 0;
  1434  002132  0E00               	movlw	0
  1435  002134  0100               	movlb	0	; () banked
  1436  002136  6F90               	movwf	_display_flag& (0+255),b
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;main.c: 148: display_LCD();
  1440  002138  ECBD  F007         	call	_display_LCD	;wreg free
  1441  00213C                     l5893:
  1442                           
  1443                           ;main.c: 149: }
  1444                           ;main.c: 150: }
  1445                           ;main.c: 151: sleep_loop();
  1446  00213C  EC78  F014         	call	_sleep_loop	;wreg free
  1447  002140  D7A8               	goto	l5855
  1448  002142                     __end_of_main:
  1449                           	opt stack 0
  1450                           tblptru	equ	0xFF8
  1451                           tblptrh	equ	0xFF7
  1452                           tblptrl	equ	0xFF6
  1453                           tablat	equ	0xFF5
  1454                           prodh	equ	0xFF4
  1455                           prodl	equ	0xFF3
  1456                           intcon	equ	0xFF2
  1457                           postinc0	equ	0xFEE
  1458                           wreg	equ	0xFE8
  1459                           indf2	equ	0xFDF
  1460                           postinc2	equ	0xFDE
  1461                           postdec2	equ	0xFDD
  1462                           fsr2h	equ	0xFDA
  1463                           fsr2l	equ	0xFD9
  1464                           status	equ	0xFD8
  1465                           
  1466 ;; *************** function _sleep_loop *****************
  1467 ;; Defined at:
  1468 ;;		line 290 in file "tasks.h"
  1469 ;; Parameters:    Size  Location     Type
  1470 ;;		None
  1471 ;; Auto vars:     Size  Location     Type
  1472 ;;  i               1   44[BANK0 ] unsigned char 
  1473 ;;  i               1   45[BANK0 ] unsigned char 
  1474 ;; Return value:  Size  Location     Type
  1475 ;;		None               void
  1476 ;; Registers used:
  1477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1478 ;; Tracked objects:
  1479 ;;		On entry : 0/0
  1480 ;;		On exit  : 0/0
  1481 ;;		Unchanged: 0/0
  1482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1484 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1486 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1487 ;;Total ram usage:        2 bytes
  1488 ;; Hardware stack levels used:    1
  1489 ;; Hardware stack levels required when called:    8
  1490 ;; This function calls:
  1491 ;;		_LED
  1492 ;;		_OUT
  1493 ;;		_RTCC_from_RTCC
  1494 ;; This function is called by:
  1495 ;;		_main
  1496 ;; This function uses a non-reentrant model
  1497 ;;
  1498                           
  1499                           	psect	text1
  1500  0028F0                     __ptext1:
  1501                           	opt stack 0
  1502  0028F0                     _sleep_loop:
  1503                           	opt stack 22
  1504                           
  1505                           ;tasks.h: 291: static uint8_t prev_power_sw = 1;
  1506                           ;tasks.h: 292: if (PORTBbits.RB0 != prev_power_sw) {
  1507                           
  1508                           ;incstack = 0
  1509  0028F0  A081               	btfss	3969,0,c	;volatile
  1510  0028F2  D002               	goto	u6050
  1511  0028F4  0E01               	movlw	1
  1512  0028F6  D001               	goto	u6056
  1513  0028F8                     u6050:
  1514  0028F8  0E00               	movlw	0
  1515  0028FA                     u6056:
  1516  0028FA  183F               	xorwf	sleep_loop@prev_power_sw,w,c
  1517  0028FC  B4D8               	btfsc	status,2,c
  1518  0028FE  D054               	goto	l5629
  1519                           
  1520                           ;tasks.h: 293: prev_power_sw = PORTBbits.RB0;
  1521  002900  0E00               	movlw	0
  1522  002902  B081               	btfsc	3969,0,c	;volatile
  1523  002904  0E01               	movlw	1
  1524  002906  6E3F               	movwf	sleep_loop@prev_power_sw,c
  1525                           
  1526                           ;tasks.h: 294: if (!PORTBbits.RB0) {
  1527  002908  B081               	btfsc	3969,0,c	;volatile
  1528  00290A  D023               	goto	l5613
  1529                           
  1530                           ;tasks.h: 295: sleep_flag = 1;
  1531  00290C  0E01               	movlw	1
  1532  00290E  6E31               	movwf	_sleep_flag,c
  1533                           
  1534                           ;tasks.h: 296: T0CONbits.TMR0ON = 0;
  1535  002910  9ED5               	bcf	4053,7,c	;volatile
  1536                           
  1537                           ;tasks.h: 297: T1CONbits.TMR1ON = 1;
  1538  002912  80CD               	bsf	4045,0,c	;volatile
  1539                           
  1540                           ;tasks.h: 298: T3CONbits.TMR3ON = 0;
  1541  002914  9079               	bcf	3961,0,c	;volatile
  1542                           
  1543                           ;tasks.h: 299: TXSTA1bits.TXEN = 0;
  1544  002916  9AAD               	bcf	4013,5,c	;volatile
  1545                           
  1546                           ;tasks.h: 300: RCSTA1bits.CREN = 0;
  1547  002918  98AC               	bcf	4012,4,c	;volatile
  1548                           
  1549                           ;tasks.h: 302: INTCONbits.T0IE = 0;
  1550  00291A  9AF2               	bcf	intcon,5,c	;volatile
  1551                           
  1552                           ;tasks.h: 303: PIE1bits.TMR1IE = 1;
  1553  00291C  809D               	bsf	3997,0,c	;volatile
  1554                           
  1555                           ;tasks.h: 304: PIE2bits.TMR3IE = 0;
  1556  00291E  92A0               	bcf	4000,1,c	;volatile
  1557                           
  1558                           ;tasks.h: 305: PIE1bits.TX1IE = 0;
  1559  002920  989D               	bcf	3997,4,c	;volatile
  1560                           
  1561                           ;tasks.h: 306: PIE1bits.RC1IE = 0;
  1562  002922  9A9D               	bcf	3997,5,c	;volatile
  1563                           
  1564                           ;tasks.h: 307: for (uint8_t i = 0; i < 3; i++) {
  1565  002924  0E00               	movlw	0
  1566  002926  0100               	movlb	0	; () banked
  1567  002928  6FDD               	movwf	sleep_loop@i& (0+255),b
  1568  00292A                     l5603:
  1569                           
  1570                           ; BSR set to: 0
  1571  00292A  0E02               	movlw	2
  1572  00292C  0100               	movlb	0	; () banked
  1573  00292E  65DD               	cpfsgt	sleep_loop@i& (0+255),b
  1574  002930  D001               	goto	l5607
  1575  002932  D03A               	goto	l5629
  1576  002934                     l5607:
  1577                           
  1578                           ; BSR set to: 0
  1579                           ;tasks.h: 308: OUT(i, 0);
  1580  002934  0E00               	movlw	0
  1581  002936  6E20               	movwf	OUT@value,c
  1582  002938  0100               	movlb	0	; () banked
  1583  00293A  51DD               	movf	sleep_loop@i& (0+255),w,b
  1584  00293C  EC39  F01B         	call	_OUT
  1585                           
  1586                           ;tasks.h: 309: LED(i, 0);
  1587  002940  0E00               	movlw	0
  1588  002942  6E20               	movwf	LED@value,c
  1589  002944  0100               	movlb	0	; () banked
  1590  002946  51DD               	movf	sleep_loop@i& (0+255),w,b
  1591  002948  EC1A  F01B         	call	_LED
  1592  00294C  0100               	movlb	0	; () banked
  1593  00294E  2BDD               	incf	sleep_loop@i& (0+255),f,b
  1594  002950  D7EC               	goto	l5603
  1595  002952                     l5613:
  1596                           
  1597                           ;tasks.h: 312: sleep_flag = 0;
  1598  002952  0E00               	movlw	0
  1599  002954  6E31               	movwf	_sleep_flag,c
  1600                           
  1601                           ;tasks.h: 313: RTCC_from_RTCC(&caltime_now, &epoch_now);
  1602  002956  0E9D               	movlw	low _caltime_now
  1603  002958  0100               	movlb	0	; () banked
  1604  00295A  6FD8               	movwf	RTCC_from_RTCC@ct& (0+255),b
  1605  00295C  0E00               	movlw	high _caltime_now
  1606  00295E  0100               	movlb	0	; () banked
  1607  002960  6FD9               	movwf	(RTCC_from_RTCC@ct+1)& (0+255),b
  1608  002962  0EA4               	movlw	low _epoch_now
  1609  002964  0100               	movlb	0	; () banked
  1610  002966  6FDA               	movwf	RTCC_from_RTCC@ep& (0+255),b
  1611  002968  0E00               	movlw	high _epoch_now
  1612  00296A  0100               	movlb	0	; () banked
  1613  00296C  6FDB               	movwf	(RTCC_from_RTCC@ep+1)& (0+255),b
  1614  00296E  ECCF  F01C         	call	_RTCC_from_RTCC	;wreg free
  1615                           
  1616                           ;tasks.h: 314: for (uint8_t i = 0; i < 3; i++) {
  1617  002972  0E00               	movlw	0
  1618  002974  0100               	movlb	0	; () banked
  1619  002976  6FDC               	movwf	sleep_loop@i_2520& (0+255),b
  1620  002978                     l5619:
  1621                           
  1622                           ; BSR set to: 0
  1623  002978  0E02               	movlw	2
  1624  00297A  0100               	movlb	0	; () banked
  1625  00297C  65DC               	cpfsgt	sleep_loop@i_2520& (0+255),b
  1626  00297E  D001               	goto	l5623
  1627  002980  D009               	goto	l709
  1628  002982                     l5623:
  1629                           
  1630                           ; BSR set to: 0
  1631                           ;tasks.h: 315: LED(i, 1);
  1632  002982  0E01               	movlw	1
  1633  002984  6E20               	movwf	LED@value,c
  1634  002986  0100               	movlb	0	; () banked
  1635  002988  51DC               	movf	sleep_loop@i_2520& (0+255),w,b
  1636  00298A  EC1A  F01B         	call	_LED
  1637  00298E  0100               	movlb	0	; () banked
  1638  002990  2BDC               	incf	sleep_loop@i_2520& (0+255),f,b
  1639  002992  D7F2               	goto	l5619
  1640  002994                     l709:
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;tasks.h: 316: }
  1644                           ;tasks.h: 317: T0CONbits.TMR0ON = 1;
  1645  002994  8ED5               	bsf	4053,7,c	;volatile
  1646                           
  1647                           ;tasks.h: 318: T1CONbits.TMR1ON = 1;
  1648  002996  80CD               	bsf	4045,0,c	;volatile
  1649                           
  1650                           ;tasks.h: 319: T3CONbits.TMR3ON = 1;
  1651  002998  8079               	bsf	3961,0,c	;volatile
  1652                           
  1653                           ;tasks.h: 320: TXSTA1bits.TXEN = 1;
  1654  00299A  8AAD               	bsf	4013,5,c	;volatile
  1655                           
  1656                           ;tasks.h: 321: RCSTA1bits.CREN = 1;
  1657  00299C  88AC               	bsf	4012,4,c	;volatile
  1658                           
  1659                           ;tasks.h: 323: INTCONbits.T0IE = 1;
  1660  00299E  8AF2               	bsf	intcon,5,c	;volatile
  1661                           
  1662                           ;tasks.h: 324: PIE1bits.TMR1IE = 1;
  1663  0029A0  809D               	bsf	3997,0,c	;volatile
  1664                           
  1665                           ;tasks.h: 325: PIE2bits.TMR3IE = 1;
  1666  0029A2  82A0               	bsf	4000,1,c	;volatile
  1667                           
  1668                           ;tasks.h: 326: PIE1bits.TX1IE = 1;
  1669  0029A4  889D               	bsf	3997,4,c	;volatile
  1670                           
  1671                           ;tasks.h: 327: PIE1bits.RC1IE = 1;
  1672  0029A6  8A9D               	bsf	3997,5,c	;volatile
  1673  0029A8                     l5629:
  1674                           
  1675                           ;tasks.h: 328: }
  1676                           ;tasks.h: 329: }
  1677                           ;tasks.h: 330: if (sleep_flag) {
  1678  0029A8  5031               	movf	_sleep_flag,w,c
  1679  0029AA  B4D8               	btfsc	status,2,c
  1680  0029AC  0012               	return	
  1681  0029AE  0003               	sleep		;# 
  1682                           
  1683                           ;tasks.h: 332: __nop();
  1684  0029B0  F000               	nop	
  1685  0029B2  0012               	return	
  1686  0029B4                     __end_of_sleep_loop:
  1687                           	opt stack 0
  1688                           tblptru	equ	0xFF8
  1689                           tblptrh	equ	0xFF7
  1690                           tblptrl	equ	0xFF6
  1691                           tablat	equ	0xFF5
  1692                           prodh	equ	0xFF4
  1693                           prodl	equ	0xFF3
  1694                           intcon	equ	0xFF2
  1695                           postinc0	equ	0xFEE
  1696                           wreg	equ	0xFE8
  1697                           indf2	equ	0xFDF
  1698                           postinc2	equ	0xFDE
  1699                           postdec2	equ	0xFDD
  1700                           fsr2h	equ	0xFDA
  1701                           fsr2l	equ	0xFD9
  1702                           status	equ	0xFD8
  1703                           
  1704 ;; *************** function _nomal_mode_loop *****************
  1705 ;; Defined at:
  1706 ;;		line 242 in file "tasks.h"
  1707 ;; Parameters:    Size  Location     Type
  1708 ;;		None
  1709 ;; Auto vars:     Size  Location     Type
  1710 ;;  i               1    4[BANK0 ] unsigned char 
  1711 ;; Return value:  Size  Location     Type
  1712 ;;		None               void
  1713 ;; Registers used:
  1714 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1715 ;; Tracked objects:
  1716 ;;		On entry : 0/0
  1717 ;;		On exit  : 0/0
  1718 ;;		Unchanged: 0/0
  1719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1721 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1723 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1724 ;;Total ram usage:        1 bytes
  1725 ;; Hardware stack levels used:    1
  1726 ;; Hardware stack levels required when called:    5
  1727 ;; This function calls:
  1728 ;;		_LED
  1729 ;;		_OUT
  1730 ;;		_delay_set
  1731 ;;		_sw_flag_clear
  1732 ;;		_sw_flag_read
  1733 ;; This function is called by:
  1734 ;;		_main
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           	psect	text2
  1739  001BEC                     __ptext2:
  1740                           	opt stack 0
  1741  001BEC                     _nomal_mode_loop:
  1742                           	opt stack 25
  1743                           
  1744                           ;tasks.h: 243: uint8_t i;
  1745                           ;tasks.h: 244: for (i = 0; i < 3; i++) {
  1746                           
  1747                           ;incstack = 0
  1748  001BEC  0E00               	movlw	0
  1749  001BEE  0100               	movlb	0	; () banked
  1750  001BF0  6FB4               	movwf	nomal_mode_loop@i& (0+255),b
  1751  001BF2                     l5505:
  1752                           
  1753                           ; BSR set to: 0
  1754  001BF2  0E02               	movlw	2
  1755  001BF4  0100               	movlb	0	; () banked
  1756  001BF6  65B4               	cpfsgt	nomal_mode_loop@i& (0+255),b
  1757  001BF8  D001               	goto	l5509
  1758  001BFA  D0E2               	goto	l5571
  1759  001BFC                     l5509:
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;tasks.h: 245: if (sw_flag_read(i, 0x10)) {
  1763  001BFC  0E10               	movlw	16
  1764  001BFE  6E20               	movwf	sw_flag_read@bit_and,c
  1765  001C00  0100               	movlb	0	; () banked
  1766  001C02  51B4               	movf	nomal_mode_loop@i& (0+255),w,b
  1767  001C04  ECE7  F01B         	call	_sw_flag_read
  1768  001C08  0900               	iorlw	0
  1769  001C0A  B4D8               	btfsc	status,2,c
  1770  001C0C  D028               	goto	l5523
  1771                           
  1772                           ;tasks.h: 246: OUT(i, 1);
  1773  001C0E  0E01               	movlw	1
  1774  001C10  6E20               	movwf	OUT@value,c
  1775  001C12  0100               	movlb	0	; () banked
  1776  001C14  51B4               	movf	nomal_mode_loop@i& (0+255),w,b
  1777  001C16  EC39  F01B         	call	_OUT
  1778                           
  1779                           ;tasks.h: 247: LED(i, 1);
  1780  001C1A  0E01               	movlw	1
  1781  001C1C  6E20               	movwf	LED@value,c
  1782  001C1E  0100               	movlb	0	; () banked
  1783  001C20  51B4               	movf	nomal_mode_loop@i& (0+255),w,b
  1784  001C22  EC1A  F01B         	call	_LED
  1785                           
  1786                           ;tasks.h: 248: cut_cnt[i] = 0;
  1787  001C26  0100               	movlb	0	; () banked
  1788  001C28  51B4               	movf	nomal_mode_loop@i& (0+255),w,b
  1789  001C2A  0D02               	mullw	2
  1790  001C2C  0E78               	movlw	low _cut_cnt
  1791  001C2E  24F3               	addwf	prodl,w,c
  1792  001C30  6ED9               	movwf	fsr2l,c
  1793  001C32  0E00               	movlw	high _cut_cnt
  1794  001C34  20F4               	addwfc	prodh,w,c
  1795  001C36  6EDA               	movwf	fsr2h,c
  1796  001C38  0E00               	movlw	0
  1797  001C3A  6EDE               	movwf	postinc2,c
  1798  001C3C  0E00               	movlw	0
  1799  001C3E  6EDD               	movwf	postdec2,c
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;tasks.h: 249: print_port = i;
  1803  001C40  C0B4  F030         	movff	nomal_mode_loop@i,_print_port
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;tasks.h: 250: if (print_content == AUTO_STOP || print_content == ALWAYS_ON)print_conten
      +                          t = CURRENT;
  1807  001C44  0E07               	movlw	7
  1808  001C46  0100               	movlb	0	; () banked
  1809  001C48  1992               	xorwf	_print_content& (0+255),w,b
  1810  001C4A  B4D8               	btfsc	status,2,c
  1811  001C4C  D005               	goto	l5521
  1812                           
  1813                           ; BSR set to: 0
  1814  001C4E  0E06               	movlw	6
  1815  001C50  0100               	movlb	0	; () banked
  1816  001C52  1992               	xorwf	_print_content& (0+255),w,b
  1817  001C54  A4D8               	btfss	status,2,c
  1818  001C56  D003               	goto	l5523
  1819  001C58                     l5521:
  1820                           
  1821                           ; BSR set to: 0
  1822  001C58  0E02               	movlw	2
  1823  001C5A  0100               	movlb	0	; () banked
  1824  001C5C  6F92               	movwf	_print_content& (0+255),b
  1825  001C5E                     l5523:
  1826                           
  1827                           ;tasks.h: 251: }
  1828                           ;tasks.h: 252: if (sw_flag_read(i, 0x40)) {
  1829  001C5E  0E40               	movlw	64
  1830  001C60  6E20               	movwf	sw_flag_read@bit_and,c
  1831  001C62  0100               	movlb	0	; () banked
  1832  001C64  51B4               	movf	nomal_mode_loop@i& (0+255),w,b
  1833  001C66  ECE7  F01B         	call	_sw_flag_read
  1834  001C6A  0900               	iorlw	0
  1835  001C6C  B4D8               	btfsc	status,2,c
  1836  001C6E  D009               	goto	l5529
  1837                           
  1838                           ;tasks.h: 253: sw_flag_clear(i, 0x00);
  1839  001C70  0E00               	movlw	0
  1840  001C72  6E20               	movwf	sw_flag_clear@bit_and,c
  1841  001C74  0100               	movlb	0	; () banked
  1842  001C76  51B4               	movf	nomal_mode_loop@i& (0+255),w,b
  1843  001C78  EC77  F01B         	call	_sw_flag_clear
  1844                           
  1845                           ;tasks.h: 254: print_content = RESET;
  1846  001C7C  0E04               	movlw	4
  1847  001C7E  0100               	movlb	0	; () banked
  1848  001C80  6F92               	movwf	_print_content& (0+255),b
  1849  001C82                     l5529:
  1850                           
  1851                           ;tasks.h: 255: }
  1852                           ;tasks.h: 256: if (sw_flag_read(i, 0x04)) {
  1853  001C82  0E04               	movlw	4
  1854  001C84  6E20               	movwf	sw_flag_read@bit_and,c
  1855  001C86  0100               	movlb	0	; () banked
  1856  001C88  51B4               	movf	nomal_mode_loop@i& (0+255),w,b
  1857  001C8A  ECE7  F01B         	call	_sw_flag_read
  1858  001C8E  0900               	iorlw	0
  1859  001C90  B4D8               	btfsc	status,2,c
  1860  001C92  D030               	goto	l5541
  1861                           
  1862                           ;tasks.h: 257: sw_flag_clear(i, 0x00);
  1863  001C94  0E00               	movlw	0
  1864  001C96  6E20               	movwf	sw_flag_clear@bit_and,c
  1865  001C98  0100               	movlb	0	; () banked
  1866  001C9A  51B4               	movf	nomal_mode_loop@i& (0+255),w,b
  1867  001C9C  EC77  F01B         	call	_sw_flag_clear
  1868                           
  1869                           ;tasks.h: 258: print_content = RESETED;
  1870  001CA0  0E05               	movlw	5
  1871  001CA2  0100               	movlb	0	; () banked
  1872  001CA4  6F92               	movwf	_print_content& (0+255),b
  1873                           
  1874                           ; BSR set to: 0
  1875                           ;tasks.h: 259: S[i] = 0;
  1876  001CA6  0100               	movlb	0	; () banked
  1877  001CA8  51B4               	movf	nomal_mode_loop@i& (0+255),w,b
  1878  001CAA  0D04               	mullw	4
  1879  001CAC  0E60               	movlw	low _S
  1880  001CAE  24F3               	addwf	prodl,w,c
  1881  001CB0  6ED9               	movwf	fsr2l,c
  1882  001CB2  0E00               	movlw	high _S
  1883  001CB4  20F4               	addwfc	prodh,w,c
  1884  001CB6  6EDA               	movwf	fsr2h,c
  1885  001CB8  6ADE               	clrf	postinc2,c
  1886  001CBA  6ADE               	clrf	postinc2,c
  1887  001CBC  6ADE               	clrf	postinc2,c
  1888  001CBE  6ADD               	clrf	postdec2,c
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;tasks.h: 260: s[i] = 0;
  1892  001CC0  0100               	movlb	0	; () banked
  1893  001CC2  51B4               	movf	nomal_mode_loop@i& (0+255),w,b
  1894  001CC4  0D04               	mullw	4
  1895  001CC6  0E6C               	movlw	low _s
  1896  001CC8  24F3               	addwf	prodl,w,c
  1897  001CCA  6ED9               	movwf	fsr2l,c
  1898  001CCC  0E00               	movlw	high _s
  1899  001CCE  20F4               	addwfc	prodh,w,c
  1900  001CD0  6EDA               	movwf	fsr2h,c
  1901  001CD2  6ADE               	clrf	postinc2,c
  1902  001CD4  6ADE               	clrf	postinc2,c
  1903  001CD6  6ADE               	clrf	postinc2,c
  1904  001CD8  6ADD               	clrf	postdec2,c
  1905                           
  1906                           ; BSR set to: 0
  1907                           ;tasks.h: 261: delay_set(&d_display, 64);
  1908  001CDA  0E3A               	movlw	low _d_display
  1909  001CDC  0100               	movlb	0	; () banked
  1910  001CDE  6FB0               	movwf	delay_set@d& (0+255),b
  1911  001CE0  0E00               	movlw	high _d_display
  1912  001CE2  0100               	movlb	0	; () banked
  1913  001CE4  6FB1               	movwf	(delay_set@d+1)& (0+255),b
  1914  001CE6  0E00               	movlw	0
  1915  001CE8  0100               	movlb	0	; () banked
  1916  001CEA  6FB3               	movwf	(delay_set@value+1)& (0+255),b
  1917  001CEC  0E40               	movlw	64
  1918  001CEE  6FB2               	movwf	delay_set@value& (0+255),b
  1919  001CF0  EC9A  F01C         	call	_delay_set	;wreg free
  1920  001CF4                     l5541:
  1921                           
  1922                           ;tasks.h: 262: }
  1923                           ;tasks.h: 263: if (sw_flag_read(i, 0x80)) {
  1924  001CF4  0E80               	movlw	128
  1925  001CF6  6E20               	movwf	sw_flag_read@bit_and,c
  1926  001CF8  0100               	movlb	0	; () banked
  1927  001CFA  51B4               	movf	nomal_mode_loop@i& (0+255),w,b
  1928  001CFC  ECE7  F01B         	call	_sw_flag_read
  1929  001D00  0900               	iorlw	0
  1930  001D02  B4D8               	btfsc	status,2,c
  1931  001D04  D017               	goto	l5551
  1932                           
  1933                           ;tasks.h: 264: sw_flag_clear(i, 0x00);
  1934  001D06  0E00               	movlw	0
  1935  001D08  6E20               	movwf	sw_flag_clear@bit_and,c
  1936  001D0A  0100               	movlb	0	; () banked
  1937  001D0C  51B4               	movf	nomal_mode_loop@i& (0+255),w,b
  1938  001D0E  EC77  F01B         	call	_sw_flag_clear
  1939                           
  1940                           ;tasks.h: 265: if (auto_cut_ON[i]) {
  1941  001D12  0100               	movlb	0	; () banked
  1942  001D14  51B4               	movf	nomal_mode_loop@i& (0+255),w,b
  1943  001D16  0D01               	mullw	1
  1944  001D18  0E28               	movlw	low _auto_cut_ON
  1945  001D1A  24F3               	addwf	prodl,w,c
  1946  001D1C  6ED9               	movwf	fsr2l,c
  1947  001D1E  0E00               	movlw	high _auto_cut_ON
  1948  001D20  20F4               	addwfc	prodh,w,c
  1949  001D22  6EDA               	movwf	fsr2h,c
  1950  001D24  50DF               	movf	indf2,w,c
  1951  001D26  B4D8               	btfsc	status,2,c
  1952  001D28  D002               	goto	l5549
  1953                           
  1954                           ; BSR set to: 0
  1955                           ;tasks.h: 266: print_content = AUTO_STOP;
  1956  001D2A  0E07               	movlw	7
  1957  001D2C  D001               	goto	L3
  1958  001D2E                     l5549:
  1959                           
  1960                           ; BSR set to: 0
  1961                           ;tasks.h: 268: print_content = ALWAYS_ON;
  1962  001D2E  0E06               	movlw	6
  1963  001D30                     L3:
  1964  001D30  0100               	movlb	0	; () banked
  1965  001D32  6F92               	movwf	_print_content& (0+255),b
  1966  001D34                     l5551:
  1967                           
  1968                           ;tasks.h: 269: }
  1969                           ;tasks.h: 270: }
  1970                           ;tasks.h: 271: if (sw_flag_read(i, 0x08)) {
  1971  001D34  0E08               	movlw	8
  1972  001D36  6E20               	movwf	sw_flag_read@bit_and,c
  1973  001D38  0100               	movlb	0	; () banked
  1974  001D3A  51B4               	movf	nomal_mode_loop@i& (0+255),w,b
  1975  001D3C  ECE7  F01B         	call	_sw_flag_read
  1976  001D40  0900               	iorlw	0
  1977  001D42  B4D8               	btfsc	status,2,c
  1978  001D44  D03A               	goto	l5567
  1979                           
  1980                           ;tasks.h: 272: sw_flag_clear(i, 0x00);
  1981  001D46  0E00               	movlw	0
  1982  001D48  6E20               	movwf	sw_flag_clear@bit_and,c
  1983  001D4A  0100               	movlb	0	; () banked
  1984  001D4C  51B4               	movf	nomal_mode_loop@i& (0+255),w,b
  1985  001D4E  EC77  F01B         	call	_sw_flag_clear
  1986                           
  1987                           ;tasks.h: 273: if (auto_cut_ON[i]) {
  1988  001D52  0100               	movlb	0	; () banked
  1989  001D54  51B4               	movf	nomal_mode_loop@i& (0+255),w,b
  1990  001D56  0D01               	mullw	1
  1991  001D58  0E28               	movlw	low _auto_cut_ON
  1992  001D5A  24F3               	addwf	prodl,w,c
  1993  001D5C  6ED9               	movwf	fsr2l,c
  1994  001D5E  0E00               	movlw	high _auto_cut_ON
  1995  001D60  20F4               	addwfc	prodh,w,c
  1996  001D62  6EDA               	movwf	fsr2h,c
  1997  001D64  50DF               	movf	indf2,w,c
  1998  001D66  B4D8               	btfsc	status,2,c
  1999  001D68  D00D               	goto	l5561
  2000                           
  2001                           ; BSR set to: 0
  2002                           ;tasks.h: 274: auto_cut_ON[i] = 0;
  2003  001D6A  0100               	movlb	0	; () banked
  2004  001D6C  51B4               	movf	nomal_mode_loop@i& (0+255),w,b
  2005  001D6E  0D01               	mullw	1
  2006  001D70  0E28               	movlw	low _auto_cut_ON
  2007  001D72  24F3               	addwf	prodl,w,c
  2008  001D74  6ED9               	movwf	fsr2l,c
  2009  001D76  0E00               	movlw	high _auto_cut_ON
  2010  001D78  20F4               	addwfc	prodh,w,c
  2011  001D7A  6EDA               	movwf	fsr2h,c
  2012  001D7C  0E00               	movlw	0
  2013  001D7E  6EDF               	movwf	indf2,c
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;tasks.h: 275: print_content = ALWAYS_ON;
  2017  001D80  0E06               	movlw	6
  2018  001D82  D00C               	goto	L4
  2019  001D84                     l5561:
  2020                           
  2021                           ; BSR set to: 0
  2022                           ;tasks.h: 277: auto_cut_ON[i] = 1;
  2023  001D84  0100               	movlb	0	; () banked
  2024  001D86  51B4               	movf	nomal_mode_loop@i& (0+255),w,b
  2025  001D88  0D01               	mullw	1
  2026  001D8A  0E28               	movlw	low _auto_cut_ON
  2027  001D8C  24F3               	addwf	prodl,w,c
  2028  001D8E  6ED9               	movwf	fsr2l,c
  2029  001D90  0E00               	movlw	high _auto_cut_ON
  2030  001D92  20F4               	addwfc	prodh,w,c
  2031  001D94  6EDA               	movwf	fsr2h,c
  2032  001D96  0E01               	movlw	1
  2033  001D98  6EDF               	movwf	indf2,c
  2034                           
  2035                           ; BSR set to: 0
  2036                           ;tasks.h: 278: print_content = AUTO_STOP;
  2037  001D9A  0E07               	movlw	7
  2038  001D9C                     L4:
  2039  001D9C  0100               	movlb	0	; () banked
  2040  001D9E  6F92               	movwf	_print_content& (0+255),b
  2041                           
  2042                           ; BSR set to: 0
  2043                           ;tasks.h: 279: }
  2044                           ;tasks.h: 280: delay_set(&d_display, 64);
  2045                           
  2046                           ; BSR set to: 0
  2047  001DA0  0E3A               	movlw	low _d_display
  2048  001DA2  0100               	movlb	0	; () banked
  2049  001DA4  6FB0               	movwf	delay_set@d& (0+255),b
  2050  001DA6  0E00               	movlw	high _d_display
  2051  001DA8  0100               	movlb	0	; () banked
  2052  001DAA  6FB1               	movwf	(delay_set@d+1)& (0+255),b
  2053  001DAC  0E00               	movlw	0
  2054  001DAE  0100               	movlb	0	; () banked
  2055  001DB0  6FB3               	movwf	(delay_set@value+1)& (0+255),b
  2056  001DB2  0E40               	movlw	64
  2057  001DB4  6FB2               	movwf	delay_set@value& (0+255),b
  2058  001DB6  EC9A  F01C         	call	_delay_set	;wreg free
  2059  001DBA                     l5567:
  2060  001DBA  0100               	movlb	0	; () banked
  2061  001DBC  2BB4               	incf	nomal_mode_loop@i& (0+255),f,b
  2062  001DBE  D719               	goto	l5505
  2063  001DC0                     l5571:
  2064                           
  2065                           ; BSR set to: 0
  2066                           ;tasks.h: 281: }
  2067                           ;tasks.h: 282: }
  2068                           ;tasks.h: 283: if (d_display.flag) {
  2069  001DC0  503A               	movf	_d_display,w,c
  2070  001DC2  B4D8               	btfsc	status,2,c
  2071  001DC4  0012               	return	
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;tasks.h: 284: d_display.flag=0;
  2075  001DC6  0E00               	movlw	0
  2076  001DC8  6E3A               	movwf	_d_display,c
  2077                           
  2078                           ;tasks.h: 285: print_content = CURRENT;
  2079  001DCA  0E02               	movlw	2
  2080  001DCC  0100               	movlb	0	; () banked
  2081  001DCE  6F92               	movwf	_print_content& (0+255),b
  2082                           
  2083                           ;tasks.h: 286: display_flag = 1;
  2084  001DD0  0E01               	movlw	1
  2085  001DD2  0100               	movlb	0	; () banked
  2086  001DD4  6F90               	movwf	_display_flag& (0+255),b
  2087  001DD6  0012               	return	
  2088  001DD8                     __end_of_nomal_mode_loop:
  2089                           	opt stack 0
  2090                           tblptru	equ	0xFF8
  2091                           tblptrh	equ	0xFF7
  2092                           tblptrl	equ	0xFF6
  2093                           tablat	equ	0xFF5
  2094                           prodh	equ	0xFF4
  2095                           prodl	equ	0xFF3
  2096                           intcon	equ	0xFF2
  2097                           postinc0	equ	0xFEE
  2098                           wreg	equ	0xFE8
  2099                           indf2	equ	0xFDF
  2100                           postinc2	equ	0xFDE
  2101                           postdec2	equ	0xFDD
  2102                           fsr2h	equ	0xFDA
  2103                           fsr2l	equ	0xFD9
  2104                           status	equ	0xFD8
  2105                           
  2106 ;; *************** function _sw_flag_read *****************
  2107 ;; Defined at:
  2108 ;;		line 69 in file "tasks.h"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;  port            1    wreg     unsigned char 
  2111 ;;  bit_and         1   31[COMRAM] unsigned char 
  2112 ;; Auto vars:     Size  Location     Type
  2113 ;;  port            1   32[COMRAM] unsigned char 
  2114 ;; Return value:  Size  Location     Type
  2115 ;;                  1    wreg      unsigned char 
  2116 ;; Registers used:
  2117 ;;		wreg, status,2, status,0
  2118 ;; Tracked objects:
  2119 ;;		On entry : 0/0
  2120 ;;		On exit  : 0/0
  2121 ;;		Unchanged: 0/0
  2122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2123 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2124 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2126 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2127 ;;Total ram usage:        2 bytes
  2128 ;; Hardware stack levels used:    1
  2129 ;; Hardware stack levels required when called:    4
  2130 ;; This function calls:
  2131 ;;		Nothing
  2132 ;; This function is called by:
  2133 ;;		_nomal_mode_loop
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137                           	psect	text3
  2138  0037CE                     __ptext3:
  2139                           	opt stack 0
  2140  0037CE                     _sw_flag_read:
  2141                           	opt stack 25
  2142                           
  2143                           ; BSR set to: 0
  2144                           ;incstack = 0
  2145                           ;sw_flag_read@port stored from wreg
  2146  0037CE  6E21               	movwf	sw_flag_read@port,c
  2147                           
  2148                           ;tasks.h: 70: switch (port) {
  2149  0037D0  D00C               	goto	l5303
  2150  0037D2                     l5285:
  2151                           
  2152                           ;tasks.h: 72: return (sw0.flags) & bit_and;
  2153  0037D2  5034               	movf	_sw0+2,w,c
  2154  0037D4  1420               	andwf	sw_flag_read@bit_and,w,c
  2155  0037D6  0012               	return	
  2156  0037D8                     l5289:
  2157                           
  2158                           ;tasks.h: 74: return (sw1.flags) & bit_and;
  2159  0037D8  5038               	movf	_sw1+2,w,c
  2160  0037DA  1420               	andwf	sw_flag_read@bit_and,w,c
  2161  0037DC  0012               	return	
  2162  0037DE                     l5293:
  2163                           
  2164                           ;tasks.h: 76: return (sw2.flags) & bit_and;
  2165  0037DE  0100               	movlb	0	; () banked
  2166  0037E0  51AE               	movf	(_sw2+2)& (0+255),w,b
  2167  0037E2  1420               	andwf	sw_flag_read@bit_and,w,c
  2168                           
  2169                           ; BSR set to: 0
  2170  0037E4  0012               	return	
  2171  0037E6                     l5297:
  2172                           
  2173                           ;tasks.h: 78: return 0;
  2174  0037E6  0E00               	movlw	0
  2175                           
  2176                           ;tasks.h: 79: }
  2177  0037E8  0012               	return	
  2178  0037EA                     l5303:
  2179  0037EA  5021               	movf	sw_flag_read@port,w,c
  2180                           
  2181                           ; Switch size 1, requested type "space"
  2182                           ; Number of cases is 3, Range of values is 0 to 2
  2183                           ; switch strategies available:
  2184                           ; Name         Instructions Cycles
  2185                           ; simple_byte           10     6 (average)
  2186                           ;	Chosen strategy is simple_byte
  2187  0037EC  0A00               	xorlw	0	; case 0
  2188  0037EE  B4D8               	btfsc	status,2,c
  2189  0037F0  D7F0               	goto	l5285
  2190  0037F2  0A01               	xorlw	1	; case 1
  2191  0037F4  B4D8               	btfsc	status,2,c
  2192  0037F6  D7F0               	goto	l5289
  2193  0037F8  0A03               	xorlw	3	; case 2
  2194  0037FA  B4D8               	btfsc	status,2,c
  2195  0037FC  D7F0               	goto	l5293
  2196  0037FE  D7F3               	goto	l5297
  2197  003800                     __end_of_sw_flag_read:
  2198                           	opt stack 0
  2199                           tblptru	equ	0xFF8
  2200                           tblptrh	equ	0xFF7
  2201                           tblptrl	equ	0xFF6
  2202                           tablat	equ	0xFF5
  2203                           prodh	equ	0xFF4
  2204                           prodl	equ	0xFF3
  2205                           intcon	equ	0xFF2
  2206                           postinc0	equ	0xFEE
  2207                           wreg	equ	0xFE8
  2208                           indf2	equ	0xFDF
  2209                           postinc2	equ	0xFDE
  2210                           postdec2	equ	0xFDD
  2211                           fsr2h	equ	0xFDA
  2212                           fsr2l	equ	0xFD9
  2213                           status	equ	0xFD8
  2214                           
  2215 ;; *************** function _sw_flag_clear *****************
  2216 ;; Defined at:
  2217 ;;		line 82 in file "tasks.h"
  2218 ;; Parameters:    Size  Location     Type
  2219 ;;  port            1    wreg     unsigned char 
  2220 ;;  bit_and         1   31[COMRAM] unsigned char 
  2221 ;; Auto vars:     Size  Location     Type
  2222 ;;  port            1   32[COMRAM] unsigned char 
  2223 ;; Return value:  Size  Location     Type
  2224 ;;		None               void
  2225 ;; Registers used:
  2226 ;;		wreg, status,2, status,0
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2232 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2233 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2235 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2236 ;;Total ram usage:        2 bytes
  2237 ;; Hardware stack levels used:    1
  2238 ;; Hardware stack levels required when called:    4
  2239 ;; This function calls:
  2240 ;;		Nothing
  2241 ;; This function is called by:
  2242 ;;		_nomal_mode_loop
  2243 ;; This function uses a non-reentrant model
  2244 ;;
  2245                           
  2246                           	psect	text4
  2247  0036EE                     __ptext4:
  2248                           	opt stack 0
  2249  0036EE                     _sw_flag_clear:
  2250                           	opt stack 25
  2251                           
  2252                           ;incstack = 0
  2253                           ;sw_flag_clear@port stored from wreg
  2254  0036EE  6E21               	movwf	sw_flag_clear@port,c
  2255                           
  2256                           ;tasks.h: 83: switch (port) {
  2257  0036F0  D010               	goto	l5315
  2258  0036F2                     l5307:
  2259                           
  2260                           ;tasks.h: 85: sw0.flags &= bit_and;
  2261  0036F2  5020               	movf	sw_flag_clear@bit_and,w,c
  2262  0036F4  1634               	andwf	_sw0+2,f,c
  2263  0036F6  0E00               	movlw	0
  2264  0036F8  1635               	andwf	_sw0+3,f,c
  2265                           
  2266                           ;tasks.h: 86: break;
  2267  0036FA  0012               	return	
  2268  0036FC                     l5309:
  2269                           
  2270                           ;tasks.h: 88: sw1.flags &= bit_and;
  2271  0036FC  5020               	movf	sw_flag_clear@bit_and,w,c
  2272  0036FE  1638               	andwf	_sw1+2,f,c
  2273  003700  0E00               	movlw	0
  2274  003702  1639               	andwf	_sw1+3,f,c
  2275                           
  2276                           ;tasks.h: 89: break;
  2277  003704  0012               	return	
  2278  003706                     l5311:
  2279                           
  2280                           ;tasks.h: 91: sw2.flags &= bit_and;
  2281  003706  5020               	movf	sw_flag_clear@bit_and,w,c
  2282  003708  0100               	movlb	0	; () banked
  2283  00370A  17AE               	andwf	(_sw2+2)& (0+255),f,b
  2284  00370C  0E00               	movlw	0
  2285  00370E  17AF               	andwf	(_sw2+3)& (0+255),f,b
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;tasks.h: 93: }
  2289                           
  2290                           ;tasks.h: 92: break;
  2291  003710  0012               	return	
  2292  003712                     l5315:
  2293  003712  5021               	movf	sw_flag_clear@port,w,c
  2294                           
  2295                           ; Switch size 1, requested type "space"
  2296                           ; Number of cases is 3, Range of values is 0 to 2
  2297                           ; switch strategies available:
  2298                           ; Name         Instructions Cycles
  2299                           ; simple_byte           10     6 (average)
  2300                           ;	Chosen strategy is simple_byte
  2301  003714  0A00               	xorlw	0	; case 0
  2302  003716  B4D8               	btfsc	status,2,c
  2303  003718  D7EC               	goto	l5307
  2304  00371A  0A01               	xorlw	1	; case 1
  2305  00371C  B4D8               	btfsc	status,2,c
  2306  00371E  D7EE               	goto	l5309
  2307  003720  0A03               	xorlw	3	; case 2
  2308  003722  A4D8               	btfss	status,2,c
  2309  003724  0012               	return	
  2310  003726  D7EF               	goto	l5311
  2311  003728                     __end_of_sw_flag_clear:
  2312                           	opt stack 0
  2313                           tblptru	equ	0xFF8
  2314                           tblptrh	equ	0xFF7
  2315                           tblptrl	equ	0xFF6
  2316                           tablat	equ	0xFF5
  2317                           prodh	equ	0xFF4
  2318                           prodl	equ	0xFF3
  2319                           intcon	equ	0xFF2
  2320                           postinc0	equ	0xFEE
  2321                           wreg	equ	0xFE8
  2322                           indf2	equ	0xFDF
  2323                           postinc2	equ	0xFDE
  2324                           postdec2	equ	0xFDD
  2325                           fsr2h	equ	0xFDA
  2326                           fsr2l	equ	0xFD9
  2327                           status	equ	0xFD8
  2328                           
  2329 ;; *************** function _delay_set *****************
  2330 ;; Defined at:
  2331 ;;		line 349 in file "../My_header\My_header.h"
  2332 ;; Parameters:    Size  Location     Type
  2333 ;;  d               2    0[BANK0 ] PTR struct Delay
  2334 ;;		 -> d_display(3), 
  2335 ;;  value           2    2[BANK0 ] unsigned int 
  2336 ;; Auto vars:     Size  Location     Type
  2337 ;;		None
  2338 ;; Return value:  Size  Location     Type
  2339 ;;		None               void
  2340 ;; Registers used:
  2341 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2342 ;; Tracked objects:
  2343 ;;		On entry : 0/0
  2344 ;;		On exit  : 0/0
  2345 ;;		Unchanged: 0/0
  2346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2347 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2350 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2351 ;;Total ram usage:        4 bytes
  2352 ;; Hardware stack levels used:    1
  2353 ;; Hardware stack levels required when called:    4
  2354 ;; This function calls:
  2355 ;;		Nothing
  2356 ;; This function is called by:
  2357 ;;		_nomal_mode_loop
  2358 ;; This function uses a non-reentrant model
  2359 ;;
  2360                           
  2361                           	psect	text5
  2362  003934                     __ptext5:
  2363                           	opt stack 0
  2364  003934                     _delay_set:
  2365                           	opt stack 25
  2366                           
  2367                           ;My_header\My_header.h: 350: d->cnt = value;
  2368                           
  2369                           ;incstack = 0
  2370  003934  0100               	movlb	0	; () banked
  2371  003936  EE20 F001          	lfsr	2,1
  2372  00393A  51B0               	movf	delay_set@d& (0+255),w,b
  2373  00393C  26D9               	addwf	fsr2l,f,c
  2374  00393E  51B1               	movf	(delay_set@d+1)& (0+255),w,b
  2375  003940  22DA               	addwfc	fsr2h,f,c
  2376  003942  C0B2  FFDE         	movff	delay_set@value,postinc2
  2377  003946  C0B3  FFDD         	movff	delay_set@value+1,postdec2
  2378                           
  2379                           ; BSR set to: 0
  2380                           ;My_header\My_header.h: 351: d->flag = 0;
  2381  00394A  C0B0  FFD9         	movff	delay_set@d,fsr2l
  2382  00394E  C0B1  FFDA         	movff	delay_set@d+1,fsr2h
  2383  003952  0E00               	movlw	0
  2384  003954  6EDF               	movwf	indf2,c
  2385                           
  2386                           ; BSR set to: 0
  2387  003956  0012               	return		;funcret
  2388  003958                     __end_of_delay_set:
  2389                           	opt stack 0
  2390                           tblptru	equ	0xFF8
  2391                           tblptrh	equ	0xFF7
  2392                           tblptrl	equ	0xFF6
  2393                           tablat	equ	0xFF5
  2394                           prodh	equ	0xFF4
  2395                           prodl	equ	0xFF3
  2396                           intcon	equ	0xFF2
  2397                           postinc0	equ	0xFEE
  2398                           wreg	equ	0xFE8
  2399                           indf2	equ	0xFDF
  2400                           postinc2	equ	0xFDE
  2401                           postdec2	equ	0xFDD
  2402                           fsr2h	equ	0xFDA
  2403                           fsr2l	equ	0xFD9
  2404                           status	equ	0xFD8
  2405                           
  2406 ;; *************** function _LED *****************
  2407 ;; Defined at:
  2408 ;;		line 55 in file "tasks.h"
  2409 ;; Parameters:    Size  Location     Type
  2410 ;;  b               1    wreg     unsigned char 
  2411 ;;  value           1   31[COMRAM] unsigned char 
  2412 ;; Auto vars:     Size  Location     Type
  2413 ;;  b               1   32[COMRAM] unsigned char 
  2414 ;; Return value:  Size  Location     Type
  2415 ;;		None               void
  2416 ;; Registers used:
  2417 ;;		wreg, status,2, status,0
  2418 ;; Tracked objects:
  2419 ;;		On entry : 0/0
  2420 ;;		On exit  : 0/0
  2421 ;;		Unchanged: 0/0
  2422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2423 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2424 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2426 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2427 ;;Total ram usage:        2 bytes
  2428 ;; Hardware stack levels used:    1
  2429 ;; Hardware stack levels required when called:    4
  2430 ;; This function calls:
  2431 ;;		Nothing
  2432 ;; This function is called by:
  2433 ;;		_nomal_mode_loop
  2434 ;;		_sleep_loop
  2435 ;;		_main
  2436 ;; This function uses a non-reentrant model
  2437 ;;
  2438                           
  2439                           	psect	text6
  2440  003634                     __ptext6:
  2441                           	opt stack 0
  2442  003634                     _LED:
  2443                           	opt stack 25
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;incstack = 0
  2447                           ;LED@b stored from wreg
  2448  003634  6E21               	movwf	LED@b,c
  2449                           
  2450                           ;tasks.h: 56: switch (b) {
  2451  003636  D012               	goto	l5281
  2452  003638                     l601:
  2453                           
  2454                           ;tasks.h: 58: LATC2 = value;
  2455  003638  A020               	btfss	LED@value,0,c
  2456  00363A  D002               	goto	u5710
  2457  00363C  848B               	bsf	3979,2,c	;volatile
  2458  00363E  0012               	return	
  2459  003640                     u5710:
  2460  003640  948B               	bcf	3979,2,c	;volatile
  2461                           
  2462                           ;tasks.h: 59: break;
  2463  003642  0012               	return	
  2464  003644                     l603:
  2465                           
  2466                           ;tasks.h: 61: LATB7 = value;
  2467  003644  A020               	btfss	LED@value,0,c
  2468  003646  D002               	goto	u5730
  2469  003648  8E8A               	bsf	3978,7,c	;volatile
  2470  00364A  0012               	return	
  2471  00364C                     u5730:
  2472  00364C  9E8A               	bcf	3978,7,c	;volatile
  2473                           
  2474                           ;tasks.h: 62: break;
  2475  00364E  0012               	return	
  2476  003650                     l604:
  2477                           
  2478                           ;tasks.h: 64: LATB6 = value;
  2479  003650  A020               	btfss	LED@value,0,c
  2480  003652  D002               	goto	u5750
  2481  003654  8C8A               	bsf	3978,6,c	;volatile
  2482  003656  0012               	return	
  2483  003658                     u5750:
  2484  003658  9C8A               	bcf	3978,6,c	;volatile
  2485                           
  2486                           ;tasks.h: 66: }
  2487                           
  2488                           ;tasks.h: 65: break;
  2489  00365A  0012               	return	
  2490  00365C                     l5281:
  2491  00365C  5021               	movf	LED@b,w,c
  2492                           
  2493                           ; Switch size 1, requested type "space"
  2494                           ; Number of cases is 3, Range of values is 0 to 2
  2495                           ; switch strategies available:
  2496                           ; Name         Instructions Cycles
  2497                           ; simple_byte           10     6 (average)
  2498                           ;	Chosen strategy is simple_byte
  2499  00365E  0A00               	xorlw	0	; case 0
  2500  003660  B4D8               	btfsc	status,2,c
  2501  003662  D7EA               	goto	l601
  2502  003664  0A01               	xorlw	1	; case 1
  2503  003666  B4D8               	btfsc	status,2,c
  2504  003668  D7ED               	goto	l603
  2505  00366A  0A03               	xorlw	3	; case 2
  2506  00366C  A4D8               	btfss	status,2,c
  2507  00366E  0012               	return	
  2508  003670  D7EF               	goto	l604
  2509  003672                     __end_of_LED:
  2510                           	opt stack 0
  2511                           tblptru	equ	0xFF8
  2512                           tblptrh	equ	0xFF7
  2513                           tblptrl	equ	0xFF6
  2514                           tablat	equ	0xFF5
  2515                           prodh	equ	0xFF4
  2516                           prodl	equ	0xFF3
  2517                           intcon	equ	0xFF2
  2518                           postinc0	equ	0xFEE
  2519                           wreg	equ	0xFE8
  2520                           indf2	equ	0xFDF
  2521                           postinc2	equ	0xFDE
  2522                           postdec2	equ	0xFDD
  2523                           fsr2h	equ	0xFDA
  2524                           fsr2l	equ	0xFD9
  2525                           status	equ	0xFD8
  2526                           
  2527 ;; *************** function _main_init *****************
  2528 ;; Defined at:
  2529 ;;		line 218 in file "tasks.h"
  2530 ;; Parameters:    Size  Location     Type
  2531 ;;		None
  2532 ;; Auto vars:     Size  Location     Type
  2533 ;;  txbuf         200    0[BANK1 ] unsigned char [200]
  2534 ;; Return value:  Size  Location     Type
  2535 ;;		None               void
  2536 ;; Registers used:
  2537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2538 ;; Tracked objects:
  2539 ;;		On entry : 0/0
  2540 ;;		On exit  : 0/0
  2541 ;;		Unchanged: 0/0
  2542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2544 ;;      Locals:         0       0     200       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2546 ;;      Totals:         0       0     200       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2547 ;;Total ram usage:      200 bytes
  2548 ;; Hardware stack levels used:    1
  2549 ;; Hardware stack levels required when called:    9
  2550 ;; This function calls:
  2551 ;;		_ADC_init
  2552 ;;		_I2C_LCD_init
  2553 ;;		_I2C_init
  2554 ;;		_RTCC_init
  2555 ;;		_UART_init
  2556 ;;		_ringbuf_init
  2557 ;;		_timer0_init
  2558 ;;		_timer1_init
  2559 ;;		_timer3_init
  2560 ;; This function is called by:
  2561 ;;		_main
  2562 ;; This function uses a non-reentrant model
  2563 ;;
  2564                           
  2565                           	psect	text7
  2566  00314C                     __ptext7:
  2567                           	opt stack 0
  2568  00314C                     _main_init:
  2569                           	opt stack 21
  2570                           
  2571                           ;tasks.h: 219: OSCCONbits.IRCF = 7;
  2572                           
  2573                           ;incstack = 0
  2574  00314C  88D3               	bsf	4051,4,c	;volatile
  2575  00314E  8AD3               	bsf	4051,5,c	;volatile
  2576  003150  8CD3               	bsf	4051,6,c	;volatile
  2577                           
  2578                           ;tasks.h: 220: OSCTUNEbits.PLLEN = 1;
  2579  003152  8C9B               	bsf	3995,6,c	;volatile
  2580                           
  2581                           ;tasks.h: 221: OSCCONbits.SCS = 0;
  2582  003154  0EFC               	movlw	-4
  2583  003156  16D3               	andwf	4051,f,c	;volatile
  2584                           
  2585                           ;tasks.h: 222: TRISA = 0b00011111;
  2586  003158  0E1F               	movlw	31
  2587  00315A  6E92               	movwf	3986,c	;volatile
  2588                           
  2589                           ;tasks.h: 223: TRISB = 0b00111111;
  2590  00315C  0E3F               	movlw	63
  2591  00315E  6E93               	movwf	3987,c	;volatile
  2592                           
  2593                           ;tasks.h: 224: TRISC = 0b10110010;
  2594  003160  0EB2               	movlw	178
  2595  003162  6E94               	movwf	3988,c	;volatile
  2596                           
  2597                           ;tasks.h: 225: ANCON0 = 0b11111111;
  2598  003164  010F               	movlb	15	; () banked
  2599  003166  6948               	setf	72,b	;volatile
  2600                           
  2601                           ;tasks.h: 226: ANCON1 = 0b00011000;
  2602  003168  0E18               	movlw	24
  2603  00316A  010F               	movlb	15	; () banked
  2604  00316C  6F49               	movwf	73,b	;volatile
  2605                           
  2606                           ; BSR set to: 15
  2607                           ;tasks.h: 227: INTCON2bits.RBPU = 0;
  2608  00316E  9EF1               	bcf	intcon2,7,c	;volatile
  2609                           
  2610                           ; BSR set to: 15
  2611                           ;tasks.h: 229: timer0_init(6);
  2612  003170  0E06               	movlw	6
  2613  003172  EC00  F01C         	call	_timer0_init
  2614                           
  2615                           ;tasks.h: 230: timer1_init(0, 2);
  2616  003176  0E02               	movlw	2
  2617  003178  6E20               	movwf	timer1_init@clock_select,c
  2618  00317A  0E00               	movlw	0
  2619  00317C  ECD5  F01A         	call	_timer1_init
  2620                           
  2621                           ;tasks.h: 231: timer3_init(2);
  2622  003180  0E02               	movlw	2
  2623  003182  EC74  F01C         	call	_timer3_init
  2624                           
  2625                           ;tasks.h: 232: I2C_init();
  2626  003186  EC44  F01D         	call	_I2C_init	;wreg free
  2627                           
  2628                           ;tasks.h: 233: I2C_LCD_init();
  2629  00318A  EC39  F01A         	call	_I2C_LCD_init	;wreg free
  2630                           
  2631                           ;tasks.h: 234: ADC_init(0);
  2632  00318E  0E00               	movlw	0
  2633  003190  ECF0  F01C         	call	_ADC_init
  2634                           
  2635                           ;tasks.h: 235: RTCC_init();
  2636  003194  EC30  F01C         	call	_RTCC_init	;wreg free
  2637                           
  2638                           ;tasks.h: 237: UART_init();
  2639  003198  ECE0  F01C         	call	_UART_init	;wreg free
  2640                           
  2641                           ;tasks.h: 238: uint8_t txbuf[200];
  2642                           ;tasks.h: 239: ringbuf_init(&tx_buf, txbuf, sizeof (txbuf));
  2643  00319C  0EC8               	movlw	low _tx_buf
  2644  00319E  0100               	movlb	0	; () banked
  2645  0031A0  6FB0               	movwf	ringbuf_init@rb& (0+255),b
  2646  0031A2  0E01               	movlw	high _tx_buf
  2647  0031A4  0100               	movlb	0	; () banked
  2648  0031A6  6FB1               	movwf	(ringbuf_init@rb+1)& (0+255),b
  2649  0031A8  0E00               	movlw	low main_init@txbuf
  2650  0031AA  0100               	movlb	0	; () banked
  2651  0031AC  6FB2               	movwf	ringbuf_init@internal_buf& (0+255),b
  2652  0031AE  0E01               	movlw	high main_init@txbuf
  2653  0031B0  0100               	movlb	0	; () banked
  2654  0031B2  6FB3               	movwf	(ringbuf_init@internal_buf+1)& (0+255),b
  2655  0031B4  0E00               	movlw	0
  2656  0031B6  0100               	movlb	0	; () banked
  2657  0031B8  6FB5               	movwf	(ringbuf_init@bufsize+1)& (0+255),b
  2658  0031BA  0EC8               	movlw	200
  2659  0031BC  6FB4               	movwf	ringbuf_init@bufsize& (0+255),b
  2660  0031BE  EC0F  F01A         	call	_ringbuf_init	;wreg free
  2661  0031C2  0012               	return		;funcret
  2662  0031C4                     __end_of_main_init:
  2663                           	opt stack 0
  2664                           tblptru	equ	0xFF8
  2665                           tblptrh	equ	0xFF7
  2666                           tblptrl	equ	0xFF6
  2667                           tablat	equ	0xFF5
  2668                           prodh	equ	0xFF4
  2669                           prodl	equ	0xFF3
  2670                           intcon	equ	0xFF2
  2671                           intcon2	equ	0xFF1
  2672                           postinc0	equ	0xFEE
  2673                           wreg	equ	0xFE8
  2674                           indf2	equ	0xFDF
  2675                           postinc2	equ	0xFDE
  2676                           postdec2	equ	0xFDD
  2677                           fsr2h	equ	0xFDA
  2678                           fsr2l	equ	0xFD9
  2679                           status	equ	0xFD8
  2680                           
  2681 ;; *************** function _timer3_init *****************
  2682 ;; Defined at:
  2683 ;;		line 85 in file "../My_header\My_header.h"
  2684 ;; Parameters:    Size  Location     Type
  2685 ;;  prescaler       1    wreg     unsigned char 
  2686 ;; Auto vars:     Size  Location     Type
  2687 ;;  prescaler       1   32[COMRAM] unsigned char 
  2688 ;; Return value:  Size  Location     Type
  2689 ;;		None               void
  2690 ;; Registers used:
  2691 ;;		wreg, status,2, status,0
  2692 ;; Tracked objects:
  2693 ;;		On entry : 0/0
  2694 ;;		On exit  : 0/0
  2695 ;;		Unchanged: 0/0
  2696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2698 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2699 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2700 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2701 ;;Total ram usage:        2 bytes
  2702 ;; Hardware stack levels used:    1
  2703 ;; Hardware stack levels required when called:    4
  2704 ;; This function calls:
  2705 ;;		Nothing
  2706 ;; This function is called by:
  2707 ;;		_main_init
  2708 ;; This function uses a non-reentrant model
  2709 ;;
  2710                           
  2711                           	psect	text8
  2712  0038E8                     __ptext8:
  2713                           	opt stack 0
  2714  0038E8                     _timer3_init:
  2715                           	opt stack 25
  2716                           
  2717                           ;incstack = 0
  2718                           ;timer3_init@prescaler stored from wreg
  2719  0038E8  6E21               	movwf	timer3_init@prescaler,c
  2720                           
  2721                           ;My_header\My_header.h: 86: T3CONbits.TMR3CS = 0;
  2722  0038EA  0E3F               	movlw	-193
  2723  0038EC  1679               	andwf	3961,f,c	;volatile
  2724                           
  2725                           ;My_header\My_header.h: 87: T3CONbits.T3OSCEN = 0;
  2726  0038EE  9679               	bcf	3961,3,c	;volatile
  2727                           
  2728                           ;My_header\My_header.h: 88: T3CONbits.T3CKPS = prescaler;
  2729  0038F0  C021  F020         	movff	timer3_init@prescaler,??_timer3_init
  2730  0038F4  3A20               	swapf	??_timer3_init,f,c
  2731  0038F6  5079               	movf	3961,w,c	;volatile
  2732  0038F8  1820               	xorwf	??_timer3_init,w,c
  2733  0038FA  0BCF               	andlw	-49
  2734  0038FC  1820               	xorwf	??_timer3_init,w,c
  2735  0038FE  6E79               	movwf	3961,c	;volatile
  2736                           
  2737                           ;My_header\My_header.h: 89: T3CONbits.RD163 = 0;
  2738  003900  9E79               	bcf	3961,7,c	;volatile
  2739                           
  2740                           ;My_header\My_header.h: 90: T3CONbits.TMR3ON = 1;
  2741  003902  8079               	bsf	3961,0,c	;volatile
  2742                           
  2743                           ;My_header\My_header.h: 91: IPR2bits.TMR3IP = 0;
  2744  003904  92A2               	bcf	4002,1,c	;volatile
  2745                           
  2746                           ;My_header\My_header.h: 92: PIR2bits.TMR3IF = 0;
  2747  003906  92A1               	bcf	4001,1,c	;volatile
  2748                           
  2749                           ;My_header\My_header.h: 93: PIE2bits.TMR3IE = 1;
  2750  003908  82A0               	bsf	4000,1,c	;volatile
  2751                           
  2752                           ;My_header\My_header.h: 94: INTCONbits.PEIE = 1;
  2753  00390A  8CF2               	bsf	intcon,6,c	;volatile
  2754  00390C  0012               	return		;funcret
  2755  00390E                     __end_of_timer3_init:
  2756                           	opt stack 0
  2757                           tblptru	equ	0xFF8
  2758                           tblptrh	equ	0xFF7
  2759                           tblptrl	equ	0xFF6
  2760                           tablat	equ	0xFF5
  2761                           prodh	equ	0xFF4
  2762                           prodl	equ	0xFF3
  2763                           intcon	equ	0xFF2
  2764                           intcon2	equ	0xFF1
  2765                           postinc0	equ	0xFEE
  2766                           wreg	equ	0xFE8
  2767                           indf2	equ	0xFDF
  2768                           postinc2	equ	0xFDE
  2769                           postdec2	equ	0xFDD
  2770                           fsr2h	equ	0xFDA
  2771                           fsr2l	equ	0xFD9
  2772                           status	equ	0xFD8
  2773                           
  2774 ;; *************** function _timer1_init *****************
  2775 ;; Defined at:
  2776 ;;		line 54 in file "../My_header\My_header.h"
  2777 ;; Parameters:    Size  Location     Type
  2778 ;;  prescaler       1    wreg     unsigned char 
  2779 ;;  clock_select    1   31[COMRAM] unsigned char 
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;  prescaler       1    0[BANK0 ] unsigned char 
  2782 ;; Return value:  Size  Location     Type
  2783 ;;		None               void
  2784 ;; Registers used:
  2785 ;;		wreg, status,2, status,0
  2786 ;; Tracked objects:
  2787 ;;		On entry : 0/0
  2788 ;;		On exit  : 0/0
  2789 ;;		Unchanged: 0/0
  2790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2791 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2792 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2793 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2794 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2795 ;;Total ram usage:        3 bytes
  2796 ;; Hardware stack levels used:    1
  2797 ;; Hardware stack levels required when called:    4
  2798 ;; This function calls:
  2799 ;;		Nothing
  2800 ;; This function is called by:
  2801 ;;		_main_init
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           	psect	text9
  2806  0035AA                     __ptext9:
  2807                           	opt stack 0
  2808  0035AA                     _timer1_init:
  2809                           	opt stack 25
  2810                           
  2811                           ;incstack = 0
  2812                           ;timer1_init@prescaler stored from wreg
  2813  0035AA  0100               	movlb	0	; () banked
  2814  0035AC  6FB0               	movwf	timer1_init@prescaler& (0+255),b
  2815                           
  2816                           ;My_header\My_header.h: 55: T1CONbits.TMR1CS = clock_select;
  2817  0035AE  C020  F021         	movff	timer1_init@clock_select,??_timer1_init
  2818  0035B2  3A21               	swapf	??_timer1_init,f,c
  2819  0035B4  4621               	rlncf	??_timer1_init,f,c
  2820  0035B6  4621               	rlncf	??_timer1_init,f,c
  2821  0035B8  50CD               	movf	4045,w,c	;volatile
  2822  0035BA  1821               	xorwf	??_timer1_init,w,c
  2823  0035BC  0B3F               	andlw	-193
  2824  0035BE  1821               	xorwf	??_timer1_init,w,c
  2825  0035C0  6ECD               	movwf	4045,c	;volatile
  2826                           
  2827                           ;My_header\My_header.h: 56: if (clock_select == 2) T1CONbits.T1OSCEN = 1;
  2828  0035C2  0E02               	movlw	2
  2829  0035C4  1820               	xorwf	timer1_init@clock_select,w,c
  2830  0035C6  A4D8               	btfss	status,2,c
  2831  0035C8  D002               	goto	l134
  2832  0035CA  86CD               	bsf	4045,3,c	;volatile
  2833  0035CC  D001               	goto	l5099
  2834  0035CE                     l134:
  2835                           
  2836                           ;My_header\My_header.h: 57: else T1CONbits.T1OSCEN = 0;
  2837  0035CE  96CD               	bcf	4045,3,c	;volatile
  2838  0035D0                     l5099:
  2839                           
  2840                           ;My_header\My_header.h: 58: T1CONbits.T1CKPS = prescaler;
  2841  0035D0  C0B0  F021         	movff	timer1_init@prescaler,??_timer1_init
  2842  0035D4  3A21               	swapf	??_timer1_init,f,c
  2843  0035D6  50CD               	movf	4045,w,c	;volatile
  2844  0035D8  1821               	xorwf	??_timer1_init,w,c
  2845  0035DA  0BCF               	andlw	-49
  2846  0035DC  1821               	xorwf	??_timer1_init,w,c
  2847  0035DE  6ECD               	movwf	4045,c	;volatile
  2848                           
  2849                           ;My_header\My_header.h: 59: T1CONbits.nT1SYNC = 1;
  2850  0035E0  84CD               	bsf	4045,2,c	;volatile
  2851                           
  2852                           ;My_header\My_header.h: 60: T1CONbits.RD16 = 0;
  2853  0035E2  92CD               	bcf	4045,1,c	;volatile
  2854                           
  2855                           ;My_header\My_header.h: 61: T1CONbits.TMR1ON = 1;
  2856  0035E4  80CD               	bsf	4045,0,c	;volatile
  2857                           
  2858                           ;My_header\My_header.h: 62: IPR1bits.TMR1IP = 0;
  2859  0035E6  909F               	bcf	3999,0,c	;volatile
  2860                           
  2861                           ;My_header\My_header.h: 63: PIR1bits.TMR1IF = 0;
  2862  0035E8  909E               	bcf	3998,0,c	;volatile
  2863                           
  2864                           ;My_header\My_header.h: 64: PIE1bits.TMR1IE = 1;
  2865  0035EA  809D               	bsf	3997,0,c	;volatile
  2866                           
  2867                           ;My_header\My_header.h: 65: INTCONbits.PEIE = 1;
  2868  0035EC  8CF2               	bsf	intcon,6,c	;volatile
  2869  0035EE  0012               	return		;funcret
  2870  0035F0                     __end_of_timer1_init:
  2871                           	opt stack 0
  2872                           tblptru	equ	0xFF8
  2873                           tblptrh	equ	0xFF7
  2874                           tblptrl	equ	0xFF6
  2875                           tablat	equ	0xFF5
  2876                           prodh	equ	0xFF4
  2877                           prodl	equ	0xFF3
  2878                           intcon	equ	0xFF2
  2879                           intcon2	equ	0xFF1
  2880                           postinc0	equ	0xFEE
  2881                           wreg	equ	0xFE8
  2882                           indf2	equ	0xFDF
  2883                           postinc2	equ	0xFDE
  2884                           postdec2	equ	0xFDD
  2885                           fsr2h	equ	0xFDA
  2886                           fsr2l	equ	0xFD9
  2887                           status	equ	0xFD8
  2888                           
  2889 ;; *************** function _timer0_init *****************
  2890 ;; Defined at:
  2891 ;;		line 15 in file "../My_header\My_header.h"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;  prescaler       1    wreg     unsigned char 
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;  prescaler       1   32[COMRAM] unsigned char 
  2896 ;; Return value:  Size  Location     Type
  2897 ;;		None               void
  2898 ;; Registers used:
  2899 ;;		wreg, status,2, status,0
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : 0/0
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2906 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2907 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2908 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2909 ;;Total ram usage:        2 bytes
  2910 ;; Hardware stack levels used:    1
  2911 ;; Hardware stack levels required when called:    4
  2912 ;; This function calls:
  2913 ;;		Nothing
  2914 ;; This function is called by:
  2915 ;;		_main_init
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           	psect	text10
  2920  003800                     __ptext10:
  2921                           	opt stack 0
  2922  003800                     _timer0_init:
  2923                           	opt stack 25
  2924                           
  2925                           ;incstack = 0
  2926                           ;timer0_init@prescaler stored from wreg
  2927  003800  6E21               	movwf	timer0_init@prescaler,c
  2928                           
  2929                           ;My_header\My_header.h: 16: T0CONbits.TMR0ON = 1;
  2930  003802  8ED5               	bsf	4053,7,c	;volatile
  2931                           
  2932                           ;My_header\My_header.h: 17: T0CONbits.T08BIT = 1;
  2933  003804  8CD5               	bsf	4053,6,c	;volatile
  2934                           
  2935                           ;My_header\My_header.h: 18: T0CONbits.T0CS = 0;
  2936  003806  9AD5               	bcf	4053,5,c	;volatile
  2937                           
  2938                           ;My_header\My_header.h: 19: if (prescaler == 0) {
  2939  003808  5021               	movf	timer0_init@prescaler,w,c
  2940  00380A  A4D8               	btfss	status,2,c
  2941  00380C  D002               	goto	l129
  2942                           
  2943                           ;My_header\My_header.h: 20: T0CONbits.PSA = 1;
  2944  00380E  86D5               	bsf	4053,3,c	;volatile
  2945                           
  2946                           ;My_header\My_header.h: 21: } else {
  2947  003810  D00A               	goto	l3479
  2948  003812                     l129:
  2949                           
  2950                           ;My_header\My_header.h: 22: T0CONbits.PSA = 0;
  2951  003812  96D5               	bcf	4053,3,c	;volatile
  2952                           
  2953                           ;My_header\My_header.h: 23: T0CONbits.T0PS = prescaler - 1;
  2954  003814  C021  F020         	movff	timer0_init@prescaler,??_timer0_init
  2955  003818  0EFF               	movlw	255
  2956  00381A  2620               	addwf	??_timer0_init,f,c
  2957  00381C  50D5               	movf	4053,w,c	;volatile
  2958  00381E  1820               	xorwf	??_timer0_init,w,c
  2959  003820  0BF8               	andlw	-8
  2960  003822  1820               	xorwf	??_timer0_init,w,c
  2961  003824  6ED5               	movwf	4053,c	;volatile
  2962  003826                     l3479:
  2963                           
  2964                           ;My_header\My_header.h: 24: }
  2965                           ;My_header\My_header.h: 25: INTCONbits.T0IE = 1;
  2966  003826  8AF2               	bsf	intcon,5,c	;volatile
  2967                           
  2968                           ;My_header\My_header.h: 26: INTCONbits.TMR0IF = 0;
  2969  003828  94F2               	bcf	intcon,2,c	;volatile
  2970                           
  2971                           ;My_header\My_header.h: 27: INTCON2bits.TMR0IP = 0;
  2972  00382A  94F1               	bcf	intcon2,2,c	;volatile
  2973                           
  2974                           ;My_header\My_header.h: 28: INTCONbits.PEIE = 1;
  2975  00382C  8CF2               	bsf	intcon,6,c	;volatile
  2976  00382E  0012               	return		;funcret
  2977  003830                     __end_of_timer0_init:
  2978                           	opt stack 0
  2979                           tblptru	equ	0xFF8
  2980                           tblptrh	equ	0xFF7
  2981                           tblptrl	equ	0xFF6
  2982                           tablat	equ	0xFF5
  2983                           prodh	equ	0xFF4
  2984                           prodl	equ	0xFF3
  2985                           intcon	equ	0xFF2
  2986                           intcon2	equ	0xFF1
  2987                           postinc0	equ	0xFEE
  2988                           wreg	equ	0xFE8
  2989                           indf2	equ	0xFDF
  2990                           postinc2	equ	0xFDE
  2991                           postdec2	equ	0xFDD
  2992                           fsr2h	equ	0xFDA
  2993                           fsr2l	equ	0xFD9
  2994                           status	equ	0xFD8
  2995                           
  2996 ;; *************** function _ringbuf_init *****************
  2997 ;; Defined at:
  2998 ;;		line 24 in file "../My_header\My_ringbuf.h"
  2999 ;; Parameters:    Size  Location     Type
  3000 ;;  rb              2    0[BANK0 ] PTR struct ringbuf
  3001 ;;		 -> tx_buf(8), 
  3002 ;;  internal_buf    2    2[BANK0 ] PTR unsigned char 
  3003 ;;		 -> main_init@txbuf(200), 
  3004 ;;  bufsize         2    4[BANK0 ] unsigned int 
  3005 ;; Auto vars:     Size  Location     Type
  3006 ;;		None
  3007 ;; Return value:  Size  Location     Type
  3008 ;;		None               void
  3009 ;; Registers used:
  3010 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3011 ;; Tracked objects:
  3012 ;;		On entry : 0/0
  3013 ;;		On exit  : 0/0
  3014 ;;		Unchanged: 0/0
  3015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3016 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3019 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3020 ;;Total ram usage:        6 bytes
  3021 ;; Hardware stack levels used:    1
  3022 ;; Hardware stack levels required when called:    4
  3023 ;; This function calls:
  3024 ;;		Nothing
  3025 ;; This function is called by:
  3026 ;;		_main_init
  3027 ;; This function uses a non-reentrant model
  3028 ;;
  3029                           
  3030                           	psect	text11
  3031  00341E                     __ptext11:
  3032                           	opt stack 0
  3033  00341E                     _ringbuf_init:
  3034                           	opt stack 25
  3035                           
  3036                           ;My_header\My_ringbuf.h: 25: rb->buf = internal_buf;
  3037                           
  3038                           ;incstack = 0
  3039  00341E  C0B0  FFD9         	movff	ringbuf_init@rb,fsr2l
  3040  003422  C0B1  FFDA         	movff	ringbuf_init@rb+1,fsr2h
  3041  003426  C0B2  FFDE         	movff	ringbuf_init@internal_buf,postinc2
  3042  00342A  C0B3  FFDD         	movff	ringbuf_init@internal_buf+1,postdec2
  3043                           
  3044                           ;My_header\My_ringbuf.h: 26: rb->size = bufsize;
  3045  00342E  0100               	movlb	0	; () banked
  3046  003430  EE20 F002          	lfsr	2,2
  3047  003434  51B0               	movf	ringbuf_init@rb& (0+255),w,b
  3048  003436  26D9               	addwf	fsr2l,f,c
  3049  003438  51B1               	movf	(ringbuf_init@rb+1)& (0+255),w,b
  3050  00343A  22DA               	addwfc	fsr2h,f,c
  3051  00343C  C0B4  FFDE         	movff	ringbuf_init@bufsize,postinc2
  3052  003440  C0B5  FFDD         	movff	ringbuf_init@bufsize+1,postdec2
  3053                           
  3054                           ; BSR set to: 0
  3055                           ;My_header\My_ringbuf.h: 27: rb->head = 0;
  3056  003444  0100               	movlb	0	; () banked
  3057  003446  EE20 F004          	lfsr	2,4
  3058  00344A  51B0               	movf	ringbuf_init@rb& (0+255),w,b
  3059  00344C  26D9               	addwf	fsr2l,f,c
  3060  00344E  51B1               	movf	(ringbuf_init@rb+1)& (0+255),w,b
  3061  003450  22DA               	addwfc	fsr2h,f,c
  3062  003452  0E00               	movlw	0
  3063  003454  6EDE               	movwf	postinc2,c
  3064  003456  0E00               	movlw	0
  3065  003458  6EDD               	movwf	postdec2,c
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;My_header\My_ringbuf.h: 28: rb->tail = 0;
  3069  00345A  0100               	movlb	0	; () banked
  3070  00345C  EE20 F006          	lfsr	2,6
  3071  003460  51B0               	movf	ringbuf_init@rb& (0+255),w,b
  3072  003462  26D9               	addwf	fsr2l,f,c
  3073  003464  51B1               	movf	(ringbuf_init@rb+1)& (0+255),w,b
  3074  003466  22DA               	addwfc	fsr2h,f,c
  3075  003468  0E00               	movlw	0
  3076  00346A  6EDE               	movwf	postinc2,c
  3077  00346C  0E00               	movlw	0
  3078  00346E  6EDD               	movwf	postdec2,c
  3079                           
  3080                           ; BSR set to: 0
  3081  003470  0012               	return		;funcret
  3082  003472                     __end_of_ringbuf_init:
  3083                           	opt stack 0
  3084                           tblptru	equ	0xFF8
  3085                           tblptrh	equ	0xFF7
  3086                           tblptrl	equ	0xFF6
  3087                           tablat	equ	0xFF5
  3088                           prodh	equ	0xFF4
  3089                           prodl	equ	0xFF3
  3090                           intcon	equ	0xFF2
  3091                           intcon2	equ	0xFF1
  3092                           postinc0	equ	0xFEE
  3093                           wreg	equ	0xFE8
  3094                           indf2	equ	0xFDF
  3095                           postinc2	equ	0xFDE
  3096                           postdec2	equ	0xFDD
  3097                           fsr2h	equ	0xFDA
  3098                           fsr2l	equ	0xFD9
  3099                           status	equ	0xFD8
  3100                           
  3101 ;; *************** function _UART_init *****************
  3102 ;; Defined at:
  3103 ;;		line 192 in file "../My_header\My_header.h"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;		None
  3106 ;; Auto vars:     Size  Location     Type
  3107 ;;		None
  3108 ;; Return value:  Size  Location     Type
  3109 ;;		None               void
  3110 ;; Registers used:
  3111 ;;		wreg, status,2
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3121 ;;Total ram usage:        0 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    4
  3124 ;; This function calls:
  3125 ;;		Nothing
  3126 ;; This function is called by:
  3127 ;;		_main_init
  3128 ;; This function uses a non-reentrant model
  3129 ;;
  3130                           
  3131                           	psect	text12
  3132  0039C0                     __ptext12:
  3133                           	opt stack 0
  3134  0039C0                     _UART_init:
  3135                           	opt stack 25
  3136                           
  3137                           ;My_header\My_header.h: 193: TXSTA1bits.TX9 = 0;
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;incstack = 0
  3141  0039C0  9CAD               	bcf	4013,6,c	;volatile
  3142                           
  3143                           ;My_header\My_header.h: 194: TXSTA1bits.TXEN = 1;
  3144  0039C2  8AAD               	bsf	4013,5,c	;volatile
  3145                           
  3146                           ;My_header\My_header.h: 195: TXSTA1bits.SYNC = 0;
  3147  0039C4  98AD               	bcf	4013,4,c	;volatile
  3148                           
  3149                           ;My_header\My_header.h: 196: TXSTA1bits.BRGH = 0;
  3150  0039C6  94AD               	bcf	4013,2,c	;volatile
  3151                           
  3152                           ;My_header\My_header.h: 197: RCSTA1bits.SPEN = 1;
  3153  0039C8  8EAC               	bsf	4012,7,c	;volatile
  3154                           
  3155                           ;My_header\My_header.h: 198: RCSTA1bits.RX9 = 0;
  3156  0039CA  9CAC               	bcf	4012,6,c	;volatile
  3157                           
  3158                           ;My_header\My_header.h: 199: RCSTA1bits.CREN = 1;
  3159  0039CC  88AC               	bsf	4012,4,c	;volatile
  3160                           
  3161                           ;My_header\My_header.h: 200: BAUDCON1bits.BRG16 = 0;
  3162  0039CE  967E               	bcf	3966,3,c	;volatile
  3163                           
  3164                           ;My_header\My_header.h: 201: SPBRG1 = 48000000 / 64 / 9600 - 1;
  3165  0039D0  0E4D               	movlw	77
  3166  0039D2  6EB0               	movwf	4016,c	;volatile
  3167                           
  3168                           ;My_header\My_header.h: 202: SPBRGH1 = 0;
  3169  0039D4  0E00               	movlw	0
  3170  0039D6  6E7F               	movwf	3967,c	;volatile
  3171                           
  3172                           ;My_header\My_header.h: 203: IPR1bits.RC1IP = 0;
  3173  0039D8  9A9F               	bcf	3999,5,c	;volatile
  3174                           
  3175                           ;My_header\My_header.h: 204: PIE1bits.RCIE = 1;
  3176  0039DA  8A9D               	bsf	3997,5,c	;volatile
  3177                           
  3178                           ;My_header\My_header.h: 205: INTCONbits.PEIE = 1;
  3179  0039DC  8CF2               	bsf	intcon,6,c	;volatile
  3180  0039DE  0012               	return		;funcret
  3181  0039E0                     __end_of_UART_init:
  3182                           	opt stack 0
  3183                           tblptru	equ	0xFF8
  3184                           tblptrh	equ	0xFF7
  3185                           tblptrl	equ	0xFF6
  3186                           tablat	equ	0xFF5
  3187                           prodh	equ	0xFF4
  3188                           prodl	equ	0xFF3
  3189                           intcon	equ	0xFF2
  3190                           intcon2	equ	0xFF1
  3191                           postinc0	equ	0xFEE
  3192                           wreg	equ	0xFE8
  3193                           indf2	equ	0xFDF
  3194                           postinc2	equ	0xFDE
  3195                           postdec2	equ	0xFDD
  3196                           fsr2h	equ	0xFDA
  3197                           fsr2l	equ	0xFD9
  3198                           status	equ	0xFD8
  3199                           
  3200 ;; *************** function _RTCC_init *****************
  3201 ;; Defined at:
  3202 ;;		line 56 in file "../My_header\My_RTCC.h"
  3203 ;; Parameters:    Size  Location     Type
  3204 ;;		None
  3205 ;; Auto vars:     Size  Location     Type
  3206 ;;		None
  3207 ;; Return value:  Size  Location     Type
  3208 ;;		None               void
  3209 ;; Registers used:
  3210 ;;		wreg, status,2
  3211 ;; Tracked objects:
  3212 ;;		On entry : 0/0
  3213 ;;		On exit  : 0/0
  3214 ;;		Unchanged: 0/0
  3215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3220 ;;Total ram usage:        0 bytes
  3221 ;; Hardware stack levels used:    1
  3222 ;; Hardware stack levels required when called:    4
  3223 ;; This function calls:
  3224 ;;		Nothing
  3225 ;; This function is called by:
  3226 ;;		_main_init
  3227 ;; This function uses a non-reentrant model
  3228 ;;
  3229                           
  3230                           	psect	text13
  3231  003860                     __ptext13:
  3232                           	opt stack 0
  3233  003860                     _RTCC_init:
  3234                           	opt stack 25
  3235                           
  3236                           ;My_header\My_RTCC.h: 57: RTCCFGbits.RTCWREN = 1;
  3237                           
  3238                           ;incstack = 0
  3239  003860  010F               	movlb	15	; () banked
  3240  003862  8B3F               	bsf	63,5,b	;volatile
  3241                           
  3242                           ;My_header\My_RTCC.h: 58: if (RTCCFGbits.RTCWREN != 1) {
  3243  003864  010F               	movlb	15	; () banked
  3244  003866  BB3F               	btfsc	63,5,b	;volatile
  3245  003868  D006               	goto	l3609
  3246                           
  3247                           ; BSR set to: 15
  3248                           ;My_header\My_RTCC.h: 59: EECON2 = 0x55;
  3249  00386A  0E55               	movlw	85
  3250  00386C  6EA7               	movwf	4007,c	;volatile
  3251                           
  3252                           ;My_header\My_RTCC.h: 60: EECON2 = 0xAA;
  3253  00386E  0EAA               	movlw	170
  3254  003870  6EA7               	movwf	4007,c	;volatile
  3255                           
  3256                           ; BSR set to: 15
  3257                           ;My_header\My_RTCC.h: 61: RTCCFGbits.RTCWREN = 1;
  3258  003872  010F               	movlb	15	; () banked
  3259  003874  8B3F               	bsf	63,5,b	;volatile
  3260  003876                     l3609:
  3261                           
  3262                           ; BSR set to: 15
  3263                           ;My_header\My_RTCC.h: 62: }
  3264                           ;My_header\My_RTCC.h: 63: RTCCFGbits.RTCEN = 1;
  3265  003876  010F               	movlb	15	; () banked
  3266  003878  8F3F               	bsf	63,7,b	;volatile
  3267                           
  3268                           ; BSR set to: 15
  3269                           ;My_header\My_RTCC.h: 64: RTCCFGbits.RTCOE = 0;
  3270  00387A  010F               	movlb	15	; () banked
  3271  00387C  953F               	bcf	63,2,b	;volatile
  3272                           
  3273                           ; BSR set to: 15
  3274                           ;My_header\My_RTCC.h: 65: PADCFG1bits.RTSECSEL0 = 1;
  3275  00387E  010F               	movlb	15	; () banked
  3276  003880  833C               	bsf	60,1,b	;volatile
  3277                           
  3278                           ; BSR set to: 15
  3279                           ;My_header\My_RTCC.h: 66: PADCFG1bits.RTSECSEL1 = 1;
  3280  003882  010F               	movlb	15	; () banked
  3281  003884  853C               	bsf	60,2,b	;volatile
  3282                           
  3283                           ;My_header\My_RTCC.h: 67: RTCCAL = 0x00;
  3284  003886  0E00               	movlw	0
  3285  003888  010F               	movlb	15	; () banked
  3286  00388A  6F3E               	movwf	62,b	;volatile
  3287                           
  3288                           ; BSR set to: 15
  3289  00388C  0012               	return		;funcret
  3290  00388E                     __end_of_RTCC_init:
  3291                           	opt stack 0
  3292                           tblptru	equ	0xFF8
  3293                           tblptrh	equ	0xFF7
  3294                           tblptrl	equ	0xFF6
  3295                           tablat	equ	0xFF5
  3296                           prodh	equ	0xFF4
  3297                           prodl	equ	0xFF3
  3298                           intcon	equ	0xFF2
  3299                           intcon2	equ	0xFF1
  3300                           postinc0	equ	0xFEE
  3301                           wreg	equ	0xFE8
  3302                           indf2	equ	0xFDF
  3303                           postinc2	equ	0xFDE
  3304                           postdec2	equ	0xFDD
  3305                           fsr2h	equ	0xFDA
  3306                           fsr2l	equ	0xFD9
  3307                           status	equ	0xFD8
  3308                           
  3309 ;; *************** function _I2C_init *****************
  3310 ;; Defined at:
  3311 ;;		line 25 in file "../My_header\My_I2C.h"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;		None
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;		None
  3316 ;; Return value:  Size  Location     Type
  3317 ;;		None               void
  3318 ;; Registers used:
  3319 ;;		wreg, status,2
  3320 ;; Tracked objects:
  3321 ;;		On entry : 0/0
  3322 ;;		On exit  : 0/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3329 ;;Total ram usage:        0 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; Hardware stack levels required when called:    4
  3332 ;; This function calls:
  3333 ;;		Nothing
  3334 ;; This function is called by:
  3335 ;;		_main_init
  3336 ;; This function uses a non-reentrant model
  3337 ;;
  3338                           
  3339                           	psect	text14
  3340  003A88                     __ptext14:
  3341                           	opt stack 0
  3342  003A88                     _I2C_init:
  3343                           	opt stack 25
  3344                           
  3345                           ;My_header\My_I2C.h: 26: SSP1STAT = 0b10000000;
  3346                           
  3347                           ; BSR set to: 15
  3348                           ;incstack = 0
  3349  003A88  0E80               	movlw	128
  3350  003A8A  6EC7               	movwf	4039,c	;volatile
  3351                           
  3352                           ;My_header\My_I2C.h: 27: SSP1CON1 = 0b00101000;
  3353  003A8C  0E28               	movlw	40
  3354  003A8E  6EC6               	movwf	4038,c	;volatile
  3355                           
  3356                           ;My_header\My_I2C.h: 28: SSP1ADD = 0x13;
  3357  003A90  0E13               	movlw	19
  3358  003A92  6EC8               	movwf	4040,c	;volatile
  3359                           
  3360                           ;My_header\My_I2C.h: 31: SSP1IF = 0;
  3361  003A94  969E               	bcf	3998,3,c	;volatile
  3362                           
  3363                           ;My_header\My_I2C.h: 32: BCL1IF = 0;
  3364  003A96  96A1               	bcf	4001,3,c	;volatile
  3365  003A98  0012               	return		;funcret
  3366  003A9A                     __end_of_I2C_init:
  3367                           	opt stack 0
  3368                           tblptru	equ	0xFF8
  3369                           tblptrh	equ	0xFF7
  3370                           tblptrl	equ	0xFF6
  3371                           tablat	equ	0xFF5
  3372                           prodh	equ	0xFF4
  3373                           prodl	equ	0xFF3
  3374                           intcon	equ	0xFF2
  3375                           intcon2	equ	0xFF1
  3376                           postinc0	equ	0xFEE
  3377                           wreg	equ	0xFE8
  3378                           indf2	equ	0xFDF
  3379                           postinc2	equ	0xFDE
  3380                           postdec2	equ	0xFDD
  3381                           fsr2h	equ	0xFDA
  3382                           fsr2l	equ	0xFD9
  3383                           status	equ	0xFD8
  3384                           
  3385 ;; *************** function _I2C_LCD_init *****************
  3386 ;; Defined at:
  3387 ;;		line 164 in file "../My_header\My_I2C.h"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;		None
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;		None
  3392 ;; Return value:  Size  Location     Type
  3393 ;;		None               void
  3394 ;; Registers used:
  3395 ;;		wreg, status,2, status,0, cstack
  3396 ;; Tracked objects:
  3397 ;;		On entry : 0/0
  3398 ;;		On exit  : 0/0
  3399 ;;		Unchanged: 0/0
  3400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3405 ;;Total ram usage:        0 bytes
  3406 ;; Hardware stack levels used:    1
  3407 ;; Hardware stack levels required when called:    8
  3408 ;; This function calls:
  3409 ;;		_Delay_ms
  3410 ;;		_I2C_LCD_Clear
  3411 ;;		_I2C_LCD_Command
  3412 ;; This function is called by:
  3413 ;;		_main_init
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           	psect	text15
  3418  003472                     __ptext15:
  3419                           	opt stack 0
  3420  003472                     _I2C_LCD_init:
  3421                           	opt stack 21
  3422                           
  3423                           ;My_header\My_I2C.h: 165: Delay_ms(40);
  3424                           
  3425                           ;incstack = 0
  3426  003472  0E00               	movlw	0
  3427  003474  6E21               	movwf	Delay_ms@ms+1,c
  3428  003476  0E28               	movlw	40
  3429  003478  6E20               	movwf	Delay_ms@ms,c
  3430  00347A  EC87  F01C         	call	_Delay_ms	;wreg free
  3431                           
  3432                           ;My_header\My_I2C.h: 166: I2C_LCD_Command(0x38);
  3433  00347E  0E38               	movlw	56
  3434  003480  ECB0  F01B         	call	_I2C_LCD_Command
  3435                           
  3436                           ;My_header\My_I2C.h: 167: I2C_LCD_Command(0x39);
  3437  003484  0E39               	movlw	57
  3438  003486  ECB0  F01B         	call	_I2C_LCD_Command
  3439                           
  3440                           ;My_header\My_I2C.h: 168: I2C_LCD_Command(0x14);
  3441  00348A  0E14               	movlw	20
  3442  00348C  ECB0  F01B         	call	_I2C_LCD_Command
  3443                           
  3444                           ;My_header\My_I2C.h: 169: I2C_LCD_Command(0x70);
  3445  003490  0E70               	movlw	112
  3446  003492  ECB0  F01B         	call	_I2C_LCD_Command
  3447                           
  3448                           ;My_header\My_I2C.h: 170: I2C_LCD_Command(0x56);
  3449  003496  0E56               	movlw	86
  3450  003498  ECB0  F01B         	call	_I2C_LCD_Command
  3451                           
  3452                           ;My_header\My_I2C.h: 171: I2C_LCD_Command(0x6C);
  3453  00349C  0E6C               	movlw	108
  3454  00349E  ECB0  F01B         	call	_I2C_LCD_Command
  3455                           
  3456                           ;My_header\My_I2C.h: 172: Delay_ms(200);
  3457  0034A2  0E00               	movlw	0
  3458  0034A4  6E21               	movwf	Delay_ms@ms+1,c
  3459  0034A6  0EC8               	movlw	200
  3460  0034A8  6E20               	movwf	Delay_ms@ms,c
  3461  0034AA  EC87  F01C         	call	_Delay_ms	;wreg free
  3462                           
  3463                           ;My_header\My_I2C.h: 173: I2C_LCD_Command(0x38);
  3464  0034AE  0E38               	movlw	56
  3465  0034B0  ECB0  F01B         	call	_I2C_LCD_Command
  3466                           
  3467                           ;My_header\My_I2C.h: 174: I2C_LCD_Command(0x0C);
  3468  0034B4  0E0C               	movlw	12
  3469  0034B6  ECB0  F01B         	call	_I2C_LCD_Command
  3470                           
  3471                           ;My_header\My_I2C.h: 175: I2C_LCD_Command(0x06);
  3472  0034BA  0E06               	movlw	6
  3473  0034BC  ECB0  F01B         	call	_I2C_LCD_Command
  3474                           
  3475                           ;My_header\My_I2C.h: 176: I2C_LCD_Clear();
  3476  0034C0  ECFE  F01C         	call	_I2C_LCD_Clear	;wreg free
  3477  0034C4  0012               	return		;funcret
  3478  0034C6                     __end_of_I2C_LCD_init:
  3479                           	opt stack 0
  3480                           tblptru	equ	0xFF8
  3481                           tblptrh	equ	0xFF7
  3482                           tblptrl	equ	0xFF6
  3483                           tablat	equ	0xFF5
  3484                           prodh	equ	0xFF4
  3485                           prodl	equ	0xFF3
  3486                           intcon	equ	0xFF2
  3487                           intcon2	equ	0xFF1
  3488                           postinc0	equ	0xFEE
  3489                           wreg	equ	0xFE8
  3490                           indf2	equ	0xFDF
  3491                           postinc2	equ	0xFDE
  3492                           postdec2	equ	0xFDD
  3493                           fsr2h	equ	0xFDA
  3494                           fsr2l	equ	0xFD9
  3495                           status	equ	0xFD8
  3496                           
  3497 ;; *************** function _Delay_ms *****************
  3498 ;; Defined at:
  3499 ;;		line 333 in file "../My_header\My_header.h"
  3500 ;; Parameters:    Size  Location     Type
  3501 ;;  ms              2   31[COMRAM] unsigned int 
  3502 ;; Auto vars:     Size  Location     Type
  3503 ;;		None
  3504 ;; Return value:  Size  Location     Type
  3505 ;;		None               void
  3506 ;; Registers used:
  3507 ;;		wreg, status,2, status,0
  3508 ;; Tracked objects:
  3509 ;;		On entry : 0/0
  3510 ;;		On exit  : 0/0
  3511 ;;		Unchanged: 0/0
  3512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3513 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3515 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3516 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3517 ;;Total ram usage:        3 bytes
  3518 ;; Hardware stack levels used:    1
  3519 ;; Hardware stack levels required when called:    4
  3520 ;; This function calls:
  3521 ;;		Nothing
  3522 ;; This function is called by:
  3523 ;;		_I2C_LCD_init
  3524 ;;		_main
  3525 ;; This function uses a non-reentrant model
  3526 ;;
  3527                           
  3528                           	psect	text16
  3529  00390E                     __ptext16:
  3530                           	opt stack 0
  3531  00390E                     _Delay_ms:
  3532                           	opt stack 24
  3533                           
  3534                           ;My_header\My_header.h: 334: while (ms--)_delay((unsigned long)((1)*(48000000/4000.0)));
  3535                           
  3536                           ;incstack = 0
  3537  00390E  D009               	goto	l5059
  3538  003910                     l5057:
  3539  003910  0E10               	movlw	16
  3540  003912  0100               	movlb	0	; () banked
  3541  003914  6FB0               	movwf	??_Delay_ms& (0+255),b
  3542  003916  0E94               	movlw	148
  3543  003918                     u6427:
  3544  003918  2EE8               	decfsz	wreg,f,c
  3545  00391A  D7FE               	goto	u6427
  3546  00391C  2FB0               	decfsz	??_Delay_ms& (0+255),f,b
  3547  00391E  D7FC               	goto	u6427
  3548  003920  D000               	nop2	
  3549  003922                     l5059:
  3550  003922  0620               	decf	Delay_ms@ms,f,c
  3551  003924  A0D8               	btfss	status,0,c
  3552  003926  0621               	decf	Delay_ms@ms+1,f,c
  3553  003928  2820               	incf	Delay_ms@ms,w,c
  3554  00392A  E1F2               	bnz	l5057
  3555  00392C  2821               	incf	Delay_ms@ms+1,w,c
  3556  00392E  B4D8               	btfsc	status,2,c
  3557  003930  0012               	return	
  3558  003932  D7EE               	goto	l5057
  3559  003934                     __end_of_Delay_ms:
  3560                           	opt stack 0
  3561                           tblptru	equ	0xFF8
  3562                           tblptrh	equ	0xFF7
  3563                           tblptrl	equ	0xFF6
  3564                           tablat	equ	0xFF5
  3565                           prodh	equ	0xFF4
  3566                           prodl	equ	0xFF3
  3567                           intcon	equ	0xFF2
  3568                           intcon2	equ	0xFF1
  3569                           postinc0	equ	0xFEE
  3570                           wreg	equ	0xFE8
  3571                           indf2	equ	0xFDF
  3572                           postinc2	equ	0xFDE
  3573                           postdec2	equ	0xFDD
  3574                           fsr2h	equ	0xFDA
  3575                           fsr2l	equ	0xFD9
  3576                           status	equ	0xFD8
  3577                           
  3578 ;; *************** function _ADC_init *****************
  3579 ;; Defined at:
  3580 ;;		line 149 in file "../My_header\My_header.h"
  3581 ;; Parameters:    Size  Location     Type
  3582 ;;  p_ref           1    wreg     unsigned char 
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;  p_ref           1   31[COMRAM] unsigned char 
  3585 ;; Return value:  Size  Location     Type
  3586 ;;		None               void
  3587 ;; Registers used:
  3588 ;;		wreg, status,2
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/0
  3591 ;;		On exit  : 0/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3595 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3597 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3598 ;;Total ram usage:        1 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; Hardware stack levels required when called:    4
  3601 ;; This function calls:
  3602 ;;		Nothing
  3603 ;; This function is called by:
  3604 ;;		_main_init
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           	psect	text17
  3609  0039E0                     __ptext17:
  3610                           	opt stack 0
  3611  0039E0                     _ADC_init:
  3612                           	opt stack 25
  3613                           
  3614                           ;incstack = 0
  3615                           ;ADC_init@p_ref stored from wreg
  3616  0039E0  6E20               	movwf	ADC_init@p_ref,c
  3617                           
  3618                           ;My_header\My_header.h: 150: ADCON0bits.VCFG1 = 0;
  3619  0039E2  9EC2               	bcf	4034,7,c	;volatile
  3620                           
  3621                           ;My_header\My_header.h: 151: ADCON0bits.VCFG0 = p_ref;
  3622  0039E4  B020               	btfsc	ADC_init@p_ref,0,c
  3623  0039E6  D002               	bra	u3045
  3624  0039E8  9CC2               	bcf	4034,6,c	;volatile
  3625  0039EA  D001               	bra	u3046
  3626  0039EC                     u3045:
  3627  0039EC  8CC2               	bsf	4034,6,c	;volatile
  3628  0039EE                     u3046:
  3629                           
  3630                           ;My_header\My_header.h: 153: ADCON1bits.ADFM = 1;
  3631  0039EE  8EC1               	bsf	4033,7,c	;volatile
  3632                           
  3633                           ;My_header\My_header.h: 154: ADCON1bits.ADCAL = 0;
  3634  0039F0  9CC1               	bcf	4033,6,c	;volatile
  3635                           
  3636                           ;My_header\My_header.h: 155: ADCON1bits.ADCS = 6;
  3637  0039F2  50C1               	movf	4033,w,c	;volatile
  3638  0039F4  0BF8               	andlw	-8
  3639  0039F6  0906               	iorlw	6
  3640  0039F8  6EC1               	movwf	4033,c	;volatile
  3641  0039FA  0012               	return		;funcret
  3642  0039FC                     __end_of_ADC_init:
  3643                           	opt stack 0
  3644                           tblptru	equ	0xFF8
  3645                           tblptrh	equ	0xFF7
  3646                           tblptrl	equ	0xFF6
  3647                           tablat	equ	0xFF5
  3648                           prodh	equ	0xFF4
  3649                           prodl	equ	0xFF3
  3650                           intcon	equ	0xFF2
  3651                           intcon2	equ	0xFF1
  3652                           postinc0	equ	0xFEE
  3653                           wreg	equ	0xFE8
  3654                           indf2	equ	0xFDF
  3655                           postinc2	equ	0xFDE
  3656                           postdec2	equ	0xFDD
  3657                           fsr2h	equ	0xFDA
  3658                           fsr2l	equ	0xFD9
  3659                           status	equ	0xFD8
  3660                           
  3661 ;; *************** function _display_LCD *****************
  3662 ;; Defined at:
  3663 ;;		line 153 in file "tasks.h"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;		None
  3666 ;; Auto vars:     Size  Location     Type
  3667 ;;  str            10   49[BANK0 ] unsigned char [10]
  3668 ;; Return value:  Size  Location     Type
  3669 ;;		None               void
  3670 ;; Registers used:
  3671 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3672 ;; Tracked objects:
  3673 ;;		On entry : 0/0
  3674 ;;		On exit  : 0/0
  3675 ;;		Unchanged: 0/0
  3676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3678 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3680 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3681 ;;Total ram usage:       10 bytes
  3682 ;; Hardware stack levels used:    1
  3683 ;; Hardware stack levels required when called:    9
  3684 ;; This function calls:
  3685 ;;		_I2C_LCD_Clear
  3686 ;;		_I2C_LCD_Putc
  3687 ;;		_I2C_LCD_Puts
  3688 ;;		_I2C_LCD_SetCursor
  3689 ;;		___lwdiv
  3690 ;;		___lwmod
  3691 ;;		_display_port
  3692 ;;		_display_time_0802
  3693 ;;		_my_utoa
  3694 ;; This function is called by:
  3695 ;;		_main
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           	psect	text18
  3700  000F7A                     __ptext18:
  3701                           	opt stack 0
  3702  000F7A                     _display_LCD:
  3703                           	opt stack 21
  3704                           
  3705                           ;tasks.h: 154: I2C_LCD_Clear();
  3706                           
  3707                           ;incstack = 0
  3708  000F7A  ECFE  F01C         	call	_I2C_LCD_Clear	;wreg free
  3709                           
  3710                           ;tasks.h: 155: switch (print_content) {
  3711  000F7E  D130               	goto	l5475
  3712  000F80                     l5415:
  3713                           
  3714                           ;tasks.h: 157: I2C_LCD_SetCursor(0, 0);
  3715  000F80  0E00               	movlw	0
  3716  000F82  0100               	movlb	0	; () banked
  3717  000F84  6FB4               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3718  000F86  0E00               	movlw	0
  3719  000F88  EC5E  F01C         	call	_I2C_LCD_SetCursor
  3720                           
  3721                           ;tasks.h: 158: I2C_LCD_Puts("Charge");
  3722  000F8C  0E4D               	movlw	low STR_8
  3723  000F8E  0100               	movlb	0	; () banked
  3724  000F90  6FB2               	movwf	I2C_LCD_Puts@s& (0+255),b
  3725  000F92  0E0F               	movlw	high STR_8
  3726  000F94  0100               	movlb	0	; () banked
  3727  000F96  6FB3               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3728  000F98  EC98  F017         	call	_I2C_LCD_Puts	;wreg free
  3729                           
  3730                           ;tasks.h: 159: I2C_LCD_SetCursor(0, 1);
  3731  000F9C  0E01               	movlw	1
  3732  000F9E  0100               	movlb	0	; () banked
  3733  000FA0  6FB4               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3734  000FA2  0E00               	movlw	0
  3735  000FA4  EC5E  F01C         	call	_I2C_LCD_SetCursor
  3736                           
  3737                           ;tasks.h: 160: I2C_LCD_Puts("Station");
  3738  000FA8  0E37               	movlw	low STR_9
  3739  000FAA  0100               	movlb	0	; () banked
  3740  000FAC  6FB2               	movwf	I2C_LCD_Puts@s& (0+255),b
  3741  000FAE  0E0F               	movlw	high STR_9
  3742  000FB0  0100               	movlb	0	; () banked
  3743  000FB2  6FB3               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3744  000FB4  EC98  F017         	call	_I2C_LCD_Puts	;wreg free
  3745                           
  3746                           ;tasks.h: 161: break;
  3747  000FB8  0012               	return	
  3748  000FBA                     l5421:
  3749                           
  3750                           ;tasks.h: 163: display_time_0802(&caltime_now, &epoch_now);
  3751  000FBA  0E9D               	movlw	low _caltime_now
  3752  000FBC  0100               	movlb	0	; () banked
  3753  000FBE  6FDC               	movwf	display_time_0802@ct& (0+255),b
  3754  000FC0  0E00               	movlw	high _caltime_now
  3755  000FC2  0100               	movlb	0	; () banked
  3756  000FC4  6FDD               	movwf	(display_time_0802@ct+1)& (0+255),b
  3757  000FC6  0EA4               	movlw	low _epoch_now
  3758  000FC8  0100               	movlb	0	; () banked
  3759  000FCA  6FDE               	movwf	display_time_0802@ep& (0+255),b
  3760  000FCC  0E00               	movlw	high _epoch_now
  3761  000FCE  0100               	movlb	0	; () banked
  3762  000FD0  6FDF               	movwf	(display_time_0802@ep+1)& (0+255),b
  3763  000FD2  ECA1  F010         	call	_display_time_0802	;wreg free
  3764                           
  3765                           ;tasks.h: 164: break;
  3766  000FD6  0012               	return	
  3767  000FD8                     l5423:
  3768                           
  3769                           ;tasks.h: 166: display_port();
  3770  000FD8  ECA7  F013         	call	_display_port	;wreg free
  3771                           
  3772                           ;tasks.h: 167: I2C_LCD_SetCursor(0, 1);
  3773  000FDC  0E01               	movlw	1
  3774  000FDE  0100               	movlb	0	; () banked
  3775  000FE0  6FB4               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3776  000FE2  0E00               	movlw	0
  3777  000FE4  EC5E  F01C         	call	_I2C_LCD_SetCursor
  3778                           
  3779                           ;tasks.h: 168: I2C_LCD_Putc((I[print_port] % 10000) / 1000 + '0');
  3780  000FE8  0E27               	movlw	39
  3781  000FEA  0100               	movlb	0	; () banked
  3782  000FEC  6FB3               	movwf	(___lwmod@divisor+1)& (0+255),b
  3783  000FEE  0E10               	movlw	16
  3784  000FF0  6FB2               	movwf	___lwmod@divisor& (0+255),b
  3785  000FF2  5030               	movf	_print_port,w,c
  3786  000FF4  0D02               	mullw	2
  3787  000FF6  0E22               	movlw	low _I
  3788  000FF8  24F3               	addwf	prodl,w,c
  3789  000FFA  6ED9               	movwf	fsr2l,c
  3790  000FFC  0E00               	movlw	high _I
  3791  000FFE  20F4               	addwfc	prodh,w,c
  3792  001000  6EDA               	movwf	fsr2h,c
  3793  001002  CFDE F0B0          	movff	postinc2,___lwmod@dividend
  3794  001006  CFDD F0B1          	movff	postdec2,___lwmod@dividend+1
  3795  00100A  EC88  F019         	call	___lwmod	;wreg free
  3796  00100E  C0B0  F0B4         	movff	?___lwmod,___lwdiv@dividend
  3797  001012  C0B1  F0B5         	movff	?___lwmod+1,___lwdiv@dividend+1
  3798  001016  0E03               	movlw	3
  3799  001018  0100               	movlb	0	; () banked
  3800  00101A  6FB7               	movwf	(___lwdiv@divisor+1)& (0+255),b
  3801  00101C  0EE8               	movlw	232
  3802  00101E  6FB6               	movwf	___lwdiv@divisor& (0+255),b
  3803  001020  ECE2  F018         	call	___lwdiv	;wreg free
  3804  001024  0100               	movlb	0	; () banked
  3805  001026  51B4               	movf	?___lwdiv& (0+255),w,b
  3806  001028  0F30               	addlw	48
  3807  00102A  EC94  F01B         	call	_I2C_LCD_Putc
  3808                           
  3809                           ;tasks.h: 169: I2C_LCD_Putc('.');
  3810  00102E  0E2E               	movlw	46
  3811  001030  EC94  F01B         	call	_I2C_LCD_Putc
  3812                           
  3813                           ;tasks.h: 170: I2C_LCD_Putc((I[print_port] % 1000) / 100 + '0');
  3814  001034  0E03               	movlw	3
  3815  001036  0100               	movlb	0	; () banked
  3816  001038  6FB3               	movwf	(___lwmod@divisor+1)& (0+255),b
  3817  00103A  0EE8               	movlw	232
  3818  00103C  6FB2               	movwf	___lwmod@divisor& (0+255),b
  3819  00103E  5030               	movf	_print_port,w,c
  3820  001040  0D02               	mullw	2
  3821  001042  0E22               	movlw	low _I
  3822  001044  24F3               	addwf	prodl,w,c
  3823  001046  6ED9               	movwf	fsr2l,c
  3824  001048  0E00               	movlw	high _I
  3825  00104A  20F4               	addwfc	prodh,w,c
  3826  00104C  6EDA               	movwf	fsr2h,c
  3827  00104E  CFDE F0B0          	movff	postinc2,___lwmod@dividend
  3828  001052  CFDD F0B1          	movff	postdec2,___lwmod@dividend+1
  3829  001056  EC88  F019         	call	___lwmod	;wreg free
  3830  00105A  C0B0  F0B4         	movff	?___lwmod,___lwdiv@dividend
  3831  00105E  C0B1  F0B5         	movff	?___lwmod+1,___lwdiv@dividend+1
  3832  001062  0E00               	movlw	0
  3833  001064  0100               	movlb	0	; () banked
  3834  001066  6FB7               	movwf	(___lwdiv@divisor+1)& (0+255),b
  3835  001068  0E64               	movlw	100
  3836  00106A  6FB6               	movwf	___lwdiv@divisor& (0+255),b
  3837  00106C  ECE2  F018         	call	___lwdiv	;wreg free
  3838  001070  0100               	movlb	0	; () banked
  3839  001072  51B4               	movf	?___lwdiv& (0+255),w,b
  3840  001074  0F30               	addlw	48
  3841  001076  EC94  F01B         	call	_I2C_LCD_Putc
  3842                           
  3843                           ;tasks.h: 171: I2C_LCD_Putc((I[print_port] % 100) / 10 + '0');
  3844  00107A  0E00               	movlw	0
  3845  00107C  0100               	movlb	0	; () banked
  3846  00107E  6FB3               	movwf	(___lwmod@divisor+1)& (0+255),b
  3847  001080  0E64               	movlw	100
  3848  001082  6FB2               	movwf	___lwmod@divisor& (0+255),b
  3849  001084  5030               	movf	_print_port,w,c
  3850  001086  0D02               	mullw	2
  3851  001088  0E22               	movlw	low _I
  3852  00108A  24F3               	addwf	prodl,w,c
  3853  00108C  6ED9               	movwf	fsr2l,c
  3854  00108E  0E00               	movlw	high _I
  3855  001090  20F4               	addwfc	prodh,w,c
  3856  001092  6EDA               	movwf	fsr2h,c
  3857  001094  CFDE F0B0          	movff	postinc2,___lwmod@dividend
  3858  001098  CFDD F0B1          	movff	postdec2,___lwmod@dividend+1
  3859  00109C  EC88  F019         	call	___lwmod	;wreg free
  3860  0010A0  C0B0  F0B4         	movff	?___lwmod,___lwdiv@dividend
  3861  0010A4  C0B1  F0B5         	movff	?___lwmod+1,___lwdiv@dividend+1
  3862  0010A8  0E00               	movlw	0
  3863  0010AA  0100               	movlb	0	; () banked
  3864  0010AC  6FB7               	movwf	(___lwdiv@divisor+1)& (0+255),b
  3865  0010AE  0E0A               	movlw	10
  3866  0010B0  6FB6               	movwf	___lwdiv@divisor& (0+255),b
  3867  0010B2  ECE2  F018         	call	___lwdiv	;wreg free
  3868  0010B6  0100               	movlb	0	; () banked
  3869  0010B8  51B4               	movf	?___lwdiv& (0+255),w,b
  3870  0010BA  0F30               	addlw	48
  3871  0010BC  EC94  F01B         	call	_I2C_LCD_Putc
  3872                           
  3873                           ;tasks.h: 172: I2C_LCD_Putc((I[print_port] % 10) / 1 + '0');
  3874  0010C0  5030               	movf	_print_port,w,c
  3875  0010C2  0D02               	mullw	2
  3876  0010C4  0E22               	movlw	low _I
  3877  0010C6  24F3               	addwf	prodl,w,c
  3878  0010C8  6ED9               	movwf	fsr2l,c
  3879  0010CA  0E00               	movlw	high _I
  3880  0010CC  20F4               	addwfc	prodh,w,c
  3881  0010CE  6EDA               	movwf	fsr2h,c
  3882  0010D0  CFDE F0B0          	movff	postinc2,___lwmod@dividend
  3883  0010D4  CFDD F0B1          	movff	postdec2,___lwmod@dividend+1
  3884  0010D8  0E00               	movlw	0
  3885  0010DA  0100               	movlb	0	; () banked
  3886  0010DC  6FB3               	movwf	(___lwmod@divisor+1)& (0+255),b
  3887  0010DE  0E0A               	movlw	10
  3888  0010E0  6FB2               	movwf	___lwmod@divisor& (0+255),b
  3889  0010E2  EC88  F019         	call	___lwmod	;wreg free
  3890  0010E6  0100               	movlb	0	; () banked
  3891  0010E8  51B0               	movf	?___lwmod& (0+255),w,b
  3892  0010EA  0F30               	addlw	48
  3893  0010EC  EC94  F01B         	call	_I2C_LCD_Putc
  3894                           
  3895                           ;tasks.h: 173: I2C_LCD_Putc('A');
  3896  0010F0  0E41               	movlw	65
  3897  0010F2  EC94  F01B         	call	_I2C_LCD_Putc
  3898                           
  3899                           ;tasks.h: 174: break;
  3900  0010F6  0012               	return	
  3901  0010F8                     l5439:
  3902                           
  3903                           ;tasks.h: 176: display_port();
  3904  0010F8  ECA7  F013         	call	_display_port	;wreg free
  3905                           
  3906                           ;tasks.h: 177: I2C_LCD_SetCursor(0, 1);
  3907  0010FC  0E01               	movlw	1
  3908  0010FE  0100               	movlb	0	; () banked
  3909  001100  6FB4               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3910  001102  0E00               	movlw	0
  3911  001104  EC5E  F01C         	call	_I2C_LCD_SetCursor
  3912                           
  3913                           ;tasks.h: 178: uint8_t str[10];
  3914                           ;tasks.h: 179: my_utoa(str, S[print_port], 5);
  3915  001108  0EE1               	movlw	low display_LCD@str
  3916  00110A  0100               	movlb	0	; () banked
  3917  00110C  6FBB               	movwf	my_utoa@str& (0+255),b
  3918  00110E  0E00               	movlw	high display_LCD@str
  3919  001110  0100               	movlb	0	; () banked
  3920  001112  6FBC               	movwf	(my_utoa@str+1)& (0+255),b
  3921  001114  5030               	movf	_print_port,w,c
  3922  001116  0D04               	mullw	4
  3923  001118  0E60               	movlw	low _S
  3924  00111A  24F3               	addwf	prodl,w,c
  3925  00111C  6ED9               	movwf	fsr2l,c
  3926  00111E  0E00               	movlw	high _S
  3927  001120  20F4               	addwfc	prodh,w,c
  3928  001122  6EDA               	movwf	fsr2h,c
  3929  001124  CFDE F0BD          	movff	postinc2,my_utoa@value
  3930  001128  CFDD F0BE          	movff	postdec2,my_utoa@value+1
  3931  00112C  0E05               	movlw	5
  3932  00112E  0100               	movlb	0	; () banked
  3933  001130  6FBF               	movwf	my_utoa@digits& (0+255),b
  3934  001132  ECDF  F017         	call	_my_utoa	;wreg free
  3935                           
  3936                           ;tasks.h: 180: I2C_LCD_Puts(str);
  3937  001136  0EE1               	movlw	low display_LCD@str
  3938  001138  0100               	movlb	0	; () banked
  3939  00113A  6FB2               	movwf	I2C_LCD_Puts@s& (0+255),b
  3940  00113C  0E00               	movlw	high display_LCD@str
  3941  00113E  0100               	movlb	0	; () banked
  3942  001140  6FB3               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3943  001142  EC98  F017         	call	_I2C_LCD_Puts	;wreg free
  3944                           
  3945                           ;tasks.h: 186: I2C_LCD_Puts("mAh");
  3946  001146  0E71               	movlw	low STR_10
  3947  001148  0100               	movlb	0	; () banked
  3948  00114A  6FB2               	movwf	I2C_LCD_Puts@s& (0+255),b
  3949  00114C  0E0F               	movlw	high STR_10
  3950  00114E  0100               	movlb	0	; () banked
  3951  001150  6FB3               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3952  001152  EC98  F017         	call	_I2C_LCD_Puts	;wreg free
  3953                           
  3954                           ;tasks.h: 187: break;
  3955  001156  0012               	return	
  3956  001158                     l5449:
  3957                           
  3958                           ;tasks.h: 189: display_port();
  3959  001158  ECA7  F013         	call	_display_port	;wreg free
  3960                           
  3961                           ;tasks.h: 190: I2C_LCD_SetCursor(0, 1);
  3962  00115C  0E01               	movlw	1
  3963  00115E  0100               	movlb	0	; () banked
  3964  001160  6FB4               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3965  001162  0E00               	movlw	0
  3966  001164  EC5E  F01C         	call	_I2C_LCD_SetCursor
  3967                           
  3968                           ;tasks.h: 191: I2C_LCD_Puts("Reset?");
  3969  001168  0E3F               	movlw	low STR_11
  3970  00116A  0100               	movlb	0	; () banked
  3971  00116C  6FB2               	movwf	I2C_LCD_Puts@s& (0+255),b
  3972  00116E  0E0F               	movlw	high STR_11
  3973  001170  0100               	movlb	0	; () banked
  3974  001172  6FB3               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3975  001174  EC98  F017         	call	_I2C_LCD_Puts	;wreg free
  3976                           
  3977                           ;tasks.h: 192: break;
  3978  001178  0012               	return	
  3979  00117A                     l5455:
  3980                           
  3981                           ;tasks.h: 194: display_port();
  3982  00117A  ECA7  F013         	call	_display_port	;wreg free
  3983                           
  3984                           ;tasks.h: 195: I2C_LCD_SetCursor(0, 1);
  3985  00117E  0E01               	movlw	1
  3986  001180  0100               	movlb	0	; () banked
  3987  001182  6FB4               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3988  001184  0E00               	movlw	0
  3989  001186  EC5E  F01C         	call	_I2C_LCD_SetCursor
  3990                           
  3991                           ;tasks.h: 196: I2C_LCD_Puts("Reseted");
  3992  00118A  0E2F               	movlw	low STR_12
  3993  00118C  0100               	movlb	0	; () banked
  3994  00118E  6FB2               	movwf	I2C_LCD_Puts@s& (0+255),b
  3995  001190  0E0F               	movlw	high STR_12
  3996  001192  0100               	movlb	0	; () banked
  3997  001194  6FB3               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3998  001196  EC98  F017         	call	_I2C_LCD_Puts	;wreg free
  3999                           
  4000                           ;tasks.h: 197: break;
  4001  00119A  0012               	return	
  4002  00119C                     l5461:
  4003                           
  4004                           ;tasks.h: 199: display_port();
  4005  00119C  ECA7  F013         	call	_display_port	;wreg free
  4006                           
  4007                           ;tasks.h: 200: I2C_LCD_SetCursor(0, 1);
  4008  0011A0  0E01               	movlw	1
  4009  0011A2  0100               	movlb	0	; () banked
  4010  0011A4  6FB4               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  4011  0011A6  0E00               	movlw	0
  4012  0011A8  EC5E  F01C         	call	_I2C_LCD_SetCursor
  4013                           
  4014                           ;tasks.h: 201: I2C_LCD_Puts("AlwaysON");
  4015  0011AC  0E1D               	movlw	low STR_13
  4016  0011AE  0100               	movlb	0	; () banked
  4017  0011B0  6FB2               	movwf	I2C_LCD_Puts@s& (0+255),b
  4018  0011B2  0E0F               	movlw	high STR_13
  4019  0011B4  0100               	movlb	0	; () banked
  4020  0011B6  6FB3               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  4021  0011B8  EC98  F017         	call	_I2C_LCD_Puts	;wreg free
  4022                           
  4023                           ;tasks.h: 202: break;
  4024  0011BC  0012               	return	
  4025  0011BE                     l5467:
  4026                           
  4027                           ;tasks.h: 204: display_port();
  4028  0011BE  ECA7  F013         	call	_display_port	;wreg free
  4029                           
  4030                           ;tasks.h: 205: I2C_LCD_SetCursor(0, 1);
  4031  0011C2  0E01               	movlw	1
  4032  0011C4  0100               	movlb	0	; () banked
  4033  0011C6  6FB4               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  4034  0011C8  0E00               	movlw	0
  4035  0011CA  EC5E  F01C         	call	_I2C_LCD_SetCursor
  4036                           
  4037                           ;tasks.h: 206: I2C_LCD_Puts("AutoStop");
  4038  0011CE  0E26               	movlw	low STR_14
  4039  0011D0  0100               	movlb	0	; () banked
  4040  0011D2  6FB2               	movwf	I2C_LCD_Puts@s& (0+255),b
  4041  0011D4  0E0F               	movlw	high STR_14
  4042  0011D6  0100               	movlb	0	; () banked
  4043  0011D8  6FB3               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  4044  0011DA  EC98  F017         	call	_I2C_LCD_Puts	;wreg free
  4045                           
  4046                           ;tasks.h: 208: }
  4047                           
  4048                           ;tasks.h: 207: break;
  4049  0011DE  0012               	return	
  4050  0011E0                     l5475:
  4051  0011E0  0100               	movlb	0	; () banked
  4052  0011E2  5192               	movf	_print_content& (0+255),w,b
  4053                           
  4054                           ; Switch size 1, requested type "space"
  4055                           ; Number of cases is 8, Range of values is 0 to 7
  4056                           ; switch strategies available:
  4057                           ; Name         Instructions Cycles
  4058                           ; simple_byte           25    13 (average)
  4059                           ;	Chosen strategy is simple_byte
  4060  0011E4  0A00               	xorlw	0	; case 0
  4061  0011E6  B4D8               	btfsc	status,2,c
  4062  0011E8  D6CB               	goto	l5415
  4063  0011EA  0A01               	xorlw	1	; case 1
  4064  0011EC  B4D8               	btfsc	status,2,c
  4065  0011EE  D6E5               	goto	l5421
  4066  0011F0  0A03               	xorlw	3	; case 2
  4067  0011F2  B4D8               	btfsc	status,2,c
  4068  0011F4  D6F1               	goto	l5423
  4069  0011F6  0A01               	xorlw	1	; case 3
  4070  0011F8  B4D8               	btfsc	status,2,c
  4071  0011FA  D77E               	goto	l5439
  4072  0011FC  0A07               	xorlw	7	; case 4
  4073  0011FE  B4D8               	btfsc	status,2,c
  4074  001200  D7AB               	goto	l5449
  4075  001202  0A01               	xorlw	1	; case 5
  4076  001204  B4D8               	btfsc	status,2,c
  4077  001206  D7B9               	goto	l5455
  4078  001208  0A03               	xorlw	3	; case 6
  4079  00120A  B4D8               	btfsc	status,2,c
  4080  00120C  D7C7               	goto	l5461
  4081  00120E  0A01               	xorlw	1	; case 7
  4082  001210  A4D8               	btfss	status,2,c
  4083  001212  0012               	return	
  4084  001214  D7D4               	goto	l5467
  4085  001216                     __end_of_display_LCD:
  4086                           	opt stack 0
  4087                           tblptru	equ	0xFF8
  4088                           tblptrh	equ	0xFF7
  4089                           tblptrl	equ	0xFF6
  4090                           tablat	equ	0xFF5
  4091                           prodh	equ	0xFF4
  4092                           prodl	equ	0xFF3
  4093                           intcon	equ	0xFF2
  4094                           intcon2	equ	0xFF1
  4095                           postinc0	equ	0xFEE
  4096                           wreg	equ	0xFE8
  4097                           indf2	equ	0xFDF
  4098                           postinc2	equ	0xFDE
  4099                           postdec2	equ	0xFDD
  4100                           fsr2h	equ	0xFDA
  4101                           fsr2l	equ	0xFD9
  4102                           status	equ	0xFD8
  4103                           
  4104 ;; *************** function _display_time_0802 *****************
  4105 ;; Defined at:
  4106 ;;		line 258 in file "../My_header\My_RTCC.h"
  4107 ;; Parameters:    Size  Location     Type
  4108 ;;  ct              2   44[BANK0 ] PTR struct .
  4109 ;;		 -> caltime_now(7), 
  4110 ;;  ep              2   46[BANK0 ] PTR unsigned long 
  4111 ;;		 -> epoch_now(4), 
  4112 ;; Auto vars:     Size  Location     Type
  4113 ;;		None
  4114 ;; Return value:  Size  Location     Type
  4115 ;;		None               void
  4116 ;; Registers used:
  4117 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4118 ;; Tracked objects:
  4119 ;;		On entry : 0/0
  4120 ;;		On exit  : 0/0
  4121 ;;		Unchanged: 0/0
  4122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4123 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4126 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4127 ;;Total ram usage:        5 bytes
  4128 ;; Hardware stack levels used:    1
  4129 ;; Hardware stack levels required when called:    8
  4130 ;; This function calls:
  4131 ;;		_I2C_LCD_Putc
  4132 ;;		_I2C_LCD_Puts
  4133 ;;		_I2C_LCD_SetCursor
  4134 ;;		_RTCC_from_RTCC
  4135 ;;		_display_dec
  4136 ;; This function is called by:
  4137 ;;		_display_LCD
  4138 ;; This function uses a non-reentrant model
  4139 ;;
  4140                           
  4141                           	psect	text19
  4142  002142                     __ptext19:
  4143                           	opt stack 0
  4144  002142                     _display_time_0802:
  4145                           	opt stack 21
  4146                           
  4147                           ;My_header\My_RTCC.h: 259: RTCC_from_RTCC(ct, ep);
  4148                           
  4149                           ;incstack = 0
  4150  002142  C0DC  F0D8         	movff	display_time_0802@ct,RTCC_from_RTCC@ct
  4151  002146  C0DD  F0D9         	movff	display_time_0802@ct+1,RTCC_from_RTCC@ct+1
  4152  00214A  C0DE  F0DA         	movff	display_time_0802@ep,RTCC_from_RTCC@ep
  4153  00214E  C0DF  F0DB         	movff	display_time_0802@ep+1,RTCC_from_RTCC@ep+1
  4154  002152  ECCF  F01C         	call	_RTCC_from_RTCC	;wreg free
  4155                           
  4156                           ;My_header\My_RTCC.h: 261: I2C_LCD_SetCursor(0, 0);
  4157  002156  0E00               	movlw	0
  4158  002158  0100               	movlb	0	; () banked
  4159  00215A  6FB4               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  4160  00215C  0E00               	movlw	0
  4161  00215E  EC5E  F01C         	call	_I2C_LCD_SetCursor
  4162                           
  4163                           ;My_header\My_RTCC.h: 262: display_dec(ct->YY, edit_flag.flag.YY);
  4164  002162  0E00               	movlw	0
  4165  002164  BB91               	btfsc	_edit_flag& (0+255),5,b
  4166  002166  0E01               	movlw	1
  4167  002168  0100               	movlb	0	; () banked
  4168  00216A  6FC3               	movwf	display_dec@edit& (0+255),b
  4169  00216C  0100               	movlb	0	; () banked
  4170  00216E  EE20 F006          	lfsr	2,6
  4171  002172  51DC               	movf	display_time_0802@ct& (0+255),w,b
  4172  002174  26D9               	addwf	fsr2l,f,c
  4173  002176  51DD               	movf	(display_time_0802@ct+1)& (0+255),w,b
  4174  002178  22DA               	addwfc	fsr2h,f,c
  4175  00217A  50DF               	movf	indf2,w,c
  4176  00217C  ECE4  F019         	call	_display_dec
  4177                           
  4178                           ;My_header\My_RTCC.h: 263: I2C_LCD_Putc('/');
  4179  002180  0E2F               	movlw	47
  4180  002182  EC94  F01B         	call	_I2C_LCD_Putc
  4181                           
  4182                           ;My_header\My_RTCC.h: 264: display_dec(ct->MM, edit_flag.flag.MM);
  4183  002186  0E00               	movlw	0
  4184  002188  B991               	btfsc	_edit_flag& (0+255),4,b
  4185  00218A  0E01               	movlw	1
  4186  00218C  0100               	movlb	0	; () banked
  4187  00218E  6FC3               	movwf	display_dec@edit& (0+255),b
  4188  002190  0100               	movlb	0	; () banked
  4189  002192  EE20 F005          	lfsr	2,5
  4190  002196  51DC               	movf	display_time_0802@ct& (0+255),w,b
  4191  002198  26D9               	addwf	fsr2l,f,c
  4192  00219A  51DD               	movf	(display_time_0802@ct+1)& (0+255),w,b
  4193  00219C  22DA               	addwfc	fsr2h,f,c
  4194  00219E  50DF               	movf	indf2,w,c
  4195  0021A0  ECE4  F019         	call	_display_dec
  4196                           
  4197                           ;My_header\My_RTCC.h: 265: I2C_LCD_Putc('/');
  4198  0021A4  0E2F               	movlw	47
  4199  0021A6  EC94  F01B         	call	_I2C_LCD_Putc
  4200                           
  4201                           ;My_header\My_RTCC.h: 266: display_dec(ct->DD, edit_flag.flag.DD);
  4202  0021AA  0E00               	movlw	0
  4203  0021AC  B791               	btfsc	_edit_flag& (0+255),3,b
  4204  0021AE  0E01               	movlw	1
  4205  0021B0  0100               	movlb	0	; () banked
  4206  0021B2  6FC3               	movwf	display_dec@edit& (0+255),b
  4207  0021B4  0100               	movlb	0	; () banked
  4208  0021B6  EE20 F004          	lfsr	2,4
  4209  0021BA  51DC               	movf	display_time_0802@ct& (0+255),w,b
  4210  0021BC  26D9               	addwf	fsr2l,f,c
  4211  0021BE  51DD               	movf	(display_time_0802@ct+1)& (0+255),w,b
  4212  0021C0  22DA               	addwfc	fsr2h,f,c
  4213  0021C2  50DF               	movf	indf2,w,c
  4214  0021C4  ECE4  F019         	call	_display_dec
  4215                           
  4216                           ;My_header\My_RTCC.h: 267: I2C_LCD_Putc('/');
  4217  0021C8  0E2F               	movlw	47
  4218  0021CA  EC94  F01B         	call	_I2C_LCD_Putc
  4219                           
  4220                           ;My_header\My_RTCC.h: 268: I2C_LCD_Puts(weekday_3char[ct->EE]);
  4221  0021CE  0100               	movlb	0	; () banked
  4222  0021D0  EE20 F003          	lfsr	2,3
  4223  0021D4  51DC               	movf	display_time_0802@ct& (0+255),w,b
  4224  0021D6  26D9               	addwf	fsr2l,f,c
  4225  0021D8  51DD               	movf	(display_time_0802@ct+1)& (0+255),w,b
  4226  0021DA  22DA               	addwfc	fsr2h,f,c
  4227  0021DC  50DF               	movf	indf2,w,c
  4228  0021DE  0100               	movlb	0	; () banked
  4229  0021E0  6FE0               	movwf	??_display_time_0802& (0+255),b
  4230  0021E2  0100               	movlb	0	; () banked
  4231  0021E4  51E0               	movf	??_display_time_0802& (0+255),w,b
  4232  0021E6  0D04               	mullw	4
  4233  0021E8  0E01               	movlw	low _weekday_3char
  4234  0021EA  24F3               	addwf	prodl,w,c
  4235  0021EC  0100               	movlb	0	; () banked
  4236  0021EE  6FB2               	movwf	I2C_LCD_Puts@s& (0+255),b
  4237  0021F0  0E0F               	movlw	high _weekday_3char
  4238  0021F2  20F4               	addwfc	prodh,w,c
  4239  0021F4  0100               	movlb	0	; () banked
  4240  0021F6  6FB3               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  4241  0021F8  EC98  F017         	call	_I2C_LCD_Puts	;wreg free
  4242                           
  4243                           ;My_header\My_RTCC.h: 269: I2C_LCD_SetCursor(0, 1);
  4244  0021FC  0E01               	movlw	1
  4245  0021FE  0100               	movlb	0	; () banked
  4246  002200  6FB4               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  4247  002202  0E00               	movlw	0
  4248  002204  EC5E  F01C         	call	_I2C_LCD_SetCursor
  4249                           
  4250                           ;My_header\My_RTCC.h: 270: display_dec(ct->hh, edit_flag.flag.hh);
  4251  002208  0E00               	movlw	0
  4252  00220A  B591               	btfsc	_edit_flag& (0+255),2,b
  4253  00220C  0E01               	movlw	1
  4254  00220E  0100               	movlb	0	; () banked
  4255  002210  6FC3               	movwf	display_dec@edit& (0+255),b
  4256  002212  0100               	movlb	0	; () banked
  4257  002214  EE20 F002          	lfsr	2,2
  4258  002218  51DC               	movf	display_time_0802@ct& (0+255),w,b
  4259  00221A  26D9               	addwf	fsr2l,f,c
  4260  00221C  51DD               	movf	(display_time_0802@ct+1)& (0+255),w,b
  4261  00221E  22DA               	addwfc	fsr2h,f,c
  4262  002220  50DF               	movf	indf2,w,c
  4263  002222  ECE4  F019         	call	_display_dec
  4264                           
  4265                           ;My_header\My_RTCC.h: 271: if (colon) I2C_LCD_Putc(':');
  4266  002226  0100               	movlb	0	; () banked
  4267  002228  518E               	movf	_colon& (0+255),w,b
  4268  00222A  B4D8               	btfsc	status,2,c
  4269  00222C  D004               	goto	l5161
  4270                           
  4271                           ; BSR set to: 0
  4272  00222E  0E3A               	movlw	58
  4273  002230  EC94  F01B         	call	_I2C_LCD_Putc
  4274  002234  D003               	goto	l5163
  4275  002236                     l5161:
  4276                           
  4277                           ;My_header\My_RTCC.h: 272: else I2C_LCD_Putc(' ');
  4278  002236  0E20               	movlw	32
  4279  002238  EC94  F01B         	call	_I2C_LCD_Putc
  4280  00223C                     l5163:
  4281                           
  4282                           ;My_header\My_RTCC.h: 273: display_dec(ct->mm, edit_flag.flag.mm);
  4283  00223C  0E00               	movlw	0
  4284  00223E  B391               	btfsc	_edit_flag& (0+255),1,b
  4285  002240  0E01               	movlw	1
  4286  002242  0100               	movlb	0	; () banked
  4287  002244  6FC3               	movwf	display_dec@edit& (0+255),b
  4288  002246  0100               	movlb	0	; () banked
  4289  002248  EE20 F001          	lfsr	2,1
  4290  00224C  51DC               	movf	display_time_0802@ct& (0+255),w,b
  4291  00224E  26D9               	addwf	fsr2l,f,c
  4292  002250  51DD               	movf	(display_time_0802@ct+1)& (0+255),w,b
  4293  002252  22DA               	addwfc	fsr2h,f,c
  4294  002254  50DF               	movf	indf2,w,c
  4295  002256  ECE4  F019         	call	_display_dec
  4296                           
  4297                           ;My_header\My_RTCC.h: 274: I2C_LCD_Putc('-');
  4298  00225A  0E2D               	movlw	45
  4299  00225C  EC94  F01B         	call	_I2C_LCD_Putc
  4300                           
  4301                           ;My_header\My_RTCC.h: 275: display_dec(ct->ss, edit_flag.flag.ss);
  4302  002260  0E00               	movlw	0
  4303  002262  B191               	btfsc	_edit_flag& (0+255),0,b
  4304  002264  0E01               	movlw	1
  4305  002266  0100               	movlb	0	; () banked
  4306  002268  6FC3               	movwf	display_dec@edit& (0+255),b
  4307  00226A  C0DC  FFD9         	movff	display_time_0802@ct,fsr2l
  4308  00226E  C0DD  FFDA         	movff	display_time_0802@ct+1,fsr2h
  4309  002272  50DF               	movf	indf2,w,c
  4310  002274  ECE4  F019         	call	_display_dec
  4311  002278  0012               	return		;funcret
  4312  00227A                     __end_of_display_time_0802:
  4313                           	opt stack 0
  4314                           tblptru	equ	0xFF8
  4315                           tblptrh	equ	0xFF7
  4316                           tblptrl	equ	0xFF6
  4317                           tablat	equ	0xFF5
  4318                           prodh	equ	0xFF4
  4319                           prodl	equ	0xFF3
  4320                           intcon	equ	0xFF2
  4321                           intcon2	equ	0xFF1
  4322                           postinc0	equ	0xFEE
  4323                           wreg	equ	0xFE8
  4324                           indf2	equ	0xFDF
  4325                           postinc2	equ	0xFDE
  4326                           postdec2	equ	0xFDD
  4327                           fsr2h	equ	0xFDA
  4328                           fsr2l	equ	0xFD9
  4329                           status	equ	0xFD8
  4330                           
  4331 ;; *************** function _display_dec *****************
  4332 ;; Defined at:
  4333 ;;		line 251 in file "../My_header\My_RTCC.h"
  4334 ;; Parameters:    Size  Location     Type
  4335 ;;  dec             1    wreg     unsigned char 
  4336 ;;  edit            1   19[BANK0 ] unsigned char 
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;  dec             1   30[BANK0 ] unsigned char 
  4339 ;;  str            10   20[BANK0 ] unsigned char [10]
  4340 ;; Return value:  Size  Location     Type
  4341 ;;		None               void
  4342 ;; Registers used:
  4343 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4349 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4350 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4352 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4353 ;;Total ram usage:       12 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    7
  4356 ;; This function calls:
  4357 ;;		_I2C_LCD_Puts
  4358 ;;		_my_utoa
  4359 ;; This function is called by:
  4360 ;;		_display_time_0802
  4361 ;;		_display_time_1602
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           	psect	text20
  4366  0033C8                     __ptext20:
  4367                           	opt stack 0
  4368  0033C8                     _display_dec:
  4369                           	opt stack 21
  4370                           
  4371                           ;incstack = 0
  4372                           ;display_dec@dec stored from wreg
  4373  0033C8  0100               	movlb	0	; () banked
  4374  0033CA  6FCE               	movwf	display_dec@dec& (0+255),b
  4375                           
  4376                           ;My_header\My_RTCC.h: 252: char str[10];
  4377                           ;My_header\My_RTCC.h: 253: my_utoa(str, dec, 2);
  4378  0033CC  0EC4               	movlw	low display_dec@str
  4379  0033CE  0100               	movlb	0	; () banked
  4380  0033D0  6FBB               	movwf	my_utoa@str& (0+255),b
  4381  0033D2  0E00               	movlw	high display_dec@str
  4382  0033D4  0100               	movlb	0	; () banked
  4383  0033D6  6FBC               	movwf	(my_utoa@str+1)& (0+255),b
  4384  0033D8  C0CE  F0BD         	movff	display_dec@dec,my_utoa@value
  4385  0033DC  0100               	movlb	0	; () banked
  4386  0033DE  6BBE               	clrf	(my_utoa@value+1)& (0+255),b
  4387  0033E0  0E02               	movlw	2
  4388  0033E2  0100               	movlb	0	; () banked
  4389  0033E4  6FBF               	movwf	my_utoa@digits& (0+255),b
  4390  0033E6  ECDF  F017         	call	_my_utoa	;wreg free
  4391                           
  4392                           ;My_header\My_RTCC.h: 254: if (edit && halfsec)I2C_LCD_Puts("  ");
  4393  0033EA  0100               	movlb	0	; () banked
  4394  0033EC  51C3               	movf	display_dec@edit& (0+255),w,b
  4395  0033EE  0100               	movlb	0	; () banked
  4396  0033F0  B4D8               	btfsc	status,2,c
  4397  0033F2  D00C               	goto	l5093
  4398                           
  4399                           ; BSR set to: 0
  4400  0033F4  502F               	movf	_halfsec,w,c
  4401  0033F6  B4D8               	btfsc	status,2,c
  4402  0033F8  D009               	goto	l5093
  4403                           
  4404                           ; BSR set to: 0
  4405  0033FA  0E75               	movlw	low STR_1
  4406  0033FC  0100               	movlb	0	; () banked
  4407  0033FE  6FB2               	movwf	I2C_LCD_Puts@s& (0+255),b
  4408  003400  0E0F               	movlw	high STR_1
  4409  003402  0100               	movlb	0	; () banked
  4410  003404  6FB3               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  4411  003406  EC98  F017         	call	_I2C_LCD_Puts	;wreg free
  4412  00340A  0012               	return	
  4413  00340C                     l5093:
  4414                           
  4415                           ;My_header\My_RTCC.h: 255: else I2C_LCD_Puts(str);
  4416  00340C  0EC4               	movlw	low display_dec@str
  4417  00340E  0100               	movlb	0	; () banked
  4418  003410  6FB2               	movwf	I2C_LCD_Puts@s& (0+255),b
  4419  003412  0E00               	movlw	high display_dec@str
  4420  003414  0100               	movlb	0	; () banked
  4421  003416  6FB3               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  4422  003418  EC98  F017         	call	_I2C_LCD_Puts	;wreg free
  4423  00341C  0012               	return	
  4424  00341E                     __end_of_display_dec:
  4425                           	opt stack 0
  4426                           tblptru	equ	0xFF8
  4427                           tblptrh	equ	0xFF7
  4428                           tblptrl	equ	0xFF6
  4429                           tablat	equ	0xFF5
  4430                           prodh	equ	0xFF4
  4431                           prodl	equ	0xFF3
  4432                           intcon	equ	0xFF2
  4433                           intcon2	equ	0xFF1
  4434                           postinc0	equ	0xFEE
  4435                           wreg	equ	0xFE8
  4436                           indf2	equ	0xFDF
  4437                           postinc2	equ	0xFDE
  4438                           postdec2	equ	0xFDD
  4439                           fsr2h	equ	0xFDA
  4440                           fsr2l	equ	0xFD9
  4441                           status	equ	0xFD8
  4442                           
  4443 ;; *************** function _my_utoa *****************
  4444 ;; Defined at:
  4445 ;;		line 11 in file "../My_header\My_stdlib.h"
  4446 ;; Parameters:    Size  Location     Type
  4447 ;;  str             2   11[BANK0 ] PTR unsigned char 
  4448 ;;		 -> display_LCD@str(10), display_dec@str(10), 
  4449 ;;  value           2   13[BANK0 ] unsigned int 
  4450 ;;  digits          1   15[BANK0 ] unsigned char 
  4451 ;; Auto vars:     Size  Location     Type
  4452 ;;  v               2   17[BANK0 ] unsigned int 
  4453 ;;  d               1   16[BANK0 ] unsigned char 
  4454 ;; Return value:  Size  Location     Type
  4455 ;;		None               void
  4456 ;; Registers used:
  4457 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4463 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4464 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4466 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4467 ;;Total ram usage:        8 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; Hardware stack levels required when called:    5
  4470 ;; This function calls:
  4471 ;;		___lwdiv
  4472 ;;		___lwmod
  4473 ;; This function is called by:
  4474 ;;		_display_dec
  4475 ;;		_display_LCD
  4476 ;; This function uses a non-reentrant model
  4477 ;;
  4478                           
  4479                           	psect	text21
  4480  002FBE                     __ptext21:
  4481                           	opt stack 0
  4482  002FBE                     _my_utoa:
  4483                           	opt stack 24
  4484                           
  4485                           ;My_header\My_stdlib.h: 12: uint16_t v;
  4486                           ;My_header\My_stdlib.h: 13: uint8_t d;
  4487                           ;My_header\My_stdlib.h: 14: while (digits--) {
  4488                           
  4489                           ;incstack = 0
  4490  002FBE  D036               	goto	l5051
  4491  002FC0                     l447:
  4492                           
  4493                           ; BSR set to: 0
  4494                           ;My_header\My_stdlib.h: 15: v = value;
  4495  002FC0  C0BD  F0C1         	movff	my_utoa@value,my_utoa@v
  4496  002FC4  C0BE  F0C2         	movff	my_utoa@value+1,my_utoa@v+1
  4497                           
  4498                           ;My_header\My_stdlib.h: 16: d = digits;
  4499  002FC8  C0BF  F0C0         	movff	my_utoa@digits,my_utoa@d
  4500                           
  4501                           ;My_header\My_stdlib.h: 17: while (d--) {
  4502  002FCC  D00F               	goto	l5043
  4503  002FCE                     l5041:
  4504                           
  4505                           ; BSR set to: 0
  4506                           ;My_header\My_stdlib.h: 18: v /= 10;
  4507  002FCE  C0C1  F0B4         	movff	my_utoa@v,___lwdiv@dividend
  4508  002FD2  C0C2  F0B5         	movff	my_utoa@v+1,___lwdiv@dividend+1
  4509  002FD6  0E00               	movlw	0
  4510  002FD8  0100               	movlb	0	; () banked
  4511  002FDA  6FB7               	movwf	(___lwdiv@divisor+1)& (0+255),b
  4512  002FDC  0E0A               	movlw	10
  4513  002FDE  6FB6               	movwf	___lwdiv@divisor& (0+255),b
  4514  002FE0  ECE2  F018         	call	___lwdiv	;wreg free
  4515  002FE4  C0B4  F0C1         	movff	?___lwdiv,my_utoa@v
  4516  002FE8  C0B5  F0C2         	movff	?___lwdiv+1,my_utoa@v+1
  4517  002FEC                     l5043:
  4518  002FEC  0100               	movlb	0	; () banked
  4519  002FEE  07C0               	decf	my_utoa@d& (0+255),f,b
  4520  002FF0  0100               	movlb	0	; () banked
  4521  002FF2  29C0               	incf	my_utoa@d& (0+255),w,b
  4522  002FF4  A4D8               	btfss	status,2,c
  4523  002FF6  D7EB               	goto	l5041
  4524                           
  4525                           ; BSR set to: 0
  4526                           ;My_header\My_stdlib.h: 19: }
  4527                           ;My_header\My_stdlib.h: 20: v %= 10;
  4528                           
  4529                           ; BSR set to: 0
  4530  002FF8  C0C1  F0B0         	movff	my_utoa@v,___lwmod@dividend
  4531  002FFC  C0C2  F0B1         	movff	my_utoa@v+1,___lwmod@dividend+1
  4532  003000  0E00               	movlw	0
  4533  003002  0100               	movlb	0	; () banked
  4534  003004  6FB3               	movwf	(___lwmod@divisor+1)& (0+255),b
  4535  003006  0E0A               	movlw	10
  4536  003008  6FB2               	movwf	___lwmod@divisor& (0+255),b
  4537  00300A  EC88  F019         	call	___lwmod	;wreg free
  4538  00300E  C0B0  F0C1         	movff	?___lwmod,my_utoa@v
  4539  003012  C0B1  F0C2         	movff	?___lwmod+1,my_utoa@v+1
  4540                           
  4541                           ;My_header\My_stdlib.h: 21: *str++ = '0' + v;
  4542  003016  0100               	movlb	0	; () banked
  4543  003018  51C1               	movf	my_utoa@v& (0+255),w,b
  4544  00301A  0F30               	addlw	48
  4545  00301C  C0BB  FFD9         	movff	my_utoa@str,fsr2l
  4546  003020  C0BC  FFDA         	movff	my_utoa@str+1,fsr2h
  4547  003024  6EDF               	movwf	indf2,c
  4548                           
  4549                           ; BSR set to: 0
  4550  003026  0100               	movlb	0	; () banked
  4551  003028  4BBB               	infsnz	my_utoa@str& (0+255),f,b
  4552  00302A  2BBC               	incf	(my_utoa@str+1)& (0+255),f,b
  4553  00302C                     l5051:
  4554  00302C  0100               	movlb	0	; () banked
  4555  00302E  07BF               	decf	my_utoa@digits& (0+255),f,b
  4556  003030  0100               	movlb	0	; () banked
  4557  003032  29BF               	incf	my_utoa@digits& (0+255),w,b
  4558  003034  A4D8               	btfss	status,2,c
  4559  003036  D7C4               	goto	l447
  4560                           
  4561                           ; BSR set to: 0
  4562                           ;My_header\My_stdlib.h: 22: }
  4563                           ;My_header\My_stdlib.h: 23: *str = '\0';
  4564                           
  4565                           ; BSR set to: 0
  4566  003038  C0BB  FFD9         	movff	my_utoa@str,fsr2l
  4567  00303C  C0BC  FFDA         	movff	my_utoa@str+1,fsr2h
  4568  003040  0E00               	movlw	0
  4569  003042  6EDF               	movwf	indf2,c
  4570                           
  4571                           ; BSR set to: 0
  4572  003044  0012               	return		;funcret
  4573  003046                     __end_of_my_utoa:
  4574                           	opt stack 0
  4575                           tblptru	equ	0xFF8
  4576                           tblptrh	equ	0xFF7
  4577                           tblptrl	equ	0xFF6
  4578                           tablat	equ	0xFF5
  4579                           prodh	equ	0xFF4
  4580                           prodl	equ	0xFF3
  4581                           intcon	equ	0xFF2
  4582                           intcon2	equ	0xFF1
  4583                           postinc0	equ	0xFEE
  4584                           wreg	equ	0xFE8
  4585                           indf2	equ	0xFDF
  4586                           postinc2	equ	0xFDE
  4587                           postdec2	equ	0xFDD
  4588                           fsr2h	equ	0xFDA
  4589                           fsr2l	equ	0xFD9
  4590                           status	equ	0xFD8
  4591                           
  4592 ;; *************** function ___lwmod *****************
  4593 ;; Defined at:
  4594 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  4595 ;; Parameters:    Size  Location     Type
  4596 ;;  dividend        2    0[BANK0 ] unsigned int 
  4597 ;;  divisor         2    2[BANK0 ] unsigned int 
  4598 ;; Auto vars:     Size  Location     Type
  4599 ;;  counter         1   31[COMRAM] unsigned char 
  4600 ;; Return value:  Size  Location     Type
  4601 ;;                  2    0[BANK0 ] unsigned int 
  4602 ;; Registers used:
  4603 ;;		wreg, status,2, status,0
  4604 ;; Tracked objects:
  4605 ;;		On entry : 0/0
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4609 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4610 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4612 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4613 ;;Total ram usage:        5 bytes
  4614 ;; Hardware stack levels used:    1
  4615 ;; Hardware stack levels required when called:    4
  4616 ;; This function calls:
  4617 ;;		Nothing
  4618 ;; This function is called by:
  4619 ;;		_my_utoa
  4620 ;;		_display_LCD
  4621 ;;		_ringbuf_put_num
  4622 ;;		_tx_sendn
  4623 ;; This function uses a non-reentrant model
  4624 ;;
  4625                           
  4626                           	psect	text22
  4627  003310                     __ptext22:
  4628                           	opt stack 0
  4629  003310                     ___lwmod:
  4630                           	opt stack 24
  4631                           
  4632                           ; BSR set to: 0
  4633                           ;incstack = 0
  4634  003310  0100               	movlb	0	; () banked
  4635  003312  51B2               	movf	___lwmod@divisor& (0+255),w,b
  4636  003314  0100               	movlb	0	; () banked
  4637  003316  11B3               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4638  003318  B4D8               	btfsc	status,2,c
  4639  00331A  D023               	goto	l1154
  4640                           
  4641                           ; BSR set to: 0
  4642  00331C  0E01               	movlw	1
  4643  00331E  6E20               	movwf	___lwmod@counter,c
  4644  003320  D005               	goto	l4887
  4645  003322                     l4885:
  4646                           
  4647                           ; BSR set to: 0
  4648  003322  0100               	movlb	0	; () banked
  4649  003324  90D8               	bcf	status,0,c
  4650  003326  37B2               	rlcf	___lwmod@divisor& (0+255),f,b
  4651  003328  37B3               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4652  00332A  2A20               	incf	___lwmod@counter,f,c
  4653  00332C                     l4887:
  4654                           
  4655                           ; BSR set to: 0
  4656  00332C  0100               	movlb	0	; () banked
  4657  00332E  AFB3               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4658  003330  D7F8               	goto	l4885
  4659  003332                     l4889:
  4660                           
  4661                           ; BSR set to: 0
  4662  003332  0100               	movlb	0	; () banked
  4663  003334  51B2               	movf	___lwmod@divisor& (0+255),w,b
  4664  003336  0100               	movlb	0	; () banked
  4665  003338  5DB0               	subwf	___lwmod@dividend& (0+255),w,b
  4666  00333A  0100               	movlb	0	; () banked
  4667  00333C  51B3               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4668  00333E  0100               	movlb	0	; () banked
  4669  003340  59B1               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4670  003342  A0D8               	btfss	status,0,c
  4671  003344  D008               	goto	l4893
  4672                           
  4673                           ; BSR set to: 0
  4674  003346  0100               	movlb	0	; () banked
  4675  003348  51B2               	movf	___lwmod@divisor& (0+255),w,b
  4676  00334A  0100               	movlb	0	; () banked
  4677  00334C  5FB0               	subwf	___lwmod@dividend& (0+255),f,b
  4678  00334E  0100               	movlb	0	; () banked
  4679  003350  51B3               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4680  003352  0100               	movlb	0	; () banked
  4681  003354  5BB1               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4682  003356                     l4893:
  4683                           
  4684                           ; BSR set to: 0
  4685  003356  0100               	movlb	0	; () banked
  4686  003358  90D8               	bcf	status,0,c
  4687  00335A  33B3               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4688  00335C  33B2               	rrcf	___lwmod@divisor& (0+255),f,b
  4689                           
  4690                           ; BSR set to: 0
  4691  00335E  2E20               	decfsz	___lwmod@counter,f,c
  4692  003360  D7E8               	goto	l4889
  4693  003362                     l1154:
  4694                           
  4695                           ; BSR set to: 0
  4696  003362  C0B0  F0B0         	movff	___lwmod@dividend,?___lwmod
  4697  003366  C0B1  F0B1         	movff	___lwmod@dividend+1,?___lwmod+1
  4698                           
  4699                           ; BSR set to: 0
  4700  00336A  0012               	return		;funcret
  4701  00336C                     __end_of___lwmod:
  4702                           	opt stack 0
  4703                           tblptru	equ	0xFF8
  4704                           tblptrh	equ	0xFF7
  4705                           tblptrl	equ	0xFF6
  4706                           tablat	equ	0xFF5
  4707                           prodh	equ	0xFF4
  4708                           prodl	equ	0xFF3
  4709                           intcon	equ	0xFF2
  4710                           intcon2	equ	0xFF1
  4711                           postinc0	equ	0xFEE
  4712                           wreg	equ	0xFE8
  4713                           indf2	equ	0xFDF
  4714                           postinc2	equ	0xFDE
  4715                           postdec2	equ	0xFDD
  4716                           fsr2h	equ	0xFDA
  4717                           fsr2l	equ	0xFD9
  4718                           status	equ	0xFD8
  4719                           
  4720 ;; *************** function ___lwdiv *****************
  4721 ;; Defined at:
  4722 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;  dividend        2    4[BANK0 ] unsigned int 
  4725 ;;  divisor         2    6[BANK0 ] unsigned int 
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;  quotient        2    9[BANK0 ] unsigned int 
  4728 ;;  counter         1    8[BANK0 ] unsigned char 
  4729 ;; Return value:  Size  Location     Type
  4730 ;;                  2    4[BANK0 ] unsigned int 
  4731 ;; Registers used:
  4732 ;;		wreg, status,2, status,0
  4733 ;; Tracked objects:
  4734 ;;		On entry : 0/0
  4735 ;;		On exit  : 0/0
  4736 ;;		Unchanged: 0/0
  4737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4738 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4739 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4741 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4742 ;;Total ram usage:        7 bytes
  4743 ;; Hardware stack levels used:    1
  4744 ;; Hardware stack levels required when called:    4
  4745 ;; This function calls:
  4746 ;;		Nothing
  4747 ;; This function is called by:
  4748 ;;		_my_utoa
  4749 ;;		_display_LCD
  4750 ;;		_ringbuf_put_num
  4751 ;;		_tx_sendn
  4752 ;; This function uses a non-reentrant model
  4753 ;;
  4754                           
  4755                           	psect	text23
  4756  0031C4                     __ptext23:
  4757                           	opt stack 0
  4758  0031C4                     ___lwdiv:
  4759                           	opt stack 24
  4760                           
  4761                           ; BSR set to: 0
  4762                           ;incstack = 0
  4763  0031C4  0E00               	movlw	0
  4764  0031C6  0100               	movlb	0	; () banked
  4765  0031C8  6FBA               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4766  0031CA  0E00               	movlw	0
  4767  0031CC  6FB9               	movwf	___lwdiv@quotient& (0+255),b
  4768                           
  4769                           ; BSR set to: 0
  4770  0031CE  0100               	movlb	0	; () banked
  4771  0031D0  51B6               	movf	___lwdiv@divisor& (0+255),w,b
  4772  0031D2  0100               	movlb	0	; () banked
  4773  0031D4  11B7               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4774  0031D6  B4D8               	btfsc	status,2,c
  4775  0031D8  D02C               	goto	l1144
  4776                           
  4777                           ; BSR set to: 0
  4778  0031DA  0E01               	movlw	1
  4779  0031DC  0100               	movlb	0	; () banked
  4780  0031DE  6FB8               	movwf	___lwdiv@counter& (0+255),b
  4781  0031E0  D006               	goto	l4867
  4782  0031E2                     l4865:
  4783                           
  4784                           ; BSR set to: 0
  4785  0031E2  0100               	movlb	0	; () banked
  4786  0031E4  90D8               	bcf	status,0,c
  4787  0031E6  37B6               	rlcf	___lwdiv@divisor& (0+255),f,b
  4788  0031E8  37B7               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4789  0031EA  0100               	movlb	0	; () banked
  4790  0031EC  2BB8               	incf	___lwdiv@counter& (0+255),f,b
  4791  0031EE                     l4867:
  4792                           
  4793                           ; BSR set to: 0
  4794  0031EE  0100               	movlb	0	; () banked
  4795  0031F0  AFB7               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4796  0031F2  D7F7               	goto	l4865
  4797  0031F4                     l4869:
  4798                           
  4799                           ; BSR set to: 0
  4800  0031F4  0100               	movlb	0	; () banked
  4801  0031F6  90D8               	bcf	status,0,c
  4802  0031F8  37B9               	rlcf	___lwdiv@quotient& (0+255),f,b
  4803  0031FA  37BA               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4804                           
  4805                           ; BSR set to: 0
  4806  0031FC  0100               	movlb	0	; () banked
  4807  0031FE  51B6               	movf	___lwdiv@divisor& (0+255),w,b
  4808  003200  0100               	movlb	0	; () banked
  4809  003202  5DB4               	subwf	___lwdiv@dividend& (0+255),w,b
  4810  003204  0100               	movlb	0	; () banked
  4811  003206  51B7               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4812  003208  0100               	movlb	0	; () banked
  4813  00320A  59B5               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4814  00320C  A0D8               	btfss	status,0,c
  4815  00320E  D00A               	goto	l4877
  4816                           
  4817                           ; BSR set to: 0
  4818  003210  0100               	movlb	0	; () banked
  4819  003212  51B6               	movf	___lwdiv@divisor& (0+255),w,b
  4820  003214  0100               	movlb	0	; () banked
  4821  003216  5FB4               	subwf	___lwdiv@dividend& (0+255),f,b
  4822  003218  0100               	movlb	0	; () banked
  4823  00321A  51B7               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4824  00321C  0100               	movlb	0	; () banked
  4825  00321E  5BB5               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4826                           
  4827                           ; BSR set to: 0
  4828  003220  0100               	movlb	0	; () banked
  4829  003222  81B9               	bsf	___lwdiv@quotient& (0+255),0,b
  4830  003224                     l4877:
  4831                           
  4832                           ; BSR set to: 0
  4833  003224  0100               	movlb	0	; () banked
  4834  003226  90D8               	bcf	status,0,c
  4835  003228  33B7               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4836  00322A  33B6               	rrcf	___lwdiv@divisor& (0+255),f,b
  4837                           
  4838                           ; BSR set to: 0
  4839  00322C  0100               	movlb	0	; () banked
  4840  00322E  2FB8               	decfsz	___lwdiv@counter& (0+255),f,b
  4841  003230  D7E1               	goto	l4869
  4842  003232                     l1144:
  4843                           
  4844                           ; BSR set to: 0
  4845  003232  C0B9  F0B4         	movff	___lwdiv@quotient,?___lwdiv
  4846  003236  C0BA  F0B5         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4847                           
  4848                           ; BSR set to: 0
  4849  00323A  0012               	return		;funcret
  4850  00323C                     __end_of___lwdiv:
  4851                           	opt stack 0
  4852                           tblptru	equ	0xFF8
  4853                           tblptrh	equ	0xFF7
  4854                           tblptrl	equ	0xFF6
  4855                           tablat	equ	0xFF5
  4856                           prodh	equ	0xFF4
  4857                           prodl	equ	0xFF3
  4858                           intcon	equ	0xFF2
  4859                           intcon2	equ	0xFF1
  4860                           postinc0	equ	0xFEE
  4861                           wreg	equ	0xFE8
  4862                           indf2	equ	0xFDF
  4863                           postinc2	equ	0xFDE
  4864                           postdec2	equ	0xFDD
  4865                           fsr2h	equ	0xFDA
  4866                           fsr2l	equ	0xFD9
  4867                           status	equ	0xFD8
  4868                           
  4869 ;; *************** function _I2C_LCD_Putc *****************
  4870 ;; Defined at:
  4871 ;;		line 118 in file "../My_header\My_I2C.h"
  4872 ;; Parameters:    Size  Location     Type
  4873 ;;  c               1    wreg     unsigned char 
  4874 ;; Auto vars:     Size  Location     Type
  4875 ;;  c               1    2[BANK0 ] unsigned char 
  4876 ;;  ans             1    3[BANK0 ] unsigned char 
  4877 ;; Return value:  Size  Location     Type
  4878 ;;		None               void
  4879 ;; Registers used:
  4880 ;;		wreg, status,2, status,0, cstack
  4881 ;; Tracked objects:
  4882 ;;		On entry : 0/0
  4883 ;;		On exit  : 0/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4887 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4889 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4890 ;;Total ram usage:        2 bytes
  4891 ;; Hardware stack levels used:    1
  4892 ;; Hardware stack levels required when called:    6
  4893 ;; This function calls:
  4894 ;;		_I2C_Send
  4895 ;;		_I2C_Start
  4896 ;;		_I2C_Stop
  4897 ;; This function is called by:
  4898 ;;		_display_time_0802
  4899 ;;		_display_LCD
  4900 ;;		_display_time_1602
  4901 ;; This function uses a non-reentrant model
  4902 ;;
  4903                           
  4904                           	psect	text24
  4905  003728                     __ptext24:
  4906                           	opt stack 0
  4907  003728                     _I2C_LCD_Putc:
  4908                           	opt stack 22
  4909                           
  4910                           ; BSR set to: 0
  4911                           ;incstack = 0
  4912                           ;I2C_LCD_Putc@c stored from wreg
  4913  003728  0100               	movlb	0	; () banked
  4914  00372A  6FB2               	movwf	I2C_LCD_Putc@c& (0+255),b
  4915                           
  4916                           ;My_header\My_I2C.h: 119: uint8_t ans;
  4917                           ;My_header\My_I2C.h: 121: ans = I2C_Start(0x3E, 0);
  4918  00372C  0E00               	movlw	0
  4919  00372E  0100               	movlb	0	; () banked
  4920  003730  6FB0               	movwf	I2C_Start@rw& (0+255),b
  4921  003732  0E3E               	movlw	62
  4922  003734  EC18  F01C         	call	_I2C_Start
  4923  003738  0100               	movlb	0	; () banked
  4924  00373A  6FB3               	movwf	I2C_LCD_Putc@ans& (0+255),b
  4925                           
  4926                           ; BSR set to: 0
  4927                           ;My_header\My_I2C.h: 122: if (ans == 0) {
  4928  00373C  0100               	movlb	0	; () banked
  4929  00373E  51B3               	movf	I2C_LCD_Putc@ans& (0+255),w,b
  4930  003740  0100               	movlb	0	; () banked
  4931  003742  A4D8               	btfss	status,2,c
  4932  003744  D007               	goto	l347
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;My_header\My_I2C.h: 124: I2C_Send(0b11000000);
  4936  003746  0EC0               	movlw	192
  4937  003748  EC0B  F01D         	call	_I2C_Send
  4938                           
  4939                           ;My_header\My_I2C.h: 125: I2C_Send(c);
  4940  00374C  0100               	movlb	0	; () banked
  4941  00374E  51B2               	movf	I2C_LCD_Putc@c& (0+255),w,b
  4942  003750  EC0B  F01D         	call	_I2C_Send
  4943  003754                     l347:
  4944                           
  4945                           ;My_header\My_I2C.h: 126: }
  4946                           ;My_header\My_I2C.h: 127: I2C_Stop();
  4947  003754  EC4D  F01D         	call	_I2C_Stop	;wreg free
  4948                           
  4949                           ;My_header\My_I2C.h: 128: _delay((unsigned long)((26)*(48000000/4000000.0)));
  4950  003758  0E68               	movlw	104
  4951  00375A                     u6437:
  4952  00375A  2EE8               	decfsz	wreg,f,c
  4953  00375C  D7FE               	goto	u6437
  4954  00375E  0012               	return		;funcret
  4955  003760                     __end_of_I2C_LCD_Putc:
  4956                           	opt stack 0
  4957                           tblptru	equ	0xFF8
  4958                           tblptrh	equ	0xFF7
  4959                           tblptrl	equ	0xFF6
  4960                           tablat	equ	0xFF5
  4961                           prodh	equ	0xFF4
  4962                           prodl	equ	0xFF3
  4963                           intcon	equ	0xFF2
  4964                           intcon2	equ	0xFF1
  4965                           postinc0	equ	0xFEE
  4966                           wreg	equ	0xFE8
  4967                           indf2	equ	0xFDF
  4968                           postinc2	equ	0xFDE
  4969                           postdec2	equ	0xFDD
  4970                           fsr2h	equ	0xFDA
  4971                           fsr2l	equ	0xFD9
  4972                           status	equ	0xFD8
  4973                           
  4974 ;; *************** function _display_port *****************
  4975 ;; Defined at:
  4976 ;;		line 135 in file "tasks.h"
  4977 ;; Parameters:    Size  Location     Type
  4978 ;;		None
  4979 ;; Auto vars:     Size  Location     Type
  4980 ;;		None
  4981 ;; Return value:  Size  Location     Type
  4982 ;;		None               void
  4983 ;; Registers used:
  4984 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4985 ;; Tracked objects:
  4986 ;;		On entry : 0/0
  4987 ;;		On exit  : 0/0
  4988 ;;		Unchanged: 0/0
  4989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4994 ;;Total ram usage:        0 bytes
  4995 ;; Hardware stack levels used:    1
  4996 ;; Hardware stack levels required when called:    8
  4997 ;; This function calls:
  4998 ;;		_I2C_LCD_Puts
  4999 ;;		_I2C_LCD_SetCursor
  5000 ;; This function is called by:
  5001 ;;		_display_LCD
  5002 ;; This function uses a non-reentrant model
  5003 ;;
  5004                           
  5005                           	psect	text25
  5006  00274E                     __ptext25:
  5007                           	opt stack 0
  5008  00274E                     _display_port:
  5009                           	opt stack 21
  5010                           
  5011                           ;tasks.h: 136: I2C_LCD_SetCursor(0, 0);
  5012                           
  5013                           ;incstack = 0
  5014  00274E  0E00               	movlw	0
  5015  002750  0100               	movlb	0	; () banked
  5016  002752  6FB4               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  5017  002754  0E00               	movlw	0
  5018  002756  EC5E  F01C         	call	_I2C_LCD_SetCursor
  5019                           
  5020                           ;tasks.h: 137: switch (print_port) {
  5021  00275A  D057               	goto	l5339
  5022  00275C                     l5319:
  5023                           
  5024                           ;tasks.h: 139: if (auto_cut_ON[print_port]) I2C_LCD_Puts("Right");
  5025  00275C  5030               	movf	_print_port,w,c
  5026  00275E  0D01               	mullw	1
  5027  002760  0E28               	movlw	low _auto_cut_ON
  5028  002762  24F3               	addwf	prodl,w,c
  5029  002764  6ED9               	movwf	fsr2l,c
  5030  002766  0E00               	movlw	high _auto_cut_ON
  5031  002768  20F4               	addwfc	prodh,w,c
  5032  00276A  6EDA               	movwf	fsr2h,c
  5033  00276C  50DF               	movf	indf2,w,c
  5034  00276E  B4D8               	btfsc	status,2,c
  5035  002770  D009               	goto	l5323
  5036  002772  0E61               	movlw	low STR_2
  5037  002774  0100               	movlb	0	; () banked
  5038  002776  6FB2               	movwf	I2C_LCD_Puts@s& (0+255),b
  5039  002778  0E0F               	movlw	high STR_2
  5040  00277A  0100               	movlb	0	; () banked
  5041  00277C  6FB3               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  5042  00277E  EC98  F017         	call	_I2C_LCD_Puts	;wreg free
  5043  002782  0012               	return	
  5044  002784                     l5323:
  5045                           
  5046                           ;tasks.h: 140: else I2C_LCD_Puts("RIGHT");
  5047  002784  0E5B               	movlw	low STR_3
  5048  002786  0100               	movlb	0	; () banked
  5049  002788  6FB2               	movwf	I2C_LCD_Puts@s& (0+255),b
  5050  00278A  0E0F               	movlw	high STR_3
  5051  00278C  0100               	movlb	0	; () banked
  5052  00278E  6FB3               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  5053  002790  EC98  F017         	call	_I2C_LCD_Puts	;wreg free
  5054                           
  5055                           ;tasks.h: 141: break;
  5056  002794  0012               	return	
  5057  002796                     l5325:
  5058                           
  5059                           ;tasks.h: 143: if (auto_cut_ON[print_port]) I2C_LCD_Puts("Center");
  5060  002796  5030               	movf	_print_port,w,c
  5061  002798  0D01               	mullw	1
  5062  00279A  0E28               	movlw	low _auto_cut_ON
  5063  00279C  24F3               	addwf	prodl,w,c
  5064  00279E  6ED9               	movwf	fsr2l,c
  5065  0027A0  0E00               	movlw	high _auto_cut_ON
  5066  0027A2  20F4               	addwfc	prodh,w,c
  5067  0027A4  6EDA               	movwf	fsr2h,c
  5068  0027A6  50DF               	movf	indf2,w,c
  5069  0027A8  B4D8               	btfsc	status,2,c
  5070  0027AA  D009               	goto	l5329
  5071  0027AC  0E54               	movlw	low STR_4
  5072  0027AE  0100               	movlb	0	; () banked
  5073  0027B0  6FB2               	movwf	I2C_LCD_Puts@s& (0+255),b
  5074  0027B2  0E0F               	movlw	high STR_4
  5075  0027B4  0100               	movlb	0	; () banked
  5076  0027B6  6FB3               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  5077  0027B8  EC98  F017         	call	_I2C_LCD_Puts	;wreg free
  5078  0027BC  0012               	return	
  5079  0027BE                     l5329:
  5080                           
  5081                           ;tasks.h: 144: else I2C_LCD_Puts("CENTER");
  5082  0027BE  0E46               	movlw	low STR_5
  5083  0027C0  0100               	movlb	0	; () banked
  5084  0027C2  6FB2               	movwf	I2C_LCD_Puts@s& (0+255),b
  5085  0027C4  0E0F               	movlw	high STR_5
  5086  0027C6  0100               	movlb	0	; () banked
  5087  0027C8  6FB3               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  5088  0027CA  EC98  F017         	call	_I2C_LCD_Puts	;wreg free
  5089                           
  5090                           ;tasks.h: 145: break;
  5091  0027CE  0012               	return	
  5092  0027D0                     l5331:
  5093                           
  5094                           ;tasks.h: 147: if (auto_cut_ON[print_port]) I2C_LCD_Puts("Left");
  5095  0027D0  5030               	movf	_print_port,w,c
  5096  0027D2  0D01               	mullw	1
  5097  0027D4  0E28               	movlw	low _auto_cut_ON
  5098  0027D6  24F3               	addwf	prodl,w,c
  5099  0027D8  6ED9               	movwf	fsr2l,c
  5100  0027DA  0E00               	movlw	high _auto_cut_ON
  5101  0027DC  20F4               	addwfc	prodh,w,c
  5102  0027DE  6EDA               	movwf	fsr2h,c
  5103  0027E0  50DF               	movf	indf2,w,c
  5104  0027E2  B4D8               	btfsc	status,2,c
  5105  0027E4  D009               	goto	l5335
  5106  0027E6  0E6C               	movlw	low STR_6
  5107  0027E8  0100               	movlb	0	; () banked
  5108  0027EA  6FB2               	movwf	I2C_LCD_Puts@s& (0+255),b
  5109  0027EC  0E0F               	movlw	high STR_6
  5110  0027EE  0100               	movlb	0	; () banked
  5111  0027F0  6FB3               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  5112  0027F2  EC98  F017         	call	_I2C_LCD_Puts	;wreg free
  5113  0027F6  0012               	return	
  5114  0027F8                     l5335:
  5115                           
  5116                           ;tasks.h: 148: else I2C_LCD_Puts("LEFT");
  5117  0027F8  0E67               	movlw	low STR_7
  5118  0027FA  0100               	movlb	0	; () banked
  5119  0027FC  6FB2               	movwf	I2C_LCD_Puts@s& (0+255),b
  5120  0027FE  0E0F               	movlw	high STR_7
  5121  002800  0100               	movlb	0	; () banked
  5122  002802  6FB3               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  5123  002804  EC98  F017         	call	_I2C_LCD_Puts	;wreg free
  5124                           
  5125                           ;tasks.h: 150: }
  5126                           
  5127                           ;tasks.h: 149: break;
  5128  002808  0012               	return	
  5129  00280A                     l5339:
  5130  00280A  5030               	movf	_print_port,w,c
  5131                           
  5132                           ; Switch size 1, requested type "space"
  5133                           ; Number of cases is 3, Range of values is 0 to 2
  5134                           ; switch strategies available:
  5135                           ; Name         Instructions Cycles
  5136                           ; simple_byte           10     6 (average)
  5137                           ;	Chosen strategy is simple_byte
  5138  00280C  0A00               	xorlw	0	; case 0
  5139  00280E  B4D8               	btfsc	status,2,c
  5140  002810  D7A5               	goto	l5319
  5141  002812  0A01               	xorlw	1	; case 1
  5142  002814  B4D8               	btfsc	status,2,c
  5143  002816  D7BF               	goto	l5325
  5144  002818  0A03               	xorlw	3	; case 2
  5145  00281A  A4D8               	btfss	status,2,c
  5146  00281C  0012               	return	
  5147  00281E  D7D8               	goto	l5331
  5148  002820                     __end_of_display_port:
  5149                           	opt stack 0
  5150                           tblptru	equ	0xFF8
  5151                           tblptrh	equ	0xFF7
  5152                           tblptrl	equ	0xFF6
  5153                           tablat	equ	0xFF5
  5154                           prodh	equ	0xFF4
  5155                           prodl	equ	0xFF3
  5156                           intcon	equ	0xFF2
  5157                           intcon2	equ	0xFF1
  5158                           postinc0	equ	0xFEE
  5159                           wreg	equ	0xFE8
  5160                           indf2	equ	0xFDF
  5161                           postinc2	equ	0xFDE
  5162                           postdec2	equ	0xFDD
  5163                           fsr2h	equ	0xFDA
  5164                           fsr2l	equ	0xFD9
  5165                           status	equ	0xFD8
  5166                           
  5167 ;; *************** function _I2C_LCD_SetCursor *****************
  5168 ;; Defined at:
  5169 ;;		line 112 in file "../My_header\My_I2C.h"
  5170 ;; Parameters:    Size  Location     Type
  5171 ;;  col             1    wreg     unsigned char 
  5172 ;;  row             1    4[BANK0 ] unsigned char 
  5173 ;; Auto vars:     Size  Location     Type
  5174 ;;  col             1    7[BANK0 ] unsigned char 
  5175 ;;  row_offsets     2    5[BANK0 ] unsigned char [2]
  5176 ;; Return value:  Size  Location     Type
  5177 ;;		None               void
  5178 ;; Registers used:
  5179 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5180 ;; Tracked objects:
  5181 ;;		On entry : 0/0
  5182 ;;		On exit  : 0/0
  5183 ;;		Unchanged: 0/0
  5184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5185 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5186 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5188 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5189 ;;Total ram usage:        4 bytes
  5190 ;; Hardware stack levels used:    1
  5191 ;; Hardware stack levels required when called:    7
  5192 ;; This function calls:
  5193 ;;		_I2C_LCD_Command
  5194 ;; This function is called by:
  5195 ;;		_display_time_0802
  5196 ;;		_display_port
  5197 ;;		_display_LCD
  5198 ;;		_main
  5199 ;;		_display_time_1602
  5200 ;; This function uses a non-reentrant model
  5201 ;;
  5202                           
  5203                           	psect	text26
  5204  0038BC                     __ptext26:
  5205                           	opt stack 0
  5206  0038BC                     _I2C_LCD_SetCursor:
  5207                           	opt stack 21
  5208                           
  5209                           ;incstack = 0
  5210                           ;I2C_LCD_SetCursor@col stored from wreg
  5211  0038BC  0100               	movlb	0	; () banked
  5212  0038BE  6FB7               	movwf	I2C_LCD_SetCursor@col& (0+255),b
  5213                           
  5214                           ;My_header\My_I2C.h: 113: uint8_t row_offsets[] = {0x00, 0x40};
  5215  0038C0  C03D  F0B5         	movff	I2C_LCD_SetCursor@F8672,I2C_LCD_SetCursor@row_offsets
  5216  0038C4  C03E  F0B6         	movff	I2C_LCD_SetCursor@F8672+1,I2C_LCD_SetCursor@row_offsets+1
  5217                           
  5218                           ;My_header\My_I2C.h: 115: I2C_LCD_Command(0x80 | (col + row_offsets[row]));
  5219  0038C8  0100               	movlb	0	; () banked
  5220  0038CA  51B4               	movf	I2C_LCD_SetCursor@row& (0+255),w,b
  5221  0038CC  0D01               	mullw	1
  5222  0038CE  0EB5               	movlw	low I2C_LCD_SetCursor@row_offsets
  5223  0038D0  24F3               	addwf	prodl,w,c
  5224  0038D2  6ED9               	movwf	fsr2l,c
  5225  0038D4  0E00               	movlw	high I2C_LCD_SetCursor@row_offsets
  5226  0038D6  20F4               	addwfc	prodh,w,c
  5227  0038D8  6EDA               	movwf	fsr2h,c
  5228  0038DA  50DF               	movf	indf2,w,c
  5229  0038DC  0100               	movlb	0	; () banked
  5230  0038DE  25B7               	addwf	I2C_LCD_SetCursor@col& (0+255),w,b
  5231  0038E0  0980               	iorlw	128
  5232  0038E2  ECB0  F01B         	call	_I2C_LCD_Command
  5233  0038E6  0012               	return		;funcret
  5234  0038E8                     __end_of_I2C_LCD_SetCursor:
  5235                           	opt stack 0
  5236                           tblptru	equ	0xFF8
  5237                           tblptrh	equ	0xFF7
  5238                           tblptrl	equ	0xFF6
  5239                           tablat	equ	0xFF5
  5240                           prodh	equ	0xFF4
  5241                           prodl	equ	0xFF3
  5242                           intcon	equ	0xFF2
  5243                           intcon2	equ	0xFF1
  5244                           postinc0	equ	0xFEE
  5245                           wreg	equ	0xFE8
  5246                           indf2	equ	0xFDF
  5247                           postinc2	equ	0xFDE
  5248                           postdec2	equ	0xFDD
  5249                           fsr2h	equ	0xFDA
  5250                           fsr2l	equ	0xFD9
  5251                           status	equ	0xFD8
  5252                           
  5253 ;; *************** function _I2C_LCD_Puts *****************
  5254 ;; Defined at:
  5255 ;;		line 131 in file "../My_header\My_I2C.h"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;  s               2    2[BANK0 ] PTR const unsigned char 
  5258 ;;		 -> STR_16(8), STR_15(7), STR_14(9), STR_13(9), 
  5259 ;;		 -> STR_12(8), STR_11(7), STR_10(4), display_LCD@str(10), 
  5260 ;;		 -> STR_9(8), STR_8(7), STR_7(5), STR_6(5), 
  5261 ;;		 -> STR_5(7), STR_4(7), STR_3(6), STR_2(6), 
  5262 ;;		 -> weekday_3char(28), STR_1(3), display_dec@str(10), 
  5263 ;; Auto vars:     Size  Location     Type
  5264 ;;  ans             2    5[BANK0 ] int 
  5265 ;; Return value:  Size  Location     Type
  5266 ;;		None               void
  5267 ;; Registers used:
  5268 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5269 ;; Tracked objects:
  5270 ;;		On entry : 0/0
  5271 ;;		On exit  : 0/0
  5272 ;;		Unchanged: 0/0
  5273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5274 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5275 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5276 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5277 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5278 ;;Total ram usage:        5 bytes
  5279 ;; Hardware stack levels used:    1
  5280 ;; Hardware stack levels required when called:    6
  5281 ;; This function calls:
  5282 ;;		_I2C_Send
  5283 ;;		_I2C_Start
  5284 ;;		_I2C_Stop
  5285 ;; This function is called by:
  5286 ;;		_display_dec
  5287 ;;		_display_time_0802
  5288 ;;		_display_port
  5289 ;;		_display_LCD
  5290 ;;		_main
  5291 ;;		_display_time_1602
  5292 ;; This function uses a non-reentrant model
  5293 ;;
  5294                           
  5295                           	psect	text27
  5296  002F30                     __ptext27:
  5297                           	opt stack 0
  5298  002F30                     _I2C_LCD_Puts:
  5299                           	opt stack 21
  5300                           
  5301                           ;My_header\My_I2C.h: 132: int ans;
  5302                           ;My_header\My_I2C.h: 134: ans = I2C_Start(0x3E, 0);
  5303                           
  5304                           ;incstack = 0
  5305  002F30  0E00               	movlw	0
  5306  002F32  0100               	movlb	0	; () banked
  5307  002F34  6FB0               	movwf	I2C_Start@rw& (0+255),b
  5308  002F36  0E3E               	movlw	62
  5309  002F38  EC18  F01C         	call	_I2C_Start
  5310  002F3C  0100               	movlb	0	; () banked
  5311  002F3E  6FB4               	movwf	??_I2C_LCD_Puts& (0+255),b
  5312  002F40  0100               	movlb	0	; () banked
  5313  002F42  51B4               	movf	??_I2C_LCD_Puts& (0+255),w,b
  5314  002F44  0100               	movlb	0	; () banked
  5315  002F46  6FB5               	movwf	I2C_LCD_Puts@ans& (0+255),b
  5316  002F48  6BB6               	clrf	(I2C_LCD_Puts@ans+1)& (0+255),b
  5317                           
  5318                           ; BSR set to: 0
  5319                           ;My_header\My_I2C.h: 135: if (ans == 0) {
  5320  002F4A  0100               	movlb	0	; () banked
  5321  002F4C  51B5               	movf	I2C_LCD_Puts@ans& (0+255),w,b
  5322  002F4E  0100               	movlb	0	; () banked
  5323  002F50  11B6               	iorwf	(I2C_LCD_Puts@ans+1)& (0+255),w,b
  5324  002F52  A4D8               	btfss	status,2,c
  5325  002F54  D031               	goto	l4919
  5326                           
  5327                           ; BSR set to: 0
  5328                           ;My_header\My_I2C.h: 136: I2C_Send(0b01000000);
  5329  002F56  0E40               	movlw	64
  5330  002F58  EC0B  F01D         	call	_I2C_Send
  5331                           
  5332                           ;My_header\My_I2C.h: 137: while (*s) {
  5333  002F5C  D019               	goto	l4917
  5334  002F5E                     l4911:
  5335                           
  5336                           ;My_header\My_I2C.h: 138: I2C_Send(*s++);
  5337  002F5E  C0B2  FFF6         	movff	I2C_LCD_Puts@s,tblptrl
  5338  002F62  C0B3  FFF7         	movff	I2C_LCD_Puts@s+1,tblptrh
  5339  002F66  0E00               	movlw	low (__smallconst shr (0+16))
  5340  002F68  6EF8               	movwf	tblptru,c
  5341  002F6A  0E0E               	movlw	(high __ramtop+-1)
  5342  002F6C  64F7               	cpfsgt	tblptrh,c
  5343  002F6E  D003               	bra	u5247
  5344  002F70  0008               	tblrd		*
  5345  002F72  50F5               	movf	tablat,w,c
  5346  002F74  D005               	bra	u5240
  5347  002F76                     u5247:
  5348  002F76  CFF6 FFE9          	movff	tblptrl,fsr0l
  5349  002F7A  CFF7 FFEA          	movff	tblptrh,fsr0h
  5350  002F7E  50EF               	movf	indf0,w,c
  5351  002F80                     u5240:
  5352  002F80  EC0B  F01D         	call	_I2C_Send
  5353  002F84  0100               	movlb	0	; () banked
  5354  002F86  4BB2               	infsnz	I2C_LCD_Puts@s& (0+255),f,b
  5355  002F88  2BB3               	incf	(I2C_LCD_Puts@s+1)& (0+255),f,b
  5356                           
  5357                           ; BSR set to: 0
  5358                           ;My_header\My_I2C.h: 139: _delay((unsigned long)((26)*(48000000/4000000.0)));
  5359  002F8A  0E68               	movlw	104
  5360  002F8C                     u6447:
  5361  002F8C  2EE8               	decfsz	wreg,f,c
  5362  002F8E  D7FE               	goto	u6447
  5363  002F90                     l4917:
  5364  002F90  C0B2  FFF6         	movff	I2C_LCD_Puts@s,tblptrl
  5365  002F94  C0B3  FFF7         	movff	I2C_LCD_Puts@s+1,tblptrh
  5366  002F98  0E00               	movlw	low (__smallconst shr (0+16))
  5367  002F9A  6EF8               	movwf	tblptru,c
  5368  002F9C  0E0E               	movlw	(high __ramtop+-1)
  5369  002F9E  64F7               	cpfsgt	tblptrh,c
  5370  002FA0  D003               	bra	u5257
  5371  002FA2  0008               	tblrd		*
  5372  002FA4  50F5               	movf	tablat,w,c
  5373  002FA6  D005               	bra	u5250
  5374  002FA8                     u5257:
  5375  002FA8  CFF6 FFE9          	movff	tblptrl,fsr0l
  5376  002FAC  CFF7 FFEA          	movff	tblptrh,fsr0h
  5377  002FB0  50EF               	movf	indf0,w,c
  5378  002FB2                     u5250:
  5379  002FB2  0900               	iorlw	0
  5380  002FB4  A4D8               	btfss	status,2,c
  5381  002FB6  D7D3               	goto	l4911
  5382  002FB8                     l4919:
  5383                           
  5384                           ;My_header\My_I2C.h: 140: }
  5385                           ;My_header\My_I2C.h: 141: }
  5386                           ;My_header\My_I2C.h: 142: I2C_Stop();
  5387  002FB8  EC4D  F01D         	call	_I2C_Stop	;wreg free
  5388  002FBC  0012               	return		;funcret
  5389  002FBE                     __end_of_I2C_LCD_Puts:
  5390                           	opt stack 0
  5391                           tblptru	equ	0xFF8
  5392                           tblptrh	equ	0xFF7
  5393                           tblptrl	equ	0xFF6
  5394                           tablat	equ	0xFF5
  5395                           prodh	equ	0xFF4
  5396                           prodl	equ	0xFF3
  5397                           intcon	equ	0xFF2
  5398                           intcon2	equ	0xFF1
  5399                           indf0	equ	0xFEF
  5400                           postinc0	equ	0xFEE
  5401                           fsr0h	equ	0xFEA
  5402                           fsr0l	equ	0xFE9
  5403                           wreg	equ	0xFE8
  5404                           indf2	equ	0xFDF
  5405                           postinc2	equ	0xFDE
  5406                           postdec2	equ	0xFDD
  5407                           fsr2h	equ	0xFDA
  5408                           fsr2l	equ	0xFD9
  5409                           status	equ	0xFD8
  5410                           
  5411 ;; *************** function _I2C_LCD_Clear *****************
  5412 ;; Defined at:
  5413 ;;		line 107 in file "../My_header\My_I2C.h"
  5414 ;; Parameters:    Size  Location     Type
  5415 ;;		None
  5416 ;; Auto vars:     Size  Location     Type
  5417 ;;		None
  5418 ;; Return value:  Size  Location     Type
  5419 ;;		None               void
  5420 ;; Registers used:
  5421 ;;		wreg, status,2, status,0, cstack
  5422 ;; Tracked objects:
  5423 ;;		On entry : 0/0
  5424 ;;		On exit  : 0/0
  5425 ;;		Unchanged: 0/0
  5426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5429 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5430 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5431 ;;Total ram usage:        1 bytes
  5432 ;; Hardware stack levels used:    1
  5433 ;; Hardware stack levels required when called:    7
  5434 ;; This function calls:
  5435 ;;		_I2C_LCD_Command
  5436 ;; This function is called by:
  5437 ;;		_I2C_LCD_init
  5438 ;;		_display_LCD
  5439 ;;		_main
  5440 ;; This function uses a non-reentrant model
  5441 ;;
  5442                           
  5443                           	psect	text28
  5444  0039FC                     __ptext28:
  5445                           	opt stack 0
  5446  0039FC                     _I2C_LCD_Clear:
  5447                           	opt stack 21
  5448                           
  5449                           ;My_header\My_I2C.h: 108: I2C_LCD_Command(0x01);
  5450                           
  5451                           ;incstack = 0
  5452  0039FC  0E01               	movlw	1
  5453  0039FE  ECB0  F01B         	call	_I2C_LCD_Command
  5454                           
  5455                           ;My_header\My_I2C.h: 109: _delay((unsigned long)((1100)*(48000000/4000000.0)));
  5456  003A02  0E12               	movlw	18
  5457  003A04  0100               	movlb	0	; () banked
  5458  003A06  6FB4               	movwf	??_I2C_LCD_Clear& (0+255),b
  5459  003A08  0E23               	movlw	35
  5460  003A0A                     u6457:
  5461  003A0A  2EE8               	decfsz	wreg,f,c
  5462  003A0C  D7FE               	goto	u6457
  5463  003A0E  2FB4               	decfsz	??_I2C_LCD_Clear& (0+255),f,b
  5464  003A10  D7FC               	goto	u6457
  5465  003A12  F000               	nop	
  5466  003A14  0012               	return		;funcret
  5467  003A16                     __end_of_I2C_LCD_Clear:
  5468                           	opt stack 0
  5469                           tblptru	equ	0xFF8
  5470                           tblptrh	equ	0xFF7
  5471                           tblptrl	equ	0xFF6
  5472                           tablat	equ	0xFF5
  5473                           prodh	equ	0xFF4
  5474                           prodl	equ	0xFF3
  5475                           intcon	equ	0xFF2
  5476                           intcon2	equ	0xFF1
  5477                           indf0	equ	0xFEF
  5478                           postinc0	equ	0xFEE
  5479                           fsr0h	equ	0xFEA
  5480                           fsr0l	equ	0xFE9
  5481                           wreg	equ	0xFE8
  5482                           indf2	equ	0xFDF
  5483                           postinc2	equ	0xFDE
  5484                           postdec2	equ	0xFDD
  5485                           fsr2h	equ	0xFDA
  5486                           fsr2l	equ	0xFD9
  5487                           status	equ	0xFD8
  5488                           
  5489 ;; *************** function _I2C_LCD_Command *****************
  5490 ;; Defined at:
  5491 ;;		line 94 in file "../My_header\My_I2C.h"
  5492 ;; Parameters:    Size  Location     Type
  5493 ;;  c               1    wreg     unsigned char 
  5494 ;; Auto vars:     Size  Location     Type
  5495 ;;  c               1    2[BANK0 ] unsigned char 
  5496 ;;  ans             1    3[BANK0 ] unsigned char 
  5497 ;; Return value:  Size  Location     Type
  5498 ;;		None               void
  5499 ;; Registers used:
  5500 ;;		wreg, status,2, status,0, cstack
  5501 ;; Tracked objects:
  5502 ;;		On entry : 0/0
  5503 ;;		On exit  : 0/0
  5504 ;;		Unchanged: 0/0
  5505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5507 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5509 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5510 ;;Total ram usage:        2 bytes
  5511 ;; Hardware stack levels used:    1
  5512 ;; Hardware stack levels required when called:    6
  5513 ;; This function calls:
  5514 ;;		_I2C_Send
  5515 ;;		_I2C_Start
  5516 ;;		_I2C_Stop
  5517 ;; This function is called by:
  5518 ;;		_I2C_LCD_Clear
  5519 ;;		_I2C_LCD_SetCursor
  5520 ;;		_I2C_LCD_init
  5521 ;; This function uses a non-reentrant model
  5522 ;;
  5523                           
  5524                           	psect	text29
  5525  003760                     __ptext29:
  5526                           	opt stack 0
  5527  003760                     _I2C_LCD_Command:
  5528                           	opt stack 22
  5529                           
  5530                           ;incstack = 0
  5531                           ;I2C_LCD_Command@c stored from wreg
  5532  003760  0100               	movlb	0	; () banked
  5533  003762  6FB2               	movwf	I2C_LCD_Command@c& (0+255),b
  5534                           
  5535                           ;My_header\My_I2C.h: 95: uint8_t ans;
  5536                           ;My_header\My_I2C.h: 97: ans = I2C_Start(0x3E, 0);
  5537  003764  0E00               	movlw	0
  5538  003766  0100               	movlb	0	; () banked
  5539  003768  6FB0               	movwf	I2C_Start@rw& (0+255),b
  5540  00376A  0E3E               	movlw	62
  5541  00376C  EC18  F01C         	call	_I2C_Start
  5542  003770  0100               	movlb	0	; () banked
  5543  003772  6FB3               	movwf	I2C_LCD_Command@ans& (0+255),b
  5544                           
  5545                           ; BSR set to: 0
  5546                           ;My_header\My_I2C.h: 98: if (ans == 0) {
  5547  003774  0100               	movlb	0	; () banked
  5548  003776  51B3               	movf	I2C_LCD_Command@ans& (0+255),w,b
  5549  003778  0100               	movlb	0	; () banked
  5550  00377A  A4D8               	btfss	status,2,c
  5551  00377C  D007               	goto	l335
  5552                           
  5553                           ; BSR set to: 0
  5554                           ;My_header\My_I2C.h: 100: I2C_Send(0b10000000);
  5555  00377E  0E80               	movlw	128
  5556  003780  EC0B  F01D         	call	_I2C_Send
  5557                           
  5558                           ;My_header\My_I2C.h: 101: I2C_Send(c);
  5559  003784  0100               	movlb	0	; () banked
  5560  003786  51B2               	movf	I2C_LCD_Command@c& (0+255),w,b
  5561  003788  EC0B  F01D         	call	_I2C_Send
  5562  00378C                     l335:
  5563                           
  5564                           ;My_header\My_I2C.h: 102: }
  5565                           ;My_header\My_I2C.h: 103: I2C_Stop();
  5566  00378C  EC4D  F01D         	call	_I2C_Stop	;wreg free
  5567                           
  5568                           ;My_header\My_I2C.h: 104: _delay((unsigned long)((26)*(48000000/4000000.0)));
  5569  003790  0E68               	movlw	104
  5570  003792                     u6467:
  5571  003792  2EE8               	decfsz	wreg,f,c
  5572  003794  D7FE               	goto	u6467
  5573  003796  0012               	return		;funcret
  5574  003798                     __end_of_I2C_LCD_Command:
  5575                           	opt stack 0
  5576                           tblptru	equ	0xFF8
  5577                           tblptrh	equ	0xFF7
  5578                           tblptrl	equ	0xFF6
  5579                           tablat	equ	0xFF5
  5580                           prodh	equ	0xFF4
  5581                           prodl	equ	0xFF3
  5582                           intcon	equ	0xFF2
  5583                           intcon2	equ	0xFF1
  5584                           indf0	equ	0xFEF
  5585                           postinc0	equ	0xFEE
  5586                           fsr0h	equ	0xFEA
  5587                           fsr0l	equ	0xFE9
  5588                           wreg	equ	0xFE8
  5589                           indf2	equ	0xFDF
  5590                           postinc2	equ	0xFDE
  5591                           postdec2	equ	0xFDD
  5592                           fsr2h	equ	0xFDA
  5593                           fsr2l	equ	0xFD9
  5594                           status	equ	0xFD8
  5595                           
  5596 ;; *************** function _I2C_Stop *****************
  5597 ;; Defined at:
  5598 ;;		line 59 in file "../My_header\My_I2C.h"
  5599 ;; Parameters:    Size  Location     Type
  5600 ;;		None
  5601 ;; Auto vars:     Size  Location     Type
  5602 ;;		None
  5603 ;; Return value:  Size  Location     Type
  5604 ;;		None               void
  5605 ;; Registers used:
  5606 ;;		wreg, status,2, status,0, cstack
  5607 ;; Tracked objects:
  5608 ;;		On entry : 0/0
  5609 ;;		On exit  : 0/0
  5610 ;;		Unchanged: 0/0
  5611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5616 ;;Total ram usage:        0 bytes
  5617 ;; Hardware stack levels used:    1
  5618 ;; Hardware stack levels required when called:    5
  5619 ;; This function calls:
  5620 ;;		_I2C_IdleCheck
  5621 ;; This function is called by:
  5622 ;;		_I2C_LCD_Command
  5623 ;;		_I2C_LCD_Putc
  5624 ;;		_I2C_LCD_Puts
  5625 ;;		_I2C_LCD_CreateChar
  5626 ;; This function uses a non-reentrant model
  5627 ;;
  5628                           
  5629                           	psect	text30
  5630  003A9A                     __ptext30:
  5631                           	opt stack 0
  5632  003A9A                     _I2C_Stop:
  5633                           	opt stack 22
  5634                           
  5635                           ;My_header\My_I2C.h: 61: I2C_IdleCheck(0x5);
  5636                           
  5637                           ;incstack = 0
  5638  003A9A  0E05               	movlw	5
  5639  003A9C  EC23  F01D         	call	_I2C_IdleCheck
  5640                           
  5641                           ;My_header\My_I2C.h: 62: SSP1CON2bits.PEN = 1;
  5642  003AA0  84C5               	bsf	4037,2,c	;volatile
  5643  003AA2  0012               	return		;funcret
  5644  003AA4                     __end_of_I2C_Stop:
  5645                           	opt stack 0
  5646                           tblptru	equ	0xFF8
  5647                           tblptrh	equ	0xFF7
  5648                           tblptrl	equ	0xFF6
  5649                           tablat	equ	0xFF5
  5650                           prodh	equ	0xFF4
  5651                           prodl	equ	0xFF3
  5652                           intcon	equ	0xFF2
  5653                           intcon2	equ	0xFF1
  5654                           indf0	equ	0xFEF
  5655                           postinc0	equ	0xFEE
  5656                           fsr0h	equ	0xFEA
  5657                           fsr0l	equ	0xFE9
  5658                           wreg	equ	0xFE8
  5659                           indf2	equ	0xFDF
  5660                           postinc2	equ	0xFDE
  5661                           postdec2	equ	0xFDD
  5662                           fsr2h	equ	0xFDA
  5663                           fsr2l	equ	0xFD9
  5664                           status	equ	0xFD8
  5665                           
  5666 ;; *************** function _I2C_Start *****************
  5667 ;; Defined at:
  5668 ;;		line 35 in file "../My_header\My_I2C.h"
  5669 ;; Parameters:    Size  Location     Type
  5670 ;;  adrs            1    wreg     unsigned char 
  5671 ;;  rw              1    0[BANK0 ] unsigned char 
  5672 ;; Auto vars:     Size  Location     Type
  5673 ;;  adrs            1    1[BANK0 ] unsigned char 
  5674 ;; Return value:  Size  Location     Type
  5675 ;;                  1    wreg      unsigned char 
  5676 ;; Registers used:
  5677 ;;		wreg, status,2, status,0, cstack
  5678 ;; Tracked objects:
  5679 ;;		On entry : 0/0
  5680 ;;		On exit  : 0/0
  5681 ;;		Unchanged: 0/0
  5682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5683 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5684 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5686 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5687 ;;Total ram usage:        2 bytes
  5688 ;; Hardware stack levels used:    1
  5689 ;; Hardware stack levels required when called:    5
  5690 ;; This function calls:
  5691 ;;		_I2C_IdleCheck
  5692 ;; This function is called by:
  5693 ;;		_I2C_LCD_Command
  5694 ;;		_I2C_LCD_Putc
  5695 ;;		_I2C_LCD_Puts
  5696 ;;		_I2C_LCD_CreateChar
  5697 ;; This function uses a non-reentrant model
  5698 ;;
  5699                           
  5700                           	psect	text31
  5701  003830                     __ptext31:
  5702                           	opt stack 0
  5703  003830                     _I2C_Start:
  5704                           	opt stack 22
  5705                           
  5706                           ;incstack = 0
  5707                           ;I2C_Start@adrs stored from wreg
  5708  003830  0100               	movlb	0	; () banked
  5709  003832  6FB1               	movwf	I2C_Start@adrs& (0+255),b
  5710                           
  5711                           ;My_header\My_I2C.h: 37: I2C_IdleCheck(0x5);
  5712  003834  0E05               	movlw	5
  5713  003836  EC23  F01D         	call	_I2C_IdleCheck
  5714                           
  5715                           ;My_header\My_I2C.h: 38: SSP1CON2bits.SEN = 1;
  5716  00383A  80C5               	bsf	4037,0,c	;volatile
  5717                           
  5718                           ;My_header\My_I2C.h: 40: I2C_IdleCheck(0x5);
  5719  00383C  0E05               	movlw	5
  5720  00383E  EC23  F01D         	call	_I2C_IdleCheck
  5721                           
  5722                           ;My_header\My_I2C.h: 41: SSP1IF = 0;
  5723  003842  969E               	bcf	3998,3,c	;volatile
  5724                           
  5725                           ;My_header\My_I2C.h: 42: SSP1BUF = (uint8_t) ((adrs << 1) + rw);
  5726  003844  0100               	movlb	0	; () banked
  5727  003846  51B1               	movf	I2C_Start@adrs& (0+255),w,b
  5728  003848  25B1               	addwf	I2C_Start@adrs& (0+255),w,b
  5729  00384A  0100               	movlb	0	; () banked
  5730  00384C  25B0               	addwf	I2C_Start@rw& (0+255),w,b
  5731  00384E  6EC9               	movwf	4041,c	;volatile
  5732  003850                     l311:
  5733  003850  A69E               	btfss	3998,3,c	;volatile
  5734  003852  D7FE               	goto	l311
  5735                           
  5736                           ;My_header\My_I2C.h: 44: return SSP1CON2bits.ACKSTAT;
  5737  003854  ACC5               	btfss	4037,6,c	;volatile
  5738  003856  D002               	goto	u5050
  5739  003858  0E01               	movlw	1
  5740  00385A  0012               	return	
  5741  00385C                     u5050:
  5742  00385C  0E00               	movlw	0
  5743  00385E  0012               	return	
  5744  003860                     __end_of_I2C_Start:
  5745                           	opt stack 0
  5746                           tblptru	equ	0xFF8
  5747                           tblptrh	equ	0xFF7
  5748                           tblptrl	equ	0xFF6
  5749                           tablat	equ	0xFF5
  5750                           prodh	equ	0xFF4
  5751                           prodl	equ	0xFF3
  5752                           intcon	equ	0xFF2
  5753                           intcon2	equ	0xFF1
  5754                           indf0	equ	0xFEF
  5755                           postinc0	equ	0xFEE
  5756                           fsr0h	equ	0xFEA
  5757                           fsr0l	equ	0xFE9
  5758                           wreg	equ	0xFE8
  5759                           indf2	equ	0xFDF
  5760                           postinc2	equ	0xFDE
  5761                           postdec2	equ	0xFDD
  5762                           fsr2h	equ	0xFDA
  5763                           fsr2l	equ	0xFD9
  5764                           status	equ	0xFD8
  5765                           
  5766 ;; *************** function _I2C_Send *****************
  5767 ;; Defined at:
  5768 ;;		line 65 in file "../My_header\My_I2C.h"
  5769 ;; Parameters:    Size  Location     Type
  5770 ;;  data            1    wreg     unsigned char 
  5771 ;; Auto vars:     Size  Location     Type
  5772 ;;  data            1    0[BANK0 ] unsigned char 
  5773 ;; Return value:  Size  Location     Type
  5774 ;;                  1    wreg      unsigned char 
  5775 ;; Registers used:
  5776 ;;		wreg, status,2, status,0, cstack
  5777 ;; Tracked objects:
  5778 ;;		On entry : 0/0
  5779 ;;		On exit  : 0/0
  5780 ;;		Unchanged: 0/0
  5781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5783 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5785 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5786 ;;Total ram usage:        1 bytes
  5787 ;; Hardware stack levels used:    1
  5788 ;; Hardware stack levels required when called:    5
  5789 ;; This function calls:
  5790 ;;		_I2C_IdleCheck
  5791 ;; This function is called by:
  5792 ;;		_I2C_LCD_Command
  5793 ;;		_I2C_LCD_Putc
  5794 ;;		_I2C_LCD_Puts
  5795 ;;		_I2C_LCD_CreateChar
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           	psect	text32
  5800  003A16                     __ptext32:
  5801                           	opt stack 0
  5802  003A16                     _I2C_Send:
  5803                           	opt stack 22
  5804                           
  5805                           ;incstack = 0
  5806                           ;I2C_Send@data stored from wreg
  5807  003A16  0100               	movlb	0	; () banked
  5808  003A18  6FB0               	movwf	I2C_Send@data& (0+255),b
  5809                           
  5810                           ;My_header\My_I2C.h: 66: I2C_IdleCheck(0x5);
  5811  003A1A  0E05               	movlw	5
  5812  003A1C  EC23  F01D         	call	_I2C_IdleCheck
  5813                           
  5814                           ;My_header\My_I2C.h: 67: SSP1IF = 0;
  5815  003A20  969E               	bcf	3998,3,c	;volatile
  5816                           
  5817                           ;My_header\My_I2C.h: 68: SSP1BUF = data;
  5818  003A22  C0B0  FFC9         	movff	I2C_Send@data,4041	;volatile
  5819  003A26                     l326:
  5820  003A26  A69E               	btfss	3998,3,c	;volatile
  5821  003A28  D7FE               	goto	l326
  5822                           
  5823                           ;My_header\My_I2C.h: 70: return SSP1CON2bits.ACKSTAT;
  5824                           ;	Return value of _I2C_Send is never used
  5825  003A2A  50C5               	movf	4037,w,c	;volatile
  5826  003A2C  0012               	return	
  5827  003A2E                     __end_of_I2C_Send:
  5828                           	opt stack 0
  5829                           tblptru	equ	0xFF8
  5830                           tblptrh	equ	0xFF7
  5831                           tblptrl	equ	0xFF6
  5832                           tablat	equ	0xFF5
  5833                           prodh	equ	0xFF4
  5834                           prodl	equ	0xFF3
  5835                           intcon	equ	0xFF2
  5836                           intcon2	equ	0xFF1
  5837                           indf0	equ	0xFEF
  5838                           postinc0	equ	0xFEE
  5839                           fsr0h	equ	0xFEA
  5840                           fsr0l	equ	0xFE9
  5841                           wreg	equ	0xFE8
  5842                           indf2	equ	0xFDF
  5843                           postinc2	equ	0xFDE
  5844                           postdec2	equ	0xFDD
  5845                           fsr2h	equ	0xFDA
  5846                           fsr2l	equ	0xFD9
  5847                           status	equ	0xFD8
  5848                           
  5849 ;; *************** function _I2C_IdleCheck *****************
  5850 ;; Defined at:
  5851 ;;		line 21 in file "../My_header\My_I2C.h"
  5852 ;; Parameters:    Size  Location     Type
  5853 ;;  mask            1    wreg     unsigned char 
  5854 ;; Auto vars:     Size  Location     Type
  5855 ;;  mask            1   32[COMRAM] unsigned char 
  5856 ;; Return value:  Size  Location     Type
  5857 ;;		None               void
  5858 ;; Registers used:
  5859 ;;		wreg, status,2, status,0
  5860 ;; Tracked objects:
  5861 ;;		On entry : 0/0
  5862 ;;		On exit  : 0/0
  5863 ;;		Unchanged: 0/0
  5864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5866 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5867 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5868 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5869 ;;Total ram usage:        2 bytes
  5870 ;; Hardware stack levels used:    1
  5871 ;; Hardware stack levels required when called:    4
  5872 ;; This function calls:
  5873 ;;		Nothing
  5874 ;; This function is called by:
  5875 ;;		_I2C_Start
  5876 ;;		_I2C_Stop
  5877 ;;		_I2C_Send
  5878 ;;		_I2C_rStart
  5879 ;;		_I2C_Receive
  5880 ;; This function uses a non-reentrant model
  5881 ;;
  5882                           
  5883                           	psect	text33
  5884  003A46                     __ptext33:
  5885                           	opt stack 0
  5886  003A46                     _I2C_IdleCheck:
  5887                           	opt stack 22
  5888                           
  5889                           ;incstack = 0
  5890                           ;I2C_IdleCheck@mask stored from wreg
  5891  003A46  6E21               	movwf	I2C_IdleCheck@mask,c
  5892  003A48                     l4693:
  5893  003A48  50C7               	movf	4039,w,c	;volatile
  5894  003A4A  1421               	andwf	I2C_IdleCheck@mask,w,c
  5895  003A4C  6E20               	movwf	??_I2C_IdleCheck& (0+255),c
  5896  003A4E  50C5               	movf	4037,w,c	;volatile
  5897  003A50  0B1F               	andlw	31
  5898  003A52  1020               	iorwf	??_I2C_IdleCheck,w,c
  5899  003A54  0900               	iorlw	0
  5900  003A56  B4D8               	btfsc	status,2,c
  5901  003A58  0012               	return	
  5902  003A5A  D7F6               	goto	l4693
  5903  003A5C                     __end_of_I2C_IdleCheck:
  5904                           	opt stack 0
  5905                           tblptru	equ	0xFF8
  5906                           tblptrh	equ	0xFF7
  5907                           tblptrl	equ	0xFF6
  5908                           tablat	equ	0xFF5
  5909                           prodh	equ	0xFF4
  5910                           prodl	equ	0xFF3
  5911                           intcon	equ	0xFF2
  5912                           intcon2	equ	0xFF1
  5913                           indf0	equ	0xFEF
  5914                           postinc0	equ	0xFEE
  5915                           fsr0h	equ	0xFEA
  5916                           fsr0l	equ	0xFE9
  5917                           wreg	equ	0xFE8
  5918                           indf2	equ	0xFDF
  5919                           postinc2	equ	0xFDE
  5920                           postdec2	equ	0xFDD
  5921                           fsr2h	equ	0xFDA
  5922                           fsr2l	equ	0xFD9
  5923                           status	equ	0xFD8
  5924                           
  5925 ;; *************** function _RTCC_loop *****************
  5926 ;; Defined at:
  5927 ;;		line 387 in file "../My_header\My_RTCC.h"
  5928 ;; Parameters:    Size  Location     Type
  5929 ;;		None
  5930 ;; Auto vars:     Size  Location     Type
  5931 ;;		None
  5932 ;; Return value:  Size  Location     Type
  5933 ;;		None               void
  5934 ;; Registers used:
  5935 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5936 ;; Tracked objects:
  5937 ;;		On entry : 0/0
  5938 ;;		On exit  : 0/0
  5939 ;;		Unchanged: 0/0
  5940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5945 ;;Total ram usage:        0 bytes
  5946 ;; Hardware stack levels used:    1
  5947 ;; Hardware stack levels required when called:    8
  5948 ;; This function calls:
  5949 ;;		_RTCC_from_RTCC
  5950 ;; This function is called by:
  5951 ;;		_main
  5952 ;; This function uses a non-reentrant model
  5953 ;;
  5954                           
  5955                           	psect	text34
  5956  0035F0                     __ptext34:
  5957                           	opt stack 0
  5958  0035F0                     _RTCC_loop:
  5959                           	opt stack 22
  5960  0035F0                     l555:
  5961  0035F0  010F               	movlb	15	; () banked
  5962  0035F2  B93F               	btfsc	63,4,b	;volatile
  5963  0035F4  D7FD               	goto	l555
  5964                           
  5965                           ; BSR set to: 15
  5966                           ;My_header\My_RTCC.h: 390: halfsec = RTCCFGbits.HALFSEC;
  5967                           
  5968                           ; BSR set to: 15
  5969  0035F6  0E00               	movlw	0
  5970  0035F8  B73F               	btfsc	63,3,b	;volatile
  5971  0035FA  0E01               	movlw	1
  5972  0035FC  6E2F               	movwf	_halfsec,c
  5973                           
  5974                           ; BSR set to: 15
  5975                           ;My_header\My_RTCC.h: 391: if (prev_halfsec != halfsec) {
  5976  0035FE  502F               	movf	_halfsec,w,c
  5977  003600  0100               	movlb	0	; () banked
  5978  003602  198D               	xorwf	RTCC_loop@prev_halfsec& (0+255),w,b
  5979  003604  B4D8               	btfsc	status,2,c
  5980  003606  0012               	return	
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;My_header\My_RTCC.h: 392: prev_halfsec = halfsec;
  5984  003608  C02F  F08D         	movff	_halfsec,RTCC_loop@prev_halfsec
  5985                           
  5986                           ;My_header\My_RTCC.h: 393: colon = halfsec;
  5987  00360C  C02F  F08E         	movff	_halfsec,_colon
  5988                           
  5989                           ; BSR set to: 0
  5990                           ;My_header\My_RTCC.h: 394: time_change_flag = 1;
  5991  003610  0E01               	movlw	1
  5992  003612  0100               	movlb	0	; () banked
  5993  003614  6F93               	movwf	_time_change_flag& (0+255),b
  5994                           
  5995                           ; BSR set to: 0
  5996                           ;My_header\My_RTCC.h: 395: RTCC_from_RTCC(&caltime_now, &epoch_now);
  5997  003616  0E9D               	movlw	low _caltime_now
  5998  003618  0100               	movlb	0	; () banked
  5999  00361A  6FD8               	movwf	RTCC_from_RTCC@ct& (0+255),b
  6000  00361C  0E00               	movlw	high _caltime_now
  6001  00361E  0100               	movlb	0	; () banked
  6002  003620  6FD9               	movwf	(RTCC_from_RTCC@ct+1)& (0+255),b
  6003  003622  0EA4               	movlw	low _epoch_now
  6004  003624  0100               	movlb	0	; () banked
  6005  003626  6FDA               	movwf	RTCC_from_RTCC@ep& (0+255),b
  6006  003628  0E00               	movlw	high _epoch_now
  6007  00362A  0100               	movlb	0	; () banked
  6008  00362C  6FDB               	movwf	(RTCC_from_RTCC@ep+1)& (0+255),b
  6009  00362E  ECCF  F01C         	call	_RTCC_from_RTCC	;wreg free
  6010  003632  0012               	return	
  6011  003634                     __end_of_RTCC_loop:
  6012                           	opt stack 0
  6013                           tblptru	equ	0xFF8
  6014                           tblptrh	equ	0xFF7
  6015                           tblptrl	equ	0xFF6
  6016                           tablat	equ	0xFF5
  6017                           prodh	equ	0xFF4
  6018                           prodl	equ	0xFF3
  6019                           intcon	equ	0xFF2
  6020                           intcon2	equ	0xFF1
  6021                           indf0	equ	0xFEF
  6022                           postinc0	equ	0xFEE
  6023                           fsr0h	equ	0xFEA
  6024                           fsr0l	equ	0xFE9
  6025                           wreg	equ	0xFE8
  6026                           indf2	equ	0xFDF
  6027                           postinc2	equ	0xFDE
  6028                           postdec2	equ	0xFDD
  6029                           fsr2h	equ	0xFDA
  6030                           fsr2l	equ	0xFD9
  6031                           status	equ	0xFD8
  6032                           
  6033 ;; *************** function _RTCC_adjust_time_button *****************
  6034 ;; Defined at:
  6035 ;;		line 363 in file "../My_header\My_RTCC.h"
  6036 ;; Parameters:    Size  Location     Type
  6037 ;;  mode            2   63[BANK0 ] PTR struct button
  6038 ;;		 -> sw(4), 
  6039 ;;  cnt_inc         2   65[BANK0 ] PTR struct button
  6040 ;;		 -> sw0(4), 
  6041 ;;  cnt_dec         2   67[BANK0 ] PTR struct button
  6042 ;;		 -> sw1(4), 
  6043 ;; Auto vars:     Size  Location     Type
  6044 ;;		None
  6045 ;; Return value:  Size  Location     Type
  6046 ;;		None               void
  6047 ;; Registers used:
  6048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6049 ;; Tracked objects:
  6050 ;;		On entry : 0/0
  6051 ;;		On exit  : 0/0
  6052 ;;		Unchanged: 0/0
  6053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6054 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6057 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6058 ;;Total ram usage:        6 bytes
  6059 ;; Hardware stack levels used:    1
  6060 ;; Hardware stack levels required when called:    9
  6061 ;; This function calls:
  6062 ;;		_RTCC_adjust_time_cursor
  6063 ;;		_RTCC_adjust_time_dec
  6064 ;;		_RTCC_adjust_time_inc
  6065 ;;		_RTCC_adjust_time_toggle
  6066 ;; This function is called by:
  6067 ;;		_main
  6068 ;; This function uses a non-reentrant model
  6069 ;;
  6070                           
  6071                           	psect	text35
  6072  00227A                     __ptext35:
  6073                           	opt stack 0
  6074  00227A                     _RTCC_adjust_time_button:
  6075                           	opt stack 21
  6076                           
  6077                           ;My_header\My_RTCC.h: 364: if (mode->flag.long_holding_3) {
  6078                           
  6079                           ;incstack = 0
  6080  00227A  0100               	movlb	0	; () banked
  6081  00227C  EE20 F003          	lfsr	2,3
  6082  002280  51EF               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  6083  002282  26D9               	addwf	fsr2l,f,c
  6084  002284  51F0               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  6085  002286  22DA               	addwfc	fsr2h,f,c
  6086  002288  0100               	movlb	0	; () banked
  6087  00228A  A6DF               	btfss	indf2,3,c
  6088  00228C  D02C               	goto	l5359
  6089                           
  6090                           ; BSR set to: 0
  6091                           ;My_header\My_RTCC.h: 365: mode->flag.long_holding_3 = 0;
  6092  00228E  0100               	movlb	0	; () banked
  6093  002290  EE20 F003          	lfsr	2,3
  6094  002294  51EF               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  6095  002296  26D9               	addwf	fsr2l,f,c
  6096  002298  51F0               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  6097  00229A  22DA               	addwfc	fsr2h,f,c
  6098  00229C  0100               	movlb	0	; () banked
  6099  00229E  96DF               	bcf	indf2,3,c
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;My_header\My_RTCC.h: 366: RTCC_adjust_time_toggle();
  6103  0022A0  EC2E  F01D         	call	_RTCC_adjust_time_toggle	;wreg free
  6104                           
  6105                           ;My_header\My_RTCC.h: 367: mode->flags = 0;
  6106  0022A4  0100               	movlb	0	; () banked
  6107  0022A6  EE20 F002          	lfsr	2,2
  6108  0022AA  51EF               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  6109  0022AC  26D9               	addwf	fsr2l,f,c
  6110  0022AE  51F0               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  6111  0022B0  22DA               	addwfc	fsr2h,f,c
  6112  0022B2  0E00               	movlw	0
  6113  0022B4  6EDE               	movwf	postinc2,c
  6114  0022B6  0E00               	movlw	0
  6115  0022B8  6EDD               	movwf	postdec2,c
  6116                           
  6117                           ; BSR set to: 0
  6118                           ;My_header\My_RTCC.h: 368: cnt_inc->flags = 0;
  6119  0022BA  0100               	movlb	0	; () banked
  6120  0022BC  EE20 F002          	lfsr	2,2
  6121  0022C0  51F1               	movf	RTCC_adjust_time_button@cnt_inc& (0+255),w,b
  6122  0022C2  26D9               	addwf	fsr2l,f,c
  6123  0022C4  51F2               	movf	(RTCC_adjust_time_button@cnt_inc+1)& (0+255),w,b
  6124  0022C6  22DA               	addwfc	fsr2h,f,c
  6125  0022C8  0E00               	movlw	0
  6126  0022CA  6EDE               	movwf	postinc2,c
  6127  0022CC  0E00               	movlw	0
  6128  0022CE  6EDD               	movwf	postdec2,c
  6129                           
  6130                           ; BSR set to: 0
  6131                           ;My_header\My_RTCC.h: 369: cnt_dec->flags = 0;
  6132  0022D0  0100               	movlb	0	; () banked
  6133  0022D2  EE20 F002          	lfsr	2,2
  6134  0022D6  51F3               	movf	RTCC_adjust_time_button@cnt_dec& (0+255),w,b
  6135  0022D8  26D9               	addwf	fsr2l,f,c
  6136  0022DA  51F4               	movf	(RTCC_adjust_time_button@cnt_dec+1)& (0+255),w,b
  6137  0022DC  22DA               	addwfc	fsr2h,f,c
  6138  0022DE  0E00               	movlw	0
  6139  0022E0  6EDE               	movwf	postinc2,c
  6140  0022E2  0E00               	movlw	0
  6141  0022E4  6EDD               	movwf	postdec2,c
  6142  0022E6                     l5359:
  6143                           
  6144                           ; BSR set to: 0
  6145                           ;My_header\My_RTCC.h: 370: }
  6146                           ;My_header\My_RTCC.h: 371: if (edit_flag.flags) {
  6147  0022E6  0100               	movlb	0	; () banked
  6148  0022E8  5191               	movf	_edit_flag& (0+255),w,b
  6149  0022EA  B4D8               	btfsc	status,2,c
  6150  0022EC  0012               	return	
  6151                           
  6152                           ; BSR set to: 0
  6153                           ;My_header\My_RTCC.h: 372: if (mode->flag.press) {
  6154  0022EE  0100               	movlb	0	; () banked
  6155  0022F0  EE20 F002          	lfsr	2,2
  6156  0022F4  51EF               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  6157  0022F6  26D9               	addwf	fsr2l,f,c
  6158  0022F8  51F0               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  6159  0022FA  22DA               	addwfc	fsr2h,f,c
  6160  0022FC  0100               	movlb	0	; () banked
  6161  0022FE  A0DF               	btfss	indf2,0,c
  6162  002300  D00B               	goto	l5367
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;My_header\My_RTCC.h: 373: mode->flag.press = 0;
  6166  002302  0100               	movlb	0	; () banked
  6167  002304  EE20 F002          	lfsr	2,2
  6168  002308  51EF               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  6169  00230A  26D9               	addwf	fsr2l,f,c
  6170  00230C  51F0               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  6171  00230E  22DA               	addwfc	fsr2h,f,c
  6172  002310  0100               	movlb	0	; () banked
  6173  002312  90DF               	bcf	indf2,0,c
  6174                           
  6175                           ; BSR set to: 0
  6176                           ;My_header\My_RTCC.h: 374: RTCC_adjust_time_cursor();
  6177  002314  ECB6  F019         	call	_RTCC_adjust_time_cursor	;wreg free
  6178  002318                     l5367:
  6179                           
  6180                           ;My_header\My_RTCC.h: 375: }
  6181                           ;My_header\My_RTCC.h: 376: if (cnt_inc->flag.press) {
  6182  002318  0100               	movlb	0	; () banked
  6183  00231A  EE20 F002          	lfsr	2,2
  6184  00231E  51F1               	movf	RTCC_adjust_time_button@cnt_inc& (0+255),w,b
  6185  002320  26D9               	addwf	fsr2l,f,c
  6186  002322  51F2               	movf	(RTCC_adjust_time_button@cnt_inc+1)& (0+255),w,b
  6187  002324  22DA               	addwfc	fsr2h,f,c
  6188  002326  0100               	movlb	0	; () banked
  6189  002328  A0DF               	btfss	indf2,0,c
  6190  00232A  D017               	goto	l5373
  6191                           
  6192                           ; BSR set to: 0
  6193                           ;My_header\My_RTCC.h: 377: cnt_inc->flag.press = 0;
  6194  00232C  0100               	movlb	0	; () banked
  6195  00232E  EE20 F002          	lfsr	2,2
  6196  002332  51F1               	movf	RTCC_adjust_time_button@cnt_inc& (0+255),w,b
  6197  002334  26D9               	addwf	fsr2l,f,c
  6198  002336  51F2               	movf	(RTCC_adjust_time_button@cnt_inc+1)& (0+255),w,b
  6199  002338  22DA               	addwfc	fsr2h,f,c
  6200  00233A  0100               	movlb	0	; () banked
  6201  00233C  90DF               	bcf	indf2,0,c
  6202                           
  6203                           ; BSR set to: 0
  6204                           ;My_header\My_RTCC.h: 378: RTCC_adjust_time_inc(&caltime_now, &epoch_now);
  6205  00233E  0E9D               	movlw	low _caltime_now
  6206  002340  0100               	movlb	0	; () banked
  6207  002342  6FE5               	movwf	RTCC_adjust_time_inc@ct& (0+255),b
  6208  002344  0E00               	movlw	high _caltime_now
  6209  002346  0100               	movlb	0	; () banked
  6210  002348  6FE6               	movwf	(RTCC_adjust_time_inc@ct+1)& (0+255),b
  6211  00234A  0EA4               	movlw	low _epoch_now
  6212  00234C  0100               	movlb	0	; () banked
  6213  00234E  6FE7               	movwf	RTCC_adjust_time_inc@ep& (0+255),b
  6214  002350  0E00               	movlw	high _epoch_now
  6215  002352  0100               	movlb	0	; () banked
  6216  002354  6FE8               	movwf	(RTCC_adjust_time_inc@ep+1)& (0+255),b
  6217  002356  EC90  F00B         	call	_RTCC_adjust_time_inc	;wreg free
  6218  00235A                     l5373:
  6219                           
  6220                           ;My_header\My_RTCC.h: 379: }
  6221                           ;My_header\My_RTCC.h: 380: if (cnt_dec->flag.press) {
  6222  00235A  0100               	movlb	0	; () banked
  6223  00235C  EE20 F002          	lfsr	2,2
  6224  002360  51F3               	movf	RTCC_adjust_time_button@cnt_dec& (0+255),w,b
  6225  002362  26D9               	addwf	fsr2l,f,c
  6226  002364  51F4               	movf	(RTCC_adjust_time_button@cnt_dec+1)& (0+255),w,b
  6227  002366  22DA               	addwfc	fsr2h,f,c
  6228  002368  0100               	movlb	0	; () banked
  6229  00236A  A0DF               	btfss	indf2,0,c
  6230  00236C  0012               	return	
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;My_header\My_RTCC.h: 381: cnt_dec->flag.press = 0;
  6234  00236E  0100               	movlb	0	; () banked
  6235  002370  EE20 F002          	lfsr	2,2
  6236  002374  51F3               	movf	RTCC_adjust_time_button@cnt_dec& (0+255),w,b
  6237  002376  26D9               	addwf	fsr2l,f,c
  6238  002378  51F4               	movf	(RTCC_adjust_time_button@cnt_dec+1)& (0+255),w,b
  6239  00237A  22DA               	addwfc	fsr2h,f,c
  6240  00237C  0100               	movlb	0	; () banked
  6241  00237E  90DF               	bcf	indf2,0,c
  6242                           
  6243                           ; BSR set to: 0
  6244                           ;My_header\My_RTCC.h: 382: RTCC_adjust_time_dec(&caltime_now, &epoch_now);
  6245  002380  0E9D               	movlw	low _caltime_now
  6246  002382  0100               	movlb	0	; () banked
  6247  002384  6FE5               	movwf	RTCC_adjust_time_dec@ct& (0+255),b
  6248  002386  0E00               	movlw	high _caltime_now
  6249  002388  0100               	movlb	0	; () banked
  6250  00238A  6FE6               	movwf	(RTCC_adjust_time_dec@ct+1)& (0+255),b
  6251  00238C  0EA4               	movlw	low _epoch_now
  6252  00238E  0100               	movlb	0	; () banked
  6253  002390  6FE7               	movwf	RTCC_adjust_time_dec@ep& (0+255),b
  6254  002392  0E00               	movlw	high _epoch_now
  6255  002394  0100               	movlb	0	; () banked
  6256  002396  6FE8               	movwf	(RTCC_adjust_time_dec@ep+1)& (0+255),b
  6257  002398  ECC3  F00C         	call	_RTCC_adjust_time_dec	;wreg free
  6258  00239C  0012               	return	
  6259  00239E                     __end_of_RTCC_adjust_time_button:
  6260                           	opt stack 0
  6261                           tblptru	equ	0xFF8
  6262                           tblptrh	equ	0xFF7
  6263                           tblptrl	equ	0xFF6
  6264                           tablat	equ	0xFF5
  6265                           prodh	equ	0xFF4
  6266                           prodl	equ	0xFF3
  6267                           intcon	equ	0xFF2
  6268                           intcon2	equ	0xFF1
  6269                           indf0	equ	0xFEF
  6270                           postinc0	equ	0xFEE
  6271                           fsr0h	equ	0xFEA
  6272                           fsr0l	equ	0xFE9
  6273                           wreg	equ	0xFE8
  6274                           indf2	equ	0xFDF
  6275                           postinc2	equ	0xFDE
  6276                           postdec2	equ	0xFDD
  6277                           fsr2h	equ	0xFDA
  6278                           fsr2l	equ	0xFD9
  6279                           status	equ	0xFD8
  6280                           
  6281 ;; *************** function _RTCC_adjust_time_toggle *****************
  6282 ;; Defined at:
  6283 ;;		line 303 in file "../My_header\My_RTCC.h"
  6284 ;; Parameters:    Size  Location     Type
  6285 ;;		None
  6286 ;; Auto vars:     Size  Location     Type
  6287 ;;		None
  6288 ;; Return value:  Size  Location     Type
  6289 ;;		None               void
  6290 ;; Registers used:
  6291 ;;		wreg, status,2
  6292 ;; Tracked objects:
  6293 ;;		On entry : 0/0
  6294 ;;		On exit  : 0/0
  6295 ;;		Unchanged: 0/0
  6296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6301 ;;Total ram usage:        0 bytes
  6302 ;; Hardware stack levels used:    1
  6303 ;; Hardware stack levels required when called:    4
  6304 ;; This function calls:
  6305 ;;		Nothing
  6306 ;; This function is called by:
  6307 ;;		_RTCC_adjust_time_button
  6308 ;; This function uses a non-reentrant model
  6309 ;;
  6310                           
  6311                           	psect	text36
  6312  003A5C                     __ptext36:
  6313                           	opt stack 0
  6314  003A5C                     _RTCC_adjust_time_toggle:
  6315                           	opt stack 25
  6316                           
  6317                           ;My_header\My_RTCC.h: 304: if (edit_flag.flags) {
  6318                           
  6319                           ;incstack = 0
  6320  003A5C  0100               	movlb	0	; () banked
  6321  003A5E  5191               	movf	_edit_flag& (0+255),w,b
  6322  003A60  B4D8               	btfsc	status,2,c
  6323  003A62  D004               	goto	l495
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;My_header\My_RTCC.h: 305: edit_flag.flags = 0;
  6327  003A64  0E00               	movlw	0
  6328  003A66  0100               	movlb	0	; () banked
  6329  003A68  6F91               	movwf	_edit_flag& (0+255),b
  6330                           
  6331                           ;My_header\My_RTCC.h: 306: } else {
  6332  003A6A  0012               	return	
  6333  003A6C                     l495:
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;My_header\My_RTCC.h: 307: edit_flag.flag.ss = 1;
  6337  003A6C  0100               	movlb	0	; () banked
  6338  003A6E  8191               	bsf	_edit_flag& (0+255),0,b
  6339  003A70  0012               	return	
  6340  003A72                     __end_of_RTCC_adjust_time_toggle:
  6341                           	opt stack 0
  6342                           tblptru	equ	0xFF8
  6343                           tblptrh	equ	0xFF7
  6344                           tblptrl	equ	0xFF6
  6345                           tablat	equ	0xFF5
  6346                           prodh	equ	0xFF4
  6347                           prodl	equ	0xFF3
  6348                           intcon	equ	0xFF2
  6349                           intcon2	equ	0xFF1
  6350                           indf0	equ	0xFEF
  6351                           postinc0	equ	0xFEE
  6352                           fsr0h	equ	0xFEA
  6353                           fsr0l	equ	0xFE9
  6354                           wreg	equ	0xFE8
  6355                           indf2	equ	0xFDF
  6356                           postinc2	equ	0xFDE
  6357                           postdec2	equ	0xFDD
  6358                           fsr2h	equ	0xFDA
  6359                           fsr2l	equ	0xFD9
  6360                           status	equ	0xFD8
  6361                           
  6362 ;; *************** function _RTCC_adjust_time_inc *****************
  6363 ;; Defined at:
  6364 ;;		line 321 in file "../My_header\My_RTCC.h"
  6365 ;; Parameters:    Size  Location     Type
  6366 ;;  ct              2   53[BANK0 ] PTR struct .
  6367 ;;		 -> caltime_now(7), 
  6368 ;;  ep              2   55[BANK0 ] PTR unsigned long 
  6369 ;;		 -> epoch_now(4), 
  6370 ;; Auto vars:     Size  Location     Type
  6371 ;;  i               1   61[BANK0 ] unsigned char 
  6372 ;;  i               1   62[BANK0 ] unsigned char 
  6373 ;; Return value:  Size  Location     Type
  6374 ;;		None               void
  6375 ;; Registers used:
  6376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6377 ;; Tracked objects:
  6378 ;;		On entry : 0/0
  6379 ;;		On exit  : 0/0
  6380 ;;		Unchanged: 0/0
  6381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6382 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6383 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6384 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6385 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6386 ;;Total ram usage:       10 bytes
  6387 ;; Hardware stack levels used:    1
  6388 ;; Hardware stack levels required when called:    8
  6389 ;; This function calls:
  6390 ;;		_RTCC_from_RTCC
  6391 ;;		_RTCC_from_epoch
  6392 ;;		___lmul
  6393 ;;		_month_length
  6394 ;; This function is called by:
  6395 ;;		_RTCC_adjust_time_button
  6396 ;; This function uses a non-reentrant model
  6397 ;;
  6398                           
  6399                           	psect	text37
  6400  001720                     __ptext37:
  6401                           	opt stack 0
  6402  001720                     _RTCC_adjust_time_inc:
  6403                           	opt stack 21
  6404                           
  6405                           ;My_header\My_RTCC.h: 322: RTCC_from_RTCC(ct, ep);
  6406                           
  6407                           ; BSR set to: 0
  6408                           ;incstack = 0
  6409  001720  C0E5  F0D8         	movff	RTCC_adjust_time_inc@ct,RTCC_from_RTCC@ct
  6410  001724  C0E6  F0D9         	movff	RTCC_adjust_time_inc@ct+1,RTCC_from_RTCC@ct+1
  6411  001728  C0E7  F0DA         	movff	RTCC_adjust_time_inc@ep,RTCC_from_RTCC@ep
  6412  00172C  C0E8  F0DB         	movff	RTCC_adjust_time_inc@ep+1,RTCC_from_RTCC@ep+1
  6413  001730  ECCF  F01C         	call	_RTCC_from_RTCC	;wreg free
  6414                           
  6415                           ;My_header\My_RTCC.h: 323: if (edit_flag.flag.ss) *ep += 1;
  6416  001734  0100               	movlb	0	; () banked
  6417  001736  A191               	btfss	_edit_flag& (0+255),0,b
  6418  001738  D009               	goto	l5173
  6419                           
  6420                           ; BSR set to: 0
  6421  00173A  C0E7  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6422  00173E  C0E8  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6423  001742  2ADE               	incf	postinc2,f,c
  6424  001744  0E00               	movlw	0
  6425  001746  22DE               	addwfc	postinc2,f,c
  6426  001748  22DE               	addwfc	postinc2,f,c
  6427  00174A  22DE               	addwfc	postinc2,f,c
  6428  00174C                     l5173:
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;My_header\My_RTCC.h: 324: if (edit_flag.flag.mm) *ep += ((epoch_t)60);
  6432  00174C  0100               	movlb	0	; () banked
  6433  00174E  A391               	btfss	_edit_flag& (0+255),1,b
  6434  001750  D00A               	goto	l5177
  6435                           
  6436                           ; BSR set to: 0
  6437  001752  0E3C               	movlw	60
  6438  001754  C0E7  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6439  001758  C0E8  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6440  00175C  26DE               	addwf	postinc2,f,c
  6441  00175E  0E00               	movlw	0
  6442  001760  22DE               	addwfc	postinc2,f,c
  6443  001762  22DE               	addwfc	postinc2,f,c
  6444  001764  22DE               	addwfc	postinc2,f,c
  6445  001766                     l5177:
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;My_header\My_RTCC.h: 325: if (edit_flag.flag.hh) *ep += ((epoch_t)60*60);
  6449  001766  0100               	movlb	0	; () banked
  6450  001768  A591               	btfss	_edit_flag& (0+255),2,b
  6451  00176A  D00C               	goto	l5181
  6452                           
  6453                           ; BSR set to: 0
  6454  00176C  C0E7  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6455  001770  C0E8  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6456  001774  0E10               	movlw	16
  6457  001776  26DE               	addwf	postinc2,f,c
  6458  001778  0E0E               	movlw	14
  6459  00177A  22DE               	addwfc	postinc2,f,c
  6460  00177C  0E00               	movlw	0
  6461  00177E  22DE               	addwfc	postinc2,f,c
  6462  001780  0E00               	movlw	0
  6463  001782  22DE               	addwfc	postinc2,f,c
  6464  001784                     l5181:
  6465                           
  6466                           ; BSR set to: 0
  6467                           ;My_header\My_RTCC.h: 326: if (edit_flag.flag.DD) *ep += ((epoch_t)60*60*24);
  6468  001784  0100               	movlb	0	; () banked
  6469  001786  A791               	btfss	_edit_flag& (0+255),3,b
  6470  001788  D00C               	goto	l5185
  6471                           
  6472                           ; BSR set to: 0
  6473  00178A  C0E7  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6474  00178E  C0E8  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6475  001792  0E80               	movlw	128
  6476  001794  26DE               	addwf	postinc2,f,c
  6477  001796  0E51               	movlw	81
  6478  001798  22DE               	addwfc	postinc2,f,c
  6479  00179A  0E01               	movlw	1
  6480  00179C  22DE               	addwfc	postinc2,f,c
  6481  00179E  0E00               	movlw	0
  6482  0017A0  22DE               	addwfc	postinc2,f,c
  6483  0017A2                     l5185:
  6484                           
  6485                           ; BSR set to: 0
  6486                           ;My_header\My_RTCC.h: 327: if (edit_flag.flag.MM) *ep += ((epoch_t)60*60*24) * month_len
      +                          gth(ct->YY, ct->MM);
  6487  0017A2  0100               	movlb	0	; () banked
  6488  0017A4  A991               	btfss	_edit_flag& (0+255),4,b
  6489  0017A6  D038               	goto	l5189
  6490                           
  6491                           ; BSR set to: 0
  6492  0017A8  0100               	movlb	0	; () banked
  6493  0017AA  EE20 F005          	lfsr	2,5
  6494  0017AE  51E5               	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  6495  0017B0  26D9               	addwf	fsr2l,f,c
  6496  0017B2  51E6               	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  6497  0017B4  22DA               	addwfc	fsr2h,f,c
  6498  0017B6  50DF               	movf	indf2,w,c
  6499  0017B8  0100               	movlb	0	; () banked
  6500  0017BA  6FB4               	movwf	month_length@month& (0+255),b
  6501  0017BC  0100               	movlb	0	; () banked
  6502  0017BE  EE20 F006          	lfsr	2,6
  6503  0017C2  51E5               	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  6504  0017C4  26D9               	addwf	fsr2l,f,c
  6505  0017C6  51E6               	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  6506  0017C8  22DA               	addwfc	fsr2h,f,c
  6507  0017CA  50DF               	movf	indf2,w,c
  6508  0017CC  ECCE  F012         	call	_month_length
  6509  0017D0  0100               	movlb	0	; () banked
  6510  0017D2  6FE9               	movwf	??_RTCC_adjust_time_inc& (0+255),b
  6511  0017D4  0100               	movlb	0	; () banked
  6512  0017D6  51E9               	movf	??_RTCC_adjust_time_inc& (0+255),w,b
  6513  0017D8  0100               	movlb	0	; () banked
  6514  0017DA  6FBD               	movwf	___lmul@multiplier& (0+255),b
  6515  0017DC  6BBE               	clrf	(___lmul@multiplier+1)& (0+255),b
  6516  0017DE  6BBF               	clrf	(___lmul@multiplier+2)& (0+255),b
  6517  0017E0  6BC0               	clrf	(___lmul@multiplier+3)& (0+255),b
  6518  0017E2  0E80               	movlw	128
  6519  0017E4  0100               	movlb	0	; () banked
  6520  0017E6  6FC1               	movwf	___lmul@multiplicand& (0+255),b
  6521  0017E8  0E51               	movlw	81
  6522  0017EA  6FC2               	movwf	(___lmul@multiplicand+1)& (0+255),b
  6523  0017EC  0E01               	movlw	1
  6524  0017EE  6FC3               	movwf	(___lmul@multiplicand+2)& (0+255),b
  6525  0017F0  0E00               	movlw	0
  6526  0017F2  6FC4               	movwf	(___lmul@multiplicand+3)& (0+255),b
  6527  0017F4  EC1E  F019         	call	___lmul	;wreg free
  6528  0017F8  C0E7  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6529  0017FC  C0E8  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6530  001800  0100               	movlb	0	; () banked
  6531  001802  51BD               	movf	?___lmul& (0+255),w,b
  6532  001804  26DE               	addwf	postinc2,f,c
  6533  001806  0100               	movlb	0	; () banked
  6534  001808  51BE               	movf	(?___lmul+1)& (0+255),w,b
  6535  00180A  22DE               	addwfc	postinc2,f,c
  6536  00180C  0100               	movlb	0	; () banked
  6537  00180E  51BF               	movf	(?___lmul+2)& (0+255),w,b
  6538  001810  22DE               	addwfc	postinc2,f,c
  6539  001812  0100               	movlb	0	; () banked
  6540  001814  51C0               	movf	(?___lmul+3)& (0+255),w,b
  6541  001816  22DE               	addwfc	postinc2,f,c
  6542  001818                     l5189:
  6543                           
  6544                           ; BSR set to: 0
  6545                           ;My_header\My_RTCC.h: 328: if (edit_flag.flag.YY) {
  6546  001818  0100               	movlb	0	; () banked
  6547  00181A  AB91               	btfss	_edit_flag& (0+255),5,b
  6548  00181C  D088               	goto	l5211
  6549                           
  6550                           ; BSR set to: 0
  6551                           ;My_header\My_RTCC.h: 329: for (uint8_t i = ct->MM; i <= 12; i++) {
  6552  00181E  0100               	movlb	0	; () banked
  6553  001820  EE20 F005          	lfsr	2,5
  6554  001824  51E5               	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  6555  001826  26D9               	addwf	fsr2l,f,c
  6556  001828  51E6               	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  6557  00182A  22DA               	addwfc	fsr2h,f,c
  6558  00182C  50DF               	movf	indf2,w,c
  6559  00182E  0100               	movlb	0	; () banked
  6560  001830  6FEE               	movwf	RTCC_adjust_time_inc@i& (0+255),b
  6561  001832                     l5193:
  6562                           
  6563                           ; BSR set to: 0
  6564  001832  0E0C               	movlw	12
  6565  001834  0100               	movlb	0	; () banked
  6566  001836  65EE               	cpfsgt	RTCC_adjust_time_inc@i& (0+255),b
  6567  001838  D001               	goto	l5197
  6568  00183A  D033               	goto	l5203
  6569  00183C                     l5197:
  6570                           
  6571                           ; BSR set to: 0
  6572                           ;My_header\My_RTCC.h: 330: *ep += ((epoch_t)60*60*24) * month_length(ct->YY, i);
  6573  00183C  C0EE  F0B4         	movff	RTCC_adjust_time_inc@i,month_length@month
  6574  001840  0100               	movlb	0	; () banked
  6575  001842  EE20 F006          	lfsr	2,6
  6576  001846  51E5               	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  6577  001848  26D9               	addwf	fsr2l,f,c
  6578  00184A  51E6               	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  6579  00184C  22DA               	addwfc	fsr2h,f,c
  6580  00184E  50DF               	movf	indf2,w,c
  6581  001850  ECCE  F012         	call	_month_length
  6582  001854  0100               	movlb	0	; () banked
  6583  001856  6FE9               	movwf	??_RTCC_adjust_time_inc& (0+255),b
  6584  001858  0100               	movlb	0	; () banked
  6585  00185A  51E9               	movf	??_RTCC_adjust_time_inc& (0+255),w,b
  6586  00185C  0100               	movlb	0	; () banked
  6587  00185E  6FBD               	movwf	___lmul@multiplier& (0+255),b
  6588  001860  6BBE               	clrf	(___lmul@multiplier+1)& (0+255),b
  6589  001862  6BBF               	clrf	(___lmul@multiplier+2)& (0+255),b
  6590  001864  6BC0               	clrf	(___lmul@multiplier+3)& (0+255),b
  6591  001866  0E80               	movlw	128
  6592  001868  0100               	movlb	0	; () banked
  6593  00186A  6FC1               	movwf	___lmul@multiplicand& (0+255),b
  6594  00186C  0E51               	movlw	81
  6595  00186E  6FC2               	movwf	(___lmul@multiplicand+1)& (0+255),b
  6596  001870  0E01               	movlw	1
  6597  001872  6FC3               	movwf	(___lmul@multiplicand+2)& (0+255),b
  6598  001874  0E00               	movlw	0
  6599  001876  6FC4               	movwf	(___lmul@multiplicand+3)& (0+255),b
  6600  001878  EC1E  F019         	call	___lmul	;wreg free
  6601  00187C  C0E7  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6602  001880  C0E8  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6603  001884  0100               	movlb	0	; () banked
  6604  001886  51BD               	movf	?___lmul& (0+255),w,b
  6605  001888  26DE               	addwf	postinc2,f,c
  6606  00188A  0100               	movlb	0	; () banked
  6607  00188C  51BE               	movf	(?___lmul+1)& (0+255),w,b
  6608  00188E  22DE               	addwfc	postinc2,f,c
  6609  001890  0100               	movlb	0	; () banked
  6610  001892  51BF               	movf	(?___lmul+2)& (0+255),w,b
  6611  001894  22DE               	addwfc	postinc2,f,c
  6612  001896  0100               	movlb	0	; () banked
  6613  001898  51C0               	movf	(?___lmul+3)& (0+255),w,b
  6614  00189A  22DE               	addwfc	postinc2,f,c
  6615                           
  6616                           ; BSR set to: 0
  6617  00189C  0100               	movlb	0	; () banked
  6618  00189E  2BEE               	incf	RTCC_adjust_time_inc@i& (0+255),f,b
  6619  0018A0  D7C8               	goto	l5193
  6620  0018A2                     l5203:
  6621                           
  6622                           ; BSR set to: 0
  6623                           ;My_header\My_RTCC.h: 331: }
  6624                           ;My_header\My_RTCC.h: 332: for (uint8_t i = 1; i < ct->MM; i++) {
  6625  0018A2  0E01               	movlw	1
  6626  0018A4  0100               	movlb	0	; () banked
  6627  0018A6  6FED               	movwf	RTCC_adjust_time_inc@i_2218& (0+255),b
  6628  0018A8  D036               	goto	l5209
  6629  0018AA                     l5205:
  6630                           
  6631                           ; BSR set to: 0
  6632                           ;My_header\My_RTCC.h: 333: *ep += ((epoch_t)60*60*24) * month_length(ct->YY + 1, i);
  6633  0018AA  C0ED  F0B4         	movff	RTCC_adjust_time_inc@i_2218,month_length@month
  6634  0018AE  0100               	movlb	0	; () banked
  6635  0018B0  EE20 F006          	lfsr	2,6
  6636  0018B4  51E5               	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  6637  0018B6  26D9               	addwf	fsr2l,f,c
  6638  0018B8  51E6               	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  6639  0018BA  22DA               	addwfc	fsr2h,f,c
  6640  0018BC  50DF               	movf	indf2,w,c
  6641  0018BE  0100               	movlb	0	; () banked
  6642  0018C0  6FE9               	movwf	??_RTCC_adjust_time_inc& (0+255),b
  6643  0018C2  0100               	movlb	0	; () banked
  6644  0018C4  29E9               	incf	??_RTCC_adjust_time_inc& (0+255),w,b
  6645  0018C6  ECCE  F012         	call	_month_length
  6646  0018CA  0100               	movlb	0	; () banked
  6647  0018CC  6FEA               	movwf	(??_RTCC_adjust_time_inc+1)& (0+255),b
  6648  0018CE  0100               	movlb	0	; () banked
  6649  0018D0  51EA               	movf	(??_RTCC_adjust_time_inc+1)& (0+255),w,b
  6650  0018D2  0100               	movlb	0	; () banked
  6651  0018D4  6FBD               	movwf	___lmul@multiplier& (0+255),b
  6652  0018D6  6BBE               	clrf	(___lmul@multiplier+1)& (0+255),b
  6653  0018D8  6BBF               	clrf	(___lmul@multiplier+2)& (0+255),b
  6654  0018DA  6BC0               	clrf	(___lmul@multiplier+3)& (0+255),b
  6655  0018DC  0E80               	movlw	128
  6656  0018DE  0100               	movlb	0	; () banked
  6657  0018E0  6FC1               	movwf	___lmul@multiplicand& (0+255),b
  6658  0018E2  0E51               	movlw	81
  6659  0018E4  6FC2               	movwf	(___lmul@multiplicand+1)& (0+255),b
  6660  0018E6  0E01               	movlw	1
  6661  0018E8  6FC3               	movwf	(___lmul@multiplicand+2)& (0+255),b
  6662  0018EA  0E00               	movlw	0
  6663  0018EC  6FC4               	movwf	(___lmul@multiplicand+3)& (0+255),b
  6664  0018EE  EC1E  F019         	call	___lmul	;wreg free
  6665  0018F2  C0E7  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6666  0018F6  C0E8  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6667  0018FA  0100               	movlb	0	; () banked
  6668  0018FC  51BD               	movf	?___lmul& (0+255),w,b
  6669  0018FE  26DE               	addwf	postinc2,f,c
  6670  001900  0100               	movlb	0	; () banked
  6671  001902  51BE               	movf	(?___lmul+1)& (0+255),w,b
  6672  001904  22DE               	addwfc	postinc2,f,c
  6673  001906  0100               	movlb	0	; () banked
  6674  001908  51BF               	movf	(?___lmul+2)& (0+255),w,b
  6675  00190A  22DE               	addwfc	postinc2,f,c
  6676  00190C  0100               	movlb	0	; () banked
  6677  00190E  51C0               	movf	(?___lmul+3)& (0+255),w,b
  6678  001910  22DE               	addwfc	postinc2,f,c
  6679                           
  6680                           ; BSR set to: 0
  6681  001912  0100               	movlb	0	; () banked
  6682  001914  2BED               	incf	RTCC_adjust_time_inc@i_2218& (0+255),f,b
  6683  001916                     l5209:
  6684                           
  6685                           ; BSR set to: 0
  6686  001916  0100               	movlb	0	; () banked
  6687  001918  EE20 F005          	lfsr	2,5
  6688  00191C  51E5               	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  6689  00191E  26D9               	addwf	fsr2l,f,c
  6690  001920  51E6               	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  6691  001922  22DA               	addwfc	fsr2h,f,c
  6692  001924  50DE               	movf	postinc2,w,c
  6693  001926  0100               	movlb	0	; () banked
  6694  001928  5DED               	subwf	RTCC_adjust_time_inc@i_2218& (0+255),w,b
  6695  00192A  A0D8               	btfss	status,0,c
  6696  00192C  D7BE               	goto	l5205
  6697  00192E                     l5211:
  6698                           
  6699                           ; BSR set to: 0
  6700                           ;My_header\My_RTCC.h: 334: }
  6701                           ;My_header\My_RTCC.h: 335: }
  6702                           ;My_header\My_RTCC.h: 337: if (*ep >= 3155760000)*ep -= 3155760000;
  6703  00192E  C0E7  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6704  001932  C0E8  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6705  001936  0E80               	movlw	128
  6706  001938  5CDE               	subwf	postinc2,w,c
  6707  00193A  0E13               	movlw	19
  6708  00193C  58DE               	subwfb	postinc2,w,c
  6709  00193E  0E19               	movlw	25
  6710  001940  58DE               	subwfb	postinc2,w,c
  6711  001942  0EBC               	movlw	188
  6712  001944  58DE               	subwfb	postinc2,w,c
  6713  001946  A0D8               	btfss	status,0,c
  6714  001948  D00C               	goto	l5215
  6715                           
  6716                           ; BSR set to: 0
  6717  00194A  C0E7  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6718  00194E  C0E8  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6719  001952  0E80               	movlw	128
  6720  001954  5EDE               	subwf	postinc2,f,c
  6721  001956  0E13               	movlw	19
  6722  001958  5ADE               	subwfb	postinc2,f,c
  6723  00195A  0E19               	movlw	25
  6724  00195C  5ADE               	subwfb	postinc2,f,c
  6725  00195E  0EBC               	movlw	188
  6726  001960  5ADE               	subwfb	postinc2,f,c
  6727  001962                     l5215:
  6728                           
  6729                           ; BSR set to: 0
  6730                           ;My_header\My_RTCC.h: 338: RTCC_from_epoch(&caltime_now, &epoch_now);
  6731  001962  0E9D               	movlw	low _caltime_now
  6732  001964  0100               	movlb	0	; () banked
  6733  001966  6FE1               	movwf	RTCC_from_epoch@ct& (0+255),b
  6734  001968  0E00               	movlw	high _caltime_now
  6735  00196A  0100               	movlb	0	; () banked
  6736  00196C  6FE2               	movwf	(RTCC_from_epoch@ct+1)& (0+255),b
  6737  00196E  0EA4               	movlw	low _epoch_now
  6738  001970  0100               	movlb	0	; () banked
  6739  001972  6FE3               	movwf	RTCC_from_epoch@ep& (0+255),b
  6740  001974  0E00               	movlw	high _epoch_now
  6741  001976  0100               	movlb	0	; () banked
  6742  001978  6FE4               	movwf	(RTCC_from_epoch@ep+1)& (0+255),b
  6743  00197A  ECBE  F01C         	call	_RTCC_from_epoch	;wreg free
  6744                           
  6745                           ;My_header\My_RTCC.h: 339: time_change_flag = 1;
  6746  00197E  0E01               	movlw	1
  6747  001980  0100               	movlb	0	; () banked
  6748  001982  6F93               	movwf	_time_change_flag& (0+255),b
  6749                           
  6750                           ; BSR set to: 0
  6751  001984  0012               	return		;funcret
  6752  001986                     __end_of_RTCC_adjust_time_inc:
  6753                           	opt stack 0
  6754                           tblptru	equ	0xFF8
  6755                           tblptrh	equ	0xFF7
  6756                           tblptrl	equ	0xFF6
  6757                           tablat	equ	0xFF5
  6758                           prodh	equ	0xFF4
  6759                           prodl	equ	0xFF3
  6760                           intcon	equ	0xFF2
  6761                           intcon2	equ	0xFF1
  6762                           indf0	equ	0xFEF
  6763                           postinc0	equ	0xFEE
  6764                           fsr0h	equ	0xFEA
  6765                           fsr0l	equ	0xFE9
  6766                           wreg	equ	0xFE8
  6767                           indf2	equ	0xFDF
  6768                           postinc2	equ	0xFDE
  6769                           postdec2	equ	0xFDD
  6770                           fsr2h	equ	0xFDA
  6771                           fsr2l	equ	0xFD9
  6772                           status	equ	0xFD8
  6773                           
  6774 ;; *************** function _RTCC_adjust_time_dec *****************
  6775 ;; Defined at:
  6776 ;;		line 342 in file "../My_header\My_RTCC.h"
  6777 ;; Parameters:    Size  Location     Type
  6778 ;;  ct              2   53[BANK0 ] PTR struct .
  6779 ;;		 -> caltime_now(7), 
  6780 ;;  ep              2   55[BANK0 ] PTR unsigned long 
  6781 ;;		 -> epoch_now(4), 
  6782 ;; Auto vars:     Size  Location     Type
  6783 ;;  i               1   61[BANK0 ] unsigned char 
  6784 ;;  i               1   62[BANK0 ] unsigned char 
  6785 ;; Return value:  Size  Location     Type
  6786 ;;		None               void
  6787 ;; Registers used:
  6788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6789 ;; Tracked objects:
  6790 ;;		On entry : 0/0
  6791 ;;		On exit  : 0/0
  6792 ;;		Unchanged: 0/0
  6793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6794 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6795 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6796 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6797 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6798 ;;Total ram usage:       10 bytes
  6799 ;; Hardware stack levels used:    1
  6800 ;; Hardware stack levels required when called:    8
  6801 ;; This function calls:
  6802 ;;		_RTCC_from_RTCC
  6803 ;;		_RTCC_from_epoch
  6804 ;;		___lmul
  6805 ;;		_month_length
  6806 ;; This function is called by:
  6807 ;;		_RTCC_adjust_time_button
  6808 ;; This function uses a non-reentrant model
  6809 ;;
  6810                           
  6811                           	psect	text38
  6812  001986                     __ptext38:
  6813                           	opt stack 0
  6814  001986                     _RTCC_adjust_time_dec:
  6815                           	opt stack 21
  6816                           
  6817                           ;My_header\My_RTCC.h: 343: RTCC_from_RTCC(ct, ep);
  6818                           
  6819                           ; BSR set to: 0
  6820                           ;incstack = 0
  6821  001986  C0E5  F0D8         	movff	RTCC_adjust_time_dec@ct,RTCC_from_RTCC@ct
  6822  00198A  C0E6  F0D9         	movff	RTCC_adjust_time_dec@ct+1,RTCC_from_RTCC@ct+1
  6823  00198E  C0E7  F0DA         	movff	RTCC_adjust_time_dec@ep,RTCC_from_RTCC@ep
  6824  001992  C0E8  F0DB         	movff	RTCC_adjust_time_dec@ep+1,RTCC_from_RTCC@ep+1
  6825  001996  ECCF  F01C         	call	_RTCC_from_RTCC	;wreg free
  6826                           
  6827                           ;My_header\My_RTCC.h: 344: if (edit_flag.flag.ss) *ep -= 1;
  6828  00199A  0100               	movlb	0	; () banked
  6829  00199C  A191               	btfss	_edit_flag& (0+255),0,b
  6830  00199E  D009               	goto	l5225
  6831                           
  6832                           ; BSR set to: 0
  6833  0019A0  C0E7  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6834  0019A4  C0E8  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6835  0019A8  06DE               	decf	postinc2,f,c
  6836  0019AA  0E00               	movlw	0
  6837  0019AC  5ADE               	subwfb	postinc2,f,c
  6838  0019AE  5ADE               	subwfb	postinc2,f,c
  6839  0019B0  5ADE               	subwfb	postinc2,f,c
  6840  0019B2                     l5225:
  6841                           
  6842                           ; BSR set to: 0
  6843                           ;My_header\My_RTCC.h: 345: if (edit_flag.flag.mm) *ep -= ((epoch_t)60);
  6844  0019B2  0100               	movlb	0	; () banked
  6845  0019B4  A391               	btfss	_edit_flag& (0+255),1,b
  6846  0019B6  D00A               	goto	l5229
  6847                           
  6848                           ; BSR set to: 0
  6849  0019B8  0E3C               	movlw	60
  6850  0019BA  C0E7  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6851  0019BE  C0E8  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6852  0019C2  5EDE               	subwf	postinc2,f,c
  6853  0019C4  0E00               	movlw	0
  6854  0019C6  5ADE               	subwfb	postinc2,f,c
  6855  0019C8  5ADE               	subwfb	postinc2,f,c
  6856  0019CA  5ADE               	subwfb	postinc2,f,c
  6857  0019CC                     l5229:
  6858                           
  6859                           ; BSR set to: 0
  6860                           ;My_header\My_RTCC.h: 346: if (edit_flag.flag.hh) *ep -= ((epoch_t)60*60);
  6861  0019CC  0100               	movlb	0	; () banked
  6862  0019CE  A591               	btfss	_edit_flag& (0+255),2,b
  6863  0019D0  D00C               	goto	l5233
  6864                           
  6865                           ; BSR set to: 0
  6866  0019D2  C0E7  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6867  0019D6  C0E8  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6868  0019DA  0E10               	movlw	16
  6869  0019DC  5EDE               	subwf	postinc2,f,c
  6870  0019DE  0E0E               	movlw	14
  6871  0019E0  5ADE               	subwfb	postinc2,f,c
  6872  0019E2  0E00               	movlw	0
  6873  0019E4  5ADE               	subwfb	postinc2,f,c
  6874  0019E6  0E00               	movlw	0
  6875  0019E8  5ADE               	subwfb	postinc2,f,c
  6876  0019EA                     l5233:
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;My_header\My_RTCC.h: 347: if (edit_flag.flag.DD) *ep -= ((epoch_t)60*60*24);
  6880  0019EA  0100               	movlb	0	; () banked
  6881  0019EC  A791               	btfss	_edit_flag& (0+255),3,b
  6882  0019EE  D00C               	goto	l5237
  6883                           
  6884                           ; BSR set to: 0
  6885  0019F0  C0E7  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6886  0019F4  C0E8  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6887  0019F8  0E80               	movlw	128
  6888  0019FA  5EDE               	subwf	postinc2,f,c
  6889  0019FC  0E51               	movlw	81
  6890  0019FE  5ADE               	subwfb	postinc2,f,c
  6891  001A00  0E01               	movlw	1
  6892  001A02  5ADE               	subwfb	postinc2,f,c
  6893  001A04  0E00               	movlw	0
  6894  001A06  5ADE               	subwfb	postinc2,f,c
  6895  001A08                     l5237:
  6896                           
  6897                           ; BSR set to: 0
  6898                           ;My_header\My_RTCC.h: 348: if (edit_flag.flag.MM) *ep -= ((epoch_t)60*60*24) * month_len
      +                          gth(ct->YY, ct->MM);
  6899  001A08  0100               	movlb	0	; () banked
  6900  001A0A  A991               	btfss	_edit_flag& (0+255),4,b
  6901  001A0C  D038               	goto	l5241
  6902                           
  6903                           ; BSR set to: 0
  6904  001A0E  0100               	movlb	0	; () banked
  6905  001A10  EE20 F005          	lfsr	2,5
  6906  001A14  51E5               	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  6907  001A16  26D9               	addwf	fsr2l,f,c
  6908  001A18  51E6               	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  6909  001A1A  22DA               	addwfc	fsr2h,f,c
  6910  001A1C  50DF               	movf	indf2,w,c
  6911  001A1E  0100               	movlb	0	; () banked
  6912  001A20  6FB4               	movwf	month_length@month& (0+255),b
  6913  001A22  0100               	movlb	0	; () banked
  6914  001A24  EE20 F006          	lfsr	2,6
  6915  001A28  51E5               	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  6916  001A2A  26D9               	addwf	fsr2l,f,c
  6917  001A2C  51E6               	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  6918  001A2E  22DA               	addwfc	fsr2h,f,c
  6919  001A30  50DF               	movf	indf2,w,c
  6920  001A32  ECCE  F012         	call	_month_length
  6921  001A36  0100               	movlb	0	; () banked
  6922  001A38  6FE9               	movwf	??_RTCC_adjust_time_dec& (0+255),b
  6923  001A3A  0100               	movlb	0	; () banked
  6924  001A3C  51E9               	movf	??_RTCC_adjust_time_dec& (0+255),w,b
  6925  001A3E  0100               	movlb	0	; () banked
  6926  001A40  6FBD               	movwf	___lmul@multiplier& (0+255),b
  6927  001A42  6BBE               	clrf	(___lmul@multiplier+1)& (0+255),b
  6928  001A44  6BBF               	clrf	(___lmul@multiplier+2)& (0+255),b
  6929  001A46  6BC0               	clrf	(___lmul@multiplier+3)& (0+255),b
  6930  001A48  0E80               	movlw	128
  6931  001A4A  0100               	movlb	0	; () banked
  6932  001A4C  6FC1               	movwf	___lmul@multiplicand& (0+255),b
  6933  001A4E  0E51               	movlw	81
  6934  001A50  6FC2               	movwf	(___lmul@multiplicand+1)& (0+255),b
  6935  001A52  0E01               	movlw	1
  6936  001A54  6FC3               	movwf	(___lmul@multiplicand+2)& (0+255),b
  6937  001A56  0E00               	movlw	0
  6938  001A58  6FC4               	movwf	(___lmul@multiplicand+3)& (0+255),b
  6939  001A5A  EC1E  F019         	call	___lmul	;wreg free
  6940  001A5E  C0E7  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6941  001A62  C0E8  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6942  001A66  0100               	movlb	0	; () banked
  6943  001A68  51BD               	movf	?___lmul& (0+255),w,b
  6944  001A6A  5EDE               	subwf	postinc2,f,c
  6945  001A6C  0100               	movlb	0	; () banked
  6946  001A6E  51BE               	movf	(?___lmul+1)& (0+255),w,b
  6947  001A70  5ADE               	subwfb	postinc2,f,c
  6948  001A72  0100               	movlb	0	; () banked
  6949  001A74  51BF               	movf	(?___lmul+2)& (0+255),w,b
  6950  001A76  5ADE               	subwfb	postinc2,f,c
  6951  001A78  0100               	movlb	0	; () banked
  6952  001A7A  51C0               	movf	(?___lmul+3)& (0+255),w,b
  6953  001A7C  5ADE               	subwfb	postinc2,f,c
  6954  001A7E                     l5241:
  6955                           
  6956                           ; BSR set to: 0
  6957                           ;My_header\My_RTCC.h: 349: if (edit_flag.flag.YY) {
  6958  001A7E  0100               	movlb	0	; () banked
  6959  001A80  AB91               	btfss	_edit_flag& (0+255),5,b
  6960  001A82  D088               	goto	l5263
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;My_header\My_RTCC.h: 350: for (uint8_t i = ct->MM; i >= 1; i--) {
  6964  001A84  0100               	movlb	0	; () banked
  6965  001A86  EE20 F005          	lfsr	2,5
  6966  001A8A  51E5               	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  6967  001A8C  26D9               	addwf	fsr2l,f,c
  6968  001A8E  51E6               	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  6969  001A90  22DA               	addwfc	fsr2h,f,c
  6970  001A92  50DF               	movf	indf2,w,c
  6971  001A94  0100               	movlb	0	; () banked
  6972  001A96  6FEE               	movwf	RTCC_adjust_time_dec@i& (0+255),b
  6973  001A98                     l5245:
  6974                           
  6975                           ; BSR set to: 0
  6976  001A98  0100               	movlb	0	; () banked
  6977  001A9A  51EE               	movf	RTCC_adjust_time_dec@i& (0+255),w,b
  6978  001A9C  0100               	movlb	0	; () banked
  6979  001A9E  B4D8               	btfsc	status,2,c
  6980  001AA0  D033               	goto	l5255
  6981                           
  6982                           ; BSR set to: 0
  6983                           ;My_header\My_RTCC.h: 351: *ep -= ((epoch_t)60*60*24) * month_length(ct->YY, i);
  6984                           
  6985                           ; BSR set to: 0
  6986                           
  6987                           ; BSR set to: 0
  6988  001AA2  C0EE  F0B4         	movff	RTCC_adjust_time_dec@i,month_length@month
  6989  001AA6  0100               	movlb	0	; () banked
  6990  001AA8  EE20 F006          	lfsr	2,6
  6991  001AAC  51E5               	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  6992  001AAE  26D9               	addwf	fsr2l,f,c
  6993  001AB0  51E6               	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  6994  001AB2  22DA               	addwfc	fsr2h,f,c
  6995  001AB4  50DF               	movf	indf2,w,c
  6996  001AB6  ECCE  F012         	call	_month_length
  6997  001ABA  0100               	movlb	0	; () banked
  6998  001ABC  6FE9               	movwf	??_RTCC_adjust_time_dec& (0+255),b
  6999  001ABE  0100               	movlb	0	; () banked
  7000  001AC0  51E9               	movf	??_RTCC_adjust_time_dec& (0+255),w,b
  7001  001AC2  0100               	movlb	0	; () banked
  7002  001AC4  6FBD               	movwf	___lmul@multiplier& (0+255),b
  7003  001AC6  6BBE               	clrf	(___lmul@multiplier+1)& (0+255),b
  7004  001AC8  6BBF               	clrf	(___lmul@multiplier+2)& (0+255),b
  7005  001ACA  6BC0               	clrf	(___lmul@multiplier+3)& (0+255),b
  7006  001ACC  0E80               	movlw	128
  7007  001ACE  0100               	movlb	0	; () banked
  7008  001AD0  6FC1               	movwf	___lmul@multiplicand& (0+255),b
  7009  001AD2  0E51               	movlw	81
  7010  001AD4  6FC2               	movwf	(___lmul@multiplicand+1)& (0+255),b
  7011  001AD6  0E01               	movlw	1
  7012  001AD8  6FC3               	movwf	(___lmul@multiplicand+2)& (0+255),b
  7013  001ADA  0E00               	movlw	0
  7014  001ADC  6FC4               	movwf	(___lmul@multiplicand+3)& (0+255),b
  7015  001ADE  EC1E  F019         	call	___lmul	;wreg free
  7016  001AE2  C0E7  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  7017  001AE6  C0E8  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  7018  001AEA  0100               	movlb	0	; () banked
  7019  001AEC  51BD               	movf	?___lmul& (0+255),w,b
  7020  001AEE  5EDE               	subwf	postinc2,f,c
  7021  001AF0  0100               	movlb	0	; () banked
  7022  001AF2  51BE               	movf	(?___lmul+1)& (0+255),w,b
  7023  001AF4  5ADE               	subwfb	postinc2,f,c
  7024  001AF6  0100               	movlb	0	; () banked
  7025  001AF8  51BF               	movf	(?___lmul+2)& (0+255),w,b
  7026  001AFA  5ADE               	subwfb	postinc2,f,c
  7027  001AFC  0100               	movlb	0	; () banked
  7028  001AFE  51C0               	movf	(?___lmul+3)& (0+255),w,b
  7029  001B00  5ADE               	subwfb	postinc2,f,c
  7030                           
  7031                           ; BSR set to: 0
  7032  001B02  0100               	movlb	0	; () banked
  7033  001B04  07EE               	decf	RTCC_adjust_time_dec@i& (0+255),f,b
  7034  001B06  D7C8               	goto	l5245
  7035  001B08                     l5255:
  7036                           
  7037                           ; BSR set to: 0
  7038                           ;My_header\My_RTCC.h: 352: }
  7039                           ;My_header\My_RTCC.h: 353: for (uint8_t i = 12; i > ct->MM; i--) {
  7040  001B08  0E0C               	movlw	12
  7041  001B0A  0100               	movlb	0	; () banked
  7042  001B0C  6FED               	movwf	RTCC_adjust_time_dec@i_2231& (0+255),b
  7043  001B0E  D036               	goto	l5261
  7044  001B10                     l5257:
  7045                           
  7046                           ; BSR set to: 0
  7047                           ;My_header\My_RTCC.h: 354: *ep -= ((epoch_t)60*60*24) * month_length(ct->YY - 1, i);
  7048  001B10  C0ED  F0B4         	movff	RTCC_adjust_time_dec@i_2231,month_length@month
  7049  001B14  0100               	movlb	0	; () banked
  7050  001B16  EE20 F006          	lfsr	2,6
  7051  001B1A  51E5               	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  7052  001B1C  26D9               	addwf	fsr2l,f,c
  7053  001B1E  51E6               	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  7054  001B20  22DA               	addwfc	fsr2h,f,c
  7055  001B22  50DF               	movf	indf2,w,c
  7056  001B24  0100               	movlb	0	; () banked
  7057  001B26  6FE9               	movwf	??_RTCC_adjust_time_dec& (0+255),b
  7058  001B28  0100               	movlb	0	; () banked
  7059  001B2A  05E9               	decf	??_RTCC_adjust_time_dec& (0+255),w,b
  7060  001B2C  ECCE  F012         	call	_month_length
  7061  001B30  0100               	movlb	0	; () banked
  7062  001B32  6FEA               	movwf	(??_RTCC_adjust_time_dec+1)& (0+255),b
  7063  001B34  0100               	movlb	0	; () banked
  7064  001B36  51EA               	movf	(??_RTCC_adjust_time_dec+1)& (0+255),w,b
  7065  001B38  0100               	movlb	0	; () banked
  7066  001B3A  6FBD               	movwf	___lmul@multiplier& (0+255),b
  7067  001B3C  6BBE               	clrf	(___lmul@multiplier+1)& (0+255),b
  7068  001B3E  6BBF               	clrf	(___lmul@multiplier+2)& (0+255),b
  7069  001B40  6BC0               	clrf	(___lmul@multiplier+3)& (0+255),b
  7070  001B42  0E80               	movlw	128
  7071  001B44  0100               	movlb	0	; () banked
  7072  001B46  6FC1               	movwf	___lmul@multiplicand& (0+255),b
  7073  001B48  0E51               	movlw	81
  7074  001B4A  6FC2               	movwf	(___lmul@multiplicand+1)& (0+255),b
  7075  001B4C  0E01               	movlw	1
  7076  001B4E  6FC3               	movwf	(___lmul@multiplicand+2)& (0+255),b
  7077  001B50  0E00               	movlw	0
  7078  001B52  6FC4               	movwf	(___lmul@multiplicand+3)& (0+255),b
  7079  001B54  EC1E  F019         	call	___lmul	;wreg free
  7080  001B58  C0E7  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  7081  001B5C  C0E8  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  7082  001B60  0100               	movlb	0	; () banked
  7083  001B62  51BD               	movf	?___lmul& (0+255),w,b
  7084  001B64  5EDE               	subwf	postinc2,f,c
  7085  001B66  0100               	movlb	0	; () banked
  7086  001B68  51BE               	movf	(?___lmul+1)& (0+255),w,b
  7087  001B6A  5ADE               	subwfb	postinc2,f,c
  7088  001B6C  0100               	movlb	0	; () banked
  7089  001B6E  51BF               	movf	(?___lmul+2)& (0+255),w,b
  7090  001B70  5ADE               	subwfb	postinc2,f,c
  7091  001B72  0100               	movlb	0	; () banked
  7092  001B74  51C0               	movf	(?___lmul+3)& (0+255),w,b
  7093  001B76  5ADE               	subwfb	postinc2,f,c
  7094                           
  7095                           ; BSR set to: 0
  7096  001B78  0100               	movlb	0	; () banked
  7097  001B7A  07ED               	decf	RTCC_adjust_time_dec@i_2231& (0+255),f,b
  7098  001B7C                     l5261:
  7099                           
  7100                           ; BSR set to: 0
  7101  001B7C  0100               	movlb	0	; () banked
  7102  001B7E  EE20 F005          	lfsr	2,5
  7103  001B82  51E5               	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  7104  001B84  26D9               	addwf	fsr2l,f,c
  7105  001B86  51E6               	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  7106  001B88  22DA               	addwfc	fsr2h,f,c
  7107  001B8A  0100               	movlb	0	; () banked
  7108  001B8C  51ED               	movf	RTCC_adjust_time_dec@i_2231& (0+255),w,b
  7109  001B8E  5CDE               	subwf	postinc2,w,c
  7110  001B90  A0D8               	btfss	status,0,c
  7111  001B92  D7BE               	goto	l5257
  7112  001B94                     l5263:
  7113                           
  7114                           ; BSR set to: 0
  7115                           ;My_header\My_RTCC.h: 355: }
  7116                           ;My_header\My_RTCC.h: 356: }
  7117                           ;My_header\My_RTCC.h: 358: if (*ep >= 3155760000)*ep += 3155760000;
  7118  001B94  C0E7  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  7119  001B98  C0E8  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  7120  001B9C  0E80               	movlw	128
  7121  001B9E  5CDE               	subwf	postinc2,w,c
  7122  001BA0  0E13               	movlw	19
  7123  001BA2  58DE               	subwfb	postinc2,w,c
  7124  001BA4  0E19               	movlw	25
  7125  001BA6  58DE               	subwfb	postinc2,w,c
  7126  001BA8  0EBC               	movlw	188
  7127  001BAA  58DE               	subwfb	postinc2,w,c
  7128  001BAC  A0D8               	btfss	status,0,c
  7129  001BAE  D00C               	goto	l5267
  7130                           
  7131                           ; BSR set to: 0
  7132  001BB0  C0E7  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  7133  001BB4  C0E8  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  7134  001BB8  0E80               	movlw	128
  7135  001BBA  26DE               	addwf	postinc2,f,c
  7136  001BBC  0E13               	movlw	19
  7137  001BBE  22DE               	addwfc	postinc2,f,c
  7138  001BC0  0E19               	movlw	25
  7139  001BC2  22DE               	addwfc	postinc2,f,c
  7140  001BC4  0EBC               	movlw	188
  7141  001BC6  22DE               	addwfc	postinc2,f,c
  7142  001BC8                     l5267:
  7143                           
  7144                           ; BSR set to: 0
  7145                           ;My_header\My_RTCC.h: 359: RTCC_from_epoch(&caltime_now, &epoch_now);
  7146  001BC8  0E9D               	movlw	low _caltime_now
  7147  001BCA  0100               	movlb	0	; () banked
  7148  001BCC  6FE1               	movwf	RTCC_from_epoch@ct& (0+255),b
  7149  001BCE  0E00               	movlw	high _caltime_now
  7150  001BD0  0100               	movlb	0	; () banked
  7151  001BD2  6FE2               	movwf	(RTCC_from_epoch@ct+1)& (0+255),b
  7152  001BD4  0EA4               	movlw	low _epoch_now
  7153  001BD6  0100               	movlb	0	; () banked
  7154  001BD8  6FE3               	movwf	RTCC_from_epoch@ep& (0+255),b
  7155  001BDA  0E00               	movlw	high _epoch_now
  7156  001BDC  0100               	movlb	0	; () banked
  7157  001BDE  6FE4               	movwf	(RTCC_from_epoch@ep+1)& (0+255),b
  7158  001BE0  ECBE  F01C         	call	_RTCC_from_epoch	;wreg free
  7159                           
  7160                           ;My_header\My_RTCC.h: 360: time_change_flag = 1;
  7161  001BE4  0E01               	movlw	1
  7162  001BE6  0100               	movlb	0	; () banked
  7163  001BE8  6F93               	movwf	_time_change_flag& (0+255),b
  7164                           
  7165                           ; BSR set to: 0
  7166  001BEA  0012               	return		;funcret
  7167  001BEC                     __end_of_RTCC_adjust_time_dec:
  7168                           	opt stack 0
  7169                           tblptru	equ	0xFF8
  7170                           tblptrh	equ	0xFF7
  7171                           tblptrl	equ	0xFF6
  7172                           tablat	equ	0xFF5
  7173                           prodh	equ	0xFF4
  7174                           prodl	equ	0xFF3
  7175                           intcon	equ	0xFF2
  7176                           intcon2	equ	0xFF1
  7177                           indf0	equ	0xFEF
  7178                           postinc0	equ	0xFEE
  7179                           fsr0h	equ	0xFEA
  7180                           fsr0l	equ	0xFE9
  7181                           wreg	equ	0xFE8
  7182                           indf2	equ	0xFDF
  7183                           postinc2	equ	0xFDE
  7184                           postdec2	equ	0xFDD
  7185                           fsr2h	equ	0xFDA
  7186                           fsr2l	equ	0xFD9
  7187                           status	equ	0xFD8
  7188                           
  7189 ;; *************** function _RTCC_from_epoch *****************
  7190 ;; Defined at:
  7191 ;;		line 242 in file "../My_header\My_RTCC.h"
  7192 ;; Parameters:    Size  Location     Type
  7193 ;;  ct              2   49[BANK0 ] PTR struct .
  7194 ;;		 -> caltime_now(7), 
  7195 ;;  ep              2   51[BANK0 ] PTR unsigned long 
  7196 ;;		 -> epoch_now(4), 
  7197 ;; Auto vars:     Size  Location     Type
  7198 ;;		None
  7199 ;; Return value:  Size  Location     Type
  7200 ;;		None               void
  7201 ;; Registers used:
  7202 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7203 ;; Tracked objects:
  7204 ;;		On entry : 0/0
  7205 ;;		On exit  : 0/0
  7206 ;;		Unchanged: 0/0
  7207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7208 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7211 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7212 ;;Total ram usage:        4 bytes
  7213 ;; Hardware stack levels used:    1
  7214 ;; Hardware stack levels required when called:    7
  7215 ;; This function calls:
  7216 ;;		_caltime_to_RTCC
  7217 ;;		_epoch_to_caltime
  7218 ;; This function is called by:
  7219 ;;		_RTCC_adjust_time_inc
  7220 ;;		_RTCC_adjust_time_dec
  7221 ;; This function uses a non-reentrant model
  7222 ;;
  7223                           
  7224                           	psect	text39
  7225  00397C                     __ptext39:
  7226                           	opt stack 0
  7227  00397C                     _RTCC_from_epoch:
  7228                           	opt stack 21
  7229                           
  7230                           ;My_header\My_RTCC.h: 243: epoch_to_caltime(ct, ep);
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;incstack = 0
  7234  00397C  C0E1  F0D1         	movff	RTCC_from_epoch@ct,epoch_to_caltime@ct
  7235  003980  C0E2  F0D2         	movff	RTCC_from_epoch@ct+1,epoch_to_caltime@ct+1
  7236  003984  C0E3  F0D3         	movff	RTCC_from_epoch@ep,epoch_to_caltime@ep
  7237  003988  C0E4  F0D4         	movff	RTCC_from_epoch@ep+1,epoch_to_caltime@ep+1
  7238  00398C  ECEC  F00E         	call	_epoch_to_caltime	;wreg free
  7239                           
  7240                           ;My_header\My_RTCC.h: 244: caltime_to_RTCC(ct);
  7241  003990  C0E1  F0B8         	movff	RTCC_from_epoch@ct,caltime_to_RTCC@ct
  7242  003994  C0E2  F0B9         	movff	RTCC_from_epoch@ct+1,caltime_to_RTCC@ct+1
  7243  003998  EC10  F014         	call	_caltime_to_RTCC	;wreg free
  7244  00399C  0012               	return		;funcret
  7245  00399E                     __end_of_RTCC_from_epoch:
  7246                           	opt stack 0
  7247                           tblptru	equ	0xFF8
  7248                           tblptrh	equ	0xFF7
  7249                           tblptrl	equ	0xFF6
  7250                           tablat	equ	0xFF5
  7251                           prodh	equ	0xFF4
  7252                           prodl	equ	0xFF3
  7253                           intcon	equ	0xFF2
  7254                           intcon2	equ	0xFF1
  7255                           indf0	equ	0xFEF
  7256                           postinc0	equ	0xFEE
  7257                           fsr0h	equ	0xFEA
  7258                           fsr0l	equ	0xFE9
  7259                           wreg	equ	0xFE8
  7260                           indf2	equ	0xFDF
  7261                           postinc2	equ	0xFDE
  7262                           postdec2	equ	0xFDD
  7263                           fsr2h	equ	0xFDA
  7264                           fsr2l	equ	0xFD9
  7265                           status	equ	0xFD8
  7266                           
  7267 ;; *************** function _epoch_to_caltime *****************
  7268 ;; Defined at:
  7269 ;;		line 157 in file "../My_header\My_RTCC.h"
  7270 ;; Parameters:    Size  Location     Type
  7271 ;;  ct              2   33[BANK0 ] PTR struct .
  7272 ;;		 -> caltime_now(7), 
  7273 ;;  ep              2   35[BANK0 ] PTR unsigned long 
  7274 ;;		 -> epoch_now(4), 
  7275 ;; Auto vars:     Size  Location     Type
  7276 ;;  num             4   45[BANK0 ] unsigned long 
  7277 ;;  day             2   41[BANK0 ] unsigned int 
  7278 ;;  day_since_ep    2   39[BANK0 ] unsigned int 
  7279 ;;  month           1   44[BANK0 ] unsigned char 
  7280 ;;  year            1   43[BANK0 ] unsigned char 
  7281 ;; Return value:  Size  Location     Type
  7282 ;;		None               void
  7283 ;; Registers used:
  7284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7285 ;; Tracked objects:
  7286 ;;		On entry : 0/0
  7287 ;;		On exit  : 0/0
  7288 ;;		Unchanged: 0/0
  7289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7290 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7291 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7292 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7293 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7294 ;;Total ram usage:       16 bytes
  7295 ;; Hardware stack levels used:    1
  7296 ;; Hardware stack levels required when called:    6
  7297 ;; This function calls:
  7298 ;;		_get_quot_rem
  7299 ;;		_month_length
  7300 ;; This function is called by:
  7301 ;;		_RTCC_from_epoch
  7302 ;;		_RTCC_from_caltime
  7303 ;; This function uses a non-reentrant model
  7304 ;;
  7305                           
  7306                           	psect	text40
  7307  001DD8                     __ptext40:
  7308                           	opt stack 0
  7309  001DD8                     _epoch_to_caltime:
  7310                           	opt stack 21
  7311                           
  7312                           ;My_header\My_RTCC.h: 160: static uint16_t day_cache = 0;
  7313                           ;My_header\My_RTCC.h: 161: static uint8_t month_cache = 1;
  7314                           ;My_header\My_RTCC.h: 162: static uint8_t year_cache = 0;
  7315                           ;My_header\My_RTCC.h: 163: uint16_t day_since_epoch;
  7316                           ;My_header\My_RTCC.h: 164: uint16_t day;
  7317                           ;My_header\My_RTCC.h: 165: uint8_t year = 0;
  7318                           
  7319                           ;incstack = 0
  7320  001DD8  0E00               	movlw	0
  7321  001DDA  0100               	movlb	0	; () banked
  7322  001DDC  6FDB               	movwf	epoch_to_caltime@year& (0+255),b
  7323                           
  7324                           ;My_header\My_RTCC.h: 166: uint8_t month = 1;
  7325  001DDE  0E01               	movlw	1
  7326  001DE0  0100               	movlb	0	; () banked
  7327  001DE2  6FDC               	movwf	epoch_to_caltime@month& (0+255),b
  7328                           
  7329                           ; BSR set to: 0
  7330                           ;My_header\My_RTCC.h: 167: epoch_t num;
  7331                           ;My_header\My_RTCC.h: 169: num = *ep;
  7332  001DE4  C0D3  FFD9         	movff	epoch_to_caltime@ep,fsr2l
  7333  001DE8  C0D4  FFDA         	movff	epoch_to_caltime@ep+1,fsr2h
  7334  001DEC  CFDE F0DD          	movff	postinc2,epoch_to_caltime@num
  7335  001DF0  CFDE F0DE          	movff	postinc2,epoch_to_caltime@num+1
  7336  001DF4  CFDE F0DF          	movff	postinc2,epoch_to_caltime@num+2
  7337  001DF8  CFDE F0E0          	movff	postinc2,epoch_to_caltime@num+3
  7338                           
  7339                           ; BSR set to: 0
  7340                           ;My_header\My_RTCC.h: 170: ct->ss = get_quot_rem(&num, 60);
  7341  001DFC  0EDD               	movlw	low epoch_to_caltime@num
  7342  001DFE  0100               	movlb	0	; () banked
  7343  001E00  6FC9               	movwf	get_quot_rem@quot& (0+255),b
  7344  001E02  0E00               	movlw	high epoch_to_caltime@num
  7345  001E04  0100               	movlb	0	; () banked
  7346  001E06  6FCA               	movwf	(get_quot_rem@quot+1)& (0+255),b
  7347  001E08  0E3C               	movlw	60
  7348  001E0A  0100               	movlb	0	; () banked
  7349  001E0C  6FCB               	movwf	get_quot_rem@div& (0+255),b
  7350  001E0E  EC3D  F013         	call	_get_quot_rem	;wreg free
  7351  001E12  0100               	movlb	0	; () banked
  7352  001E14  51C9               	movf	?_get_quot_rem& (0+255),w,b
  7353  001E16  C0D1  FFD9         	movff	epoch_to_caltime@ct,fsr2l
  7354  001E1A  C0D2  FFDA         	movff	epoch_to_caltime@ct+1,fsr2h
  7355  001E1E  6EDF               	movwf	indf2,c
  7356                           
  7357                           ; BSR set to: 0
  7358                           ;My_header\My_RTCC.h: 171: ct->mm = get_quot_rem(&num, 60);
  7359  001E20  0EDD               	movlw	low epoch_to_caltime@num
  7360  001E22  0100               	movlb	0	; () banked
  7361  001E24  6FC9               	movwf	get_quot_rem@quot& (0+255),b
  7362  001E26  0E00               	movlw	high epoch_to_caltime@num
  7363  001E28  0100               	movlb	0	; () banked
  7364  001E2A  6FCA               	movwf	(get_quot_rem@quot+1)& (0+255),b
  7365  001E2C  0E3C               	movlw	60
  7366  001E2E  0100               	movlb	0	; () banked
  7367  001E30  6FCB               	movwf	get_quot_rem@div& (0+255),b
  7368  001E32  EC3D  F013         	call	_get_quot_rem	;wreg free
  7369  001E36  0100               	movlb	0	; () banked
  7370  001E38  EE20 F001          	lfsr	2,1
  7371  001E3C  51D1               	movf	epoch_to_caltime@ct& (0+255),w,b
  7372  001E3E  26D9               	addwf	fsr2l,f,c
  7373  001E40  51D2               	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
  7374  001E42  22DA               	addwfc	fsr2h,f,c
  7375  001E44  0100               	movlb	0	; () banked
  7376  001E46  C0C9  FFDF         	movff	?_get_quot_rem,indf2
  7377                           
  7378                           ; BSR set to: 0
  7379                           ;My_header\My_RTCC.h: 172: ct->hh = get_quot_rem(&num, 24);
  7380  001E4A  0EDD               	movlw	low epoch_to_caltime@num
  7381  001E4C  0100               	movlb	0	; () banked
  7382  001E4E  6FC9               	movwf	get_quot_rem@quot& (0+255),b
  7383  001E50  0E00               	movlw	high epoch_to_caltime@num
  7384  001E52  0100               	movlb	0	; () banked
  7385  001E54  6FCA               	movwf	(get_quot_rem@quot+1)& (0+255),b
  7386  001E56  0E18               	movlw	24
  7387  001E58  0100               	movlb	0	; () banked
  7388  001E5A  6FCB               	movwf	get_quot_rem@div& (0+255),b
  7389  001E5C  EC3D  F013         	call	_get_quot_rem	;wreg free
  7390  001E60  0100               	movlb	0	; () banked
  7391  001E62  EE20 F002          	lfsr	2,2
  7392  001E66  51D1               	movf	epoch_to_caltime@ct& (0+255),w,b
  7393  001E68  26D9               	addwf	fsr2l,f,c
  7394  001E6A  51D2               	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
  7395  001E6C  22DA               	addwfc	fsr2h,f,c
  7396  001E6E  0100               	movlb	0	; () banked
  7397  001E70  C0C9  FFDF         	movff	?_get_quot_rem,indf2
  7398                           
  7399                           ; BSR set to: 0
  7400                           ;My_header\My_RTCC.h: 173: day = num;
  7401  001E74  C0DD  F0D9         	movff	epoch_to_caltime@num,epoch_to_caltime@day
  7402  001E78  C0DE  F0DA         	movff	epoch_to_caltime@num+1,epoch_to_caltime@day+1
  7403                           
  7404                           ; BSR set to: 0
  7405                           ;My_header\My_RTCC.h: 174: day_since_epoch = day;
  7406  001E7C  C0D9  F0D7         	movff	epoch_to_caltime@day,epoch_to_caltime@day_since_epoch
  7407  001E80  C0DA  F0D8         	movff	epoch_to_caltime@day+1,epoch_to_caltime@day_since_epoch+1
  7408                           
  7409                           ; BSR set to: 0
  7410                           ;My_header\My_RTCC.h: 176: num += 6;
  7411  001E84  0E06               	movlw	6
  7412  001E86  0100               	movlb	0	; () banked
  7413  001E88  27DD               	addwf	epoch_to_caltime@num& (0+255),f,b
  7414  001E8A  0E00               	movlw	0
  7415  001E8C  23DE               	addwfc	(epoch_to_caltime@num+1)& (0+255),f,b
  7416  001E8E  23DF               	addwfc	(epoch_to_caltime@num+2)& (0+255),f,b
  7417  001E90  23E0               	addwfc	(epoch_to_caltime@num+3)& (0+255),f,b
  7418                           
  7419                           ; BSR set to: 0
  7420                           ;My_header\My_RTCC.h: 177: ct->EE = get_quot_rem(&num, 7);
  7421  001E92  0EDD               	movlw	low epoch_to_caltime@num
  7422  001E94  0100               	movlb	0	; () banked
  7423  001E96  6FC9               	movwf	get_quot_rem@quot& (0+255),b
  7424  001E98  0E00               	movlw	high epoch_to_caltime@num
  7425  001E9A  0100               	movlb	0	; () banked
  7426  001E9C  6FCA               	movwf	(get_quot_rem@quot+1)& (0+255),b
  7427  001E9E  0E07               	movlw	7
  7428  001EA0  0100               	movlb	0	; () banked
  7429  001EA2  6FCB               	movwf	get_quot_rem@div& (0+255),b
  7430  001EA4  EC3D  F013         	call	_get_quot_rem	;wreg free
  7431  001EA8  0100               	movlb	0	; () banked
  7432  001EAA  EE20 F003          	lfsr	2,3
  7433  001EAE  51D1               	movf	epoch_to_caltime@ct& (0+255),w,b
  7434  001EB0  26D9               	addwf	fsr2l,f,c
  7435  001EB2  51D2               	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
  7436  001EB4  22DA               	addwfc	fsr2h,f,c
  7437  001EB6  0100               	movlb	0	; () banked
  7438  001EB8  C0C9  FFDF         	movff	?_get_quot_rem,indf2
  7439                           
  7440                           ;My_header\My_RTCC.h: 186: while (day >= month_length(year, month)) {
  7441  001EBC  D03F               	goto	l4995
  7442  001EBE                     l418:
  7443                           
  7444                           ; BSR set to: 0
  7445                           ;My_header\My_RTCC.h: 187: LATB2 = 1;
  7446  001EBE  848A               	bsf	3978,2,c	;volatile
  7447                           
  7448                           ; BSR set to: 0
  7449                           ;My_header\My_RTCC.h: 188: day = day - month_length(year, month);
  7450  001EC0  C0DC  F0B4         	movff	epoch_to_caltime@month,month_length@month
  7451  001EC4  0100               	movlb	0	; () banked
  7452  001EC6  51DB               	movf	epoch_to_caltime@year& (0+255),w,b
  7453  001EC8  ECCE  F012         	call	_month_length
  7454  001ECC  0100               	movlb	0	; () banked
  7455  001ECE  6FD5               	movwf	??_epoch_to_caltime& (0+255),b
  7456  001ED0  6BD6               	clrf	(??_epoch_to_caltime+1)& (0+255),b
  7457  001ED2  0100               	movlb	0	; () banked
  7458  001ED4  1FD5               	comf	??_epoch_to_caltime& (0+255),f,b
  7459  001ED6  1FD6               	comf	(??_epoch_to_caltime+1)& (0+255),f,b
  7460  001ED8  4BD5               	infsnz	??_epoch_to_caltime& (0+255),f,b
  7461  001EDA  2BD6               	incf	(??_epoch_to_caltime+1)& (0+255),f,b
  7462  001EDC  0100               	movlb	0	; () banked
  7463  001EDE  51D9               	movf	epoch_to_caltime@day& (0+255),w,b
  7464  001EE0  0100               	movlb	0	; () banked
  7465  001EE2  25D5               	addwf	??_epoch_to_caltime& (0+255),w,b
  7466  001EE4  0100               	movlb	0	; () banked
  7467  001EE6  6FD9               	movwf	epoch_to_caltime@day& (0+255),b
  7468  001EE8  0100               	movlb	0	; () banked
  7469  001EEA  51DA               	movf	(epoch_to_caltime@day+1)& (0+255),w,b
  7470  001EEC  0100               	movlb	0	; () banked
  7471  001EEE  21D6               	addwfc	(??_epoch_to_caltime+1)& (0+255),w,b
  7472  001EF0  0100               	movlb	0	; () banked
  7473  001EF2  6FDA               	movwf	(epoch_to_caltime@day+1)& (0+255),b
  7474                           
  7475                           ; BSR set to: 0
  7476                           ;My_header\My_RTCC.h: 189: if (month == 12) {
  7477  001EF4  0E0C               	movlw	12
  7478  001EF6  0100               	movlb	0	; () banked
  7479  001EF8  19DC               	xorwf	epoch_to_caltime@month& (0+255),w,b
  7480  001EFA  A4D8               	btfss	status,2,c
  7481  001EFC  D019               	goto	l4989
  7482                           
  7483                           ; BSR set to: 0
  7484                           ;My_header\My_RTCC.h: 190: month = 1;
  7485  001EFE  0E01               	movlw	1
  7486  001F00  0100               	movlb	0	; () banked
  7487  001F02  6FDC               	movwf	epoch_to_caltime@month& (0+255),b
  7488                           
  7489                           ; BSR set to: 0
  7490                           ;My_header\My_RTCC.h: 191: year++;
  7491  001F04  0100               	movlb	0	; () banked
  7492  001F06  2BDB               	incf	epoch_to_caltime@year& (0+255),f,b
  7493                           
  7494                           ; BSR set to: 0
  7495                           ;My_header\My_RTCC.h: 193: if (year >= 100) {
  7496  001F08  0E63               	movlw	99
  7497  001F0A  0100               	movlb	0	; () banked
  7498  001F0C  65DB               	cpfsgt	epoch_to_caltime@year& (0+255),b
  7499  001F0E  D012               	goto	l4991
  7500                           
  7501                           ; BSR set to: 0
  7502                           ;My_header\My_RTCC.h: 194: *ep -= 3155760000;
  7503  001F10  C0D3  FFD9         	movff	epoch_to_caltime@ep,fsr2l
  7504  001F14  C0D4  FFDA         	movff	epoch_to_caltime@ep+1,fsr2h
  7505  001F18  0E80               	movlw	128
  7506  001F1A  5EDE               	subwf	postinc2,f,c
  7507  001F1C  0E13               	movlw	19
  7508  001F1E  5ADE               	subwfb	postinc2,f,c
  7509  001F20  0E19               	movlw	25
  7510  001F22  5ADE               	subwfb	postinc2,f,c
  7511  001F24  0EBC               	movlw	188
  7512  001F26  5ADE               	subwfb	postinc2,f,c
  7513                           
  7514                           ; BSR set to: 0
  7515                           ;My_header\My_RTCC.h: 195: year = 0;
  7516  001F28  0E00               	movlw	0
  7517  001F2A  0100               	movlb	0	; () banked
  7518  001F2C  6FDB               	movwf	epoch_to_caltime@year& (0+255),b
  7519                           
  7520                           ; BSR set to: 0
  7521                           ;My_header\My_RTCC.h: 196: }
  7522                           ;My_header\My_RTCC.h: 197: } else {
  7523  001F2E  D002               	goto	l4991
  7524  001F30                     l4989:
  7525                           
  7526                           ; BSR set to: 0
  7527                           ;My_header\My_RTCC.h: 198: month++;
  7528  001F30  0100               	movlb	0	; () banked
  7529  001F32  2BDC               	incf	epoch_to_caltime@month& (0+255),f,b
  7530  001F34                     l4991:
  7531                           
  7532                           ; BSR set to: 0
  7533                           ;My_header\My_RTCC.h: 199: }
  7534                           ;My_header\My_RTCC.h: 200: month_cache = month;
  7535  001F34  C0DC  F0F6         	movff	epoch_to_caltime@month,epoch_to_caltime@month_cache
  7536                           
  7537                           ; BSR set to: 0
  7538                           ;My_header\My_RTCC.h: 201: year_cache = year;
  7539  001F38  C0DB  F094         	movff	epoch_to_caltime@year,epoch_to_caltime@year_cache
  7540  001F3C                     l4995:
  7541                           
  7542                           ; BSR set to: 0
  7543  001F3C  C0DC  F0B4         	movff	epoch_to_caltime@month,month_length@month
  7544  001F40  0100               	movlb	0	; () banked
  7545  001F42  51DB               	movf	epoch_to_caltime@year& (0+255),w,b
  7546  001F44  ECCE  F012         	call	_month_length
  7547  001F48  0100               	movlb	0	; () banked
  7548  001F4A  6FD5               	movwf	??_epoch_to_caltime& (0+255),b
  7549  001F4C  0100               	movlb	0	; () banked
  7550  001F4E  51D5               	movf	??_epoch_to_caltime& (0+255),w,b
  7551  001F50  0100               	movlb	0	; () banked
  7552  001F52  5DD9               	subwf	epoch_to_caltime@day& (0+255),w,b
  7553  001F54  0E00               	movlw	0
  7554  001F56  59DA               	subwfb	(epoch_to_caltime@day+1)& (0+255),w,b
  7555  001F58  B0D8               	btfsc	status,0,c
  7556  001F5A  D7B1               	goto	l418
  7557                           
  7558                           ; BSR set to: 0
  7559                           ;My_header\My_RTCC.h: 202: }
  7560                           ;My_header\My_RTCC.h: 203: day_cache = day_since_epoch - day;
  7561                           
  7562                           ; BSR set to: 0
  7563  001F5C  C0D9  F0D5         	movff	epoch_to_caltime@day,??_epoch_to_caltime
  7564  001F60  C0DA  F0D6         	movff	epoch_to_caltime@day+1,??_epoch_to_caltime+1
  7565  001F64  0100               	movlb	0	; () banked
  7566  001F66  1FD5               	comf	??_epoch_to_caltime& (0+255),f,b
  7567  001F68  1FD6               	comf	(??_epoch_to_caltime+1)& (0+255),f,b
  7568  001F6A  4BD5               	infsnz	??_epoch_to_caltime& (0+255),f,b
  7569  001F6C  2BD6               	incf	(??_epoch_to_caltime+1)& (0+255),f,b
  7570  001F6E  0100               	movlb	0	; () banked
  7571  001F70  51D7               	movf	epoch_to_caltime@day_since_epoch& (0+255),w,b
  7572  001F72  0100               	movlb	0	; () banked
  7573  001F74  25D5               	addwf	??_epoch_to_caltime& (0+255),w,b
  7574  001F76  0100               	movlb	0	; () banked
  7575  001F78  6F8B               	movwf	epoch_to_caltime@day_cache& (0+255),b
  7576  001F7A  0100               	movlb	0	; () banked
  7577  001F7C  51D8               	movf	(epoch_to_caltime@day_since_epoch+1)& (0+255),w,b
  7578  001F7E  0100               	movlb	0	; () banked
  7579  001F80  21D6               	addwfc	(??_epoch_to_caltime+1)& (0+255),w,b
  7580  001F82  0100               	movlb	0	; () banked
  7581  001F84  6F8C               	movwf	(epoch_to_caltime@day_cache+1)& (0+255),b
  7582                           
  7583                           ; BSR set to: 0
  7584                           ;My_header\My_RTCC.h: 204: day++;
  7585  001F86  0100               	movlb	0	; () banked
  7586  001F88  4BD9               	infsnz	epoch_to_caltime@day& (0+255),f,b
  7587  001F8A  2BDA               	incf	(epoch_to_caltime@day+1)& (0+255),f,b
  7588                           
  7589                           ; BSR set to: 0
  7590                           ;My_header\My_RTCC.h: 206: ct->YY = year;
  7591  001F8C  0100               	movlb	0	; () banked
  7592  001F8E  EE20 F006          	lfsr	2,6
  7593  001F92  51D1               	movf	epoch_to_caltime@ct& (0+255),w,b
  7594  001F94  26D9               	addwf	fsr2l,f,c
  7595  001F96  51D2               	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
  7596  001F98  22DA               	addwfc	fsr2h,f,c
  7597  001F9A  C0DB  FFDF         	movff	epoch_to_caltime@year,indf2
  7598                           
  7599                           ; BSR set to: 0
  7600                           ;My_header\My_RTCC.h: 207: ct->MM = month;
  7601  001F9E  0100               	movlb	0	; () banked
  7602  001FA0  EE20 F005          	lfsr	2,5
  7603  001FA4  51D1               	movf	epoch_to_caltime@ct& (0+255),w,b
  7604  001FA6  26D9               	addwf	fsr2l,f,c
  7605  001FA8  51D2               	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
  7606  001FAA  22DA               	addwfc	fsr2h,f,c
  7607  001FAC  C0DC  FFDF         	movff	epoch_to_caltime@month,indf2
  7608                           
  7609                           ; BSR set to: 0
  7610                           ;My_header\My_RTCC.h: 208: ct->DD = day;
  7611  001FB0  0100               	movlb	0	; () banked
  7612  001FB2  EE20 F004          	lfsr	2,4
  7613  001FB6  51D1               	movf	epoch_to_caltime@ct& (0+255),w,b
  7614  001FB8  26D9               	addwf	fsr2l,f,c
  7615  001FBA  51D2               	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
  7616  001FBC  22DA               	addwfc	fsr2h,f,c
  7617  001FBE  C0D9  FFDF         	movff	epoch_to_caltime@day,indf2
  7618                           
  7619                           ; BSR set to: 0
  7620  001FC2  0012               	return		;funcret
  7621  001FC4                     __end_of_epoch_to_caltime:
  7622                           	opt stack 0
  7623                           tblptru	equ	0xFF8
  7624                           tblptrh	equ	0xFF7
  7625                           tblptrl	equ	0xFF6
  7626                           tablat	equ	0xFF5
  7627                           prodh	equ	0xFF4
  7628                           prodl	equ	0xFF3
  7629                           intcon	equ	0xFF2
  7630                           intcon2	equ	0xFF1
  7631                           indf0	equ	0xFEF
  7632                           postinc0	equ	0xFEE
  7633                           fsr0h	equ	0xFEA
  7634                           fsr0l	equ	0xFE9
  7635                           wreg	equ	0xFE8
  7636                           indf2	equ	0xFDF
  7637                           postinc2	equ	0xFDE
  7638                           postdec2	equ	0xFDD
  7639                           fsr2h	equ	0xFDA
  7640                           fsr2l	equ	0xFD9
  7641                           status	equ	0xFD8
  7642                           
  7643 ;; *************** function _get_quot_rem *****************
  7644 ;; Defined at:
  7645 ;;		line 112 in file "../My_header\My_RTCC.h"
  7646 ;; Parameters:    Size  Location     Type
  7647 ;;  quot            2   25[BANK0 ] PTR unsigned long 
  7648 ;;		 -> epoch_to_caltime@num(4), 
  7649 ;;  div             1   27[BANK0 ] unsigned char 
  7650 ;; Auto vars:     Size  Location     Type
  7651 ;;  num             4   29[BANK0 ] unsigned long 
  7652 ;; Return value:  Size  Location     Type
  7653 ;;                  4   25[BANK0 ] unsigned long 
  7654 ;; Registers used:
  7655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7656 ;; Tracked objects:
  7657 ;;		On entry : 0/0
  7658 ;;		On exit  : 0/0
  7659 ;;		Unchanged: 0/0
  7660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7661 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7662 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7664 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7665 ;;Total ram usage:        8 bytes
  7666 ;; Hardware stack levels used:    1
  7667 ;; Hardware stack levels required when called:    5
  7668 ;; This function calls:
  7669 ;;		___lldiv
  7670 ;;		___lmul
  7671 ;; This function is called by:
  7672 ;;		_epoch_to_caltime
  7673 ;; This function uses a non-reentrant model
  7674 ;;
  7675                           
  7676                           	psect	text41
  7677  00267A                     __ptext41:
  7678                           	opt stack 0
  7679  00267A                     _get_quot_rem:
  7680                           	opt stack 21
  7681                           
  7682                           ;My_header\My_RTCC.h: 115: epoch_t num = *quot;
  7683                           
  7684                           ; BSR set to: 0
  7685                           ;incstack = 0
  7686  00267A  C0C9  FFD9         	movff	get_quot_rem@quot,fsr2l
  7687  00267E  C0CA  FFDA         	movff	get_quot_rem@quot+1,fsr2h
  7688  002682  CFDE F0CD          	movff	postinc2,get_quot_rem@num
  7689  002686  CFDE F0CE          	movff	postinc2,get_quot_rem@num+1
  7690  00268A  CFDE F0CF          	movff	postinc2,get_quot_rem@num+2
  7691  00268E  CFDE F0D0          	movff	postinc2,get_quot_rem@num+3
  7692                           
  7693                           ;My_header\My_RTCC.h: 116: return num - (*quot = num / div) * div;
  7694  002692  0100               	movlb	0	; () banked
  7695  002694  51CB               	movf	get_quot_rem@div& (0+255),w,b
  7696  002696  0100               	movlb	0	; () banked
  7697  002698  6FB4               	movwf	___lldiv@divisor& (0+255),b
  7698  00269A  6BB5               	clrf	(___lldiv@divisor+1)& (0+255),b
  7699  00269C  6BB6               	clrf	(___lldiv@divisor+2)& (0+255),b
  7700  00269E  6BB7               	clrf	(___lldiv@divisor+3)& (0+255),b
  7701  0026A0  C0CD  F0B0         	movff	get_quot_rem@num,___lldiv@dividend
  7702  0026A4  C0CE  F0B1         	movff	get_quot_rem@num+1,___lldiv@dividend+1
  7703  0026A8  C0CF  F0B2         	movff	get_quot_rem@num+2,___lldiv@dividend+2
  7704  0026AC  C0D0  F0B3         	movff	get_quot_rem@num+3,___lldiv@dividend+3
  7705  0026B0  EC39  F015         	call	___lldiv	;wreg free
  7706  0026B4  C0C9  FFD9         	movff	get_quot_rem@quot,fsr2l
  7707  0026B8  C0CA  FFDA         	movff	get_quot_rem@quot+1,fsr2h
  7708  0026BC  0100               	movlb	0	; () banked
  7709  0026BE  C0B0  FFDE         	movff	?___lldiv,postinc2
  7710  0026C2  0100               	movlb	0	; () banked
  7711  0026C4  C0B1  FFDE         	movff	?___lldiv+1,postinc2
  7712  0026C8  0100               	movlb	0	; () banked
  7713  0026CA  C0B2  FFDE         	movff	?___lldiv+2,postinc2
  7714  0026CE  0100               	movlb	0	; () banked
  7715  0026D0  C0B3  FFDD         	movff	?___lldiv+3,postdec2
  7716  0026D4  52DD               	movf	postdec2,f,c
  7717  0026D6  52DD               	movf	postdec2,f,c
  7718  0026D8  CFDE F0BD          	movff	postinc2,___lmul@multiplier
  7719  0026DC  CFDE F0BE          	movff	postinc2,___lmul@multiplier+1
  7720  0026E0  CFDE F0BF          	movff	postinc2,___lmul@multiplier+2
  7721  0026E4  CFDE F0C0          	movff	postinc2,___lmul@multiplier+3
  7722  0026E8  0100               	movlb	0	; () banked
  7723  0026EA  51CB               	movf	get_quot_rem@div& (0+255),w,b
  7724  0026EC  0100               	movlb	0	; () banked
  7725  0026EE  6FC1               	movwf	___lmul@multiplicand& (0+255),b
  7726  0026F0  6BC2               	clrf	(___lmul@multiplicand+1)& (0+255),b
  7727  0026F2  6BC3               	clrf	(___lmul@multiplicand+2)& (0+255),b
  7728  0026F4  6BC4               	clrf	(___lmul@multiplicand+3)& (0+255),b
  7729  0026F6  EC1E  F019         	call	___lmul	;wreg free
  7730  0026FA  0100               	movlb	0	; () banked
  7731  0026FC  1FBD               	comf	?___lmul& (0+255),f,b
  7732  0026FE  0100               	movlb	0	; () banked
  7733  002700  1FBE               	comf	(?___lmul+1)& (0+255),f,b
  7734  002702  0100               	movlb	0	; () banked
  7735  002704  1FBF               	comf	(?___lmul+2)& (0+255),f,b
  7736  002706  0100               	movlb	0	; () banked
  7737  002708  1FC0               	comf	(?___lmul+3)& (0+255),f,b
  7738  00270A  0100               	movlb	0	; () banked
  7739  00270C  2BBD               	incf	?___lmul& (0+255),f,b
  7740  00270E  0E00               	movlw	0
  7741  002710  0100               	movlb	0	; () banked
  7742  002712  23BE               	addwfc	(?___lmul+1)& (0+255),f,b
  7743  002714  0100               	movlb	0	; () banked
  7744  002716  23BF               	addwfc	(?___lmul+2)& (0+255),f,b
  7745  002718  0100               	movlb	0	; () banked
  7746  00271A  23C0               	addwfc	(?___lmul+3)& (0+255),f,b
  7747  00271C  0100               	movlb	0	; () banked
  7748  00271E  51CD               	movf	get_quot_rem@num& (0+255),w,b
  7749  002720  0100               	movlb	0	; () banked
  7750  002722  25BD               	addwf	?___lmul& (0+255),w,b
  7751  002724  0100               	movlb	0	; () banked
  7752  002726  6FC9               	movwf	?_get_quot_rem& (0+255),b
  7753  002728  0100               	movlb	0	; () banked
  7754  00272A  51CE               	movf	(get_quot_rem@num+1)& (0+255),w,b
  7755  00272C  0100               	movlb	0	; () banked
  7756  00272E  21BE               	addwfc	(?___lmul+1)& (0+255),w,b
  7757  002730  0100               	movlb	0	; () banked
  7758  002732  6FCA               	movwf	(?_get_quot_rem+1)& (0+255),b
  7759  002734  0100               	movlb	0	; () banked
  7760  002736  51CF               	movf	(get_quot_rem@num+2)& (0+255),w,b
  7761  002738  0100               	movlb	0	; () banked
  7762  00273A  21BF               	addwfc	(?___lmul+2)& (0+255),w,b
  7763  00273C  0100               	movlb	0	; () banked
  7764  00273E  6FCB               	movwf	(?_get_quot_rem+2)& (0+255),b
  7765  002740  0100               	movlb	0	; () banked
  7766  002742  51D0               	movf	(get_quot_rem@num+3)& (0+255),w,b
  7767  002744  0100               	movlb	0	; () banked
  7768  002746  21C0               	addwfc	(?___lmul+3)& (0+255),w,b
  7769  002748  0100               	movlb	0	; () banked
  7770  00274A  6FCC               	movwf	(?_get_quot_rem+3)& (0+255),b
  7771  00274C  0012               	return	
  7772  00274E                     __end_of_get_quot_rem:
  7773                           	opt stack 0
  7774                           tblptru	equ	0xFF8
  7775                           tblptrh	equ	0xFF7
  7776                           tblptrl	equ	0xFF6
  7777                           tablat	equ	0xFF5
  7778                           prodh	equ	0xFF4
  7779                           prodl	equ	0xFF3
  7780                           intcon	equ	0xFF2
  7781                           intcon2	equ	0xFF1
  7782                           indf0	equ	0xFEF
  7783                           postinc0	equ	0xFEE
  7784                           fsr0h	equ	0xFEA
  7785                           fsr0l	equ	0xFE9
  7786                           wreg	equ	0xFE8
  7787                           indf2	equ	0xFDF
  7788                           postinc2	equ	0xFDE
  7789                           postdec2	equ	0xFDD
  7790                           fsr2h	equ	0xFDA
  7791                           fsr2l	equ	0xFD9
  7792                           status	equ	0xFD8
  7793                           
  7794 ;; *************** function ___lldiv *****************
  7795 ;; Defined at:
  7796 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lldiv.c"
  7797 ;; Parameters:    Size  Location     Type
  7798 ;;  dividend        4    0[BANK0 ] unsigned long 
  7799 ;;  divisor         4    4[BANK0 ] unsigned long 
  7800 ;; Auto vars:     Size  Location     Type
  7801 ;;  quotient        4    8[BANK0 ] unsigned long 
  7802 ;;  counter         1   12[BANK0 ] unsigned char 
  7803 ;; Return value:  Size  Location     Type
  7804 ;;                  4    0[BANK0 ] unsigned long 
  7805 ;; Registers used:
  7806 ;;		wreg, status,2, status,0
  7807 ;; Tracked objects:
  7808 ;;		On entry : 0/0
  7809 ;;		On exit  : 0/0
  7810 ;;		Unchanged: 0/0
  7811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7812 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7813 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7815 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7816 ;;Total ram usage:       13 bytes
  7817 ;; Hardware stack levels used:    1
  7818 ;; Hardware stack levels required when called:    4
  7819 ;; This function calls:
  7820 ;;		Nothing
  7821 ;; This function is called by:
  7822 ;;		_get_quot_rem
  7823 ;;		_CTMU_read
  7824 ;;		_my_utoa32
  7825 ;; This function uses a non-reentrant model
  7826 ;;
  7827                           
  7828                           	psect	text42
  7829  002A72                     __ptext42:
  7830                           	opt stack 0
  7831  002A72                     ___lldiv:
  7832                           	opt stack 21
  7833                           
  7834                           ; BSR set to: 0
  7835                           ;incstack = 0
  7836  002A72  0E00               	movlw	0
  7837  002A74  0100               	movlb	0	; () banked
  7838  002A76  6FB8               	movwf	___lldiv@quotient& (0+255),b
  7839  002A78  0E00               	movlw	0
  7840  002A7A  6FB9               	movwf	(___lldiv@quotient+1)& (0+255),b
  7841  002A7C  0E00               	movlw	0
  7842  002A7E  6FBA               	movwf	(___lldiv@quotient+2)& (0+255),b
  7843  002A80  0E00               	movlw	0
  7844  002A82  6FBB               	movwf	(___lldiv@quotient+3)& (0+255),b
  7845                           
  7846                           ; BSR set to: 0
  7847  002A84  0100               	movlb	0	; () banked
  7848  002A86  51B4               	movf	___lldiv@divisor& (0+255),w,b
  7849  002A88  0100               	movlb	0	; () banked
  7850  002A8A  11B5               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7851  002A8C  0100               	movlb	0	; () banked
  7852  002A8E  11B6               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7853  002A90  0100               	movlb	0	; () banked
  7854  002A92  11B7               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7855  002A94  B4D8               	btfsc	status,2,c
  7856  002A96  D042               	goto	l1091
  7857                           
  7858                           ; BSR set to: 0
  7859  002A98  0E01               	movlw	1
  7860  002A9A  0100               	movlb	0	; () banked
  7861  002A9C  6FBC               	movwf	___lldiv@counter& (0+255),b
  7862  002A9E  D008               	goto	l4793
  7863  002AA0                     l4791:
  7864                           
  7865                           ; BSR set to: 0
  7866  002AA0  0100               	movlb	0	; () banked
  7867  002AA2  90D8               	bcf	status,0,c
  7868  002AA4  37B4               	rlcf	___lldiv@divisor& (0+255),f,b
  7869  002AA6  37B5               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7870  002AA8  37B6               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7871  002AAA  37B7               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7872  002AAC  0100               	movlb	0	; () banked
  7873  002AAE  2BBC               	incf	___lldiv@counter& (0+255),f,b
  7874  002AB0                     l4793:
  7875                           
  7876                           ; BSR set to: 0
  7877  002AB0  0100               	movlb	0	; () banked
  7878  002AB2  AFB7               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7879  002AB4  D7F5               	goto	l4791
  7880  002AB6                     l4795:
  7881                           
  7882                           ; BSR set to: 0
  7883  002AB6  0100               	movlb	0	; () banked
  7884  002AB8  90D8               	bcf	status,0,c
  7885  002ABA  37B8               	rlcf	___lldiv@quotient& (0+255),f,b
  7886  002ABC  37B9               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7887  002ABE  37BA               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7888  002AC0  37BB               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7889                           
  7890                           ; BSR set to: 0
  7891  002AC2  0100               	movlb	0	; () banked
  7892  002AC4  51B4               	movf	___lldiv@divisor& (0+255),w,b
  7893  002AC6  0100               	movlb	0	; () banked
  7894  002AC8  5DB0               	subwf	___lldiv@dividend& (0+255),w,b
  7895  002ACA  0100               	movlb	0	; () banked
  7896  002ACC  51B5               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7897  002ACE  0100               	movlb	0	; () banked
  7898  002AD0  59B1               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7899  002AD2  0100               	movlb	0	; () banked
  7900  002AD4  51B6               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7901  002AD6  0100               	movlb	0	; () banked
  7902  002AD8  59B2               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7903  002ADA  0100               	movlb	0	; () banked
  7904  002ADC  51B7               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7905  002ADE  0100               	movlb	0	; () banked
  7906  002AE0  59B3               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7907  002AE2  A0D8               	btfss	status,0,c
  7908  002AE4  D012               	goto	l4803
  7909                           
  7910                           ; BSR set to: 0
  7911  002AE6  0100               	movlb	0	; () banked
  7912  002AE8  51B4               	movf	___lldiv@divisor& (0+255),w,b
  7913  002AEA  0100               	movlb	0	; () banked
  7914  002AEC  5FB0               	subwf	___lldiv@dividend& (0+255),f,b
  7915  002AEE  0100               	movlb	0	; () banked
  7916  002AF0  51B5               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7917  002AF2  0100               	movlb	0	; () banked
  7918  002AF4  5BB1               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7919  002AF6  0100               	movlb	0	; () banked
  7920  002AF8  51B6               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7921  002AFA  0100               	movlb	0	; () banked
  7922  002AFC  5BB2               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7923  002AFE  0100               	movlb	0	; () banked
  7924  002B00  51B7               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7925  002B02  0100               	movlb	0	; () banked
  7926  002B04  5BB3               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7927                           
  7928                           ; BSR set to: 0
  7929  002B06  0100               	movlb	0	; () banked
  7930  002B08  81B8               	bsf	___lldiv@quotient& (0+255),0,b
  7931  002B0A                     l4803:
  7932                           
  7933                           ; BSR set to: 0
  7934  002B0A  0100               	movlb	0	; () banked
  7935  002B0C  90D8               	bcf	status,0,c
  7936  002B0E  33B7               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7937  002B10  33B6               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7938  002B12  33B5               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7939  002B14  33B4               	rrcf	___lldiv@divisor& (0+255),f,b
  7940                           
  7941                           ; BSR set to: 0
  7942  002B16  0100               	movlb	0	; () banked
  7943  002B18  2FBC               	decfsz	___lldiv@counter& (0+255),f,b
  7944  002B1A  D7CD               	goto	l4795
  7945  002B1C                     l1091:
  7946                           
  7947                           ; BSR set to: 0
  7948  002B1C  C0B8  F0B0         	movff	___lldiv@quotient,?___lldiv
  7949  002B20  C0B9  F0B1         	movff	___lldiv@quotient+1,?___lldiv+1
  7950  002B24  C0BA  F0B2         	movff	___lldiv@quotient+2,?___lldiv+2
  7951  002B28  C0BB  F0B3         	movff	___lldiv@quotient+3,?___lldiv+3
  7952                           
  7953                           ; BSR set to: 0
  7954  002B2C  0012               	return		;funcret
  7955  002B2E                     __end_of___lldiv:
  7956                           	opt stack 0
  7957                           tblptru	equ	0xFF8
  7958                           tblptrh	equ	0xFF7
  7959                           tblptrl	equ	0xFF6
  7960                           tablat	equ	0xFF5
  7961                           prodh	equ	0xFF4
  7962                           prodl	equ	0xFF3
  7963                           intcon	equ	0xFF2
  7964                           intcon2	equ	0xFF1
  7965                           indf0	equ	0xFEF
  7966                           postinc0	equ	0xFEE
  7967                           fsr0h	equ	0xFEA
  7968                           fsr0l	equ	0xFE9
  7969                           wreg	equ	0xFE8
  7970                           indf2	equ	0xFDF
  7971                           postinc2	equ	0xFDE
  7972                           postdec2	equ	0xFDD
  7973                           fsr2h	equ	0xFDA
  7974                           fsr2l	equ	0xFD9
  7975                           status	equ	0xFD8
  7976                           
  7977 ;; *************** function _caltime_to_RTCC *****************
  7978 ;; Defined at:
  7979 ;;		line 137 in file "../My_header\My_RTCC.h"
  7980 ;; Parameters:    Size  Location     Type
  7981 ;;  ct              2    8[BANK0 ] PTR struct .
  7982 ;;		 -> caltime_now(7), 
  7983 ;; Auto vars:     Size  Location     Type
  7984 ;;		None
  7985 ;; Return value:  Size  Location     Type
  7986 ;;		None               void
  7987 ;; Registers used:
  7988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7989 ;; Tracked objects:
  7990 ;;		On entry : 0/0
  7991 ;;		On exit  : 0/0
  7992 ;;		Unchanged: 0/0
  7993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7994 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7997 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7998 ;;Total ram usage:        2 bytes
  7999 ;; Hardware stack levels used:    1
  8000 ;; Hardware stack levels required when called:    6
  8001 ;; This function calls:
  8002 ;;		_d_to_x
  8003 ;; This function is called by:
  8004 ;;		_RTCC_from_epoch
  8005 ;;		_RTCC_from_caltime
  8006 ;; This function uses a non-reentrant model
  8007 ;;
  8008                           
  8009                           	psect	text43
  8010  002820                     __ptext43:
  8011                           	opt stack 0
  8012  002820                     _caltime_to_RTCC:
  8013                           	opt stack 21
  8014  002820                     l405:
  8015  002820  010F               	movlb	15	; () banked
  8016  002822  B93F               	btfsc	63,4,b	;volatile
  8017  002824  D7FD               	goto	l405
  8018                           
  8019                           ; BSR set to: 15
  8020                           ;My_header\My_RTCC.h: 139: RTCCFGbits.RTCPTR0 = 1;
  8021  002826  010F               	movlb	15	; () banked
  8022  002828  813F               	bsf	63,0,b	;volatile
  8023                           
  8024                           ;My_header\My_RTCC.h: 140: RTCCFGbits.RTCPTR1 = 1;
  8025  00282A  010F               	movlb	15	; () banked
  8026  00282C  833F               	bsf	63,1,b	;volatile
  8027                           
  8028                           ; BSR set to: 15
  8029                           ;My_header\My_RTCC.h: 141: RTCVALL = d_to_x(ct->YY);
  8030  00282E  0100               	movlb	0	; () banked
  8031  002830  EE20 F006          	lfsr	2,6
  8032  002834  51B8               	movf	caltime_to_RTCC@ct& (0+255),w,b
  8033  002836  26D9               	addwf	fsr2l,f,c
  8034  002838  51B9               	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
  8035  00283A  22DA               	addwfc	fsr2h,f,c
  8036  00283C  50DF               	movf	indf2,w,c
  8037  00283E  ECAC  F01C         	call	_d_to_x
  8038  002842  010F               	movlb	15	; () banked
  8039  002844  6F3A               	movwf	58,b	;volatile
  8040                           
  8041                           ; BSR set to: 15
  8042                           ;My_header\My_RTCC.h: 142: RTCVALH = 0x00;
  8043  002846  0E00               	movlw	0
  8044  002848  010F               	movlb	15	; () banked
  8045  00284A  6F3B               	movwf	59,b	;volatile
  8046                           
  8047                           ; BSR set to: 15
  8048                           ;My_header\My_RTCC.h: 143: RTCCFGbits.RTCPTR0 = 0;
  8049  00284C  010F               	movlb	15	; () banked
  8050  00284E  913F               	bcf	63,0,b	;volatile
  8051                           
  8052                           ; BSR set to: 15
  8053                           ;My_header\My_RTCC.h: 144: RTCCFGbits.RTCPTR1 = 1;
  8054  002850  010F               	movlb	15	; () banked
  8055  002852  833F               	bsf	63,1,b	;volatile
  8056                           
  8057                           ; BSR set to: 15
  8058                           ;My_header\My_RTCC.h: 145: RTCVALL = d_to_x(ct->DD);
  8059  002854  0100               	movlb	0	; () banked
  8060  002856  EE20 F004          	lfsr	2,4
  8061  00285A  51B8               	movf	caltime_to_RTCC@ct& (0+255),w,b
  8062  00285C  26D9               	addwf	fsr2l,f,c
  8063  00285E  51B9               	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
  8064  002860  22DA               	addwfc	fsr2h,f,c
  8065  002862  50DF               	movf	indf2,w,c
  8066  002864  ECAC  F01C         	call	_d_to_x
  8067  002868  010F               	movlb	15	; () banked
  8068  00286A  6F3A               	movwf	58,b	;volatile
  8069                           
  8070                           ; BSR set to: 15
  8071                           ;My_header\My_RTCC.h: 146: RTCVALH = d_to_x(ct->MM);
  8072  00286C  0100               	movlb	0	; () banked
  8073  00286E  EE20 F005          	lfsr	2,5
  8074  002872  51B8               	movf	caltime_to_RTCC@ct& (0+255),w,b
  8075  002874  26D9               	addwf	fsr2l,f,c
  8076  002876  51B9               	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
  8077  002878  22DA               	addwfc	fsr2h,f,c
  8078  00287A  50DF               	movf	indf2,w,c
  8079  00287C  ECAC  F01C         	call	_d_to_x
  8080  002880  010F               	movlb	15	; () banked
  8081  002882  6F3B               	movwf	59,b	;volatile
  8082                           
  8083                           ; BSR set to: 15
  8084                           ;My_header\My_RTCC.h: 147: RTCCFGbits.RTCPTR0 = 1;
  8085  002884  010F               	movlb	15	; () banked
  8086  002886  813F               	bsf	63,0,b	;volatile
  8087                           
  8088                           ; BSR set to: 15
  8089                           ;My_header\My_RTCC.h: 148: RTCCFGbits.RTCPTR1 = 0;
  8090  002888  010F               	movlb	15	; () banked
  8091  00288A  933F               	bcf	63,1,b	;volatile
  8092                           
  8093                           ; BSR set to: 15
  8094                           ;My_header\My_RTCC.h: 149: RTCVALL = d_to_x(ct->hh);
  8095  00288C  0100               	movlb	0	; () banked
  8096  00288E  EE20 F002          	lfsr	2,2
  8097  002892  51B8               	movf	caltime_to_RTCC@ct& (0+255),w,b
  8098  002894  26D9               	addwf	fsr2l,f,c
  8099  002896  51B9               	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
  8100  002898  22DA               	addwfc	fsr2h,f,c
  8101  00289A  50DF               	movf	indf2,w,c
  8102  00289C  ECAC  F01C         	call	_d_to_x
  8103  0028A0  010F               	movlb	15	; () banked
  8104  0028A2  6F3A               	movwf	58,b	;volatile
  8105                           
  8106                           ; BSR set to: 15
  8107                           ;My_header\My_RTCC.h: 150: RTCVALH = d_to_x(ct->EE);
  8108  0028A4  0100               	movlb	0	; () banked
  8109  0028A6  EE20 F003          	lfsr	2,3
  8110  0028AA  51B8               	movf	caltime_to_RTCC@ct& (0+255),w,b
  8111  0028AC  26D9               	addwf	fsr2l,f,c
  8112  0028AE  51B9               	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
  8113  0028B0  22DA               	addwfc	fsr2h,f,c
  8114  0028B2  50DF               	movf	indf2,w,c
  8115  0028B4  ECAC  F01C         	call	_d_to_x
  8116  0028B8  010F               	movlb	15	; () banked
  8117  0028BA  6F3B               	movwf	59,b	;volatile
  8118                           
  8119                           ; BSR set to: 15
  8120                           ;My_header\My_RTCC.h: 151: RTCCFGbits.RTCPTR0 = 0;
  8121  0028BC  010F               	movlb	15	; () banked
  8122  0028BE  913F               	bcf	63,0,b	;volatile
  8123                           
  8124                           ; BSR set to: 15
  8125                           ;My_header\My_RTCC.h: 152: RTCCFGbits.RTCPTR1 = 0;
  8126  0028C0  010F               	movlb	15	; () banked
  8127  0028C2  933F               	bcf	63,1,b	;volatile
  8128                           
  8129                           ; BSR set to: 15
  8130                           ;My_header\My_RTCC.h: 153: RTCVALL = d_to_x(ct->ss);
  8131  0028C4  C0B8  FFD9         	movff	caltime_to_RTCC@ct,fsr2l
  8132  0028C8  C0B9  FFDA         	movff	caltime_to_RTCC@ct+1,fsr2h
  8133  0028CC  50DF               	movf	indf2,w,c
  8134  0028CE  ECAC  F01C         	call	_d_to_x
  8135  0028D2  010F               	movlb	15	; () banked
  8136  0028D4  6F3A               	movwf	58,b	;volatile
  8137                           
  8138                           ; BSR set to: 15
  8139                           ;My_header\My_RTCC.h: 154: RTCVALH = d_to_x(ct->mm);
  8140  0028D6  0100               	movlb	0	; () banked
  8141  0028D8  EE20 F001          	lfsr	2,1
  8142  0028DC  51B8               	movf	caltime_to_RTCC@ct& (0+255),w,b
  8143  0028DE  26D9               	addwf	fsr2l,f,c
  8144  0028E0  51B9               	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
  8145  0028E2  22DA               	addwfc	fsr2h,f,c
  8146  0028E4  50DF               	movf	indf2,w,c
  8147  0028E6  ECAC  F01C         	call	_d_to_x
  8148  0028EA  010F               	movlb	15	; () banked
  8149  0028EC  6F3B               	movwf	59,b	;volatile
  8150                           
  8151                           ; BSR set to: 15
  8152  0028EE  0012               	return		;funcret
  8153  0028F0                     __end_of_caltime_to_RTCC:
  8154                           	opt stack 0
  8155                           tblptru	equ	0xFF8
  8156                           tblptrh	equ	0xFF7
  8157                           tblptrl	equ	0xFF6
  8158                           tablat	equ	0xFF5
  8159                           prodh	equ	0xFF4
  8160                           prodl	equ	0xFF3
  8161                           intcon	equ	0xFF2
  8162                           intcon2	equ	0xFF1
  8163                           indf0	equ	0xFEF
  8164                           postinc0	equ	0xFEE
  8165                           fsr0h	equ	0xFEA
  8166                           fsr0l	equ	0xFE9
  8167                           wreg	equ	0xFE8
  8168                           indf2	equ	0xFDF
  8169                           postinc2	equ	0xFDE
  8170                           postdec2	equ	0xFDD
  8171                           fsr2h	equ	0xFDA
  8172                           fsr2l	equ	0xFD9
  8173                           status	equ	0xFD8
  8174                           
  8175 ;; *************** function _d_to_x *****************
  8176 ;; Defined at:
  8177 ;;		line 73 in file "../My_header\My_RTCC.h"
  8178 ;; Parameters:    Size  Location     Type
  8179 ;;  dec             1    wreg     unsigned char 
  8180 ;; Auto vars:     Size  Location     Type
  8181 ;;  dec             1   31[COMRAM] unsigned char 
  8182 ;; Return value:  Size  Location     Type
  8183 ;;                  1    wreg      unsigned char 
  8184 ;; Registers used:
  8185 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8186 ;; Tracked objects:
  8187 ;;		On entry : 0/0
  8188 ;;		On exit  : 0/0
  8189 ;;		Unchanged: 0/0
  8190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8192 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8194 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8195 ;;Total ram usage:        1 bytes
  8196 ;; Hardware stack levels used:    1
  8197 ;; Hardware stack levels required when called:    5
  8198 ;; This function calls:
  8199 ;;		___awdiv
  8200 ;; This function is called by:
  8201 ;;		_caltime_to_RTCC
  8202 ;; This function uses a non-reentrant model
  8203 ;;
  8204                           
  8205                           	psect	text44
  8206  003958                     __ptext44:
  8207                           	opt stack 0
  8208  003958                     _d_to_x:
  8209                           	opt stack 21
  8210                           
  8211                           ; BSR set to: 15
  8212                           ;incstack = 0
  8213                           ;d_to_x@dec stored from wreg
  8214  003958  6E20               	movwf	d_to_x@dec,c
  8215                           
  8216                           ;My_header\My_RTCC.h: 76: return dec / 10 * 6 + dec;
  8217  00395A  C020  F0B0         	movff	d_to_x@dec,___awdiv@dividend
  8218  00395E  0100               	movlb	0	; () banked
  8219  003960  6BB1               	clrf	(___awdiv@dividend+1)& (0+255),b
  8220  003962  0E00               	movlw	0
  8221  003964  0100               	movlb	0	; () banked
  8222  003966  6FB3               	movwf	(___awdiv@divisor+1)& (0+255),b
  8223  003968  0E0A               	movlw	10
  8224  00396A  6FB2               	movwf	___awdiv@divisor& (0+255),b
  8225  00396C  ECDA  F014         	call	___awdiv	;wreg free
  8226  003970  0100               	movlb	0	; () banked
  8227  003972  51B0               	movf	?___awdiv& (0+255),w,b
  8228  003974  0D06               	mullw	6
  8229  003976  50F3               	movf	prodl,w,c
  8230  003978  2420               	addwf	d_to_x@dec,w,c
  8231  00397A  0012               	return	
  8232  00397C                     __end_of_d_to_x:
  8233                           	opt stack 0
  8234                           tblptru	equ	0xFF8
  8235                           tblptrh	equ	0xFF7
  8236                           tblptrl	equ	0xFF6
  8237                           tablat	equ	0xFF5
  8238                           prodh	equ	0xFF4
  8239                           prodl	equ	0xFF3
  8240                           intcon	equ	0xFF2
  8241                           intcon2	equ	0xFF1
  8242                           indf0	equ	0xFEF
  8243                           postinc0	equ	0xFEE
  8244                           fsr0h	equ	0xFEA
  8245                           fsr0l	equ	0xFE9
  8246                           wreg	equ	0xFE8
  8247                           indf2	equ	0xFDF
  8248                           postinc2	equ	0xFDE
  8249                           postdec2	equ	0xFDD
  8250                           fsr2h	equ	0xFDA
  8251                           fsr2l	equ	0xFD9
  8252                           status	equ	0xFD8
  8253                           
  8254 ;; *************** function ___awdiv *****************
  8255 ;; Defined at:
  8256 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  8257 ;; Parameters:    Size  Location     Type
  8258 ;;  dividend        2    0[BANK0 ] int 
  8259 ;;  divisor         2    2[BANK0 ] int 
  8260 ;; Auto vars:     Size  Location     Type
  8261 ;;  quotient        2    6[BANK0 ] int 
  8262 ;;  sign            1    5[BANK0 ] unsigned char 
  8263 ;;  counter         1    4[BANK0 ] unsigned char 
  8264 ;; Return value:  Size  Location     Type
  8265 ;;                  2    0[BANK0 ] int 
  8266 ;; Registers used:
  8267 ;;		wreg, status,2, status,0
  8268 ;; Tracked objects:
  8269 ;;		On entry : 0/0
  8270 ;;		On exit  : 0/0
  8271 ;;		Unchanged: 0/0
  8272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8273 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8274 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8276 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8277 ;;Total ram usage:        8 bytes
  8278 ;; Hardware stack levels used:    1
  8279 ;; Hardware stack levels required when called:    4
  8280 ;; This function calls:
  8281 ;;		Nothing
  8282 ;; This function is called by:
  8283 ;;		_d_to_x
  8284 ;; This function uses a non-reentrant model
  8285 ;;
  8286                           
  8287                           	psect	text45
  8288  0029B4                     __ptext45:
  8289                           	opt stack 0
  8290  0029B4                     ___awdiv:
  8291                           	opt stack 21
  8292                           
  8293                           ; BSR set to: 0
  8294                           ;incstack = 0
  8295  0029B4  0E00               	movlw	0
  8296  0029B6  0100               	movlb	0	; () banked
  8297  0029B8  6FB5               	movwf	___awdiv@sign& (0+255),b
  8298                           
  8299                           ; BSR set to: 0
  8300  0029BA  0100               	movlb	0	; () banked
  8301  0029BC  AFB3               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8302  0029BE  D008               	goto	l4713
  8303                           
  8304                           ; BSR set to: 0
  8305  0029C0  0100               	movlb	0	; () banked
  8306  0029C2  6DB2               	negf	___awdiv@divisor& (0+255),b
  8307  0029C4  1FB3               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8308  0029C6  B0D8               	btfsc	status,0,c
  8309  0029C8  2BB3               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8310                           
  8311                           ; BSR set to: 0
  8312  0029CA  0E01               	movlw	1
  8313  0029CC  0100               	movlb	0	; () banked
  8314  0029CE  6FB5               	movwf	___awdiv@sign& (0+255),b
  8315  0029D0                     l4713:
  8316                           
  8317                           ; BSR set to: 0
  8318  0029D0  0100               	movlb	0	; () banked
  8319  0029D2  AFB1               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8320  0029D4  D008               	goto	l4719
  8321                           
  8322                           ; BSR set to: 0
  8323  0029D6  0100               	movlb	0	; () banked
  8324  0029D8  6DB0               	negf	___awdiv@dividend& (0+255),b
  8325  0029DA  1FB1               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8326  0029DC  B0D8               	btfsc	status,0,c
  8327  0029DE  2BB1               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8328                           
  8329                           ; BSR set to: 0
  8330  0029E0  0E01               	movlw	1
  8331  0029E2  0100               	movlb	0	; () banked
  8332  0029E4  1BB5               	xorwf	___awdiv@sign& (0+255),f,b
  8333  0029E6                     l4719:
  8334                           
  8335                           ; BSR set to: 0
  8336  0029E6  0E00               	movlw	0
  8337  0029E8  0100               	movlb	0	; () banked
  8338  0029EA  6FB7               	movwf	(___awdiv@quotient+1)& (0+255),b
  8339  0029EC  0E00               	movlw	0
  8340  0029EE  6FB6               	movwf	___awdiv@quotient& (0+255),b
  8341                           
  8342                           ; BSR set to: 0
  8343  0029F0  0100               	movlb	0	; () banked
  8344  0029F2  51B2               	movf	___awdiv@divisor& (0+255),w,b
  8345  0029F4  0100               	movlb	0	; () banked
  8346  0029F6  11B3               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8347  0029F8  B4D8               	btfsc	status,2,c
  8348  0029FA  D02C               	goto	l4741
  8349                           
  8350                           ; BSR set to: 0
  8351  0029FC  0E01               	movlw	1
  8352  0029FE  0100               	movlb	0	; () banked
  8353  002A00  6FB4               	movwf	___awdiv@counter& (0+255),b
  8354  002A02  D006               	goto	l4727
  8355  002A04                     l4725:
  8356                           
  8357                           ; BSR set to: 0
  8358  002A04  0100               	movlb	0	; () banked
  8359  002A06  90D8               	bcf	status,0,c
  8360  002A08  37B2               	rlcf	___awdiv@divisor& (0+255),f,b
  8361  002A0A  37B3               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8362  002A0C  0100               	movlb	0	; () banked
  8363  002A0E  2BB4               	incf	___awdiv@counter& (0+255),f,b
  8364  002A10                     l4727:
  8365                           
  8366                           ; BSR set to: 0
  8367  002A10  0100               	movlb	0	; () banked
  8368  002A12  AFB3               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8369  002A14  D7F7               	goto	l4725
  8370  002A16                     l4729:
  8371                           
  8372                           ; BSR set to: 0
  8373  002A16  0100               	movlb	0	; () banked
  8374  002A18  90D8               	bcf	status,0,c
  8375  002A1A  37B6               	rlcf	___awdiv@quotient& (0+255),f,b
  8376  002A1C  37B7               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8377                           
  8378                           ; BSR set to: 0
  8379  002A1E  0100               	movlb	0	; () banked
  8380  002A20  51B2               	movf	___awdiv@divisor& (0+255),w,b
  8381  002A22  0100               	movlb	0	; () banked
  8382  002A24  5DB0               	subwf	___awdiv@dividend& (0+255),w,b
  8383  002A26  0100               	movlb	0	; () banked
  8384  002A28  51B3               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8385  002A2A  0100               	movlb	0	; () banked
  8386  002A2C  59B1               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8387  002A2E  A0D8               	btfss	status,0,c
  8388  002A30  D00A               	goto	l4737
  8389                           
  8390                           ; BSR set to: 0
  8391  002A32  0100               	movlb	0	; () banked
  8392  002A34  51B2               	movf	___awdiv@divisor& (0+255),w,b
  8393  002A36  0100               	movlb	0	; () banked
  8394  002A38  5FB0               	subwf	___awdiv@dividend& (0+255),f,b
  8395  002A3A  0100               	movlb	0	; () banked
  8396  002A3C  51B3               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8397  002A3E  0100               	movlb	0	; () banked
  8398  002A40  5BB1               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8399                           
  8400                           ; BSR set to: 0
  8401  002A42  0100               	movlb	0	; () banked
  8402  002A44  81B6               	bsf	___awdiv@quotient& (0+255),0,b
  8403  002A46                     l4737:
  8404                           
  8405                           ; BSR set to: 0
  8406  002A46  0100               	movlb	0	; () banked
  8407  002A48  90D8               	bcf	status,0,c
  8408  002A4A  33B3               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8409  002A4C  33B2               	rrcf	___awdiv@divisor& (0+255),f,b
  8410                           
  8411                           ; BSR set to: 0
  8412  002A4E  0100               	movlb	0	; () banked
  8413  002A50  2FB4               	decfsz	___awdiv@counter& (0+255),f,b
  8414  002A52  D7E1               	goto	l4729
  8415  002A54                     l4741:
  8416                           
  8417                           ; BSR set to: 0
  8418  002A54  0100               	movlb	0	; () banked
  8419  002A56  51B5               	movf	___awdiv@sign& (0+255),w,b
  8420  002A58  0100               	movlb	0	; () banked
  8421  002A5A  B4D8               	btfsc	status,2,c
  8422  002A5C  D005               	goto	l4745
  8423                           
  8424                           ; BSR set to: 0
  8425  002A5E  0100               	movlb	0	; () banked
  8426  002A60  6DB6               	negf	___awdiv@quotient& (0+255),b
  8427  002A62  1FB7               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8428  002A64  B0D8               	btfsc	status,0,c
  8429  002A66  2BB7               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8430  002A68                     l4745:
  8431                           
  8432                           ; BSR set to: 0
  8433  002A68  C0B6  F0B0         	movff	___awdiv@quotient,?___awdiv
  8434  002A6C  C0B7  F0B1         	movff	___awdiv@quotient+1,?___awdiv+1
  8435  002A70  0012               	return	
  8436  002A72                     __end_of___awdiv:
  8437                           	opt stack 0
  8438                           tblptru	equ	0xFF8
  8439                           tblptrh	equ	0xFF7
  8440                           tblptrl	equ	0xFF6
  8441                           tablat	equ	0xFF5
  8442                           prodh	equ	0xFF4
  8443                           prodl	equ	0xFF3
  8444                           intcon	equ	0xFF2
  8445                           intcon2	equ	0xFF1
  8446                           indf0	equ	0xFEF
  8447                           postinc0	equ	0xFEE
  8448                           fsr0h	equ	0xFEA
  8449                           fsr0l	equ	0xFE9
  8450                           wreg	equ	0xFE8
  8451                           indf2	equ	0xFDF
  8452                           postinc2	equ	0xFDE
  8453                           postdec2	equ	0xFDD
  8454                           fsr2h	equ	0xFDA
  8455                           fsr2l	equ	0xFD9
  8456                           status	equ	0xFD8
  8457                           
  8458 ;; *************** function _RTCC_from_RTCC *****************
  8459 ;; Defined at:
  8460 ;;		line 231 in file "../My_header\My_RTCC.h"
  8461 ;; Parameters:    Size  Location     Type
  8462 ;;  ct              2   40[BANK0 ] PTR struct .
  8463 ;;		 -> caltime_now(7), 
  8464 ;;  ep              2   42[BANK0 ] PTR unsigned long 
  8465 ;;		 -> epoch_now(4), 
  8466 ;; Auto vars:     Size  Location     Type
  8467 ;;		None
  8468 ;; Return value:  Size  Location     Type
  8469 ;;		None               void
  8470 ;; Registers used:
  8471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8472 ;; Tracked objects:
  8473 ;;		On entry : 0/0
  8474 ;;		On exit  : 0/0
  8475 ;;		Unchanged: 0/0
  8476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8477 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8480 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8481 ;;Total ram usage:        4 bytes
  8482 ;; Hardware stack levels used:    1
  8483 ;; Hardware stack levels required when called:    7
  8484 ;; This function calls:
  8485 ;;		_RTCC_to_caltime
  8486 ;;		_caltime_to_epoch
  8487 ;; This function is called by:
  8488 ;;		_display_time_0802
  8489 ;;		_RTCC_adjust_time_inc
  8490 ;;		_RTCC_adjust_time_dec
  8491 ;;		_RTCC_loop
  8492 ;;		_sleep_loop
  8493 ;;		_main
  8494 ;;		_display_time_1602
  8495 ;; This function uses a non-reentrant model
  8496 ;;
  8497                           
  8498                           	psect	text46
  8499  00399E                     __ptext46:
  8500                           	opt stack 0
  8501  00399E                     _RTCC_from_RTCC:
  8502                           	opt stack 22
  8503                           
  8504                           ;My_header\My_RTCC.h: 232: RTCC_to_caltime(ct);
  8505                           
  8506                           ; BSR set to: 0
  8507                           ;incstack = 0
  8508  00399E  C0D8  F0B0         	movff	RTCC_from_RTCC@ct,RTCC_to_caltime@ct
  8509  0039A2  C0D9  F0B1         	movff	RTCC_from_RTCC@ct+1,RTCC_to_caltime@ct+1
  8510  0039A6  ECF5  F015         	call	_RTCC_to_caltime	;wreg free
  8511                           
  8512                           ;My_header\My_RTCC.h: 233: caltime_to_epoch(ct, ep);
  8513  0039AA  C0D8  F0C9         	movff	RTCC_from_RTCC@ct,caltime_to_epoch@ct
  8514  0039AE  C0D9  F0CA         	movff	RTCC_from_RTCC@ct+1,caltime_to_epoch@ct+1
  8515  0039B2  C0DA  F0CB         	movff	RTCC_from_RTCC@ep,caltime_to_epoch@ep
  8516  0039B6  C0DB  F0CC         	movff	RTCC_from_RTCC@ep+1,caltime_to_epoch@ep+1
  8517  0039BA  EC0B  F009         	call	_caltime_to_epoch	;wreg free
  8518  0039BE  0012               	return		;funcret
  8519  0039C0                     __end_of_RTCC_from_RTCC:
  8520                           	opt stack 0
  8521                           tblptru	equ	0xFF8
  8522                           tblptrh	equ	0xFF7
  8523                           tblptrl	equ	0xFF6
  8524                           tablat	equ	0xFF5
  8525                           prodh	equ	0xFF4
  8526                           prodl	equ	0xFF3
  8527                           intcon	equ	0xFF2
  8528                           intcon2	equ	0xFF1
  8529                           indf0	equ	0xFEF
  8530                           postinc0	equ	0xFEE
  8531                           fsr0h	equ	0xFEA
  8532                           fsr0l	equ	0xFE9
  8533                           wreg	equ	0xFE8
  8534                           indf2	equ	0xFDF
  8535                           postinc2	equ	0xFDE
  8536                           postdec2	equ	0xFDD
  8537                           fsr2h	equ	0xFDA
  8538                           fsr2l	equ	0xFD9
  8539                           status	equ	0xFD8
  8540                           
  8541 ;; *************** function _caltime_to_epoch *****************
  8542 ;; Defined at:
  8543 ;;		line 211 in file "../My_header\My_RTCC.h"
  8544 ;; Parameters:    Size  Location     Type
  8545 ;;  ct              2   25[BANK0 ] PTR struct .
  8546 ;;		 -> caltime_now(7), 
  8547 ;;  ep              2   27[BANK0 ] PTR unsigned long 
  8548 ;;		 -> epoch_now(4), 
  8549 ;; Auto vars:     Size  Location     Type
  8550 ;;  month           1   39[BANK0 ] unsigned char 
  8551 ;;  month           1   34[BANK0 ] unsigned char 
  8552 ;;  year            1   33[BANK0 ] unsigned char 
  8553 ;;  epoch           4   35[BANK0 ] unsigned long 
  8554 ;; Return value:  Size  Location     Type
  8555 ;;		None               void
  8556 ;; Registers used:
  8557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8558 ;; Tracked objects:
  8559 ;;		On entry : 0/0
  8560 ;;		On exit  : 0/0
  8561 ;;		Unchanged: 0/0
  8562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8563 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8564 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8565 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8566 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8567 ;;Total ram usage:       15 bytes
  8568 ;; Hardware stack levels used:    1
  8569 ;; Hardware stack levels required when called:    6
  8570 ;; This function calls:
  8571 ;;		___lmul
  8572 ;;		_month_length
  8573 ;; This function is called by:
  8574 ;;		_RTCC_from_RTCC
  8575 ;;		_RTCC_from_caltime
  8576 ;; This function uses a non-reentrant model
  8577 ;;
  8578                           
  8579                           	psect	text47
  8580  001216                     __ptext47:
  8581                           	opt stack 0
  8582  001216                     _caltime_to_epoch:
  8583                           	opt stack 22
  8584                           
  8585                           ;My_header\My_RTCC.h: 212: epoch_t epoch = 0;
  8586                           
  8587                           ;incstack = 0
  8588  001216  0E00               	movlw	0
  8589  001218  0100               	movlb	0	; () banked
  8590  00121A  6FD3               	movwf	caltime_to_epoch@epoch& (0+255),b
  8591  00121C  0E00               	movlw	0
  8592  00121E  6FD4               	movwf	(caltime_to_epoch@epoch+1)& (0+255),b
  8593  001220  0E00               	movlw	0
  8594  001222  6FD5               	movwf	(caltime_to_epoch@epoch+2)& (0+255),b
  8595  001224  0E00               	movlw	0
  8596  001226  6FD6               	movwf	(caltime_to_epoch@epoch+3)& (0+255),b
  8597                           
  8598                           ;My_header\My_RTCC.h: 213: for (uint8_t year = 0; year < ct->YY; year++) {
  8599  001228  0E00               	movlw	0
  8600  00122A  0100               	movlb	0	; () banked
  8601  00122C  6FD1               	movwf	caltime_to_epoch@year& (0+255),b
  8602  00122E  D037               	goto	l5023
  8603  001230                     l5009:
  8604                           
  8605                           ; BSR set to: 0
  8606                           ;My_header\My_RTCC.h: 214: for (uint8_t month = 1; month <= 12; month++) {
  8607  001230  0E01               	movlw	1
  8608  001232  0100               	movlb	0	; () banked
  8609  001234  6FD7               	movwf	caltime_to_epoch@month& (0+255),b
  8610  001236                     l5011:
  8611                           
  8612                           ; BSR set to: 0
  8613  001236  0E0C               	movlw	12
  8614  001238  0100               	movlb	0	; () banked
  8615  00123A  65D7               	cpfsgt	caltime_to_epoch@month& (0+255),b
  8616  00123C  D001               	goto	l5015
  8617  00123E  D02D               	goto	l5021
  8618  001240                     l5015:
  8619                           
  8620                           ; BSR set to: 0
  8621                           ;My_header\My_RTCC.h: 215: epoch += ((epoch_t)60*60*24) * month_length(year, month);
  8622  001240  C0D7  F0B4         	movff	caltime_to_epoch@month,month_length@month
  8623  001244  0100               	movlb	0	; () banked
  8624  001246  51D1               	movf	caltime_to_epoch@year& (0+255),w,b
  8625  001248  ECCE  F012         	call	_month_length
  8626  00124C  0100               	movlb	0	; () banked
  8627  00124E  6FCD               	movwf	??_caltime_to_epoch& (0+255),b
  8628  001250  0100               	movlb	0	; () banked
  8629  001252  51CD               	movf	??_caltime_to_epoch& (0+255),w,b
  8630  001254  0100               	movlb	0	; () banked
  8631  001256  6FBD               	movwf	___lmul@multiplier& (0+255),b
  8632  001258  6BBE               	clrf	(___lmul@multiplier+1)& (0+255),b
  8633  00125A  6BBF               	clrf	(___lmul@multiplier+2)& (0+255),b
  8634  00125C  6BC0               	clrf	(___lmul@multiplier+3)& (0+255),b
  8635  00125E  0E80               	movlw	128
  8636  001260  0100               	movlb	0	; () banked
  8637  001262  6FC1               	movwf	___lmul@multiplicand& (0+255),b
  8638  001264  0E51               	movlw	81
  8639  001266  6FC2               	movwf	(___lmul@multiplicand+1)& (0+255),b
  8640  001268  0E01               	movlw	1
  8641  00126A  6FC3               	movwf	(___lmul@multiplicand+2)& (0+255),b
  8642  00126C  0E00               	movlw	0
  8643  00126E  6FC4               	movwf	(___lmul@multiplicand+3)& (0+255),b
  8644  001270  EC1E  F019         	call	___lmul	;wreg free
  8645  001274  0100               	movlb	0	; () banked
  8646  001276  51BD               	movf	?___lmul& (0+255),w,b
  8647  001278  0100               	movlb	0	; () banked
  8648  00127A  27D3               	addwf	caltime_to_epoch@epoch& (0+255),f,b
  8649  00127C  0100               	movlb	0	; () banked
  8650  00127E  51BE               	movf	(?___lmul+1)& (0+255),w,b
  8651  001280  0100               	movlb	0	; () banked
  8652  001282  23D4               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
  8653  001284  0100               	movlb	0	; () banked
  8654  001286  51BF               	movf	(?___lmul+2)& (0+255),w,b
  8655  001288  0100               	movlb	0	; () banked
  8656  00128A  23D5               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
  8657  00128C  0100               	movlb	0	; () banked
  8658  00128E  51C0               	movf	(?___lmul+3)& (0+255),w,b
  8659  001290  0100               	movlb	0	; () banked
  8660  001292  23D6               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
  8661                           
  8662                           ; BSR set to: 0
  8663  001294  0100               	movlb	0	; () banked
  8664  001296  2BD7               	incf	caltime_to_epoch@month& (0+255),f,b
  8665  001298  D7CE               	goto	l5011
  8666  00129A                     l5021:
  8667                           
  8668                           ; BSR set to: 0
  8669  00129A  0100               	movlb	0	; () banked
  8670  00129C  2BD1               	incf	caltime_to_epoch@year& (0+255),f,b
  8671  00129E                     l5023:
  8672                           
  8673                           ; BSR set to: 0
  8674  00129E  0100               	movlb	0	; () banked
  8675  0012A0  EE20 F006          	lfsr	2,6
  8676  0012A4  51C9               	movf	caltime_to_epoch@ct& (0+255),w,b
  8677  0012A6  26D9               	addwf	fsr2l,f,c
  8678  0012A8  51CA               	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
  8679  0012AA  22DA               	addwfc	fsr2h,f,c
  8680  0012AC  50DE               	movf	postinc2,w,c
  8681  0012AE  0100               	movlb	0	; () banked
  8682  0012B0  5DD1               	subwf	caltime_to_epoch@year& (0+255),w,b
  8683  0012B2  A0D8               	btfss	status,0,c
  8684  0012B4  D7BD               	goto	l5009
  8685                           
  8686                           ; BSR set to: 0
  8687                           ;My_header\My_RTCC.h: 216: }
  8688                           ;My_header\My_RTCC.h: 217: }
  8689                           ;My_header\My_RTCC.h: 218: for (uint8_t month = 1; month < ct->MM; month++) {
  8690                           
  8691                           ; BSR set to: 0
  8692  0012B6  0E01               	movlw	1
  8693  0012B8  0100               	movlb	0	; () banked
  8694  0012BA  6FD2               	movwf	caltime_to_epoch@month_2136& (0+255),b
  8695  0012BC  D032               	goto	l5031
  8696  0012BE                     l5027:
  8697                           
  8698                           ; BSR set to: 0
  8699                           ;My_header\My_RTCC.h: 219: epoch += ((epoch_t)60*60*24) * month_length(ct->YY, month);
  8700  0012BE  C0D2  F0B4         	movff	caltime_to_epoch@month_2136,month_length@month
  8701  0012C2  0100               	movlb	0	; () banked
  8702  0012C4  EE20 F006          	lfsr	2,6
  8703  0012C8  51C9               	movf	caltime_to_epoch@ct& (0+255),w,b
  8704  0012CA  26D9               	addwf	fsr2l,f,c
  8705  0012CC  51CA               	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
  8706  0012CE  22DA               	addwfc	fsr2h,f,c
  8707  0012D0  50DF               	movf	indf2,w,c
  8708  0012D2  ECCE  F012         	call	_month_length
  8709  0012D6  0100               	movlb	0	; () banked
  8710  0012D8  6FCD               	movwf	??_caltime_to_epoch& (0+255),b
  8711  0012DA  0100               	movlb	0	; () banked
  8712  0012DC  51CD               	movf	??_caltime_to_epoch& (0+255),w,b
  8713  0012DE  0100               	movlb	0	; () banked
  8714  0012E0  6FBD               	movwf	___lmul@multiplier& (0+255),b
  8715  0012E2  6BBE               	clrf	(___lmul@multiplier+1)& (0+255),b
  8716  0012E4  6BBF               	clrf	(___lmul@multiplier+2)& (0+255),b
  8717  0012E6  6BC0               	clrf	(___lmul@multiplier+3)& (0+255),b
  8718  0012E8  0E80               	movlw	128
  8719  0012EA  0100               	movlb	0	; () banked
  8720  0012EC  6FC1               	movwf	___lmul@multiplicand& (0+255),b
  8721  0012EE  0E51               	movlw	81
  8722  0012F0  6FC2               	movwf	(___lmul@multiplicand+1)& (0+255),b
  8723  0012F2  0E01               	movlw	1
  8724  0012F4  6FC3               	movwf	(___lmul@multiplicand+2)& (0+255),b
  8725  0012F6  0E00               	movlw	0
  8726  0012F8  6FC4               	movwf	(___lmul@multiplicand+3)& (0+255),b
  8727  0012FA  EC1E  F019         	call	___lmul	;wreg free
  8728  0012FE  0100               	movlb	0	; () banked
  8729  001300  51BD               	movf	?___lmul& (0+255),w,b
  8730  001302  0100               	movlb	0	; () banked
  8731  001304  27D3               	addwf	caltime_to_epoch@epoch& (0+255),f,b
  8732  001306  0100               	movlb	0	; () banked
  8733  001308  51BE               	movf	(?___lmul+1)& (0+255),w,b
  8734  00130A  0100               	movlb	0	; () banked
  8735  00130C  23D4               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
  8736  00130E  0100               	movlb	0	; () banked
  8737  001310  51BF               	movf	(?___lmul+2)& (0+255),w,b
  8738  001312  0100               	movlb	0	; () banked
  8739  001314  23D5               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
  8740  001316  0100               	movlb	0	; () banked
  8741  001318  51C0               	movf	(?___lmul+3)& (0+255),w,b
  8742  00131A  0100               	movlb	0	; () banked
  8743  00131C  23D6               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
  8744                           
  8745                           ; BSR set to: 0
  8746  00131E  0100               	movlb	0	; () banked
  8747  001320  2BD2               	incf	caltime_to_epoch@month_2136& (0+255),f,b
  8748  001322                     l5031:
  8749                           
  8750                           ; BSR set to: 0
  8751  001322  0100               	movlb	0	; () banked
  8752  001324  EE20 F005          	lfsr	2,5
  8753  001328  51C9               	movf	caltime_to_epoch@ct& (0+255),w,b
  8754  00132A  26D9               	addwf	fsr2l,f,c
  8755  00132C  51CA               	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
  8756  00132E  22DA               	addwfc	fsr2h,f,c
  8757  001330  50DE               	movf	postinc2,w,c
  8758  001332  0100               	movlb	0	; () banked
  8759  001334  5DD2               	subwf	caltime_to_epoch@month_2136& (0+255),w,b
  8760  001336  A0D8               	btfss	status,0,c
  8761  001338  D7C2               	goto	l5027
  8762                           
  8763                           ; BSR set to: 0
  8764                           ;My_header\My_RTCC.h: 220: }
  8765                           ;My_header\My_RTCC.h: 221: epoch += ((epoch_t)60*60*24) * (ct->DD - 1);
  8766                           
  8767                           ; BSR set to: 0
  8768  00133A  0EFF               	movlw	255
  8769  00133C  0100               	movlb	0	; () banked
  8770  00133E  6FCD               	movwf	??_caltime_to_epoch& (0+255),b
  8771  001340  0EFF               	movlw	255
  8772  001342  0100               	movlb	0	; () banked
  8773  001344  6FCE               	movwf	(??_caltime_to_epoch+1)& (0+255),b
  8774  001346  0100               	movlb	0	; () banked
  8775  001348  EE20 F004          	lfsr	2,4
  8776  00134C  51C9               	movf	caltime_to_epoch@ct& (0+255),w,b
  8777  00134E  26D9               	addwf	fsr2l,f,c
  8778  001350  51CA               	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
  8779  001352  22DA               	addwfc	fsr2h,f,c
  8780  001354  50DF               	movf	indf2,w,c
  8781  001356  0100               	movlb	0	; () banked
  8782  001358  6FCF               	movwf	(??_caltime_to_epoch+2)& (0+255),b
  8783  00135A  6BD0               	clrf	(??_caltime_to_epoch+3)& (0+255),b
  8784  00135C  0100               	movlb	0	; () banked
  8785  00135E  51CD               	movf	??_caltime_to_epoch& (0+255),w,b
  8786  001360  0100               	movlb	0	; () banked
  8787  001362  27CF               	addwf	(??_caltime_to_epoch+2)& (0+255),f,b
  8788  001364  0100               	movlb	0	; () banked
  8789  001366  51CE               	movf	(??_caltime_to_epoch+1)& (0+255),w,b
  8790  001368  0100               	movlb	0	; () banked
  8791  00136A  23D0               	addwfc	(??_caltime_to_epoch+3)& (0+255),f,b
  8792  00136C  C0CF  F0BD         	movff	??_caltime_to_epoch+2,___lmul@multiplier
  8793  001370  C0D0  F0BE         	movff	??_caltime_to_epoch+3,___lmul@multiplier+1
  8794  001374  0100               	movlb	0	; () banked
  8795  001376  0E00               	movlw	0
  8796  001378  BFBE               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  8797  00137A  0EFF               	movlw	-1
  8798  00137C  6FBF               	movwf	(___lmul@multiplier+2)& (0+255),b
  8799  00137E  6FC0               	movwf	(___lmul@multiplier+3)& (0+255),b
  8800  001380  0E80               	movlw	128
  8801  001382  0100               	movlb	0	; () banked
  8802  001384  6FC1               	movwf	___lmul@multiplicand& (0+255),b
  8803  001386  0E51               	movlw	81
  8804  001388  6FC2               	movwf	(___lmul@multiplicand+1)& (0+255),b
  8805  00138A  0E01               	movlw	1
  8806  00138C  6FC3               	movwf	(___lmul@multiplicand+2)& (0+255),b
  8807  00138E  0E00               	movlw	0
  8808  001390  6FC4               	movwf	(___lmul@multiplicand+3)& (0+255),b
  8809  001392  EC1E  F019         	call	___lmul	;wreg free
  8810  001396  0100               	movlb	0	; () banked
  8811  001398  51BD               	movf	?___lmul& (0+255),w,b
  8812  00139A  0100               	movlb	0	; () banked
  8813  00139C  27D3               	addwf	caltime_to_epoch@epoch& (0+255),f,b
  8814  00139E  0100               	movlb	0	; () banked
  8815  0013A0  51BE               	movf	(?___lmul+1)& (0+255),w,b
  8816  0013A2  0100               	movlb	0	; () banked
  8817  0013A4  23D4               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
  8818  0013A6  0100               	movlb	0	; () banked
  8819  0013A8  51BF               	movf	(?___lmul+2)& (0+255),w,b
  8820  0013AA  0100               	movlb	0	; () banked
  8821  0013AC  23D5               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
  8822  0013AE  0100               	movlb	0	; () banked
  8823  0013B0  51C0               	movf	(?___lmul+3)& (0+255),w,b
  8824  0013B2  0100               	movlb	0	; () banked
  8825  0013B4  23D6               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
  8826                           
  8827                           ;My_header\My_RTCC.h: 222: epoch += ((epoch_t)60*60) * ct->hh;
  8828  0013B6  0100               	movlb	0	; () banked
  8829  0013B8  EE20 F002          	lfsr	2,2
  8830  0013BC  51C9               	movf	caltime_to_epoch@ct& (0+255),w,b
  8831  0013BE  26D9               	addwf	fsr2l,f,c
  8832  0013C0  51CA               	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
  8833  0013C2  22DA               	addwfc	fsr2h,f,c
  8834  0013C4  50DF               	movf	indf2,w,c
  8835  0013C6  0100               	movlb	0	; () banked
  8836  0013C8  6FCD               	movwf	??_caltime_to_epoch& (0+255),b
  8837  0013CA  0100               	movlb	0	; () banked
  8838  0013CC  51CD               	movf	??_caltime_to_epoch& (0+255),w,b
  8839  0013CE  0100               	movlb	0	; () banked
  8840  0013D0  6FBD               	movwf	___lmul@multiplier& (0+255),b
  8841  0013D2  6BBE               	clrf	(___lmul@multiplier+1)& (0+255),b
  8842  0013D4  6BBF               	clrf	(___lmul@multiplier+2)& (0+255),b
  8843  0013D6  6BC0               	clrf	(___lmul@multiplier+3)& (0+255),b
  8844  0013D8  0E10               	movlw	16
  8845  0013DA  0100               	movlb	0	; () banked
  8846  0013DC  6FC1               	movwf	___lmul@multiplicand& (0+255),b
  8847  0013DE  0E0E               	movlw	14
  8848  0013E0  6FC2               	movwf	(___lmul@multiplicand+1)& (0+255),b
  8849  0013E2  0E00               	movlw	0
  8850  0013E4  6FC3               	movwf	(___lmul@multiplicand+2)& (0+255),b
  8851  0013E6  0E00               	movlw	0
  8852  0013E8  6FC4               	movwf	(___lmul@multiplicand+3)& (0+255),b
  8853  0013EA  EC1E  F019         	call	___lmul	;wreg free
  8854  0013EE  0100               	movlb	0	; () banked
  8855  0013F0  51BD               	movf	?___lmul& (0+255),w,b
  8856  0013F2  0100               	movlb	0	; () banked
  8857  0013F4  27D3               	addwf	caltime_to_epoch@epoch& (0+255),f,b
  8858  0013F6  0100               	movlb	0	; () banked
  8859  0013F8  51BE               	movf	(?___lmul+1)& (0+255),w,b
  8860  0013FA  0100               	movlb	0	; () banked
  8861  0013FC  23D4               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
  8862  0013FE  0100               	movlb	0	; () banked
  8863  001400  51BF               	movf	(?___lmul+2)& (0+255),w,b
  8864  001402  0100               	movlb	0	; () banked
  8865  001404  23D5               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
  8866  001406  0100               	movlb	0	; () banked
  8867  001408  51C0               	movf	(?___lmul+3)& (0+255),w,b
  8868  00140A  0100               	movlb	0	; () banked
  8869  00140C  23D6               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
  8870                           
  8871                           ;My_header\My_RTCC.h: 223: epoch += ((epoch_t)60) * ct->mm;
  8872  00140E  0100               	movlb	0	; () banked
  8873  001410  EE20 F001          	lfsr	2,1
  8874  001414  51C9               	movf	caltime_to_epoch@ct& (0+255),w,b
  8875  001416  26D9               	addwf	fsr2l,f,c
  8876  001418  51CA               	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
  8877  00141A  22DA               	addwfc	fsr2h,f,c
  8878  00141C  50DF               	movf	indf2,w,c
  8879  00141E  0100               	movlb	0	; () banked
  8880  001420  6FCD               	movwf	??_caltime_to_epoch& (0+255),b
  8881  001422  0100               	movlb	0	; () banked
  8882  001424  51CD               	movf	??_caltime_to_epoch& (0+255),w,b
  8883  001426  0100               	movlb	0	; () banked
  8884  001428  6FBD               	movwf	___lmul@multiplier& (0+255),b
  8885  00142A  6BBE               	clrf	(___lmul@multiplier+1)& (0+255),b
  8886  00142C  6BBF               	clrf	(___lmul@multiplier+2)& (0+255),b
  8887  00142E  6BC0               	clrf	(___lmul@multiplier+3)& (0+255),b
  8888  001430  0E3C               	movlw	60
  8889  001432  0100               	movlb	0	; () banked
  8890  001434  6FC1               	movwf	___lmul@multiplicand& (0+255),b
  8891  001436  0E00               	movlw	0
  8892  001438  6FC2               	movwf	(___lmul@multiplicand+1)& (0+255),b
  8893  00143A  0E00               	movlw	0
  8894  00143C  6FC3               	movwf	(___lmul@multiplicand+2)& (0+255),b
  8895  00143E  0E00               	movlw	0
  8896  001440  6FC4               	movwf	(___lmul@multiplicand+3)& (0+255),b
  8897  001442  EC1E  F019         	call	___lmul	;wreg free
  8898  001446  0100               	movlb	0	; () banked
  8899  001448  51BD               	movf	?___lmul& (0+255),w,b
  8900  00144A  0100               	movlb	0	; () banked
  8901  00144C  27D3               	addwf	caltime_to_epoch@epoch& (0+255),f,b
  8902  00144E  0100               	movlb	0	; () banked
  8903  001450  51BE               	movf	(?___lmul+1)& (0+255),w,b
  8904  001452  0100               	movlb	0	; () banked
  8905  001454  23D4               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
  8906  001456  0100               	movlb	0	; () banked
  8907  001458  51BF               	movf	(?___lmul+2)& (0+255),w,b
  8908  00145A  0100               	movlb	0	; () banked
  8909  00145C  23D5               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
  8910  00145E  0100               	movlb	0	; () banked
  8911  001460  51C0               	movf	(?___lmul+3)& (0+255),w,b
  8912  001462  0100               	movlb	0	; () banked
  8913  001464  23D6               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
  8914                           
  8915                           ; BSR set to: 0
  8916                           ;My_header\My_RTCC.h: 224: epoch += ct->ss;
  8917  001466  C0C9  FFD9         	movff	caltime_to_epoch@ct,fsr2l
  8918  00146A  C0CA  FFDA         	movff	caltime_to_epoch@ct+1,fsr2h
  8919  00146E  50DF               	movf	indf2,w,c
  8920  001470  0100               	movlb	0	; () banked
  8921  001472  6FCD               	movwf	??_caltime_to_epoch& (0+255),b
  8922  001474  0100               	movlb	0	; () banked
  8923  001476  51CD               	movf	??_caltime_to_epoch& (0+255),w,b
  8924  001478  0100               	movlb	0	; () banked
  8925  00147A  27D3               	addwf	caltime_to_epoch@epoch& (0+255),f,b
  8926  00147C  0E00               	movlw	0
  8927  00147E  23D4               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
  8928  001480  23D5               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
  8929  001482  23D6               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
  8930                           
  8931                           ; BSR set to: 0
  8932                           ;My_header\My_RTCC.h: 226: *ep = epoch;
  8933  001484  C0CB  FFD9         	movff	caltime_to_epoch@ep,fsr2l
  8934  001488  C0CC  FFDA         	movff	caltime_to_epoch@ep+1,fsr2h
  8935  00148C  C0D3  FFDE         	movff	caltime_to_epoch@epoch,postinc2
  8936  001490  C0D4  FFDE         	movff	caltime_to_epoch@epoch+1,postinc2
  8937  001494  C0D5  FFDE         	movff	caltime_to_epoch@epoch+2,postinc2
  8938  001498  C0D6  FFDE         	movff	caltime_to_epoch@epoch+3,postinc2
  8939                           
  8940                           ; BSR set to: 0
  8941  00149C  0012               	return		;funcret
  8942  00149E                     __end_of_caltime_to_epoch:
  8943                           	opt stack 0
  8944                           tblptru	equ	0xFF8
  8945                           tblptrh	equ	0xFF7
  8946                           tblptrl	equ	0xFF6
  8947                           tablat	equ	0xFF5
  8948                           prodh	equ	0xFF4
  8949                           prodl	equ	0xFF3
  8950                           intcon	equ	0xFF2
  8951                           intcon2	equ	0xFF1
  8952                           indf0	equ	0xFEF
  8953                           postinc0	equ	0xFEE
  8954                           fsr0h	equ	0xFEA
  8955                           fsr0l	equ	0xFE9
  8956                           wreg	equ	0xFE8
  8957                           indf2	equ	0xFDF
  8958                           postinc2	equ	0xFDE
  8959                           postdec2	equ	0xFDD
  8960                           fsr2h	equ	0xFDA
  8961                           fsr2l	equ	0xFD9
  8962                           status	equ	0xFD8
  8963                           
  8964 ;; *************** function _month_length *****************
  8965 ;; Defined at:
  8966 ;;		line 87 in file "../My_header\My_RTCC.h"
  8967 ;; Parameters:    Size  Location     Type
  8968 ;;  year            1    wreg     unsigned char 
  8969 ;;  month           1    4[BANK0 ] unsigned char 
  8970 ;; Auto vars:     Size  Location     Type
  8971 ;;  year            1    9[BANK0 ] unsigned char 
  8972 ;; Return value:  Size  Location     Type
  8973 ;;                  1    wreg      unsigned char 
  8974 ;; Registers used:
  8975 ;;		wreg, status,2, status,0, cstack
  8976 ;; Tracked objects:
  8977 ;;		On entry : 0/0
  8978 ;;		On exit  : 0/0
  8979 ;;		Unchanged: 0/0
  8980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8981 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8982 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8983 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8984 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8985 ;;Total ram usage:        6 bytes
  8986 ;; Hardware stack levels used:    1
  8987 ;; Hardware stack levels required when called:    5
  8988 ;; This function calls:
  8989 ;;		___awmod
  8990 ;; This function is called by:
  8991 ;;		_epoch_to_caltime
  8992 ;;		_caltime_to_epoch
  8993 ;;		_RTCC_adjust_time_inc
  8994 ;;		_RTCC_adjust_time_dec
  8995 ;; This function uses a non-reentrant model
  8996 ;;
  8997                           
  8998                           	psect	text48
  8999  00259C                     __ptext48:
  9000                           	opt stack 0
  9001  00259C                     _month_length:
  9002                           	opt stack 22
  9003                           
  9004                           ; BSR set to: 0
  9005                           ;incstack = 0
  9006                           ;month_length@year stored from wreg
  9007  00259C  0100               	movlb	0	; () banked
  9008  00259E  6FB9               	movwf	month_length@year& (0+255),b
  9009                           
  9010                           ;My_header\My_RTCC.h: 88: if (month == 2) return 28 + !(year & 3)-!(year % 100)+!(year %
      +                           400);
  9011  0025A0  0E02               	movlw	2
  9012  0025A2  0100               	movlb	0	; () banked
  9013  0025A4  19B4               	xorwf	month_length@month& (0+255),w,b
  9014  0025A6  A4D8               	btfss	status,2,c
  9015  0025A8  D03E               	goto	l4849
  9016                           
  9017                           ; BSR set to: 0
  9018  0025AA  C0B9  F0B0         	movff	month_length@year,___awmod@dividend
  9019  0025AE  0100               	movlb	0	; () banked
  9020  0025B0  6BB1               	clrf	(___awmod@dividend+1)& (0+255),b
  9021  0025B2  0E00               	movlw	0
  9022  0025B4  0100               	movlb	0	; () banked
  9023  0025B6  6FB3               	movwf	(___awmod@divisor+1)& (0+255),b
  9024  0025B8  0E64               	movlw	100
  9025  0025BA  6FB2               	movwf	___awmod@divisor& (0+255),b
  9026  0025BC  EC4E  F017         	call	___awmod	;wreg free
  9027  0025C0  0100               	movlb	0	; () banked
  9028  0025C2  51B0               	movf	?___awmod& (0+255),w,b
  9029  0025C4  0100               	movlb	0	; () banked
  9030  0025C6  11B1               	iorwf	(?___awmod+1)& (0+255),w,b
  9031  0025C8  A4D8               	btfss	status,2,c
  9032  0025CA  D002               	goto	u5080
  9033  0025CC  0E01               	movlw	1
  9034  0025CE  D001               	goto	u5090
  9035  0025D0                     u5080:
  9036  0025D0  0E00               	movlw	0
  9037  0025D2                     u5090:
  9038  0025D2  0800               	sublw	0
  9039  0025D4  0100               	movlb	0	; () banked
  9040  0025D6  6FB5               	movwf	??_month_length& (0+255),b
  9041  0025D8  C0B9  F0B0         	movff	month_length@year,___awmod@dividend
  9042  0025DC  0100               	movlb	0	; () banked
  9043  0025DE  6BB1               	clrf	(___awmod@dividend+1)& (0+255),b
  9044  0025E0  0E01               	movlw	1
  9045  0025E2  0100               	movlb	0	; () banked
  9046  0025E4  6FB3               	movwf	(___awmod@divisor+1)& (0+255),b
  9047  0025E6  0E90               	movlw	144
  9048  0025E8  6FB2               	movwf	___awmod@divisor& (0+255),b
  9049  0025EA  EC4E  F017         	call	___awmod	;wreg free
  9050  0025EE  0100               	movlb	0	; () banked
  9051  0025F0  51B0               	movf	?___awmod& (0+255),w,b
  9052  0025F2  0100               	movlb	0	; () banked
  9053  0025F4  11B1               	iorwf	(?___awmod+1)& (0+255),w,b
  9054  0025F6  A4D8               	btfss	status,2,c
  9055  0025F8  D004               	goto	u5100
  9056  0025FA  0100               	movlb	0	; () banked
  9057  0025FC  6BB6               	clrf	(??_month_length+1)& (0+255),b
  9058  0025FE  2BB6               	incf	(??_month_length+1)& (0+255),f,b
  9059  002600  D002               	goto	u5118
  9060  002602                     u5100:
  9061  002602  0100               	movlb	0	; () banked
  9062  002604  6BB6               	clrf	(??_month_length+1)& (0+255),b
  9063  002606                     u5118:
  9064  002606  C0B9  F0B7         	movff	month_length@year,??_month_length+2
  9065  00260A  0E03               	movlw	3
  9066  00260C  0100               	movlb	0	; () banked
  9067  00260E  17B7               	andwf	(??_month_length+2)& (0+255),f,b
  9068  002610  A4D8               	btfss	status,2,c
  9069  002612  D002               	goto	u5120
  9070  002614  0E01               	movlw	1
  9071  002616  D001               	goto	u5130
  9072  002618                     u5120:
  9073  002618  0E00               	movlw	0
  9074  00261A                     u5130:
  9075  00261A  0100               	movlb	0	; () banked
  9076  00261C  25B6               	addwf	(??_month_length+1)& (0+255),w,b
  9077  00261E  0100               	movlb	0	; () banked
  9078  002620  25B5               	addwf	??_month_length& (0+255),w,b
  9079  002622  0F1C               	addlw	28
  9080                           
  9081                           ; BSR set to: 0
  9082                           
  9083                           ; BSR set to: 0
  9084  002624  0012               	return	
  9085  002626                     l4849:
  9086                           
  9087                           ; BSR set to: 0
  9088                           ;My_header\My_RTCC.h: 89: else return 31 - (((-(month & 1)^month)&13) == 4);
  9089  002626  0100               	movlb	0	; () banked
  9090  002628  51B4               	movf	month_length@month& (0+255),w,b
  9091  00262A  0B01               	andlw	1
  9092  00262C  0100               	movlb	0	; () banked
  9093  00262E  6FB5               	movwf	??_month_length& (0+255),b
  9094  002630  6BB6               	clrf	(??_month_length+1)& (0+255),b
  9095  002632  0100               	movlb	0	; () banked
  9096  002634  1FB5               	comf	??_month_length& (0+255),f,b
  9097  002636  1FB6               	comf	(??_month_length+1)& (0+255),f,b
  9098  002638  4BB5               	infsnz	??_month_length& (0+255),f,b
  9099  00263A  2BB6               	incf	(??_month_length+1)& (0+255),f,b
  9100  00263C  0100               	movlb	0	; () banked
  9101  00263E  51B4               	movf	month_length@month& (0+255),w,b
  9102  002640  0100               	movlb	0	; () banked
  9103  002642  6FB7               	movwf	(??_month_length+2)& (0+255),b
  9104  002644  6BB8               	clrf	(??_month_length+3)& (0+255),b
  9105  002646  0100               	movlb	0	; () banked
  9106  002648  51B5               	movf	??_month_length& (0+255),w,b
  9107  00264A  0100               	movlb	0	; () banked
  9108  00264C  1BB7               	xorwf	(??_month_length+2)& (0+255),f,b
  9109  00264E  0100               	movlb	0	; () banked
  9110  002650  51B6               	movf	(??_month_length+1)& (0+255),w,b
  9111  002652  0100               	movlb	0	; () banked
  9112  002654  1BB8               	xorwf	(??_month_length+3)& (0+255),f,b
  9113  002656  0E0D               	movlw	13
  9114  002658  0100               	movlb	0	; () banked
  9115  00265A  17B7               	andwf	(??_month_length+2)& (0+255),f,b
  9116  00265C  0E00               	movlw	0
  9117  00265E  17B8               	andwf	(??_month_length+3)& (0+255),f,b
  9118  002660  0E04               	movlw	4
  9119  002662  0100               	movlb	0	; () banked
  9120  002664  19B7               	xorwf	(??_month_length+2)& (0+255),w,b
  9121  002666  0100               	movlb	0	; () banked
  9122  002668  11B8               	iorwf	(??_month_length+3)& (0+255),w,b
  9123  00266A  A4D8               	btfss	status,2,c
  9124  00266C  D002               	goto	u5140
  9125  00266E  0E01               	movlw	1
  9126  002670  D001               	goto	u5150
  9127  002672                     u5140:
  9128  002672  0E00               	movlw	0
  9129  002674                     u5150:
  9130  002674  0800               	sublw	0
  9131  002676  0F1F               	addlw	31
  9132                           
  9133                           ; BSR set to: 0
  9134  002678  0012               	return	
  9135  00267A                     __end_of_month_length:
  9136                           	opt stack 0
  9137                           tblptru	equ	0xFF8
  9138                           tblptrh	equ	0xFF7
  9139                           tblptrl	equ	0xFF6
  9140                           tablat	equ	0xFF5
  9141                           prodh	equ	0xFF4
  9142                           prodl	equ	0xFF3
  9143                           intcon	equ	0xFF2
  9144                           intcon2	equ	0xFF1
  9145                           indf0	equ	0xFEF
  9146                           postinc0	equ	0xFEE
  9147                           fsr0h	equ	0xFEA
  9148                           fsr0l	equ	0xFE9
  9149                           wreg	equ	0xFE8
  9150                           indf2	equ	0xFDF
  9151                           postinc2	equ	0xFDE
  9152                           postdec2	equ	0xFDD
  9153                           fsr2h	equ	0xFDA
  9154                           fsr2l	equ	0xFD9
  9155                           status	equ	0xFD8
  9156                           
  9157 ;; *************** function ___awmod *****************
  9158 ;; Defined at:
  9159 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  9160 ;; Parameters:    Size  Location     Type
  9161 ;;  dividend        2    0[BANK0 ] int 
  9162 ;;  divisor         2    2[BANK0 ] int 
  9163 ;; Auto vars:     Size  Location     Type
  9164 ;;  sign            1   32[COMRAM] unsigned char 
  9165 ;;  counter         1   31[COMRAM] unsigned char 
  9166 ;; Return value:  Size  Location     Type
  9167 ;;                  2    0[BANK0 ] int 
  9168 ;; Registers used:
  9169 ;;		wreg, status,2, status,0
  9170 ;; Tracked objects:
  9171 ;;		On entry : 0/0
  9172 ;;		On exit  : 0/0
  9173 ;;		Unchanged: 0/0
  9174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9175 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9176 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9178 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9179 ;;Total ram usage:        6 bytes
  9180 ;; Hardware stack levels used:    1
  9181 ;; Hardware stack levels required when called:    4
  9182 ;; This function calls:
  9183 ;;		Nothing
  9184 ;; This function is called by:
  9185 ;;		_month_length
  9186 ;; This function uses a non-reentrant model
  9187 ;;
  9188                           
  9189                           	psect	text49
  9190  002E9C                     __ptext49:
  9191                           	opt stack 0
  9192  002E9C                     ___awmod:
  9193                           	opt stack 22
  9194                           
  9195                           ; BSR set to: 0
  9196                           ;incstack = 0
  9197  002E9C  0E00               	movlw	0
  9198  002E9E  6E21               	movwf	___awmod@sign,c
  9199  002EA0  0100               	movlb	0	; () banked
  9200  002EA2  AFB1               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9201  002EA4  D007               	goto	l4757
  9202                           
  9203                           ; BSR set to: 0
  9204  002EA6  0100               	movlb	0	; () banked
  9205  002EA8  6DB0               	negf	___awmod@dividend& (0+255),b
  9206  002EAA  1FB1               	comf	(___awmod@dividend+1)& (0+255),f,b
  9207  002EAC  B0D8               	btfsc	status,0,c
  9208  002EAE  2BB1               	incf	(___awmod@dividend+1)& (0+255),f,b
  9209                           
  9210                           ; BSR set to: 0
  9211  002EB0  0E01               	movlw	1
  9212  002EB2  6E21               	movwf	___awmod@sign,c
  9213  002EB4                     l4757:
  9214                           
  9215                           ; BSR set to: 0
  9216  002EB4  0100               	movlb	0	; () banked
  9217  002EB6  AFB3               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9218  002EB8  D005               	goto	l4761
  9219                           
  9220                           ; BSR set to: 0
  9221  002EBA  0100               	movlb	0	; () banked
  9222  002EBC  6DB2               	negf	___awmod@divisor& (0+255),b
  9223  002EBE  1FB3               	comf	(___awmod@divisor+1)& (0+255),f,b
  9224  002EC0  B0D8               	btfsc	status,0,c
  9225  002EC2  2BB3               	incf	(___awmod@divisor+1)& (0+255),f,b
  9226  002EC4                     l4761:
  9227                           
  9228                           ; BSR set to: 0
  9229  002EC4  0100               	movlb	0	; () banked
  9230  002EC6  51B2               	movf	___awmod@divisor& (0+255),w,b
  9231  002EC8  0100               	movlb	0	; () banked
  9232  002ECA  11B3               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9233  002ECC  B4D8               	btfsc	status,2,c
  9234  002ECE  D023               	goto	l4777
  9235                           
  9236                           ; BSR set to: 0
  9237  002ED0  0E01               	movlw	1
  9238  002ED2  6E20               	movwf	___awmod@counter,c
  9239  002ED4  D005               	goto	l4767
  9240  002ED6                     l4765:
  9241                           
  9242                           ; BSR set to: 0
  9243  002ED6  0100               	movlb	0	; () banked
  9244  002ED8  90D8               	bcf	status,0,c
  9245  002EDA  37B2               	rlcf	___awmod@divisor& (0+255),f,b
  9246  002EDC  37B3               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9247  002EDE  2A20               	incf	___awmod@counter,f,c
  9248  002EE0                     l4767:
  9249                           
  9250                           ; BSR set to: 0
  9251  002EE0  0100               	movlb	0	; () banked
  9252  002EE2  AFB3               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9253  002EE4  D7F8               	goto	l4765
  9254  002EE6                     l4769:
  9255                           
  9256                           ; BSR set to: 0
  9257  002EE6  0100               	movlb	0	; () banked
  9258  002EE8  51B2               	movf	___awmod@divisor& (0+255),w,b
  9259  002EEA  0100               	movlb	0	; () banked
  9260  002EEC  5DB0               	subwf	___awmod@dividend& (0+255),w,b
  9261  002EEE  0100               	movlb	0	; () banked
  9262  002EF0  51B3               	movf	(___awmod@divisor+1)& (0+255),w,b
  9263  002EF2  0100               	movlb	0	; () banked
  9264  002EF4  59B1               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9265  002EF6  A0D8               	btfss	status,0,c
  9266  002EF8  D008               	goto	l4773
  9267                           
  9268                           ; BSR set to: 0
  9269  002EFA  0100               	movlb	0	; () banked
  9270  002EFC  51B2               	movf	___awmod@divisor& (0+255),w,b
  9271  002EFE  0100               	movlb	0	; () banked
  9272  002F00  5FB0               	subwf	___awmod@dividend& (0+255),f,b
  9273  002F02  0100               	movlb	0	; () banked
  9274  002F04  51B3               	movf	(___awmod@divisor+1)& (0+255),w,b
  9275  002F06  0100               	movlb	0	; () banked
  9276  002F08  5BB1               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9277  002F0A                     l4773:
  9278                           
  9279                           ; BSR set to: 0
  9280  002F0A  0100               	movlb	0	; () banked
  9281  002F0C  90D8               	bcf	status,0,c
  9282  002F0E  33B3               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9283  002F10  33B2               	rrcf	___awmod@divisor& (0+255),f,b
  9284                           
  9285                           ; BSR set to: 0
  9286  002F12  2E20               	decfsz	___awmod@counter,f,c
  9287  002F14  D7E8               	goto	l4769
  9288  002F16                     l4777:
  9289                           
  9290                           ; BSR set to: 0
  9291  002F16  5021               	movf	___awmod@sign,w,c
  9292  002F18  B4D8               	btfsc	status,2,c
  9293  002F1A  D005               	goto	l4781
  9294                           
  9295                           ; BSR set to: 0
  9296  002F1C  0100               	movlb	0	; () banked
  9297  002F1E  6DB0               	negf	___awmod@dividend& (0+255),b
  9298  002F20  1FB1               	comf	(___awmod@dividend+1)& (0+255),f,b
  9299  002F22  B0D8               	btfsc	status,0,c
  9300  002F24  2BB1               	incf	(___awmod@dividend+1)& (0+255),f,b
  9301  002F26                     l4781:
  9302                           
  9303                           ; BSR set to: 0
  9304  002F26  C0B0  F0B0         	movff	___awmod@dividend,?___awmod
  9305  002F2A  C0B1  F0B1         	movff	___awmod@dividend+1,?___awmod+1
  9306  002F2E  0012               	return	
  9307  002F30                     __end_of___awmod:
  9308                           	opt stack 0
  9309                           tblptru	equ	0xFF8
  9310                           tblptrh	equ	0xFF7
  9311                           tblptrl	equ	0xFF6
  9312                           tablat	equ	0xFF5
  9313                           prodh	equ	0xFF4
  9314                           prodl	equ	0xFF3
  9315                           intcon	equ	0xFF2
  9316                           intcon2	equ	0xFF1
  9317                           indf0	equ	0xFEF
  9318                           postinc0	equ	0xFEE
  9319                           fsr0h	equ	0xFEA
  9320                           fsr0l	equ	0xFE9
  9321                           wreg	equ	0xFE8
  9322                           indf2	equ	0xFDF
  9323                           postinc2	equ	0xFDE
  9324                           postdec2	equ	0xFDD
  9325                           fsr2h	equ	0xFDA
  9326                           fsr2l	equ	0xFD9
  9327                           status	equ	0xFD8
  9328                           
  9329 ;; *************** function ___lmul *****************
  9330 ;; Defined at:
  9331 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul32.c"
  9332 ;; Parameters:    Size  Location     Type
  9333 ;;  multiplier      4   13[BANK0 ] unsigned long 
  9334 ;;  multiplicand    4   17[BANK0 ] unsigned long 
  9335 ;; Auto vars:     Size  Location     Type
  9336 ;;  product         4   21[BANK0 ] unsigned long 
  9337 ;; Return value:  Size  Location     Type
  9338 ;;                  4   13[BANK0 ] unsigned long 
  9339 ;; Registers used:
  9340 ;;		wreg, status,2, status,0
  9341 ;; Tracked objects:
  9342 ;;		On entry : 0/0
  9343 ;;		On exit  : 0/0
  9344 ;;		Unchanged: 0/0
  9345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9346 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9347 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9349 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9350 ;;Total ram usage:       12 bytes
  9351 ;; Hardware stack levels used:    1
  9352 ;; Hardware stack levels required when called:    4
  9353 ;; This function calls:
  9354 ;;		Nothing
  9355 ;; This function is called by:
  9356 ;;		_get_quot_rem
  9357 ;;		_caltime_to_epoch
  9358 ;;		_RTCC_adjust_time_inc
  9359 ;;		_RTCC_adjust_time_dec
  9360 ;; This function uses a non-reentrant model
  9361 ;;
  9362                           
  9363                           	psect	text50
  9364  00323C                     __ptext50:
  9365                           	opt stack 0
  9366  00323C                     ___lmul:
  9367                           	opt stack 23
  9368                           
  9369                           ; BSR set to: 0
  9370                           ;incstack = 0
  9371  00323C  0E00               	movlw	0
  9372  00323E  0100               	movlb	0	; () banked
  9373  003240  6FC5               	movwf	___lmul@product& (0+255),b
  9374  003242  0E00               	movlw	0
  9375  003244  6FC6               	movwf	(___lmul@product+1)& (0+255),b
  9376  003246  0E00               	movlw	0
  9377  003248  6FC7               	movwf	(___lmul@product+2)& (0+255),b
  9378  00324A  0E00               	movlw	0
  9379  00324C  6FC8               	movwf	(___lmul@product+3)& (0+255),b
  9380  00324E                     l4697:
  9381                           
  9382                           ; BSR set to: 0
  9383  00324E  0100               	movlb	0	; () banked
  9384  003250  A1BD               	btfss	___lmul@multiplier& (0+255),0,b
  9385  003252  D010               	goto	l4701
  9386                           
  9387                           ; BSR set to: 0
  9388  003254  0100               	movlb	0	; () banked
  9389  003256  51C1               	movf	___lmul@multiplicand& (0+255),w,b
  9390  003258  0100               	movlb	0	; () banked
  9391  00325A  27C5               	addwf	___lmul@product& (0+255),f,b
  9392  00325C  0100               	movlb	0	; () banked
  9393  00325E  51C2               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  9394  003260  0100               	movlb	0	; () banked
  9395  003262  23C6               	addwfc	(___lmul@product+1)& (0+255),f,b
  9396  003264  0100               	movlb	0	; () banked
  9397  003266  51C3               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  9398  003268  0100               	movlb	0	; () banked
  9399  00326A  23C7               	addwfc	(___lmul@product+2)& (0+255),f,b
  9400  00326C  0100               	movlb	0	; () banked
  9401  00326E  51C4               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  9402  003270  0100               	movlb	0	; () banked
  9403  003272  23C8               	addwfc	(___lmul@product+3)& (0+255),f,b
  9404  003274                     l4701:
  9405                           
  9406                           ; BSR set to: 0
  9407  003274  0100               	movlb	0	; () banked
  9408  003276  90D8               	bcf	status,0,c
  9409  003278  37C1               	rlcf	___lmul@multiplicand& (0+255),f,b
  9410  00327A  37C2               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  9411  00327C  37C3               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  9412  00327E  37C4               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  9413                           
  9414                           ; BSR set to: 0
  9415  003280  0100               	movlb	0	; () banked
  9416  003282  90D8               	bcf	status,0,c
  9417  003284  33C0               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  9418  003286  33BF               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  9419  003288  33BE               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  9420  00328A  33BD               	rrcf	___lmul@multiplier& (0+255),f,b
  9421  00328C  0100               	movlb	0	; () banked
  9422  00328E  51BD               	movf	___lmul@multiplier& (0+255),w,b
  9423  003290  0100               	movlb	0	; () banked
  9424  003292  11BE               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  9425  003294  0100               	movlb	0	; () banked
  9426  003296  11BF               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  9427  003298  0100               	movlb	0	; () banked
  9428  00329A  11C0               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  9429  00329C  A4D8               	btfss	status,2,c
  9430  00329E  D7D7               	goto	l4697
  9431                           
  9432                           ; BSR set to: 0
  9433  0032A0  C0C5  F0BD         	movff	___lmul@product,?___lmul
  9434  0032A4  C0C6  F0BE         	movff	___lmul@product+1,?___lmul+1
  9435  0032A8  C0C7  F0BF         	movff	___lmul@product+2,?___lmul+2
  9436  0032AC  C0C8  F0C0         	movff	___lmul@product+3,?___lmul+3
  9437                           
  9438                           ; BSR set to: 0
  9439  0032B0  0012               	return		;funcret
  9440  0032B2                     __end_of___lmul:
  9441                           	opt stack 0
  9442                           tblptru	equ	0xFF8
  9443                           tblptrh	equ	0xFF7
  9444                           tblptrl	equ	0xFF6
  9445                           tablat	equ	0xFF5
  9446                           prodh	equ	0xFF4
  9447                           prodl	equ	0xFF3
  9448                           intcon	equ	0xFF2
  9449                           intcon2	equ	0xFF1
  9450                           indf0	equ	0xFEF
  9451                           postinc0	equ	0xFEE
  9452                           fsr0h	equ	0xFEA
  9453                           fsr0l	equ	0xFE9
  9454                           wreg	equ	0xFE8
  9455                           indf2	equ	0xFDF
  9456                           postinc2	equ	0xFDE
  9457                           postdec2	equ	0xFDD
  9458                           fsr2h	equ	0xFDA
  9459                           fsr2l	equ	0xFD9
  9460                           status	equ	0xFD8
  9461                           
  9462 ;; *************** function _RTCC_to_caltime *****************
  9463 ;; Defined at:
  9464 ;;		line 121 in file "../My_header\My_RTCC.h"
  9465 ;; Parameters:    Size  Location     Type
  9466 ;;  ct              2    0[BANK0 ] PTR struct .
  9467 ;;		 -> caltime_now(7), 
  9468 ;; Auto vars:     Size  Location     Type
  9469 ;;  dumy            1    2[BANK0 ] unsigned char 
  9470 ;; Return value:  Size  Location     Type
  9471 ;;		None               void
  9472 ;; Registers used:
  9473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9474 ;; Tracked objects:
  9475 ;;		On entry : 0/0
  9476 ;;		On exit  : 0/0
  9477 ;;		Unchanged: 0/0
  9478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9479 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9480 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9482 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9483 ;;Total ram usage:        3 bytes
  9484 ;; Hardware stack levels used:    1
  9485 ;; Hardware stack levels required when called:    5
  9486 ;; This function calls:
  9487 ;;		_x_to_d
  9488 ;; This function is called by:
  9489 ;;		_RTCC_from_RTCC
  9490 ;; This function uses a non-reentrant model
  9491 ;;
  9492                           
  9493                           	psect	text51
  9494  002BEA                     __ptext51:
  9495                           	opt stack 0
  9496  002BEA                     _RTCC_to_caltime:
  9497                           	opt stack 23
  9498  002BEA                     l399:
  9499  002BEA  010F               	movlb	15	; () banked
  9500  002BEC  B93F               	btfsc	63,4,b	;volatile
  9501  002BEE  D7FD               	goto	l399
  9502                           
  9503                           ; BSR set to: 15
  9504                           ;My_header\My_RTCC.h: 124: RTCCFGbits.RTCPTR0 = 1;
  9505  002BF0  010F               	movlb	15	; () banked
  9506  002BF2  813F               	bsf	63,0,b	;volatile
  9507                           
  9508                           ;My_header\My_RTCC.h: 125: RTCCFGbits.RTCPTR1 = 1;
  9509  002BF4  010F               	movlb	15	; () banked
  9510  002BF6  833F               	bsf	63,1,b	;volatile
  9511                           
  9512                           ; BSR set to: 15
  9513                           ;My_header\My_RTCC.h: 127: ct->YY = x_to_d(RTCVALL);
  9514  002BF8  0100               	movlb	0	; () banked
  9515  002BFA  EE20 F006          	lfsr	2,6
  9516  002BFE  51B0               	movf	RTCC_to_caltime@ct& (0+255),w,b
  9517  002C00  26D9               	addwf	fsr2l,f,c
  9518  002C02  51B1               	movf	(RTCC_to_caltime@ct+1)& (0+255),w,b
  9519  002C04  22DA               	addwfc	fsr2h,f,c
  9520  002C06  010F               	movlb	15	; () banked
  9521  002C08  513A               	movf	58,w,b	;volatile
  9522  002C0A  EC17  F01D         	call	_x_to_d
  9523  002C0E  6EDF               	movwf	indf2,c
  9524                           
  9525                           ;My_header\My_RTCC.h: 128: uint8_t dumy = RTCVALH;
  9526  002C10  CF3B F0B2          	movff	3899,RTCC_to_caltime@dumy	;volatile
  9527                           
  9528                           ;My_header\My_RTCC.h: 129: ct->DD = x_to_d(RTCVALL);
  9529  002C14  0100               	movlb	0	; () banked
  9530  002C16  EE20 F004          	lfsr	2,4
  9531  002C1A  51B0               	movf	RTCC_to_caltime@ct& (0+255),w,b
  9532  002C1C  26D9               	addwf	fsr2l,f,c
  9533  002C1E  51B1               	movf	(RTCC_to_caltime@ct+1)& (0+255),w,b
  9534  002C20  22DA               	addwfc	fsr2h,f,c
  9535  002C22  010F               	movlb	15	; () banked
  9536  002C24  513A               	movf	58,w,b	;volatile
  9537  002C26  EC17  F01D         	call	_x_to_d
  9538  002C2A  6EDF               	movwf	indf2,c
  9539                           
  9540                           ;My_header\My_RTCC.h: 130: ct->MM = x_to_d(RTCVALH);
  9541  002C2C  0100               	movlb	0	; () banked
  9542  002C2E  EE20 F005          	lfsr	2,5
  9543  002C32  51B0               	movf	RTCC_to_caltime@ct& (0+255),w,b
  9544  002C34  26D9               	addwf	fsr2l,f,c
  9545  002C36  51B1               	movf	(RTCC_to_caltime@ct+1)& (0+255),w,b
  9546  002C38  22DA               	addwfc	fsr2h,f,c
  9547  002C3A  010F               	movlb	15	; () banked
  9548  002C3C  513B               	movf	59,w,b	;volatile
  9549  002C3E  EC17  F01D         	call	_x_to_d
  9550  002C42  6EDF               	movwf	indf2,c
  9551                           
  9552                           ;My_header\My_RTCC.h: 131: ct->hh = x_to_d(RTCVALL);
  9553  002C44  0100               	movlb	0	; () banked
  9554  002C46  EE20 F002          	lfsr	2,2
  9555  002C4A  51B0               	movf	RTCC_to_caltime@ct& (0+255),w,b
  9556  002C4C  26D9               	addwf	fsr2l,f,c
  9557  002C4E  51B1               	movf	(RTCC_to_caltime@ct+1)& (0+255),w,b
  9558  002C50  22DA               	addwfc	fsr2h,f,c
  9559  002C52  010F               	movlb	15	; () banked
  9560  002C54  513A               	movf	58,w,b	;volatile
  9561  002C56  EC17  F01D         	call	_x_to_d
  9562  002C5A  6EDF               	movwf	indf2,c
  9563                           
  9564                           ;My_header\My_RTCC.h: 132: ct->EE = x_to_d(RTCVALH);
  9565  002C5C  0100               	movlb	0	; () banked
  9566  002C5E  EE20 F003          	lfsr	2,3
  9567  002C62  51B0               	movf	RTCC_to_caltime@ct& (0+255),w,b
  9568  002C64  26D9               	addwf	fsr2l,f,c
  9569  002C66  51B1               	movf	(RTCC_to_caltime@ct+1)& (0+255),w,b
  9570  002C68  22DA               	addwfc	fsr2h,f,c
  9571  002C6A  010F               	movlb	15	; () banked
  9572  002C6C  513B               	movf	59,w,b	;volatile
  9573  002C6E  EC17  F01D         	call	_x_to_d
  9574  002C72  6EDF               	movwf	indf2,c
  9575                           
  9576                           ;My_header\My_RTCC.h: 133: ct->ss = x_to_d(RTCVALL);
  9577  002C74  010F               	movlb	15	; () banked
  9578  002C76  513A               	movf	58,w,b	;volatile
  9579  002C78  EC17  F01D         	call	_x_to_d
  9580  002C7C  C0B0  FFD9         	movff	RTCC_to_caltime@ct,fsr2l
  9581  002C80  C0B1  FFDA         	movff	RTCC_to_caltime@ct+1,fsr2h
  9582  002C84  6EDF               	movwf	indf2,c
  9583                           
  9584                           ;My_header\My_RTCC.h: 134: ct->mm = x_to_d(RTCVALH);
  9585  002C86  0100               	movlb	0	; () banked
  9586  002C88  EE20 F001          	lfsr	2,1
  9587  002C8C  51B0               	movf	RTCC_to_caltime@ct& (0+255),w,b
  9588  002C8E  26D9               	addwf	fsr2l,f,c
  9589  002C90  51B1               	movf	(RTCC_to_caltime@ct+1)& (0+255),w,b
  9590  002C92  22DA               	addwfc	fsr2h,f,c
  9591  002C94  010F               	movlb	15	; () banked
  9592  002C96  513B               	movf	59,w,b	;volatile
  9593  002C98  EC17  F01D         	call	_x_to_d
  9594  002C9C  6EDF               	movwf	indf2,c
  9595  002C9E  0012               	return		;funcret
  9596  002CA0                     __end_of_RTCC_to_caltime:
  9597                           	opt stack 0
  9598                           tblptru	equ	0xFF8
  9599                           tblptrh	equ	0xFF7
  9600                           tblptrl	equ	0xFF6
  9601                           tablat	equ	0xFF5
  9602                           prodh	equ	0xFF4
  9603                           prodl	equ	0xFF3
  9604                           intcon	equ	0xFF2
  9605                           intcon2	equ	0xFF1
  9606                           indf0	equ	0xFEF
  9607                           postinc0	equ	0xFEE
  9608                           fsr0h	equ	0xFEA
  9609                           fsr0l	equ	0xFE9
  9610                           wreg	equ	0xFE8
  9611                           indf2	equ	0xFDF
  9612                           postinc2	equ	0xFDE
  9613                           postdec2	equ	0xFDD
  9614                           fsr2h	equ	0xFDA
  9615                           fsr2l	equ	0xFD9
  9616                           status	equ	0xFD8
  9617                           
  9618 ;; *************** function _x_to_d *****************
  9619 ;; Defined at:
  9620 ;;		line 81 in file "../My_header\My_RTCC.h"
  9621 ;; Parameters:    Size  Location     Type
  9622 ;;  hex             1    wreg     unsigned char 
  9623 ;; Auto vars:     Size  Location     Type
  9624 ;;  hex             1   32[COMRAM] unsigned char 
  9625 ;; Return value:  Size  Location     Type
  9626 ;;                  1    wreg      unsigned char 
  9627 ;; Registers used:
  9628 ;;		wreg, status,2, status,0, prodl, prodh
  9629 ;; Tracked objects:
  9630 ;;		On entry : 0/0
  9631 ;;		On exit  : 0/0
  9632 ;;		Unchanged: 0/0
  9633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9635 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9636 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9637 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9638 ;;Total ram usage:        2 bytes
  9639 ;; Hardware stack levels used:    1
  9640 ;; Hardware stack levels required when called:    4
  9641 ;; This function calls:
  9642 ;;		Nothing
  9643 ;; This function is called by:
  9644 ;;		_RTCC_to_caltime
  9645 ;; This function uses a non-reentrant model
  9646 ;;
  9647                           
  9648                           	psect	text52
  9649  003A2E                     __ptext52:
  9650                           	opt stack 0
  9651  003A2E                     _x_to_d:
  9652                           	opt stack 23
  9653                           
  9654                           ;incstack = 0
  9655                           ;x_to_d@hex stored from wreg
  9656  003A2E  6E21               	movwf	x_to_d@hex,c
  9657                           
  9658                           ;My_header\My_RTCC.h: 82: return 10 * (0x0F & (hex >> 4)) + (0x0F & hex);
  9659  003A30  C021  F020         	movff	x_to_d@hex,??_x_to_d
  9660  003A34  0E0F               	movlw	15
  9661  003A36  1620               	andwf	??_x_to_d,f,c
  9662  003A38  3821               	swapf	x_to_d@hex,w,c
  9663  003A3A  0B0F               	andlw	15
  9664  003A3C  0B0F               	andlw	15
  9665  003A3E  0D0A               	mullw	10
  9666  003A40  50F3               	movf	prodl,w,c
  9667  003A42  2420               	addwf	??_x_to_d,w,c
  9668  003A44  0012               	return	
  9669  003A46                     __end_of_x_to_d:
  9670                           	opt stack 0
  9671                           tblptru	equ	0xFF8
  9672                           tblptrh	equ	0xFF7
  9673                           tblptrl	equ	0xFF6
  9674                           tablat	equ	0xFF5
  9675                           prodh	equ	0xFF4
  9676                           prodl	equ	0xFF3
  9677                           intcon	equ	0xFF2
  9678                           intcon2	equ	0xFF1
  9679                           indf0	equ	0xFEF
  9680                           postinc0	equ	0xFEE
  9681                           fsr0h	equ	0xFEA
  9682                           fsr0l	equ	0xFE9
  9683                           wreg	equ	0xFE8
  9684                           indf2	equ	0xFDF
  9685                           postinc2	equ	0xFDE
  9686                           postdec2	equ	0xFDD
  9687                           fsr2h	equ	0xFDA
  9688                           fsr2l	equ	0xFD9
  9689                           status	equ	0xFD8
  9690                           
  9691 ;; *************** function _RTCC_adjust_time_cursor *****************
  9692 ;; Defined at:
  9693 ;;		line 311 in file "../My_header\My_RTCC.h"
  9694 ;; Parameters:    Size  Location     Type
  9695 ;;		None
  9696 ;; Auto vars:     Size  Location     Type
  9697 ;;		None
  9698 ;; Return value:  Size  Location     Type
  9699 ;;		None               void
  9700 ;; Registers used:
  9701 ;;		wreg, status,2
  9702 ;; Tracked objects:
  9703 ;;		On entry : 0/0
  9704 ;;		On exit  : 0/0
  9705 ;;		Unchanged: 0/0
  9706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9711 ;;Total ram usage:        0 bytes
  9712 ;; Hardware stack levels used:    1
  9713 ;; Hardware stack levels required when called:    4
  9714 ;; This function calls:
  9715 ;;		Nothing
  9716 ;; This function is called by:
  9717 ;;		_RTCC_adjust_time_button
  9718 ;; This function uses a non-reentrant model
  9719 ;;
  9720                           
  9721                           	psect	text53
  9722  00336C                     __ptext53:
  9723                           	opt stack 0
  9724  00336C                     _RTCC_adjust_time_cursor:
  9725                           	opt stack 25
  9726                           
  9727                           ;My_header\My_RTCC.h: 312: if (edit_flag.flag.ss)edit_flag.flags = 0x02;
  9728                           
  9729                           ;incstack = 0
  9730  00336C  0100               	movlb	0	; () banked
  9731  00336E  A191               	btfss	_edit_flag& (0+255),0,b
  9732  003370  D004               	goto	l500
  9733                           
  9734                           ; BSR set to: 0
  9735  003372  0E02               	movlw	2
  9736  003374  0100               	movlb	0	; () banked
  9737  003376  6F91               	movwf	_edit_flag& (0+255),b
  9738  003378  0012               	return	
  9739  00337A                     l500:
  9740                           
  9741                           ; BSR set to: 0
  9742                           ;My_header\My_RTCC.h: 313: else if (edit_flag.flag.mm)edit_flag.flags = 0x04;
  9743  00337A  0100               	movlb	0	; () banked
  9744  00337C  A391               	btfss	_edit_flag& (0+255),1,b
  9745  00337E  D004               	goto	l502
  9746                           
  9747                           ; BSR set to: 0
  9748  003380  0E04               	movlw	4
  9749  003382  0100               	movlb	0	; () banked
  9750  003384  6F91               	movwf	_edit_flag& (0+255),b
  9751  003386  0012               	return	
  9752  003388                     l502:
  9753                           
  9754                           ; BSR set to: 0
  9755                           ;My_header\My_RTCC.h: 314: else if (edit_flag.flag.hh)edit_flag.flags = 0x08;
  9756  003388  0100               	movlb	0	; () banked
  9757  00338A  A591               	btfss	_edit_flag& (0+255),2,b
  9758  00338C  D004               	goto	l504
  9759                           
  9760                           ; BSR set to: 0
  9761  00338E  0E08               	movlw	8
  9762  003390  0100               	movlb	0	; () banked
  9763  003392  6F91               	movwf	_edit_flag& (0+255),b
  9764  003394  0012               	return	
  9765  003396                     l504:
  9766                           
  9767                           ; BSR set to: 0
  9768                           ;My_header\My_RTCC.h: 315: else if (edit_flag.flag.DD)edit_flag.flags = 0x10;
  9769  003396  0100               	movlb	0	; () banked
  9770  003398  A791               	btfss	_edit_flag& (0+255),3,b
  9771  00339A  D004               	goto	l506
  9772                           
  9773                           ; BSR set to: 0
  9774  00339C  0E10               	movlw	16
  9775  00339E  0100               	movlb	0	; () banked
  9776  0033A0  6F91               	movwf	_edit_flag& (0+255),b
  9777  0033A2  0012               	return	
  9778  0033A4                     l506:
  9779                           
  9780                           ; BSR set to: 0
  9781                           ;My_header\My_RTCC.h: 316: else if (edit_flag.flag.MM)edit_flag.flags = 0x20;
  9782  0033A4  0100               	movlb	0	; () banked
  9783  0033A6  A991               	btfss	_edit_flag& (0+255),4,b
  9784  0033A8  D004               	goto	l508
  9785                           
  9786                           ; BSR set to: 0
  9787  0033AA  0E20               	movlw	32
  9788  0033AC  0100               	movlb	0	; () banked
  9789  0033AE  6F91               	movwf	_edit_flag& (0+255),b
  9790  0033B0  0012               	return	
  9791  0033B2                     l508:
  9792                           
  9793                           ; BSR set to: 0
  9794                           ;My_header\My_RTCC.h: 317: else if (edit_flag.flag.YY)edit_flag.flags = 0x01;
  9795  0033B2  0100               	movlb	0	; () banked
  9796  0033B4  AB91               	btfss	_edit_flag& (0+255),5,b
  9797  0033B6  D004               	goto	l3665
  9798                           
  9799                           ; BSR set to: 0
  9800  0033B8  0E01               	movlw	1
  9801  0033BA  0100               	movlb	0	; () banked
  9802  0033BC  6F91               	movwf	_edit_flag& (0+255),b
  9803  0033BE  0012               	return	
  9804  0033C0                     l3665:
  9805                           
  9806                           ; BSR set to: 0
  9807                           ;My_header\My_RTCC.h: 318: else edit_flag.flags = 0x00;
  9808  0033C0  0E00               	movlw	0
  9809  0033C2  0100               	movlb	0	; () banked
  9810  0033C4  6F91               	movwf	_edit_flag& (0+255),b
  9811                           
  9812                           ; BSR set to: 0
  9813                           
  9814                           ; BSR set to: 0
  9815                           
  9816                           ; BSR set to: 0
  9817                           
  9818                           ; BSR set to: 0
  9819                           
  9820                           ; BSR set to: 0
  9821  0033C6  0012               	return	
  9822  0033C8                     __end_of_RTCC_adjust_time_cursor:
  9823                           	opt stack 0
  9824                           tblptru	equ	0xFF8
  9825                           tblptrh	equ	0xFF7
  9826                           tblptrl	equ	0xFF6
  9827                           tablat	equ	0xFF5
  9828                           prodh	equ	0xFF4
  9829                           prodl	equ	0xFF3
  9830                           intcon	equ	0xFF2
  9831                           intcon2	equ	0xFF1
  9832                           indf0	equ	0xFEF
  9833                           postinc0	equ	0xFEE
  9834                           fsr0h	equ	0xFEA
  9835                           fsr0l	equ	0xFE9
  9836                           wreg	equ	0xFE8
  9837                           indf2	equ	0xFDF
  9838                           postinc2	equ	0xFDE
  9839                           postdec2	equ	0xFDD
  9840                           fsr2h	equ	0xFDA
  9841                           fsr2l	equ	0xFD9
  9842                           status	equ	0xFD8
  9843                           
  9844 ;; *************** function _Auto_cut *****************
  9845 ;; Defined at:
  9846 ;;		line 119 in file "tasks.h"
  9847 ;; Parameters:    Size  Location     Type
  9848 ;;		None
  9849 ;; Auto vars:     Size  Location     Type
  9850 ;;  i               1   10[BANK0 ] unsigned char 
  9851 ;; Return value:  Size  Location     Type
  9852 ;;		None               void
  9853 ;; Registers used:
  9854 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9855 ;; Tracked objects:
  9856 ;;		On entry : 0/0
  9857 ;;		On exit  : 0/0
  9858 ;;		Unchanged: 0/0
  9859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9861 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9862 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9863 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9864 ;;Total ram usage:        3 bytes
  9865 ;; Hardware stack levels used:    1
  9866 ;; Hardware stack levels required when called:    5
  9867 ;; This function calls:
  9868 ;;		_ADC
  9869 ;;		_OUT
  9870 ;;		___wmul
  9871 ;; This function is called by:
  9872 ;;		_main
  9873 ;; This function uses a non-reentrant model
  9874 ;;
  9875                           
  9876                           	psect	text54
  9877  00249E                     __ptext54:
  9878                           	opt stack 0
  9879  00249E                     _Auto_cut:
  9880                           	opt stack 25
  9881                           
  9882                           ;tasks.h: 120: for (uint8_t i = 0; i < 3; i++) {
  9883                           
  9884                           ; BSR set to: 0
  9885                           ;incstack = 0
  9886  00249E  0E00               	movlw	0
  9887  0024A0  0100               	movlb	0	; () banked
  9888  0024A2  6FBA               	movwf	Auto_cut@i& (0+255),b
  9889  0024A4                     l5393:
  9890                           
  9891                           ; BSR set to: 0
  9892  0024A4  0E02               	movlw	2
  9893  0024A6  0100               	movlb	0	; () banked
  9894  0024A8  65BA               	cpfsgt	Auto_cut@i& (0+255),b
  9895  0024AA  D001               	goto	l5397
  9896  0024AC  0012               	return	
  9897  0024AE                     l5397:
  9898                           
  9899                           ; BSR set to: 0
  9900                           ;tasks.h: 121: I[i] = 13 * ADC(i + 8) / 16;
  9901  0024AE  0100               	movlb	0	; () banked
  9902  0024B0  51BA               	movf	Auto_cut@i& (0+255),w,b
  9903  0024B2  0F08               	addlw	8
  9904  0024B4  EC47  F01C         	call	_ADC
  9905  0024B8  C020  F0B2         	movff	?_ADC,___wmul@multiplier
  9906  0024BC  C021  F0B3         	movff	?_ADC+1,___wmul@multiplier+1
  9907  0024C0  0E00               	movlw	0
  9908  0024C2  0100               	movlb	0	; () banked
  9909  0024C4  6FB5               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9910  0024C6  0E0D               	movlw	13
  9911  0024C8  6FB4               	movwf	___wmul@multiplicand& (0+255),b
  9912  0024CA  ECCC  F01B         	call	___wmul	;wreg free
  9913  0024CE  0E04               	movlw	4
  9914  0024D0  0100               	movlb	0	; () banked
  9915  0024D2  6FB8               	movwf	??_Auto_cut& (0+255),b
  9916  0024D4                     u5885:
  9917  0024D4  0100               	movlb	0	; () banked
  9918  0024D6  90D8               	bcf	status,0,c
  9919  0024D8  33B3               	rrcf	(?___wmul+1)& (0+255),f,b
  9920  0024DA  33B2               	rrcf	?___wmul& (0+255),f,b
  9921  0024DC  0100               	movlb	0	; () banked
  9922  0024DE  2FB8               	decfsz	??_Auto_cut& (0+255),f,b
  9923  0024E0  D7F9               	goto	u5885
  9924  0024E2  0100               	movlb	0	; () banked
  9925  0024E4  51BA               	movf	Auto_cut@i& (0+255),w,b
  9926  0024E6  0D02               	mullw	2
  9927  0024E8  0E22               	movlw	low _I
  9928  0024EA  24F3               	addwf	prodl,w,c
  9929  0024EC  6ED9               	movwf	fsr2l,c
  9930  0024EE  0E00               	movlw	high _I
  9931  0024F0  20F4               	addwfc	prodh,w,c
  9932  0024F2  6EDA               	movwf	fsr2h,c
  9933  0024F4  0100               	movlb	0	; () banked
  9934  0024F6  C0B2  FFDE         	movff	?___wmul,postinc2
  9935  0024FA  0100               	movlb	0	; () banked
  9936  0024FC  C0B3  FFDD         	movff	?___wmul+1,postdec2
  9937                           
  9938                           ; BSR set to: 0
  9939                           ;tasks.h: 122: if (auto_cut_ON[i]) {
  9940  002500  0100               	movlb	0	; () banked
  9941  002502  51BA               	movf	Auto_cut@i& (0+255),w,b
  9942  002504  0D01               	mullw	1
  9943  002506  0E28               	movlw	low _auto_cut_ON
  9944  002508  24F3               	addwf	prodl,w,c
  9945  00250A  6ED9               	movwf	fsr2l,c
  9946  00250C  0E00               	movlw	high _auto_cut_ON
  9947  00250E  20F4               	addwfc	prodh,w,c
  9948  002510  6EDA               	movwf	fsr2h,c
  9949  002512  50DF               	movf	indf2,w,c
  9950  002514  B4D8               	btfsc	status,2,c
  9951  002516  D03F               	goto	l5409
  9952                           
  9953                           ; BSR set to: 0
  9954                           ;tasks.h: 123: if (I[i] < 100) {
  9955  002518  0100               	movlb	0	; () banked
  9956  00251A  51BA               	movf	Auto_cut@i& (0+255),w,b
  9957  00251C  0D02               	mullw	2
  9958  00251E  0E22               	movlw	low _I
  9959  002520  24F3               	addwf	prodl,w,c
  9960  002522  6ED9               	movwf	fsr2l,c
  9961  002524  0E00               	movlw	high _I
  9962  002526  20F4               	addwfc	prodh,w,c
  9963  002528  6EDA               	movwf	fsr2h,c
  9964  00252A  0E01               	movlw	1
  9965  00252C  50DB               	movf	plusw2,w,c
  9966  00252E  E126               	bnz	l5407
  9967  002530  0E64               	movlw	100
  9968  002532  5CDE               	subwf	postinc2,w,c
  9969  002534  B0D8               	btfsc	status,0,c
  9970  002536  D022               	goto	l5407
  9971                           
  9972                           ; BSR set to: 0
  9973                           ;tasks.h: 124: cut_cnt[i]++;
  9974  002538  0100               	movlb	0	; () banked
  9975  00253A  51BA               	movf	Auto_cut@i& (0+255),w,b
  9976  00253C  0D02               	mullw	2
  9977  00253E  0E78               	movlw	low _cut_cnt
  9978  002540  24F3               	addwf	prodl,w,c
  9979  002542  6ED9               	movwf	fsr2l,c
  9980  002544  0E00               	movlw	high _cut_cnt
  9981  002546  20F4               	addwfc	prodh,w,c
  9982  002548  6EDA               	movwf	fsr2h,c
  9983  00254A  2ADE               	incf	postinc2,f,c
  9984  00254C  0E00               	movlw	0
  9985  00254E  22DD               	addwfc	postdec2,f,c
  9986                           
  9987                           ;tasks.h: 125: if (cut_cnt[i] >= 46 * 6) {
  9988  002550  0100               	movlb	0	; () banked
  9989  002552  51BA               	movf	Auto_cut@i& (0+255),w,b
  9990  002554  0D02               	mullw	2
  9991  002556  0E78               	movlw	low _cut_cnt
  9992  002558  24F3               	addwf	prodl,w,c
  9993  00255A  6ED9               	movwf	fsr2l,c
  9994  00255C  0E00               	movlw	high _cut_cnt
  9995  00255E  20F4               	addwfc	prodh,w,c
  9996  002560  6EDA               	movwf	fsr2h,c
  9997  002562  0E14               	movlw	20
  9998  002564  5CDE               	subwf	postinc2,w,c
  9999  002566  0E01               	movlw	1
 10000  002568  58DE               	subwfb	postinc2,w,c
 10001  00256A  A0D8               	btfss	status,0,c
 10002  00256C  D014               	goto	l5409
 10003                           
 10004                           ; BSR set to: 0
 10005                           ;tasks.h: 126: OUT(i, 0);
 10006  00256E  0E00               	movlw	0
 10007  002570  6E20               	movwf	OUT@value,c
 10008  002572  0100               	movlb	0	; () banked
 10009  002574  51BA               	movf	Auto_cut@i& (0+255),w,b
 10010  002576  EC39  F01B         	call	_OUT
 10011                           
 10012                           ;tasks.h: 127: }
 10013                           ;tasks.h: 128: } else {
 10014  00257A  D00D               	goto	l5409
 10015  00257C                     l5407:
 10016                           
 10017                           ;tasks.h: 129: cut_cnt[i] = 0;
 10018  00257C  0100               	movlb	0	; () banked
 10019  00257E  51BA               	movf	Auto_cut@i& (0+255),w,b
 10020  002580  0D02               	mullw	2
 10021  002582  0E78               	movlw	low _cut_cnt
 10022  002584  24F3               	addwf	prodl,w,c
 10023  002586  6ED9               	movwf	fsr2l,c
 10024  002588  0E00               	movlw	high _cut_cnt
 10025  00258A  20F4               	addwfc	prodh,w,c
 10026  00258C  6EDA               	movwf	fsr2h,c
 10027  00258E  0E00               	movlw	0
 10028  002590  6EDE               	movwf	postinc2,c
 10029  002592  0E00               	movlw	0
 10030  002594  6EDD               	movwf	postdec2,c
 10031  002596                     l5409:
 10032  002596  0100               	movlb	0	; () banked
 10033  002598  2BBA               	incf	Auto_cut@i& (0+255),f,b
 10034  00259A  D784               	goto	l5393
 10035  00259C                     __end_of_Auto_cut:
 10036                           	opt stack 0
 10037                           tblptru	equ	0xFF8
 10038                           tblptrh	equ	0xFF7
 10039                           tblptrl	equ	0xFF6
 10040                           tablat	equ	0xFF5
 10041                           prodh	equ	0xFF4
 10042                           prodl	equ	0xFF3
 10043                           intcon	equ	0xFF2
 10044                           intcon2	equ	0xFF1
 10045                           indf0	equ	0xFEF
 10046                           postinc0	equ	0xFEE
 10047                           fsr0h	equ	0xFEA
 10048                           fsr0l	equ	0xFE9
 10049                           wreg	equ	0xFE8
 10050                           indf2	equ	0xFDF
 10051                           postinc2	equ	0xFDE
 10052                           postdec2	equ	0xFDD
 10053                           plusw2	equ	0xFDB
 10054                           fsr2h	equ	0xFDA
 10055                           fsr2l	equ	0xFD9
 10056                           status	equ	0xFD8
 10057                           
 10058 ;; *************** function ___wmul *****************
 10059 ;; Defined at:
 10060 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
 10061 ;; Parameters:    Size  Location     Type
 10062 ;;  multiplier      2    2[BANK0 ] unsigned int 
 10063 ;;  multiplicand    2    4[BANK0 ] unsigned int 
 10064 ;; Auto vars:     Size  Location     Type
 10065 ;;  product         2    6[BANK0 ] unsigned int 
 10066 ;; Return value:  Size  Location     Type
 10067 ;;                  2    2[BANK0 ] unsigned int 
 10068 ;; Registers used:
 10069 ;;		wreg, status,2, status,0, prodl, prodh
 10070 ;; Tracked objects:
 10071 ;;		On entry : 0/0
 10072 ;;		On exit  : 0/0
 10073 ;;		Unchanged: 0/0
 10074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10075 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10076 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10078 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10079 ;;Total ram usage:        6 bytes
 10080 ;; Hardware stack levels used:    1
 10081 ;; Hardware stack levels required when called:    4
 10082 ;; This function calls:
 10083 ;;		Nothing
 10084 ;; This function is called by:
 10085 ;;		_Auto_cut
 10086 ;;		_my_atoi
 10087 ;; This function uses a non-reentrant model
 10088 ;;
 10089                           
 10090                           	psect	text55
 10091  003798                     __ptext55:
 10092                           	opt stack 0
 10093  003798                     ___wmul:
 10094                           	opt stack 25
 10095                           
 10096                           ; BSR set to: 0
 10097                           ;incstack = 0
 10098  003798  0100               	movlb	0	; () banked
 10099  00379A  51B2               	movf	___wmul@multiplier& (0+255),w,b
 10100  00379C  0100               	movlb	0	; () banked
 10101  00379E  03B4               	mulwf	___wmul@multiplicand& (0+255),b
 10102  0037A0  CFF3 F0B6          	movff	prodl,___wmul@product
 10103  0037A4  CFF4 F0B7          	movff	prodh,___wmul@product+1
 10104  0037A8  0100               	movlb	0	; () banked
 10105  0037AA  51B2               	movf	___wmul@multiplier& (0+255),w,b
 10106  0037AC  0100               	movlb	0	; () banked
 10107  0037AE  03B5               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10108  0037B0  50F3               	movf	prodl,w,c
 10109  0037B2  0100               	movlb	0	; () banked
 10110  0037B4  27B7               	addwf	(___wmul@product+1)& (0+255),f,b
 10111  0037B6  0100               	movlb	0	; () banked
 10112  0037B8  51B3               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10113  0037BA  0100               	movlb	0	; () banked
 10114  0037BC  03B4               	mulwf	___wmul@multiplicand& (0+255),b
 10115  0037BE  50F3               	movf	prodl,w,c
 10116  0037C0  0100               	movlb	0	; () banked
 10117  0037C2  27B7               	addwf	(___wmul@product+1)& (0+255),f,b
 10118                           
 10119                           ; BSR set to: 0
 10120  0037C4  C0B6  F0B2         	movff	___wmul@product,?___wmul
 10121  0037C8  C0B7  F0B3         	movff	___wmul@product+1,?___wmul+1
 10122  0037CC  0012               	return	
 10123  0037CE                     __end_of___wmul:
 10124                           	opt stack 0
 10125                           tblptru	equ	0xFF8
 10126                           tblptrh	equ	0xFF7
 10127                           tblptrl	equ	0xFF6
 10128                           tablat	equ	0xFF5
 10129                           prodh	equ	0xFF4
 10130                           prodl	equ	0xFF3
 10131                           intcon	equ	0xFF2
 10132                           intcon2	equ	0xFF1
 10133                           indf0	equ	0xFEF
 10134                           postinc0	equ	0xFEE
 10135                           fsr0h	equ	0xFEA
 10136                           fsr0l	equ	0xFE9
 10137                           wreg	equ	0xFE8
 10138                           indf2	equ	0xFDF
 10139                           postinc2	equ	0xFDE
 10140                           postdec2	equ	0xFDD
 10141                           plusw2	equ	0xFDB
 10142                           fsr2h	equ	0xFDA
 10143                           fsr2l	equ	0xFD9
 10144                           status	equ	0xFD8
 10145                           
 10146 ;; *************** function _OUT *****************
 10147 ;; Defined at:
 10148 ;;		line 41 in file "tasks.h"
 10149 ;; Parameters:    Size  Location     Type
 10150 ;;  b               1    wreg     unsigned char 
 10151 ;;  value           1   31[COMRAM] unsigned char 
 10152 ;; Auto vars:     Size  Location     Type
 10153 ;;  b               1   32[COMRAM] unsigned char 
 10154 ;; Return value:  Size  Location     Type
 10155 ;;		None               void
 10156 ;; Registers used:
 10157 ;;		wreg, status,2, status,0
 10158 ;; Tracked objects:
 10159 ;;		On entry : 0/0
 10160 ;;		On exit  : 0/0
 10161 ;;		Unchanged: 0/0
 10162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10163 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10164 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10166 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10167 ;;Total ram usage:        2 bytes
 10168 ;; Hardware stack levels used:    1
 10169 ;; Hardware stack levels required when called:    4
 10170 ;; This function calls:
 10171 ;;		Nothing
 10172 ;; This function is called by:
 10173 ;;		_Auto_cut
 10174 ;;		_nomal_mode_loop
 10175 ;;		_sleep_loop
 10176 ;;		_main
 10177 ;; This function uses a non-reentrant model
 10178 ;;
 10179                           
 10180                           	psect	text56
 10181  003672                     __ptext56:
 10182                           	opt stack 0
 10183  003672                     _OUT:
 10184                           	opt stack 25
 10185                           
 10186                           ; BSR set to: 0
 10187                           ;incstack = 0
 10188                           ;OUT@b stored from wreg
 10189  003672  6E21               	movwf	OUT@b,c
 10190                           
 10191                           ;tasks.h: 42: switch (b) {
 10192  003674  D012               	goto	l5275
 10193  003676                     l593:
 10194                           
 10195                           ;tasks.h: 44: LATA5 = value;
 10196  003676  A020               	btfss	OUT@value,0,c
 10197  003678  D002               	goto	u5650
 10198  00367A  8A89               	bsf	3977,5,c	;volatile
 10199  00367C  0012               	return	
 10200  00367E                     u5650:
 10201  00367E  9A89               	bcf	3977,5,c	;volatile
 10202                           
 10203                           ;tasks.h: 45: break;
 10204  003680  0012               	return	
 10205  003682                     l595:
 10206                           
 10207                           ;tasks.h: 47: LATA6 = value;
 10208  003682  A020               	btfss	OUT@value,0,c
 10209  003684  D002               	goto	u5670
 10210  003686  8C89               	bsf	3977,6,c	;volatile
 10211  003688  0012               	return	
 10212  00368A                     u5670:
 10213  00368A  9C89               	bcf	3977,6,c	;volatile
 10214                           
 10215                           ;tasks.h: 48: break;
 10216  00368C  0012               	return	
 10217  00368E                     l596:
 10218                           
 10219                           ;tasks.h: 50: LATA7 = value;
 10220  00368E  A020               	btfss	OUT@value,0,c
 10221  003690  D002               	goto	u5690
 10222  003692  8E89               	bsf	3977,7,c	;volatile
 10223  003694  0012               	return	
 10224  003696                     u5690:
 10225  003696  9E89               	bcf	3977,7,c	;volatile
 10226                           
 10227                           ;tasks.h: 52: }
 10228                           
 10229                           ;tasks.h: 51: break;
 10230  003698  0012               	return	
 10231  00369A                     l5275:
 10232  00369A  5021               	movf	OUT@b,w,c
 10233                           
 10234                           ; Switch size 1, requested type "space"
 10235                           ; Number of cases is 3, Range of values is 0 to 2
 10236                           ; switch strategies available:
 10237                           ; Name         Instructions Cycles
 10238                           ; simple_byte           10     6 (average)
 10239                           ;	Chosen strategy is simple_byte
 10240  00369C  0A00               	xorlw	0	; case 0
 10241  00369E  B4D8               	btfsc	status,2,c
 10242  0036A0  D7EA               	goto	l593
 10243  0036A2  0A01               	xorlw	1	; case 1
 10244  0036A4  B4D8               	btfsc	status,2,c
 10245  0036A6  D7ED               	goto	l595
 10246  0036A8  0A03               	xorlw	3	; case 2
 10247  0036AA  A4D8               	btfss	status,2,c
 10248  0036AC  0012               	return	
 10249  0036AE  D7EF               	goto	l596
 10250  0036B0                     __end_of_OUT:
 10251                           	opt stack 0
 10252                           tblptru	equ	0xFF8
 10253                           tblptrh	equ	0xFF7
 10254                           tblptrl	equ	0xFF6
 10255                           tablat	equ	0xFF5
 10256                           prodh	equ	0xFF4
 10257                           prodl	equ	0xFF3
 10258                           intcon	equ	0xFF2
 10259                           intcon2	equ	0xFF1
 10260                           indf0	equ	0xFEF
 10261                           postinc0	equ	0xFEE
 10262                           fsr0h	equ	0xFEA
 10263                           fsr0l	equ	0xFE9
 10264                           wreg	equ	0xFE8
 10265                           indf2	equ	0xFDF
 10266                           postinc2	equ	0xFDE
 10267                           postdec2	equ	0xFDD
 10268                           plusw2	equ	0xFDB
 10269                           fsr2h	equ	0xFDA
 10270                           fsr2l	equ	0xFD9
 10271                           status	equ	0xFD8
 10272                           
 10273 ;; *************** function _ADC *****************
 10274 ;; Defined at:
 10275 ;;		line 172 in file "../My_header\My_header.h"
 10276 ;; Parameters:    Size  Location     Type
 10277 ;;  ch              1    wreg     unsigned char 
 10278 ;; Auto vars:     Size  Location     Type
 10279 ;;  ch              1    1[BANK0 ] unsigned char 
 10280 ;; Return value:  Size  Location     Type
 10281 ;;                  2   31[COMRAM] unsigned int 
 10282 ;; Registers used:
 10283 ;;		wreg, status,2, status,0
 10284 ;; Tracked objects:
 10285 ;;		On entry : 0/0
 10286 ;;		On exit  : 0/0
 10287 ;;		Unchanged: 0/0
 10288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10289 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10290 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10291 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10292 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10293 ;;Total ram usage:        4 bytes
 10294 ;; Hardware stack levels used:    1
 10295 ;; Hardware stack levels required when called:    4
 10296 ;; This function calls:
 10297 ;;		Nothing
 10298 ;; This function is called by:
 10299 ;;		_Auto_cut
 10300 ;; This function uses a non-reentrant model
 10301 ;;
 10302                           
 10303                           	psect	text57
 10304  00388E                     __ptext57:
 10305                           	opt stack 0
 10306  00388E                     _ADC:
 10307                           	opt stack 25
 10308                           
 10309                           ;incstack = 0
 10310                           ;ADC@ch stored from wreg
 10311  00388E  0100               	movlb	0	; () banked
 10312  003890  6FB1               	movwf	ADC@ch& (0+255),b
 10313                           
 10314                           ;My_header\My_header.h: 173: ADCON0bits.CHS = ch;
 10315  003892  C0B1  F0B0         	movff	ADC@ch,??_ADC
 10316  003896  0100               	movlb	0	; () banked
 10317  003898  47B0               	rlncf	??_ADC& (0+255),f,b
 10318  00389A  47B0               	rlncf	??_ADC& (0+255),f,b
 10319  00389C  50C2               	movf	4034,w,c	;volatile
 10320  00389E  0100               	movlb	0	; () banked
 10321  0038A0  19B0               	xorwf	??_ADC& (0+255),w,b
 10322  0038A2  0BC3               	andlw	-61
 10323  0038A4  19B0               	xorwf	??_ADC& (0+255),w,b
 10324  0038A6  6EC2               	movwf	4034,c	;volatile
 10325                           
 10326                           ; BSR set to: 0
 10327                           ;My_header\My_header.h: 174: ADCON0bits.ADON = 1;
 10328  0038A8  80C2               	bsf	4034,0,c	;volatile
 10329                           
 10330                           ; BSR set to: 0
 10331                           ;My_header\My_header.h: 176: PIR1bits.ADIF = 0;
 10332  0038AA  9C9E               	bcf	3998,6,c	;volatile
 10333                           
 10334                           ; BSR set to: 0
 10335                           ;My_header\My_header.h: 177: ADCON0bits.GO_nDONE = 1;
 10336  0038AC  82C2               	bsf	4034,1,c	;volatile
 10337  0038AE                     l151:
 10338  0038AE  AC9E               	btfss	3998,6,c	;volatile
 10339  0038B0  D7FE               	goto	l151
 10340                           
 10341                           ;My_header\My_header.h: 179: return ADRES;
 10342  0038B2  CFC3 F020          	movff	4035,?_ADC	;volatile
 10343  0038B6  CFC4 F021          	movff	4036,?_ADC+1	;volatile
 10344  0038BA  0012               	return		;funcret
 10345  0038BC                     __end_of_ADC:
 10346                           	opt stack 0
 10347                           tblptru	equ	0xFF8
 10348                           tblptrh	equ	0xFF7
 10349                           tblptrl	equ	0xFF6
 10350                           tablat	equ	0xFF5
 10351                           prodh	equ	0xFF4
 10352                           prodl	equ	0xFF3
 10353                           intcon	equ	0xFF2
 10354                           intcon2	equ	0xFF1
 10355                           indf0	equ	0xFEF
 10356                           postinc0	equ	0xFEE
 10357                           fsr0h	equ	0xFEA
 10358                           fsr0l	equ	0xFE9
 10359                           wreg	equ	0xFE8
 10360                           indf2	equ	0xFDF
 10361                           postinc2	equ	0xFDE
 10362                           postdec2	equ	0xFDD
 10363                           plusw2	equ	0xFDB
 10364                           fsr2h	equ	0xFDA
 10365                           fsr2l	equ	0xFD9
 10366                           status	equ	0xFD8
 10367                           
 10368 ;; *************** function _ISR *****************
 10369 ;; Defined at:
 10370 ;;		line 66 in file "main.c"
 10371 ;; Parameters:    Size  Location     Type
 10372 ;;		None
 10373 ;; Auto vars:     Size  Location     Type
 10374 ;;  ascii           1   30[COMRAM] unsigned char 
 10375 ;; Return value:  Size  Location     Type
 10376 ;;		None               void
 10377 ;; Registers used:
 10378 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10379 ;; Tracked objects:
 10380 ;;		On entry : 0/0
 10381 ;;		On exit  : 0/0
 10382 ;;		Unchanged: 0/0
 10383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10385 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10386 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10387 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10388 ;;Total ram usage:       15 bytes
 10389 ;; Hardware stack levels used:    1
 10390 ;; Hardware stack levels required when called:    3
 10391 ;; This function calls:
 10392 ;;		_UART_ISR
 10393 ;;		_button_timer_interrupt
 10394 ;;		_delay_timer_interrupt
 10395 ;;		_integrating
 10396 ;;		_lchika
 10397 ;;		_tx_send
 10398 ;; This function is called by:
 10399 ;;		Interrupt level 2
 10400 ;; This function uses a non-reentrant model
 10401 ;;
 10402                           
 10403                           	psect	intcode
 10404  000008                     __pintcode:
 10405                           	opt stack 0
 10406  000008                     _ISR:
 10407                           	opt stack 21
 10408                           
 10409                           ;incstack = 0
 10410  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10411  00000A  CFFA F011          	movff	pclath,??_ISR
 10412  00000E  CFFB F012          	movff	pclatu,??_ISR+1
 10413  000012  CFE9 F013          	movff	fsr0l,??_ISR+2
 10414  000016  CFEA F014          	movff	fsr0h,??_ISR+3
 10415  00001A  CFE1 F015          	movff	fsr1l,??_ISR+4
 10416  00001E  CFE2 F016          	movff	fsr1h,??_ISR+5
 10417  000022  CFD9 F017          	movff	fsr2l,??_ISR+6
 10418  000026  CFDA F018          	movff	fsr2h,??_ISR+7
 10419  00002A  CFF3 F019          	movff	prodl,??_ISR+8
 10420  00002E  CFF4 F01A          	movff	prodh,??_ISR+9
 10421  000032  CFF6 F01B          	movff	tblptrl,??_ISR+10
 10422  000036  CFF7 F01C          	movff	tblptrh,??_ISR+11
 10423  00003A  CFF8 F01D          	movff	tblptru,??_ISR+12
 10424  00003E  CFF5 F01E          	movff	tablat,??_ISR+13
 10425                           
 10426                           ;main.c: 67: UART_ISR();
 10427  000042  EC8C  F01A         	call	_UART_ISR	;wreg free
 10428                           
 10429                           ;main.c: 68: if (PIE1bits.RC1IE && PIR1bits.RC1IF) {
 10430  000046  BA9D               	btfsc	3997,5,c	;volatile
 10431  000048  AA9E               	btfss	3998,5,c	;volatile
 10432  00004A  D006               	goto	i2l4579
 10433                           
 10434                           ;main.c: 69: PIR1bits.RC1IF = 0;
 10435  00004C  9A9E               	bcf	3998,5,c	;volatile
 10436                           
 10437                           ;main.c: 70: uint8_t ascii = RCREG1;
 10438  00004E  CFAF F01F          	movff	4015,ISR@ascii	;volatile
 10439                           
 10440                           ;main.c: 71: tx_send(ascii);
 10441  000052  501F               	movf	ISR@ascii,w,c
 10442  000054  EC39  F01D         	call	_tx_send
 10443  000058                     i2l4579:
 10444                           
 10445                           ;main.c: 72: }
 10446                           ;main.c: 73: if (INTCONbits.T0IE && INTCONbits.T0IF) {
 10447  000058  BAF2               	btfsc	intcon,5,c	;volatile
 10448  00005A  A4F2               	btfss	intcon,2,c	;volatile
 10449  00005C  D015               	goto	i2l4597
 10450                           
 10451                           ;main.c: 74: INTCONbits.T0IF = 0;
 10452  00005E  94F2               	bcf	intcon,2,c	;volatile
 10453                           
 10454                           ;main.c: 75: static uint16_t cnt_t0;
 10455                           ;main.c: 76: if (cnt_t0) {
 10456  000060  502B               	movf	ISR@cnt_t0,w,c
 10457  000062  102C               	iorwf	ISR@cnt_t0+1,w,c
 10458  000064  B4D8               	btfsc	status,2,c
 10459  000066  D004               	goto	i2l4589
 10460                           
 10461                           ;main.c: 77: cnt_t0--;
 10462  000068  062B               	decf	ISR@cnt_t0,f,c
 10463  00006A  A0D8               	btfss	status,0,c
 10464  00006C  062C               	decf	ISR@cnt_t0+1,f,c
 10465                           
 10466                           ;main.c: 78: } else {
 10467  00006E  D009               	goto	i2l4595
 10468  000070                     i2l4589:
 10469                           
 10470                           ;main.c: 79: cnt_t0 = 120;
 10471  000070  0E00               	movlw	0
 10472  000072  6E2C               	movwf	ISR@cnt_t0+1,c
 10473  000074  0E78               	movlw	120
 10474  000076  6E2B               	movwf	ISR@cnt_t0,c
 10475                           
 10476                           ;main.c: 80: lchika();
 10477  000078  ECCF  F011         	call	_lchika	;wreg free
 10478                           
 10479                           ;main.c: 81: display_flag = 1;
 10480  00007C  0E01               	movlw	1
 10481  00007E  0100               	movlb	0	; () banked
 10482  000080  6F90               	movwf	_display_flag& (0+255),b
 10483  000082                     i2l4595:
 10484                           
 10485                           ;main.c: 82: }
 10486                           ;main.c: 83: cut_flag = 1;
 10487  000082  0E01               	movlw	1
 10488  000084  0100               	movlb	0	; () banked
 10489  000086  6F8F               	movwf	_cut_flag& (0+255),b
 10490  000088                     i2l4597:
 10491                           
 10492                           ;main.c: 84: }
 10493                           ;main.c: 85: if (PIE1bits.TMR1IE && PIR1bits.TMR1IF) {
 10494  000088  B09D               	btfsc	3997,0,c	;volatile
 10495  00008A  A09E               	btfss	3998,0,c	;volatile
 10496  00008C  D005               	goto	i2l4607
 10497                           
 10498                           ;main.c: 86: PIR1bits.TMR1IF = 0;
 10499  00008E  909E               	bcf	3998,0,c	;volatile
 10500                           
 10501                           ;main.c: 87: TMR1H = 0x80;
 10502  000090  0E80               	movlw	128
 10503  000092  6ECF               	movwf	4047,c	;volatile
 10504                           
 10505                           ;main.c: 88: integrating();
 10506  000094  EC01  F017         	call	_integrating	;wreg free
 10507  000098                     i2l4607:
 10508                           
 10509                           ;main.c: 89: }
 10510                           ;main.c: 90: if (PIE2bits.TMR3IE && PIR2bits.TMR3IF) {
 10511  000098  B2A0               	btfsc	4000,1,c	;volatile
 10512  00009A  A2A1               	btfss	4001,1,c	;volatile
 10513  00009C  D037               	goto	i2l722
 10514                           
 10515                           ;main.c: 91: PIR2bits.TMR3IF = 0;
 10516  00009E  92A1               	bcf	4001,1,c	;volatile
 10517                           
 10518                           ;main.c: 92: button_timer_interrupt(&sw, !PORTAbits.RA3);
 10519  0000A0  0EA8               	movlw	low _sw
 10520  0000A2  6E01               	movwf	button_timer_interrupt@bt,c
 10521  0000A4  0E00               	movlw	high _sw
 10522  0000A6  6E02               	movwf	button_timer_interrupt@bt+1,c
 10523  0000A8  B680               	btfsc	3968,3,c	;volatile
 10524  0000AA  D002               	goto	i2u467_40
 10525  0000AC  0E01               	movlw	1
 10526  0000AE  D001               	goto	i2u468_40
 10527  0000B0                     i2u467_40:
 10528  0000B0  0E00               	movlw	0
 10529  0000B2                     i2u468_40:
 10530  0000B2  6E03               	movwf	button_timer_interrupt@sw_value,c
 10531  0000B4  EC4F  F00A         	call	_button_timer_interrupt	;wreg free
 10532                           
 10533                           ;main.c: 93: button_timer_interrupt(&sw0, !PORTAbits.RA0);
 10534  0000B8  0E32               	movlw	low _sw0
 10535  0000BA  6E01               	movwf	button_timer_interrupt@bt,c
 10536  0000BC  0E00               	movlw	high _sw0
 10537  0000BE  6E02               	movwf	button_timer_interrupt@bt+1,c
 10538  0000C0  B080               	btfsc	3968,0,c	;volatile
 10539  0000C2  D002               	goto	i2u469_40
 10540  0000C4  0E01               	movlw	1
 10541  0000C6  D001               	goto	i2u470_40
 10542  0000C8                     i2u469_40:
 10543  0000C8  0E00               	movlw	0
 10544  0000CA                     i2u470_40:
 10545  0000CA  6E03               	movwf	button_timer_interrupt@sw_value,c
 10546  0000CC  EC4F  F00A         	call	_button_timer_interrupt	;wreg free
 10547                           
 10548                           ;main.c: 94: button_timer_interrupt(&sw1, !PORTAbits.RA1);
 10549  0000D0  0E36               	movlw	low _sw1
 10550  0000D2  6E01               	movwf	button_timer_interrupt@bt,c
 10551  0000D4  0E00               	movlw	high _sw1
 10552  0000D6  6E02               	movwf	button_timer_interrupt@bt+1,c
 10553  0000D8  B280               	btfsc	3968,1,c	;volatile
 10554  0000DA  D002               	goto	i2u471_40
 10555  0000DC  0E01               	movlw	1
 10556  0000DE  D001               	goto	i2u472_40
 10557  0000E0                     i2u471_40:
 10558  0000E0  0E00               	movlw	0
 10559  0000E2                     i2u472_40:
 10560  0000E2  6E03               	movwf	button_timer_interrupt@sw_value,c
 10561  0000E4  EC4F  F00A         	call	_button_timer_interrupt	;wreg free
 10562                           
 10563                           ;main.c: 95: button_timer_interrupt(&sw2, !PORTAbits.RA2);
 10564  0000E8  0EAC               	movlw	low _sw2
 10565  0000EA  6E01               	movwf	button_timer_interrupt@bt,c
 10566  0000EC  0E00               	movlw	high _sw2
 10567  0000EE  6E02               	movwf	button_timer_interrupt@bt+1,c
 10568  0000F0  B480               	btfsc	3968,2,c	;volatile
 10569  0000F2  D002               	goto	i2u473_40
 10570  0000F4  0E01               	movlw	1
 10571  0000F6  D001               	goto	i2u474_40
 10572  0000F8                     i2u473_40:
 10573  0000F8  0E00               	movlw	0
 10574  0000FA                     i2u474_40:
 10575  0000FA  6E03               	movwf	button_timer_interrupt@sw_value,c
 10576  0000FC  EC4F  F00A         	call	_button_timer_interrupt	;wreg free
 10577                           
 10578                           ;main.c: 96: delay_timer_interrupt(&d_display);
 10579  000100  0E3A               	movlw	low _d_display
 10580  000102  6E01               	movwf	delay_timer_interrupt@d,c
 10581  000104  0E00               	movlw	high _d_display
 10582  000106  6E02               	movwf	delay_timer_interrupt@d+1,c
 10583  000108  ECB1  F01A         	call	_delay_timer_interrupt	;wreg free
 10584  00010C                     i2l722:
 10585  00010C  C01E  FFF5         	movff	??_ISR+13,tablat
 10586  000110  C01D  FFF8         	movff	??_ISR+12,tblptru
 10587  000114  C01C  FFF7         	movff	??_ISR+11,tblptrh
 10588  000118  C01B  FFF6         	movff	??_ISR+10,tblptrl
 10589  00011C  C01A  FFF4         	movff	??_ISR+9,prodh
 10590  000120  C019  FFF3         	movff	??_ISR+8,prodl
 10591  000124  C018  FFDA         	movff	??_ISR+7,fsr2h
 10592  000128  C017  FFD9         	movff	??_ISR+6,fsr2l
 10593  00012C  C016  FFE2         	movff	??_ISR+5,fsr1h
 10594  000130  C015  FFE1         	movff	??_ISR+4,fsr1l
 10595  000134  C014  FFEA         	movff	??_ISR+3,fsr0h
 10596  000138  C013  FFE9         	movff	??_ISR+2,fsr0l
 10597  00013C  C012  FFFB         	movff	??_ISR+1,pclatu
 10598  000140  C011  FFFA         	movff	??_ISR,pclath
 10599  000144  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10600  000146  0011               	retfie		f
 10601  000148                     __end_of_ISR:
 10602                           	opt stack 0
 10603                           pclatu	equ	0xFFB
 10604                           pclath	equ	0xFFA
 10605                           tblptru	equ	0xFF8
 10606                           tblptrh	equ	0xFF7
 10607                           tblptrl	equ	0xFF6
 10608                           tablat	equ	0xFF5
 10609                           prodh	equ	0xFF4
 10610                           prodl	equ	0xFF3
 10611                           intcon	equ	0xFF2
 10612                           intcon2	equ	0xFF1
 10613                           indf0	equ	0xFEF
 10614                           postinc0	equ	0xFEE
 10615                           fsr0h	equ	0xFEA
 10616                           fsr0l	equ	0xFE9
 10617                           wreg	equ	0xFE8
 10618                           fsr1h	equ	0xFE2
 10619                           fsr1l	equ	0xFE1
 10620                           indf2	equ	0xFDF
 10621                           postinc2	equ	0xFDE
 10622                           postdec2	equ	0xFDD
 10623                           plusw2	equ	0xFDB
 10624                           fsr2h	equ	0xFDA
 10625                           fsr2l	equ	0xFD9
 10626                           status	equ	0xFD8
 10627                           
 10628 ;; *************** function _tx_send *****************
 10629 ;; Defined at:
 10630 ;;		line 222 in file "../My_header\My_header.h"
 10631 ;; Parameters:    Size  Location     Type
 10632 ;;  asciicode       1    wreg     const unsigned char 
 10633 ;; Auto vars:     Size  Location     Type
 10634 ;;  asciicode       1   15[COMRAM] const unsigned char 
 10635 ;; Return value:  Size  Location     Type
 10636 ;;		None               void
 10637 ;; Registers used:
 10638 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10639 ;; Tracked objects:
 10640 ;;		On entry : 0/0
 10641 ;;		On exit  : 0/0
 10642 ;;		Unchanged: 0/0
 10643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10645 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10647 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10648 ;;Total ram usage:        1 bytes
 10649 ;; Hardware stack levels used:    1
 10650 ;; Hardware stack levels required when called:    2
 10651 ;; This function calls:
 10652 ;;		_ringbuf_put
 10653 ;; This function is called by:
 10654 ;;		_ISR
 10655 ;;		_tx_sendn
 10656 ;; This function uses a non-reentrant model
 10657 ;;
 10658                           
 10659                           	psect	text59
 10660  003A72                     __ptext59:
 10661                           	opt stack 0
 10662  003A72                     _tx_send:
 10663                           	opt stack 21
 10664                           
 10665                           ;incstack = 0
 10666                           ;tx_send@asciicode stored from wreg
 10667  003A72  6E10               	movwf	tx_send@asciicode,c
 10668                           
 10669                           ;My_header\My_header.h: 223: ringbuf_put(&tx_buf, asciicode);
 10670  003A74  0EC8               	movlw	low _tx_buf
 10671  003A76  6E09               	movwf	ringbuf_put@rb,c
 10672  003A78  0E01               	movlw	high _tx_buf
 10673  003A7A  6E0A               	movwf	ringbuf_put@rb+1,c
 10674  003A7C  C010  F00B         	movff	tx_send@asciicode,ringbuf_put@asciicode
 10675  003A80  EC50  F016         	call	_ringbuf_put	;wreg free
 10676                           
 10677                           ;My_header\My_header.h: 224: PIE1bits.TXIE = 1;
 10678  003A84  889D               	bsf	3997,4,c	;volatile
 10679  003A86  0012               	return		;funcret
 10680  003A88                     __end_of_tx_send:
 10681                           	opt stack 0
 10682                           pclatu	equ	0xFFB
 10683                           pclath	equ	0xFFA
 10684                           tblptru	equ	0xFF8
 10685                           tblptrh	equ	0xFF7
 10686                           tblptrl	equ	0xFF6
 10687                           tablat	equ	0xFF5
 10688                           prodh	equ	0xFF4
 10689                           prodl	equ	0xFF3
 10690                           intcon	equ	0xFF2
 10691                           intcon2	equ	0xFF1
 10692                           indf0	equ	0xFEF
 10693                           postinc0	equ	0xFEE
 10694                           fsr0h	equ	0xFEA
 10695                           fsr0l	equ	0xFE9
 10696                           wreg	equ	0xFE8
 10697                           fsr1h	equ	0xFE2
 10698                           fsr1l	equ	0xFE1
 10699                           indf2	equ	0xFDF
 10700                           postinc2	equ	0xFDE
 10701                           postdec2	equ	0xFDD
 10702                           plusw2	equ	0xFDB
 10703                           fsr2h	equ	0xFDA
 10704                           fsr2l	equ	0xFD9
 10705                           status	equ	0xFD8
 10706                           
 10707 ;; *************** function _lchika *****************
 10708 ;; Defined at:
 10709 ;;		line 96 in file "tasks.h"
 10710 ;; Parameters:    Size  Location     Type
 10711 ;;		None
 10712 ;; Auto vars:     Size  Location     Type
 10713 ;;  i               1   11[COMRAM] unsigned char 
 10714 ;; Return value:  Size  Location     Type
 10715 ;;		None               void
 10716 ;; Registers used:
 10717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10718 ;; Tracked objects:
 10719 ;;		On entry : 0/0
 10720 ;;		On exit  : 0/0
 10721 ;;		Unchanged: 0/0
 10722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10724 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10725 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10726 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10727 ;;Total ram usage:        4 bytes
 10728 ;; Hardware stack levels used:    1
 10729 ;; Hardware stack levels required when called:    1
 10730 ;; This function calls:
 10731 ;;		i2_LED
 10732 ;;		i2___awdiv
 10733 ;;		i2___lwdiv
 10734 ;; This function is called by:
 10735 ;;		_ISR
 10736 ;; This function uses a non-reentrant model
 10737 ;;
 10738                           
 10739                           	psect	text60
 10740  00239E                     __ptext60:
 10741                           	opt stack 0
 10742  00239E                     _lchika:
 10743                           	opt stack 22
 10744                           
 10745                           ;tasks.h: 97: uint8_t i;
 10746                           ;tasks.h: 98: static uint8_t cnt[3];
 10747                           ;tasks.h: 99: static uint8_t cntf[3];
 10748                           ;tasks.h: 100: for (i = 0; i < 3; i++) {
 10749                           
 10750                           ;incstack = 0
 10751  00239E  0E00               	movlw	0
 10752  0023A0  6E0C               	movwf	lchika@i,c
 10753  0023A2                     i2l4071:
 10754  0023A2  0E02               	movlw	2
 10755  0023A4  640C               	cpfsgt	lchika@i,c
 10756  0023A6  D001               	goto	i2l4075
 10757  0023A8  0012               	return	
 10758  0023AA                     i2l4075:
 10759                           
 10760                           ;tasks.h: 101: cnt[i]++;
 10761  0023AA  500C               	movf	lchika@i,w,c
 10762  0023AC  0D01               	mullw	1
 10763  0023AE  0E85               	movlw	low lchika@cnt
 10764  0023B0  24F3               	addwf	prodl,w,c
 10765  0023B2  6ED9               	movwf	fsr2l,c
 10766  0023B4  0E00               	movlw	high lchika@cnt
 10767  0023B6  20F4               	addwfc	prodh,w,c
 10768  0023B8  6EDA               	movwf	fsr2h,c
 10769  0023BA  2ADF               	incf	indf2,f,c
 10770                           
 10771                           ;tasks.h: 102: if (cnt[i] % 2 == 1) {
 10772  0023BC  500C               	movf	lchika@i,w,c
 10773  0023BE  0D01               	mullw	1
 10774  0023C0  0E85               	movlw	low lchika@cnt
 10775  0023C2  24F3               	addwf	prodl,w,c
 10776  0023C4  6ED9               	movwf	fsr2l,c
 10777  0023C6  0E00               	movlw	high lchika@cnt
 10778  0023C8  20F4               	addwfc	prodh,w,c
 10779  0023CA  6EDA               	movwf	fsr2h,c
 10780  0023CC  0100               	movlb	0	; () banked
 10781  0023CE  A0DF               	btfss	indf2,0,c
 10782  0023D0  D006               	goto	i2l4079
 10783                           
 10784                           ; BSR set to: 0
 10785                           ;tasks.h: 103: LED(i, 0);
 10786  0023D2  0E00               	movlw	0
 10787  0023D4  6E01               	movwf	i2LED@value,c
 10788  0023D6  500C               	movf	lchika@i,w,c
 10789  0023D8  EC58  F01B         	call	i2_LED
 10790                           
 10791                           ;tasks.h: 104: } else {
 10792  0023DC  D05E               	goto	i2l4093
 10793  0023DE                     i2l4079:
 10794                           
 10795                           ;tasks.h: 105: if (cnt[i] / 2 <= I[i] / 100) {
 10796  0023DE  500C               	movf	lchika@i,w,c
 10797  0023E0  0D02               	mullw	2
 10798  0023E2  0E22               	movlw	low _I
 10799  0023E4  24F3               	addwf	prodl,w,c
 10800  0023E6  6ED9               	movwf	fsr2l,c
 10801  0023E8  0E00               	movlw	high _I
 10802  0023EA  20F4               	addwfc	prodh,w,c
 10803  0023EC  6EDA               	movwf	fsr2h,c
 10804  0023EE  CFDE F001          	movff	postinc2,i2___lwdiv@dividend
 10805  0023F2  CFDD F002          	movff	postdec2,i2___lwdiv@dividend+1
 10806  0023F6  0E00               	movlw	0
 10807  0023F8  6E04               	movwf	i2___lwdiv@divisor+1,c
 10808  0023FA  0E64               	movlw	100
 10809  0023FC  6E03               	movwf	i2___lwdiv@divisor,c
 10810  0023FE  EC63  F01A         	call	i2___lwdiv	;wreg free
 10811  002402  C001  F009         	movff	?i2___lwdiv,??_lchika
 10812  002406  C002  F00A         	movff	?i2___lwdiv+1,??_lchika+1
 10813  00240A  500C               	movf	lchika@i,w,c
 10814  00240C  0D01               	mullw	1
 10815  00240E  0E85               	movlw	low lchika@cnt
 10816  002410  24F3               	addwf	prodl,w,c
 10817  002412  6ED9               	movwf	fsr2l,c
 10818  002414  0E00               	movlw	high lchika@cnt
 10819  002416  20F4               	addwfc	prodh,w,c
 10820  002418  6EDA               	movwf	fsr2h,c
 10821  00241A  50DF               	movf	indf2,w,c
 10822  00241C  6E0B               	movwf	(??_lchika+2)& (0+255),c
 10823  00241E  500B               	movf	??_lchika+2,w,c
 10824  002420  6E01               	movwf	i2___awdiv@dividend,c
 10825  002422  6A02               	clrf	i2___awdiv@dividend+1,c
 10826  002424  0E00               	movlw	0
 10827  002426  6E04               	movwf	i2___awdiv@divisor+1,c
 10828  002428  0E02               	movlw	2
 10829  00242A  6E03               	movwf	i2___awdiv@divisor,c
 10830  00242C  EC23  F018         	call	i2___awdiv	;wreg free
 10831  002430  5001               	movf	?i2___awdiv,w,c
 10832  002432  5C09               	subwf	??_lchika,w,c
 10833  002434  5002               	movf	?i2___awdiv+1,w,c
 10834  002436  580A               	subwfb	??_lchika+1,w,c
 10835  002438  A0D8               	btfss	status,0,c
 10836  00243A  D00C               	goto	i2l4085
 10837                           
 10838                           ;tasks.h: 106: LED(i, 1);
 10839  00243C  0E01               	movlw	1
 10840  00243E  6E01               	movwf	i2LED@value,c
 10841  002440  500C               	movf	lchika@i,w,c
 10842  002442  EC58  F01B         	call	i2_LED
 10843                           
 10844                           ;tasks.h: 107: cntf[i] = 0;
 10845  002446  500C               	movf	lchika@i,w,c
 10846  002448  0D01               	mullw	1
 10847  00244A  0E88               	movlw	low lchika@cntf
 10848  00244C  24F3               	addwf	prodl,w,c
 10849  00244E  6ED9               	movwf	fsr2l,c
 10850  002450  0E00               	movlw	high lchika@cntf
 10851  002452  D01F               	goto	L5
 10852  002454                     i2l4085:
 10853                           
 10854                           ;tasks.h: 109: cntf[i]++;
 10855  002454  500C               	movf	lchika@i,w,c
 10856  002456  0D01               	mullw	1
 10857  002458  0E88               	movlw	low lchika@cntf
 10858  00245A  24F3               	addwf	prodl,w,c
 10859  00245C  6ED9               	movwf	fsr2l,c
 10860  00245E  0E00               	movlw	high lchika@cntf
 10861  002460  20F4               	addwfc	prodh,w,c
 10862  002462  6EDA               	movwf	fsr2h,c
 10863  002464  2ADF               	incf	indf2,f,c
 10864                           
 10865                           ;tasks.h: 110: LED(i, 0);
 10866  002466  0E00               	movlw	0
 10867  002468  6E01               	movwf	i2LED@value,c
 10868  00246A  500C               	movf	lchika@i,w,c
 10869  00246C  EC58  F01B         	call	i2_LED
 10870                           
 10871                           ;tasks.h: 111: if (cntf[i] >= 2) {
 10872  002470  500C               	movf	lchika@i,w,c
 10873  002472  0D01               	mullw	1
 10874  002474  0E88               	movlw	low lchika@cntf
 10875  002476  24F3               	addwf	prodl,w,c
 10876  002478  6ED9               	movwf	fsr2l,c
 10877  00247A  0E00               	movlw	high lchika@cntf
 10878  00247C  20F4               	addwfc	prodh,w,c
 10879  00247E  6EDA               	movwf	fsr2h,c
 10880  002480  0E01               	movlw	1
 10881  002482  64DF               	cpfsgt	indf2,c
 10882  002484  D00A               	goto	i2l4093
 10883                           
 10884                           ;tasks.h: 112: cnt[i] = 0;
 10885  002486  500C               	movf	lchika@i,w,c
 10886  002488  0D01               	mullw	1
 10887  00248A  0E85               	movlw	low lchika@cnt
 10888  00248C  24F3               	addwf	prodl,w,c
 10889  00248E  6ED9               	movwf	fsr2l,c
 10890  002490  0E00               	movlw	high lchika@cnt
 10891  002492                     L5:
 10892  002492  20F4               	addwfc	prodh,w,c
 10893  002494  6EDA               	movwf	fsr2h,c
 10894  002496  0E00               	movlw	0
 10895  002498  6EDF               	movwf	indf2,c
 10896  00249A                     i2l4093:
 10897  00249A  2A0C               	incf	lchika@i,f,c
 10898  00249C  D782               	goto	i2l4071
 10899  00249E                     __end_of_lchika:
 10900                           	opt stack 0
 10901                           pclatu	equ	0xFFB
 10902                           pclath	equ	0xFFA
 10903                           tblptru	equ	0xFF8
 10904                           tblptrh	equ	0xFF7
 10905                           tblptrl	equ	0xFF6
 10906                           tablat	equ	0xFF5
 10907                           prodh	equ	0xFF4
 10908                           prodl	equ	0xFF3
 10909                           intcon	equ	0xFF2
 10910                           intcon2	equ	0xFF1
 10911                           indf0	equ	0xFEF
 10912                           postinc0	equ	0xFEE
 10913                           fsr0h	equ	0xFEA
 10914                           fsr0l	equ	0xFE9
 10915                           wreg	equ	0xFE8
 10916                           fsr1h	equ	0xFE2
 10917                           fsr1l	equ	0xFE1
 10918                           indf2	equ	0xFDF
 10919                           postinc2	equ	0xFDE
 10920                           postdec2	equ	0xFDD
 10921                           plusw2	equ	0xFDB
 10922                           fsr2h	equ	0xFDA
 10923                           fsr2l	equ	0xFD9
 10924                           status	equ	0xFD8
 10925                           
 10926 ;; *************** function i2___lwdiv *****************
 10927 ;; Defined at:
 10928 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
 10929 ;; Parameters:    Size  Location     Type
 10930 ;;  dividend        2    0[COMRAM] unsigned int 
 10931 ;;  divisor         2    2[COMRAM] unsigned int 
 10932 ;; Auto vars:     Size  Location     Type
 10933 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 10934 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 10935 ;; Return value:  Size  Location     Type
 10936 ;;                  2    0[COMRAM] unsigned int 
 10937 ;; Registers used:
 10938 ;;		wreg, status,2, status,0
 10939 ;; Tracked objects:
 10940 ;;		On entry : 0/0
 10941 ;;		On exit  : 0/0
 10942 ;;		Unchanged: 0/0
 10943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10944 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10945 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10947 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10948 ;;Total ram usage:        7 bytes
 10949 ;; Hardware stack levels used:    1
 10950 ;; This function calls:
 10951 ;;		Nothing
 10952 ;; This function is called by:
 10953 ;;		_lchika
 10954 ;; This function uses a non-reentrant model
 10955 ;;
 10956                           
 10957                           	psect	text61
 10958  0034C6                     __ptext61:
 10959                           	opt stack 0
 10960  0034C6                     i2___lwdiv:
 10961                           	opt stack 22
 10962                           
 10963                           ;incstack = 0
 10964  0034C6  0E00               	movlw	0
 10965  0034C8  6E06               	movwf	i2___lwdiv@quotient+1,c
 10966  0034CA  0E00               	movlw	0
 10967  0034CC  6E05               	movwf	i2___lwdiv@quotient,c
 10968  0034CE  5003               	movf	i2___lwdiv@divisor,w,c
 10969  0034D0  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 10970  0034D2  B4D8               	btfsc	status,2,c
 10971  0034D4  D01C               	goto	i2l1144
 10972  0034D6  0E01               	movlw	1
 10973  0034D8  6E07               	movwf	i2___lwdiv@counter,c
 10974  0034DA  D004               	goto	i2l3927
 10975  0034DC                     i2l3925:
 10976  0034DC  90D8               	bcf	status,0,c
 10977  0034DE  3603               	rlcf	i2___lwdiv@divisor,f,c
 10978  0034E0  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 10979  0034E2  2A07               	incf	i2___lwdiv@counter,f,c
 10980  0034E4                     i2l3927:
 10981  0034E4  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 10982  0034E6  D7FA               	goto	i2l3925
 10983  0034E8                     i2l3929:
 10984  0034E8  90D8               	bcf	status,0,c
 10985  0034EA  3605               	rlcf	i2___lwdiv@quotient,f,c
 10986  0034EC  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 10987  0034EE  5003               	movf	i2___lwdiv@divisor,w,c
 10988  0034F0  5C01               	subwf	i2___lwdiv@dividend,w,c
 10989  0034F2  5004               	movf	i2___lwdiv@divisor+1,w,c
 10990  0034F4  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 10991  0034F6  A0D8               	btfss	status,0,c
 10992  0034F8  D005               	goto	i2l3937
 10993  0034FA  5003               	movf	i2___lwdiv@divisor,w,c
 10994  0034FC  5E01               	subwf	i2___lwdiv@dividend,f,c
 10995  0034FE  5004               	movf	i2___lwdiv@divisor+1,w,c
 10996  003500  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 10997  003502  8005               	bsf	i2___lwdiv@quotient,0,c
 10998  003504                     i2l3937:
 10999  003504  90D8               	bcf	status,0,c
 11000  003506  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 11001  003508  3203               	rrcf	i2___lwdiv@divisor,f,c
 11002  00350A  2E07               	decfsz	i2___lwdiv@counter,f,c
 11003  00350C  D7ED               	goto	i2l3929
 11004  00350E                     i2l1144:
 11005  00350E  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 11006  003512  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 11007  003516  0012               	return		;funcret
 11008  003518                     __end_ofi2___lwdiv:
 11009                           	opt stack 0
 11010                           pclatu	equ	0xFFB
 11011                           pclath	equ	0xFFA
 11012                           tblptru	equ	0xFF8
 11013                           tblptrh	equ	0xFF7
 11014                           tblptrl	equ	0xFF6
 11015                           tablat	equ	0xFF5
 11016                           prodh	equ	0xFF4
 11017                           prodl	equ	0xFF3
 11018                           intcon	equ	0xFF2
 11019                           intcon2	equ	0xFF1
 11020                           indf0	equ	0xFEF
 11021                           postinc0	equ	0xFEE
 11022                           fsr0h	equ	0xFEA
 11023                           fsr0l	equ	0xFE9
 11024                           wreg	equ	0xFE8
 11025                           fsr1h	equ	0xFE2
 11026                           fsr1l	equ	0xFE1
 11027                           indf2	equ	0xFDF
 11028                           postinc2	equ	0xFDE
 11029                           postdec2	equ	0xFDD
 11030                           plusw2	equ	0xFDB
 11031                           fsr2h	equ	0xFDA
 11032                           fsr2l	equ	0xFD9
 11033                           status	equ	0xFD8
 11034                           
 11035 ;; *************** function i2___awdiv *****************
 11036 ;; Defined at:
 11037 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
 11038 ;; Parameters:    Size  Location     Type
 11039 ;;  dividend        2    0[COMRAM] int 
 11040 ;;  divisor         2    2[COMRAM] int 
 11041 ;; Auto vars:     Size  Location     Type
 11042 ;;  __awdiv         2    6[COMRAM] int 
 11043 ;;  __awdiv         1    5[COMRAM] unsigned char 
 11044 ;;  __awdiv         1    4[COMRAM] unsigned char 
 11045 ;; Return value:  Size  Location     Type
 11046 ;;                  2    0[COMRAM] int 
 11047 ;; Registers used:
 11048 ;;		wreg, status,2, status,0
 11049 ;; Tracked objects:
 11050 ;;		On entry : 0/0
 11051 ;;		On exit  : 0/0
 11052 ;;		Unchanged: 0/0
 11053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11054 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11055 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11057 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11058 ;;Total ram usage:        8 bytes
 11059 ;; Hardware stack levels used:    1
 11060 ;; This function calls:
 11061 ;;		Nothing
 11062 ;; This function is called by:
 11063 ;;		_lchika
 11064 ;; This function uses a non-reentrant model
 11065 ;;
 11066                           
 11067                           	psect	text62
 11068  003046                     __ptext62:
 11069                           	opt stack 0
 11070  003046                     i2___awdiv:
 11071                           	opt stack 22
 11072                           
 11073                           ;incstack = 0
 11074  003046  0E00               	movlw	0
 11075  003048  6E06               	movwf	i2___awdiv@sign,c
 11076  00304A  AE04               	btfss	i2___awdiv@divisor+1,7,c
 11077  00304C  D006               	goto	i2l3861
 11078  00304E  6C03               	negf	i2___awdiv@divisor,c
 11079  003050  1E04               	comf	i2___awdiv@divisor+1,f,c
 11080  003052  B0D8               	btfsc	status,0,c
 11081  003054  2A04               	incf	i2___awdiv@divisor+1,f,c
 11082  003056  0E01               	movlw	1
 11083  003058  6E06               	movwf	i2___awdiv@sign,c
 11084  00305A                     i2l3861:
 11085  00305A  AE02               	btfss	i2___awdiv@dividend+1,7,c
 11086  00305C  D006               	goto	i2l3867
 11087  00305E  6C01               	negf	i2___awdiv@dividend,c
 11088  003060  1E02               	comf	i2___awdiv@dividend+1,f,c
 11089  003062  B0D8               	btfsc	status,0,c
 11090  003064  2A02               	incf	i2___awdiv@dividend+1,f,c
 11091  003066  0E01               	movlw	1
 11092  003068  1A06               	xorwf	i2___awdiv@sign,f,c
 11093  00306A                     i2l3867:
 11094  00306A  0E00               	movlw	0
 11095  00306C  6E08               	movwf	i2___awdiv@quotient+1,c
 11096  00306E  0E00               	movlw	0
 11097  003070  6E07               	movwf	i2___awdiv@quotient,c
 11098  003072  5003               	movf	i2___awdiv@divisor,w,c
 11099  003074  1004               	iorwf	i2___awdiv@divisor+1,w,c
 11100  003076  B4D8               	btfsc	status,2,c
 11101  003078  D01C               	goto	i2l3889
 11102  00307A  0E01               	movlw	1
 11103  00307C  6E05               	movwf	i2___awdiv@counter,c
 11104  00307E  D004               	goto	i2l3875
 11105  003080                     i2l3873:
 11106  003080  90D8               	bcf	status,0,c
 11107  003082  3603               	rlcf	i2___awdiv@divisor,f,c
 11108  003084  3604               	rlcf	i2___awdiv@divisor+1,f,c
 11109  003086  2A05               	incf	i2___awdiv@counter,f,c
 11110  003088                     i2l3875:
 11111  003088  AE04               	btfss	i2___awdiv@divisor+1,7,c
 11112  00308A  D7FA               	goto	i2l3873
 11113  00308C                     i2l3877:
 11114  00308C  90D8               	bcf	status,0,c
 11115  00308E  3607               	rlcf	i2___awdiv@quotient,f,c
 11116  003090  3608               	rlcf	i2___awdiv@quotient+1,f,c
 11117  003092  5003               	movf	i2___awdiv@divisor,w,c
 11118  003094  5C01               	subwf	i2___awdiv@dividend,w,c
 11119  003096  5004               	movf	i2___awdiv@divisor+1,w,c
 11120  003098  5802               	subwfb	i2___awdiv@dividend+1,w,c
 11121  00309A  A0D8               	btfss	status,0,c
 11122  00309C  D005               	goto	i2l3885
 11123  00309E  5003               	movf	i2___awdiv@divisor,w,c
 11124  0030A0  5E01               	subwf	i2___awdiv@dividend,f,c
 11125  0030A2  5004               	movf	i2___awdiv@divisor+1,w,c
 11126  0030A4  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 11127  0030A6  8007               	bsf	i2___awdiv@quotient,0,c
 11128  0030A8                     i2l3885:
 11129  0030A8  90D8               	bcf	status,0,c
 11130  0030AA  3204               	rrcf	i2___awdiv@divisor+1,f,c
 11131  0030AC  3203               	rrcf	i2___awdiv@divisor,f,c
 11132  0030AE  2E05               	decfsz	i2___awdiv@counter,f,c
 11133  0030B0  D7ED               	goto	i2l3877
 11134  0030B2                     i2l3889:
 11135  0030B2  5006               	movf	i2___awdiv@sign,w,c
 11136  0030B4  B4D8               	btfsc	status,2,c
 11137  0030B6  D004               	goto	i2l3893
 11138  0030B8  6C07               	negf	i2___awdiv@quotient,c
 11139  0030BA  1E08               	comf	i2___awdiv@quotient+1,f,c
 11140  0030BC  B0D8               	btfsc	status,0,c
 11141  0030BE  2A08               	incf	i2___awdiv@quotient+1,f,c
 11142  0030C0                     i2l3893:
 11143  0030C0  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 11144  0030C4  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 11145  0030C8  0012               	return	
 11146  0030CA                     __end_ofi2___awdiv:
 11147                           	opt stack 0
 11148                           pclatu	equ	0xFFB
 11149                           pclath	equ	0xFFA
 11150                           tblptru	equ	0xFF8
 11151                           tblptrh	equ	0xFF7
 11152                           tblptrl	equ	0xFF6
 11153                           tablat	equ	0xFF5
 11154                           prodh	equ	0xFF4
 11155                           prodl	equ	0xFF3
 11156                           intcon	equ	0xFF2
 11157                           intcon2	equ	0xFF1
 11158                           indf0	equ	0xFEF
 11159                           postinc0	equ	0xFEE
 11160                           fsr0h	equ	0xFEA
 11161                           fsr0l	equ	0xFE9
 11162                           wreg	equ	0xFE8
 11163                           fsr1h	equ	0xFE2
 11164                           fsr1l	equ	0xFE1
 11165                           indf2	equ	0xFDF
 11166                           postinc2	equ	0xFDE
 11167                           postdec2	equ	0xFDD
 11168                           plusw2	equ	0xFDB
 11169                           fsr2h	equ	0xFDA
 11170                           fsr2l	equ	0xFD9
 11171                           status	equ	0xFD8
 11172                           
 11173 ;; *************** function i2_LED *****************
 11174 ;; Defined at:
 11175 ;;		line 55 in file "tasks.h"
 11176 ;; Parameters:    Size  Location     Type
 11177 ;;  b               1    wreg     unsigned char 
 11178 ;;  value           1    0[COMRAM] unsigned char 
 11179 ;; Auto vars:     Size  Location     Type
 11180 ;;  b               1    1[COMRAM] unsigned char 
 11181 ;; Return value:  Size  Location     Type
 11182 ;;		None               void
 11183 ;; Registers used:
 11184 ;;		wreg, status,2, status,0
 11185 ;; Tracked objects:
 11186 ;;		On entry : 0/0
 11187 ;;		On exit  : 0/0
 11188 ;;		Unchanged: 0/0
 11189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11190 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11191 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11193 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11194 ;;Total ram usage:        2 bytes
 11195 ;; Hardware stack levels used:    1
 11196 ;; This function calls:
 11197 ;;		Nothing
 11198 ;; This function is called by:
 11199 ;;		_lchika
 11200 ;; This function uses a non-reentrant model
 11201 ;;
 11202                           
 11203                           	psect	text63
 11204  0036B0                     __ptext63:
 11205                           	opt stack 0
 11206  0036B0                     i2_LED:
 11207                           	opt stack 22
 11208                           
 11209                           ;incstack = 0
 11210                           ;i2LED@b stored from wreg
 11211  0036B0  6E02               	movwf	i2LED@b,c
 11212                           
 11213                           ;tasks.h: 56: switch (b) {
 11214  0036B2  D012               	goto	i2l3851
 11215  0036B4                     i2l601:
 11216                           
 11217                           ;tasks.h: 58: LATC2 = value;
 11218  0036B4  A001               	btfss	i2LED@value,0,c
 11219  0036B6  D002               	goto	i2u354_40
 11220  0036B8  848B               	bsf	3979,2,c	;volatile
 11221  0036BA  0012               	return	
 11222  0036BC                     i2u354_40:
 11223  0036BC  948B               	bcf	3979,2,c	;volatile
 11224                           
 11225                           ;tasks.h: 59: break;
 11226  0036BE  0012               	return	
 11227  0036C0                     i2l603:
 11228                           
 11229                           ;tasks.h: 61: LATB7 = value;
 11230  0036C0  A001               	btfss	i2LED@value,0,c
 11231  0036C2  D002               	goto	i2u356_40
 11232  0036C4  8E8A               	bsf	3978,7,c	;volatile
 11233  0036C6  0012               	return	
 11234  0036C8                     i2u356_40:
 11235  0036C8  9E8A               	bcf	3978,7,c	;volatile
 11236                           
 11237                           ;tasks.h: 62: break;
 11238  0036CA  0012               	return	
 11239  0036CC                     i2l604:
 11240                           
 11241                           ;tasks.h: 64: LATB6 = value;
 11242  0036CC  A001               	btfss	i2LED@value,0,c
 11243  0036CE  D002               	goto	i2u358_40
 11244  0036D0  8C8A               	bsf	3978,6,c	;volatile
 11245  0036D2  0012               	return	
 11246  0036D4                     i2u358_40:
 11247  0036D4  9C8A               	bcf	3978,6,c	;volatile
 11248                           
 11249                           ;tasks.h: 66: }
 11250                           
 11251                           ;tasks.h: 65: break;
 11252  0036D6  0012               	return	
 11253  0036D8                     i2l3851:
 11254  0036D8  5002               	movf	i2LED@b,w,c
 11255                           
 11256                           ; Switch size 1, requested type "space"
 11257                           ; Number of cases is 3, Range of values is 0 to 2
 11258                           ; switch strategies available:
 11259                           ; Name         Instructions Cycles
 11260                           ; simple_byte           10     6 (average)
 11261                           ;	Chosen strategy is simple_byte
 11262  0036DA  0A00               	xorlw	0	; case 0
 11263  0036DC  B4D8               	btfsc	status,2,c
 11264  0036DE  D7EA               	goto	i2l601
 11265  0036E0  0A01               	xorlw	1	; case 1
 11266  0036E2  B4D8               	btfsc	status,2,c
 11267  0036E4  D7ED               	goto	i2l603
 11268  0036E6  0A03               	xorlw	3	; case 2
 11269  0036E8  A4D8               	btfss	status,2,c
 11270  0036EA  0012               	return	
 11271  0036EC  D7EF               	goto	i2l604
 11272  0036EE                     __end_ofi2_LED:
 11273                           	opt stack 0
 11274                           pclatu	equ	0xFFB
 11275                           pclath	equ	0xFFA
 11276                           tblptru	equ	0xFF8
 11277                           tblptrh	equ	0xFF7
 11278                           tblptrl	equ	0xFF6
 11279                           tablat	equ	0xFF5
 11280                           prodh	equ	0xFF4
 11281                           prodl	equ	0xFF3
 11282                           intcon	equ	0xFF2
 11283                           intcon2	equ	0xFF1
 11284                           indf0	equ	0xFEF
 11285                           postinc0	equ	0xFEE
 11286                           fsr0h	equ	0xFEA
 11287                           fsr0l	equ	0xFE9
 11288                           wreg	equ	0xFE8
 11289                           fsr1h	equ	0xFE2
 11290                           fsr1l	equ	0xFE1
 11291                           indf2	equ	0xFDF
 11292                           postinc2	equ	0xFDE
 11293                           postdec2	equ	0xFDD
 11294                           plusw2	equ	0xFDB
 11295                           fsr2h	equ	0xFDA
 11296                           fsr2l	equ	0xFD9
 11297                           status	equ	0xFD8
 11298                           
 11299 ;; *************** function _integrating *****************
 11300 ;; Defined at:
 11301 ;;		line 211 in file "tasks.h"
 11302 ;; Parameters:    Size  Location     Type
 11303 ;;		None
 11304 ;; Auto vars:     Size  Location     Type
 11305 ;;  port            1   15[COMRAM] unsigned char 
 11306 ;; Return value:  Size  Location     Type
 11307 ;;		None               void
 11308 ;; Registers used:
 11309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11310 ;; Tracked objects:
 11311 ;;		On entry : 0/0
 11312 ;;		On exit  : 0/0
 11313 ;;		Unchanged: 0/0
 11314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11316 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11317 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11318 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11319 ;;Total ram usage:        3 bytes
 11320 ;; Hardware stack levels used:    1
 11321 ;; Hardware stack levels required when called:    1
 11322 ;; This function calls:
 11323 ;;		i2___lldiv
 11324 ;; This function is called by:
 11325 ;;		_ISR
 11326 ;; This function uses a non-reentrant model
 11327 ;;
 11328                           
 11329                           	psect	text64
 11330  002E02                     __ptext64:
 11331                           	opt stack 0
 11332  002E02                     _integrating:
 11333                           	opt stack 22
 11334                           
 11335                           ;tasks.h: 212: for (uint8_t port = 0; port < 3; port++) {
 11336                           
 11337                           ;incstack = 0
 11338  002E02  0E00               	movlw	0
 11339  002E04  6E10               	movwf	integrating@port,c
 11340  002E06                     i2l4185:
 11341  002E06  0E02               	movlw	2
 11342  002E08  6410               	cpfsgt	integrating@port,c
 11343  002E0A  D001               	goto	i2l4189
 11344  002E0C  0012               	return	
 11345  002E0E                     i2l4189:
 11346                           
 11347                           ;tasks.h: 213: s[port] += I[port];
 11348  002E0E  5010               	movf	integrating@port,w,c
 11349  002E10  0D02               	mullw	2
 11350  002E12  0E22               	movlw	low _I
 11351  002E14  24F3               	addwf	prodl,w,c
 11352  002E16  6ED9               	movwf	fsr2l,c
 11353  002E18  0E00               	movlw	high _I
 11354  002E1A  20F4               	addwfc	prodh,w,c
 11355  002E1C  6EDA               	movwf	fsr2h,c
 11356  002E1E  CFDE F00E          	movff	postinc2,??_integrating
 11357  002E22  CFDD F00F          	movff	postdec2,??_integrating+1
 11358  002E26  5010               	movf	integrating@port,w,c
 11359  002E28  0D04               	mullw	4
 11360  002E2A  0E6C               	movlw	low _s
 11361  002E2C  24F3               	addwf	prodl,w,c
 11362  002E2E  6ED9               	movwf	fsr2l,c
 11363  002E30  0E00               	movlw	high _s
 11364  002E32  20F4               	addwfc	prodh,w,c
 11365  002E34  6EDA               	movwf	fsr2h,c
 11366  002E36  500E               	movf	??_integrating,w,c
 11367  002E38  26DE               	addwf	postinc2,f,c
 11368  002E3A  500F               	movf	??_integrating+1,w,c
 11369  002E3C  22DE               	addwfc	postinc2,f,c
 11370  002E3E  0E00               	movlw	0
 11371  002E40  22DE               	addwfc	postinc2,f,c
 11372  002E42  22DE               	addwfc	postinc2,f,c
 11373                           
 11374                           ;tasks.h: 214: S[port] = s[port] / 3600;
 11375  002E44  5010               	movf	integrating@port,w,c
 11376  002E46  0D04               	mullw	4
 11377  002E48  0E6C               	movlw	low _s
 11378  002E4A  24F3               	addwf	prodl,w,c
 11379  002E4C  6ED9               	movwf	fsr2l,c
 11380  002E4E  0E00               	movlw	high _s
 11381  002E50  20F4               	addwfc	prodh,w,c
 11382  002E52  6EDA               	movwf	fsr2h,c
 11383  002E54  CFDE F001          	movff	postinc2,i2___lldiv@dividend
 11384  002E58  CFDE F002          	movff	postinc2,i2___lldiv@dividend+1
 11385  002E5C  CFDE F003          	movff	postinc2,i2___lldiv@dividend+2
 11386  002E60  CFDE F004          	movff	postinc2,i2___lldiv@dividend+3
 11387  002E64  0E10               	movlw	16
 11388  002E66  6E05               	movwf	i2___lldiv@divisor,c
 11389  002E68  0E0E               	movlw	14
 11390  002E6A  6E06               	movwf	i2___lldiv@divisor+1,c
 11391  002E6C  0E00               	movlw	0
 11392  002E6E  6E07               	movwf	i2___lldiv@divisor+2,c
 11393  002E70  0E00               	movlw	0
 11394  002E72  6E08               	movwf	i2___lldiv@divisor+3,c
 11395  002E74  EC65  F018         	call	i2___lldiv	;wreg free
 11396  002E78  5010               	movf	integrating@port,w,c
 11397  002E7A  0D04               	mullw	4
 11398  002E7C  0E60               	movlw	low _S
 11399  002E7E  24F3               	addwf	prodl,w,c
 11400  002E80  6ED9               	movwf	fsr2l,c
 11401  002E82  0E00               	movlw	high _S
 11402  002E84  20F4               	addwfc	prodh,w,c
 11403  002E86  6EDA               	movwf	fsr2h,c
 11404  002E88  C001  FFDE         	movff	?i2___lldiv,postinc2
 11405  002E8C  C002  FFDE         	movff	?i2___lldiv+1,postinc2
 11406  002E90  C003  FFDE         	movff	?i2___lldiv+2,postinc2
 11407  002E94  C004  FFDE         	movff	?i2___lldiv+3,postinc2
 11408  002E98  2A10               	incf	integrating@port,f,c
 11409  002E9A  D7B5               	goto	i2l4185
 11410  002E9C                     __end_of_integrating:
 11411                           	opt stack 0
 11412                           pclatu	equ	0xFFB
 11413                           pclath	equ	0xFFA
 11414                           tblptru	equ	0xFF8
 11415                           tblptrh	equ	0xFF7
 11416                           tblptrl	equ	0xFF6
 11417                           tablat	equ	0xFF5
 11418                           prodh	equ	0xFF4
 11419                           prodl	equ	0xFF3
 11420                           intcon	equ	0xFF2
 11421                           intcon2	equ	0xFF1
 11422                           indf0	equ	0xFEF
 11423                           postinc0	equ	0xFEE
 11424                           fsr0h	equ	0xFEA
 11425                           fsr0l	equ	0xFE9
 11426                           wreg	equ	0xFE8
 11427                           fsr1h	equ	0xFE2
 11428                           fsr1l	equ	0xFE1
 11429                           indf2	equ	0xFDF
 11430                           postinc2	equ	0xFDE
 11431                           postdec2	equ	0xFDD
 11432                           plusw2	equ	0xFDB
 11433                           fsr2h	equ	0xFDA
 11434                           fsr2l	equ	0xFD9
 11435                           status	equ	0xFD8
 11436                           
 11437 ;; *************** function i2___lldiv *****************
 11438 ;; Defined at:
 11439 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lldiv.c"
 11440 ;; Parameters:    Size  Location     Type
 11441 ;;  dividend        4    0[COMRAM] unsigned long 
 11442 ;;  divisor         4    4[COMRAM] unsigned long 
 11443 ;; Auto vars:     Size  Location     Type
 11444 ;;  __lldiv         4    8[COMRAM] unsigned long 
 11445 ;;  __lldiv         1   12[COMRAM] unsigned char 
 11446 ;; Return value:  Size  Location     Type
 11447 ;;                  4    0[COMRAM] unsigned long 
 11448 ;; Registers used:
 11449 ;;		wreg, status,2, status,0
 11450 ;; Tracked objects:
 11451 ;;		On entry : 0/0
 11452 ;;		On exit  : 0/0
 11453 ;;		Unchanged: 0/0
 11454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11455 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11456 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11458 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11459 ;;Total ram usage:       13 bytes
 11460 ;; Hardware stack levels used:    1
 11461 ;; This function calls:
 11462 ;;		Nothing
 11463 ;; This function is called by:
 11464 ;;		_integrating
 11465 ;; This function uses a non-reentrant model
 11466 ;;
 11467                           
 11468                           	psect	text65
 11469  0030CA                     __ptext65:
 11470                           	opt stack 0
 11471  0030CA                     i2___lldiv:
 11472                           	opt stack 22
 11473                           
 11474                           ;incstack = 0
 11475  0030CA  0E00               	movlw	0
 11476  0030CC  6E09               	movwf	i2___lldiv@quotient,c
 11477  0030CE  0E00               	movlw	0
 11478  0030D0  6E0A               	movwf	i2___lldiv@quotient+1,c
 11479  0030D2  0E00               	movlw	0
 11480  0030D4  6E0B               	movwf	i2___lldiv@quotient+2,c
 11481  0030D6  0E00               	movlw	0
 11482  0030D8  6E0C               	movwf	i2___lldiv@quotient+3,c
 11483  0030DA  5005               	movf	i2___lldiv@divisor,w,c
 11484  0030DC  1006               	iorwf	i2___lldiv@divisor+1,w,c
 11485  0030DE  1007               	iorwf	i2___lldiv@divisor+2,w,c
 11486  0030E0  1008               	iorwf	i2___lldiv@divisor+3,w,c
 11487  0030E2  B4D8               	btfsc	status,2,c
 11488  0030E4  D02A               	goto	i2l1091
 11489  0030E6  0E01               	movlw	1
 11490  0030E8  6E0D               	movwf	i2___lldiv@counter,c
 11491  0030EA  D006               	goto	i2l3905
 11492  0030EC                     i2l3903:
 11493  0030EC  90D8               	bcf	status,0,c
 11494  0030EE  3605               	rlcf	i2___lldiv@divisor,f,c
 11495  0030F0  3606               	rlcf	i2___lldiv@divisor+1,f,c
 11496  0030F2  3607               	rlcf	i2___lldiv@divisor+2,f,c
 11497  0030F4  3608               	rlcf	i2___lldiv@divisor+3,f,c
 11498  0030F6  2A0D               	incf	i2___lldiv@counter,f,c
 11499  0030F8                     i2l3905:
 11500  0030F8  AE08               	btfss	i2___lldiv@divisor+3,7,c
 11501  0030FA  D7F8               	goto	i2l3903
 11502  0030FC                     i2l3907:
 11503  0030FC  90D8               	bcf	status,0,c
 11504  0030FE  3609               	rlcf	i2___lldiv@quotient,f,c
 11505  003100  360A               	rlcf	i2___lldiv@quotient+1,f,c
 11506  003102  360B               	rlcf	i2___lldiv@quotient+2,f,c
 11507  003104  360C               	rlcf	i2___lldiv@quotient+3,f,c
 11508  003106  5005               	movf	i2___lldiv@divisor,w,c
 11509  003108  5C01               	subwf	i2___lldiv@dividend,w,c
 11510  00310A  5006               	movf	i2___lldiv@divisor+1,w,c
 11511  00310C  5802               	subwfb	i2___lldiv@dividend+1,w,c
 11512  00310E  5007               	movf	i2___lldiv@divisor+2,w,c
 11513  003110  5803               	subwfb	i2___lldiv@dividend+2,w,c
 11514  003112  5008               	movf	i2___lldiv@divisor+3,w,c
 11515  003114  5804               	subwfb	i2___lldiv@dividend+3,w,c
 11516  003116  A0D8               	btfss	status,0,c
 11517  003118  D009               	goto	i2l3915
 11518  00311A  5005               	movf	i2___lldiv@divisor,w,c
 11519  00311C  5E01               	subwf	i2___lldiv@dividend,f,c
 11520  00311E  5006               	movf	i2___lldiv@divisor+1,w,c
 11521  003120  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 11522  003122  5007               	movf	i2___lldiv@divisor+2,w,c
 11523  003124  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 11524  003126  5008               	movf	i2___lldiv@divisor+3,w,c
 11525  003128  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 11526  00312A  8009               	bsf	i2___lldiv@quotient,0,c
 11527  00312C                     i2l3915:
 11528  00312C  90D8               	bcf	status,0,c
 11529  00312E  3208               	rrcf	i2___lldiv@divisor+3,f,c
 11530  003130  3207               	rrcf	i2___lldiv@divisor+2,f,c
 11531  003132  3206               	rrcf	i2___lldiv@divisor+1,f,c
 11532  003134  3205               	rrcf	i2___lldiv@divisor,f,c
 11533  003136  2E0D               	decfsz	i2___lldiv@counter,f,c
 11534  003138  D7E1               	goto	i2l3907
 11535  00313A                     i2l1091:
 11536  00313A  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 11537  00313E  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 11538  003142  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 11539  003146  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 11540  00314A  0012               	return		;funcret
 11541  00314C                     __end_ofi2___lldiv:
 11542                           	opt stack 0
 11543                           pclatu	equ	0xFFB
 11544                           pclath	equ	0xFFA
 11545                           tblptru	equ	0xFF8
 11546                           tblptrh	equ	0xFF7
 11547                           tblptrl	equ	0xFF6
 11548                           tablat	equ	0xFF5
 11549                           prodh	equ	0xFF4
 11550                           prodl	equ	0xFF3
 11551                           intcon	equ	0xFF2
 11552                           intcon2	equ	0xFF1
 11553                           indf0	equ	0xFEF
 11554                           postinc0	equ	0xFEE
 11555                           fsr0h	equ	0xFEA
 11556                           fsr0l	equ	0xFE9
 11557                           wreg	equ	0xFE8
 11558                           fsr1h	equ	0xFE2
 11559                           fsr1l	equ	0xFE1
 11560                           indf2	equ	0xFDF
 11561                           postinc2	equ	0xFDE
 11562                           postdec2	equ	0xFDD
 11563                           plusw2	equ	0xFDB
 11564                           fsr2h	equ	0xFDA
 11565                           fsr2l	equ	0xFD9
 11566                           status	equ	0xFD8
 11567                           
 11568 ;; *************** function _delay_timer_interrupt *****************
 11569 ;; Defined at:
 11570 ;;		line 344 in file "../My_header\My_header.h"
 11571 ;; Parameters:    Size  Location     Type
 11572 ;;  d               2    0[COMRAM] PTR struct Delay
 11573 ;;		 -> d_display(3), 
 11574 ;; Auto vars:     Size  Location     Type
 11575 ;;		None
 11576 ;; Return value:  Size  Location     Type
 11577 ;;		None               void
 11578 ;; Registers used:
 11579 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11580 ;; Tracked objects:
 11581 ;;		On entry : 0/0
 11582 ;;		On exit  : 0/0
 11583 ;;		Unchanged: 0/0
 11584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11585 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11587 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11588 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11589 ;;Total ram usage:        4 bytes
 11590 ;; Hardware stack levels used:    1
 11591 ;; This function calls:
 11592 ;;		Nothing
 11593 ;; This function is called by:
 11594 ;;		_ISR
 11595 ;; This function uses a non-reentrant model
 11596 ;;
 11597                           
 11598                           	psect	text66
 11599  003562                     __ptext66:
 11600                           	opt stack 0
 11601  003562                     _delay_timer_interrupt:
 11602                           	opt stack 23
 11603                           
 11604                           ;My_header\My_header.h: 345: if (d->cnt == 1)d->flag = 1;
 11605                           
 11606                           ;incstack = 0
 11607  003562  EE20 F001          	lfsr	2,1
 11608  003566  5001               	movf	delay_timer_interrupt@d,w,c
 11609  003568  26D9               	addwf	fsr2l,f,c
 11610  00356A  5002               	movf	delay_timer_interrupt@d+1,w,c
 11611  00356C  22DA               	addwfc	fsr2h,f,c
 11612  00356E  04DE               	decf	postinc2,w,c
 11613  003570  10DE               	iorwf	postinc2,w,c
 11614  003572  A4D8               	btfss	status,2,c
 11615  003574  D006               	goto	i2l3963
 11616  003576  C001  FFD9         	movff	delay_timer_interrupt@d,fsr2l
 11617  00357A  C002  FFDA         	movff	delay_timer_interrupt@d+1,fsr2h
 11618  00357E  0E01               	movlw	1
 11619  003580  6EDF               	movwf	indf2,c
 11620  003582                     i2l3963:
 11621                           
 11622                           ;My_header\My_header.h: 346: if (d->cnt)d->cnt--;
 11623  003582  EE20 F001          	lfsr	2,1
 11624  003586  5001               	movf	delay_timer_interrupt@d,w,c
 11625  003588  26D9               	addwf	fsr2l,f,c
 11626  00358A  5002               	movf	delay_timer_interrupt@d+1,w,c
 11627  00358C  22DA               	addwfc	fsr2h,f,c
 11628  00358E  50DE               	movf	postinc2,w,c
 11629  003590  10DE               	iorwf	postinc2,w,c
 11630  003592  B4D8               	btfsc	status,2,c
 11631  003594  0012               	return	
 11632  003596  EE20 F001          	lfsr	2,1
 11633  00359A  5001               	movf	delay_timer_interrupt@d,w,c
 11634  00359C  26D9               	addwf	fsr2l,f,c
 11635  00359E  5002               	movf	delay_timer_interrupt@d+1,w,c
 11636  0035A0  22DA               	addwfc	fsr2h,f,c
 11637  0035A2  06DE               	decf	postinc2,f,c
 11638  0035A4  0E00               	movlw	0
 11639  0035A6  5ADD               	subwfb	postdec2,f,c
 11640  0035A8  0012               	return	
 11641  0035AA                     __end_of_delay_timer_interrupt:
 11642                           	opt stack 0
 11643                           pclatu	equ	0xFFB
 11644                           pclath	equ	0xFFA
 11645                           tblptru	equ	0xFF8
 11646                           tblptrh	equ	0xFF7
 11647                           tblptrl	equ	0xFF6
 11648                           tablat	equ	0xFF5
 11649                           prodh	equ	0xFF4
 11650                           prodl	equ	0xFF3
 11651                           intcon	equ	0xFF2
 11652                           intcon2	equ	0xFF1
 11653                           indf0	equ	0xFEF
 11654                           postinc0	equ	0xFEE
 11655                           fsr0h	equ	0xFEA
 11656                           fsr0l	equ	0xFE9
 11657                           wreg	equ	0xFE8
 11658                           fsr1h	equ	0xFE2
 11659                           fsr1l	equ	0xFE1
 11660                           indf2	equ	0xFDF
 11661                           postinc2	equ	0xFDE
 11662                           postdec2	equ	0xFDD
 11663                           plusw2	equ	0xFDB
 11664                           fsr2h	equ	0xFDA
 11665                           fsr2l	equ	0xFD9
 11666                           status	equ	0xFD8
 11667                           
 11668 ;; *************** function _button_timer_interrupt *****************
 11669 ;; Defined at:
 11670 ;;		line 51 in file "../My_header\My_button.h"
 11671 ;; Parameters:    Size  Location     Type
 11672 ;;  bt              2    0[COMRAM] PTR struct button
 11673 ;;		 -> sw(4), sw2(4), sw1(4), sw0(4), 
 11674 ;;  sw_value        1    2[COMRAM] unsigned char 
 11675 ;; Auto vars:     Size  Location     Type
 11676 ;;		None
 11677 ;; Return value:  Size  Location     Type
 11678 ;;		None               void
 11679 ;; Registers used:
 11680 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11681 ;; Tracked objects:
 11682 ;;		On entry : 0/0
 11683 ;;		On exit  : 0/0
 11684 ;;		Unchanged: 0/0
 11685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11686 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11688 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11689 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11690 ;;Total ram usage:        5 bytes
 11691 ;; Hardware stack levels used:    1
 11692 ;; This function calls:
 11693 ;;		Nothing
 11694 ;; This function is called by:
 11695 ;;		_ISR
 11696 ;; This function uses a non-reentrant model
 11697 ;;
 11698                           
 11699                           	psect	text67
 11700  00149E                     __ptext67:
 11701                           	opt stack 0
 11702  00149E                     _button_timer_interrupt:
 11703                           	opt stack 23
 11704                           
 11705                           ;My_header\My_button.h: 52: if (sw_value) {
 11706                           
 11707                           ;incstack = 0
 11708  00149E  5003               	movf	button_timer_interrupt@sw_value,w,c
 11709  0014A0  B4D8               	btfsc	status,2,c
 11710  0014A2  D098               	goto	i2l3989
 11711                           
 11712                           ;My_header\My_button.h: 53: if (bt->cnt_sw == 900)bt->flag.long_holding_7 = 1;
 11713  0014A4  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
 11714  0014A8  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 11715  0014AC  0E84               	movlw	132
 11716  0014AE  18DE               	xorwf	postinc2,w,c
 11717  0014B0  E10B               	bnz	i2l274
 11718  0014B2  0E03               	movlw	3
 11719  0014B4  18DE               	xorwf	postinc2,w,c
 11720  0014B6  A4D8               	btfss	status,2,c
 11721  0014B8  D007               	goto	i2l274
 11722  0014BA  EE20 F003          	lfsr	2,3
 11723  0014BE  5001               	movf	button_timer_interrupt@bt,w,c
 11724  0014C0  26D9               	addwf	fsr2l,f,c
 11725  0014C2  5002               	movf	button_timer_interrupt@bt+1,w,c
 11726  0014C4  22DA               	addwfc	fsr2h,f,c
 11727  0014C6  8EDF               	bsf	indf2,7,c
 11728  0014C8                     i2l274:
 11729                           
 11730                           ;My_header\My_button.h: 54: if (bt->cnt_sw == 700)bt->flag.long_holding_6 = 1;
 11731  0014C8  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
 11732  0014CC  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 11733  0014D0  0EBC               	movlw	188
 11734  0014D2  18DE               	xorwf	postinc2,w,c
 11735  0014D4  E10B               	bnz	i2l275
 11736  0014D6  0E02               	movlw	2
 11737  0014D8  18DE               	xorwf	postinc2,w,c
 11738  0014DA  A4D8               	btfss	status,2,c
 11739  0014DC  D007               	goto	i2l275
 11740  0014DE  EE20 F003          	lfsr	2,3
 11741  0014E2  5001               	movf	button_timer_interrupt@bt,w,c
 11742  0014E4  26D9               	addwf	fsr2l,f,c
 11743  0014E6  5002               	movf	button_timer_interrupt@bt+1,w,c
 11744  0014E8  22DA               	addwfc	fsr2h,f,c
 11745  0014EA  8CDF               	bsf	indf2,6,c
 11746  0014EC                     i2l275:
 11747                           
 11748                           ;My_header\My_button.h: 55: if (bt->cnt_sw == 500)bt->flag.long_holding_5 = 1;
 11749  0014EC  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
 11750  0014F0  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 11751  0014F4  0EF4               	movlw	244
 11752  0014F6  18DE               	xorwf	postinc2,w,c
 11753  0014F8  E10A               	bnz	i2l276
 11754  0014FA  04DE               	decf	postinc2,w,c
 11755  0014FC  A4D8               	btfss	status,2,c
 11756  0014FE  D007               	goto	i2l276
 11757  001500  EE20 F003          	lfsr	2,3
 11758  001504  5001               	movf	button_timer_interrupt@bt,w,c
 11759  001506  26D9               	addwf	fsr2l,f,c
 11760  001508  5002               	movf	button_timer_interrupt@bt+1,w,c
 11761  00150A  22DA               	addwfc	fsr2h,f,c
 11762  00150C  8ADF               	bsf	indf2,5,c
 11763  00150E                     i2l276:
 11764                           
 11765                           ;My_header\My_button.h: 56: if (bt->cnt_sw == 300)bt->flag.long_holding_4 = 1;
 11766  00150E  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
 11767  001512  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 11768  001516  0E2C               	movlw	44
 11769  001518  18DE               	xorwf	postinc2,w,c
 11770  00151A  E10A               	bnz	i2l277
 11771  00151C  04DE               	decf	postinc2,w,c
 11772  00151E  A4D8               	btfss	status,2,c
 11773  001520  D007               	goto	i2l277
 11774  001522  EE20 F003          	lfsr	2,3
 11775  001526  5001               	movf	button_timer_interrupt@bt,w,c
 11776  001528  26D9               	addwf	fsr2l,f,c
 11777  00152A  5002               	movf	button_timer_interrupt@bt+1,w,c
 11778  00152C  22DA               	addwfc	fsr2h,f,c
 11779  00152E  88DF               	bsf	indf2,4,c
 11780  001530                     i2l277:
 11781                           
 11782                           ;My_header\My_button.h: 57: if (bt->cnt_sw == 150)bt->flag.long_holding_3 = 1;
 11783  001530  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
 11784  001534  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 11785  001538  0E96               	movlw	150
 11786  00153A  18DE               	xorwf	postinc2,w,c
 11787  00153C  10DE               	iorwf	postinc2,w,c
 11788  00153E  A4D8               	btfss	status,2,c
 11789  001540  D007               	goto	i2l278
 11790  001542  EE20 F003          	lfsr	2,3
 11791  001546  5001               	movf	button_timer_interrupt@bt,w,c
 11792  001548  26D9               	addwf	fsr2l,f,c
 11793  00154A  5002               	movf	button_timer_interrupt@bt+1,w,c
 11794  00154C  22DA               	addwfc	fsr2h,f,c
 11795  00154E  86DF               	bsf	indf2,3,c
 11796  001550                     i2l278:
 11797                           
 11798                           ;My_header\My_button.h: 58: if (bt->cnt_sw == 60)bt->flag.long_holding_2 = 1;
 11799  001550  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
 11800  001554  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 11801  001558  0E3C               	movlw	60
 11802  00155A  18DE               	xorwf	postinc2,w,c
 11803  00155C  10DE               	iorwf	postinc2,w,c
 11804  00155E  A4D8               	btfss	status,2,c
 11805  001560  D007               	goto	i2l279
 11806  001562  EE20 F003          	lfsr	2,3
 11807  001566  5001               	movf	button_timer_interrupt@bt,w,c
 11808  001568  26D9               	addwf	fsr2l,f,c
 11809  00156A  5002               	movf	button_timer_interrupt@bt+1,w,c
 11810  00156C  22DA               	addwfc	fsr2h,f,c
 11811  00156E  84DF               	bsf	indf2,2,c
 11812  001570                     i2l279:
 11813                           
 11814                           ;My_header\My_button.h: 59: if (bt->cnt_sw == 16)bt->flag.long_holding_1 = 1;
 11815  001570  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
 11816  001574  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 11817  001578  0E10               	movlw	16
 11818  00157A  18DE               	xorwf	postinc2,w,c
 11819  00157C  10DE               	iorwf	postinc2,w,c
 11820  00157E  A4D8               	btfss	status,2,c
 11821  001580  D007               	goto	i2l280
 11822  001582  EE20 F003          	lfsr	2,3
 11823  001586  5001               	movf	button_timer_interrupt@bt,w,c
 11824  001588  26D9               	addwf	fsr2l,f,c
 11825  00158A  5002               	movf	button_timer_interrupt@bt+1,w,c
 11826  00158C  22DA               	addwfc	fsr2h,f,c
 11827  00158E  82DF               	bsf	indf2,1,c
 11828  001590                     i2l280:
 11829                           
 11830                           ;My_header\My_button.h: 60: if (bt->cnt_sw == 2)bt->flag.pressing = 1;
 11831  001590  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
 11832  001594  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 11833  001598  0E02               	movlw	2
 11834  00159A  18DE               	xorwf	postinc2,w,c
 11835  00159C  10DE               	iorwf	postinc2,w,c
 11836  00159E  A4D8               	btfss	status,2,c
 11837  0015A0  D007               	goto	i2l281
 11838  0015A2  EE20 F003          	lfsr	2,3
 11839  0015A6  5001               	movf	button_timer_interrupt@bt,w,c
 11840  0015A8  26D9               	addwf	fsr2l,f,c
 11841  0015AA  5002               	movf	button_timer_interrupt@bt+1,w,c
 11842  0015AC  22DA               	addwfc	fsr2h,f,c
 11843  0015AE  80DF               	bsf	indf2,0,c
 11844  0015B0                     i2l281:
 11845                           
 11846                           ;My_header\My_button.h: 61: if (bt->cnt_sw < 900 + 1) bt->cnt_sw++;
 11847  0015B0  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
 11848  0015B4  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 11849  0015B8  0E85               	movlw	133
 11850  0015BA  5CDE               	subwf	postinc2,w,c
 11851  0015BC  0E03               	movlw	3
 11852  0015BE  58DE               	subwfb	postinc2,w,c
 11853  0015C0  B0D8               	btfsc	status,0,c
 11854  0015C2  0012               	return	
 11855  0015C4  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
 11856  0015C8  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 11857  0015CC  2ADE               	incf	postinc2,f,c
 11858  0015CE  0E00               	movlw	0
 11859  0015D0  22DD               	addwfc	postdec2,f,c
 11860                           
 11861                           ;My_header\My_button.h: 62: } else {
 11862  0015D2  0012               	return	
 11863  0015D4                     i2l3989:
 11864                           
 11865                           ;My_header\My_button.h: 63: if (bt->cnt_sw >= 900)bt->flag.long_hold_7 = 1;
 11866  0015D4  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
 11867  0015D8  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 11868  0015DC  0E84               	movlw	132
 11869  0015DE  5CDE               	subwf	postinc2,w,c
 11870  0015E0  0E03               	movlw	3
 11871  0015E2  58DE               	subwfb	postinc2,w,c
 11872  0015E4  A0D8               	btfss	status,0,c
 11873  0015E6  D008               	goto	i2l3993
 11874  0015E8  EE20 F002          	lfsr	2,2
 11875  0015EC  5001               	movf	button_timer_interrupt@bt,w,c
 11876  0015EE  26D9               	addwf	fsr2l,f,c
 11877  0015F0  5002               	movf	button_timer_interrupt@bt+1,w,c
 11878  0015F2  22DA               	addwfc	fsr2h,f,c
 11879  0015F4  8EDF               	bsf	indf2,7,c
 11880  0015F6  D081               	goto	i2l4021
 11881  0015F8                     i2l3993:
 11882                           
 11883                           ;My_header\My_button.h: 64: else if (bt->cnt_sw >= 700)bt->flag.long_hold_6 = 1;
 11884  0015F8  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
 11885  0015FC  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 11886  001600  0EBC               	movlw	188
 11887  001602  5CDE               	subwf	postinc2,w,c
 11888  001604  0E02               	movlw	2
 11889  001606  58DE               	subwfb	postinc2,w,c
 11890  001608  A0D8               	btfss	status,0,c
 11891  00160A  D008               	goto	i2l3997
 11892  00160C  EE20 F002          	lfsr	2,2
 11893  001610  5001               	movf	button_timer_interrupt@bt,w,c
 11894  001612  26D9               	addwf	fsr2l,f,c
 11895  001614  5002               	movf	button_timer_interrupt@bt+1,w,c
 11896  001616  22DA               	addwfc	fsr2h,f,c
 11897  001618  8CDF               	bsf	indf2,6,c
 11898  00161A  D06F               	goto	i2l4021
 11899  00161C                     i2l3997:
 11900                           
 11901                           ;My_header\My_button.h: 65: else if (bt->cnt_sw >= 500)bt->flag.long_hold_5 = 1;
 11902  00161C  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
 11903  001620  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 11904  001624  0EF4               	movlw	244
 11905  001626  5CDE               	subwf	postinc2,w,c
 11906  001628  0E01               	movlw	1
 11907  00162A  58DE               	subwfb	postinc2,w,c
 11908  00162C  A0D8               	btfss	status,0,c
 11909  00162E  D008               	goto	i2l4001
 11910  001630  EE20 F002          	lfsr	2,2
 11911  001634  5001               	movf	button_timer_interrupt@bt,w,c
 11912  001636  26D9               	addwf	fsr2l,f,c
 11913  001638  5002               	movf	button_timer_interrupt@bt+1,w,c
 11914  00163A  22DA               	addwfc	fsr2h,f,c
 11915  00163C  8ADF               	bsf	indf2,5,c
 11916  00163E  D05D               	goto	i2l4021
 11917  001640                     i2l4001:
 11918                           
 11919                           ;My_header\My_button.h: 66: else if (bt->cnt_sw >= 300)bt->flag.long_hold_4 = 1;
 11920  001640  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
 11921  001644  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 11922  001648  0E2C               	movlw	44
 11923  00164A  5CDE               	subwf	postinc2,w,c
 11924  00164C  0E01               	movlw	1
 11925  00164E  58DE               	subwfb	postinc2,w,c
 11926  001650  A0D8               	btfss	status,0,c
 11927  001652  D008               	goto	i2l4005
 11928  001654  EE20 F002          	lfsr	2,2
 11929  001658  5001               	movf	button_timer_interrupt@bt,w,c
 11930  00165A  26D9               	addwf	fsr2l,f,c
 11931  00165C  5002               	movf	button_timer_interrupt@bt+1,w,c
 11932  00165E  22DA               	addwfc	fsr2h,f,c
 11933  001660  88DF               	bsf	indf2,4,c
 11934  001662  D04B               	goto	i2l4021
 11935  001664                     i2l4005:
 11936                           
 11937                           ;My_header\My_button.h: 67: else if (bt->cnt_sw >= 150)bt->flag.long_hold_3 = 1;
 11938  001664  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
 11939  001668  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 11940  00166C  0E01               	movlw	1
 11941  00166E  50DB               	movf	plusw2,w,c
 11942  001670  E104               	bnz	i2u393_40
 11943  001672  0E96               	movlw	150
 11944  001674  5CDE               	subwf	postinc2,w,c
 11945  001676  A0D8               	btfss	status,0,c
 11946  001678  D008               	goto	i2l4009
 11947  00167A                     i2u393_40:
 11948  00167A  EE20 F002          	lfsr	2,2
 11949  00167E  5001               	movf	button_timer_interrupt@bt,w,c
 11950  001680  26D9               	addwf	fsr2l,f,c
 11951  001682  5002               	movf	button_timer_interrupt@bt+1,w,c
 11952  001684  22DA               	addwfc	fsr2h,f,c
 11953  001686  86DF               	bsf	indf2,3,c
 11954  001688  D038               	goto	i2l4021
 11955  00168A                     i2l4009:
 11956                           
 11957                           ;My_header\My_button.h: 68: else if (bt->cnt_sw >= 60)bt->flag.long_hold_2 = 1;
 11958  00168A  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
 11959  00168E  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 11960  001692  0E01               	movlw	1
 11961  001694  50DB               	movf	plusw2,w,c
 11962  001696  E104               	bnz	i2u394_40
 11963  001698  0E3C               	movlw	60
 11964  00169A  5CDE               	subwf	postinc2,w,c
 11965  00169C  A0D8               	btfss	status,0,c
 11966  00169E  D008               	goto	i2l4013
 11967  0016A0                     i2u394_40:
 11968  0016A0  EE20 F002          	lfsr	2,2
 11969  0016A4  5001               	movf	button_timer_interrupt@bt,w,c
 11970  0016A6  26D9               	addwf	fsr2l,f,c
 11971  0016A8  5002               	movf	button_timer_interrupt@bt+1,w,c
 11972  0016AA  22DA               	addwfc	fsr2h,f,c
 11973  0016AC  84DF               	bsf	indf2,2,c
 11974  0016AE  D025               	goto	i2l4021
 11975  0016B0                     i2l4013:
 11976                           
 11977                           ;My_header\My_button.h: 69: else if (bt->cnt_sw >= 16)bt->flag.long_hold_1 = 1;
 11978  0016B0  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
 11979  0016B4  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 11980  0016B8  0E01               	movlw	1
 11981  0016BA  50DB               	movf	plusw2,w,c
 11982  0016BC  E104               	bnz	i2u395_40
 11983  0016BE  0E10               	movlw	16
 11984  0016C0  5CDE               	subwf	postinc2,w,c
 11985  0016C2  A0D8               	btfss	status,0,c
 11986  0016C4  D008               	goto	i2l4017
 11987  0016C6                     i2u395_40:
 11988  0016C6  EE20 F002          	lfsr	2,2
 11989  0016CA  5001               	movf	button_timer_interrupt@bt,w,c
 11990  0016CC  26D9               	addwf	fsr2l,f,c
 11991  0016CE  5002               	movf	button_timer_interrupt@bt+1,w,c
 11992  0016D0  22DA               	addwfc	fsr2h,f,c
 11993  0016D2  82DF               	bsf	indf2,1,c
 11994  0016D4  D012               	goto	i2l4021
 11995  0016D6                     i2l4017:
 11996                           
 11997                           ;My_header\My_button.h: 70: else if (bt->cnt_sw >= 2)bt->flag.press = 1;
 11998  0016D6  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
 11999  0016DA  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 12000  0016DE  0E01               	movlw	1
 12001  0016E0  50DB               	movf	plusw2,w,c
 12002  0016E2  E104               	bnz	i2u396_40
 12003  0016E4  0E02               	movlw	2
 12004  0016E6  5CDE               	subwf	postinc2,w,c
 12005  0016E8  A0D8               	btfss	status,0,c
 12006  0016EA  D007               	goto	i2l4021
 12007  0016EC                     i2u396_40:
 12008  0016EC  EE20 F002          	lfsr	2,2
 12009  0016F0  5001               	movf	button_timer_interrupt@bt,w,c
 12010  0016F2  26D9               	addwf	fsr2l,f,c
 12011  0016F4  5002               	movf	button_timer_interrupt@bt+1,w,c
 12012  0016F6  22DA               	addwfc	fsr2h,f,c
 12013  0016F8  80DF               	bsf	indf2,0,c
 12014  0016FA                     i2l4021:
 12015                           
 12016                           ;My_header\My_button.h: 71: bt->cnt_sw = 0;
 12017  0016FA  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
 12018  0016FE  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
 12019  001702  0E00               	movlw	0
 12020  001704  6EDE               	movwf	postinc2,c
 12021  001706  0E00               	movlw	0
 12022  001708  6EDD               	movwf	postdec2,c
 12023                           
 12024                           ;My_header\My_button.h: 72: bt->flags &= 0x00FF;
 12025  00170A  EE20 F002          	lfsr	2,2
 12026  00170E  5001               	movf	button_timer_interrupt@bt,w,c
 12027  001710  26D9               	addwf	fsr2l,f,c
 12028  001712  5002               	movf	button_timer_interrupt@bt+1,w,c
 12029  001714  22DA               	addwfc	fsr2h,f,c
 12030  001716  0EFF               	movlw	255
 12031  001718  16DE               	andwf	postinc2,f,c
 12032  00171A  0E00               	movlw	0
 12033  00171C  16DD               	andwf	postdec2,f,c
 12034  00171E  0012               	return	
 12035  001720                     __end_of_button_timer_interrupt:
 12036                           	opt stack 0
 12037                           pclatu	equ	0xFFB
 12038                           pclath	equ	0xFFA
 12039                           tblptru	equ	0xFF8
 12040                           tblptrh	equ	0xFF7
 12041                           tblptrl	equ	0xFF6
 12042                           tablat	equ	0xFF5
 12043                           prodh	equ	0xFF4
 12044                           prodl	equ	0xFF3
 12045                           intcon	equ	0xFF2
 12046                           intcon2	equ	0xFF1
 12047                           indf0	equ	0xFEF
 12048                           postinc0	equ	0xFEE
 12049                           fsr0h	equ	0xFEA
 12050                           fsr0l	equ	0xFE9
 12051                           wreg	equ	0xFE8
 12052                           fsr1h	equ	0xFE2
 12053                           fsr1l	equ	0xFE1
 12054                           indf2	equ	0xFDF
 12055                           postinc2	equ	0xFDE
 12056                           postdec2	equ	0xFDD
 12057                           plusw2	equ	0xFDB
 12058                           fsr2h	equ	0xFDA
 12059                           fsr2l	equ	0xFD9
 12060                           status	equ	0xFD8
 12061                           
 12062 ;; *************** function _UART_ISR *****************
 12063 ;; Defined at:
 12064 ;;		line 208 in file "../My_header\My_header.h"
 12065 ;; Parameters:    Size  Location     Type
 12066 ;;		None
 12067 ;; Auto vars:     Size  Location     Type
 12068 ;;  ascii           1   15[COMRAM] unsigned char 
 12069 ;; Return value:  Size  Location     Type
 12070 ;;		None               void
 12071 ;; Registers used:
 12072 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12073 ;; Tracked objects:
 12074 ;;		On entry : 0/0
 12075 ;;		On exit  : 0/0
 12076 ;;		Unchanged: 0/0
 12077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12079 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12081 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12082 ;;Total ram usage:        1 bytes
 12083 ;; Hardware stack levels used:    1
 12084 ;; Hardware stack levels required when called:    2
 12085 ;; This function calls:
 12086 ;;		_ringbuf_num
 12087 ;;		_ringbuf_pop
 12088 ;;		_ringbuf_put
 12089 ;; This function is called by:
 12090 ;;		_ISR
 12091 ;; This function uses a non-reentrant model
 12092 ;;
 12093                           
 12094                           	psect	text68
 12095  003518                     __ptext68:
 12096                           	opt stack 0
 12097  003518                     _UART_ISR:
 12098                           	opt stack 21
 12099                           
 12100                           ;My_header\My_header.h: 209: if (PIE1bits.TXIE && PIR1bits.TXIF) {
 12101                           
 12102                           ;incstack = 0
 12103  003518  B89D               	btfsc	3997,4,c	;volatile
 12104  00351A  A89E               	btfss	3998,4,c	;volatile
 12105  00351C  D013               	goto	i2l209
 12106                           
 12107                           ;My_header\My_header.h: 210: if (ringbuf_num(&tx_buf)) {
 12108  00351E  0EC8               	movlw	low _tx_buf
 12109  003520  6E01               	movwf	ringbuf_num@rb,c
 12110  003522  0E01               	movlw	high _tx_buf
 12111  003524  6E02               	movwf	ringbuf_num@rb+1,c
 12112  003526  EC97  F015         	call	_ringbuf_num	;wreg free
 12113  00352A  5001               	movf	?_ringbuf_num,w,c
 12114  00352C  1002               	iorwf	?_ringbuf_num+1,w,c
 12115  00352E  B4D8               	btfsc	status,2,c
 12116  003530  D008               	goto	i2l210
 12117                           
 12118                           ;My_header\My_header.h: 211: TXREG1 = ringbuf_pop(&tx_buf);
 12119  003532  0EC8               	movlw	low _tx_buf
 12120  003534  6E09               	movwf	ringbuf_pop@rb,c
 12121  003536  0E01               	movlw	high _tx_buf
 12122  003538  6E0A               	movwf	ringbuf_pop@rb+1,c
 12123  00353A  ECAB  F016         	call	_ringbuf_pop	;wreg free
 12124  00353E  6EAE               	movwf	4014,c	;volatile
 12125                           
 12126                           ;My_header\My_header.h: 212: } else {
 12127  003540  D001               	goto	i2l209
 12128  003542                     i2l210:
 12129                           
 12130                           ;My_header\My_header.h: 213: PIE1bits.TXIE = 0;
 12131  003542  989D               	bcf	3997,4,c	;volatile
 12132  003544                     i2l209:
 12133                           
 12134                           ;My_header\My_header.h: 214: }
 12135                           ;My_header\My_header.h: 215: }
 12136                           ;My_header\My_header.h: 216: if (PIR1bits.RCIF && PIE1bits.RCIE) {
 12137  003544  AA9E               	btfss	3998,5,c	;volatile
 12138  003546  0012               	return	
 12139  003548  AA9D               	btfss	3997,5,c	;volatile
 12140  00354A  0012               	return	
 12141                           
 12142                           ;My_header\My_header.h: 217: char ascii = RCREG1;
 12143  00354C  CFAF F010          	movff	4015,UART_ISR@ascii	;volatile
 12144                           
 12145                           ;My_header\My_header.h: 218: ringbuf_put(&rx_buf, ascii);
 12146  003550  0E95               	movlw	low _rx_buf
 12147  003552  6E09               	movwf	ringbuf_put@rb,c
 12148  003554  0E00               	movlw	high _rx_buf
 12149  003556  6E0A               	movwf	ringbuf_put@rb+1,c
 12150  003558  C010  F00B         	movff	UART_ISR@ascii,ringbuf_put@asciicode
 12151  00355C  EC50  F016         	call	_ringbuf_put	;wreg free
 12152  003560  0012               	return	
 12153  003562                     __end_of_UART_ISR:
 12154                           	opt stack 0
 12155                           pclatu	equ	0xFFB
 12156                           pclath	equ	0xFFA
 12157                           tblptru	equ	0xFF8
 12158                           tblptrh	equ	0xFF7
 12159                           tblptrl	equ	0xFF6
 12160                           tablat	equ	0xFF5
 12161                           prodh	equ	0xFF4
 12162                           prodl	equ	0xFF3
 12163                           intcon	equ	0xFF2
 12164                           intcon2	equ	0xFF1
 12165                           indf0	equ	0xFEF
 12166                           postinc0	equ	0xFEE
 12167                           fsr0h	equ	0xFEA
 12168                           fsr0l	equ	0xFE9
 12169                           wreg	equ	0xFE8
 12170                           fsr1h	equ	0xFE2
 12171                           fsr1l	equ	0xFE1
 12172                           indf2	equ	0xFDF
 12173                           postinc2	equ	0xFDE
 12174                           postdec2	equ	0xFDD
 12175                           plusw2	equ	0xFDB
 12176                           fsr2h	equ	0xFDA
 12177                           fsr2l	equ	0xFD9
 12178                           status	equ	0xFD8
 12179                           
 12180 ;; *************** function _ringbuf_put *****************
 12181 ;; Defined at:
 12182 ;;		line 39 in file "../My_header\My_ringbuf.h"
 12183 ;; Parameters:    Size  Location     Type
 12184 ;;  rb              2    8[COMRAM] PTR struct ringbuf
 12185 ;;		 -> rx_buf(8), tx_buf(8), 
 12186 ;;  asciicode       1   10[COMRAM] unsigned char 
 12187 ;; Auto vars:     Size  Location     Type
 12188 ;;		None
 12189 ;; Return value:  Size  Location     Type
 12190 ;;		None               void
 12191 ;; Registers used:
 12192 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12193 ;; Tracked objects:
 12194 ;;		On entry : 0/0
 12195 ;;		On exit  : 0/0
 12196 ;;		Unchanged: 0/0
 12197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12198 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12200 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12201 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12202 ;;Total ram usage:        7 bytes
 12203 ;; Hardware stack levels used:    1
 12204 ;; Hardware stack levels required when called:    1
 12205 ;; This function calls:
 12206 ;;		_ringbuf_num
 12207 ;; This function is called by:
 12208 ;;		_UART_ISR
 12209 ;;		_tx_send
 12210 ;;		_ringbuf_put_num
 12211 ;;		_ringbuf_put_str
 12212 ;;		_tx_sends
 12213 ;; This function uses a non-reentrant model
 12214 ;;
 12215                           
 12216                           	psect	text69
 12217  002CA0                     __ptext69:
 12218                           	opt stack 0
 12219  002CA0                     _ringbuf_put:
 12220                           	opt stack 21
 12221                           
 12222                           ;My_header\My_ringbuf.h: 40: if (ringbuf_num(rb) < rb->size) {
 12223                           
 12224                           ;incstack = 0
 12225  002CA0  C009  F001         	movff	ringbuf_put@rb,ringbuf_num@rb
 12226  002CA4  C00A  F002         	movff	ringbuf_put@rb+1,ringbuf_num@rb+1
 12227  002CA8  EC97  F015         	call	_ringbuf_num	;wreg free
 12228  002CAC  EE20 F002          	lfsr	2,2
 12229  002CB0  5009               	movf	ringbuf_put@rb,w,c
 12230  002CB2  26D9               	addwf	fsr2l,f,c
 12231  002CB4  500A               	movf	ringbuf_put@rb+1,w,c
 12232  002CB6  22DA               	addwfc	fsr2h,f,c
 12233  002CB8  50DE               	movf	postinc2,w,c
 12234  002CBA  5C01               	subwf	?_ringbuf_num,w,c
 12235  002CBC  50DE               	movf	postinc2,w,c
 12236  002CBE  5802               	subwfb	?_ringbuf_num+1,w,c
 12237  002CC0  B0D8               	btfsc	status,0,c
 12238  002CC2  0012               	return	
 12239                           
 12240                           ;My_header\My_ringbuf.h: 41: rb->buf[rb->head] = asciicode;
 12241  002CC4  EE20 F004          	lfsr	2,4
 12242  002CC8  5009               	movf	ringbuf_put@rb,w,c
 12243  002CCA  26D9               	addwf	fsr2l,f,c
 12244  002CCC  500A               	movf	ringbuf_put@rb+1,w,c
 12245  002CCE  22DA               	addwfc	fsr2h,f,c
 12246  002CD0  CFDE F00C          	movff	postinc2,??_ringbuf_put
 12247  002CD4  CFDD F00D          	movff	postdec2,??_ringbuf_put+1
 12248  002CD8  C009  FFD9         	movff	ringbuf_put@rb,fsr2l
 12249  002CDC  C00A  FFDA         	movff	ringbuf_put@rb+1,fsr2h
 12250  002CE0  CFDE F00E          	movff	postinc2,??_ringbuf_put+2
 12251  002CE4  CFDD F00F          	movff	postdec2,??_ringbuf_put+3
 12252  002CE8  500C               	movf	??_ringbuf_put,w,c
 12253  002CEA  240E               	addwf	??_ringbuf_put+2,w,c
 12254  002CEC  6ED9               	movwf	fsr2l,c
 12255  002CEE  500D               	movf	??_ringbuf_put+1,w,c
 12256  002CF0  200F               	addwfc	??_ringbuf_put+3,w,c
 12257  002CF2  6EDA               	movwf	fsr2h,c
 12258  002CF4  C00B  FFDF         	movff	ringbuf_put@asciicode,indf2
 12259                           
 12260                           ;My_header\My_ringbuf.h: 42: if (rb->head + 1 < rb->size) rb->head++;
 12261  002CF8  EE20 F002          	lfsr	2,2
 12262  002CFC  5009               	movf	ringbuf_put@rb,w,c
 12263  002CFE  26D9               	addwf	fsr2l,f,c
 12264  002D00  500A               	movf	ringbuf_put@rb+1,w,c
 12265  002D02  22DA               	addwfc	fsr2h,f,c
 12266  002D04  EE10 F004          	lfsr	1,4
 12267  002D08  5009               	movf	ringbuf_put@rb,w,c
 12268  002D0A  26E1               	addwf	fsr1l,f,c
 12269  002D0C  500A               	movf	ringbuf_put@rb+1,w,c
 12270  002D0E  22E2               	addwfc	fsr1h,f,c
 12271  002D10  CFE6 F00E          	movff	postinc1,??_ringbuf_put+2
 12272  002D14  CFE5 F00F          	movff	postdec1,??_ringbuf_put+3
 12273  002D18  0E01               	movlw	1
 12274  002D1A  260E               	addwf	??_ringbuf_put+2,f,c
 12275  002D1C  0E00               	movlw	0
 12276  002D1E  220F               	addwfc	??_ringbuf_put+3,f,c
 12277  002D20  50DE               	movf	postinc2,w,c
 12278  002D22  5C0E               	subwf	??_ringbuf_put+2,w,c
 12279  002D24  50DE               	movf	postinc2,w,c
 12280  002D26  580F               	subwfb	??_ringbuf_put+3,w,c
 12281  002D28  B0D8               	btfsc	status,0,c
 12282  002D2A  D00A               	goto	i2l3559
 12283  002D2C  EE20 F004          	lfsr	2,4
 12284  002D30  5009               	movf	ringbuf_put@rb,w,c
 12285  002D32  26D9               	addwf	fsr2l,f,c
 12286  002D34  500A               	movf	ringbuf_put@rb+1,w,c
 12287  002D36  22DA               	addwfc	fsr2h,f,c
 12288  002D38  2ADE               	incf	postinc2,f,c
 12289  002D3A  0E00               	movlw	0
 12290  002D3C  22DD               	addwfc	postdec2,f,c
 12291  002D3E  0012               	return	
 12292  002D40                     i2l3559:
 12293                           
 12294                           ;My_header\My_ringbuf.h: 43: else rb->head = 0;
 12295  002D40  EE20 F004          	lfsr	2,4
 12296  002D44  5009               	movf	ringbuf_put@rb,w,c
 12297  002D46  26D9               	addwf	fsr2l,f,c
 12298  002D48  500A               	movf	ringbuf_put@rb+1,w,c
 12299  002D4A  22DA               	addwfc	fsr2h,f,c
 12300  002D4C  0E00               	movlw	0
 12301  002D4E  6EDE               	movwf	postinc2,c
 12302  002D50  0E00               	movlw	0
 12303  002D52  6EDD               	movwf	postdec2,c
 12304  002D54  0012               	return	
 12305  002D56                     __end_of_ringbuf_put:
 12306                           	opt stack 0
 12307                           pclatu	equ	0xFFB
 12308                           pclath	equ	0xFFA
 12309                           tblptru	equ	0xFF8
 12310                           tblptrh	equ	0xFF7
 12311                           tblptrl	equ	0xFF6
 12312                           tablat	equ	0xFF5
 12313                           prodh	equ	0xFF4
 12314                           prodl	equ	0xFF3
 12315                           intcon	equ	0xFF2
 12316                           intcon2	equ	0xFF1
 12317                           indf0	equ	0xFEF
 12318                           postinc0	equ	0xFEE
 12319                           fsr0h	equ	0xFEA
 12320                           fsr0l	equ	0xFE9
 12321                           wreg	equ	0xFE8
 12322                           postinc1	equ	0xFE6
 12323                           postdec1	equ	0xFE5
 12324                           fsr1h	equ	0xFE2
 12325                           fsr1l	equ	0xFE1
 12326                           indf2	equ	0xFDF
 12327                           postinc2	equ	0xFDE
 12328                           postdec2	equ	0xFDD
 12329                           plusw2	equ	0xFDB
 12330                           fsr2h	equ	0xFDA
 12331                           fsr2l	equ	0xFD9
 12332                           status	equ	0xFD8
 12333                           
 12334 ;; *************** function _ringbuf_pop *****************
 12335 ;; Defined at:
 12336 ;;		line 64 in file "../My_header\My_ringbuf.h"
 12337 ;; Parameters:    Size  Location     Type
 12338 ;;  rb              2    8[COMRAM] PTR struct ringbuf
 12339 ;;		 -> tx_buf(8), 
 12340 ;; Auto vars:     Size  Location     Type
 12341 ;;  ret             1   14[COMRAM] unsigned char 
 12342 ;; Return value:  Size  Location     Type
 12343 ;;                  1    wreg      unsigned char 
 12344 ;; Registers used:
 12345 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12346 ;; Tracked objects:
 12347 ;;		On entry : 0/0
 12348 ;;		On exit  : 0/0
 12349 ;;		Unchanged: 0/0
 12350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12351 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12352 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12353 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12354 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12355 ;;Total ram usage:        7 bytes
 12356 ;; Hardware stack levels used:    1
 12357 ;; Hardware stack levels required when called:    1
 12358 ;; This function calls:
 12359 ;;		_ringbuf_num
 12360 ;; This function is called by:
 12361 ;;		_UART_ISR
 12362 ;; This function uses a non-reentrant model
 12363 ;;
 12364                           
 12365                           	psect	text70
 12366  002D56                     __ptext70:
 12367                           	opt stack 0
 12368  002D56                     _ringbuf_pop:
 12369                           	opt stack 21
 12370                           
 12371                           ;My_header\My_ringbuf.h: 65: if (ringbuf_num(rb)) {
 12372                           
 12373                           ;incstack = 0
 12374  002D56  C009  F001         	movff	ringbuf_pop@rb,ringbuf_num@rb
 12375  002D5A  C00A  F002         	movff	ringbuf_pop@rb+1,ringbuf_num@rb+1
 12376  002D5E  EC97  F015         	call	_ringbuf_num	;wreg free
 12377  002D62  5001               	movf	?_ringbuf_num,w,c
 12378  002D64  1002               	iorwf	?_ringbuf_num+1,w,c
 12379  002D66  B4D8               	btfsc	status,2,c
 12380  002D68  D04A               	goto	i2l3577
 12381                           
 12382                           ;My_header\My_ringbuf.h: 66: char ret = rb->buf[rb->tail];
 12383  002D6A  EE20 F006          	lfsr	2,6
 12384  002D6E  5009               	movf	ringbuf_pop@rb,w,c
 12385  002D70  26D9               	addwf	fsr2l,f,c
 12386  002D72  500A               	movf	ringbuf_pop@rb+1,w,c
 12387  002D74  22DA               	addwfc	fsr2h,f,c
 12388  002D76  CFDE F00B          	movff	postinc2,??_ringbuf_pop
 12389  002D7A  CFDD F00C          	movff	postdec2,??_ringbuf_pop+1
 12390  002D7E  C009  FFD9         	movff	ringbuf_pop@rb,fsr2l
 12391  002D82  C00A  FFDA         	movff	ringbuf_pop@rb+1,fsr2h
 12392  002D86  CFDE F00D          	movff	postinc2,??_ringbuf_pop+2
 12393  002D8A  CFDD F00E          	movff	postdec2,??_ringbuf_pop+3
 12394  002D8E  500B               	movf	??_ringbuf_pop,w,c
 12395  002D90  240D               	addwf	??_ringbuf_pop+2,w,c
 12396  002D92  6ED9               	movwf	fsr2l,c
 12397  002D94  500C               	movf	??_ringbuf_pop+1,w,c
 12398  002D96  200E               	addwfc	??_ringbuf_pop+3,w,c
 12399  002D98  6EDA               	movwf	fsr2h,c
 12400  002D9A  50DF               	movf	indf2,w,c
 12401  002D9C  6E0F               	movwf	ringbuf_pop@ret,c
 12402                           
 12403                           ;My_header\My_ringbuf.h: 67: if (rb->tail + 1 < rb->size) {
 12404  002D9E  EE20 F002          	lfsr	2,2
 12405  002DA2  5009               	movf	ringbuf_pop@rb,w,c
 12406  002DA4  26D9               	addwf	fsr2l,f,c
 12407  002DA6  500A               	movf	ringbuf_pop@rb+1,w,c
 12408  002DA8  22DA               	addwfc	fsr2h,f,c
 12409  002DAA  EE10 F006          	lfsr	1,6
 12410  002DAE  5009               	movf	ringbuf_pop@rb,w,c
 12411  002DB0  26E1               	addwf	fsr1l,f,c
 12412  002DB2  500A               	movf	ringbuf_pop@rb+1,w,c
 12413  002DB4  22E2               	addwfc	fsr1h,f,c
 12414  002DB6  CFE6 F00D          	movff	postinc1,??_ringbuf_pop+2
 12415  002DBA  CFE5 F00E          	movff	postdec1,??_ringbuf_pop+3
 12416  002DBE  0E01               	movlw	1
 12417  002DC0  260D               	addwf	??_ringbuf_pop+2,f,c
 12418  002DC2  0E00               	movlw	0
 12419  002DC4  220E               	addwfc	??_ringbuf_pop+3,f,c
 12420  002DC6  50DE               	movf	postinc2,w,c
 12421  002DC8  5C0D               	subwf	??_ringbuf_pop+2,w,c
 12422  002DCA  50DE               	movf	postinc2,w,c
 12423  002DCC  580E               	subwfb	??_ringbuf_pop+3,w,c
 12424  002DCE  B0D8               	btfsc	status,0,c
 12425  002DD0  D00A               	goto	i2l3569
 12426                           
 12427                           ;My_header\My_ringbuf.h: 68: rb->tail++;
 12428  002DD2  EE20 F006          	lfsr	2,6
 12429  002DD6  5009               	movf	ringbuf_pop@rb,w,c
 12430  002DD8  26D9               	addwf	fsr2l,f,c
 12431  002DDA  500A               	movf	ringbuf_pop@rb+1,w,c
 12432  002DDC  22DA               	addwfc	fsr2h,f,c
 12433  002DDE  2ADE               	incf	postinc2,f,c
 12434  002DE0  0E00               	movlw	0
 12435  002DE2  22DD               	addwfc	postdec2,f,c
 12436                           
 12437                           ;My_header\My_ringbuf.h: 69: } else {
 12438  002DE4  D00A               	goto	i2l3571
 12439  002DE6                     i2l3569:
 12440                           
 12441                           ;My_header\My_ringbuf.h: 70: rb->tail = 0;
 12442  002DE6  EE20 F006          	lfsr	2,6
 12443  002DEA  5009               	movf	ringbuf_pop@rb,w,c
 12444  002DEC  26D9               	addwf	fsr2l,f,c
 12445  002DEE  500A               	movf	ringbuf_pop@rb+1,w,c
 12446  002DF0  22DA               	addwfc	fsr2h,f,c
 12447  002DF2  0E00               	movlw	0
 12448  002DF4  6EDE               	movwf	postinc2,c
 12449  002DF6  0E00               	movlw	0
 12450  002DF8  6EDD               	movwf	postdec2,c
 12451  002DFA                     i2l3571:
 12452                           
 12453                           ;My_header\My_ringbuf.h: 71: }
 12454                           ;My_header\My_ringbuf.h: 72: return ret;
 12455  002DFA  500F               	movf	ringbuf_pop@ret,w,c
 12456                           
 12457                           ;My_header\My_ringbuf.h: 73: } else {
 12458  002DFC  0012               	return	
 12459  002DFE                     i2l3577:
 12460                           
 12461                           ;My_header\My_ringbuf.h: 74: return 0;
 12462  002DFE  0E00               	movlw	0
 12463  002E00  0012               	return	
 12464  002E02                     __end_of_ringbuf_pop:
 12465                           	opt stack 0
 12466                           pclatu	equ	0xFFB
 12467                           pclath	equ	0xFFA
 12468                           tblptru	equ	0xFF8
 12469                           tblptrh	equ	0xFF7
 12470                           tblptrl	equ	0xFF6
 12471                           tablat	equ	0xFF5
 12472                           prodh	equ	0xFF4
 12473                           prodl	equ	0xFF3
 12474                           intcon	equ	0xFF2
 12475                           intcon2	equ	0xFF1
 12476                           indf0	equ	0xFEF
 12477                           postinc0	equ	0xFEE
 12478                           fsr0h	equ	0xFEA
 12479                           fsr0l	equ	0xFE9
 12480                           wreg	equ	0xFE8
 12481                           postinc1	equ	0xFE6
 12482                           postdec1	equ	0xFE5
 12483                           fsr1h	equ	0xFE2
 12484                           fsr1l	equ	0xFE1
 12485                           indf2	equ	0xFDF
 12486                           postinc2	equ	0xFDE
 12487                           postdec2	equ	0xFDD
 12488                           plusw2	equ	0xFDB
 12489                           fsr2h	equ	0xFDA
 12490                           fsr2l	equ	0xFD9
 12491                           status	equ	0xFD8
 12492                           
 12493 ;; *************** function _ringbuf_num *****************
 12494 ;; Defined at:
 12495 ;;		line 31 in file "../My_header\My_ringbuf.h"
 12496 ;; Parameters:    Size  Location     Type
 12497 ;;  rb              2    0[COMRAM] PTR struct ringbuf
 12498 ;;		 -> rx_buf(8), tx_buf(8), 
 12499 ;; Auto vars:     Size  Location     Type
 12500 ;;		None
 12501 ;; Return value:  Size  Location     Type
 12502 ;;                  2    0[COMRAM] unsigned int 
 12503 ;; Registers used:
 12504 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 12505 ;; Tracked objects:
 12506 ;;		On entry : 0/0
 12507 ;;		On exit  : 0/0
 12508 ;;		Unchanged: 0/0
 12509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12510 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12512 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12513 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12514 ;;Total ram usage:        8 bytes
 12515 ;; Hardware stack levels used:    1
 12516 ;; This function calls:
 12517 ;;		Nothing
 12518 ;; This function is called by:
 12519 ;;		_ringbuf_put
 12520 ;;		_ringbuf_pop
 12521 ;;		_UART_ISR
 12522 ;;		_ringbuf_backspace
 12523 ;; This function uses a non-reentrant model
 12524 ;;
 12525                           
 12526                           	psect	text71
 12527  002B2E                     __ptext71:
 12528                           	opt stack 0
 12529  002B2E                     _ringbuf_num:
 12530                           	opt stack 21
 12531                           
 12532                           ;My_header\My_ringbuf.h: 32: if (rb->head >= rb->tail) {
 12533                           
 12534                           ;incstack = 0
 12535  002B2E  EE20 F006          	lfsr	2,6
 12536  002B32  5001               	movf	ringbuf_num@rb,w,c
 12537  002B34  26D9               	addwf	fsr2l,f,c
 12538  002B36  5002               	movf	ringbuf_num@rb+1,w,c
 12539  002B38  22DA               	addwfc	fsr2h,f,c
 12540  002B3A  EE10 F004          	lfsr	1,4
 12541  002B3E  5001               	movf	ringbuf_num@rb,w,c
 12542  002B40  26E1               	addwf	fsr1l,f,c
 12543  002B42  5002               	movf	ringbuf_num@rb+1,w,c
 12544  002B44  22E2               	addwfc	fsr1h,f,c
 12545  002B46  50DE               	movf	postinc2,w,c
 12546  002B48  5CE6               	subwf	postinc1,w,c
 12547  002B4A  50DE               	movf	postinc2,w,c
 12548  002B4C  58E6               	subwfb	postinc1,w,c
 12549  002B4E  A0D8               	btfss	status,0,c
 12550  002B50  D01F               	goto	i2l3427
 12551                           
 12552                           ;My_header\My_ringbuf.h: 33: return (rb->head - rb->tail);
 12553  002B52  EE20 F004          	lfsr	2,4
 12554  002B56  5001               	movf	ringbuf_num@rb,w,c
 12555  002B58  26D9               	addwf	fsr2l,f,c
 12556  002B5A  5002               	movf	ringbuf_num@rb+1,w,c
 12557  002B5C  22DA               	addwfc	fsr2h,f,c
 12558  002B5E  CFDE F003          	movff	postinc2,??_ringbuf_num
 12559  002B62  CFDD F004          	movff	postdec2,??_ringbuf_num+1
 12560  002B66  EE20 F006          	lfsr	2,6
 12561  002B6A  5001               	movf	ringbuf_num@rb,w,c
 12562  002B6C  26D9               	addwf	fsr2l,f,c
 12563  002B6E  5002               	movf	ringbuf_num@rb+1,w,c
 12564  002B70  22DA               	addwfc	fsr2h,f,c
 12565  002B72  CFDE F005          	movff	postinc2,??_ringbuf_num+2
 12566  002B76  CFDD F006          	movff	postdec2,??_ringbuf_num+3
 12567  002B7A  1E05               	comf	??_ringbuf_num+2,f,c
 12568  002B7C  1E06               	comf	??_ringbuf_num+3,f,c
 12569  002B7E  4A05               	infsnz	??_ringbuf_num+2,f,c
 12570  002B80  2A06               	incf	??_ringbuf_num+3,f,c
 12571  002B82  5003               	movf	??_ringbuf_num,w,c
 12572  002B84  2405               	addwf	??_ringbuf_num+2,w,c
 12573  002B86  6E01               	movwf	?_ringbuf_num,c
 12574  002B88  5004               	movf	??_ringbuf_num+1,w,c
 12575  002B8A  2006               	addwfc	??_ringbuf_num+3,w,c
 12576  002B8C  6E02               	movwf	?_ringbuf_num+1,c
 12577                           
 12578                           ;My_header\My_ringbuf.h: 34: } else {
 12579  002B8E  0012               	return	
 12580  002B90                     i2l3427:
 12581                           
 12582                           ;My_header\My_ringbuf.h: 35: return (rb->size + rb->head - rb->tail);
 12583  002B90  EE20 F004          	lfsr	2,4
 12584  002B94  5001               	movf	ringbuf_num@rb,w,c
 12585  002B96  26D9               	addwf	fsr2l,f,c
 12586  002B98  5002               	movf	ringbuf_num@rb+1,w,c
 12587  002B9A  22DA               	addwfc	fsr2h,f,c
 12588  002B9C  CFDE F003          	movff	postinc2,??_ringbuf_num
 12589  002BA0  CFDD F004          	movff	postdec2,??_ringbuf_num+1
 12590  002BA4  EE20 F002          	lfsr	2,2
 12591  002BA8  5001               	movf	ringbuf_num@rb,w,c
 12592  002BAA  26D9               	addwf	fsr2l,f,c
 12593  002BAC  5002               	movf	ringbuf_num@rb+1,w,c
 12594  002BAE  22DA               	addwfc	fsr2h,f,c
 12595  002BB0  CFDE F005          	movff	postinc2,??_ringbuf_num+2
 12596  002BB4  CFDD F006          	movff	postdec2,??_ringbuf_num+3
 12597  002BB8  EE20 F006          	lfsr	2,6
 12598  002BBC  5001               	movf	ringbuf_num@rb,w,c
 12599  002BBE  26D9               	addwf	fsr2l,f,c
 12600  002BC0  5002               	movf	ringbuf_num@rb+1,w,c
 12601  002BC2  22DA               	addwfc	fsr2h,f,c
 12602  002BC4  CFDE F007          	movff	postinc2,??_ringbuf_num+4
 12603  002BC8  CFDD F008          	movff	postdec2,??_ringbuf_num+5
 12604  002BCC  1E07               	comf	??_ringbuf_num+4,f,c
 12605  002BCE  1E08               	comf	??_ringbuf_num+5,f,c
 12606  002BD0  4A07               	infsnz	??_ringbuf_num+4,f,c
 12607  002BD2  2A08               	incf	??_ringbuf_num+5,f,c
 12608  002BD4  5005               	movf	??_ringbuf_num+2,w,c
 12609  002BD6  2607               	addwf	??_ringbuf_num+4,f,c
 12610  002BD8  5006               	movf	??_ringbuf_num+3,w,c
 12611  002BDA  2208               	addwfc	??_ringbuf_num+5,f,c
 12612  002BDC  5003               	movf	??_ringbuf_num,w,c
 12613  002BDE  2407               	addwf	??_ringbuf_num+4,w,c
 12614  002BE0  6E01               	movwf	?_ringbuf_num,c
 12615  002BE2  5004               	movf	??_ringbuf_num+1,w,c
 12616  002BE4  2008               	addwfc	??_ringbuf_num+5,w,c
 12617  002BE6  6E02               	movwf	?_ringbuf_num+1,c
 12618  002BE8  0012               	return	
 12619  002BEA                     __end_of_ringbuf_num:
 12620                           	opt stack 0
 12621                           pclatu	equ	0xFFB
 12622                           pclath	equ	0xFFA
 12623                           tblptru	equ	0xFF8
 12624                           tblptrh	equ	0xFF7
 12625                           tblptrl	equ	0xFF6
 12626                           tablat	equ	0xFF5
 12627                           prodh	equ	0xFF4
 12628                           prodl	equ	0xFF3
 12629                           intcon	equ	0xFF2
 12630                           intcon2	equ	0xFF1
 12631                           indf0	equ	0xFEF
 12632                           postinc0	equ	0xFEE
 12633                           fsr0h	equ	0xFEA
 12634                           fsr0l	equ	0xFE9
 12635                           wreg	equ	0xFE8
 12636                           postinc1	equ	0xFE6
 12637                           postdec1	equ	0xFE5
 12638                           fsr1h	equ	0xFE2
 12639                           fsr1l	equ	0xFE1
 12640                           indf2	equ	0xFDF
 12641                           postinc2	equ	0xFDE
 12642                           postdec2	equ	0xFDD
 12643                           plusw2	equ	0xFDB
 12644                           fsr2h	equ	0xFDA
 12645                           fsr2l	equ	0xFD9
 12646                           status	equ	0xFD8
 12647                           pclatu	equ	0xFFB
 12648                           pclath	equ	0xFFA
 12649                           tblptru	equ	0xFF8
 12650                           tblptrh	equ	0xFF7
 12651                           tblptrl	equ	0xFF6
 12652                           tablat	equ	0xFF5
 12653                           prodh	equ	0xFF4
 12654                           prodl	equ	0xFF3
 12655                           intcon	equ	0xFF2
 12656                           intcon2	equ	0xFF1
 12657                           indf0	equ	0xFEF
 12658                           postinc0	equ	0xFEE
 12659                           fsr0h	equ	0xFEA
 12660                           fsr0l	equ	0xFE9
 12661                           wreg	equ	0xFE8
 12662                           postinc1	equ	0xFE6
 12663                           postdec1	equ	0xFE5
 12664                           fsr1h	equ	0xFE2
 12665                           fsr1l	equ	0xFE1
 12666                           indf2	equ	0xFDF
 12667                           postinc2	equ	0xFDE
 12668                           postdec2	equ	0xFDD
 12669                           plusw2	equ	0xFDB
 12670                           fsr2h	equ	0xFDA
 12671                           fsr2l	equ	0xFD9
 12672                           status	equ	0xFD8
 12673                           
 12674                           	psect	rparam
 12675  0000                     pclatu	equ	0xFFB
 12676                           pclath	equ	0xFFA
 12677                           tblptru	equ	0xFF8
 12678                           tblptrh	equ	0xFF7
 12679                           tblptrl	equ	0xFF6
 12680                           tablat	equ	0xFF5
 12681                           prodh	equ	0xFF4
 12682                           prodl	equ	0xFF3
 12683                           intcon	equ	0xFF2
 12684                           intcon2	equ	0xFF1
 12685                           indf0	equ	0xFEF
 12686                           postinc0	equ	0xFEE
 12687                           fsr0h	equ	0xFEA
 12688                           fsr0l	equ	0xFE9
 12689                           wreg	equ	0xFE8
 12690                           postinc1	equ	0xFE6
 12691                           postdec1	equ	0xFE5
 12692                           fsr1h	equ	0xFE2
 12693                           fsr1l	equ	0xFE1
 12694                           indf2	equ	0xFDF
 12695                           postinc2	equ	0xFDE
 12696                           postdec2	equ	0xFDD
 12697                           plusw2	equ	0xFDB
 12698                           fsr2h	equ	0xFDA
 12699                           fsr2l	equ	0xFD9
 12700                           status	equ	0xFD8
 12701                           
 12702                           	psect	temp
 12703  000040                     btemp:
 12704                           	opt stack 0
 12705  000040                     	ds	1
 12706  0000                     int$flags	set	btemp
 12707                           pclatu	equ	0xFFB
 12708                           pclath	equ	0xFFA
 12709                           tblptru	equ	0xFF8
 12710                           tblptrh	equ	0xFF7
 12711                           tblptrl	equ	0xFF6
 12712                           tablat	equ	0xFF5
 12713                           prodh	equ	0xFF4
 12714                           prodl	equ	0xFF3
 12715                           intcon	equ	0xFF2
 12716                           intcon2	equ	0xFF1
 12717                           indf0	equ	0xFEF
 12718                           postinc0	equ	0xFEE
 12719                           fsr0h	equ	0xFEA
 12720                           fsr0l	equ	0xFE9
 12721                           wreg	equ	0xFE8
 12722                           postinc1	equ	0xFE6
 12723                           postdec1	equ	0xFE5
 12724                           fsr1h	equ	0xFE2
 12725                           fsr1l	equ	0xFE1
 12726                           indf2	equ	0xFDF
 12727                           postinc2	equ	0xFDE
 12728                           postdec2	equ	0xFDD
 12729                           plusw2	equ	0xFDB
 12730                           fsr2h	equ	0xFDA
 12731                           fsr2l	equ	0xFD9
 12732                           status	equ	0xFD8


Data Sizes:
    Strings     91
    Constant    28
    Data        4
    BSS         115
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     33      63
    BANK0           160     70     151
    BANK1           256    200     208
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    RTCC_adjust_time_button@cnt_dec	PTR struct button size(2) Largest target is 4
		 -> sw1(COMRAM[4]), 

    RTCC_adjust_time_button@cnt_inc	PTR struct button size(2) Largest target is 4
		 -> sw0(COMRAM[4]), 

    RTCC_adjust_time_button@mode	PTR struct button size(2) Largest target is 4
		 -> sw(BANK0[4]), 

    RTCC_adjust_time_dec@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    RTCC_adjust_time_dec@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    RTCC_adjust_time_inc@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    RTCC_adjust_time_inc@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    display_time_0802@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    display_time_0802@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    my_utoa@str	PTR unsigned char  size(2) Largest target is 10
		 -> display_LCD@str(BANK0[10]), display_dec@str(BANK0[10]), 

    RTCC_from_epoch@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    RTCC_from_epoch@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    RTCC_from_RTCC@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    RTCC_from_RTCC@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    caltime_to_epoch@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    caltime_to_epoch@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    epoch_to_caltime@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    epoch_to_caltime@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    caltime_to_RTCC@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    RTCC_to_caltime@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    get_quot_rem@quot	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_to_caltime@num(BANK0[4]), 

    I2C_LCD_Puts@s	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_16(CODE[8]), STR_15(CODE[7]), STR_14(CODE[9]), STR_13(CODE[9]), 
		 -> STR_12(CODE[8]), STR_11(CODE[7]), STR_10(CODE[4]), display_LCD@str(BANK0[10]), 
		 -> STR_9(CODE[8]), STR_8(CODE[7]), STR_7(CODE[5]), STR_6(CODE[5]), 
		 -> STR_5(CODE[7]), STR_4(CODE[7]), STR_3(CODE[6]), STR_2(CODE[6]), 
		 -> weekday_3char(CODE[28]), STR_1(CODE[3]), display_dec@str(BANK0[10]), 

    button_timer_interrupt@bt	PTR struct button size(2) Largest target is 4
		 -> sw(BANK0[4]), sw2(BANK0[4]), sw1(COMRAM[4]), sw0(COMRAM[4]), 

    delay_set@d	PTR struct Delay size(2) Largest target is 3
		 -> d_display(COMRAM[3]), 

    delay_timer_interrupt@d	PTR struct Delay size(2) Largest target is 3
		 -> d_display(COMRAM[3]), 

    rx_buf.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@txbuf(BANK1[200]), 

    tx_buf.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@txbuf(BANK1[200]), 

    ringbuf_delete@rb.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@txbuf(BANK1[200]), 

    ringbuf_backspace@rb.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@txbuf(BANK1[200]), 

    ringbuf_pop@rb.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@txbuf(BANK1[200]), 

    ringbuf_pop@rb	PTR struct ringbuf size(2) Largest target is 9
		 -> tx_buf(BANK1[8]), 

    ringbuf_put@rb.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@txbuf(BANK1[200]), 

    ringbuf_put@rb	PTR struct ringbuf size(2) Largest target is 9
		 -> rx_buf(BANK0[8]), tx_buf(BANK1[8]), 

    ringbuf_num@rb.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@txbuf(BANK1[200]), 

    ringbuf_num@rb	PTR struct ringbuf size(2) Largest target is 9
		 -> rx_buf(BANK0[8]), tx_buf(BANK1[8]), 

    S790ringbuf$buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@txbuf(BANK1[200]), 

    ringbuf_init@rb.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@txbuf(BANK1[200]), 

    ringbuf_init@internal_buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@txbuf(BANK1[200]), 

    ringbuf_init@rb	PTR struct ringbuf size(2) Largest target is 9
		 -> tx_buf(BANK1[8]), 


Critical Paths under _main in COMRAM

    _main->_Delay_ms
    _main->_LED
    _main->_OUT
    _sleep_loop->_LED
    _sleep_loop->_OUT
    _nomal_mode_loop->_LED
    _nomal_mode_loop->_OUT
    _nomal_mode_loop->_sw_flag_clear
    _nomal_mode_loop->_sw_flag_read
    _main_init->_timer0_init
    _main_init->_timer1_init
    _main_init->_timer3_init
    _I2C_LCD_init->_Delay_ms
    _my_utoa->___lwmod
    ___lwdiv->___lwmod
    _I2C_Stop->_I2C_IdleCheck
    _I2C_Start->_I2C_IdleCheck
    _I2C_Send->_I2C_IdleCheck
    _caltime_to_RTCC->_d_to_x
    _month_length->___awmod
    _RTCC_to_caltime->_x_to_d
    _Auto_cut->_ADC
    _Auto_cut->_OUT
    ___wmul->_ADC

Critical Paths under _ISR in COMRAM

    _ISR->_UART_ISR
    _ISR->_integrating
    _ISR->_tx_send
    _tx_send->_ringbuf_put
    _lchika->i2___awdiv
    _integrating->i2___lldiv
    _UART_ISR->_ringbuf_pop
    _UART_ISR->_ringbuf_put
    _ringbuf_put->_ringbuf_num
    _ringbuf_pop->_ringbuf_num

Critical Paths under _main in BANK0

    _main->_RTCC_adjust_time_button
    _sleep_loop->_RTCC_from_RTCC
    _nomal_mode_loop->_delay_set
    _main_init->_ringbuf_init
    _I2C_LCD_init->_I2C_LCD_Clear
    _display_LCD->_display_time_0802
    _display_time_0802->_RTCC_from_RTCC
    _display_dec->_my_utoa
    _my_utoa->___lwdiv
    ___lwdiv->___lwmod
    _I2C_LCD_Putc->_I2C_Start
    _display_port->_I2C_LCD_SetCursor
    _I2C_LCD_SetCursor->_I2C_LCD_Command
    _I2C_LCD_Puts->_I2C_Start
    _I2C_LCD_Clear->_I2C_LCD_Command
    _I2C_LCD_Command->_I2C_Start
    _RTCC_loop->_RTCC_from_RTCC
    _RTCC_adjust_time_button->_RTCC_adjust_time_dec
    _RTCC_adjust_time_button->_RTCC_adjust_time_inc
    _RTCC_adjust_time_inc->_RTCC_from_epoch
    _RTCC_adjust_time_dec->_RTCC_from_epoch
    _RTCC_from_epoch->_epoch_to_caltime
    _epoch_to_caltime->_get_quot_rem
    _get_quot_rem->___lmul
    _d_to_x->___awdiv
    _RTCC_from_RTCC->_caltime_to_epoch
    _caltime_to_epoch->___lmul
    _month_length->___awmod
    ___lmul->___lldiv
    _Auto_cut->___wmul
    ___wmul->_ADC

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_main_init

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  121256
                                             69 BANK0      1     1      0
                           _Auto_cut
                           _Delay_ms
                      _I2C_LCD_Clear
                       _I2C_LCD_Puts
                  _I2C_LCD_SetCursor
                                _LED
                                _OUT
            _RTCC_adjust_time_button
                     _RTCC_from_RTCC
                          _RTCC_loop
                        _display_LCD
                          _main_init
                    _nomal_mode_loop
                         _sleep_loop
 ---------------------------------------------------------------------------------
 (1) _sleep_loop                                           2     2      0    8437
                                             44 BANK0      2     2      0
                                _LED
                                _OUT
                     _RTCC_from_RTCC
 ---------------------------------------------------------------------------------
 (1) _nomal_mode_loop                                      1     1      0    3637
                                              4 BANK0      1     1      0
                                _LED
                                _OUT
                          _delay_set
                      _sw_flag_clear
                       _sw_flag_read
 ---------------------------------------------------------------------------------
 (2) _sw_flag_read                                         2     1      1     644
                                             31 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _sw_flag_clear                                        2     1      1     540
                                             31 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _delay_set                                            4     0      4     509
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _LED                                                  2     1      1     747
                                             31 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _main_init                                          200   200      0    2500
                                              0 BANK1    200   200      0
                           _ADC_init
                       _I2C_LCD_init
                           _I2C_init
                          _RTCC_init
                          _UART_init
                       _ringbuf_init
                        _timer0_init
                        _timer1_init
                        _timer3_init
 ---------------------------------------------------------------------------------
 (2) _timer3_init                                          2     2      0      22
                                             31 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _timer1_init                                          3     2      1     197
                                             31 COMRAM     2     1      1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _timer0_init                                          2     2      0      44
                                             31 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ringbuf_init                                         6     0      6     498
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RTCC_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_LCD_init                                         0     0      0    1677
                           _Delay_ms
                      _I2C_LCD_Clear
                    _I2C_LCD_Command
 ---------------------------------------------------------------------------------
 (3) _Delay_ms                                             3     1      2     343
                                             31 COMRAM     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _display_LCD                                         10    10      0   40866
                                             49 BANK0     10    10      0
                      _I2C_LCD_Clear
                       _I2C_LCD_Putc
                       _I2C_LCD_Puts
                  _I2C_LCD_SetCursor
                            ___lwdiv
                            ___lwmod
                       _display_port
                  _display_time_0802
                            _my_utoa
 ---------------------------------------------------------------------------------
 (2) _display_time_0802                                    5     1      4   21690
                                             44 BANK0      5     1      4
                       _I2C_LCD_Putc
                       _I2C_LCD_Puts
                  _I2C_LCD_SetCursor
                     _RTCC_from_RTCC
                        _display_dec
 ---------------------------------------------------------------------------------
 (3) _display_dec                                         12    11      1    8508
                                             19 BANK0     12    11      1
                       _I2C_LCD_Puts
                            _my_utoa
 ---------------------------------------------------------------------------------
 (2) _my_utoa                                              8     3      5    4233
                                             11 BANK0      8     3      5
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4    1688
                                             31 COMRAM     1     1      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    1627
                                              4 BANK0      7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _I2C_LCD_Putc                                         2     2      0     667
                                              2 BANK0      2     2      0
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _display_port                                         0     0      0    5107
                       _I2C_LCD_Puts
                  _I2C_LCD_SetCursor
 ---------------------------------------------------------------------------------
 (3) _I2C_LCD_SetCursor                                    4     3      1    2326
                                              4 BANK0      4     3      1
                    _I2C_LCD_Command
 ---------------------------------------------------------------------------------
 (4) _I2C_LCD_Puts                                         5     3      2    2781
                                              2 BANK0      5     3      2
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _I2C_LCD_Clear                                        1     1      0     667
                                              4 BANK0      1     1      0
                    _I2C_LCD_Command
 ---------------------------------------------------------------------------------
 (3) _I2C_LCD_Command                                      2     2      0     667
                                              2 BANK0      2     2      0
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0      31
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            2     1      1     509
                                              0 BANK0      2     1      1
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (4) _I2C_Send                                             1     1      0      62
                                              0 BANK0      1     1      0
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (5) _I2C_IdleCheck                                        2     2      0      31
                                             31 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RTCC_loop                                            0     0      0    6921
                     _RTCC_from_RTCC
 ---------------------------------------------------------------------------------
 (1) _RTCC_adjust_time_button                              6     0      6   42843
                                             63 BANK0      6     0      6
            _RTCC_adjust_time_cursor
               _RTCC_adjust_time_dec
               _RTCC_adjust_time_inc
            _RTCC_adjust_time_toggle
 ---------------------------------------------------------------------------------
 (2) _RTCC_adjust_time_toggle                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RTCC_adjust_time_inc                                10     6      4   21095
                                             53 BANK0     10     6      4
                     _RTCC_from_RTCC
                    _RTCC_from_epoch
                             ___lmul
                       _month_length
 ---------------------------------------------------------------------------------
 (2) _RTCC_adjust_time_dec                                10     6      4   21095
                                             53 BANK0     10     6      4
                     _RTCC_from_RTCC
                    _RTCC_from_epoch
                             ___lmul
                       _month_length
 ---------------------------------------------------------------------------------
 (3) _RTCC_from_epoch                                      4     0      4    9237
                                             49 BANK0      4     0      4
                    _caltime_to_RTCC
                   _epoch_to_caltime
 ---------------------------------------------------------------------------------
 (4) _epoch_to_caltime                                    16    12      4    7450
                                             33 BANK0     16    12      4
                       _get_quot_rem
                       _month_length
 ---------------------------------------------------------------------------------
 (5) _get_quot_rem                                         8     4      4    3984
                                             25 BANK0      8     4      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             13     5      8    1003
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _caltime_to_RTCC                                      2     0      2    1278
                                              8 BANK0      2     0      2
                             _d_to_x
 ---------------------------------------------------------------------------------
 (5) _d_to_x                                               1     1      0     853
                                             31 COMRAM     1     1      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     791
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _RTCC_from_RTCC                                       4     0      4    6921
                                             40 BANK0      4     0      4
                    _RTCC_to_caltime
                   _caltime_to_epoch
 ---------------------------------------------------------------------------------
 (3) _caltime_to_epoch                                    15    11      4    4986
                                             25 BANK0     15    11      4
                             ___lmul
                       _month_length
 ---------------------------------------------------------------------------------
 (4) _month_length                                         6     5      1    2075
                                              4 BANK0      6     5      1
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     849
                                             31 COMRAM     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8    1960
                                             13 BANK0     12     4      8
                            ___lldiv (ARG)
                       _month_length (ARG)
 ---------------------------------------------------------------------------------
 (3) _RTCC_to_caltime                                      3     1      2     386
                                              0 BANK0      3     1      2
                             _x_to_d
 ---------------------------------------------------------------------------------
 (4) _x_to_d                                               2     2      0      62
                                             31 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _RTCC_adjust_time_cursor                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Auto_cut                                             3     3      0    1535
                                              8 BANK0      3     3      0
                                _ADC
                                _OUT
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     648
                                              2 BANK0      6     2      4
                                _ADC (ARG)
 ---------------------------------------------------------------------------------
 (2) _OUT                                                  2     1      1     540
                                             31 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ADC                                                  4     2      2      31
                                             31 COMRAM     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 15    15      0    7621
                                             16 COMRAM    15    15      0
                           _UART_ISR
             _button_timer_interrupt
              _delay_timer_interrupt
                        _integrating
                             _lchika
                            _tx_send
 ---------------------------------------------------------------------------------
 (8) _tx_send                                              1     1      0    1620
                                             15 COMRAM     1     1      0
                        _ringbuf_put
 ---------------------------------------------------------------------------------
 (8) _lchika                                               4     4      0    1020
                                              8 COMRAM     4     4      0
                              i2_LED
                          i2___awdiv
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (9) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (9) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (9) i2_LED                                                2     1      1     166
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (8) _integrating                                          3     3      0     348
                                             13 COMRAM     3     3      0
                          i2___lldiv
 ---------------------------------------------------------------------------------
 (9) i2___lldiv                                           13     5      8     214
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (8) _delay_timer_interrupt                                4     2      2     177
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _button_timer_interrupt                               5     2      3    1526
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (8) _UART_ISR                                             1     1      0    2907
                                             15 COMRAM     1     1      0
                        _ringbuf_num
                        _ringbuf_pop
                        _ringbuf_put
 ---------------------------------------------------------------------------------
 (9) _ringbuf_put                                          7     4      3    1598
                                              8 COMRAM     7     4      3
                        _ringbuf_num
 ---------------------------------------------------------------------------------
 (9) _ringbuf_pop                                          7     5      2     776
                                              8 COMRAM     7     5      2
                        _ringbuf_num
 ---------------------------------------------------------------------------------
 (10) _ringbuf_num                                         8     6      2     510
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Auto_cut
     _ADC
     _OUT
     ___wmul
       _ADC (ARG)
   _Delay_ms
   _I2C_LCD_Clear
     _I2C_LCD_Command
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
   _I2C_LCD_Puts
     _I2C_Send
       _I2C_IdleCheck
     _I2C_Start
       _I2C_IdleCheck
     _I2C_Stop
       _I2C_IdleCheck
   _I2C_LCD_SetCursor
     _I2C_LCD_Command
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
   _LED
   _OUT
   _RTCC_adjust_time_button
     _RTCC_adjust_time_cursor
     _RTCC_adjust_time_dec
       _RTCC_from_RTCC
         _RTCC_to_caltime
           _x_to_d
         _caltime_to_epoch
           ___lmul
             ___lldiv (ARG)
             _month_length (ARG)
               ___awmod
           _month_length
             ___awmod
       _RTCC_from_epoch
         _caltime_to_RTCC
           _d_to_x
             ___awdiv
         _epoch_to_caltime
           _get_quot_rem
             ___lldiv
             ___lmul
               ___lldiv (ARG)
               _month_length (ARG)
                 ___awmod
           _month_length
             ___awmod
       ___lmul
         ___lldiv (ARG)
         _month_length (ARG)
           ___awmod
       _month_length
         ___awmod
     _RTCC_adjust_time_inc
       _RTCC_from_RTCC
         _RTCC_to_caltime
           _x_to_d
         _caltime_to_epoch
           ___lmul
             ___lldiv (ARG)
             _month_length (ARG)
               ___awmod
           _month_length
             ___awmod
       _RTCC_from_epoch
         _caltime_to_RTCC
           _d_to_x
             ___awdiv
         _epoch_to_caltime
           _get_quot_rem
             ___lldiv
             ___lmul
               ___lldiv (ARG)
               _month_length (ARG)
                 ___awmod
           _month_length
             ___awmod
       ___lmul
         ___lldiv (ARG)
         _month_length (ARG)
           ___awmod
       _month_length
         ___awmod
     _RTCC_adjust_time_toggle
   _RTCC_from_RTCC
     _RTCC_to_caltime
       _x_to_d
     _caltime_to_epoch
       ___lmul
         ___lldiv (ARG)
         _month_length (ARG)
           ___awmod
       _month_length
         ___awmod
   _RTCC_loop
     _RTCC_from_RTCC
       _RTCC_to_caltime
         _x_to_d
       _caltime_to_epoch
         ___lmul
           ___lldiv (ARG)
           _month_length (ARG)
             ___awmod
         _month_length
           ___awmod
   _display_LCD
     _I2C_LCD_Clear
       _I2C_LCD_Command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     _I2C_LCD_Putc
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
     _I2C_LCD_Puts
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
     _I2C_LCD_SetCursor
       _I2C_LCD_Command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
     _display_port
       _I2C_LCD_Puts
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
       _I2C_LCD_SetCursor
         _I2C_LCD_Command
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
     _display_time_0802
       _I2C_LCD_Putc
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
       _I2C_LCD_Puts
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
       _I2C_LCD_SetCursor
         _I2C_LCD_Command
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
       _RTCC_from_RTCC
         _RTCC_to_caltime
           _x_to_d
         _caltime_to_epoch
           ___lmul
             ___lldiv (ARG)
             _month_length (ARG)
               ___awmod
           _month_length
             ___awmod
       _display_dec
         _I2C_LCD_Puts
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
         _my_utoa
           ___lwdiv
             ___lwmod (ARG)
           ___lwmod
     _my_utoa
       ___lwdiv
         ___lwmod (ARG)
       ___lwmod
   _main_init
     _ADC_init
     _I2C_LCD_init
       _Delay_ms
       _I2C_LCD_Clear
         _I2C_LCD_Command
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
       _I2C_LCD_Command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     _I2C_init
     _RTCC_init
     _UART_init
     _ringbuf_init
     _timer0_init
     _timer1_init
     _timer3_init
   _nomal_mode_loop
     _LED
     _OUT
     _delay_set
     _sw_flag_clear
     _sw_flag_read
   _sleep_loop
     _LED
     _OUT
     _RTCC_from_RTCC
       _RTCC_to_caltime
         _x_to_d
       _caltime_to_epoch
         ___lmul
           ___lldiv (ARG)
           _month_length (ARG)
             ___awmod
         _month_length
           ___awmod

 _ISR (ROOT)
   _UART_ISR
     _ringbuf_num
     _ringbuf_pop
       _ringbuf_num
     _ringbuf_put
       _ringbuf_num
   _button_timer_interrupt
   _delay_timer_interrupt
   _integrating
     i2___lldiv
   _lchika
     i2_LED
     i2___awdiv
     i2___lwdiv
   _tx_send
     _ringbuf_put
       _ringbuf_num

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EAF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     C8      D0       8       81.3%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     46      97       5       94.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     21      3F       1       67.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1A6       6        0.0%
DATA                 0      0     1A6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Wed Nov 11 14:23:39 2015

                               _I 0022                                 _S 0060  
                               _s 006C                      ?_display_LCD 0001  
              __size_of_I2C_Start 0030                      ?_display_dec 00C3  
                              _d1 0082                      ___awdiv@sign 00B5  
                              _ms 007E                                _sw 00A8  
             ___wmul@multiplicand 00B4                i2___lwdiv@dividend 0001  
               ??_RTCC_from_epoch 0022                      _sw_flag_read 37CE  
                    __CFG_CP0$OFF 000000                               l134 35CE  
                             l151 38AE                               l311 3850  
                             l129 3812                               l500 337A  
                             l405 2820                               l502 3388  
                             l326 3A26                               l335 378C  
                             _ADC 388E                               l504 3396  
                             l601 3638                               l506 33A4  
                             l418 1EBE                               l347 3754  
                             l603 3644                               l508 33B2  
                             l604 3650                               l447 2FC0  
                             l555 35F0                               l709 2994  
                             l399 2BEA                               l495 3A6C  
                             l593 3676                               l729 20D0  
                             l595 3682                               l596 368E  
                             _LED 3634                               _ISR 0008  
                             _OUT 3672                     ?_get_quot_rem 00C9  
                   ?_display_port 0001                caltime_to_epoch@ep 00CB  
              caltime_to_epoch@ct 00C9                               _sw0 0032  
                             _sw1 0036                               _sw2 00AC  
                   _sw_flag_clear 36EE                      ___awmod@sign 0021  
                             prod 000FF3                               wreg 000FE8  
                      _TXSTA1bits 000FAD       RTCC_adjust_time_button@mode 00EF  
         _RTCC_adjust_time_button 227A           _RTCC_adjust_time_cursor 336C  
                    _I2C_LCD_Putc 3728                      _I2C_LCD_Puts 2F30  
                            ?_ADC 0020               sw_flag_read@bit_and 0020  
         _RTCC_adjust_time_toggle 3A5C                              LED@b 0021  
                            ?_LED 0020                 ??_I2C_LCD_Command 0022  
                            ?_ISR 0001                              ?_OUT 0020  
                    _I2C_LCD_init 3472                              l1144 3232  
                            l1154 3362                              l1091 2B1C  
                            l5011 1236                              l5021 129A  
                            l5031 1322                              l5015 1240  
                            l5023 129E                              l5009 1230  
                            l5041 2FCE                              l5027 12BE  
                            l5203 18A2                              l5211 192E  
                            l5043 2FEC                              l5051 302C  
                            l5205 18AA                              l5215 1962  
                            l5311 3706                              l5303 37EA  
                            l5241 1A7E                              l5233 19EA  
                            l5225 19B2                              l5209 1916  
                            l5161 2236                              l5057 3910  
                            l3609 3876                              OUT@b 0021  
                            l5331 27D0                              l5323 2784  
                            l5163 223C                              l5059 3922  
                            l5307 36F2                              l5315 3712  
                            l4701 3274                              l5261 1B7C  
                            l5245 1A98                              l5237 1A08  
                            l5229 19CC                              l5181 1784  
                            l5173 174C                              l5325 2796  
                            l5093 340C                              l5421 0FBA  
                            l5309 36FC                              l5407 257C  
                            l5255 1B08                              l5263 1B94  
                            l5335 27F8                              l5319 275C  
                            l5423 0FD8                              l5415 0F80  
                            l3479 3826                              l5409 2596  
                            l3665 33C0                              l4713 29D0  
                            l5257 1B10                              l5193 1832  
                            l5185 17A2                              l5177 1766  
                            l5329 27BE                              l5281 365C  
                            l5521 1C58                              l5505 1BF2  
                            l5275 369A                              l4803 2B0A  
                            l5267 1BC8                              l5339 280A  
                            l5099 35D0                              l5523 1C5E  
                            l5603 292A                              l4725 2A04  
                            l4741 2A54                              l5197 183C  
                            l5189 1818                              l5373 235A  
                            l5461 119C                              l5293 37DE  
                            l5285 37D2                              l5541 1CF4  
                            l5509 1BFC                              l5613 2952  
                            l4727 2A10                              l4719 29E6  
                            l5367 2318                              l5359 22E6  
                            l4911 2F5E                              l5455 117A  
                            l5439 10F8                              l5551 1D34  
                            l5623 2982                              l5607 2934  
                            l5393 24A4                              l4761 2EC4  
                            l4745 2A68                              l4737 2A46  
                            l4729 2A16                              l5449 1158  
                            l5297 37E6                              l5289 37D8  
                            l5561 1D84                              l5529 1C82  
                            l5467 11BE                              l5475 11E0  
                            l5571 1DC0                              l5619 2978  
                            l5397 24AE                              l4781 2F26  
                            l4773 2F0A                              l4765 2ED6  
                            l4757 2EB4                              l4693 3A48  
                            l4917 2F90                              l5549 1D2E  
                            l5629 29A8                              l4767 2EE0  
                            l4791 2AA0                              l4919 2FB8  
                            l5567 1DBA                __CFG_WPFP$PAGE_127 000000  
                            l4697 324E                              l4769 2EE6  
                            l4777 2F16                              l4849 2626  
                            l4793 2AB0                              l4865 31E2  
                            l5841 203A                              l4795 2AB6  
                            l4867 31EE                              l4877 3224  
                            l4869 31F4                              l4893 3356  
                            l4885 3322                              l5845 2044  
                            l4991 1F34                              l4887 332C  
                            l5855 2092                              l4889 3332  
                            l5873 20CA                              l4995 1F3C  
                            l5883 20FA                              l4989 1F30  
                            l5869 20BC                              l5893 213C  
                            l5887 212A                              l5879 20E2  
                            STR_1 0F75                              STR_2 0F61  
                            STR_3 0F5B                              STR_4 0F54  
                            STR_5 0F46                              STR_6 0F6C  
                            STR_7 0F67                              STR_8 0F4D  
                            STR_9 0F37                              u3045 39EC  
                            u3046 39EE                              u5100 2602  
                            u5120 2618                              u5130 261A  
                            u5050 385C                              u5140 2672  
                            u5150 2674                              u5118 2606  
                            u5080 25D0                              u5240 2F80  
                            u5090 25D2                              u5250 2FB2  
                            u6050 28F8                              u5247 2F76  
                            u6056 28FA                              u5257 2FA8  
                            u5710 3640                              u5650 367E  
                            u5730 364C                              u6427 3918  
                            u6437 375A                              u5670 368A  
                            u5750 3658                              u6447 2F8C  
                            u6457 3A0A                              u5690 3696  
                            u6467 3792                              u5885 24D4  
                            _main 1FC4          button_timer_interrupt@bt 0001  
                            fsr0h 000FEA                              fsr1h 000FE2  
              i2___lwdiv@quotient 0005                              indf0 000FEF  
                            fsr0l 000FE9                              fsr2h 000FDA  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                  __end_of_I2C_Send 3A2E  
                            btemp 0040            __CFG_DSWDTOSC$T1OSCREF 000000  
                __end_of_I2C_Stop 3AA4                              pclat 000FFA  
                __end_of_I2C_init 3A9A                              prodh 000FF4  
                            prodl 000FF3                              start 0148  
                __end_of_ADC_init 39FC                     __CFG_IESO$OFF 000000  
      RTCC_adjust_time_dec@i_2231 00ED                      ___param_bank 000010  
                   _I2C_LCD_Clear 39FC                             ??_ADC 00B0  
                           ADC@ch 00B1                     ADC_init@p_ref 0020  
                           ??_LED 0021                             ??_ISR 0011  
          __size_of_I2C_IdleCheck 0016                             ??_OUT 0021  
               ??_RTCC_to_caltime 0022                     __CFG_PLLDIV$2 000000  
                    _BAUDCON1bits 000F7E                             ?_main 0001  
                  ??_get_quot_rem 0022                    ??_display_port 0022  
                 __end_of___awdiv 2A72                             _ADRES 000FC3  
                           STR_10 0F71                             STR_11 0F3F  
                           STR_12 0F2F                             STR_13 0F1D  
                           STR_14 0F26                             STR_15 0F4D  
                           STR_16 0F37                   __end_of___awmod 2F30  
                 __end_of___lldiv 2B2E                   ___awdiv@divisor 00B2  
                           _LATB2 007C52                             _LATA5 007C4D  
                           _LATC2 007C5A                             _LATA6 007C4E  
                           _LATA7 007C4F                             _LATB6 007C56  
                           _LATB7 007C57                   __end_of___lwdiv 323C  
                  ?_sw_flag_clear 0020                   __end_of___lwmod 336C  
                           i2l210 3542                             i2l209 3544  
                           i2l280 1590                             i2l281 15B0  
                           i2l601 36B4                             i2l274 14C8  
                           i2l275 14EC                             i2l603 36C0  
                           i2l276 150E                             i2l604 36CC  
                           i2l277 1530                             i2l278 1550  
                           i2l279 1570                             i2l722 010C  
                 ___awdiv@counter 00B4                             i2_LED 36B0  
                           _TMR1H 000FCF                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
        __size_of_nomal_mode_loop 01EC               ___lmul@multiplicand 00C1  
                  __CFG_FCMEN$OFF 000000                  __end_of_UART_ISR 3562  
            caltime_to_epoch@year 00D1                __size_of_UART_init 0020  
                           _colon 008E                __size_of_RTCC_init 002E  
              __size_of_RTCC_loop 0044                             main@i 00F5  
               __end_of_I2C_Start 3860                             tablat 000FF5  
                 __end_of_my_utoa 3046                             plusw2 000FDB  
          ?_delay_timer_interrupt 0001                      ?_integrating 0001  
                nomal_mode_loop@i 00B4                             status 000FD8  
                 __end_of_tx_send 3A88                  __end_of_Delay_ms 3934  
                  delay_set@value 00B2                __size_ofi2___awdiv 0084  
               month_length@month 00B4                __size_ofi2___lldiv 0082  
              __size_ofi2___lwdiv 0052                    ?_I2C_LCD_Clear 0001  
                 __initialization 32B2                 i2___lldiv@divisor 0005  
                    __end_of_main 2142                 i2___lldiv@counter 000D  
                __end_of_Auto_cut 259C               ringbuf_init@bufsize 00B4  
                RTCC_from_RTCC@ep 00DA                  RTCC_from_RTCC@ct 00D8  
      RTCC_adjust_time_inc@i_2218 00ED                            ??_main 0022  
                   __activetblptr 000003         ??_RTCC_adjust_time_button 0022  
       ??_RTCC_adjust_time_cursor 0020                            ?i2_LED 0001  
       ??_RTCC_adjust_time_toggle 0020                            _BCL1IF 007D0B  
                   _I2C_IdleCheck 3A46                 _I2C_LCD_SetCursor 38BC  
             display_time_0802@ep 00DE               display_time_0802@ct 00DC  
                          _EECON2 000FA7                            _ANCON0 000F48  
                          _ANCON1 000F49                  ___awdiv@dividend 00B0  
                          i2LED@b 0002                I2C_LCD_Command@ans 00B3  
                          i2l1144 350E                            i2l1091 313A  
                          i2l4001 1640                            i2l4013 16B0  
                          i2l4005 1664                            i2l4021 16FA  
                          i2l4017 16D6                            i2l4009 168A  
                  __CFG_WDTEN$OFF 000000                            i2l4071 23A2  
                          i2l3427 2B90                            i2l4075 23AA  
                          i2l4085 2454                            i2l4093 249A  
                          i2l4079 23DE                            i2l4185 2E06  
                          i2l3571 2DFA                            i2l4189 2E0E  
                          i2l3559 2D40                            i2l3903 30EC  
                          i2l4607 0098                            i2l3569 2DE6  
                          i2l3577 2DFE                            i2l3905 30F8  
                          i2l3915 312C                            i2l3907 30FC  
                          i2l3851 36D8                            i2l3861 305A  
                          i2l3925 34DC                            i2l3927 34E4  
                          i2l3873 3080                            i2l3937 3504  
                          i2l3929 34E8                            i2l3963 3582  
                          i2l3875 3088                            i2l3867 306A  
                          i2l4595 0082                            i2l4579 0058  
                          i2l3893 30C0                            i2l3885 30A8  
                          i2l3877 308C                            i2l4589 0070  
                          i2l4597 0088                            i2l3993 15F8  
                          i2l3889 30B2                            i2l3997 161C  
                          i2l3989 15D4                ?_I2C_LCD_SetCursor 00B4  
                          _RCREG1 000FAF                            _RTCCAL 000F3E  
                          _SPBRG1 000FB0                            _SSP1IF 007CF3  
                  __CFG_WPCFG$OFF 000000                 sw_flag_clear@port 0021  
                          _TXREG1 000FAE                    __CFG_WPDIS$OFF 000000  
              epoch_to_caltime@ep 00D3                epoch_to_caltime@ct 00D1  
             ??_I2C_LCD_SetCursor 0022                    __CFG_XINST$OFF 000000  
               ?_epoch_to_caltime 00D1             caltime_to_epoch@epoch 00D3  
                    ?_ringbuf_pop 0009                      ?_ringbuf_num 0001  
                    ?_ringbuf_put 0009             caltime_to_epoch@month 00D7  
                          ___lmul 323C                   _caltime_to_RTCC 2820  
                          ___wmul 3798                ??_epoch_to_caltime 00D5  
               __end_of_UART_init 39E0                         ??___awdiv 0020  
                       ??___awmod 0020      __end_of_RTCC_adjust_time_dec 1BEC  
    __end_of_RTCC_adjust_time_inc 1986                            _d_to_x 3958  
                       ??___lldiv 0020                      ?_timer0_init 0001  
               __end_of_RTCC_init 388E                      ?_timer1_init 0020  
                       ??___lwdiv 0021                 __end_of_RTCC_loop 3634  
                       ??___lwmod 0020                      ?_timer3_init 0001  
                          _lchika 239E                            clear_0 32B8  
                          clear_1 32C4                            clear_2 32D0  
                 __CFG_CLKOEC$OFF 000000                  ___awdiv@quotient 00B6  
                 ___awmod@divisor 00B2                   ??_sw_flag_clear 0021  
            __size_of_display_LCD 029C                   ___awmod@counter 0020  
                          _x_to_d 3A2E                            _rx_buf 0095  
                          _tx_buf 01C8              __size_of_display_dec 0056  
                  i2___awdiv@sign 0006         __size_of_caltime_to_epoch 0288  
                    __pdataCOMRAM 003D                 __end_ofi2___awdiv 30CA  
                       ?_I2C_Send 0001                         ?_I2C_Stop 0001  
               __end_ofi2___lldiv 314C                 __end_ofi2___lwdiv 3518  
                    __mediumconst 0000                         ?_I2C_init 0001  
       __end_of_I2C_LCD_SetCursor 38E8                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                       ?_ADC_init 0001                    ?_I2C_IdleCheck 0001  
                       ??_my_utoa 0021            delay_timer_interrupt@d 0001  
                       ??_tx_send 0010                 ??_nomal_mode_loop 0022  
  RTCC_adjust_time_button@cnt_dec 00F3              __CFG_LS48MHZ$SYS48X8 000000  
  RTCC_adjust_time_button@cnt_inc 00F1                        __accesstop 0060  
         __end_of__initialization 3306              __end_of_get_quot_rem 274E  
            __end_of_display_port 2820                     ___rparam_used 000001  
                 ??_I2C_LCD_Clear 00B4                   _RTCC_from_epoch 397C  
                   __end_ofi2_LED 36EE              __CFG_WPEND$PAGE_WPFP 000000  
                  __pcstackCOMRAM 0001                i2___lldiv@dividend 0001  
                    __pidataBANK0 3AA7                         ?_UART_ISR 0001  
                 __CFG_DSWDTPS$G2 000000                   _I2C_LCD_Command 3760  
              __size_of_delay_set 0024                           ??i2_LED 0002  
         sleep_loop@prev_power_sw 003F                  I2C_LCD_Command@c 00B2  
                      ??_I2C_Send 0022                        ??_I2C_Stop 0022  
                      ??_I2C_init 0020                         ?_Delay_ms 0020  
                      ??_ADC_init 0020        caltime_to_epoch@month_2136 00D2  
          RTCC_adjust_time_dec@ep 00E7            RTCC_adjust_time_dec@ct 00E5  
              i2___lldiv@quotient 0009            RTCC_adjust_time_inc@ep 00E7  
          RTCC_adjust_time_inc@ct 00E5                __size_of_main_init 0078  
                      __pbssBANK0 0060                        __pbssBANK1 01C8  
                       ?_Auto_cut 0001                         ISR@cnt_t0 002B  
         __end_of_caltime_to_RTCC 28F0                   _RTCC_to_caltime 2BEA  
            __size_of_integrating 009A             __end_of_weekday_3char 0F1D  
                         ?___lmul 00BD                        ??_UART_ISR 0010  
                         ?___wmul 00B2                           ?_d_to_x 0001  
                         ?_lchika 0001              I2C_LCD_SetCursor@col 00B7  
                  ___lmul@product 00C5              I2C_LCD_SetCursor@row 00B4  
                         ?_x_to_d 0001                      I2C_Send@data 00B0  
              __CFG_OSC$INTOSCPLL 000000                   ??_I2C_IdleCheck 0020  
                      ??_Delay_ms 00B0        __size_of_I2C_LCD_SetCursor 002C  
          I2C_LCD_SetCursor@F8672 003D                   __CFG_WDTPS$1024 000000  
                         _SPBRGH1 000F7F                           _SSP1ADD 000FC8  
                         _SSP1BUF 000FC9                           _RTCVALH 000F3B  
                         _RTCVALL 000F3A           ??_delay_timer_interrupt 0003  
         __end_of_RTCC_from_epoch 399E              timer1_init@prescaler 00B0  
            _RTCC_adjust_time_dec 1986              _RTCC_adjust_time_inc 1720  
                      ??_Auto_cut 00B8                  __CFG_CFGPLLEN$ON 000000  
        ??_button_timer_interrupt 0004                   integrating@port 0010  
               __end_of_delay_set 3958                     ?_month_length 00B4  
             epoch_to_caltime@day 00D9                 RTCC_from_epoch@ep 00E3  
               RTCC_from_epoch@ct 00E1               epoch_to_caltime@num 00DD  
                       _I2C_Start 3830                           __Hparam 0000  
                         __Lparam 0000           __end_of_I2C_LCD_Command 3798  
                  display_LCD@str 00E1                     ?_ringbuf_init 00B0  
                         ___awdiv 29B4                   __size_of___lmul 0076  
                         ___awmod 2E9C                           ___lldiv 2A72  
                 __size_of___wmul 0036                           ___lwdiv 31C4  
                         ___lwmod 3310                   __size_of_d_to_x 0024  
                    __psmallconst 0F00              __size_of_ringbuf_pop 00AC  
            __size_of_ringbuf_num 00BC              __size_of_ringbuf_put 00B6  
                 __CFG_STVREN$OFF 000000                   __size_of_lchika 0100  
               __end_of_main_init 31C4       epoch_to_caltime@month_cache 00F6  
                         __pcinit 32B2                           __ramtop 0F00  
            __size_of_timer0_init 0030                           _halfsec 002F  
            __size_of_timer1_init 0046                           __ptext0 1FC4  
                         __ptext1 28F0                           __ptext2 1BEC  
                         __ptext3 37CE                           __ptext4 36EE  
                         __ptext5 3934                           __ptext6 3634  
                         __ptext7 314C                           __ptext8 38E8  
                         __ptext9 35AA                     I2C_LCD_Putc@c 00B2  
            __size_of_timer3_init 0026                   __size_of_x_to_d 0018  
                   I2C_LCD_Puts@s 00B2                         _T0CONbits 000FD5  
                    __size_of_ADC 002E                      __size_of_LED 003E  
                _time_change_flag 0093                  _caltime_to_epoch 1216  
                    __size_of_ISR 0140                         _T1CONbits 000FCD  
                    __size_of_OUT 003E                           _cut_cnt 0078  
         __size_of_RTCC_from_RTCC 0022                         _T3CONbits 000F79  
                ___awmod@dividend 00B0                         _T5CONbits 000F22  
                         _my_utoa 2FBE           __end_of_RTCC_to_caltime 2CA0  
                         _tx_send 3A72                           lchika@i 000C  
           ?_RTCC_adjust_time_dec 00E5             ?_RTCC_adjust_time_inc 00E5  
           __size_of_get_quot_rem 00D4             __size_of_display_port 00D2  
            end_of_initialization 3306                        delay_set@d 00B0  
                    _CTMUCONHbits 000FB3                      _CTMUCONLbits 000FB2  
                  ??_month_length 00B5                    display_dec@dec 00CE  
                  display_dec@str 00C4                       sleep_loop@i 00DD  
                ?_caltime_to_RTCC 00B8                        ?_I2C_Start 00B0  
                 ___lldiv@divisor 00B4              timer3_init@prescaler 0021  
                 ___lldiv@counter 00BC                    ??_ringbuf_init 0020  
                      _sleep_flag 0031                           postdec1 000FE5  
                         postdec2 000FDD                        _sleep_loop 28F0  
            sw_flag_clear@bit_and 0020                           postinc0 000FEE  
                         postinc1 000FE6                           postinc2 000FDE  
                       _PORTAbits 000F80                         _PORTBbits 000F81  
                       _UART_init 39C0                  __CFG_DSBOREN$OFF 000000  
                       _RTCC_init 3860                         _RTCC_loop 35F0  
                 _nomal_mode_loop 1BEC                      _display_flag 0090  
       epoch_to_caltime@day_cache 008B                      _get_quot_rem 267A  
                    _display_port 274E                        _print_port 0030  
       __size_of_epoch_to_caltime 01EC                  __CFG_CPUDIV$OSC1 000000  
               __size_of_I2C_Send 0018                 __size_of_I2C_Stop 000A  
                       i2___awdiv 3046                 __size_of_I2C_init 0012  
               i2___lwdiv@divisor 0003                         i2___lldiv 30CA  
               __size_of_ADC_init 001C                         i2___lwdiv 34C6  
               i2___lwdiv@counter 0007                  ?_RTCC_from_epoch 00E1  
                       Auto_cut@i 00BA   __size_of_button_timer_interrupt 0282  
         timer1_init@clock_select 0020                  __CFG_IOL1WAY$OFF 000000  
              i2___awdiv@dividend 0001               __CFG_MSSP7B_EN$MSK7 000000  
                ?_I2C_LCD_Command 0001                    ringbuf_init@rb 00B0  
                      lchika@cntf 0088                     ??_display_LCD 0022  
                  ringbuf_pop@ret 000F                     ??_display_dec 0022  
                  __end_of___lmul 32B2          ?_RTCC_adjust_time_button 00EF  
        ?_RTCC_adjust_time_cursor 0001                    __end_of___wmul 37CE  
                   ?_sw_flag_read 0020                    __end_of_d_to_x 397C  
                   __pidataCOMRAM 3AA4                 __size_of_UART_ISR 004A  
        ?_RTCC_adjust_time_toggle 0001                    __end_of_lchika 249E  
                      ?_UART_init 0001                        ?_RTCC_init 0001  
                      ?_RTCC_loop 0001                  __CFG_DSWDTEN$OFF 000000  
           __end_of_sw_flag_clear 3728                  sleep_loop@i_2520 00DC  
                  __end_of_x_to_d 3A46             epoch_to_caltime@month 00DC  
             start_initialization 32B2                  month_length@year 00B9  
                     __end_of_ADC 38BC                i2___awdiv@quotient 0007  
                     __end_of_LED 3672                       __end_of_ISR 0148  
                     __end_of_OUT 36B0                     ?_I2C_LCD_Putc 0001  
                   ?_I2C_LCD_Puts 00B2            ??_RTCC_adjust_time_dec 00E9  
          ??_RTCC_adjust_time_inc 00E9                     ?_I2C_LCD_init 0001  
                   UART_ISR@ascii 0010                        ?i2___awdiv 0001  
               __size_of_Delay_ms 0026                        ?i2___lldiv 0001  
                ?_RTCC_to_caltime 00B0                        ?i2___lwdiv 0001  
               __size_of_Auto_cut 00FE                       ??_I2C_Start 0022  
           __end_of_I2C_LCD_Clear 3A16                          ??___lmul 0022  
                     ?_sleep_loop 0001                          ??___wmul 0022  
         __end_of_nomal_mode_loop 1DD8                          ??_d_to_x 0020  
                  ??_sw_flag_read 0021                 __CFG_ADCSEL$BIT12 000000  
                     __pdataBANK0 00F6                          ??_lchika 0009  
          _button_timer_interrupt 149E                          ??_x_to_d 0020  
            __end_of_month_length 267A                    _RTCC_from_RTCC 399E  
             __end_of_display_LCD 1216               __end_of_display_dec 341E  
                     __pbssCOMRAM 0022               RTCC_to_caltime@dumy 00B2  
                        LED@value 0020                     __pcstackBANK0 00B0  
                   __pcstackBANK1 0100                    ??_I2C_LCD_Putc 0022  
                sw_flag_read@port 0021                    ??_I2C_LCD_Puts 00B4  
                  ??_I2C_LCD_init 0022                       _caltime_now 009D  
            __end_of_ringbuf_init 3472                  tx_send@asciicode 0010  
  __size_of_delay_timer_interrupt 0048     __end_of_delay_timer_interrupt 35AA  
                       _d_display 003A                     ??_integrating 000E  
           RTCC_adjust_time_dec@i 00EE             RTCC_adjust_time_inc@i 00EE  
        __end_of_caltime_to_epoch 149E                          ISR@ascii 001F  
                 millis_timer@cnt 002D                  ___lwdiv@dividend 00B4  
 __end_of_RTCC_adjust_time_button 239E   __end_of_RTCC_adjust_time_cursor 33C8  
                       _delay_set 3934                         _edit_flag 0091  
                       __pintcode 0008   __end_of_RTCC_adjust_time_toggle 3A72  
                        ?___awdiv 00B0                          ?___awmod 00B0  
                        ?___lldiv 00B0                          ?___lwdiv 00B4  
                        ?___lwmod 00B0                   I2C_LCD_Putc@ans 00B3  
          __end_of_RTCC_from_RTCC 39C0                   I2C_LCD_Puts@ans 00B5  
                     ??_UART_init 0020                       ??_RTCC_init 0020  
                     ??_RTCC_loop 0022                       __smallconst 0F00  
                  __size_ofi2_LED 003E                         _epoch_now 00A4  
                       _main_init 314C                       I2C_Start@rw 00B0  
                _epoch_to_caltime 1DD8                          _I2C_Send 3A16  
                        OUT@value 0020                          _I2C_Stop 3A9A  
            __CFG_RTCOSC$T1OSCREF 000000                          _I2C_init 3A88  
                        _ADC_init 39E0             __end_of_I2C_IdleCheck 3A5C  
                     _PADCFG1bits 000F3C                          ?_my_utoa 00BB  
                ___lwdiv@quotient 00B9                       ??i2___awdiv 0005  
                        ?_tx_send 0001                       ??i2___lldiv 0009  
                     ??i2___lwdiv 0005               __size_of_sleep_loop 00C4  
                       d_to_x@dec 0020                          _CTMUCONH 000FB3  
                        _CTMUCONL 000FB2                          _CTMUICON 000FB1  
        ringbuf_init@internal_buf 00B2                    ___wmul@product 00B6  
                        _IPR1bits 000F9F                          _IPR2bits 000FA2  
                        _PIE1bits 000F9D                          _PIE2bits 000FA0  
                        _IPR5bits 000F99                          _PIE5bits 000F91  
                      ?_delay_set 00B0                          _PIR1bits 000F9E  
                        i2u354_40 36BC                          _PIR2bits 000FA1  
                        i2u356_40 36C8                          i2u358_40 36D4  
                        i2u470_40 00CA                          i2u471_40 00E0  
                        i2u472_40 00E2                          i2u393_40 167A  
                        i2u473_40 00F8                          _PIR5bits 000F98  
                        i2u394_40 16A0                          i2u474_40 00FA  
      epoch_to_caltime@year_cache 0094                          i2u395_40 16C6  
                        i2u467_40 00B0                          i2u396_40 16EC  
                        i2u468_40 00B2                          i2u469_40 00C8  
                   ??_ringbuf_pop 000B                     ??_ringbuf_num 0003  
                   ??_ringbuf_put 000C               __end_of_integrating 2E9C  
               _display_time_0802 2142                          _UART_ISR 3518  
                        _SSP1CON1 000FC6                          _SSP1CON2 000FC5  
                   ??_timer0_init 0020                     ??_timer1_init 0021  
                     _display_LCD 0F7A                     ??_timer3_init 0020  
                ?_nomal_mode_loop 0001                          _SSP1STAT 000FC7  
              ?_display_time_0802 00DC                       _display_dec 33C8  
                 ?_RTCC_from_RTCC 00D8                        my_utoa@str 00BB  
                      _ADCON0bits 000FC2                        _ADCON1bits 000FC1  
               ___wmul@multiplier 00B2                  __CFG_SOSCSEL$LOW 000000  
  button_timer_interrupt@sw_value 0003                        ?_main_init 0001  
             ??_display_time_0802 00E0                 i2___awdiv@divisor 0003  
                        _Delay_ms 390E                 i2___awdiv@counter 0005  
                       lchika@cnt 0085                     ringbuf_pop@rb 0009  
                   ringbuf_num@rb 0001                     I2C_Start@adrs 00B1  
                   ringbuf_put@rb 0009                 ___lmul@multiplier 00BD  
                     _INTCON2bits 000FF1              __end_of_sw_flag_read 3800  
                        _Auto_cut 249E              epoch_to_caltime@year 00DB  
                     _auto_cut_ON 0028         __end_of_display_time_0802 227A  
                        __Hrparam 0000                          __Lrparam 0000  
            __end_of_I2C_LCD_Putc 3760              __end_of_I2C_LCD_Puts 2FBE  
                   _weekday_3char 0F01              __end_of_I2C_LCD_init 34C6  
           __size_of_month_length 00DE          __size_of_caltime_to_RTCC 00D0  
                __size_of___awdiv 00BE                  __size_of___awmod 0094  
               I2C_IdleCheck@mask 0021                  __size_of___lldiv 00BC  
                __size_of___lwdiv 0078                  __size_of___lwmod 005C  
             __end_of_ringbuf_pop 2E02               __end_of_ringbuf_num 2BEA  
             __end_of_ringbuf_put 2D56               __end_of_timer0_init 3830  
           __size_of_ringbuf_init 0054               __end_of_timer1_init 35F0  
             __end_of_timer3_init 390E                        i2LED@value 0001  
                 ___lwdiv@divisor 00B6                   ___lwdiv@counter 00B8  
            timer0_init@prescaler 0021                          __ptext10 3800  
                        __ptext11 341E                          __ptext20 33C8  
                        __ptext12 39C0                          __ptext21 2FBE  
                        __ptext13 3860                          __ptext30 3A9A  
                        __ptext22 3310                          __ptext14 3A88  
                        __ptext31 3830                          __ptext23 31C4  
                        __ptext15 3472                          __ptext40 1DD8  
                        __ptext32 3A16                          __ptext24 3728  
                        __ptext16 390E                          __ptext41 267A  
                        __ptext33 3A46                          __ptext25 274E  
                        __ptext17 39E0                          __ptext50 323C  
                        __ptext42 2A72                          __ptext34 35F0  
                        __ptext26 38BC                          __ptext18 0F7A  
                        __ptext51 2BEA                          __ptext43 2820  
                        __ptext35 227A                          __ptext27 2F30  
                        __ptext19 2142                          __ptext60 239E  
                        __ptext52 3A2E                          __ptext44 3958  
                        __ptext36 3A5C                          __ptext28 39FC  
                        __ptext61 34C6                          __ptext53 336C  
                        __ptext45 29B4                          __ptext37 1720  
                        __ptext29 3760                          __ptext70 2D56  
                        __ptext62 3046                          __ptext54 249E  
                        __ptext46 399E                          __ptext38 1986  
                        __ptext71 2B2E                          __ptext63 36B0  
                        __ptext55 3798                          __ptext47 1216  
                        __ptext39 397C                          __ptext64 2E02  
                        __ptext56 3672                          __ptext48 259C  
                        __ptext65 30CA                          __ptext57 388E  
                        __ptext49 2E9C                          __ptext66 3562  
                        __ptext67 149E                          __ptext59 3A72  
                        __ptext68 3518                          __ptext69 2CA0  
                    _SSP1CON2bits 000FC5  __size_of_RTCC_adjust_time_button 0124  
__size_of_RTCC_adjust_time_cursor 005C                  __size_of_my_utoa 0088  
__size_of_RTCC_adjust_time_toggle 0016             RTCC_loop@prev_halfsec 008D  
                __size_of_tx_send 0016                          _cut_flag 008F  
                     _integrating 2E02                     __size_of_main 017E  
                    _month_length 259C          __size_of_RTCC_from_epoch 0022  
                     ??_delay_set 0020                      ??_sleep_loop 0022  
         ?_button_timer_interrupt 0001                          int$flags 0040  
                    _ringbuf_init 341E                         x_to_d@hex 0021  
        __size_of_I2C_LCD_Command 0038                    main_init@txbuf 0100  
                     ??_main_init 0022                       _OSCTUNEbits 000F9B  
                      _INTCONbits 000FF2              ringbuf_put@asciicode 000B  
    I2C_LCD_SetCursor@row_offsets 00B5                        Delay_ms@ms 0020  
                 display_dec@edit 00C3                  get_quot_rem@quot 00C9  
               RTCC_to_caltime@ct 00B0     __size_of_RTCC_adjust_time_dec 0266  
   __size_of_RTCC_adjust_time_inc 0266                          intlevel2 0000  
              __end_of_sleep_loop 29B4                  ___lwmod@dividend 00B0  
                ___lldiv@dividend 00B0                        _RCSTA1bits 000FAC  
               ?_caltime_to_epoch 00C9        __size_of_display_time_0802 0138  
        __end_of_epoch_to_caltime 1FC4            __size_of_sw_flag_clear 003A  
        __size_of_RTCC_to_caltime 00B6                     _print_content 0092  
                      _OSCCONbits 000FD3    __end_of_button_timer_interrupt 1720  
              ??_caltime_to_epoch 00CD                          my_utoa@d 00C0  
                        my_utoa@v 00C1                       _ringbuf_pop 2D56  
                     _ringbuf_num 2B2E                       _ringbuf_put 2CA0  
                     _timer0_init 3800                       _timer1_init 35AA  
                     _timer3_init 38E8                   get_quot_rem@div 00CB  
                 get_quot_rem@num 00CD                        _RTCCFGbits 000F3F  
                ___lldiv@quotient 00B8                 caltime_to_RTCC@ct 00B8  
                 ___lwmod@divisor 00B2                 ??_caltime_to_RTCC 0021  
                 ___lwmod@counter 0020             __size_of_sw_flag_read 0032  
          __size_of_I2C_LCD_Clear 001A   epoch_to_caltime@day_since_epoch 00D7  
                   my_utoa@digits 00BF             __size_of_I2C_LCD_Putc 0038  
           __size_of_I2C_LCD_Puts 008E             _delay_timer_interrupt 3562  
           __size_of_I2C_LCD_init 0054                      my_utoa@value 00BD  
                ??_RTCC_from_RTCC 0022  
