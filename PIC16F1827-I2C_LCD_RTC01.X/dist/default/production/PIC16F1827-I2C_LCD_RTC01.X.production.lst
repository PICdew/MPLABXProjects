

Microchip Technology PIC LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Nov 16 18:53:11 2015

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	swtext1,local,class=CONST,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	intentry,global,class=CODE,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	dabs	1,0x7E,2
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0013                     	;# 
    68  0014                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001C                     	;# 
    78  001E                     	;# 
    79  001F                     	;# 
    80  008C                     	;# 
    81  008D                     	;# 
    82  0091                     	;# 
    83  0092                     	;# 
    84  0093                     	;# 
    85  0094                     	;# 
    86  0095                     	;# 
    87  0096                     	;# 
    88  0097                     	;# 
    89  0098                     	;# 
    90  0099                     	;# 
    91  009A                     	;# 
    92  009B                     	;# 
    93  009B                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009E                     	;# 
    97  010C                     	;# 
    98  010D                     	;# 
    99  0111                     	;# 
   100  0112                     	;# 
   101  0113                     	;# 
   102  0114                     	;# 
   103  0115                     	;# 
   104  0116                     	;# 
   105  0117                     	;# 
   106  0118                     	;# 
   107  0119                     	;# 
   108  011A                     	;# 
   109  011B                     	;# 
   110  011D                     	;# 
   111  011E                     	;# 
   112  018C                     	;# 
   113  018D                     	;# 
   114  0191                     	;# 
   115  0191                     	;# 
   116  0192                     	;# 
   117  0193                     	;# 
   118  0193                     	;# 
   119  0193                     	;# 
   120  0194                     	;# 
   121  0195                     	;# 
   122  0196                     	;# 
   123  0199                     	;# 
   124  019A                     	;# 
   125  019B                     	;# 
   126  019B                     	;# 
   127  019B                     	;# 
   128  019B                     	;# 
   129  019C                     	;# 
   130  019C                     	;# 
   131  019D                     	;# 
   132  019E                     	;# 
   133  019F                     	;# 
   134  020C                     	;# 
   135  020D                     	;# 
   136  0211                     	;# 
   137  0211                     	;# 
   138  0212                     	;# 
   139  0212                     	;# 
   140  0213                     	;# 
   141  0213                     	;# 
   142  0214                     	;# 
   143  0214                     	;# 
   144  0215                     	;# 
   145  0215                     	;# 
   146  0215                     	;# 
   147  0216                     	;# 
   148  0216                     	;# 
   149  0217                     	;# 
   150  0217                     	;# 
   151  0219                     	;# 
   152  021A                     	;# 
   153  021B                     	;# 
   154  021C                     	;# 
   155  021D                     	;# 
   156  021E                     	;# 
   157  021F                     	;# 
   158  0291                     	;# 
   159  0291                     	;# 
   160  0292                     	;# 
   161  0293                     	;# 
   162  0294                     	;# 
   163  0295                     	;# 
   164  0295                     	;# 
   165  0296                     	;# 
   166  0298                     	;# 
   167  0298                     	;# 
   168  0299                     	;# 
   169  029A                     	;# 
   170  029B                     	;# 
   171  029C                     	;# 
   172  029C                     	;# 
   173  029D                     	;# 
   174  029E                     	;# 
   175  029E                     	;# 
   176  0311                     	;# 
   177  0311                     	;# 
   178  0312                     	;# 
   179  0313                     	;# 
   180  0318                     	;# 
   181  0318                     	;# 
   182  0319                     	;# 
   183  031A                     	;# 
   184  0394                     	;# 
   185  0395                     	;# 
   186  0396                     	;# 
   187  039A                     	;# 
   188  039C                     	;# 
   189  039D                     	;# 
   190  039E                     	;# 
   191  039F                     	;# 
   192  0415                     	;# 
   193  0416                     	;# 
   194  0417                     	;# 
   195  041C                     	;# 
   196  041D                     	;# 
   197  041E                     	;# 
   198  0FE4                     	;# 
   199  0FE5                     	;# 
   200  0FE6                     	;# 
   201  0FE7                     	;# 
   202  0FE8                     	;# 
   203  0FE9                     	;# 
   204  0FEA                     	;# 
   205  0FEB                     	;# 
   206  0FED                     	;# 
   207  0FEE                     	;# 
   208  0FEF                     	;# 
   209                           
   210                           	psect	idataBANK0
   211  0002                     __pidataBANK0:	
   212                           
   213                           ;initializer for LCD_SetCursor@F2888
   214  0002  3400               	retlw	0
   215  0003  3440               	retlw	64
   216  000B                     _INTCONbits	set	11
   217  000C                     _PORTA	set	12
   218  000D                     _PORTB	set	13
   219  0018                     _T1CON	set	24
   220  0018                     _T1CONbits	set	24
   221  0017                     _TMR1H	set	23
   222  0016                     _TMR1L	set	22
   223  0093                     _BCL1IF	set	147
   224  0060                     _RA0	set	96
   225  0061                     _RA1	set	97
   226  008D                     _RCIF	set	141
   227  008B                     _SSP1IF	set	139
   228  0088                     _TMR1IF	set	136
   229  008C                     _TXIF	set	140
   230  009B                     _ADRES	set	155
   231  009D                     _ADCON0bits	set	157
   232  009E                     _ADCON1bits	set	158
   233  0095                     _OPTION_REG	set	149
   234  0095                     _OPTION_REGbits	set	149
   235  0099                     _OSCCON	set	153
   236  0091                     _PIE1bits	set	145
   237  008C                     _TRISA	set	140
   238  008D                     _TRISB	set	141
   239  048C                     _TXIE	set	1164
   240  011D                     _APFCON0bits	set	285
   241  011E                     _APFCON1bits	set	286
   242  0117                     _FVRCON	set	279
   243  0868                     _LATB0	set	2152
   244  018C                     _ANSELA	set	396
   245  018D                     _ANSELB	set	397
   246  0199                     _RCREG	set	409
   247  019D                     _RCSTA	set	413
   248  019C                     _SPBRGH	set	412
   249  019B                     _SPBRGL	set	411
   250  019A                     _TXREG	set	410
   251  019E                     _TXSTA	set	414
   252  0CFB                     _BRG16	set	3323
   253  0CEF                     _SPEN	set	3311
   254  0212                     _SSP1ADD	set	530
   255  0211                     _SSP1BUF	set	529
   256  0215                     _SSP1CON1	set	533
   257  0216                     _SSP1CON2	set	534
   258  0216                     _SSP1CON2bits	set	534
   259  0214                     _SSP1STAT	set	532
   260  020D                     _WPUB	set	525
   261                           
   262                           	psect	stringtext
   263  07F0                     __pstringtext:	
   264  07F0                     STR_2:	
   265  07F0  3452               	retlw	82	;'R'
   266  07F1  3465               	retlw	101	;'e'
   267  07F2  3461               	retlw	97	;'a'
   268  07F3  346C               	retlw	108	;'l'
   269  07F4  3420               	retlw	32	;' '
   270  07F5  3454               	retlw	84	;'T'
   271  07F6  3469               	retlw	105	;'i'
   272  07F7  346D               	retlw	109	;'m'
   273  07F8  3465               	retlw	101	;'e'
   274  07F9  3420               	retlw	32	;' '
   275  07FA  3443               	retlw	67	;'C'
   276  07FB  346C               	retlw	108	;'l'
   277  07FC  346F               	retlw	111	;'o'
   278  07FD  3463               	retlw	99	;'c'
   279  07FE  346B               	retlw	107	;'k'
   280  07FF  340A               	retlw	10
   281  0800  3400               	retlw	0
   282  0801                     STR_1:	
   283  0801  3420               	retlw	32	;' '
   284  0802  3420               	retlw	32	;' '
   285  0803  3400               	retlw	0
   286                           
   287                           ; #config settings
   288  0000                     
   289                           	psect	cinit
   290  0042                     start_initialization:	
   291  0042                     __initialization:	
   292                           
   293                           ; Clear objects allocated to COMMON
   294  0042  01F8               	clrf	__pbssCOMMON& (0+127)
   295  0043  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   296  0044  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   297  0045  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
   298                           
   299                           ; Clear objects allocated to BANK0
   300  0046  303F               	movlw	low __pbssBANK0
   301  0047  0084               	movwf	4
   302  0048  3000               	movlw	high __pbssBANK0
   303  0049  0085               	movwf	5
   304  004A  300D               	movlw	13
   305  004B  318F  275D  3180   	fcall	clear_ram0
   306                           
   307                           ; Clear objects allocated to BANK1
   308  004E  0021               	movlb	1	; select bank1
   309  004F  01E6               	clrf	__pbssBANK1& (0+127)
   310                           
   311                           ; Initialize objects allocated to BANK0
   312  0050  0020               	movlb	0	; select bank0
   313  0051  3180  2002  3180   	fcall	__pidataBANK0	;fetch initializer
   314  0054  00CC               	movwf	__pdataBANK0& (0+127)
   315  0055  3180  2003         	fcall	__pidataBANK0+1	;fetch initializer
   316  0057  00CD               	movwf	(__pdataBANK0+1)& (0+127)
   317  0058                     end_of_initialization:	
   318                           ;End of C runtime variable initialization code
   319                           
   320  0058                     __end_of__initialization:	
   321  0058  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   322  0059  0020               	movlb	0
   323  005A  3180  285C         	ljmp	_main	;jump to C main() function
   324                           
   325                           	psect	bssCOMMON
   326  0078                     __pbssCOMMON:	
   327  0078                     _cnt_t1:	
   328  0078                     	ds	1
   329  0079                     _sw_RA1:	
   330  0079                     	ds	3
   331                           
   332                           	psect	bssBANK0
   333  003F                     __pbssBANK0:	
   334  003F                     _tx_buf:	
   335  003F                     	ds	4
   336  0043                     _sw_RA0:	
   337  0043                     	ds	3
   338  0046                     _DD:	
   339  0046                     	ds	1
   340  0047                     _MM:	
   341  0047                     	ds	1
   342  0048                     _YY:	
   343  0048                     	ds	1
   344  0049                     _hh:	
   345  0049                     	ds	1
   346  004A                     _mm:	
   347  004A                     	ds	1
   348  004B                     _ss:	
   349  004B                     	ds	1
   350                           
   351                           	psect	dataBANK0
   352  004C                     __pdataBANK0:	
   353  004C                     LCD_SetCursor@F2888:	
   354  004C                     	ds	2
   355                           
   356                           	psect	bssBANK1
   357  00E6                     __pbssBANK1:	
   358  00E6                     _EE:	
   359  00E6                     	ds	1
   360                           
   361                           	psect	clrtext
   362  0F5D                     clear_ram0:	
   363                           ;	Called with FSR0 containing the base address, and
   364                           ;	WREG with the size to clear
   365                           
   366  0F5D  0064               	clrwdt	;clear the watchdog before getting into this loop
   367  0F5E                     clrloop0:	
   368  0F5E  0180               	clrf	0	;clear RAM location pointed to by FSR
   369  0F5F  3101               	addfsr 0,1
   370  0F60  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   371  0F61  2F5E               	goto	clrloop0	;have we reached the end yet?
   372  0F62  3400               	retlw	0	;all done for this memory range, return
   373                           
   374                           	psect	cstackBANK1
   375  00A0                     __pcstackBANK1:	
   376  00A0                     main@buf:	
   377                           
   378                           ; 70 bytes @ 0x0
   379  00A0                     	ds	70
   380                           
   381                           	psect	cstackCOMMON
   382  0070                     __pcstackCOMMON:	
   383  0070                     ?_display:	
   384  0070                     ?_button_timer_interrupt:	
   385                           ; 0 bytes @ 0x0
   386                           
   387  0070                     ??_ringbuf_pop:	
   388                           ; 0 bytes @ 0x0
   389                           
   390  0070                     ??_ringbuf_num:	
   391                           ; 0 bytes @ 0x0
   392                           
   393  0070                     ?_UART_init:	
   394                           ; 0 bytes @ 0x0
   395                           
   396  0070                     ?_tx_send:	
   397                           ; 0 bytes @ 0x0
   398                           
   399  0070                     ?_interrupt_TXIF:	
   400                           ; 0 bytes @ 0x0
   401                           
   402  0070                     ?_I2C_IdleCheck:	
   403                           ; 0 bytes @ 0x0
   404                           
   405  0070                     ?_I2C_init:	
   406                           ; 0 bytes @ 0x0
   407                           
   408  0070                     ?_I2C_Stop:	
   409                           ; 0 bytes @ 0x0
   410                           
   411  0070                     ?_LCD_Command:	
   412                           ; 0 bytes @ 0x0
   413                           
   414  0070                     ?_LCD_Clear:	
   415                           ; 0 bytes @ 0x0
   416                           
   417  0070                     ?_LCD_Putc:	
   418                           ; 0 bytes @ 0x0
   419                           
   420  0070                     ?_LCD_init:	
   421                           ; 0 bytes @ 0x0
   422                           
   423  0070                     ?_isr:	
   424                           ; 0 bytes @ 0x0
   425                           
   426  0070                     ?_main:	
   427                           ; 0 bytes @ 0x0
   428                           
   429  0070                     ?i1_ringbuf_push:	
   430                           ; 0 bytes @ 0x0
   431                           
   432  0070                     ?i1_tx_send:	
   433                           ; 0 bytes @ 0x0
   434                           
   435  0070                     ?_ringbuf_pop:	
   436                           ; 0 bytes @ 0x0
   437                           
   438  0070                     ?_ringbuf_num:	
   439                           ; 1 bytes @ 0x0
   440                           
   441  0070                     ?_I2C_Send:	
   442                           ; 1 bytes @ 0x0
   443                           
   444  0070                     ?_I2C_Receive:	
   445                           ; 1 bytes @ 0x0
   446                           
   447  0070                     ?_RTC_Read:	
   448                           ; 1 bytes @ 0x0
   449                           
   450  0070                     button_timer_interrupt@sw_value:	
   451                           ; 1 bytes @ 0x0
   452                           
   453  0070                     i1ringbuf_push@asciicode:	
   454                           ; 1 bytes @ 0x0
   455                           
   456                           
   457                           ; 1 bytes @ 0x0
   458  0070                     	ds	1
   459  0071                     ??_button_timer_interrupt:	
   460  0071                     ??i1_ringbuf_push:	
   461                           ; 0 bytes @ 0x1
   462                           
   463  0071                     ringbuf_num@rb:	
   464                           ; 0 bytes @ 0x1
   465                           
   466                           
   467                           ; 1 bytes @ 0x1
   468  0071                     	ds	1
   469  0072                     ringbuf_pop@ret:	
   470                           
   471                           ; 1 bytes @ 0x2
   472  0072                     	ds	1
   473  0073                     button_timer_interrupt@bt:	
   474  0073                     ringbuf_pop@rb:	
   475                           ; 1 bytes @ 0x3
   476                           
   477  0073                     i1ringbuf_push@rb:	
   478                           ; 1 bytes @ 0x3
   479                           
   480                           
   481                           ; 1 bytes @ 0x3
   482  0073                     	ds	1
   483  0074                     ??_interrupt_TXIF:	
   484  0074                     ??i1_tx_send:	
   485                           ; 0 bytes @ 0x4
   486                           
   487                           
   488                           ; 0 bytes @ 0x4
   489  0074                     	ds	1
   490  0075                     i1tx_send@asciicode:	
   491                           
   492                           ; 1 bytes @ 0x5
   493  0075                     	ds	1
   494  0076                     ??_isr:	
   495                           
   496                           ; 0 bytes @ 0x6
   497  0076                     	ds	2
   498                           
   499                           	psect	cstackBANK0
   500  0020                     __pcstackBANK0:	
   501  0020                     ?_ringbuf_init:	
   502  0020                     ?_ringbuf_push:	
   503                           ; 0 bytes @ 0x0
   504                           
   505  0020                     ??_UART_init:	
   506                           ; 0 bytes @ 0x0
   507                           
   508  0020                     ??_I2C_IdleCheck:	
   509                           ; 0 bytes @ 0x0
   510                           
   511  0020                     ??_I2C_init:	
   512                           ; 0 bytes @ 0x0
   513                           
   514  0020                     ?_month_length:	
   515                           ; 0 bytes @ 0x0
   516                           
   517  0020                     ?___awdiv:	
   518                           ; 1 bytes @ 0x0
   519                           
   520  0020                     ?___awmod:	
   521                           ; 2 bytes @ 0x0
   522                           
   523  0020                     ringbuf_init@internal_buf:	
   524                           ; 2 bytes @ 0x0
   525                           
   526  0020                     ringbuf_push@asciicode:	
   527                           ; 1 bytes @ 0x0
   528                           
   529  0020                     UART_init@device:	
   530                           ; 1 bytes @ 0x0
   531                           
   532  0020                     month_length@month:	
   533                           ; 1 bytes @ 0x0
   534                           
   535  0020                     ___awdiv@divisor:	
   536                           ; 1 bytes @ 0x0
   537                           
   538  0020                     ___awmod@divisor:	
   539                           ; 2 bytes @ 0x0
   540                           
   541                           
   542                           ; 2 bytes @ 0x0
   543  0020                     	ds	1
   544  0021                     ??_ringbuf_push:	
   545  0021                     ??_month_length:	
   546                           ; 0 bytes @ 0x1
   547                           
   548  0021                     ringbuf_init@bufsize:	
   549                           ; 0 bytes @ 0x1
   550                           
   551  0021                     I2C_IdleCheck@mask:	
   552                           ; 1 bytes @ 0x1
   553                           
   554  0021                     month_length@year:	
   555                           ; 1 bytes @ 0x1
   556                           
   557                           
   558                           ; 1 bytes @ 0x1
   559  0021                     	ds	1
   560  0022                     ??_ringbuf_init:	
   561  0022                     ??_I2C_Stop:	
   562                           ; 0 bytes @ 0x2
   563                           
   564  0022                     ??_I2C_Send:	
   565                           ; 0 bytes @ 0x2
   566                           
   567  0022                     ??_I2C_Receive:	
   568                           ; 0 bytes @ 0x2
   569                           
   570  0022                     ?_I2C_Start:	
   571                           ; 0 bytes @ 0x2
   572                           
   573  0022                     ?_I2C_rStart:	
   574                           ; 1 bytes @ 0x2
   575                           
   576  0022                     I2C_Start@rw:	
   577                           ; 1 bytes @ 0x2
   578                           
   579  0022                     I2C_Send@data:	
   580                           ; 1 bytes @ 0x2
   581                           
   582  0022                     I2C_rStart@adrs:	
   583                           ; 1 bytes @ 0x2
   584                           
   585  0022                     ___awdiv@dividend:	
   586                           ; 2 bytes @ 0x2
   587                           
   588  0022                     ___awmod@dividend:	
   589                           ; 2 bytes @ 0x2
   590                           
   591                           
   592                           ; 2 bytes @ 0x2
   593  0022                     	ds	1
   594  0023                     ??_I2C_Start:	
   595  0023                     ringbuf_init@rb:	
   596                           ; 0 bytes @ 0x3
   597                           
   598  0023                     ringbuf_push@rb:	
   599                           ; 1 bytes @ 0x3
   600                           
   601  0023                     I2C_Start@adrs:	
   602                           ; 1 bytes @ 0x3
   603                           
   604  0023                     I2C_Receive@ack:	
   605                           ; 1 bytes @ 0x3
   606                           
   607                           
   608                           ; 1 bytes @ 0x3
   609  0023                     	ds	1
   610  0024                     ??_tx_send:	
   611  0024                     ?_tx_sends:	
   612                           ; 0 bytes @ 0x4
   613                           
   614  0024                     ??_LCD_Command:	
   615                           ; 0 bytes @ 0x4
   616                           
   617  0024                     ??_LCD_Putc:	
   618                           ; 0 bytes @ 0x4
   619                           
   620  0024                     ?_LCD_Puts:	
   621                           ; 0 bytes @ 0x4
   622                           
   623  0024                     ?_RTC_Write:	
   624                           ; 0 bytes @ 0x4
   625                           
   626  0024                     ??___awdiv:	
   627                           ; 0 bytes @ 0x4
   628                           
   629  0024                     ??___awmod:	
   630                           ; 0 bytes @ 0x4
   631                           
   632  0024                     I2C_Receive@data:	
   633                           ; 0 bytes @ 0x4
   634                           
   635  0024                     RTC_Write@data:	
   636                           ; 1 bytes @ 0x4
   637                           
   638  0024                     tx_sends@asciicode:	
   639                           ; 1 bytes @ 0x4
   640                           
   641  0024                     I2C_rStart@rw:	
   642                           ; 2 bytes @ 0x4
   643                           
   644  0024                     LCD_Puts@s:	
   645                           ; 2 bytes @ 0x4
   646                           
   647                           
   648                           ; 2 bytes @ 0x4
   649  0024                     	ds	1
   650  0025                     ??_RTC_Write:	
   651  0025                     tx_send@asciicode:	
   652                           ; 0 bytes @ 0x5
   653                           
   654  0025                     LCD_Command@c:	
   655                           ; 1 bytes @ 0x5
   656                           
   657  0025                     LCD_Putc@c:	
   658                           ; 1 bytes @ 0x5
   659                           
   660  0025                     ___awdiv@counter:	
   661                           ; 1 bytes @ 0x5
   662                           
   663  0025                     ___awmod@counter:	
   664                           ; 1 bytes @ 0x5
   665                           
   666                           
   667                           ; 1 bytes @ 0x5
   668  0025                     	ds	1
   669  0026                     ??_tx_sends:	
   670  0026                     ??_I2C_rStart:	
   671                           ; 0 bytes @ 0x6
   672                           
   673  0026                     ??_LCD_Puts:	
   674                           ; 0 bytes @ 0x6
   675                           
   676  0026                     ??_RTC_Read:	
   677                           ; 0 bytes @ 0x6
   678                           
   679  0026                     LCD_Command@ans:	
   680                           ; 0 bytes @ 0x6
   681                           
   682  0026                     LCD_Putc@ans:	
   683                           ; 1 bytes @ 0x6
   684                           
   685  0026                     RTC_Write@Reg:	
   686                           ; 1 bytes @ 0x6
   687                           
   688  0026                     ___awdiv@sign:	
   689                           ; 1 bytes @ 0x6
   690                           
   691  0026                     ___awmod@sign:	
   692                           ; 1 bytes @ 0x6
   693                           
   694                           
   695                           ; 1 bytes @ 0x6
   696  0026                     	ds	1
   697  0027                     ??_LCD_Clear:	
   698  0027                     ?_LCD_SetCursor:	
   699                           ; 0 bytes @ 0x7
   700                           
   701  0027                     LCD_SetCursor@row:	
   702                           ; 0 bytes @ 0x7
   703                           
   704  0027                     RTC_Write@ans:	
   705                           ; 1 bytes @ 0x7
   706                           
   707  0027                     RTC_Read@Reg:	
   708                           ; 1 bytes @ 0x7
   709                           
   710  0027                     ___awdiv@quotient:	
   711                           ; 1 bytes @ 0x7
   712                           
   713                           
   714                           ; 2 bytes @ 0x7
   715  0027                     	ds	1
   716  0028                     ??_LCD_SetCursor:	
   717  0028                     RTC_Read@data:	
   718                           ; 0 bytes @ 0x8
   719                           
   720  0028                     LCD_SetCursor@row_offsets:	
   721                           ; 1 bytes @ 0x8
   722                           
   723  0028                     LCD_Puts@ans:	
   724                           ; 2 bytes @ 0x8
   725                           
   726                           
   727                           ; 2 bytes @ 0x8
   728  0028                     	ds	1
   729  0029                     ??_LCD_init:	
   730  0029                     ?___bmul:	
   731                           ; 0 bytes @ 0x9
   732                           
   733  0029                     tx_sends@i:	
   734                           ; 1 bytes @ 0x9
   735                           
   736  0029                     RTC_Read@ans:	
   737                           ; 1 bytes @ 0x9
   738                           
   739  0029                     ___bmul@multiplicand:	
   740                           ; 1 bytes @ 0x9
   741                           
   742                           
   743                           ; 1 bytes @ 0x9
   744  0029                     	ds	1
   745  002A                     ??___bmul:	
   746  002A                     LCD_SetCursor@col:	
   747                           ; 0 bytes @ 0xA
   748                           
   749                           
   750                           ; 1 bytes @ 0xA
   751  002A                     	ds	1
   752  002B                     ??_display:	
   753  002B                     ___bmul@product:	
   754                           ; 0 bytes @ 0xB
   755                           
   756                           
   757                           ; 1 bytes @ 0xB
   758  002B                     	ds	1
   759  002C                     ___bmul@multiplier:	
   760                           
   761                           ; 1 bytes @ 0xC
   762  002C                     	ds	1
   763  002D                     ?_timeset:	
   764  002D                     timeset@min_num:	
   765                           ; 0 bytes @ 0xD
   766                           
   767                           
   768                           ; 1 bytes @ 0xD
   769  002D                     	ds	1
   770  002E                     timeset@max_num:	
   771                           
   772                           ; 1 bytes @ 0xE
   773  002E                     	ds	1
   774  002F                     timeset@Reg:	
   775                           
   776                           ; 1 bytes @ 0xF
   777  002F                     	ds	1
   778  0030                     timeset@column:	
   779                           
   780                           ; 1 bytes @ 0x10
   781  0030                     	ds	1
   782  0031                     timeset@row:	
   783                           
   784                           ; 1 bytes @ 0x11
   785  0031                     	ds	1
   786  0032                     ??_timeset:	
   787                           
   788                           ; 0 bytes @ 0x12
   789  0032                     	ds	6
   790  0038                     timeset@t:	
   791                           
   792                           ; 1 bytes @ 0x18
   793  0038                     	ds	1
   794  0039                     timeset@t_599:	
   795                           
   796                           ; 1 bytes @ 0x19
   797  0039                     	ds	1
   798  003A                     timeset@value:	
   799                           
   800                           ; 1 bytes @ 0x1A
   801  003A                     	ds	1
   802  003B                     ??_main:	
   803                           
   804                           ; 0 bytes @ 0x1B
   805  003B                     	ds	4
   806                           
   807                           	psect	maintext
   808  005C                     __pmaintext:	
   809 ;;
   810 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   811 ;;
   812 ;; *************** function _main *****************
   813 ;; Defined at:
   814 ;;		line 145 in file "PIC16F1827-I2C_LCD_RTC01.c"
   815 ;; Parameters:    Size  Location     Type
   816 ;;		None
   817 ;; Auto vars:     Size  Location     Type
   818 ;;  buf            70    0[BANK1 ] unsigned char [70]
   819 ;; Return value:  Size  Location     Type
   820 ;;		None               void
   821 ;; Registers used:
   822 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   823 ;; Tracked objects:
   824 ;;		On entry : B1F/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   828 ;;      Params:         0       0       0       0       0       0
   829 ;;      Locals:         0       0      70       0       0       0
   830 ;;      Temps:          0       4       0       0       0       0
   831 ;;      Totals:         0       4      70       0       0       0
   832 ;;Total ram usage:       74 bytes
   833 ;; Hardware stack levels required when called:    9
   834 ;; This function calls:
   835 ;;		_I2C_init
   836 ;;		_LCD_init
   837 ;;		_RTC_Write
   838 ;;		_UART_init
   839 ;;		_display
   840 ;;		_month_length
   841 ;;		_ringbuf_init
   842 ;;		_timeset
   843 ;;		_tx_send
   844 ;;		_tx_sends
   845 ;; This function is called by:
   846 ;;		Startup code after reset
   847 ;; This function uses a non-reentrant model
   848 ;;
   849                           
   850                           
   851                           ;psect for function _main
   852  005C                     _main:	
   853                           
   854                           ;PIC16F1827-I2C_LCD_RTC01.c: 146: OSCCON = 0b11110000;
   855                           
   856                           ;incstack = 0
   857                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   858  005C  30F0               	movlw	240
   859  005D  0021               	movlb	1	; select bank1
   860  005E  0099               	movwf	25	;volatile
   861                           
   862                           ;PIC16F1827-I2C_LCD_RTC01.c: 147: OPTION_REG = 0b00000000;
   863  005F  0195               	clrf	21	;volatile
   864                           
   865                           ;PIC16F1827-I2C_LCD_RTC01.c: 148: ANSELA = 0b00000000;
   866  0060  0023               	movlb	3	; select bank3
   867  0061  018C               	clrf	12	;volatile
   868                           
   869                           ;PIC16F1827-I2C_LCD_RTC01.c: 149: ANSELB = 0b00000000;
   870  0062  018D               	clrf	13	;volatile
   871                           
   872                           ;PIC16F1827-I2C_LCD_RTC01.c: 150: TRISA = 0b00000011;
   873  0063  3003               	movlw	3
   874  0064  0021               	movlb	1	; select bank1
   875  0065  008C               	movwf	12	;volatile
   876                           
   877                           ;PIC16F1827-I2C_LCD_RTC01.c: 151: TRISB = 0b00010110;
   878  0066  3016               	movlw	22
   879  0067  008D               	movwf	13	;volatile
   880                           
   881                           ;PIC16F1827-I2C_LCD_RTC01.c: 152: WPUB = 0b00010010;
   882  0068  3012               	movlw	18
   883  0069  0024               	movlb	4	; select bank4
   884  006A  008D               	movwf	13	;volatile
   885                           
   886                           ;PIC16F1827-I2C_LCD_RTC01.c: 153: PORTA = 0b00000000;
   887  006B  0020               	movlb	0	; select bank0
   888  006C  018C               	clrf	12	;volatile
   889                           
   890                           ;PIC16F1827-I2C_LCD_RTC01.c: 154: PORTB = 0b00000000;
   891  006D  018D               	clrf	13	;volatile
   892                           
   893                           ;PIC16F1827-I2C_LCD_RTC01.c: 155: APFCON0bits.RXDTSEL = 1;
   894  006E  0022               	movlb	2	; select bank2
   895  006F  179D               	bsf	29,7	;volatile
   896                           
   897                           ;PIC16F1827-I2C_LCD_RTC01.c: 156: APFCON1bits.TXCKSEL = 1;
   898  0070  141E               	bsf	30,0	;volatile
   899                           
   900                           ;PIC16F1827-I2C_LCD_RTC01.c: 158: T1CON = 0x21;
   901  0071  3021               	movlw	33
   902  0072  0020               	movlb	0	; select bank0
   903  0073  0098               	movwf	24	;volatile
   904                           
   905                           ;PIC16F1827-I2C_LCD_RTC01.c: 159: TMR1H = 0x00;
   906  0074  0197               	clrf	23	;volatile
   907                           
   908                           ;PIC16F1827-I2C_LCD_RTC01.c: 160: TMR1L = 0x00;
   909  0075  0196               	clrf	22	;volatile
   910                           
   911                           ;PIC16F1827-I2C_LCD_RTC01.c: 161: PIE1bits.TMR1IE = 1;
   912  0076  0021               	movlb	1	; select bank1
   913  0077  1411               	bsf	17,0	;volatile
   914                           
   915                           ;PIC16F1827-I2C_LCD_RTC01.c: 163: I2C_init();
   916  0078  318F  276E  3180   	fcall	_I2C_init
   917                           
   918                           ;PIC16F1827-I2C_LCD_RTC01.c: 164: LCD_init();
   919  007B  3185  2563  3180   	fcall	_LCD_init
   920                           
   921                           ;PIC16F1827-I2C_LCD_RTC01.c: 165: UART_init(0);
   922  007E  3000               	movlw	0
   923  007F  318F  27D6  3180   	fcall	_UART_init
   924                           
   925                           ;PIC16F1827-I2C_LCD_RTC01.c: 167: INTCONbits.PEIE = 1;
   926  0082  170B               	bsf	11,6	;volatile
   927                           
   928                           ;PIC16F1827-I2C_LCD_RTC01.c: 168: INTCONbits.GIE = 1;
   929  0083  178B               	bsf	11,7	;volatile
   930                           
   931                           ;PIC16F1827-I2C_LCD_RTC01.c: 170: uint8_t buf[70];
   932                           ;PIC16F1827-I2C_LCD_RTC01.c: 171: ringbuf_init(&tx_buf, buf, sizeof (buf));
   933  0084  30A0               	movlw	(low (main@buf| 0))& (0+255)
   934  0085  0020               	movlb	0	; select bank0
   935  0086  00BB               	movwf	??_main
   936  0087  083B               	movf	??_main,w
   937  0088  00A0               	movwf	ringbuf_init@internal_buf
   938  0089  3046               	movlw	70
   939  008A  00BC               	movwf	??_main+1
   940  008B  083C               	movf	??_main+1,w
   941  008C  00A1               	movwf	ringbuf_init@bufsize
   942  008D  303F               	movlw	(low (_tx_buf| 0))& (0+255)
   943  008E  3187  2789  3180   	fcall	_ringbuf_init
   944                           
   945                           ;PIC16F1827-I2C_LCD_RTC01.c: 173: RTC_Write(0x07, 0x00);
   946  0091  0020               	movlb	0	; select bank0
   947  0092  01A4               	clrf	RTC_Write@data
   948  0093  3007               	movlw	7
   949  0094  3187  272B  3180   	fcall	_RTC_Write
   950  0097                     l2112:	
   951                           ;PIC16F1827-I2C_LCD_RTC01.c: 175: while (1) {
   952                           
   953                           
   954                           ;PIC16F1827-I2C_LCD_RTC01.c: 176: display();
   955  0097  3183  2319  3180   	fcall	_display
   956                           
   957                           ;PIC16F1827-I2C_LCD_RTC01.c: 177: if (sw_RA1.flag.press) {
   958  009A  1C7B               	btfss	_sw_RA1+2,0
   959  009B  294C               	goto	l2120
   960                           
   961                           ;PIC16F1827-I2C_LCD_RTC01.c: 178: sw_RA1.flag.press=0;
   962  009C  107B               	bcf	_sw_RA1+2,0
   963                           
   964                           ;PIC16F1827-I2C_LCD_RTC01.c: 179: tx_send('2');
   965  009D  3032               	movlw	50
   966  009E  318F  2779  3180   	fcall	_tx_send
   967                           
   968                           ;PIC16F1827-I2C_LCD_RTC01.c: 180: tx_send('0');
   969  00A1  3030               	movlw	48
   970  00A2  318F  2779  3180   	fcall	_tx_send
   971                           
   972                           ;PIC16F1827-I2C_LCD_RTC01.c: 181: tx_send(((YY & 0xF0) >> 4) + '0');
   973  00A5  0020               	movlb	0	; select bank0
   974  00A6  0848               	movf	_YY,w
   975  00A7  00BB               	movwf	??_main
   976  00A8  3004               	movlw	4
   977  00A9                     u1625:	
   978  00A9  36BB               	lsrf	??_main,f
   979  00AA  0B89               	decfsz	9,f
   980  00AB  28A9               	goto	u1625
   981  00AC  083B               	movf	??_main,w
   982  00AD  390F               	andlw	15
   983  00AE  3E30               	addlw	48
   984  00AF  318F  2779  3180   	fcall	_tx_send
   985                           
   986                           ;PIC16F1827-I2C_LCD_RTC01.c: 182: tx_send((YY & 0x0F) + '0');
   987  00B2  0020               	movlb	0	; select bank0
   988  00B3  0848               	movf	_YY,w
   989  00B4  390F               	andlw	15
   990  00B5  3E30               	addlw	48
   991  00B6  318F  2779  3180   	fcall	_tx_send
   992                           
   993                           ;PIC16F1827-I2C_LCD_RTC01.c: 183: tx_send('/');
   994  00B9  302F               	movlw	47
   995  00BA  318F  2779  3180   	fcall	_tx_send
   996                           
   997                           ;PIC16F1827-I2C_LCD_RTC01.c: 184: tx_send(((MM & 0xF0) >> 4) + '0');
   998  00BD  0020               	movlb	0	; select bank0
   999  00BE  0847               	movf	_MM,w
  1000  00BF  00BB               	movwf	??_main
  1001  00C0  3004               	movlw	4
  1002  00C1                     u1635:	
  1003  00C1  36BB               	lsrf	??_main,f
  1004  00C2  0B89               	decfsz	9,f
  1005  00C3  28C1               	goto	u1635
  1006  00C4  083B               	movf	??_main,w
  1007  00C5  390F               	andlw	15
  1008  00C6  3E30               	addlw	48
  1009  00C7  318F  2779  3180   	fcall	_tx_send
  1010                           
  1011                           ;PIC16F1827-I2C_LCD_RTC01.c: 185: tx_send((MM & 0x0F) + '0');
  1012  00CA  0020               	movlb	0	; select bank0
  1013  00CB  0847               	movf	_MM,w
  1014  00CC  390F               	andlw	15
  1015  00CD  3E30               	addlw	48
  1016  00CE  318F  2779  3180   	fcall	_tx_send
  1017                           
  1018                           ;PIC16F1827-I2C_LCD_RTC01.c: 186: tx_send('/');
  1019  00D1  302F               	movlw	47
  1020  00D2  318F  2779  3180   	fcall	_tx_send
  1021                           
  1022                           ;PIC16F1827-I2C_LCD_RTC01.c: 187: tx_send(((DD & 0xF0) >> 4) + '0');
  1023  00D5  0020               	movlb	0	; select bank0
  1024  00D6  0846               	movf	_DD,w
  1025  00D7  00BB               	movwf	??_main
  1026  00D8  3004               	movlw	4
  1027  00D9                     u1645:	
  1028  00D9  36BB               	lsrf	??_main,f
  1029  00DA  0B89               	decfsz	9,f
  1030  00DB  28D9               	goto	u1645
  1031  00DC  083B               	movf	??_main,w
  1032  00DD  390F               	andlw	15
  1033  00DE  3E30               	addlw	48
  1034  00DF  318F  2779  3180   	fcall	_tx_send
  1035                           
  1036                           ;PIC16F1827-I2C_LCD_RTC01.c: 188: tx_send((DD & 0x0F) + '0');
  1037  00E2  0020               	movlb	0	; select bank0
  1038  00E3  0846               	movf	_DD,w
  1039  00E4  390F               	andlw	15
  1040  00E5  3E30               	addlw	48
  1041  00E6  318F  2779  3180   	fcall	_tx_send
  1042                           
  1043                           ;PIC16F1827-I2C_LCD_RTC01.c: 189: tx_send('(');
  1044  00E9  3028               	movlw	40
  1045  00EA  318F  2779  3180   	fcall	_tx_send
  1046                           
  1047                           ;PIC16F1827-I2C_LCD_RTC01.c: 190: tx_send((EE & 0x0F) + '0');
  1048  00ED  0021               	movlb	1	; select bank1
  1049  00EE  0866               	movf	_EE^(0+128),w
  1050  00EF  390F               	andlw	15
  1051  00F0  3E30               	addlw	48
  1052  00F1  318F  2779  3180   	fcall	_tx_send
  1053                           
  1054                           ;PIC16F1827-I2C_LCD_RTC01.c: 191: tx_send(')');
  1055  00F4  3029               	movlw	41
  1056  00F5  318F  2779  3180   	fcall	_tx_send
  1057                           
  1058                           ;PIC16F1827-I2C_LCD_RTC01.c: 192: tx_send(((hh & 0xF0) >> 4) + '0');
  1059  00F8  0020               	movlb	0	; select bank0
  1060  00F9  0849               	movf	_hh,w
  1061  00FA  00BB               	movwf	??_main
  1062  00FB  3004               	movlw	4
  1063  00FC                     u1655:	
  1064  00FC  36BB               	lsrf	??_main,f
  1065  00FD  0B89               	decfsz	9,f
  1066  00FE  28FC               	goto	u1655
  1067  00FF  083B               	movf	??_main,w
  1068  0100  390F               	andlw	15
  1069  0101  3E30               	addlw	48
  1070  0102  318F  2779  3180   	fcall	_tx_send
  1071                           
  1072                           ;PIC16F1827-I2C_LCD_RTC01.c: 193: tx_send((hh & 0x0F) + '0');
  1073  0105  0020               	movlb	0	; select bank0
  1074  0106  0849               	movf	_hh,w
  1075  0107  390F               	andlw	15
  1076  0108  3E30               	addlw	48
  1077  0109  318F  2779  3180   	fcall	_tx_send
  1078                           
  1079                           ;PIC16F1827-I2C_LCD_RTC01.c: 194: tx_send(':');
  1080  010C  303A               	movlw	58
  1081  010D  318F  2779  3180   	fcall	_tx_send
  1082                           
  1083                           ;PIC16F1827-I2C_LCD_RTC01.c: 195: tx_send(((mm & 0xF0) >> 4) + '0');
  1084  0110  0020               	movlb	0	; select bank0
  1085  0111  084A               	movf	_mm,w
  1086  0112  00BB               	movwf	??_main
  1087  0113  3004               	movlw	4
  1088  0114                     u1665:	
  1089  0114  36BB               	lsrf	??_main,f
  1090  0115  0B89               	decfsz	9,f
  1091  0116  2914               	goto	u1665
  1092  0117  083B               	movf	??_main,w
  1093  0118  390F               	andlw	15
  1094  0119  3E30               	addlw	48
  1095  011A  318F  2779  3180   	fcall	_tx_send
  1096                           
  1097                           ;PIC16F1827-I2C_LCD_RTC01.c: 196: tx_send((mm & 0x0F) + '0');
  1098  011D  0020               	movlb	0	; select bank0
  1099  011E  084A               	movf	_mm,w
  1100  011F  390F               	andlw	15
  1101  0120  3E30               	addlw	48
  1102  0121  318F  2779  3180   	fcall	_tx_send
  1103                           
  1104                           ;PIC16F1827-I2C_LCD_RTC01.c: 197: tx_send('-');
  1105  0124  302D               	movlw	45
  1106  0125  318F  2779  3180   	fcall	_tx_send
  1107                           
  1108                           ;PIC16F1827-I2C_LCD_RTC01.c: 198: tx_send(((ss & 0xF0) >> 4) + '0');
  1109  0128  0020               	movlb	0	; select bank0
  1110  0129  084B               	movf	_ss,w
  1111  012A  00BB               	movwf	??_main
  1112  012B  3004               	movlw	4
  1113  012C                     u1675:	
  1114  012C  36BB               	lsrf	??_main,f
  1115  012D  0B89               	decfsz	9,f
  1116  012E  292C               	goto	u1675
  1117  012F  083B               	movf	??_main,w
  1118  0130  390F               	andlw	15
  1119  0131  3E30               	addlw	48
  1120  0132  318F  2779  3180   	fcall	_tx_send
  1121                           
  1122                           ;PIC16F1827-I2C_LCD_RTC01.c: 199: tx_send((ss & 0x0F) + '0');
  1123  0135  0020               	movlb	0	; select bank0
  1124  0136  084B               	movf	_ss,w
  1125  0137  390F               	andlw	15
  1126  0138  3E30               	addlw	48
  1127  0139  318F  2779  3180   	fcall	_tx_send
  1128                           
  1129                           ;PIC16F1827-I2C_LCD_RTC01.c: 200: tx_send('.');
  1130  013C  302E               	movlw	46
  1131  013D  318F  2779  3180   	fcall	_tx_send
  1132                           
  1133                           ;PIC16F1827-I2C_LCD_RTC01.c: 201: tx_send('\n');
  1134  0140  300A               	movlw	10
  1135  0141  318F  2779  3180   	fcall	_tx_send
  1136                           
  1137                           ;PIC16F1827-I2C_LCD_RTC01.c: 202: tx_sends("Real Time Clock\n");
  1138  0144  30F0               	movlw	low (STR_2| (0+32768))
  1139  0145  0020               	movlb	0	; select bank0
  1140  0146  00A4               	movwf	tx_sends@asciicode
  1141  0147  3087               	movlw	high (STR_2| (0+32768))
  1142  0148  00A5               	movwf	tx_sends@asciicode+1
  1143  0149  3186  2611  3180   	fcall	_tx_sends
  1144  014C                     l2120:	
  1145                           
  1146                           ;PIC16F1827-I2C_LCD_RTC01.c: 203: }
  1147                           ;PIC16F1827-I2C_LCD_RTC01.c: 204: if (sw_RA0.flag.long_holding_1) {
  1148  014C  0020               	movlb	0	; select bank0
  1149  014D  1EC5               	btfss	_sw_RA0+2,5
  1150  014E  2897               	goto	l2112
  1151                           
  1152                           ;PIC16F1827-I2C_LCD_RTC01.c: 205: sw_RA0.flag.long_holding_1 = 0;
  1153  014F  12C5               	bcf	_sw_RA0+2,5
  1154                           
  1155                           ;PIC16F1827-I2C_LCD_RTC01.c: 206: timeset(&YY, 0, 99, 0x06, 0, 0);
  1156  0150  01AD               	clrf	timeset@min_num
  1157  0151  3063               	movlw	99
  1158  0152  00BB               	movwf	??_main
  1159  0153  083B               	movf	??_main,w
  1160  0154  00AE               	movwf	timeset@max_num
  1161  0155  3006               	movlw	6
  1162  0156  00BC               	movwf	??_main+1
  1163  0157  083C               	movf	??_main+1,w
  1164  0158  00AF               	movwf	timeset@Reg
  1165  0159  01B0               	clrf	timeset@column
  1166  015A  01B1               	clrf	timeset@row
  1167  015B  3048               	movlw	(low (_YY| 0))& (0+255)
  1168  015C  3181  21C4  3180   	fcall	_timeset
  1169                           
  1170                           ;PIC16F1827-I2C_LCD_RTC01.c: 207: timeset(&MM, 1, 12, 0x05, 3, 0);
  1171  015F  0020               	movlb	0	; select bank0
  1172  0160  01AD               	clrf	timeset@min_num
  1173  0161  0AAD               	incf	timeset@min_num,f
  1174  0162  300C               	movlw	12
  1175  0163  00BB               	movwf	??_main
  1176  0164  083B               	movf	??_main,w
  1177  0165  00AE               	movwf	timeset@max_num
  1178  0166  3005               	movlw	5
  1179  0167  00BC               	movwf	??_main+1
  1180  0168  083C               	movf	??_main+1,w
  1181  0169  00AF               	movwf	timeset@Reg
  1182  016A  3003               	movlw	3
  1183  016B  00BD               	movwf	??_main+2
  1184  016C  083D               	movf	??_main+2,w
  1185  016D  00B0               	movwf	timeset@column
  1186  016E  01B1               	clrf	timeset@row
  1187  016F  3047               	movlw	(low (_MM| 0))& (0+255)
  1188  0170  3181  21C4  3180   	fcall	_timeset
  1189                           
  1190                           ;PIC16F1827-I2C_LCD_RTC01.c: 208: timeset(&DD, 1, month_length(YY, MM), 0x04, 6, 0);
  1191  0173  0020               	movlb	0	; select bank0
  1192  0174  01AD               	clrf	timeset@min_num
  1193  0175  0AAD               	incf	timeset@min_num,f
  1194  0176  0847               	movf	_MM,w
  1195  0177  00BB               	movwf	??_main
  1196  0178  083B               	movf	??_main,w
  1197  0179  00A0               	movwf	month_length@month
  1198  017A  0848               	movf	_YY,w
  1199  017B  3187  276B  3180   	fcall	_month_length
  1200  017E  0020               	movlb	0	; select bank0
  1201  017F  00BC               	movwf	??_main+1
  1202  0180  083C               	movf	??_main+1,w
  1203  0181  00AE               	movwf	timeset@max_num
  1204  0182  3004               	movlw	4
  1205  0183  00BD               	movwf	??_main+2
  1206  0184  083D               	movf	??_main+2,w
  1207  0185  00AF               	movwf	timeset@Reg
  1208  0186  3006               	movlw	6
  1209  0187  00BE               	movwf	??_main+3
  1210  0188  083E               	movf	??_main+3,w
  1211  0189  00B0               	movwf	timeset@column
  1212  018A  01B1               	clrf	timeset@row
  1213  018B  3046               	movlw	(low (_DD| 0))& (0+255)
  1214  018C  3181  21C4  3180   	fcall	_timeset
  1215                           
  1216                           ;PIC16F1827-I2C_LCD_RTC01.c: 209: timeset(&hh, 0, 23, 0x02, 0, 1);
  1217  018F  0020               	movlb	0	; select bank0
  1218  0190  01AD               	clrf	timeset@min_num
  1219  0191  3017               	movlw	23
  1220  0192  00BB               	movwf	??_main
  1221  0193  083B               	movf	??_main,w
  1222  0194  00AE               	movwf	timeset@max_num
  1223  0195  3002               	movlw	2
  1224  0196  00BC               	movwf	??_main+1
  1225  0197  083C               	movf	??_main+1,w
  1226  0198  00AF               	movwf	timeset@Reg
  1227  0199  01B0               	clrf	timeset@column
  1228  019A  01B1               	clrf	timeset@row
  1229  019B  0AB1               	incf	timeset@row,f
  1230  019C  3049               	movlw	(low (_hh| 0))& (0+255)
  1231  019D  3181  21C4  3180   	fcall	_timeset
  1232                           
  1233                           ;PIC16F1827-I2C_LCD_RTC01.c: 210: timeset(&mm, 0, 59, 0x01, 3, 1);
  1234  01A0  0020               	movlb	0	; select bank0
  1235  01A1  01AD               	clrf	timeset@min_num
  1236  01A2  303B               	movlw	59
  1237  01A3  00BB               	movwf	??_main
  1238  01A4  083B               	movf	??_main,w
  1239  01A5  00AE               	movwf	timeset@max_num
  1240  01A6  01AF               	clrf	timeset@Reg
  1241  01A7  0AAF               	incf	timeset@Reg,f
  1242  01A8  3003               	movlw	3
  1243  01A9  00BC               	movwf	??_main+1
  1244  01AA  083C               	movf	??_main+1,w
  1245  01AB  00B0               	movwf	timeset@column
  1246  01AC  01B1               	clrf	timeset@row
  1247  01AD  0AB1               	incf	timeset@row,f
  1248  01AE  304A               	movlw	(low (_mm| 0))& (0+255)
  1249  01AF  3181  21C4  3180   	fcall	_timeset
  1250                           
  1251                           ;PIC16F1827-I2C_LCD_RTC01.c: 211: timeset(&ss, 0, 59, 0x00, 6, 1);
  1252  01B2  0020               	movlb	0	; select bank0
  1253  01B3  01AD               	clrf	timeset@min_num
  1254  01B4  303B               	movlw	59
  1255  01B5  00BB               	movwf	??_main
  1256  01B6  083B               	movf	??_main,w
  1257  01B7  00AE               	movwf	timeset@max_num
  1258  01B8  01AF               	clrf	timeset@Reg
  1259  01B9  3006               	movlw	6
  1260  01BA  00BC               	movwf	??_main+1
  1261  01BB  083C               	movf	??_main+1,w
  1262  01BC  00B0               	movwf	timeset@column
  1263  01BD  01B1               	clrf	timeset@row
  1264  01BE  0AB1               	incf	timeset@row,f
  1265  01BF  304B               	movlw	(low (_ss| 0))& (0+255)
  1266  01C0  3181  21C4  3180   	fcall	_timeset
  1267  01C3  2897               	goto	l2112
  1268  01C4                     __end_of_main:	
  1269                           
  1270                           	psect	text1
  1271  0611                     __ptext1:	
  1272 ;; *************** function _tx_sends *****************
  1273 ;; Defined at:
  1274 ;;		line 166 in file "My_header_16F.h"
  1275 ;; Parameters:    Size  Location     Type
  1276 ;;  asciicode       2    4[BANK0 ] PTR const unsigned char 
  1277 ;;		 -> STR_2(17), 
  1278 ;; Auto vars:     Size  Location     Type
  1279 ;;  i               1    9[BANK0 ] unsigned char 
  1280 ;; Return value:  Size  Location     Type
  1281 ;;		None               void
  1282 ;; Registers used:
  1283 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1284 ;; Tracked objects:
  1285 ;;		On entry : 0/0
  1286 ;;		On exit  : 0/0
  1287 ;;		Unchanged: 0/0
  1288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1289 ;;      Params:         0       2       0       0       0       0
  1290 ;;      Locals:         0       1       0       0       0       0
  1291 ;;      Temps:          0       3       0       0       0       0
  1292 ;;      Totals:         0       6       0       0       0       0
  1293 ;;Total ram usage:        6 bytes
  1294 ;; Hardware stack levels used:    1
  1295 ;; Hardware stack levels required when called:    4
  1296 ;; This function calls:
  1297 ;;		_ringbuf_push
  1298 ;; This function is called by:
  1299 ;;		_main
  1300 ;; This function uses a non-reentrant model
  1301 ;;
  1302                           
  1303                           
  1304                           ;psect for function _tx_sends
  1305  0611                     _tx_sends:	
  1306                           
  1307                           ;My_header_16F.h: 167: uint8_t i;
  1308                           ;My_header_16F.h: 168: for (i = 0; asciicode[i]; i++) {
  1309                           
  1310                           ;incstack = 0
  1311                           ; Regs used in _tx_sends: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1312  0611  0020               	movlb	0	; select bank0
  1313  0612  01A9               	clrf	tx_sends@i
  1314  0613                     l1846:	
  1315  0613  0825               	movf	tx_sends@asciicode+1,w
  1316  0614  00A7               	movwf	??_tx_sends+1
  1317  0615  0824               	movf	tx_sends@asciicode,w
  1318  0616  00A6               	movwf	??_tx_sends
  1319  0617  0829               	movf	tx_sends@i,w
  1320  0618  0726               	addwf	??_tx_sends,w
  1321  0619  0084               	movwf	4
  1322  061A  0827               	movf	??_tx_sends+1,w
  1323  061B  1803               	skipnc
  1324  061C  0A27               	incf	??_tx_sends+1,w
  1325  061D  0085               	movwf	5
  1326  061E  0012               	moviw fsr0++
  1327  061F  1903               	btfsc	3,2
  1328  0620  2E3A               	goto	l159
  1329                           
  1330                           ;My_header_16F.h: 169: ringbuf_push(&tx_buf, asciicode[i]);
  1331  0621  0825               	movf	tx_sends@asciicode+1,w
  1332  0622  00A7               	movwf	??_tx_sends+1
  1333  0623  0824               	movf	tx_sends@asciicode,w
  1334  0624  00A6               	movwf	??_tx_sends
  1335  0625  0829               	movf	tx_sends@i,w
  1336  0626  0726               	addwf	??_tx_sends,w
  1337  0627  0084               	movwf	4
  1338  0628  0827               	movf	??_tx_sends+1,w
  1339  0629  1803               	skipnc
  1340  062A  0A27               	incf	??_tx_sends+1,w
  1341  062B  0085               	movwf	5
  1342  062C  0800               	movf	0,w	;code access
  1343  062D  00A8               	movwf	??_tx_sends+2
  1344  062E  0828               	movf	??_tx_sends+2,w
  1345  062F  00A0               	movwf	ringbuf_push@asciicode
  1346  0630  303F               	movlw	(low (_tx_buf| 0))& (0+255)
  1347  0631  3186  263D  3186   	fcall	_ringbuf_push
  1348  0634  3001               	movlw	1
  1349  0635  0020               	movlb	0	; select bank0
  1350  0636  00A6               	movwf	??_tx_sends
  1351  0637  0826               	movf	??_tx_sends,w
  1352  0638  07A9               	addwf	tx_sends@i,f
  1353  0639  2E13               	goto	l1846
  1354  063A                     l159:	
  1355                           
  1356                           ;My_header_16F.h: 170: }
  1357                           ;My_header_16F.h: 171: PIE1bits.TXIE = 1;
  1358  063A  0021               	movlb	1	; select bank1
  1359  063B  1611               	bsf	17,4	;volatile
  1360  063C  0008               	return
  1361  063D                     __end_of_tx_sends:	
  1362                           
  1363                           	psect	text2
  1364  0F79                     __ptext2:	
  1365 ;; *************** function _tx_send *****************
  1366 ;; Defined at:
  1367 ;;		line 161 in file "My_header_16F.h"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;  asciicode       1    wreg     unsigned char 
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;  asciicode       1    5[BANK0 ] unsigned char 
  1372 ;; Return value:  Size  Location     Type
  1373 ;;		None               void
  1374 ;; Registers used:
  1375 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1381 ;;      Params:         0       0       0       0       0       0
  1382 ;;      Locals:         0       1       0       0       0       0
  1383 ;;      Temps:          0       1       0       0       0       0
  1384 ;;      Totals:         0       2       0       0       0       0
  1385 ;;Total ram usage:        2 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:    4
  1388 ;; This function calls:
  1389 ;;		_ringbuf_push
  1390 ;; This function is called by:
  1391 ;;		_main
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           
  1396                           ;psect for function _tx_send
  1397  0F79                     _tx_send:	
  1398                           
  1399                           ;incstack = 0
  1400                           ; Regs used in _tx_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1401                           ;tx_send@asciicode stored from wreg
  1402  0F79  0020               	movlb	0	; select bank0
  1403  0F7A  00A5               	movwf	tx_send@asciicode
  1404                           
  1405                           ;My_header_16F.h: 162: ringbuf_push(&tx_buf, asciicode);
  1406  0F7B  0825               	movf	tx_send@asciicode,w
  1407  0F7C  00A4               	movwf	??_tx_send
  1408  0F7D  0824               	movf	??_tx_send,w
  1409  0F7E  00A0               	movwf	ringbuf_push@asciicode
  1410  0F7F  303F               	movlw	(low (_tx_buf| 0))& (0+255)
  1411  0F80  3186  263D         	fcall	_ringbuf_push
  1412                           
  1413                           ;My_header_16F.h: 163: PIE1bits.TXIE = 1;
  1414  0F82  0021               	movlb	1	; select bank1
  1415  0F83  1611               	bsf	17,4	;volatile
  1416  0F84  0008               	return
  1417  0F85                     __end_of_tx_send:	
  1418                           
  1419                           	psect	text3
  1420  063D                     __ptext3:	
  1421 ;; *************** function _ringbuf_push *****************
  1422 ;; Defined at:
  1423 ;;		line 120 in file "My_header_16F.h"
  1424 ;; Parameters:    Size  Location     Type
  1425 ;;  rb              1    wreg     PTR struct ringbuf
  1426 ;;		 -> tx_buf(4), 
  1427 ;;  asciicode       1    0[BANK0 ] unsigned char 
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;  rb              1    3[BANK0 ] PTR struct ringbuf
  1430 ;;		 -> tx_buf(4), 
  1431 ;; Return value:  Size  Location     Type
  1432 ;;		None               void
  1433 ;; Registers used:
  1434 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1440 ;;      Params:         0       1       0       0       0       0
  1441 ;;      Locals:         0       1       0       0       0       0
  1442 ;;      Temps:          0       2       0       0       0       0
  1443 ;;      Totals:         0       4       0       0       0       0
  1444 ;;Total ram usage:        4 bytes
  1445 ;; Hardware stack levels used:    1
  1446 ;; Hardware stack levels required when called:    3
  1447 ;; This function calls:
  1448 ;;		Nothing
  1449 ;; This function is called by:
  1450 ;;		_tx_send
  1451 ;;		_tx_sends
  1452 ;; This function uses a non-reentrant model
  1453 ;;
  1454                           
  1455                           
  1456                           ;psect for function _ringbuf_push
  1457  063D                     _ringbuf_push:	
  1458                           
  1459                           ;incstack = 0
  1460                           ; Regs used in _ringbuf_push: [wreg-fsr1h+status,2+status,0]
  1461                           ;ringbuf_push@rb stored from wreg
  1462  063D  0020               	movlb	0	; select bank0
  1463  063E  00A3               	movwf	ringbuf_push@rb
  1464                           
  1465                           ;My_header_16F.h: 121: rb->buf[rb->head] = asciicode;
  1466  063F  0820               	movf	ringbuf_push@asciicode,w
  1467  0640  00A1               	movwf	??_ringbuf_push
  1468  0641  0823               	movf	ringbuf_push@rb,w
  1469  0642  0086               	movwf	6
  1470  0643  0187               	clrf	7
  1471  0644  0823               	movf	ringbuf_push@rb,w
  1472  0645  3E02               	addlw	2
  1473  0646  0084               	movwf	4
  1474  0647  0185               	clrf	5
  1475  0648  0800               	movf	0,w
  1476  0649  0701               	addwf	1,w
  1477  064A  00A2               	movwf	??_ringbuf_push+1
  1478  064B  0822               	movf	??_ringbuf_push+1,w
  1479  064C  0086               	movwf	6
  1480  064D  0187               	clrf	7
  1481  064E  0821               	movf	??_ringbuf_push,w
  1482  064F  0081               	movwf	1
  1483                           
  1484                           ;My_header_16F.h: 122: rb->head++;
  1485  0650  3001               	movlw	1
  1486  0651  00A1               	movwf	??_ringbuf_push
  1487  0652  0823               	movf	ringbuf_push@rb,w
  1488  0653  3E02               	addlw	2
  1489  0654  0086               	movwf	6
  1490  0655  0187               	clrf	7
  1491  0656  0821               	movf	??_ringbuf_push,w
  1492  0657  0781               	addwf	1,f
  1493                           
  1494                           ;My_header_16F.h: 123: if (rb->head >= rb->size) {
  1495  0658  0823               	movf	ringbuf_push@rb,w
  1496  0659  3E02               	addlw	2
  1497  065A  0086               	movwf	6
  1498  065B  0187               	clrf	7
  1499  065C  0A23               	incf	ringbuf_push@rb,w
  1500  065D  0084               	movwf	4
  1501  065E  0185               	clrf	5
  1502  065F  0800               	movf	0,w
  1503  0660  0201               	subwf	1,w
  1504  0661  1C03               	skipc
  1505  0662  0008               	return
  1506                           
  1507                           ;My_header_16F.h: 124: rb->head = 0;
  1508  0663  0823               	movf	ringbuf_push@rb,w
  1509  0664  3E02               	addlw	2
  1510  0665  0086               	movwf	6
  1511  0666  0187               	clrf	7
  1512  0667  0181               	clrf	1
  1513  0668  0008               	return
  1514  0669                     __end_of_ringbuf_push:	
  1515                           
  1516                           	psect	text4
  1517  01C4                     __ptext4:	
  1518 ;; *************** function _timeset *****************
  1519 ;; Defined at:
  1520 ;;		line 77 in file "PIC16F1827-I2C_LCD_RTC01.c"
  1521 ;; Parameters:    Size  Location     Type
  1522 ;;  value           1    wreg     PTR unsigned char 
  1523 ;;		 -> YY(1), MM(1), DD(1), hh(1), 
  1524 ;;		 -> mm(1), ss(1), 
  1525 ;;  min_num         1   13[BANK0 ] unsigned char 
  1526 ;;  max_num         1   14[BANK0 ] unsigned char 
  1527 ;;  Reg             1   15[BANK0 ] unsigned char 
  1528 ;;  column          1   16[BANK0 ] unsigned char 
  1529 ;;  row             1   17[BANK0 ] unsigned char 
  1530 ;; Auto vars:     Size  Location     Type
  1531 ;;  value           1   26[BANK0 ] PTR unsigned char 
  1532 ;;		 -> YY(1), MM(1), DD(1), hh(1), 
  1533 ;;		 -> mm(1), ss(1), 
  1534 ;;  t               1   25[BANK0 ] unsigned char 
  1535 ;;  t               1   24[BANK0 ] unsigned char 
  1536 ;; Return value:  Size  Location     Type
  1537 ;;		None               void
  1538 ;; Registers used:
  1539 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1540 ;; Tracked objects:
  1541 ;;		On entry : 0/0
  1542 ;;		On exit  : 0/0
  1543 ;;		Unchanged: 0/0
  1544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1545 ;;      Params:         0       5       0       0       0       0
  1546 ;;      Locals:         0       3       0       0       0       0
  1547 ;;      Temps:          0       6       0       0       0       0
  1548 ;;      Totals:         0      14       0       0       0       0
  1549 ;;Total ram usage:       14 bytes
  1550 ;; Hardware stack levels used:    1
  1551 ;; Hardware stack levels required when called:    8
  1552 ;; This function calls:
  1553 ;;		_LCD_Putc
  1554 ;;		_LCD_Puts
  1555 ;;		_LCD_SetCursor
  1556 ;;		_RTC_Read
  1557 ;;		_RTC_Write
  1558 ;;		___awdiv
  1559 ;;		___awmod
  1560 ;;		___bmul
  1561 ;;		_display
  1562 ;; This function is called by:
  1563 ;;		_main
  1564 ;; This function uses a non-reentrant model
  1565 ;;
  1566                           
  1567                           
  1568                           ;psect for function _timeset
  1569  01C4                     _timeset:	
  1570                           
  1571                           ;incstack = 0
  1572                           ; Regs used in _timeset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1573                           ;timeset@value stored from wreg
  1574  01C4  0020               	movlb	0	; select bank0
  1575  01C5  00BA               	movwf	timeset@value
  1576                           
  1577                           ;PIC16F1827-I2C_LCD_RTC01.c: 78: sw_RA0.flags = 0;
  1578  01C6  01C5               	clrf	_sw_RA0+2
  1579                           
  1580                           ;PIC16F1827-I2C_LCD_RTC01.c: 79: sw_RA1.flags = 0;
  1581  01C7  01FB               	clrf	_sw_RA1+2
  1582  01C8                     l1962:	
  1583                           ;PIC16F1827-I2C_LCD_RTC01.c: 80: while (!sw_RA0.flag.press) {
  1584                           
  1585  01C8  0020               	movlb	0	; select bank0
  1586  01C9  1845               	btfsc	_sw_RA0+2,0
  1587  01CA  2B17               	goto	l1964
  1588                           
  1589                           ;PIC16F1827-I2C_LCD_RTC01.c: 81: if (cnt_t1 % 16 >= 8) {
  1590  01CB  300F               	movlw	15
  1591  01CC  0578               	andwf	_cnt_t1,w
  1592  01CD  00B2               	movwf	??_timeset
  1593  01CE  3008               	movlw	8
  1594  01CF  0232               	subwf	??_timeset,w
  1595  01D0  1C03               	skipc
  1596  01D1  29E3               	goto	l1928
  1597                           
  1598                           ;PIC16F1827-I2C_LCD_RTC01.c: 82: LCD_SetCursor(column, row);
  1599  01D2  0831               	movf	timeset@row,w
  1600  01D3  00B2               	movwf	??_timeset
  1601  01D4  0832               	movf	??_timeset,w
  1602  01D5  00A7               	movwf	LCD_SetCursor@row
  1603  01D6  0830               	movf	timeset@column,w
  1604  01D7  318F  27A3  3181   	fcall	_LCD_SetCursor
  1605                           
  1606                           ;PIC16F1827-I2C_LCD_RTC01.c: 83: LCD_Puts("  ");
  1607  01DA  3001               	movlw	low (STR_1| (0+32768))
  1608  01DB  0020               	movlb	0	; select bank0
  1609  01DC  00A4               	movwf	LCD_Puts@s
  1610  01DD  3088               	movlw	high (STR_1| (0+32768))
  1611  01DE  00A5               	movwf	LCD_Puts@s+1
  1612  01DF  3185  25DE  3181   	fcall	_LCD_Puts
  1613                           
  1614                           ;PIC16F1827-I2C_LCD_RTC01.c: 84: } else {
  1615  01E2  2A1D               	goto	l1930
  1616  01E3                     l1928:	
  1617                           
  1618                           ;PIC16F1827-I2C_LCD_RTC01.c: 85: *value = RTC_Read(Reg);
  1619  01E3  0020               	movlb	0	; select bank0
  1620  01E4  082F               	movf	timeset@Reg,w
  1621  01E5  3185  25A6  3181   	fcall	_RTC_Read
  1622  01E8  0020               	movlb	0	; select bank0
  1623  01E9  00B2               	movwf	??_timeset
  1624  01EA  083A               	movf	timeset@value,w
  1625  01EB  0086               	movwf	6
  1626  01EC  0187               	clrf	7
  1627  01ED  0832               	movf	??_timeset,w
  1628  01EE  0081               	movwf	1
  1629                           
  1630                           ;PIC16F1827-I2C_LCD_RTC01.c: 86: display();
  1631  01EF  3183  2319  3181   	fcall	_display
  1632                           
  1633                           ;PIC16F1827-I2C_LCD_RTC01.c: 87: LCD_SetCursor(column, row);
  1634  01F2  0020               	movlb	0	; select bank0
  1635  01F3  0831               	movf	timeset@row,w
  1636  01F4  00B2               	movwf	??_timeset
  1637  01F5  0832               	movf	??_timeset,w
  1638  01F6  00A7               	movwf	LCD_SetCursor@row
  1639  01F7  0830               	movf	timeset@column,w
  1640  01F8  318F  27A3  3181   	fcall	_LCD_SetCursor
  1641                           
  1642                           ;PIC16F1827-I2C_LCD_RTC01.c: 88: LCD_Putc(*value / 16 + '0');
  1643  01FB  3010               	movlw	16
  1644  01FC  0020               	movlb	0	; select bank0
  1645  01FD  00A0               	movwf	___awdiv@divisor
  1646  01FE  3000               	movlw	0
  1647  01FF  00A1               	movwf	___awdiv@divisor+1
  1648  0200  083A               	movf	timeset@value,w
  1649  0201  0086               	movwf	6
  1650  0202  0187               	clrf	7
  1651  0203  0801               	movf	1,w
  1652  0204  00B2               	movwf	??_timeset
  1653  0205  01B3               	clrf	??_timeset+1
  1654  0206  0832               	movf	??_timeset,w
  1655  0207  00A2               	movwf	___awdiv@dividend
  1656  0208  0833               	movf	??_timeset+1,w
  1657  0209  00A3               	movwf	___awdiv@dividend+1
  1658  020A  3184  24CB  3181   	fcall	___awdiv
  1659  020D  0020               	movlb	0	; select bank0
  1660  020E  0820               	movf	?___awdiv,w
  1661  020F  3E30               	addlw	48
  1662  0210  3187  270B  3181   	fcall	_LCD_Putc
  1663                           
  1664                           ;PIC16F1827-I2C_LCD_RTC01.c: 89: LCD_Putc(*value % 16 + '0');
  1665  0213  0020               	movlb	0	; select bank0
  1666  0214  083A               	movf	timeset@value,w
  1667  0215  0086               	movwf	6
  1668  0216  0187               	clrf	7
  1669  0217  0801               	movf	1,w
  1670  0218  390F               	andlw	15
  1671  0219  3E30               	addlw	48
  1672  021A  3187  270B  3181   	fcall	_LCD_Putc
  1673  021D                     l1930:	
  1674                           
  1675                           ;PIC16F1827-I2C_LCD_RTC01.c: 90: }
  1676                           ;PIC16F1827-I2C_LCD_RTC01.c: 91: if (sw_RA1.flag.press) {
  1677  021D  1C7B               	btfss	_sw_RA1+2,0
  1678  021E  2A8A               	goto	l1946
  1679                           
  1680                           ;PIC16F1827-I2C_LCD_RTC01.c: 92: sw_RA1.flag.press = 0;
  1681  021F  107B               	bcf	_sw_RA1+2,0
  1682                           
  1683                           ;PIC16F1827-I2C_LCD_RTC01.c: 93: uint8_t t = *value % 16 + (*value / 16)*10;
  1684  0220  0020               	movlb	0	; select bank0
  1685  0221  083A               	movf	timeset@value,w
  1686  0222  0086               	movwf	6
  1687  0223  0187               	clrf	7
  1688  0224  300F               	movlw	15
  1689  0225  0501               	andwf	1,w
  1690  0226  00B2               	movwf	??_timeset
  1691  0227  300A               	movlw	10
  1692  0228  00B3               	movwf	??_timeset+1
  1693  0229  0833               	movf	??_timeset+1,w
  1694  022A  00A9               	movwf	___bmul@multiplicand
  1695  022B  083A               	movf	timeset@value,w
  1696  022C  0086               	movwf	6
  1697  022D  0187               	clrf	7
  1698  022E  0801               	movf	1,w
  1699  022F  00B4               	movwf	??_timeset+2
  1700  0230  01B5               	clrf	??_timeset+3
  1701  0231  0834               	movf	??_timeset+2,w
  1702  0232  00A2               	movwf	___awdiv@dividend
  1703  0233  0835               	movf	??_timeset+3,w
  1704  0234  00A3               	movwf	___awdiv@dividend+1
  1705  0235  3010               	movlw	16
  1706  0236  00A0               	movwf	___awdiv@divisor
  1707  0237  3000               	movlw	0
  1708  0238  00A1               	movwf	___awdiv@divisor+1
  1709  0239  3184  24CB  3181   	fcall	___awdiv
  1710  023C  0020               	movlb	0	; select bank0
  1711  023D  0820               	movf	?___awdiv,w
  1712  023E  318F  27C4  3181   	fcall	___bmul
  1713  0241  0020               	movlb	0	; select bank0
  1714  0242  0732               	addwf	??_timeset,w
  1715  0243  00B6               	movwf	??_timeset+4
  1716  0244  0836               	movf	??_timeset+4,w
  1717  0245  00B8               	movwf	timeset@t
  1718                           
  1719                           ;PIC16F1827-I2C_LCD_RTC01.c: 94: if (t >= max_num) {
  1720  0246  082E               	movf	timeset@max_num,w
  1721  0247  0238               	subwf	timeset@t,w
  1722  0248  1C03               	skipc
  1723  0249  2A4F               	goto	l1940
  1724                           
  1725                           ;PIC16F1827-I2C_LCD_RTC01.c: 95: t = min_num;
  1726  024A  082D               	movf	timeset@min_num,w
  1727  024B  00B2               	movwf	??_timeset
  1728  024C  0832               	movf	??_timeset,w
  1729  024D  00B8               	movwf	timeset@t
  1730                           
  1731                           ;PIC16F1827-I2C_LCD_RTC01.c: 96: } else {
  1732  024E  2A53               	goto	l1942
  1733  024F                     l1940:	
  1734                           
  1735                           ;PIC16F1827-I2C_LCD_RTC01.c: 97: t++;
  1736  024F  3001               	movlw	1
  1737  0250  00B2               	movwf	??_timeset
  1738  0251  0832               	movf	??_timeset,w
  1739  0252  07B8               	addwf	timeset@t,f
  1740  0253                     l1942:	
  1741                           
  1742                           ;PIC16F1827-I2C_LCD_RTC01.c: 98: }
  1743                           ;PIC16F1827-I2C_LCD_RTC01.c: 99: *value = t % 10 + (t / 10)* 16;
  1744  0253  300A               	movlw	10
  1745  0254  00A0               	movwf	___awdiv@divisor
  1746  0255  3000               	movlw	0
  1747  0256  00A1               	movwf	___awdiv@divisor+1
  1748  0257  0838               	movf	timeset@t,w
  1749  0258  00B2               	movwf	??_timeset
  1750  0259  01B3               	clrf	??_timeset+1
  1751  025A  0832               	movf	??_timeset,w
  1752  025B  00A2               	movwf	___awdiv@dividend
  1753  025C  0833               	movf	??_timeset+1,w
  1754  025D  00A3               	movwf	___awdiv@dividend+1
  1755  025E  3184  24CB  3181   	fcall	___awdiv
  1756  0261  0020               	movlb	0	; select bank0
  1757  0262  0820               	movf	?___awdiv,w
  1758  0263  00B4               	movwf	??_timeset+2
  1759  0264  3004               	movlw	4
  1760  0265                     u1425:	
  1761  0265  35B4               	lslf	??_timeset+2,f
  1762  0266  0B89               	decfsz	9,f
  1763  0267  2A65               	goto	u1425
  1764  0268  300A               	movlw	10
  1765  0269  00A0               	movwf	___awmod@divisor
  1766  026A  3000               	movlw	0
  1767  026B  00A1               	movwf	___awmod@divisor+1
  1768  026C  0838               	movf	timeset@t,w
  1769  026D  00B5               	movwf	??_timeset+3
  1770  026E  01B6               	clrf	??_timeset+4
  1771  026F  0835               	movf	??_timeset+3,w
  1772  0270  00A2               	movwf	___awmod@dividend
  1773  0271  0836               	movf	??_timeset+4,w
  1774  0272  00A3               	movwf	___awmod@dividend+1
  1775  0273  3185  251D  3181   	fcall	___awmod
  1776  0276  0020               	movlb	0	; select bank0
  1777  0277  0820               	movf	?___awmod,w
  1778  0278  0734               	addwf	??_timeset+2,w
  1779  0279  00B7               	movwf	??_timeset+5
  1780  027A  083A               	movf	timeset@value,w
  1781  027B  0086               	movwf	6
  1782  027C  0187               	clrf	7
  1783  027D  0837               	movf	??_timeset+5,w
  1784  027E  0081               	movwf	1
  1785                           
  1786                           ;PIC16F1827-I2C_LCD_RTC01.c: 100: RTC_Write(Reg, *value);
  1787  027F  083A               	movf	timeset@value,w
  1788  0280  0086               	movwf	6
  1789  0281  0187               	clrf	7
  1790  0282  0801               	movf	1,w
  1791  0283  00B2               	movwf	??_timeset
  1792  0284  0832               	movf	??_timeset,w
  1793  0285  00A4               	movwf	RTC_Write@data
  1794  0286  082F               	movf	timeset@Reg,w
  1795  0287  3187  272B  3181   	fcall	_RTC_Write
  1796  028A                     l1946:	
  1797                           
  1798                           ;PIC16F1827-I2C_LCD_RTC01.c: 101: }
  1799                           ;PIC16F1827-I2C_LCD_RTC01.c: 102: if (sw_RA1.flag.long_holding_1) {
  1800  028A  1EFB               	btfss	_sw_RA1+2,5
  1801  028B  29C8               	goto	l1962
  1802                           
  1803                           ;PIC16F1827-I2C_LCD_RTC01.c: 103: sw_RA1.flag.long_holding_1 = 0;
  1804  028C  12FB               	bcf	_sw_RA1+2,5
  1805                           
  1806                           ;PIC16F1827-I2C_LCD_RTC01.c: 104: uint8_t t = *value % 16 + (*value / 16)*10;
  1807  028D  0020               	movlb	0	; select bank0
  1808  028E  083A               	movf	timeset@value,w
  1809  028F  0086               	movwf	6
  1810  0290  0187               	clrf	7
  1811  0291  300F               	movlw	15
  1812  0292  0501               	andwf	1,w
  1813  0293  00B2               	movwf	??_timeset
  1814  0294  300A               	movlw	10
  1815  0295  00B3               	movwf	??_timeset+1
  1816  0296  0833               	movf	??_timeset+1,w
  1817  0297  00A9               	movwf	___bmul@multiplicand
  1818  0298  083A               	movf	timeset@value,w
  1819  0299  0086               	movwf	6
  1820  029A  0187               	clrf	7
  1821  029B  0801               	movf	1,w
  1822  029C  00B4               	movwf	??_timeset+2
  1823  029D  01B5               	clrf	??_timeset+3
  1824  029E  0834               	movf	??_timeset+2,w
  1825  029F  00A2               	movwf	___awdiv@dividend
  1826  02A0  0835               	movf	??_timeset+3,w
  1827  02A1  00A3               	movwf	___awdiv@dividend+1
  1828  02A2  3010               	movlw	16
  1829  02A3  00A0               	movwf	___awdiv@divisor
  1830  02A4  3000               	movlw	0
  1831  02A5  00A1               	movwf	___awdiv@divisor+1
  1832  02A6  3184  24CB  3181   	fcall	___awdiv
  1833  02A9  0020               	movlb	0	; select bank0
  1834  02AA  0820               	movf	?___awdiv,w
  1835  02AB  318F  27C4  3181   	fcall	___bmul
  1836  02AE  0020               	movlb	0	; select bank0
  1837  02AF  0732               	addwf	??_timeset,w
  1838  02B0  00B6               	movwf	??_timeset+4
  1839  02B1  0836               	movf	??_timeset+4,w
  1840  02B2  00B9               	movwf	timeset@t_599
  1841                           
  1842                           ;PIC16F1827-I2C_LCD_RTC01.c: 105: if (t + 9 >= max_num) {
  1843  02B3  0839               	movf	timeset@t_599,w
  1844  02B4  3E09               	addlw	9
  1845  02B5  00B2               	movwf	??_timeset
  1846  02B6  3000               	movlw	0
  1847  02B7  1803               	skipnc
  1848  02B8  3001               	movlw	1
  1849  02B9  00B3               	movwf	??_timeset+1
  1850  02BA  0833               	movf	??_timeset+1,w
  1851  02BB  3A80               	xorlw	128
  1852  02BC  00B4               	movwf	??_timeset+2
  1853  02BD  3080               	movlw	128
  1854  02BE  0234               	subwf	??_timeset+2,w
  1855  02BF  1D03               	skipz
  1856  02C0  2AC3               	goto	u1445
  1857  02C1  082E               	movf	timeset@max_num,w
  1858  02C2  0232               	subwf	??_timeset,w
  1859  02C3                     u1445:	
  1860  02C3  1C03               	skipc
  1861  02C4  2ADA               	goto	l1956
  1862                           
  1863                           ;PIC16F1827-I2C_LCD_RTC01.c: 106: t = t % 10;
  1864  02C5  300A               	movlw	10
  1865  02C6  0020               	movlb	0	; select bank0
  1866  02C7  00A0               	movwf	___awmod@divisor
  1867  02C8  3000               	movlw	0
  1868  02C9  00A1               	movwf	___awmod@divisor+1
  1869  02CA  0839               	movf	timeset@t_599,w
  1870  02CB  00B2               	movwf	??_timeset
  1871  02CC  01B3               	clrf	??_timeset+1
  1872  02CD  0832               	movf	??_timeset,w
  1873  02CE  00A2               	movwf	___awmod@dividend
  1874  02CF  0833               	movf	??_timeset+1,w
  1875  02D0  00A3               	movwf	___awmod@dividend+1
  1876  02D1  3185  251D  3181   	fcall	___awmod
  1877  02D4  0020               	movlb	0	; select bank0
  1878  02D5  0820               	movf	?___awmod,w
  1879  02D6  00B4               	movwf	??_timeset+2
  1880  02D7  0834               	movf	??_timeset+2,w
  1881  02D8  00B9               	movwf	timeset@t_599
  1882                           
  1883                           ;PIC16F1827-I2C_LCD_RTC01.c: 107: } else {
  1884  02D9  2ADF               	goto	l1958
  1885  02DA                     l1956:	
  1886                           
  1887                           ;PIC16F1827-I2C_LCD_RTC01.c: 108: t += 10;
  1888  02DA  300A               	movlw	10
  1889  02DB  0020               	movlb	0	; select bank0
  1890  02DC  00B2               	movwf	??_timeset
  1891  02DD  0832               	movf	??_timeset,w
  1892  02DE  07B9               	addwf	timeset@t_599,f
  1893  02DF                     l1958:	
  1894                           
  1895                           ;PIC16F1827-I2C_LCD_RTC01.c: 109: }
  1896                           ;PIC16F1827-I2C_LCD_RTC01.c: 110: *value = t % 10 + (t / 10)* 16;
  1897  02DF  300A               	movlw	10
  1898  02E0  00A0               	movwf	___awdiv@divisor
  1899  02E1  3000               	movlw	0
  1900  02E2  00A1               	movwf	___awdiv@divisor+1
  1901  02E3  0839               	movf	timeset@t_599,w
  1902  02E4  00B2               	movwf	??_timeset
  1903  02E5  01B3               	clrf	??_timeset+1
  1904  02E6  0832               	movf	??_timeset,w
  1905  02E7  00A2               	movwf	___awdiv@dividend
  1906  02E8  0833               	movf	??_timeset+1,w
  1907  02E9  00A3               	movwf	___awdiv@dividend+1
  1908  02EA  3184  24CB  3181   	fcall	___awdiv
  1909  02ED  0020               	movlb	0	; select bank0
  1910  02EE  0820               	movf	?___awdiv,w
  1911  02EF  00B4               	movwf	??_timeset+2
  1912  02F0  3004               	movlw	4
  1913  02F1                     u1455:	
  1914  02F1  35B4               	lslf	??_timeset+2,f
  1915  02F2  0B89               	decfsz	9,f
  1916  02F3  2AF1               	goto	u1455
  1917  02F4  300A               	movlw	10
  1918  02F5  00A0               	movwf	___awmod@divisor
  1919  02F6  3000               	movlw	0
  1920  02F7  00A1               	movwf	___awmod@divisor+1
  1921  02F8  0839               	movf	timeset@t_599,w
  1922  02F9  00B5               	movwf	??_timeset+3
  1923  02FA  01B6               	clrf	??_timeset+4
  1924  02FB  0835               	movf	??_timeset+3,w
  1925  02FC  00A2               	movwf	___awmod@dividend
  1926  02FD  0836               	movf	??_timeset+4,w
  1927  02FE  00A3               	movwf	___awmod@dividend+1
  1928  02FF  3185  251D  3181   	fcall	___awmod
  1929  0302  0020               	movlb	0	; select bank0
  1930  0303  0820               	movf	?___awmod,w
  1931  0304  0734               	addwf	??_timeset+2,w
  1932  0305  00B7               	movwf	??_timeset+5
  1933  0306  083A               	movf	timeset@value,w
  1934  0307  0086               	movwf	6
  1935  0308  0187               	clrf	7
  1936  0309  0837               	movf	??_timeset+5,w
  1937  030A  0081               	movwf	1
  1938                           
  1939                           ;PIC16F1827-I2C_LCD_RTC01.c: 111: RTC_Write(Reg, *value);
  1940  030B  083A               	movf	timeset@value,w
  1941  030C  0086               	movwf	6
  1942  030D  0187               	clrf	7
  1943  030E  0801               	movf	1,w
  1944  030F  00B2               	movwf	??_timeset
  1945  0310  0832               	movf	??_timeset,w
  1946  0311  00A4               	movwf	RTC_Write@data
  1947  0312  082F               	movf	timeset@Reg,w
  1948  0313  3187  272B  3181   	fcall	_RTC_Write
  1949  0316  29C8               	goto	l1962
  1950  0317                     l1964:	
  1951                           
  1952                           ;PIC16F1827-I2C_LCD_RTC01.c: 112: }
  1953                           ;PIC16F1827-I2C_LCD_RTC01.c: 113: }
  1954                           ;PIC16F1827-I2C_LCD_RTC01.c: 114: sw_RA0.flags = 0;
  1955  0317  01C5               	clrf	_sw_RA0+2
  1956  0318  0008               	return
  1957  0319                     __end_of_timeset:	
  1958                           
  1959                           	psect	text5
  1960  0319                     __ptext5:	
  1961 ;; *************** function _display *****************
  1962 ;; Defined at:
  1963 ;;		line 117 in file "PIC16F1827-I2C_LCD_RTC01.c"
  1964 ;; Parameters:    Size  Location     Type
  1965 ;;		None
  1966 ;; Auto vars:     Size  Location     Type
  1967 ;;		None
  1968 ;; Return value:  Size  Location     Type
  1969 ;;		None               void
  1970 ;; Registers used:
  1971 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1972 ;; Tracked objects:
  1973 ;;		On entry : 0/0
  1974 ;;		On exit  : 0/0
  1975 ;;		Unchanged: 0/0
  1976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1977 ;;      Params:         0       0       0       0       0       0
  1978 ;;      Locals:         0       0       0       0       0       0
  1979 ;;      Temps:          0       2       0       0       0       0
  1980 ;;      Totals:         0       2       0       0       0       0
  1981 ;;Total ram usage:        2 bytes
  1982 ;; Hardware stack levels used:    1
  1983 ;; Hardware stack levels required when called:    7
  1984 ;; This function calls:
  1985 ;;		_LCD_Putc
  1986 ;;		_LCD_SetCursor
  1987 ;;		_RTC_Read
  1988 ;;		___awdiv
  1989 ;; This function is called by:
  1990 ;;		_timeset
  1991 ;;		_main
  1992 ;; This function uses a non-reentrant model
  1993 ;;
  1994                           
  1995                           
  1996                           ;psect for function _display
  1997  0319                     _display:	
  1998                           
  1999                           ;PIC16F1827-I2C_LCD_RTC01.c: 118: ss = RTC_Read(0x00);
  2000                           
  2001                           ;incstack = 0
  2002                           ; Regs used in _display: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2003  0319  3000               	movlw	0
  2004  031A  3185  25A6  3183   	fcall	_RTC_Read
  2005  031D  0020               	movlb	0	; select bank0
  2006  031E  00AB               	movwf	??_display
  2007  031F  082B               	movf	??_display,w
  2008  0320  00CB               	movwf	_ss
  2009                           
  2010                           ;PIC16F1827-I2C_LCD_RTC01.c: 119: mm = RTC_Read(0x01);
  2011  0321  3001               	movlw	1
  2012  0322  3185  25A6  3183   	fcall	_RTC_Read
  2013  0325  0020               	movlb	0	; select bank0
  2014  0326  00AB               	movwf	??_display
  2015  0327  082B               	movf	??_display,w
  2016  0328  00CA               	movwf	_mm
  2017                           
  2018                           ;PIC16F1827-I2C_LCD_RTC01.c: 120: hh = RTC_Read(0x02);
  2019  0329  3002               	movlw	2
  2020  032A  3185  25A6  3183   	fcall	_RTC_Read
  2021  032D  0020               	movlb	0	; select bank0
  2022  032E  00AB               	movwf	??_display
  2023  032F  082B               	movf	??_display,w
  2024  0330  00C9               	movwf	_hh
  2025                           
  2026                           ;PIC16F1827-I2C_LCD_RTC01.c: 121: EE = RTC_Read(0x03);
  2027  0331  3003               	movlw	3
  2028  0332  3185  25A6  3183   	fcall	_RTC_Read
  2029  0335  0020               	movlb	0	; select bank0
  2030  0336  00AB               	movwf	??_display
  2031  0337  082B               	movf	??_display,w
  2032  0338  0021               	movlb	1	; select bank1
  2033  0339  00E6               	movwf	_EE^(0+128)
  2034                           
  2035                           ;PIC16F1827-I2C_LCD_RTC01.c: 122: DD = RTC_Read(0x04);
  2036  033A  3004               	movlw	4
  2037  033B  3185  25A6  3183   	fcall	_RTC_Read
  2038  033E  0020               	movlb	0	; select bank0
  2039  033F  00AB               	movwf	??_display
  2040  0340  082B               	movf	??_display,w
  2041  0341  00C6               	movwf	_DD
  2042                           
  2043                           ;PIC16F1827-I2C_LCD_RTC01.c: 123: MM = RTC_Read(0x05);
  2044  0342  3005               	movlw	5
  2045  0343  3185  25A6  3183   	fcall	_RTC_Read
  2046  0346  0020               	movlb	0	; select bank0
  2047  0347  00AB               	movwf	??_display
  2048  0348  082B               	movf	??_display,w
  2049  0349  00C7               	movwf	_MM
  2050                           
  2051                           ;PIC16F1827-I2C_LCD_RTC01.c: 124: YY = RTC_Read(0x06);
  2052  034A  3006               	movlw	6
  2053  034B  3185  25A6  3183   	fcall	_RTC_Read
  2054  034E  0020               	movlb	0	; select bank0
  2055  034F  00AB               	movwf	??_display
  2056  0350  082B               	movf	??_display,w
  2057  0351  00C8               	movwf	_YY
  2058                           
  2059                           ;PIC16F1827-I2C_LCD_RTC01.c: 125: LCD_SetCursor(0, 0);
  2060  0352  01A7               	clrf	LCD_SetCursor@row
  2061  0353  3000               	movlw	0
  2062  0354  318F  27A3  3183   	fcall	_LCD_SetCursor
  2063                           
  2064                           ;PIC16F1827-I2C_LCD_RTC01.c: 126: LCD_Putc(YY / 16 + '0');
  2065  0357  3010               	movlw	16
  2066  0358  0020               	movlb	0	; select bank0
  2067  0359  00A0               	movwf	___awdiv@divisor
  2068  035A  3000               	movlw	0
  2069  035B  00A1               	movwf	___awdiv@divisor+1
  2070  035C  0848               	movf	_YY,w
  2071  035D  00AB               	movwf	??_display
  2072  035E  01AC               	clrf	??_display+1
  2073  035F  082B               	movf	??_display,w
  2074  0360  00A2               	movwf	___awdiv@dividend
  2075  0361  082C               	movf	??_display+1,w
  2076  0362  00A3               	movwf	___awdiv@dividend+1
  2077  0363  3184  24CB  3183   	fcall	___awdiv
  2078  0366  0020               	movlb	0	; select bank0
  2079  0367  0820               	movf	?___awdiv,w
  2080  0368  3E30               	addlw	48
  2081  0369  3187  270B  3183   	fcall	_LCD_Putc
  2082                           
  2083                           ;PIC16F1827-I2C_LCD_RTC01.c: 127: LCD_Putc(YY % 16 + '0');
  2084  036C  0020               	movlb	0	; select bank0
  2085  036D  0848               	movf	_YY,w
  2086  036E  390F               	andlw	15
  2087  036F  3E30               	addlw	48
  2088  0370  3187  270B  3183   	fcall	_LCD_Putc
  2089                           
  2090                           ;PIC16F1827-I2C_LCD_RTC01.c: 128: LCD_Putc('/');
  2091  0373  302F               	movlw	47
  2092  0374  3187  270B  3183   	fcall	_LCD_Putc
  2093                           
  2094                           ;PIC16F1827-I2C_LCD_RTC01.c: 129: LCD_Putc(MM / 16 + '0');
  2095  0377  3010               	movlw	16
  2096  0378  0020               	movlb	0	; select bank0
  2097  0379  00A0               	movwf	___awdiv@divisor
  2098  037A  3000               	movlw	0
  2099  037B  00A1               	movwf	___awdiv@divisor+1
  2100  037C  0847               	movf	_MM,w
  2101  037D  00AB               	movwf	??_display
  2102  037E  01AC               	clrf	??_display+1
  2103  037F  082B               	movf	??_display,w
  2104  0380  00A2               	movwf	___awdiv@dividend
  2105  0381  082C               	movf	??_display+1,w
  2106  0382  00A3               	movwf	___awdiv@dividend+1
  2107  0383  3184  24CB  3183   	fcall	___awdiv
  2108  0386  0020               	movlb	0	; select bank0
  2109  0387  0820               	movf	?___awdiv,w
  2110  0388  3E30               	addlw	48
  2111  0389  3187  270B  3183   	fcall	_LCD_Putc
  2112                           
  2113                           ;PIC16F1827-I2C_LCD_RTC01.c: 130: LCD_Putc(MM % 16 + '0');
  2114  038C  0020               	movlb	0	; select bank0
  2115  038D  0847               	movf	_MM,w
  2116  038E  390F               	andlw	15
  2117  038F  3E30               	addlw	48
  2118  0390  3187  270B  3183   	fcall	_LCD_Putc
  2119                           
  2120                           ;PIC16F1827-I2C_LCD_RTC01.c: 131: LCD_Putc('/');
  2121  0393  302F               	movlw	47
  2122  0394  3187  270B  3183   	fcall	_LCD_Putc
  2123                           
  2124                           ;PIC16F1827-I2C_LCD_RTC01.c: 132: LCD_Putc(DD / 16 + '0');
  2125  0397  3010               	movlw	16
  2126  0398  0020               	movlb	0	; select bank0
  2127  0399  00A0               	movwf	___awdiv@divisor
  2128  039A  3000               	movlw	0
  2129  039B  00A1               	movwf	___awdiv@divisor+1
  2130  039C  0846               	movf	_DD,w
  2131  039D  00AB               	movwf	??_display
  2132  039E  01AC               	clrf	??_display+1
  2133  039F  082B               	movf	??_display,w
  2134  03A0  00A2               	movwf	___awdiv@dividend
  2135  03A1  082C               	movf	??_display+1,w
  2136  03A2  00A3               	movwf	___awdiv@dividend+1
  2137  03A3  3184  24CB  3183   	fcall	___awdiv
  2138  03A6  0020               	movlb	0	; select bank0
  2139  03A7  0820               	movf	?___awdiv,w
  2140  03A8  3E30               	addlw	48
  2141  03A9  3187  270B  3183   	fcall	_LCD_Putc
  2142                           
  2143                           ;PIC16F1827-I2C_LCD_RTC01.c: 133: LCD_Putc(DD % 16 + '0');
  2144  03AC  0020               	movlb	0	; select bank0
  2145  03AD  0846               	movf	_DD,w
  2146  03AE  390F               	andlw	15
  2147  03AF  3E30               	addlw	48
  2148  03B0  3187  270B  3183   	fcall	_LCD_Putc
  2149                           
  2150                           ;PIC16F1827-I2C_LCD_RTC01.c: 134: LCD_SetCursor(0, 1);
  2151  03B3  0020               	movlb	0	; select bank0
  2152  03B4  01A7               	clrf	LCD_SetCursor@row
  2153  03B5  0AA7               	incf	LCD_SetCursor@row,f
  2154  03B6  3000               	movlw	0
  2155  03B7  318F  27A3  3183   	fcall	_LCD_SetCursor
  2156                           
  2157                           ;PIC16F1827-I2C_LCD_RTC01.c: 135: LCD_Putc(hh / 16 + '0');
  2158  03BA  3010               	movlw	16
  2159  03BB  0020               	movlb	0	; select bank0
  2160  03BC  00A0               	movwf	___awdiv@divisor
  2161  03BD  3000               	movlw	0
  2162  03BE  00A1               	movwf	___awdiv@divisor+1
  2163  03BF  0849               	movf	_hh,w
  2164  03C0  00AB               	movwf	??_display
  2165  03C1  01AC               	clrf	??_display+1
  2166  03C2  082B               	movf	??_display,w
  2167  03C3  00A2               	movwf	___awdiv@dividend
  2168  03C4  082C               	movf	??_display+1,w
  2169  03C5  00A3               	movwf	___awdiv@dividend+1
  2170  03C6  3184  24CB  3183   	fcall	___awdiv
  2171  03C9  0020               	movlb	0	; select bank0
  2172  03CA  0820               	movf	?___awdiv,w
  2173  03CB  3E30               	addlw	48
  2174  03CC  3187  270B  3183   	fcall	_LCD_Putc
  2175                           
  2176                           ;PIC16F1827-I2C_LCD_RTC01.c: 136: LCD_Putc(hh % 16 + '0');
  2177  03CF  0020               	movlb	0	; select bank0
  2178  03D0  0849               	movf	_hh,w
  2179  03D1  390F               	andlw	15
  2180  03D2  3E30               	addlw	48
  2181  03D3  3187  270B  3183   	fcall	_LCD_Putc
  2182                           
  2183                           ;PIC16F1827-I2C_LCD_RTC01.c: 137: LCD_Putc(':');
  2184  03D6  303A               	movlw	58
  2185  03D7  3187  270B  3183   	fcall	_LCD_Putc
  2186                           
  2187                           ;PIC16F1827-I2C_LCD_RTC01.c: 138: LCD_Putc(mm / 16 + '0');
  2188  03DA  3010               	movlw	16
  2189  03DB  0020               	movlb	0	; select bank0
  2190  03DC  00A0               	movwf	___awdiv@divisor
  2191  03DD  3000               	movlw	0
  2192  03DE  00A1               	movwf	___awdiv@divisor+1
  2193  03DF  084A               	movf	_mm,w
  2194  03E0  00AB               	movwf	??_display
  2195  03E1  01AC               	clrf	??_display+1
  2196  03E2  082B               	movf	??_display,w
  2197  03E3  00A2               	movwf	___awdiv@dividend
  2198  03E4  082C               	movf	??_display+1,w
  2199  03E5  00A3               	movwf	___awdiv@dividend+1
  2200  03E6  3184  24CB  3183   	fcall	___awdiv
  2201  03E9  0020               	movlb	0	; select bank0
  2202  03EA  0820               	movf	?___awdiv,w
  2203  03EB  3E30               	addlw	48
  2204  03EC  3187  270B  3183   	fcall	_LCD_Putc
  2205                           
  2206                           ;PIC16F1827-I2C_LCD_RTC01.c: 139: LCD_Putc(mm % 16 + '0');
  2207  03EF  0020               	movlb	0	; select bank0
  2208  03F0  084A               	movf	_mm,w
  2209  03F1  390F               	andlw	15
  2210  03F2  3E30               	addlw	48
  2211  03F3  3187  270B  3183   	fcall	_LCD_Putc
  2212                           
  2213                           ;PIC16F1827-I2C_LCD_RTC01.c: 140: LCD_Putc('-');
  2214  03F6  302D               	movlw	45
  2215  03F7  3187  270B  3183   	fcall	_LCD_Putc
  2216                           
  2217                           ;PIC16F1827-I2C_LCD_RTC01.c: 141: LCD_Putc(ss / 16 + '0');
  2218  03FA  3010               	movlw	16
  2219  03FB  0020               	movlb	0	; select bank0
  2220  03FC  00A0               	movwf	___awdiv@divisor
  2221  03FD  3000               	movlw	0
  2222  03FE  00A1               	movwf	___awdiv@divisor+1
  2223  03FF  084B               	movf	_ss,w
  2224  0400  00AB               	movwf	??_display
  2225  0401  01AC               	clrf	??_display+1
  2226  0402  082B               	movf	??_display,w
  2227  0403  00A2               	movwf	___awdiv@dividend
  2228  0404  082C               	movf	??_display+1,w
  2229  0405  00A3               	movwf	___awdiv@dividend+1
  2230  0406  3184  24CB  3183   	fcall	___awdiv
  2231  0409  0020               	movlb	0	; select bank0
  2232  040A  0820               	movf	?___awdiv,w
  2233  040B  3E30               	addlw	48
  2234  040C  3187  270B  3183   	fcall	_LCD_Putc
  2235                           
  2236                           ;PIC16F1827-I2C_LCD_RTC01.c: 142: LCD_Putc(ss % 16 + '0');
  2237  040F  0020               	movlb	0	; select bank0
  2238  0410  084B               	movf	_ss,w
  2239  0411  390F               	andlw	15
  2240  0412  3E30               	addlw	48
  2241  0413  3187  270B         	fcall	_LCD_Putc
  2242  0415  0008               	return
  2243  0416                     __end_of_display:	
  2244                           
  2245                           	psect	text6
  2246  04CB                     __ptext6:	
  2247 ;; *************** function ___awdiv *****************
  2248 ;; Defined at:
  2249 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  2250 ;; Parameters:    Size  Location     Type
  2251 ;;  divisor         2    0[BANK0 ] int 
  2252 ;;  dividend        2    2[BANK0 ] int 
  2253 ;; Auto vars:     Size  Location     Type
  2254 ;;  quotient        2    7[BANK0 ] int 
  2255 ;;  sign            1    6[BANK0 ] unsigned char 
  2256 ;;  counter         1    5[BANK0 ] unsigned char 
  2257 ;; Return value:  Size  Location     Type
  2258 ;;                  2    0[BANK0 ] int 
  2259 ;; Registers used:
  2260 ;;		wreg, status,2, status,0
  2261 ;; Tracked objects:
  2262 ;;		On entry : 0/0
  2263 ;;		On exit  : 0/0
  2264 ;;		Unchanged: 0/0
  2265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2266 ;;      Params:         0       4       0       0       0       0
  2267 ;;      Locals:         0       4       0       0       0       0
  2268 ;;      Temps:          0       1       0       0       0       0
  2269 ;;      Totals:         0       9       0       0       0       0
  2270 ;;Total ram usage:        9 bytes
  2271 ;; Hardware stack levels used:    1
  2272 ;; Hardware stack levels required when called:    3
  2273 ;; This function calls:
  2274 ;;		Nothing
  2275 ;; This function is called by:
  2276 ;;		_timeset
  2277 ;;		_display
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281                           
  2282                           ;psect for function ___awdiv
  2283  04CB                     ___awdiv:	
  2284                           
  2285                           ;incstack = 0
  2286                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2287  04CB  0020               	movlb	0	; select bank0
  2288  04CC  01A6               	clrf	___awdiv@sign
  2289  04CD  1FA1               	btfss	___awdiv@divisor+1,7
  2290  04CE  2CD6               	goto	l1600
  2291  04CF  09A0               	comf	___awdiv@divisor,f
  2292  04D0  09A1               	comf	___awdiv@divisor+1,f
  2293  04D1  0AA0               	incf	___awdiv@divisor,f
  2294  04D2  1903               	skipnz
  2295  04D3  0AA1               	incf	___awdiv@divisor+1,f
  2296  04D4  01A6               	clrf	___awdiv@sign
  2297  04D5  0AA6               	incf	___awdiv@sign,f
  2298  04D6                     l1600:	
  2299  04D6  1FA3               	btfss	___awdiv@dividend+1,7
  2300  04D7  2CE1               	goto	l1606
  2301  04D8  09A2               	comf	___awdiv@dividend,f
  2302  04D9  09A3               	comf	___awdiv@dividend+1,f
  2303  04DA  0AA2               	incf	___awdiv@dividend,f
  2304  04DB  1903               	skipnz
  2305  04DC  0AA3               	incf	___awdiv@dividend+1,f
  2306  04DD  3001               	movlw	1
  2307  04DE  00A4               	movwf	??___awdiv
  2308  04DF  0824               	movf	??___awdiv,w
  2309  04E0  06A6               	xorwf	___awdiv@sign,f
  2310  04E1                     l1606:	
  2311  04E1  01A7               	clrf	___awdiv@quotient
  2312  04E2  01A8               	clrf	___awdiv@quotient+1
  2313  04E3  0820               	movf	___awdiv@divisor,w
  2314  04E4  0421               	iorwf	___awdiv@divisor+1,w
  2315  04E5  1903               	btfsc	3,2
  2316  04E6  2D10               	goto	l1628
  2317  04E7  01A5               	clrf	___awdiv@counter
  2318  04E8  0AA5               	incf	___awdiv@counter,f
  2319  04E9                     l1616:	
  2320  04E9  1BA1               	btfsc	___awdiv@divisor+1,7
  2321  04EA  2CF5               	goto	l1618
  2322  04EB  3001               	movlw	1
  2323  04EC                     u985:	
  2324  04EC  35A0               	lslf	___awdiv@divisor,f
  2325  04ED  0DA1               	rlf	___awdiv@divisor+1,f
  2326  04EE  0B89               	decfsz	9,f
  2327  04EF  2CEC               	goto	u985
  2328  04F0  3001               	movlw	1
  2329  04F1  00A4               	movwf	??___awdiv
  2330  04F2  0824               	movf	??___awdiv,w
  2331  04F3  07A5               	addwf	___awdiv@counter,f
  2332  04F4  2CE9               	goto	l1616
  2333  04F5                     l1618:	
  2334  04F5  3001               	movlw	1
  2335  04F6                     u1005:	
  2336  04F6  35A7               	lslf	___awdiv@quotient,f
  2337  04F7  0DA8               	rlf	___awdiv@quotient+1,f
  2338  04F8  0B89               	decfsz	9,f
  2339  04F9  2CF6               	goto	u1005
  2340  04FA  0821               	movf	___awdiv@divisor+1,w
  2341  04FB  0223               	subwf	___awdiv@dividend+1,w
  2342  04FC  1D03               	skipz
  2343  04FD  2D00               	goto	u1015
  2344  04FE  0820               	movf	___awdiv@divisor,w
  2345  04FF  0222               	subwf	___awdiv@dividend,w
  2346  0500                     u1015:	
  2347  0500  1C03               	skipc
  2348  0501  2D07               	goto	l1624
  2349  0502  0820               	movf	___awdiv@divisor,w
  2350  0503  02A2               	subwf	___awdiv@dividend,f
  2351  0504  0821               	movf	___awdiv@divisor+1,w
  2352  0505  3BA3               	subwfb	___awdiv@dividend+1,f
  2353  0506  1427               	bsf	___awdiv@quotient,0
  2354  0507                     l1624:	
  2355  0507  3001               	movlw	1
  2356  0508                     u1025:	
  2357  0508  36A1               	lsrf	___awdiv@divisor+1,f
  2358  0509  0CA0               	rrf	___awdiv@divisor,f
  2359  050A  0B89               	decfsz	9,f
  2360  050B  2D08               	goto	u1025
  2361  050C  3001               	movlw	1
  2362  050D  02A5               	subwf	___awdiv@counter,f
  2363  050E  1D03               	btfss	3,2
  2364  050F  2CF5               	goto	l1618
  2365  0510                     l1628:	
  2366  0510  0826               	movf	___awdiv@sign,w
  2367  0511  1903               	btfsc	3,2
  2368  0512  2D18               	goto	l1632
  2369  0513  09A7               	comf	___awdiv@quotient,f
  2370  0514  09A8               	comf	___awdiv@quotient+1,f
  2371  0515  0AA7               	incf	___awdiv@quotient,f
  2372  0516  1903               	skipnz
  2373  0517  0AA8               	incf	___awdiv@quotient+1,f
  2374  0518                     l1632:	
  2375  0518  0828               	movf	___awdiv@quotient+1,w
  2376  0519  00A1               	movwf	?___awdiv+1
  2377  051A  0827               	movf	___awdiv@quotient,w
  2378  051B  00A0               	movwf	?___awdiv
  2379  051C  0008               	return
  2380  051D                     __end_of___awdiv:	
  2381                           
  2382                           	psect	text7
  2383  05A6                     __ptext7:	
  2384 ;; *************** function _RTC_Read *****************
  2385 ;; Defined at:
  2386 ;;		line 368 in file "My_header_16F.h"
  2387 ;; Parameters:    Size  Location     Type
  2388 ;;  Reg             1    wreg     unsigned char 
  2389 ;; Auto vars:     Size  Location     Type
  2390 ;;  Reg             1    7[BANK0 ] unsigned char 
  2391 ;;  ans             1    9[BANK0 ] unsigned char 
  2392 ;;  data            1    8[BANK0 ] unsigned char 
  2393 ;; Return value:  Size  Location     Type
  2394 ;;                  1    wreg      unsigned char 
  2395 ;; Registers used:
  2396 ;;		wreg, status,2, status,0, pclath, cstack
  2397 ;; Tracked objects:
  2398 ;;		On entry : 0/0
  2399 ;;		On exit  : 0/0
  2400 ;;		Unchanged: 0/0
  2401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2402 ;;      Params:         0       0       0       0       0       0
  2403 ;;      Locals:         0       3       0       0       0       0
  2404 ;;      Temps:          0       1       0       0       0       0
  2405 ;;      Totals:         0       4       0       0       0       0
  2406 ;;Total ram usage:        4 bytes
  2407 ;; Hardware stack levels used:    1
  2408 ;; Hardware stack levels required when called:    5
  2409 ;; This function calls:
  2410 ;;		_I2C_Receive
  2411 ;;		_I2C_Send
  2412 ;;		_I2C_Start
  2413 ;;		_I2C_Stop
  2414 ;;		_I2C_rStart
  2415 ;; This function is called by:
  2416 ;;		_timeset
  2417 ;;		_display
  2418 ;; This function uses a non-reentrant model
  2419 ;;
  2420                           
  2421                           
  2422                           ;psect for function _RTC_Read
  2423  05A6                     _RTC_Read:	
  2424                           
  2425                           ;incstack = 0
  2426                           ; Regs used in _RTC_Read: [wreg+status,2+status,0+pclath+cstack]
  2427                           ;RTC_Read@Reg stored from wreg
  2428  05A6  0020               	movlb	0	; select bank0
  2429  05A7  00A7               	movwf	RTC_Read@Reg
  2430                           
  2431                           ;My_header_16F.h: 369: uint8_t ans;
  2432                           ;My_header_16F.h: 370: uint8_t data;
  2433                           ;My_header_16F.h: 372: ans = I2C_Start(0x68, 0);
  2434  05A8  01A2               	clrf	I2C_Start@rw
  2435  05A9  3068               	movlw	104
  2436  05AA  3187  27A4  3185   	fcall	_I2C_Start
  2437  05AD  0020               	movlb	0	; select bank0
  2438  05AE  00A6               	movwf	??_RTC_Read
  2439  05AF  0826               	movf	??_RTC_Read,w
  2440  05B0  00A9               	movwf	RTC_Read@ans
  2441                           
  2442                           ;My_header_16F.h: 373: if (ans == 0) {
  2443  05B1  0829               	movf	RTC_Read@ans,w
  2444  05B2  1D03               	btfss	3,2
  2445  05B3  2DB8               	goto	l244
  2446                           
  2447                           ;My_header_16F.h: 374: I2C_Send(Reg);
  2448  05B4  0827               	movf	RTC_Read@Reg,w
  2449  05B5  318F  27B3  3185   	fcall	_I2C_Send
  2450  05B8                     l244:	
  2451                           
  2452                           ;My_header_16F.h: 375: }
  2453                           ;My_header_16F.h: 376: ans = I2C_rStart(0x68, 1);
  2454  05B8  3068               	movlw	104
  2455  05B9  0020               	movlb	0	; select bank0
  2456  05BA  00A2               	movwf	I2C_rStart@adrs
  2457  05BB  3000               	movlw	0
  2458  05BC  00A3               	movwf	I2C_rStart@adrs+1
  2459  05BD  3001               	movlw	1
  2460  05BE  00A4               	movwf	I2C_rStart@rw
  2461  05BF  3000               	movlw	0
  2462  05C0  00A5               	movwf	I2C_rStart@rw+1
  2463  05C1  3187  27BF  3185   	fcall	_I2C_rStart
  2464  05C4  0020               	movlb	0	; select bank0
  2465  05C5  00A6               	movwf	??_RTC_Read
  2466  05C6  0826               	movf	??_RTC_Read,w
  2467  05C7  00A9               	movwf	RTC_Read@ans
  2468                           
  2469                           ;My_header_16F.h: 377: if (ans == 0) {
  2470  05C8  0829               	movf	RTC_Read@ans,w
  2471  05C9  1D03               	btfss	3,2
  2472  05CA  2DD3               	goto	l245
  2473                           
  2474                           ;My_header_16F.h: 378: data = I2C_Receive(1);
  2475  05CB  3001               	movlw	1
  2476  05CC  3186  26EB  3185   	fcall	_I2C_Receive
  2477  05CF  0020               	movlb	0	; select bank0
  2478  05D0  00A6               	movwf	??_RTC_Read
  2479  05D1  0826               	movf	??_RTC_Read,w
  2480  05D2  00A8               	movwf	RTC_Read@data
  2481  05D3                     l245:	
  2482                           
  2483                           ;My_header_16F.h: 379: }
  2484                           ;My_header_16F.h: 380: I2C_Stop();
  2485  05D3  318F  2757  3185   	fcall	_I2C_Stop
  2486                           
  2487                           ;My_header_16F.h: 381: _delay((unsigned long)((26)*(32000000/4000000.0)));
  2488  05D6  3045               	movlw	69
  2489  05D7  0020               	movlb	0	; select bank0
  2490  05D8  00A6               	movwf	??_RTC_Read
  2491  05D9                     u1697:	
  2492  05D9  0BA6               	decfsz	??_RTC_Read,f
  2493  05DA  2DD9               	goto	u1697
  2494                           
  2495                           ;My_header_16F.h: 382: return data;
  2496  05DB  0020               	movlb	0	; select bank0
  2497  05DC  0828               	movf	RTC_Read@data,w
  2498  05DD  0008               	return
  2499  05DE                     __end_of_RTC_Read:	
  2500                           
  2501                           	psect	text8
  2502  07BF                     __ptext8:	
  2503 ;; *************** function _I2C_rStart *****************
  2504 ;; Defined at:
  2505 ;;		line 225 in file "My_header_16F.h"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;  adrs            2    2[BANK0 ] int 
  2508 ;;  rw              2    4[BANK0 ] int 
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;		None
  2511 ;; Return value:  Size  Location     Type
  2512 ;;                  1    wreg      unsigned char 
  2513 ;; Registers used:
  2514 ;;		wreg, status,2, status,0, pclath, cstack
  2515 ;; Tracked objects:
  2516 ;;		On entry : 0/0
  2517 ;;		On exit  : 0/0
  2518 ;;		Unchanged: 0/0
  2519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2520 ;;      Params:         0       4       0       0       0       0
  2521 ;;      Locals:         0       0       0       0       0       0
  2522 ;;      Temps:          0       0       0       0       0       0
  2523 ;;      Totals:         0       4       0       0       0       0
  2524 ;;Total ram usage:        4 bytes
  2525 ;; Hardware stack levels used:    1
  2526 ;; Hardware stack levels required when called:    4
  2527 ;; This function calls:
  2528 ;;		_I2C_IdleCheck
  2529 ;; This function is called by:
  2530 ;;		_RTC_Read
  2531 ;;		_TM_Read
  2532 ;;		_EEP_Read
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           
  2537                           ;psect for function _I2C_rStart
  2538  07BF                     _I2C_rStart:	
  2539                           
  2540                           ;My_header_16F.h: 227: I2C_IdleCheck(0x5);
  2541                           
  2542                           ;incstack = 0
  2543                           ; Regs used in _I2C_rStart: [wreg+status,2+status,0+pclath+cstack]
  2544  07BF  3005               	movlw	5
  2545  07C0  318F  2785  3187   	fcall	_I2C_IdleCheck
  2546                           
  2547                           ;My_header_16F.h: 228: SSP1CON2bits.RSEN = 1;
  2548  07C3  0024               	movlb	4	; select bank4
  2549  07C4  1496               	bsf	22,1	;volatile
  2550                           
  2551                           ;My_header_16F.h: 230: I2C_IdleCheck(0x5);
  2552  07C5  3005               	movlw	5
  2553  07C6  318F  2785  3187   	fcall	_I2C_IdleCheck
  2554                           
  2555                           ;My_header_16F.h: 231: SSP1IF = 0;
  2556  07C9  0020               	movlb	0	; select bank0
  2557  07CA  1191               	bcf	17,3	;volatile
  2558                           
  2559                           ;My_header_16F.h: 232: SSP1BUF = (char) ((adrs << 1) + rw);
  2560  07CB  3522               	lslf	I2C_rStart@adrs,w
  2561  07CC  0724               	addwf	I2C_rStart@rw,w
  2562  07CD  0024               	movlb	4	; select bank4
  2563  07CE  0091               	movwf	17	;volatile
  2564  07CF                     l190:	
  2565                           ;My_header_16F.h: 233: while (!SSP1IF);
  2566                           
  2567  07CF  0020               	movlb	0	; select bank0
  2568  07D0  1D91               	btfss	17,3	;volatile
  2569  07D1  2FCF               	goto	l190
  2570                           
  2571                           ;My_header_16F.h: 234: return SSP1CON2bits.ACKSTAT;
  2572  07D2  0024               	movlb	4	; select bank4
  2573  07D3  0E16               	swapf	22,w	;volatile
  2574  07D4  0C89               	rrf	9,f
  2575  07D5  0C89               	rrf	9,f
  2576  07D6  3901               	andlw	1
  2577  07D7  0008               	return
  2578  07D8                     __end_of_I2C_rStart:	
  2579                           
  2580                           	psect	text9
  2581  06EB                     __ptext9:	
  2582 ;; *************** function _I2C_Receive *****************
  2583 ;; Defined at:
  2584 ;;		line 251 in file "My_header_16F.h"
  2585 ;; Parameters:    Size  Location     Type
  2586 ;;  ack             1    wreg     unsigned char 
  2587 ;; Auto vars:     Size  Location     Type
  2588 ;;  ack             1    3[BANK0 ] unsigned char 
  2589 ;;  data            1    4[BANK0 ] unsigned char 
  2590 ;; Return value:  Size  Location     Type
  2591 ;;                  1    wreg      unsigned char 
  2592 ;; Registers used:
  2593 ;;		wreg, status,2, status,0, pclath, cstack
  2594 ;; Tracked objects:
  2595 ;;		On entry : 0/0
  2596 ;;		On exit  : 0/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2599 ;;      Params:         0       0       0       0       0       0
  2600 ;;      Locals:         0       2       0       0       0       0
  2601 ;;      Temps:          0       1       0       0       0       0
  2602 ;;      Totals:         0       3       0       0       0       0
  2603 ;;Total ram usage:        3 bytes
  2604 ;; Hardware stack levels used:    1
  2605 ;; Hardware stack levels required when called:    4
  2606 ;; This function calls:
  2607 ;;		_I2C_IdleCheck
  2608 ;; This function is called by:
  2609 ;;		_RTC_Read
  2610 ;;		_TM_Read
  2611 ;;		_EEP_Read
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615                           
  2616                           ;psect for function _I2C_Receive
  2617  06EB                     _I2C_Receive:	
  2618                           
  2619                           ;incstack = 0
  2620                           ; Regs used in _I2C_Receive: [wreg+status,2+status,0+pclath+cstack]
  2621                           ;I2C_Receive@ack stored from wreg
  2622  06EB  0020               	movlb	0	; select bank0
  2623  06EC  00A3               	movwf	I2C_Receive@ack
  2624                           
  2625                           ;My_header_16F.h: 252: uint8_t data;
  2626                           ;My_header_16F.h: 254: I2C_IdleCheck(0x5);
  2627  06ED  3005               	movlw	5
  2628  06EE  318F  2785  3186   	fcall	_I2C_IdleCheck
  2629                           
  2630                           ;My_header_16F.h: 255: SSP1CON2bits.RCEN = 1;
  2631  06F1  0024               	movlb	4	; select bank4
  2632  06F2  1596               	bsf	22,3	;volatile
  2633                           
  2634                           ;My_header_16F.h: 256: I2C_IdleCheck(0x4);
  2635  06F3  3004               	movlw	4
  2636  06F4  318F  2785  3186   	fcall	_I2C_IdleCheck
  2637                           
  2638                           ;My_header_16F.h: 257: data = SSP1BUF;
  2639  06F7  0024               	movlb	4	; select bank4
  2640  06F8  0811               	movf	17,w	;volatile
  2641  06F9  0020               	movlb	0	; select bank0
  2642  06FA  00A2               	movwf	??_I2C_Receive
  2643  06FB  0822               	movf	??_I2C_Receive,w
  2644  06FC  00A4               	movwf	I2C_Receive@data
  2645                           
  2646                           ;My_header_16F.h: 258: I2C_IdleCheck(0x5);
  2647  06FD  3005               	movlw	5
  2648  06FE  318F  2785         	fcall	_I2C_IdleCheck
  2649                           
  2650                           ;My_header_16F.h: 259: SSP1CON2bits.ACKDT = ack;
  2651  0700  0020               	movlb	0	; select bank0
  2652  0701  0823               	movf	I2C_Receive@ack,w
  2653  0702  0024               	movlb	4	; select bank4
  2654  0703  1D03               	skipz
  2655  0704  1696               	bsf	22,5	;volatile
  2656  0705  1903               	skipnz
  2657  0706  1296               	bcf	22,5	;volatile
  2658                           
  2659                           ;My_header_16F.h: 260: SSP1CON2bits.ACKEN = 1;
  2660  0707  1616               	bsf	22,4	;volatile
  2661                           
  2662                           ;My_header_16F.h: 261: return data;
  2663  0708  0020               	movlb	0	; select bank0
  2664  0709  0824               	movf	I2C_Receive@data,w
  2665  070A  0008               	return
  2666  070B                     __end_of_I2C_Receive:	
  2667                           
  2668                           	psect	text10
  2669  0FA3                     __ptext10:	
  2670 ;; *************** function _LCD_SetCursor *****************
  2671 ;; Defined at:
  2672 ;;		line 285 in file "My_header_16F.h"
  2673 ;; Parameters:    Size  Location     Type
  2674 ;;  col             1    wreg     unsigned char 
  2675 ;;  row             1    7[BANK0 ] unsigned char 
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;  col             1   10[BANK0 ] unsigned char 
  2678 ;;  row_offsets     2    8[BANK0 ] unsigned char [2]
  2679 ;; Return value:  Size  Location     Type
  2680 ;;		None               void
  2681 ;; Registers used:
  2682 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2683 ;; Tracked objects:
  2684 ;;		On entry : 0/0
  2685 ;;		On exit  : 0/0
  2686 ;;		Unchanged: 0/0
  2687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2688 ;;      Params:         0       1       0       0       0       0
  2689 ;;      Locals:         0       3       0       0       0       0
  2690 ;;      Temps:          0       0       0       0       0       0
  2691 ;;      Totals:         0       4       0       0       0       0
  2692 ;;Total ram usage:        4 bytes
  2693 ;; Hardware stack levels used:    1
  2694 ;; Hardware stack levels required when called:    6
  2695 ;; This function calls:
  2696 ;;		_LCD_Command
  2697 ;; This function is called by:
  2698 ;;		_timeset
  2699 ;;		_display
  2700 ;; This function uses a non-reentrant model
  2701 ;;
  2702                           
  2703                           
  2704                           ;psect for function _LCD_SetCursor
  2705  0FA3                     _LCD_SetCursor:	
  2706                           
  2707                           ;incstack = 0
  2708                           ; Regs used in _LCD_SetCursor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2709                           ;LCD_SetCursor@col stored from wreg
  2710  0FA3  0020               	movlb	0	; select bank0
  2711  0FA4  00AA               	movwf	LCD_SetCursor@col
  2712                           
  2713                           ;My_header_16F.h: 286: uint8_t row_offsets[] = {0x00, 0x40};
  2714  0FA5  084D               	movf	LCD_SetCursor@F2888+1,w
  2715  0FA6  00A9               	movwf	LCD_SetCursor@row_offsets+1
  2716  0FA7  084C               	movf	LCD_SetCursor@F2888,w
  2717  0FA8  00A8               	movwf	LCD_SetCursor@row_offsets
  2718                           
  2719                           ;My_header_16F.h: 288: LCD_Command(0x80 | (col + row_offsets[row]));
  2720  0FA9  0827               	movf	LCD_SetCursor@row,w
  2721  0FAA  3E28               	addlw	(low (LCD_SetCursor@row_offsets| 0))& (0+255)
  2722  0FAB  0086               	movwf	6
  2723  0FAC  0187               	clrf	7
  2724  0FAD  0801               	movf	1,w
  2725  0FAE  072A               	addwf	LCD_SetCursor@col,w
  2726  0FAF  3880               	iorlw	128
  2727  0FB0  3187  274B         	fcall	_LCD_Command
  2728  0FB2  0008               	return
  2729  0FB3                     __end_of_LCD_SetCursor:	
  2730                           
  2731                           	psect	text11
  2732  070B                     __ptext11:	
  2733 ;; *************** function _LCD_Putc *****************
  2734 ;; Defined at:
  2735 ;;		line 291 in file "My_header_16F.h"
  2736 ;; Parameters:    Size  Location     Type
  2737 ;;  c               1    wreg     unsigned char 
  2738 ;; Auto vars:     Size  Location     Type
  2739 ;;  c               1    5[BANK0 ] unsigned char 
  2740 ;;  ans             1    6[BANK0 ] unsigned char 
  2741 ;; Return value:  Size  Location     Type
  2742 ;;		None               void
  2743 ;; Registers used:
  2744 ;;		wreg, status,2, status,0, pclath, cstack
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 0/0
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2750 ;;      Params:         0       0       0       0       0       0
  2751 ;;      Locals:         0       2       0       0       0       0
  2752 ;;      Temps:          0       1       0       0       0       0
  2753 ;;      Totals:         0       3       0       0       0       0
  2754 ;;Total ram usage:        3 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; Hardware stack levels required when called:    5
  2757 ;; This function calls:
  2758 ;;		_I2C_Send
  2759 ;;		_I2C_Start
  2760 ;;		_I2C_Stop
  2761 ;; This function is called by:
  2762 ;;		_timeset
  2763 ;;		_display
  2764 ;; This function uses a non-reentrant model
  2765 ;;
  2766                           
  2767                           
  2768                           ;psect for function _LCD_Putc
  2769  070B                     _LCD_Putc:	
  2770                           
  2771                           ;incstack = 0
  2772                           ; Regs used in _LCD_Putc: [wreg+status,2+status,0+pclath+cstack]
  2773                           ;LCD_Putc@c stored from wreg
  2774  070B  0020               	movlb	0	; select bank0
  2775  070C  00A5               	movwf	LCD_Putc@c
  2776                           
  2777                           ;My_header_16F.h: 292: uint8_t ans;
  2778                           ;My_header_16F.h: 294: ans = I2C_Start(0x3E, 0);
  2779  070D  01A2               	clrf	I2C_Start@rw
  2780  070E  303E               	movlw	62
  2781  070F  3187  27A4  3187   	fcall	_I2C_Start
  2782  0712  0020               	movlb	0	; select bank0
  2783  0713  00A4               	movwf	??_LCD_Putc
  2784  0714  0824               	movf	??_LCD_Putc,w
  2785  0715  00A6               	movwf	LCD_Putc@ans
  2786                           
  2787                           ;My_header_16F.h: 295: if (ans == 0) {
  2788  0716  0826               	movf	LCD_Putc@ans,w
  2789  0717  1D03               	btfss	3,2
  2790  0718  2F22               	goto	l220
  2791                           
  2792                           ;My_header_16F.h: 297: I2C_Send(0b11000000);
  2793  0719  30C0               	movlw	192
  2794  071A  318F  27B3  3187   	fcall	_I2C_Send
  2795                           
  2796                           ;My_header_16F.h: 298: I2C_Send(c);
  2797  071D  0020               	movlb	0	; select bank0
  2798  071E  0825               	movf	LCD_Putc@c,w
  2799  071F  318F  27B3  3187   	fcall	_I2C_Send
  2800  0722                     l220:	
  2801                           
  2802                           ;My_header_16F.h: 299: }
  2803                           ;My_header_16F.h: 300: I2C_Stop();
  2804  0722  318F  2757  3187   	fcall	_I2C_Stop
  2805                           
  2806                           ;My_header_16F.h: 301: _delay((unsigned long)((26)*(32000000/4000000.0)));
  2807  0725  3045               	movlw	69
  2808  0726  0020               	movlb	0	; select bank0
  2809  0727  00A4               	movwf	??_LCD_Putc
  2810  0728                     u1707:	
  2811  0728  0BA4               	decfsz	??_LCD_Putc,f
  2812  0729  2F28               	goto	u1707
  2813  072A  0008               	return
  2814  072B                     __end_of_LCD_Putc:	
  2815                           
  2816                           	psect	text12
  2817  0FC4                     __ptext12:	
  2818 ;; *************** function ___bmul *****************
  2819 ;; Defined at:
  2820 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul8.c"
  2821 ;; Parameters:    Size  Location     Type
  2822 ;;  multiplier      1    wreg     unsigned char 
  2823 ;;  multiplicand    1    9[BANK0 ] unsigned char 
  2824 ;; Auto vars:     Size  Location     Type
  2825 ;;  multiplier      1   12[BANK0 ] unsigned char 
  2826 ;;  product         1   11[BANK0 ] unsigned char 
  2827 ;; Return value:  Size  Location     Type
  2828 ;;                  1    wreg      unsigned char 
  2829 ;; Registers used:
  2830 ;;		wreg, status,2, status,0
  2831 ;; Tracked objects:
  2832 ;;		On entry : 0/0
  2833 ;;		On exit  : 0/0
  2834 ;;		Unchanged: 0/0
  2835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2836 ;;      Params:         0       1       0       0       0       0
  2837 ;;      Locals:         0       2       0       0       0       0
  2838 ;;      Temps:          0       1       0       0       0       0
  2839 ;;      Totals:         0       4       0       0       0       0
  2840 ;;Total ram usage:        4 bytes
  2841 ;; Hardware stack levels used:    1
  2842 ;; Hardware stack levels required when called:    3
  2843 ;; This function calls:
  2844 ;;		Nothing
  2845 ;; This function is called by:
  2846 ;;		_timeset
  2847 ;; This function uses a non-reentrant model
  2848 ;;
  2849                           
  2850                           
  2851                           ;psect for function ___bmul
  2852  0FC4                     ___bmul:	
  2853                           
  2854                           ;incstack = 0
  2855                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2856                           ;___bmul@multiplier stored from wreg
  2857  0FC4  0020               	movlb	0	; select bank0
  2858  0FC5  00AC               	movwf	___bmul@multiplier
  2859  0FC6  01AB               	clrf	___bmul@product
  2860  0FC7                     l1720:	
  2861  0FC7  1C2C               	btfss	___bmul@multiplier,0
  2862  0FC8  2FCD               	goto	l1724
  2863  0FC9  0829               	movf	___bmul@multiplicand,w
  2864  0FCA  00AA               	movwf	??___bmul
  2865  0FCB  082A               	movf	??___bmul,w
  2866  0FCC  07AB               	addwf	___bmul@product,f
  2867  0FCD                     l1724:	
  2868  0FCD  1003               	clrc
  2869  0FCE  0DA9               	rlf	___bmul@multiplicand,f
  2870  0FCF  1003               	clrc
  2871  0FD0  0CAC               	rrf	___bmul@multiplier,f
  2872  0FD1  082C               	movf	___bmul@multiplier,w
  2873  0FD2  1D03               	btfss	3,2
  2874  0FD3  2FC7               	goto	l1720
  2875  0FD4  082B               	movf	___bmul@product,w
  2876  0FD5  0008               	return
  2877  0FD6                     __end_of___bmul:	
  2878                           
  2879                           	psect	text13
  2880  051D                     __ptext13:	
  2881 ;; *************** function ___awmod *****************
  2882 ;; Defined at:
  2883 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  2884 ;; Parameters:    Size  Location     Type
  2885 ;;  divisor         2    0[BANK0 ] int 
  2886 ;;  dividend        2    2[BANK0 ] int 
  2887 ;; Auto vars:     Size  Location     Type
  2888 ;;  sign            1    6[BANK0 ] unsigned char 
  2889 ;;  counter         1    5[BANK0 ] unsigned char 
  2890 ;; Return value:  Size  Location     Type
  2891 ;;                  2    0[BANK0 ] int 
  2892 ;; Registers used:
  2893 ;;		wreg, status,2, status,0
  2894 ;; Tracked objects:
  2895 ;;		On entry : 0/0
  2896 ;;		On exit  : 0/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2899 ;;      Params:         0       4       0       0       0       0
  2900 ;;      Locals:         0       2       0       0       0       0
  2901 ;;      Temps:          0       1       0       0       0       0
  2902 ;;      Totals:         0       7       0       0       0       0
  2903 ;;Total ram usage:        7 bytes
  2904 ;; Hardware stack levels used:    1
  2905 ;; Hardware stack levels required when called:    3
  2906 ;; This function calls:
  2907 ;;		Nothing
  2908 ;; This function is called by:
  2909 ;;		_timeset
  2910 ;; This function uses a non-reentrant model
  2911 ;;
  2912                           
  2913                           
  2914                           ;psect for function ___awmod
  2915  051D                     ___awmod:	
  2916                           
  2917                           ;incstack = 0
  2918                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2919  051D  0020               	movlb	0	; select bank0
  2920  051E  01A6               	clrf	___awmod@sign
  2921  051F  1FA3               	btfss	___awmod@dividend+1,7
  2922  0520  2D28               	goto	l1740
  2923  0521  09A2               	comf	___awmod@dividend,f
  2924  0522  09A3               	comf	___awmod@dividend+1,f
  2925  0523  0AA2               	incf	___awmod@dividend,f
  2926  0524  1903               	skipnz
  2927  0525  0AA3               	incf	___awmod@dividend+1,f
  2928  0526  01A6               	clrf	___awmod@sign
  2929  0527  0AA6               	incf	___awmod@sign,f
  2930  0528                     l1740:	
  2931  0528  1FA1               	btfss	___awmod@divisor+1,7
  2932  0529  2D2F               	goto	l1744
  2933  052A  09A0               	comf	___awmod@divisor,f
  2934  052B  09A1               	comf	___awmod@divisor+1,f
  2935  052C  0AA0               	incf	___awmod@divisor,f
  2936  052D  1903               	skipnz
  2937  052E  0AA1               	incf	___awmod@divisor+1,f
  2938  052F                     l1744:	
  2939  052F  0820               	movf	___awmod@divisor,w
  2940  0530  0421               	iorwf	___awmod@divisor+1,w
  2941  0531  1903               	btfsc	3,2
  2942  0532  2D56               	goto	l1762
  2943  0533  01A5               	clrf	___awmod@counter
  2944  0534  0AA5               	incf	___awmod@counter,f
  2945  0535                     l1752:	
  2946  0535  1BA1               	btfsc	___awmod@divisor+1,7
  2947  0536  2D41               	goto	l1754
  2948  0537  3001               	movlw	1
  2949  0538                     u1165:	
  2950  0538  35A0               	lslf	___awmod@divisor,f
  2951  0539  0DA1               	rlf	___awmod@divisor+1,f
  2952  053A  0B89               	decfsz	9,f
  2953  053B  2D38               	goto	u1165
  2954  053C  3001               	movlw	1
  2955  053D  00A4               	movwf	??___awmod
  2956  053E  0824               	movf	??___awmod,w
  2957  053F  07A5               	addwf	___awmod@counter,f
  2958  0540  2D35               	goto	l1752
  2959  0541                     l1754:	
  2960  0541  0821               	movf	___awmod@divisor+1,w
  2961  0542  0223               	subwf	___awmod@dividend+1,w
  2962  0543  1D03               	skipz
  2963  0544  2D47               	goto	u1185
  2964  0545  0820               	movf	___awmod@divisor,w
  2965  0546  0222               	subwf	___awmod@dividend,w
  2966  0547                     u1185:	
  2967  0547  1C03               	skipc
  2968  0548  2D4D               	goto	l1758
  2969  0549  0820               	movf	___awmod@divisor,w
  2970  054A  02A2               	subwf	___awmod@dividend,f
  2971  054B  0821               	movf	___awmod@divisor+1,w
  2972  054C  3BA3               	subwfb	___awmod@dividend+1,f
  2973  054D                     l1758:	
  2974  054D  3001               	movlw	1
  2975  054E                     u1195:	
  2976  054E  36A1               	lsrf	___awmod@divisor+1,f
  2977  054F  0CA0               	rrf	___awmod@divisor,f
  2978  0550  0B89               	decfsz	9,f
  2979  0551  2D4E               	goto	u1195
  2980  0552  3001               	movlw	1
  2981  0553  02A5               	subwf	___awmod@counter,f
  2982  0554  1D03               	btfss	3,2
  2983  0555  2D41               	goto	l1754
  2984  0556                     l1762:	
  2985  0556  0826               	movf	___awmod@sign,w
  2986  0557  1903               	btfsc	3,2
  2987  0558  2D5E               	goto	l1766
  2988  0559  09A2               	comf	___awmod@dividend,f
  2989  055A  09A3               	comf	___awmod@dividend+1,f
  2990  055B  0AA2               	incf	___awmod@dividend,f
  2991  055C  1903               	skipnz
  2992  055D  0AA3               	incf	___awmod@dividend+1,f
  2993  055E                     l1766:	
  2994  055E  0823               	movf	___awmod@dividend+1,w
  2995  055F  00A1               	movwf	?___awmod+1
  2996  0560  0822               	movf	___awmod@dividend,w
  2997  0561  00A0               	movwf	?___awmod
  2998  0562  0008               	return
  2999  0563                     __end_of___awmod:	
  3000                           
  3001                           	psect	text14
  3002  072B                     __ptext14:	
  3003 ;; *************** function _RTC_Write *****************
  3004 ;; Defined at:
  3005 ;;		line 355 in file "My_header_16F.h"
  3006 ;; Parameters:    Size  Location     Type
  3007 ;;  Reg             1    wreg     unsigned char 
  3008 ;;  data            1    4[BANK0 ] unsigned char 
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;  Reg             1    6[BANK0 ] unsigned char 
  3011 ;;  ans             1    7[BANK0 ] unsigned char 
  3012 ;; Return value:  Size  Location     Type
  3013 ;;		None               void
  3014 ;; Registers used:
  3015 ;;		wreg, status,2, status,0, pclath, cstack
  3016 ;; Tracked objects:
  3017 ;;		On entry : 0/0
  3018 ;;		On exit  : 0/0
  3019 ;;		Unchanged: 0/0
  3020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3021 ;;      Params:         0       1       0       0       0       0
  3022 ;;      Locals:         0       2       0       0       0       0
  3023 ;;      Temps:          0       1       0       0       0       0
  3024 ;;      Totals:         0       4       0       0       0       0
  3025 ;;Total ram usage:        4 bytes
  3026 ;; Hardware stack levels used:    1
  3027 ;; Hardware stack levels required when called:    5
  3028 ;; This function calls:
  3029 ;;		_I2C_Send
  3030 ;;		_I2C_Start
  3031 ;;		_I2C_Stop
  3032 ;; This function is called by:
  3033 ;;		_timeset
  3034 ;;		_main
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037                           
  3038                           
  3039                           ;psect for function _RTC_Write
  3040  072B                     _RTC_Write:	
  3041                           
  3042                           ;incstack = 0
  3043                           ; Regs used in _RTC_Write: [wreg+status,2+status,0+pclath+cstack]
  3044                           ;RTC_Write@Reg stored from wreg
  3045  072B  0020               	movlb	0	; select bank0
  3046  072C  00A6               	movwf	RTC_Write@Reg
  3047                           
  3048                           ;My_header_16F.h: 356: uint8_t ans;
  3049                           ;My_header_16F.h: 358: ans = I2C_Start(0x68, 0);
  3050  072D  01A2               	clrf	I2C_Start@rw
  3051  072E  3068               	movlw	104
  3052  072F  3187  27A4  3187   	fcall	_I2C_Start
  3053  0732  0020               	movlb	0	; select bank0
  3054  0733  00A5               	movwf	??_RTC_Write
  3055  0734  0825               	movf	??_RTC_Write,w
  3056  0735  00A7               	movwf	RTC_Write@ans
  3057                           
  3058                           ;My_header_16F.h: 359: if (ans == 0) {
  3059  0736  0827               	movf	RTC_Write@ans,w
  3060  0737  1D03               	btfss	3,2
  3061  0738  2F42               	goto	l240
  3062                           
  3063                           ;My_header_16F.h: 361: I2C_Send(Reg);
  3064  0739  0826               	movf	RTC_Write@Reg,w
  3065  073A  318F  27B3  3187   	fcall	_I2C_Send
  3066                           
  3067                           ;My_header_16F.h: 362: I2C_Send(data);
  3068  073D  0020               	movlb	0	; select bank0
  3069  073E  0824               	movf	RTC_Write@data,w
  3070  073F  318F  27B3  3187   	fcall	_I2C_Send
  3071  0742                     l240:	
  3072                           
  3073                           ;My_header_16F.h: 363: }
  3074                           ;My_header_16F.h: 364: I2C_Stop();
  3075  0742  318F  2757  3187   	fcall	_I2C_Stop
  3076                           
  3077                           ;My_header_16F.h: 365: _delay((unsigned long)((26)*(32000000/4000000.0)));
  3078  0745  3045               	movlw	69
  3079  0746  0020               	movlb	0	; select bank0
  3080  0747  00A5               	movwf	??_RTC_Write
  3081  0748                     u1717:	
  3082  0748  0BA5               	decfsz	??_RTC_Write,f
  3083  0749  2F48               	goto	u1717
  3084  074A  0008               	return
  3085  074B                     __end_of_RTC_Write:	
  3086                           
  3087                           	psect	text15
  3088  05DE                     __ptext15:	
  3089 ;; *************** function _LCD_Puts *****************
  3090 ;; Defined at:
  3091 ;;		line 304 in file "My_header_16F.h"
  3092 ;; Parameters:    Size  Location     Type
  3093 ;;  s               2    4[BANK0 ] PTR const unsigned char 
  3094 ;;		 -> STR_1(3), 
  3095 ;; Auto vars:     Size  Location     Type
  3096 ;;  ans             2    8[BANK0 ] int 
  3097 ;; Return value:  Size  Location     Type
  3098 ;;		None               void
  3099 ;; Registers used:
  3100 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3101 ;; Tracked objects:
  3102 ;;		On entry : 0/0
  3103 ;;		On exit  : 0/0
  3104 ;;		Unchanged: 0/0
  3105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3106 ;;      Params:         0       2       0       0       0       0
  3107 ;;      Locals:         0       2       0       0       0       0
  3108 ;;      Temps:          0       2       0       0       0       0
  3109 ;;      Totals:         0       6       0       0       0       0
  3110 ;;Total ram usage:        6 bytes
  3111 ;; Hardware stack levels used:    1
  3112 ;; Hardware stack levels required when called:    5
  3113 ;; This function calls:
  3114 ;;		_I2C_Send
  3115 ;;		_I2C_Start
  3116 ;;		_I2C_Stop
  3117 ;; This function is called by:
  3118 ;;		_timeset
  3119 ;; This function uses a non-reentrant model
  3120 ;;
  3121                           
  3122                           
  3123                           ;psect for function _LCD_Puts
  3124  05DE                     _LCD_Puts:	
  3125                           
  3126                           ;My_header_16F.h: 305: int ans;
  3127                           ;My_header_16F.h: 307: ans = I2C_Start(0x3E, 0);
  3128                           
  3129                           ;incstack = 0
  3130                           ; Regs used in _LCD_Puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3131  05DE  0020               	movlb	0	; select bank0
  3132  05DF  01A2               	clrf	I2C_Start@rw
  3133  05E0  303E               	movlw	62
  3134  05E1  3187  27A4  3185   	fcall	_I2C_Start
  3135  05E4  0020               	movlb	0	; select bank0
  3136  05E5  00A6               	movwf	??_LCD_Puts
  3137  05E6  01A7               	clrf	??_LCD_Puts+1
  3138  05E7  0826               	movf	??_LCD_Puts,w
  3139  05E8  00A8               	movwf	LCD_Puts@ans
  3140  05E9  0827               	movf	??_LCD_Puts+1,w
  3141  05EA  00A9               	movwf	LCD_Puts@ans+1
  3142                           
  3143                           ;My_header_16F.h: 308: if (ans == 0) {
  3144  05EB  0828               	movf	LCD_Puts@ans,w
  3145  05EC  0429               	iorwf	LCD_Puts@ans+1,w
  3146  05ED  1D03               	btfss	3,2
  3147  05EE  2E0E               	goto	l1686
  3148                           
  3149                           ;My_header_16F.h: 309: I2C_Send(0b01000000);
  3150  05EF  3040               	movlw	64
  3151  05F0  318F  27B3  3185   	fcall	_I2C_Send
  3152  05F3                     l1684:	
  3153                           ;My_header_16F.h: 310: while (*s) {
  3154                           
  3155  05F3  0020               	movlb	0	; select bank0
  3156  05F4  0824               	movf	LCD_Puts@s,w
  3157  05F5  0084               	movwf	4
  3158  05F6  0825               	movf	LCD_Puts@s+1,w
  3159  05F7  0085               	movwf	5
  3160  05F8  0012               	moviw fsr0++
  3161  05F9  1903               	btfsc	3,2
  3162  05FA  2E0E               	goto	l1686
  3163                           
  3164                           ;My_header_16F.h: 311: I2C_Send(*s++);
  3165  05FB  0020               	movlb	0	; select bank0
  3166  05FC  0824               	movf	LCD_Puts@s,w
  3167  05FD  0084               	movwf	4
  3168  05FE  0825               	movf	LCD_Puts@s+1,w
  3169  05FF  0085               	movwf	5
  3170  0600  0800               	movf	0,w	;code access
  3171  0601  318F  27B3  3185   	fcall	_I2C_Send
  3172  0604  3001               	movlw	1
  3173  0605  0020               	movlb	0	; select bank0
  3174  0606  07A4               	addwf	LCD_Puts@s,f
  3175  0607  3000               	movlw	0
  3176  0608  3DA5               	addwfc	LCD_Puts@s+1,f
  3177                           
  3178                           ;My_header_16F.h: 312: _delay((unsigned long)((26)*(32000000/4000000.0)));
  3179  0609  3045               	movlw	69
  3180  060A  00A6               	movwf	??_LCD_Puts
  3181  060B                     u1727:	
  3182  060B  0BA6               	decfsz	??_LCD_Puts,f
  3183  060C  2E0B               	goto	u1727
  3184  060D  2DF3               	goto	l1684
  3185  060E                     l1686:	
  3186                           
  3187                           ;My_header_16F.h: 313: }
  3188                           ;My_header_16F.h: 314: }
  3189                           ;My_header_16F.h: 315: I2C_Stop();
  3190  060E  318F  2757         	fcall	_I2C_Stop
  3191  0610  0008               	return
  3192  0611                     __end_of_LCD_Puts:	
  3193                           
  3194                           	psect	text16
  3195  0789                     __ptext16:	
  3196 ;; *************** function _ringbuf_init *****************
  3197 ;; Defined at:
  3198 ;;		line 113 in file "My_header_16F.h"
  3199 ;; Parameters:    Size  Location     Type
  3200 ;;  rb              1    wreg     PTR struct ringbuf
  3201 ;;		 -> tx_buf(4), 
  3202 ;;  internal_buf    1    0[BANK0 ] PTR unsigned char 
  3203 ;;		 -> main@buf(70), 
  3204 ;;  bufsize         1    1[BANK0 ] unsigned char 
  3205 ;; Auto vars:     Size  Location     Type
  3206 ;;  rb              1    3[BANK0 ] PTR struct ringbuf
  3207 ;;		 -> tx_buf(4), 
  3208 ;; Return value:  Size  Location     Type
  3209 ;;		None               void
  3210 ;; Registers used:
  3211 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3212 ;; Tracked objects:
  3213 ;;		On entry : 0/0
  3214 ;;		On exit  : 0/0
  3215 ;;		Unchanged: 0/0
  3216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3217 ;;      Params:         0       2       0       0       0       0
  3218 ;;      Locals:         0       1       0       0       0       0
  3219 ;;      Temps:          0       1       0       0       0       0
  3220 ;;      Totals:         0       4       0       0       0       0
  3221 ;;Total ram usage:        4 bytes
  3222 ;; Hardware stack levels used:    1
  3223 ;; Hardware stack levels required when called:    3
  3224 ;; This function calls:
  3225 ;;		Nothing
  3226 ;; This function is called by:
  3227 ;;		_main
  3228 ;; This function uses a non-reentrant model
  3229 ;;
  3230                           
  3231                           
  3232                           ;psect for function _ringbuf_init
  3233  0789                     _ringbuf_init:	
  3234                           
  3235                           ;incstack = 0
  3236                           ; Regs used in _ringbuf_init: [wreg+fsr1l+fsr1h+status,2+status,0]
  3237                           ;ringbuf_init@rb stored from wreg
  3238  0789  0020               	movlb	0	; select bank0
  3239  078A  00A3               	movwf	ringbuf_init@rb
  3240                           
  3241                           ;My_header_16F.h: 114: rb->buf = internal_buf;
  3242  078B  0820               	movf	ringbuf_init@internal_buf,w
  3243  078C  00A2               	movwf	??_ringbuf_init
  3244  078D  0823               	movf	ringbuf_init@rb,w
  3245  078E  0086               	movwf	6
  3246  078F  0187               	clrf	7
  3247  0790  0822               	movf	??_ringbuf_init,w
  3248  0791  0081               	movwf	1
  3249                           
  3250                           ;My_header_16F.h: 115: rb->size = bufsize;
  3251  0792  0821               	movf	ringbuf_init@bufsize,w
  3252  0793  00A2               	movwf	??_ringbuf_init
  3253  0794  0A23               	incf	ringbuf_init@rb,w
  3254  0795  0086               	movwf	6
  3255  0796  0187               	clrf	7
  3256  0797  0822               	movf	??_ringbuf_init,w
  3257  0798  0081               	movwf	1
  3258                           
  3259                           ;My_header_16F.h: 116: rb->head = 0;
  3260  0799  0823               	movf	ringbuf_init@rb,w
  3261  079A  3E02               	addlw	2
  3262  079B  0086               	movwf	6
  3263  079C  0187               	clrf	7
  3264  079D  0181               	clrf	1
  3265                           
  3266                           ;My_header_16F.h: 117: rb->tail = 0;
  3267  079E  0823               	movf	ringbuf_init@rb,w
  3268  079F  3E03               	addlw	3
  3269  07A0  0086               	movwf	6
  3270  07A1  0187               	clrf	7
  3271  07A2  0181               	clrf	1
  3272  07A3  0008               	return
  3273  07A4                     __end_of_ringbuf_init:	
  3274                           
  3275                           	psect	text17
  3276  076B                     __ptext17:	
  3277 ;; *************** function _month_length *****************
  3278 ;; Defined at:
  3279 ;;		line 55 in file "PIC16F1827-I2C_LCD_RTC01.c"
  3280 ;; Parameters:    Size  Location     Type
  3281 ;;  year            1    wreg     unsigned char 
  3282 ;;  month           1    0[BANK0 ] unsigned char 
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;  year            1    1[BANK0 ] unsigned char 
  3285 ;; Return value:  Size  Location     Type
  3286 ;;                  1    wreg      unsigned char 
  3287 ;; Registers used:
  3288 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3294 ;;      Params:         0       1       0       0       0       0
  3295 ;;      Locals:         0       1       0       0       0       0
  3296 ;;      Temps:          0       0       0       0       0       0
  3297 ;;      Totals:         0       2       0       0       0       0
  3298 ;;Total ram usage:        2 bytes
  3299 ;; Hardware stack levels used:    1
  3300 ;; Hardware stack levels required when called:    3
  3301 ;; This function calls:
  3302 ;;		Nothing
  3303 ;; This function is called by:
  3304 ;;		_main
  3305 ;; This function uses a non-reentrant model
  3306 ;;
  3307                           
  3308                           
  3309                           ;psect for function _month_length
  3310  076B                     _month_length:	
  3311                           
  3312                           ;incstack = 0
  3313                           ; Regs used in _month_length: [wreg-fsr0h+status,2+status,0]
  3314                           ;month_length@year stored from wreg
  3315  076B  0020               	movlb	0	; select bank0
  3316  076C  00A1               	movwf	month_length@year
  3317                           
  3318                           ;PIC16F1827-I2C_LCD_RTC01.c: 56: switch (month) {
  3319  076D  2F7A               	goto	l1908
  3320  076E                     l1888:	
  3321                           ;PIC16F1827-I2C_LCD_RTC01.c: 57: case 1:
  3322                           
  3323                           
  3324                           ;PIC16F1827-I2C_LCD_RTC01.c: 58: case 3:
  3325                           ;PIC16F1827-I2C_LCD_RTC01.c: 59: case 5:
  3326                           ;PIC16F1827-I2C_LCD_RTC01.c: 60: case 7:
  3327                           ;PIC16F1827-I2C_LCD_RTC01.c: 61: case 8:
  3328                           ;PIC16F1827-I2C_LCD_RTC01.c: 62: case 10:
  3329                           ;PIC16F1827-I2C_LCD_RTC01.c: 63: case 12:
  3330                           ;PIC16F1827-I2C_LCD_RTC01.c: 64: return 31;
  3331  076E  301F               	movlw	31
  3332  076F  0008               	return
  3333  0770                     l1892:	
  3334                           ;PIC16F1827-I2C_LCD_RTC01.c: 65: case 4:
  3335                           
  3336                           
  3337                           ;PIC16F1827-I2C_LCD_RTC01.c: 66: case 6:
  3338                           ;PIC16F1827-I2C_LCD_RTC01.c: 67: case 9:
  3339                           ;PIC16F1827-I2C_LCD_RTC01.c: 68: case 11:
  3340                           ;PIC16F1827-I2C_LCD_RTC01.c: 69: return 30;
  3341  0770  301E               	movlw	30
  3342  0771  0008               	return
  3343  0772                     l1896:	
  3344                           ;PIC16F1827-I2C_LCD_RTC01.c: 70: case 2:
  3345                           
  3346                           
  3347                           ;PIC16F1827-I2C_LCD_RTC01.c: 71: if (year % 4 == 0) return 29;
  3348  0772  0821               	movf	month_length@year,w
  3349  0773  3903               	andlw	3
  3350  0774  1D03               	btfss	3,2
  3351  0775  2F78               	goto	l1904
  3352  0776  301D               	movlw	29
  3353  0777  0008               	return
  3354  0778                     l1904:	
  3355                           
  3356                           ;PIC16F1827-I2C_LCD_RTC01.c: 72: else return 28;
  3357  0778  301C               	movlw	28
  3358  0779  0008               	return
  3359  077A                     l1908:	
  3360                           ;PIC16F1827-I2C_LCD_RTC01.c: 73: }
  3361                           
  3362  077A  0820               	movf	month_length@month,w
  3363                           
  3364                           ; Switch size 1, requested type "space"
  3365                           ; Number of cases is 12, Range of values is 1 to 12
  3366                           ; switch strategies available:
  3367                           ; Name         Instructions Cycles
  3368                           ; direct_byte           33     9 (fixed)
  3369                           ; simple_byte           37    19 (average)
  3370                           ; jumptable            263     9 (fixed)
  3371                           ;	Chosen strategy is direct_byte
  3372  077B  3EFF               	addlw	-1
  3373  077C  1C03               	skipc
  3374  077D  2F87               	goto	l1910
  3375  077E  0084               	movwf	4
  3376  077F  300C               	movlw	12
  3377  0780  0204               	subwf	4,w
  3378  0781  1803               	skipnc
  3379  0782  2F87               	goto	l1910
  3380  0783  3187               	movlp	high S2156
  3381  0784  3504               	lslf	4,w
  3382  0785  3ED8               	addlw	low S2156
  3383  0786  0082               	movwf	2
  3384  0787                     l1910:	
  3385                           
  3386                           ;PIC16F1827-I2C_LCD_RTC01.c: 74: return 0;
  3387  0787  3000               	movlw	0
  3388  0788  0008               	return
  3389  0789                     __end_of_month_length:	
  3390                           
  3391                           	psect	swtext1
  3392  07D8                     __pswtext1:	
  3393  07D8                     S2156:	
  3394  07D8  3187  2F6E         	ljmp	l1888
  3395  07DA  3187  2F72         	ljmp	l1896
  3396  07DC  3187  2F6E         	ljmp	l1888
  3397  07DE  3187  2F70         	ljmp	l1892
  3398  07E0  3187  2F6E         	ljmp	l1888
  3399  07E2  3187  2F70         	ljmp	l1892
  3400  07E4  3187  2F6E         	ljmp	l1888
  3401  07E6  3187  2F6E         	ljmp	l1888
  3402  07E8  3187  2F70         	ljmp	l1892
  3403  07EA  3187  2F6E         	ljmp	l1888
  3404  07EC  3187  2F70         	ljmp	l1892
  3405  07EE  3187  2F6E         	ljmp	l1888
  3406                           
  3407                           	psect	text18
  3408  0FD6                     __ptext18:	
  3409 ;; *************** function _UART_init *****************
  3410 ;; Defined at:
  3411 ;;		line 148 in file "My_header_16F.h"
  3412 ;; Parameters:    Size  Location     Type
  3413 ;;  device          1    wreg     unsigned char 
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;  device          1    0[BANK0 ] unsigned char 
  3416 ;; Return value:  Size  Location     Type
  3417 ;;		None               void
  3418 ;; Registers used:
  3419 ;;		wreg, status,2, status,0
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/0
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3425 ;;      Params:         0       0       0       0       0       0
  3426 ;;      Locals:         0       1       0       0       0       0
  3427 ;;      Temps:          0       0       0       0       0       0
  3428 ;;      Totals:         0       1       0       0       0       0
  3429 ;;Total ram usage:        1 bytes
  3430 ;; Hardware stack levels used:    1
  3431 ;; Hardware stack levels required when called:    3
  3432 ;; This function calls:
  3433 ;;		Nothing
  3434 ;; This function is called by:
  3435 ;;		_main
  3436 ;; This function uses a non-reentrant model
  3437 ;;
  3438                           
  3439                           
  3440                           ;psect for function _UART_init
  3441  0FD6                     _UART_init:	
  3442                           
  3443                           ;incstack = 0
  3444                           ; Regs used in _UART_init: [wreg+status,2+status,0]
  3445                           ;UART_init@device stored from wreg
  3446  0FD6  0020               	movlb	0	; select bank0
  3447  0FD7  00A0               	movwf	UART_init@device
  3448                           
  3449                           ;My_header_16F.h: 149: if (device == 0) {
  3450  0FD8  0820               	movf	UART_init@device,w
  3451  0FD9  1D03               	btfss	3,2
  3452  0FDA  0008               	return
  3453                           
  3454                           ;My_header_16F.h: 150: SPEN = 1;
  3455  0FDB  0023               	movlb	3	; select bank3
  3456  0FDC  179D               	bsf	29,7	;volatile
  3457                           
  3458                           ;My_header_16F.h: 151: RCSTA = 0x90;
  3459  0FDD  3090               	movlw	144
  3460  0FDE  009D               	movwf	29	;volatile
  3461                           
  3462                           ;My_header_16F.h: 152: BRG16 = 0;
  3463  0FDF  119F               	bcf	31,3	;volatile
  3464                           
  3465                           ;My_header_16F.h: 153: SPBRGH = 0;
  3466  0FE0  019C               	clrf	28	;volatile
  3467                           
  3468                           ;My_header_16F.h: 154: SPBRGL = 207;
  3469  0FE1  30CF               	movlw	207
  3470  0FE2  009B               	movwf	27	;volatile
  3471                           
  3472                           ;My_header_16F.h: 155: TXSTA = 0x24;
  3473  0FE3  3024               	movlw	36
  3474  0FE4  009E               	movwf	30	;volatile
  3475                           
  3476                           ;My_header_16F.h: 156: PIE1bits.RCIE = 1;
  3477  0FE5  0021               	movlb	1	; select bank1
  3478  0FE6  1691               	bsf	17,5	;volatile
  3479                           
  3480                           ;My_header_16F.h: 157: INTCONbits.PEIE = 1;
  3481  0FE7  170B               	bsf	11,6	;volatile
  3482  0FE8  0008               	return
  3483  0FE9                     __end_of_UART_init:	
  3484                           
  3485                           	psect	text19
  3486  0563                     __ptext19:	
  3487 ;; *************** function _LCD_init *****************
  3488 ;; Defined at:
  3489 ;;		line 337 in file "My_header_16F.h"
  3490 ;; Parameters:    Size  Location     Type
  3491 ;;		None
  3492 ;; Auto vars:     Size  Location     Type
  3493 ;;		None
  3494 ;; Return value:  Size  Location     Type
  3495 ;;		None               void
  3496 ;; Registers used:
  3497 ;;		wreg, status,2, status,0, pclath, cstack
  3498 ;; Tracked objects:
  3499 ;;		On entry : 0/0
  3500 ;;		On exit  : 0/0
  3501 ;;		Unchanged: 0/0
  3502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3503 ;;      Params:         0       0       0       0       0       0
  3504 ;;      Locals:         0       0       0       0       0       0
  3505 ;;      Temps:          0       3       0       0       0       0
  3506 ;;      Totals:         0       3       0       0       0       0
  3507 ;;Total ram usage:        3 bytes
  3508 ;; Hardware stack levels used:    1
  3509 ;; Hardware stack levels required when called:    7
  3510 ;; This function calls:
  3511 ;;		_LCD_Clear
  3512 ;;		_LCD_Command
  3513 ;; This function is called by:
  3514 ;;		_main
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           
  3519                           ;psect for function _LCD_init
  3520  0563                     _LCD_init:	
  3521                           
  3522                           ;My_header_16F.h: 338: _delay((unsigned long)((40)*(32000000/4000.0)));
  3523                           
  3524                           ;incstack = 0
  3525                           ; Regs used in _LCD_init: [wreg+status,2+status,0+pclath+cstack]
  3526  0563  3002               	movlw	2
  3527  0564  0020               	movlb	0	; select bank0
  3528  0565  00AB               	movwf	??_LCD_init+2
  3529  0566  30A0               	movlw	160
  3530  0567  00AA               	movwf	??_LCD_init+1
  3531  0568  3092               	movlw	146
  3532  0569  00A9               	movwf	??_LCD_init
  3533  056A                     u1737:	
  3534  056A  0BA9               	decfsz	??_LCD_init,f
  3535  056B  2D6A               	goto	u1737
  3536  056C  0BAA               	decfsz	??_LCD_init+1,f
  3537  056D  2D6A               	goto	u1737
  3538  056E  0BAB               	decfsz	??_LCD_init+2,f
  3539  056F  2D6A               	goto	u1737
  3540  0570  0000               	nop
  3541                           
  3542                           ;My_header_16F.h: 339: LCD_Command(0x38);
  3543  0571  3038               	movlw	56
  3544  0572  3187  274B  3185   	fcall	_LCD_Command
  3545                           
  3546                           ;My_header_16F.h: 340: LCD_Command(0x39);
  3547  0575  3039               	movlw	57
  3548  0576  3187  274B  3185   	fcall	_LCD_Command
  3549                           
  3550                           ;My_header_16F.h: 341: LCD_Command(0x14);
  3551  0579  3014               	movlw	20
  3552  057A  3187  274B  3185   	fcall	_LCD_Command
  3553                           
  3554                           ;My_header_16F.h: 342: LCD_Command(0x70);
  3555  057D  3070               	movlw	112
  3556  057E  3187  274B  3185   	fcall	_LCD_Command
  3557                           
  3558                           ;My_header_16F.h: 343: LCD_Command(0x56);
  3559  0581  3056               	movlw	86
  3560  0582  3187  274B  3185   	fcall	_LCD_Command
  3561                           
  3562                           ;My_header_16F.h: 344: LCD_Command(0x6C);
  3563  0585  306C               	movlw	108
  3564  0586  3187  274B  3185   	fcall	_LCD_Command
  3565                           
  3566                           ;My_header_16F.h: 345: _delay((unsigned long)((200)*(32000000/4000.0)));
  3567  0589  3009               	movlw	9
  3568  058A  0020               	movlb	0	; select bank0
  3569  058B  00AB               	movwf	??_LCD_init+2
  3570  058C  301E               	movlw	30
  3571  058D  00AA               	movwf	??_LCD_init+1
  3572  058E  30EB               	movlw	235
  3573  058F  00A9               	movwf	??_LCD_init
  3574  0590                     u1747:	
  3575  0590  0BA9               	decfsz	??_LCD_init,f
  3576  0591  2D90               	goto	u1747
  3577  0592  0BAA               	decfsz	??_LCD_init+1,f
  3578  0593  2D90               	goto	u1747
  3579  0594  0BAB               	decfsz	??_LCD_init+2,f
  3580  0595  2D90               	goto	u1747
  3581  0596  0000               	nop
  3582                           
  3583                           ;My_header_16F.h: 346: LCD_Command(0x38);
  3584  0597  3038               	movlw	56
  3585  0598  3187  274B  3185   	fcall	_LCD_Command
  3586                           
  3587                           ;My_header_16F.h: 347: LCD_Command(0x0C);
  3588  059B  300C               	movlw	12
  3589  059C  3187  274B  3185   	fcall	_LCD_Command
  3590                           
  3591                           ;My_header_16F.h: 348: LCD_Command(0x06);
  3592  059F  3006               	movlw	6
  3593  05A0  3187  274B  3185   	fcall	_LCD_Command
  3594                           
  3595                           ;My_header_16F.h: 349: LCD_Clear();
  3596  05A3  318F  2794         	fcall	_LCD_Clear
  3597  05A5  0008               	return
  3598  05A6                     __end_of_LCD_init:	
  3599                           
  3600                           	psect	text20
  3601  0F94                     __ptext20:	
  3602 ;; *************** function _LCD_Clear *****************
  3603 ;; Defined at:
  3604 ;;		line 280 in file "My_header_16F.h"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;		None
  3607 ;; Auto vars:     Size  Location     Type
  3608 ;;		None
  3609 ;; Return value:  Size  Location     Type
  3610 ;;		None               void
  3611 ;; Registers used:
  3612 ;;		wreg, status,2, status,0, pclath, cstack
  3613 ;; Tracked objects:
  3614 ;;		On entry : 0/0
  3615 ;;		On exit  : 0/0
  3616 ;;		Unchanged: 0/0
  3617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3618 ;;      Params:         0       0       0       0       0       0
  3619 ;;      Locals:         0       0       0       0       0       0
  3620 ;;      Temps:          0       2       0       0       0       0
  3621 ;;      Totals:         0       2       0       0       0       0
  3622 ;;Total ram usage:        2 bytes
  3623 ;; Hardware stack levels used:    1
  3624 ;; Hardware stack levels required when called:    6
  3625 ;; This function calls:
  3626 ;;		_LCD_Command
  3627 ;; This function is called by:
  3628 ;;		_LCD_init
  3629 ;; This function uses a non-reentrant model
  3630 ;;
  3631                           
  3632                           
  3633                           ;psect for function _LCD_Clear
  3634  0F94                     _LCD_Clear:	
  3635                           
  3636                           ;My_header_16F.h: 281: LCD_Command(0x01);
  3637                           
  3638                           ;incstack = 0
  3639                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  3640  0F94  3001               	movlw	1
  3641  0F95  3187  274B  318F   	fcall	_LCD_Command
  3642                           
  3643                           ;My_header_16F.h: 282: _delay((unsigned long)((1100)*(32000000/4000000.0)));
  3644  0F98  300C               	movlw	12
  3645  0F99  0020               	movlb	0	; select bank0
  3646  0F9A  00A8               	movwf	??_LCD_Clear+1
  3647  0F9B  306C               	movlw	108
  3648  0F9C  00A7               	movwf	??_LCD_Clear
  3649  0F9D                     u1757:	
  3650  0F9D  0BA7               	decfsz	??_LCD_Clear,f
  3651  0F9E  2F9D               	goto	u1757
  3652  0F9F  0BA8               	decfsz	??_LCD_Clear+1,f
  3653  0FA0  2F9D               	goto	u1757
  3654  0FA1  0000               	nop
  3655  0FA2  0008               	return
  3656  0FA3                     __end_of_LCD_Clear:	
  3657                           
  3658                           	psect	text21
  3659  074B                     __ptext21:	
  3660 ;; *************** function _LCD_Command *****************
  3661 ;; Defined at:
  3662 ;;		line 267 in file "My_header_16F.h"
  3663 ;; Parameters:    Size  Location     Type
  3664 ;;  c               1    wreg     unsigned char 
  3665 ;; Auto vars:     Size  Location     Type
  3666 ;;  c               1    5[BANK0 ] unsigned char 
  3667 ;;  ans             1    6[BANK0 ] unsigned char 
  3668 ;; Return value:  Size  Location     Type
  3669 ;;		None               void
  3670 ;; Registers used:
  3671 ;;		wreg, status,2, status,0, pclath, cstack
  3672 ;; Tracked objects:
  3673 ;;		On entry : 0/0
  3674 ;;		On exit  : 0/0
  3675 ;;		Unchanged: 0/0
  3676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3677 ;;      Params:         0       0       0       0       0       0
  3678 ;;      Locals:         0       2       0       0       0       0
  3679 ;;      Temps:          0       1       0       0       0       0
  3680 ;;      Totals:         0       3       0       0       0       0
  3681 ;;Total ram usage:        3 bytes
  3682 ;; Hardware stack levels used:    1
  3683 ;; Hardware stack levels required when called:    5
  3684 ;; This function calls:
  3685 ;;		_I2C_Send
  3686 ;;		_I2C_Start
  3687 ;;		_I2C_Stop
  3688 ;; This function is called by:
  3689 ;;		_LCD_Clear
  3690 ;;		_LCD_SetCursor
  3691 ;;		_LCD_init
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           
  3696                           ;psect for function _LCD_Command
  3697  074B                     _LCD_Command:	
  3698                           
  3699                           ;incstack = 0
  3700                           ; Regs used in _LCD_Command: [wreg+status,2+status,0+pclath+cstack]
  3701                           ;LCD_Command@c stored from wreg
  3702  074B  0020               	movlb	0	; select bank0
  3703  074C  00A5               	movwf	LCD_Command@c
  3704                           
  3705                           ;My_header_16F.h: 268: uint8_t ans;
  3706                           ;My_header_16F.h: 270: ans = I2C_Start(0x3E, 0);
  3707  074D  01A2               	clrf	I2C_Start@rw
  3708  074E  303E               	movlw	62
  3709  074F  3187  27A4  3187   	fcall	_I2C_Start
  3710  0752  0020               	movlb	0	; select bank0
  3711  0753  00A4               	movwf	??_LCD_Command
  3712  0754  0824               	movf	??_LCD_Command,w
  3713  0755  00A6               	movwf	LCD_Command@ans
  3714                           
  3715                           ;My_header_16F.h: 271: if (ans == 0) {
  3716  0756  0826               	movf	LCD_Command@ans,w
  3717  0757  1D03               	btfss	3,2
  3718  0758  2F62               	goto	l208
  3719                           
  3720                           ;My_header_16F.h: 273: I2C_Send(0b10000000);
  3721  0759  3080               	movlw	128
  3722  075A  318F  27B3  3187   	fcall	_I2C_Send
  3723                           
  3724                           ;My_header_16F.h: 274: I2C_Send(c);
  3725  075D  0020               	movlb	0	; select bank0
  3726  075E  0825               	movf	LCD_Command@c,w
  3727  075F  318F  27B3  3187   	fcall	_I2C_Send
  3728  0762                     l208:	
  3729                           
  3730                           ;My_header_16F.h: 275: }
  3731                           ;My_header_16F.h: 276: I2C_Stop();
  3732  0762  318F  2757  3187   	fcall	_I2C_Stop
  3733                           
  3734                           ;My_header_16F.h: 277: _delay((unsigned long)((26)*(32000000/4000000.0)));
  3735  0765  3045               	movlw	69
  3736  0766  0020               	movlb	0	; select bank0
  3737  0767  00A4               	movwf	??_LCD_Command
  3738  0768                     u1767:	
  3739  0768  0BA4               	decfsz	??_LCD_Command,f
  3740  0769  2F68               	goto	u1767
  3741  076A  0008               	return
  3742  076B                     __end_of_LCD_Command:	
  3743                           
  3744                           	psect	text22
  3745  0F57                     __ptext22:	
  3746 ;; *************** function _I2C_Stop *****************
  3747 ;; Defined at:
  3748 ;;		line 237 in file "My_header_16F.h"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;		None
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;		None
  3753 ;; Return value:  Size  Location     Type
  3754 ;;		None               void
  3755 ;; Registers used:
  3756 ;;		wreg, status,2, status,0, pclath, cstack
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3762 ;;      Params:         0       0       0       0       0       0
  3763 ;;      Locals:         0       0       0       0       0       0
  3764 ;;      Temps:          0       0       0       0       0       0
  3765 ;;      Totals:         0       0       0       0       0       0
  3766 ;;Total ram usage:        0 bytes
  3767 ;; Hardware stack levels used:    1
  3768 ;; Hardware stack levels required when called:    4
  3769 ;; This function calls:
  3770 ;;		_I2C_IdleCheck
  3771 ;; This function is called by:
  3772 ;;		_LCD_Command
  3773 ;;		_LCD_Putc
  3774 ;;		_LCD_Puts
  3775 ;;		_RTC_Write
  3776 ;;		_RTC_Read
  3777 ;;		_LCD_CreateChar
  3778 ;;		_TM_init
  3779 ;;		_TM_Read
  3780 ;;		_EEP_Write
  3781 ;;		_EEP_Read
  3782 ;;		_EEP_Writes
  3783 ;; This function uses a non-reentrant model
  3784 ;;
  3785                           
  3786                           
  3787                           ;psect for function _I2C_Stop
  3788  0F57                     _I2C_Stop:	
  3789                           
  3790                           ;My_header_16F.h: 239: I2C_IdleCheck(0x5);
  3791                           
  3792                           ;incstack = 0
  3793                           ; Regs used in _I2C_Stop: [wreg+status,2+status,0+pclath+cstack]
  3794  0F57  3005               	movlw	5
  3795  0F58  318F  2785         	fcall	_I2C_IdleCheck
  3796                           
  3797                           ;My_header_16F.h: 240: SSP1CON2bits.PEN = 1;
  3798  0F5A  0024               	movlb	4	; select bank4
  3799  0F5B  1516               	bsf	22,2	;volatile
  3800  0F5C  0008               	return
  3801  0F5D                     __end_of_I2C_Stop:	
  3802                           
  3803                           	psect	text23
  3804  07A4                     __ptext23:	
  3805 ;; *************** function _I2C_Start *****************
  3806 ;; Defined at:
  3807 ;;		line 213 in file "My_header_16F.h"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;  adrs            1    wreg     unsigned char 
  3810 ;;  rw              1    2[BANK0 ] unsigned char 
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;  adrs            1    3[BANK0 ] unsigned char 
  3813 ;; Return value:  Size  Location     Type
  3814 ;;                  1    wreg      unsigned char 
  3815 ;; Registers used:
  3816 ;;		wreg, status,2, status,0, pclath, cstack
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3822 ;;      Params:         0       1       0       0       0       0
  3823 ;;      Locals:         0       1       0       0       0       0
  3824 ;;      Temps:          0       0       0       0       0       0
  3825 ;;      Totals:         0       2       0       0       0       0
  3826 ;;Total ram usage:        2 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; Hardware stack levels required when called:    4
  3829 ;; This function calls:
  3830 ;;		_I2C_IdleCheck
  3831 ;; This function is called by:
  3832 ;;		_LCD_Command
  3833 ;;		_LCD_Putc
  3834 ;;		_LCD_Puts
  3835 ;;		_RTC_Write
  3836 ;;		_RTC_Read
  3837 ;;		_LCD_CreateChar
  3838 ;;		_TM_init
  3839 ;;		_TM_Read
  3840 ;;		_EEP_Write
  3841 ;;		_EEP_Read
  3842 ;;		_EEP_Writes
  3843 ;; This function uses a non-reentrant model
  3844 ;;
  3845                           
  3846                           
  3847                           ;psect for function _I2C_Start
  3848  07A4                     _I2C_Start:	
  3849                           
  3850                           ;incstack = 0
  3851                           ; Regs used in _I2C_Start: [wreg+status,2+status,0+pclath+cstack]
  3852                           ;I2C_Start@adrs stored from wreg
  3853  07A4  0020               	movlb	0	; select bank0
  3854  07A5  00A3               	movwf	I2C_Start@adrs
  3855                           
  3856                           ;My_header_16F.h: 215: I2C_IdleCheck(0x5);
  3857  07A6  3005               	movlw	5
  3858  07A7  318F  2785  3187   	fcall	_I2C_IdleCheck
  3859                           
  3860                           ;My_header_16F.h: 216: SSP1CON2bits.SEN = 1;
  3861  07AA  0024               	movlb	4	; select bank4
  3862  07AB  1416               	bsf	22,0	;volatile
  3863                           
  3864                           ;My_header_16F.h: 218: I2C_IdleCheck(0x5);
  3865  07AC  3005               	movlw	5
  3866  07AD  318F  2785  3187   	fcall	_I2C_IdleCheck
  3867                           
  3868                           ;My_header_16F.h: 219: SSP1IF = 0;
  3869  07B0  0020               	movlb	0	; select bank0
  3870  07B1  1191               	bcf	17,3	;volatile
  3871                           
  3872                           ;My_header_16F.h: 220: SSP1BUF = (uint8_t) ((adrs << 1) + rw);
  3873  07B2  3523               	lslf	I2C_Start@adrs,w
  3874  07B3  0722               	addwf	I2C_Start@rw,w
  3875  07B4  0024               	movlb	4	; select bank4
  3876  07B5  0091               	movwf	17	;volatile
  3877  07B6                     l184:	
  3878                           ;My_header_16F.h: 221: while (!SSP1IF);
  3879                           
  3880  07B6  0020               	movlb	0	; select bank0
  3881  07B7  1D91               	btfss	17,3	;volatile
  3882  07B8  2FB6               	goto	l184
  3883                           
  3884                           ;My_header_16F.h: 222: return SSP1CON2bits.ACKSTAT;
  3885  07B9  0024               	movlb	4	; select bank4
  3886  07BA  0E16               	swapf	22,w	;volatile
  3887  07BB  0C89               	rrf	9,f
  3888  07BC  0C89               	rrf	9,f
  3889  07BD  3901               	andlw	1
  3890  07BE  0008               	return
  3891  07BF                     __end_of_I2C_Start:	
  3892                           
  3893                           	psect	text24
  3894  0FB3                     __ptext24:	
  3895 ;; *************** function _I2C_Send *****************
  3896 ;; Defined at:
  3897 ;;		line 243 in file "My_header_16F.h"
  3898 ;; Parameters:    Size  Location     Type
  3899 ;;  data            1    wreg     unsigned char 
  3900 ;; Auto vars:     Size  Location     Type
  3901 ;;  data            1    2[BANK0 ] unsigned char 
  3902 ;; Return value:  Size  Location     Type
  3903 ;;                  1    wreg      unsigned char 
  3904 ;; Registers used:
  3905 ;;		wreg, status,2, status,0, pclath, cstack
  3906 ;; Tracked objects:
  3907 ;;		On entry : 0/0
  3908 ;;		On exit  : 0/0
  3909 ;;		Unchanged: 0/0
  3910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3911 ;;      Params:         0       0       0       0       0       0
  3912 ;;      Locals:         0       1       0       0       0       0
  3913 ;;      Temps:          0       0       0       0       0       0
  3914 ;;      Totals:         0       1       0       0       0       0
  3915 ;;Total ram usage:        1 bytes
  3916 ;; Hardware stack levels used:    1
  3917 ;; Hardware stack levels required when called:    4
  3918 ;; This function calls:
  3919 ;;		_I2C_IdleCheck
  3920 ;; This function is called by:
  3921 ;;		_LCD_Command
  3922 ;;		_LCD_Putc
  3923 ;;		_LCD_Puts
  3924 ;;		_RTC_Write
  3925 ;;		_RTC_Read
  3926 ;;		_LCD_CreateChar
  3927 ;;		_TM_init
  3928 ;;		_TM_Read
  3929 ;;		_EEP_Write
  3930 ;;		_EEP_Read
  3931 ;;		_EEP_Writes
  3932 ;; This function uses a non-reentrant model
  3933 ;;
  3934                           
  3935                           
  3936                           ;psect for function _I2C_Send
  3937  0FB3                     _I2C_Send:	
  3938                           
  3939                           ;incstack = 0
  3940                           ; Regs used in _I2C_Send: [wreg+status,2+status,0+pclath+cstack]
  3941                           ;I2C_Send@data stored from wreg
  3942  0FB3  0020               	movlb	0	; select bank0
  3943  0FB4  00A2               	movwf	I2C_Send@data
  3944                           
  3945                           ;My_header_16F.h: 244: I2C_IdleCheck(0x5);
  3946  0FB5  3005               	movlw	5
  3947  0FB6  318F  2785  318F   	fcall	_I2C_IdleCheck
  3948                           
  3949                           ;My_header_16F.h: 245: SSP1IF = 0;
  3950  0FB9  0020               	movlb	0	; select bank0
  3951  0FBA  1191               	bcf	17,3	;volatile
  3952                           
  3953                           ;My_header_16F.h: 246: SSP1BUF = data;
  3954  0FBB  0822               	movf	I2C_Send@data,w
  3955  0FBC  0024               	movlb	4	; select bank4
  3956  0FBD  0091               	movwf	17	;volatile
  3957  0FBE                     l199:	
  3958                           ;My_header_16F.h: 247: while (!SSP1IF);
  3959                           
  3960  0FBE  0020               	movlb	0	; select bank0
  3961  0FBF  1D91               	btfss	17,3	;volatile
  3962  0FC0  2FBE               	goto	l199
  3963                           
  3964                           ;My_header_16F.h: 248: return SSP1CON2bits.ACKSTAT;
  3965                           ;	Return value of _I2C_Send is never used
  3966  0FC1  0024               	movlb	4	; select bank4
  3967  0FC2  0816               	movf	22,w	;volatile
  3968  0FC3  0008               	return
  3969  0FC4                     __end_of_I2C_Send:	
  3970                           
  3971                           	psect	text25
  3972  0F85                     __ptext25:	
  3973 ;; *************** function _I2C_IdleCheck *****************
  3974 ;; Defined at:
  3975 ;;		line 199 in file "My_header_16F.h"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;  mask            1    wreg     unsigned char 
  3978 ;; Auto vars:     Size  Location     Type
  3979 ;;  mask            1    1[BANK0 ] unsigned char 
  3980 ;; Return value:  Size  Location     Type
  3981 ;;		None               void
  3982 ;; Registers used:
  3983 ;;		wreg, status,2, status,0
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3989 ;;      Params:         0       0       0       0       0       0
  3990 ;;      Locals:         0       1       0       0       0       0
  3991 ;;      Temps:          0       1       0       0       0       0
  3992 ;;      Totals:         0       2       0       0       0       0
  3993 ;;Total ram usage:        2 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; Hardware stack levels required when called:    3
  3996 ;; This function calls:
  3997 ;;		Nothing
  3998 ;; This function is called by:
  3999 ;;		_I2C_Start
  4000 ;;		_I2C_rStart
  4001 ;;		_I2C_Stop
  4002 ;;		_I2C_Send
  4003 ;;		_I2C_Receive
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           
  4008                           ;psect for function _I2C_IdleCheck
  4009  0F85                     _I2C_IdleCheck:	
  4010                           
  4011                           ;incstack = 0
  4012                           ; Regs used in _I2C_IdleCheck: [wreg+status,2+status,0]
  4013                           ;I2C_IdleCheck@mask stored from wreg
  4014  0F85  0020               	movlb	0	; select bank0
  4015  0F86  00A1               	movwf	I2C_IdleCheck@mask
  4016  0F87                     l1504:	
  4017                           ;My_header_16F.h: 200: while ((SSP1CON2 & 0x1F) | (SSP1STAT & mask));
  4018                           
  4019  0F87  0821               	movf	I2C_IdleCheck@mask,w
  4020  0F88  0024               	movlb	4	; select bank4
  4021  0F89  0514               	andwf	20,w	;volatile
  4022  0F8A  0020               	movlb	0	; select bank0
  4023  0F8B  00A0               	movwf	??_I2C_IdleCheck
  4024  0F8C  0024               	movlb	4	; select bank4
  4025  0F8D  0816               	movf	22,w	;volatile
  4026  0F8E  391F               	andlw	31
  4027  0F8F  0020               	movlb	0	; select bank0
  4028  0F90  0420               	iorwf	??_I2C_IdleCheck,w
  4029  0F91  1903               	btfsc	3,2
  4030  0F92  0008               	return
  4031  0F93  2F87               	goto	l1504
  4032  0F94                     __end_of_I2C_IdleCheck:	
  4033                           
  4034                           	psect	text26
  4035  0F6E                     __ptext26:	
  4036 ;; *************** function _I2C_init *****************
  4037 ;; Defined at:
  4038 ;;		line 203 in file "My_header_16F.h"
  4039 ;; Parameters:    Size  Location     Type
  4040 ;;		None
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;		None
  4043 ;; Return value:  Size  Location     Type
  4044 ;;		None               void
  4045 ;; Registers used:
  4046 ;;		wreg
  4047 ;; Tracked objects:
  4048 ;;		On entry : 0/0
  4049 ;;		On exit  : 0/0
  4050 ;;		Unchanged: 0/0
  4051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4052 ;;      Params:         0       0       0       0       0       0
  4053 ;;      Locals:         0       0       0       0       0       0
  4054 ;;      Temps:          0       0       0       0       0       0
  4055 ;;      Totals:         0       0       0       0       0       0
  4056 ;;Total ram usage:        0 bytes
  4057 ;; Hardware stack levels used:    1
  4058 ;; Hardware stack levels required when called:    3
  4059 ;; This function calls:
  4060 ;;		Nothing
  4061 ;; This function is called by:
  4062 ;;		_main
  4063 ;; This function uses a non-reentrant model
  4064 ;;
  4065                           
  4066                           
  4067                           ;psect for function _I2C_init
  4068  0F6E                     _I2C_init:	
  4069                           
  4070                           ;My_header_16F.h: 204: SSP1STAT = 0b10000000;
  4071                           
  4072                           ;incstack = 0
  4073                           ; Regs used in _I2C_init: [wreg]
  4074  0F6E  3080               	movlw	128
  4075  0F6F  0024               	movlb	4	; select bank4
  4076  0F70  0094               	movwf	20	;volatile
  4077                           
  4078                           ;My_header_16F.h: 205: SSP1CON1 = 0b00101000;
  4079  0F71  3028               	movlw	40
  4080  0F72  0095               	movwf	21	;volatile
  4081                           
  4082                           ;My_header_16F.h: 206: SSP1ADD = 0x13;
  4083  0F73  3013               	movlw	19
  4084  0F74  0092               	movwf	18	;volatile
  4085                           
  4086                           ;My_header_16F.h: 209: SSP1IF = 0;
  4087  0F75  0020               	movlb	0	; select bank0
  4088  0F76  1191               	bcf	17,3	;volatile
  4089                           
  4090                           ;My_header_16F.h: 210: BCL1IF = 0;
  4091  0F77  1192               	bcf	18,3	;volatile
  4092  0F78  0008               	return
  4093  0F79                     __end_of_I2C_init:	
  4094                           
  4095                           	psect	intentry
  4096  0004                     __pintentry:	
  4097 ;; *************** function _isr *****************
  4098 ;; Defined at:
  4099 ;;		line 40 in file "PIC16F1827-I2C_LCD_RTC01.c"
  4100 ;; Parameters:    Size  Location     Type
  4101 ;;		None
  4102 ;; Auto vars:     Size  Location     Type
  4103 ;;		None
  4104 ;; Return value:  Size  Location     Type
  4105 ;;		None               void
  4106 ;; Registers used:
  4107 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4108 ;; Tracked objects:
  4109 ;;		On entry : 0/0
  4110 ;;		On exit  : 0/0
  4111 ;;		Unchanged: 0/0
  4112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4113 ;;      Params:         0       0       0       0       0       0
  4114 ;;      Locals:         0       0       0       0       0       0
  4115 ;;      Temps:          2       0       0       0       0       0
  4116 ;;      Totals:         2       0       0       0       0       0
  4117 ;;Total ram usage:        2 bytes
  4118 ;; Hardware stack levels used:    1
  4119 ;; Hardware stack levels required when called:    2
  4120 ;; This function calls:
  4121 ;;		_button_timer_interrupt
  4122 ;;		_interrupt_TXIF
  4123 ;;		i1_tx_send
  4124 ;; This function is called by:
  4125 ;;		Interrupt level 1
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129  0004                     _isr:	
  4130                           
  4131                           ;incstack = 0
  4132                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4133  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4134  0005  3180               	pagesel	$
  4135  0006  0020               	movlb	0	; select bank0
  4136  0007  087F               	movf	127,w
  4137  0008  00F7               	movwf	??_isr+1
  4138                           
  4139                           ;PIC16F1827-I2C_LCD_RTC01.c: 41: interrupt_TXIF();
  4140  0009  318F  27E9  3180   	fcall	_interrupt_TXIF
  4141                           
  4142                           ;PIC16F1827-I2C_LCD_RTC01.c: 42: if (RCIF) {
  4143  000C  0020               	movlb	0	; select bank0
  4144  000D  1E91               	btfss	17,5	;volatile
  4145  000E  2815               	goto	i1l2058
  4146                           
  4147                           ;PIC16F1827-I2C_LCD_RTC01.c: 43: RCIF = 0;
  4148  000F  1291               	bcf	17,5	;volatile
  4149                           
  4150                           ;PIC16F1827-I2C_LCD_RTC01.c: 44: tx_send(RCREG);
  4151  0010  0023               	movlb	3	; select bank3
  4152  0011  0819               	movf	25,w	;volatile
  4153  0012  318F  2763  3180   	fcall	i1_tx_send
  4154  0015                     i1l2058:	
  4155                           
  4156                           ;PIC16F1827-I2C_LCD_RTC01.c: 45: }
  4157                           ;PIC16F1827-I2C_LCD_RTC01.c: 46: if (TMR1IF == 1) {
  4158  0015  0020               	movlb	0	; select bank0
  4159  0016  1C11               	btfss	17,0	;volatile
  4160  0017  283B               	goto	i1l294
  4161                           
  4162                           ;PIC16F1827-I2C_LCD_RTC01.c: 47: TMR1IF = 0;
  4163  0018  1011               	bcf	17,0	;volatile
  4164                           
  4165                           ;PIC16F1827-I2C_LCD_RTC01.c: 48: cnt_t1++;
  4166  0019  3001               	movlw	1
  4167  001A  00F6               	movwf	??_isr
  4168  001B  0876               	movf	??_isr,w
  4169  001C  07F8               	addwf	_cnt_t1,f
  4170                           
  4171                           ;PIC16F1827-I2C_LCD_RTC01.c: 49: if (cnt_t1 % 16 == 0)LATB0 = ~LATB0;
  4172  001D  0878               	movf	_cnt_t1,w
  4173  001E  390F               	andlw	15
  4174  001F  1D03               	btfss	3,2
  4175  0020  2824               	goto	i1l2068
  4176  0021  3001               	movlw	1
  4177  0022  0022               	movlb	2	; select bank2
  4178  0023  068D               	xorwf	13,f
  4179  0024                     i1l2068:	
  4180                           
  4181                           ;PIC16F1827-I2C_LCD_RTC01.c: 50: button_timer_interrupt(&sw_RA0, !RA0);
  4182  0024  1003               	clrc
  4183  0025  0020               	movlb	0	; select bank0
  4184  0026  1C0C               	btfss	12,0	;volatile
  4185  0027  1403               	setc
  4186  0028  3000               	movlw	0
  4187  0029  1803               	btfsc	3,0
  4188  002A  3001               	movlw	1
  4189  002B  00F0               	movwf	button_timer_interrupt@sw_value
  4190  002C  3043               	movlw	(low (_sw_RA0| 0))& (0+255)
  4191  002D  3184  2416  3180   	fcall	_button_timer_interrupt
  4192                           
  4193                           ;PIC16F1827-I2C_LCD_RTC01.c: 51: button_timer_interrupt(&sw_RA1, !RA1);
  4194  0030  1003               	clrc
  4195  0031  0020               	movlb	0	; select bank0
  4196  0032  1C8C               	btfss	12,1	;volatile
  4197  0033  1403               	setc
  4198  0034  3000               	movlw	0
  4199  0035  1803               	btfsc	3,0
  4200  0036  3001               	movlw	1
  4201  0037  00F0               	movwf	button_timer_interrupt@sw_value
  4202  0038  3079               	movlw	(low (_sw_RA1| 0))& (0+255)
  4203  0039  3184  2416         	fcall	_button_timer_interrupt
  4204  003B                     i1l294:	
  4205  003B  0877               	movf	??_isr+1,w
  4206  003C  0020               	movlb	0	; select bank0
  4207  003D  00FF               	movwf	127
  4208  003E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4209  003F  0009               	retfie
  4210  0040                     __end_of_isr:	
  4211                           
  4212                           	psect	text28
  4213  0F63                     __ptext28:	
  4214 ;; *************** function i1_tx_send *****************
  4215 ;; Defined at:
  4216 ;;		line 161 in file "My_header_16F.h"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;  asciicode       1    wreg     unsigned char 
  4219 ;; Auto vars:     Size  Location     Type
  4220 ;;  asciicode       1    5[COMMON] unsigned char 
  4221 ;; Return value:  Size  Location     Type
  4222 ;;		None               void
  4223 ;; Registers used:
  4224 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4230 ;;      Params:         0       0       0       0       0       0
  4231 ;;      Locals:         1       0       0       0       0       0
  4232 ;;      Temps:          1       0       0       0       0       0
  4233 ;;      Totals:         2       0       0       0       0       0
  4234 ;;Total ram usage:        2 bytes
  4235 ;; Hardware stack levels used:    1
  4236 ;; Hardware stack levels required when called:    1
  4237 ;; This function calls:
  4238 ;;		i1_ringbuf_push
  4239 ;; This function is called by:
  4240 ;;		_isr
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           
  4245                           ;psect for function i1_tx_send
  4246  0F63                     i1_tx_send:	
  4247                           
  4248                           ;incstack = 0
  4249                           ; Regs used in i1_tx_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4250                           ;i1tx_send@asciicode stored from wreg
  4251  0F63  00F5               	movwf	i1tx_send@asciicode
  4252                           
  4253                           ;My_header_16F.h: 162: ringbuf_push(&tx_buf, asciicode);
  4254  0F64  0875               	movf	i1tx_send@asciicode,w
  4255  0F65  00F4               	movwf	??i1_tx_send
  4256  0F66  0874               	movf	??i1_tx_send,w
  4257  0F67  00F0               	movwf	i1ringbuf_push@asciicode
  4258  0F68  303F               	movlw	(low (_tx_buf| 0))& (0+255)
  4259  0F69  3186  2695         	fcall	i1_ringbuf_push
  4260                           
  4261                           ;My_header_16F.h: 163: PIE1bits.TXIE = 1;
  4262  0F6B  0021               	movlb	1	; select bank1
  4263  0F6C  1611               	bsf	17,4	;volatile
  4264  0F6D  0008               	return
  4265  0F6E                     __end_ofi1_tx_send:	
  4266                           
  4267                           	psect	text29
  4268  0695                     __ptext29:	
  4269 ;; *************** function i1_ringbuf_push *****************
  4270 ;; Defined at:
  4271 ;;		line 120 in file "My_header_16F.h"
  4272 ;; Parameters:    Size  Location     Type
  4273 ;;  rb              1    wreg     PTR struct ringbuf
  4274 ;;		 -> tx_buf(4), 
  4275 ;;  asciicode       1    0[COMMON] unsigned char 
  4276 ;; Auto vars:     Size  Location     Type
  4277 ;;  rb              1    3[COMMON] PTR struct ringbuf
  4278 ;;		 -> tx_buf(4), 
  4279 ;; Return value:  Size  Location     Type
  4280 ;;		None               void
  4281 ;; Registers used:
  4282 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  4283 ;; Tracked objects:
  4284 ;;		On entry : 0/0
  4285 ;;		On exit  : 0/0
  4286 ;;		Unchanged: 0/0
  4287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4288 ;;      Params:         1       0       0       0       0       0
  4289 ;;      Locals:         1       0       0       0       0       0
  4290 ;;      Temps:          2       0       0       0       0       0
  4291 ;;      Totals:         4       0       0       0       0       0
  4292 ;;Total ram usage:        4 bytes
  4293 ;; Hardware stack levels used:    1
  4294 ;; This function calls:
  4295 ;;		Nothing
  4296 ;; This function is called by:
  4297 ;;		i1_tx_send
  4298 ;; This function uses a non-reentrant model
  4299 ;;
  4300                           
  4301                           
  4302                           ;psect for function i1_ringbuf_push
  4303  0695                     i1_ringbuf_push:	
  4304                           
  4305                           ;incstack = 0
  4306                           ; Regs used in i1_ringbuf_push: [wreg-fsr1h+status,2+status,0]
  4307                           ;i1ringbuf_push@rb stored from wreg
  4308  0695  00F3               	movwf	i1ringbuf_push@rb
  4309                           
  4310                           ;My_header_16F.h: 121: rb->buf[rb->head] = asciicode;
  4311  0696  0870               	movf	i1ringbuf_push@asciicode,w
  4312  0697  00F1               	movwf	??i1_ringbuf_push
  4313  0698  0873               	movf	i1ringbuf_push@rb,w
  4314  0699  0086               	movwf	6
  4315  069A  0187               	clrf	7
  4316  069B  0873               	movf	i1ringbuf_push@rb,w
  4317  069C  3E02               	addlw	2
  4318  069D  0084               	movwf	4
  4319  069E  0185               	clrf	5
  4320  069F  0800               	movf	0,w
  4321  06A0  0701               	addwf	1,w
  4322  06A1  00F2               	movwf	??i1_ringbuf_push+1
  4323  06A2  0872               	movf	??i1_ringbuf_push+1,w
  4324  06A3  0086               	movwf	6
  4325  06A4  0187               	clrf	7
  4326  06A5  0871               	movf	??i1_ringbuf_push,w
  4327  06A6  0081               	movwf	1
  4328                           
  4329                           ;My_header_16F.h: 122: rb->head++;
  4330  06A7  3001               	movlw	1
  4331  06A8  00F1               	movwf	??i1_ringbuf_push
  4332  06A9  0873               	movf	i1ringbuf_push@rb,w
  4333  06AA  3E02               	addlw	2
  4334  06AB  0086               	movwf	6
  4335  06AC  0187               	clrf	7
  4336  06AD  0871               	movf	??i1_ringbuf_push,w
  4337  06AE  0781               	addwf	1,f
  4338                           
  4339                           ;My_header_16F.h: 123: if (rb->head >= rb->size) {
  4340  06AF  0873               	movf	i1ringbuf_push@rb,w
  4341  06B0  3E02               	addlw	2
  4342  06B1  0086               	movwf	6
  4343  06B2  0187               	clrf	7
  4344  06B3  0A73               	incf	i1ringbuf_push@rb,w
  4345  06B4  0084               	movwf	4
  4346  06B5  0185               	clrf	5
  4347  06B6  0800               	movf	0,w
  4348  06B7  0201               	subwf	1,w
  4349  06B8  1C03               	skipc
  4350  06B9  0008               	return
  4351                           
  4352                           ;My_header_16F.h: 124: rb->head = 0;
  4353  06BA  0873               	movf	i1ringbuf_push@rb,w
  4354  06BB  3E02               	addlw	2
  4355  06BC  0086               	movwf	6
  4356  06BD  0187               	clrf	7
  4357  06BE  0181               	clrf	1
  4358  06BF  0008               	return
  4359  06C0                     __end_ofi1_ringbuf_push:	
  4360                           
  4361                           	psect	text30
  4362  0FE9                     __ptext30:	
  4363 ;; *************** function _interrupt_TXIF *****************
  4364 ;; Defined at:
  4365 ;;		line 174 in file "My_header_16F.h"
  4366 ;; Parameters:    Size  Location     Type
  4367 ;;		None
  4368 ;; Auto vars:     Size  Location     Type
  4369 ;;		None
  4370 ;; Return value:  Size  Location     Type
  4371 ;;		None               void
  4372 ;; Registers used:
  4373 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4374 ;; Tracked objects:
  4375 ;;		On entry : 0/0
  4376 ;;		On exit  : 0/0
  4377 ;;		Unchanged: 0/0
  4378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4379 ;;      Params:         0       0       0       0       0       0
  4380 ;;      Locals:         0       0       0       0       0       0
  4381 ;;      Temps:          0       0       0       0       0       0
  4382 ;;      Totals:         0       0       0       0       0       0
  4383 ;;Total ram usage:        0 bytes
  4384 ;; Hardware stack levels used:    1
  4385 ;; Hardware stack levels required when called:    1
  4386 ;; This function calls:
  4387 ;;		_ringbuf_num
  4388 ;;		_ringbuf_pop
  4389 ;; This function is called by:
  4390 ;;		_isr
  4391 ;; This function uses a non-reentrant model
  4392 ;;
  4393                           
  4394                           
  4395                           ;psect for function _interrupt_TXIF
  4396  0FE9                     _interrupt_TXIF:	
  4397                           
  4398                           ;My_header_16F.h: 175: if (TXIE && TXIF) {
  4399                           
  4400                           ;incstack = 0
  4401                           ; Regs used in _interrupt_TXIF: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4402  0FE9  0021               	movlb	1	; select bank1
  4403  0FEA  1E11               	btfss	17,4	;volatile
  4404  0FEB  0008               	return
  4405  0FEC  0020               	movlb	0	; select bank0
  4406  0FED  1E11               	btfss	17,4	;volatile
  4407  0FEE  0008               	return
  4408                           
  4409                           ;My_header_16F.h: 176: TXIF = 0;
  4410  0FEF  1211               	bcf	17,4	;volatile
  4411                           
  4412                           ;My_header_16F.h: 177: if (ringbuf_num(&tx_buf) > 0) {
  4413  0FF0  303F               	movlw	(low (_tx_buf| 0))& (0+255)
  4414  0FF1  3186  26C0  318F   	fcall	_ringbuf_num
  4415  0FF4  3A00               	xorlw	0
  4416  0FF5  1903               	skipnz
  4417  0FF6  2FFD               	goto	i1l164
  4418                           
  4419                           ;My_header_16F.h: 178: TXREG = ringbuf_pop(&tx_buf);
  4420  0FF7  303F               	movlw	(low (_tx_buf| 0))& (0+255)
  4421  0FF8  3186  2669         	fcall	_ringbuf_pop
  4422  0FFA  0023               	movlb	3	; select bank3
  4423  0FFB  009A               	movwf	26	;volatile
  4424                           
  4425                           ;My_header_16F.h: 179: } else {
  4426  0FFC  0008               	return
  4427  0FFD                     i1l164:	
  4428                           
  4429                           ;My_header_16F.h: 180: PIE1bits.TXIE = 0;
  4430  0FFD  0021               	movlb	1	; select bank1
  4431  0FFE  1211               	bcf	17,4	;volatile
  4432  0FFF  0008               	return
  4433  1000                     __end_of_interrupt_TXIF:	
  4434                           
  4435                           	psect	text31
  4436  0669                     __ptext31:	
  4437 ;; *************** function _ringbuf_pop *****************
  4438 ;; Defined at:
  4439 ;;		line 128 in file "My_header_16F.h"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  rb              1    wreg     PTR struct ringbuf
  4442 ;;		 -> tx_buf(4), 
  4443 ;; Auto vars:     Size  Location     Type
  4444 ;;  rb              1    3[COMMON] PTR struct ringbuf
  4445 ;;		 -> tx_buf(4), 
  4446 ;;  ret             1    2[COMMON] unsigned char 
  4447 ;; Return value:  Size  Location     Type
  4448 ;;                  1    wreg      unsigned char 
  4449 ;; Registers used:
  4450 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  4451 ;; Tracked objects:
  4452 ;;		On entry : 0/0
  4453 ;;		On exit  : 0/0
  4454 ;;		Unchanged: 0/0
  4455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4456 ;;      Params:         0       0       0       0       0       0
  4457 ;;      Locals:         2       0       0       0       0       0
  4458 ;;      Temps:          2       0       0       0       0       0
  4459 ;;      Totals:         4       0       0       0       0       0
  4460 ;;Total ram usage:        4 bytes
  4461 ;; Hardware stack levels used:    1
  4462 ;; This function calls:
  4463 ;;		Nothing
  4464 ;; This function is called by:
  4465 ;;		_interrupt_TXIF
  4466 ;; This function uses a non-reentrant model
  4467 ;;
  4468                           
  4469                           
  4470                           ;psect for function _ringbuf_pop
  4471  0669                     _ringbuf_pop:	
  4472                           
  4473                           ;incstack = 0
  4474                           ; Regs used in _ringbuf_pop: [wreg-fsr1h+status,2+status,0]
  4475                           ;ringbuf_pop@rb stored from wreg
  4476  0669  00F3               	movwf	ringbuf_pop@rb
  4477                           
  4478                           ;My_header_16F.h: 129: uint8_t ret = rb->buf[rb->tail];
  4479  066A  0873               	movf	ringbuf_pop@rb,w
  4480  066B  0086               	movwf	6
  4481  066C  0187               	clrf	7
  4482  066D  0873               	movf	ringbuf_pop@rb,w
  4483  066E  3E03               	addlw	3
  4484  066F  0084               	movwf	4
  4485  0670  0185               	clrf	5
  4486  0671  0800               	movf	0,w
  4487  0672  0701               	addwf	1,w
  4488  0673  00F0               	movwf	??_ringbuf_pop
  4489  0674  0870               	movf	??_ringbuf_pop,w
  4490  0675  0086               	movwf	6
  4491  0676  0187               	clrf	7
  4492  0677  0801               	movf	1,w
  4493  0678  00F1               	movwf	??_ringbuf_pop+1
  4494  0679  0871               	movf	??_ringbuf_pop+1,w
  4495  067A  00F2               	movwf	ringbuf_pop@ret
  4496                           
  4497                           ;My_header_16F.h: 130: rb->tail++;
  4498  067B  3001               	movlw	1
  4499  067C  00F0               	movwf	??_ringbuf_pop
  4500  067D  0873               	movf	ringbuf_pop@rb,w
  4501  067E  3E03               	addlw	3
  4502  067F  0086               	movwf	6
  4503  0680  0187               	clrf	7
  4504  0681  0870               	movf	??_ringbuf_pop,w
  4505  0682  0781               	addwf	1,f
  4506                           
  4507                           ;My_header_16F.h: 131: if (rb->tail >= rb->size) {
  4508  0683  0873               	movf	ringbuf_pop@rb,w
  4509  0684  3E03               	addlw	3
  4510  0685  0086               	movwf	6
  4511  0686  0187               	clrf	7
  4512  0687  0A73               	incf	ringbuf_pop@rb,w
  4513  0688  0084               	movwf	4
  4514  0689  0185               	clrf	5
  4515  068A  0800               	movf	0,w
  4516  068B  0201               	subwf	1,w
  4517  068C  1C03               	skipc
  4518  068D  2E93               	goto	i1l1652
  4519                           
  4520                           ;My_header_16F.h: 132: rb->tail = 0;
  4521  068E  0873               	movf	ringbuf_pop@rb,w
  4522  068F  3E03               	addlw	3
  4523  0690  0086               	movwf	6
  4524  0691  0187               	clrf	7
  4525  0692  0181               	clrf	1
  4526  0693                     i1l1652:	
  4527                           
  4528                           ;My_header_16F.h: 133: }
  4529                           ;My_header_16F.h: 134: return ret;
  4530  0693  0872               	movf	ringbuf_pop@ret,w
  4531  0694  0008               	return
  4532  0695                     __end_of_ringbuf_pop:	
  4533                           
  4534                           	psect	text32
  4535  06C0                     __ptext32:	
  4536 ;; *************** function _ringbuf_num *****************
  4537 ;; Defined at:
  4538 ;;		line 137 in file "My_header_16F.h"
  4539 ;; Parameters:    Size  Location     Type
  4540 ;;  rb              1    wreg     PTR struct ringbuf
  4541 ;;		 -> tx_buf(4), 
  4542 ;; Auto vars:     Size  Location     Type
  4543 ;;  rb              1    1[COMMON] PTR struct ringbuf
  4544 ;;		 -> tx_buf(4), 
  4545 ;; Return value:  Size  Location     Type
  4546 ;;                  1    wreg      unsigned char 
  4547 ;; Registers used:
  4548 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  4549 ;; Tracked objects:
  4550 ;;		On entry : 0/0
  4551 ;;		On exit  : 0/0
  4552 ;;		Unchanged: 0/0
  4553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4554 ;;      Params:         0       0       0       0       0       0
  4555 ;;      Locals:         1       0       0       0       0       0
  4556 ;;      Temps:          1       0       0       0       0       0
  4557 ;;      Totals:         2       0       0       0       0       0
  4558 ;;Total ram usage:        2 bytes
  4559 ;; Hardware stack levels used:    1
  4560 ;; This function calls:
  4561 ;;		Nothing
  4562 ;; This function is called by:
  4563 ;;		_interrupt_TXIF
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           
  4568                           ;psect for function _ringbuf_num
  4569  06C0                     _ringbuf_num:	
  4570                           
  4571                           ;incstack = 0
  4572                           ; Regs used in _ringbuf_num: [wreg-fsr1h+status,2+status,0]
  4573                           ;ringbuf_num@rb stored from wreg
  4574  06C0  00F1               	movwf	ringbuf_num@rb
  4575                           
  4576                           ;My_header_16F.h: 138: if (rb->head >= rb->tail) {
  4577  06C1  0871               	movf	ringbuf_num@rb,w
  4578  06C2  3E02               	addlw	2
  4579  06C3  0086               	movwf	6
  4580  06C4  0187               	clrf	7
  4581  06C5  0871               	movf	ringbuf_num@rb,w
  4582  06C6  3E03               	addlw	3
  4583  06C7  0084               	movwf	4
  4584  06C8  0185               	clrf	5
  4585  06C9  0800               	movf	0,w
  4586  06CA  0201               	subwf	1,w
  4587  06CB  1C03               	skipc
  4588  06CC  2ED9               	goto	i1l1664
  4589                           
  4590                           ;My_header_16F.h: 139: return (rb->head - rb->tail);
  4591  06CD  0871               	movf	ringbuf_num@rb,w
  4592  06CE  3E02               	addlw	2
  4593  06CF  0086               	movwf	6
  4594  06D0  0187               	clrf	7
  4595  06D1  0871               	movf	ringbuf_num@rb,w
  4596  06D2  3E03               	addlw	3
  4597  06D3  0084               	movwf	4
  4598  06D4  0185               	clrf	5
  4599  06D5  0300               	decf	0,w
  4600  06D6  3AFF               	xorlw	255
  4601  06D7  0701               	addwf	1,w
  4602                           
  4603                           ;My_header_16F.h: 140: } else {
  4604  06D8  0008               	return
  4605  06D9                     i1l1664:	
  4606                           
  4607                           ;My_header_16F.h: 141: return (rb->size + rb->head - rb->tail);
  4608  06D9  0871               	movf	ringbuf_num@rb,w
  4609  06DA  3E02               	addlw	2
  4610  06DB  0086               	movwf	6
  4611  06DC  0187               	clrf	7
  4612  06DD  0A71               	incf	ringbuf_num@rb,w
  4613  06DE  0084               	movwf	4
  4614  06DF  0185               	clrf	5
  4615  06E0  0800               	movf	0,w
  4616  06E1  00F0               	movwf	??_ringbuf_num
  4617  06E2  0871               	movf	ringbuf_num@rb,w
  4618  06E3  3E03               	addlw	3
  4619  06E4  0084               	movwf	4
  4620  06E5  0185               	clrf	5
  4621  06E6  0300               	decf	0,w
  4622  06E7  3AFF               	xorlw	255
  4623  06E8  0770               	addwf	??_ringbuf_num,w
  4624  06E9  0701               	addwf	1,w
  4625  06EA  0008               	return
  4626  06EB                     __end_of_ringbuf_num:	
  4627                           
  4628                           	psect	text33
  4629  0416                     __ptext33:	
  4630 ;; *************** function _button_timer_interrupt *****************
  4631 ;; Defined at:
  4632 ;;		line 87 in file "My_header_16F.h"
  4633 ;; Parameters:    Size  Location     Type
  4634 ;;  bt              1    wreg     PTR struct button
  4635 ;;		 -> sw_RA1(3), sw_RA0(3), 
  4636 ;;  sw_value        1    0[COMMON] unsigned char 
  4637 ;; Auto vars:     Size  Location     Type
  4638 ;;  bt              1    3[COMMON] PTR struct button
  4639 ;;		 -> sw_RA1(3), sw_RA0(3), 
  4640 ;; Return value:  Size  Location     Type
  4641 ;;		None               void
  4642 ;; Registers used:
  4643 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4644 ;; Tracked objects:
  4645 ;;		On entry : 0/0
  4646 ;;		On exit  : 0/0
  4647 ;;		Unchanged: 0/0
  4648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4649 ;;      Params:         1       0       0       0       0       0
  4650 ;;      Locals:         1       0       0       0       0       0
  4651 ;;      Temps:          2       0       0       0       0       0
  4652 ;;      Totals:         4       0       0       0       0       0
  4653 ;;Total ram usage:        4 bytes
  4654 ;; Hardware stack levels used:    1
  4655 ;; This function calls:
  4656 ;;		Nothing
  4657 ;; This function is called by:
  4658 ;;		_isr
  4659 ;; This function uses a non-reentrant model
  4660 ;;
  4661                           
  4662                           
  4663                           ;psect for function _button_timer_interrupt
  4664  0416                     _button_timer_interrupt:	
  4665                           
  4666                           ;incstack = 0
  4667                           ; Regs used in _button_timer_interrupt: [wreg+fsr1l+fsr1h+status,2+status,0]
  4668                           ;button_timer_interrupt@bt stored from wreg
  4669  0416  00F3               	movwf	button_timer_interrupt@bt
  4670                           
  4671                           ;My_header_16F.h: 88: if (sw_value) {
  4672  0417  0870               	movf	button_timer_interrupt@sw_value,w
  4673  0418  1903               	btfsc	3,2
  4674  0419  2C6D               	goto	i1l1792
  4675                           
  4676                           ;My_header_16F.h: 89: if (bt->cnt_sw < 150 + 1) bt->cnt_sw++;
  4677  041A  0873               	movf	button_timer_interrupt@bt,w
  4678  041B  0086               	movwf	6
  4679  041C  0187               	clrf	7
  4680  041D  3F40               	moviw [0]fsr1
  4681  041E  00F1               	movwf	??_button_timer_interrupt
  4682  041F  3F41               	moviw [1]fsr1
  4683  0420  00F2               	movwf	??_button_timer_interrupt+1
  4684  0421  3000               	movlw	0
  4685  0422  0272               	subwf	??_button_timer_interrupt+1,w
  4686  0423  3097               	movlw	151
  4687  0424  1903               	skipnz
  4688  0425  0271               	subwf	??_button_timer_interrupt,w
  4689  0426  1803               	skipnc
  4690  0427  2C30               	goto	i1l116
  4691  0428  0873               	movf	button_timer_interrupt@bt,w
  4692  0429  0086               	movwf	6
  4693  042A  0187               	clrf	7
  4694  042B  3001               	movlw	1
  4695  042C  0781               	addwf	1,f
  4696  042D  3141               	addfsr 1,1
  4697  042E  1803               	skipnc
  4698  042F  0A81               	incf	1,f
  4699  0430                     i1l116:	
  4700                           
  4701                           ;My_header_16F.h: 90: if (bt->cnt_sw == 150)bt->flag.long_holding_3 = 1;
  4702  0430  0873               	movf	button_timer_interrupt@bt,w
  4703  0431  0086               	movwf	6
  4704  0432  0187               	clrf	7
  4705  0433  0016               	moviw fsr1++
  4706  0434  3A96               	xorlw	150
  4707  0435  00F1               	movwf	??_button_timer_interrupt
  4708  0436  0016               	moviw fsr1++
  4709  0437  04F1               	iorwf	??_button_timer_interrupt,f
  4710  0438  1D03               	btfss	3,2
  4711  0439  2C3F               	goto	i1l117
  4712  043A  0873               	movf	button_timer_interrupt@bt,w
  4713  043B  3E02               	addlw	2
  4714  043C  0086               	movwf	6
  4715  043D  0187               	clrf	7
  4716  043E  1781               	bsf	1,7
  4717  043F                     i1l117:	
  4718                           
  4719                           ;My_header_16F.h: 91: if (bt->cnt_sw == 75)bt->flag.long_holding_2 = 1;
  4720  043F  0873               	movf	button_timer_interrupt@bt,w
  4721  0440  0086               	movwf	6
  4722  0441  0187               	clrf	7
  4723  0442  0016               	moviw fsr1++
  4724  0443  3A4B               	xorlw	75
  4725  0444  00F1               	movwf	??_button_timer_interrupt
  4726  0445  0016               	moviw fsr1++
  4727  0446  04F1               	iorwf	??_button_timer_interrupt,f
  4728  0447  1D03               	btfss	3,2
  4729  0448  2C4E               	goto	i1l118
  4730  0449  0873               	movf	button_timer_interrupt@bt,w
  4731  044A  3E02               	addlw	2
  4732  044B  0086               	movwf	6
  4733  044C  0187               	clrf	7
  4734  044D  1701               	bsf	1,6
  4735  044E                     i1l118:	
  4736                           
  4737                           ;My_header_16F.h: 92: if (bt->cnt_sw == 30)bt->flag.long_holding_1 = 1;
  4738  044E  0873               	movf	button_timer_interrupt@bt,w
  4739  044F  0086               	movwf	6
  4740  0450  0187               	clrf	7
  4741  0451  0016               	moviw fsr1++
  4742  0452  3A1E               	xorlw	30
  4743  0453  00F1               	movwf	??_button_timer_interrupt
  4744  0454  0016               	moviw fsr1++
  4745  0455  04F1               	iorwf	??_button_timer_interrupt,f
  4746  0456  1D03               	btfss	3,2
  4747  0457  2C5D               	goto	i1l119
  4748  0458  0873               	movf	button_timer_interrupt@bt,w
  4749  0459  3E02               	addlw	2
  4750  045A  0086               	movwf	6
  4751  045B  0187               	clrf	7
  4752  045C  1681               	bsf	1,5
  4753  045D                     i1l119:	
  4754                           
  4755                           ;My_header_16F.h: 93: if (bt->cnt_sw == 2)bt->flag.pressing = 1;
  4756  045D  0873               	movf	button_timer_interrupt@bt,w
  4757  045E  0086               	movwf	6
  4758  045F  0187               	clrf	7
  4759  0460  0016               	moviw fsr1++
  4760  0461  3A02               	xorlw	2
  4761  0462  00F1               	movwf	??_button_timer_interrupt
  4762  0463  0016               	moviw fsr1++
  4763  0464  04F1               	iorwf	??_button_timer_interrupt,f
  4764  0465  1D03               	btfss	3,2
  4765  0466  0008               	return
  4766  0467  0873               	movf	button_timer_interrupt@bt,w
  4767  0468  3E02               	addlw	2
  4768  0469  0086               	movwf	6
  4769  046A  0187               	clrf	7
  4770  046B  1601               	bsf	1,4
  4771                           
  4772                           ;My_header_16F.h: 94: } else {
  4773  046C  0008               	return
  4774  046D                     i1l1792:	
  4775                           
  4776                           ;My_header_16F.h: 95: if (bt->cnt_sw >= 150)bt->flag.long_hold_3 = 1;
  4777  046D  0873               	movf	button_timer_interrupt@bt,w
  4778  046E  0086               	movwf	6
  4779  046F  0187               	clrf	7
  4780  0470  3F40               	moviw [0]fsr1
  4781  0471  00F1               	movwf	??_button_timer_interrupt
  4782  0472  3F41               	moviw [1]fsr1
  4783  0473  00F2               	movwf	??_button_timer_interrupt+1
  4784  0474  3000               	movlw	0
  4785  0475  0272               	subwf	??_button_timer_interrupt+1,w
  4786  0476  3096               	movlw	150
  4787  0477  1903               	skipnz
  4788  0478  0271               	subwf	??_button_timer_interrupt,w
  4789  0479  1C03               	skipc
  4790  047A  2C81               	goto	i1l1796
  4791  047B  0873               	movf	button_timer_interrupt@bt,w
  4792  047C  3E02               	addlw	2
  4793  047D  0086               	movwf	6
  4794  047E  0187               	clrf	7
  4795  047F  1581               	bsf	1,3
  4796  0480  2CBC               	goto	i1l1808
  4797  0481                     i1l1796:	
  4798                           
  4799                           ;My_header_16F.h: 96: else if (bt->cnt_sw >= 75)bt->flag.long_hold_2 = 1;
  4800  0481  0873               	movf	button_timer_interrupt@bt,w
  4801  0482  0086               	movwf	6
  4802  0483  0187               	clrf	7
  4803  0484  3F40               	moviw [0]fsr1
  4804  0485  00F1               	movwf	??_button_timer_interrupt
  4805  0486  3F41               	moviw [1]fsr1
  4806  0487  00F2               	movwf	??_button_timer_interrupt+1
  4807  0488  3000               	movlw	0
  4808  0489  0272               	subwf	??_button_timer_interrupt+1,w
  4809  048A  304B               	movlw	75
  4810  048B  1903               	skipnz
  4811  048C  0271               	subwf	??_button_timer_interrupt,w
  4812  048D  1C03               	skipc
  4813  048E  2C95               	goto	i1l1800
  4814  048F  0873               	movf	button_timer_interrupt@bt,w
  4815  0490  3E02               	addlw	2
  4816  0491  0086               	movwf	6
  4817  0492  0187               	clrf	7
  4818  0493  1501               	bsf	1,2
  4819  0494  2CBC               	goto	i1l1808
  4820  0495                     i1l1800:	
  4821                           
  4822                           ;My_header_16F.h: 97: else if (bt->cnt_sw >= 30)bt->flag.long_hold_1 = 1;
  4823  0495  0873               	movf	button_timer_interrupt@bt,w
  4824  0496  0086               	movwf	6
  4825  0497  0187               	clrf	7
  4826  0498  3F40               	moviw [0]fsr1
  4827  0499  00F1               	movwf	??_button_timer_interrupt
  4828  049A  3F41               	moviw [1]fsr1
  4829  049B  00F2               	movwf	??_button_timer_interrupt+1
  4830  049C  3000               	movlw	0
  4831  049D  0272               	subwf	??_button_timer_interrupt+1,w
  4832  049E  301E               	movlw	30
  4833  049F  1903               	skipnz
  4834  04A0  0271               	subwf	??_button_timer_interrupt,w
  4835  04A1  1C03               	skipc
  4836  04A2  2CA9               	goto	i1l1804
  4837  04A3  0873               	movf	button_timer_interrupt@bt,w
  4838  04A4  3E02               	addlw	2
  4839  04A5  0086               	movwf	6
  4840  04A6  0187               	clrf	7
  4841  04A7  1481               	bsf	1,1
  4842  04A8  2CBC               	goto	i1l1808
  4843  04A9                     i1l1804:	
  4844                           
  4845                           ;My_header_16F.h: 98: else if (bt->cnt_sw >= 2)bt->flag.press = 1;
  4846  04A9  0873               	movf	button_timer_interrupt@bt,w
  4847  04AA  0086               	movwf	6
  4848  04AB  0187               	clrf	7
  4849  04AC  3F40               	moviw [0]fsr1
  4850  04AD  00F1               	movwf	??_button_timer_interrupt
  4851  04AE  3F41               	moviw [1]fsr1
  4852  04AF  00F2               	movwf	??_button_timer_interrupt+1
  4853  04B0  3000               	movlw	0
  4854  04B1  0272               	subwf	??_button_timer_interrupt+1,w
  4855  04B2  3002               	movlw	2
  4856  04B3  1903               	skipnz
  4857  04B4  0271               	subwf	??_button_timer_interrupt,w
  4858  04B5  1C03               	skipc
  4859  04B6  2CBC               	goto	i1l1808
  4860  04B7  0873               	movf	button_timer_interrupt@bt,w
  4861  04B8  3E02               	addlw	2
  4862  04B9  0086               	movwf	6
  4863  04BA  0187               	clrf	7
  4864  04BB  1401               	bsf	1,0
  4865  04BC                     i1l1808:	
  4866                           
  4867                           ;My_header_16F.h: 99: bt->cnt_sw = 0;
  4868  04BC  0873               	movf	button_timer_interrupt@bt,w
  4869  04BD  0086               	movwf	6
  4870  04BE  0187               	clrf	7
  4871  04BF  3000               	movlw	0
  4872  04C0  3FC0               	movwi [0]fsr1
  4873  04C1  3FC1               	movwi [1]fsr1
  4874                           
  4875                           ;My_header_16F.h: 100: bt->flags &= 0x0F;
  4876  04C2  300F               	movlw	15
  4877  04C3  00F1               	movwf	??_button_timer_interrupt
  4878  04C4  0873               	movf	button_timer_interrupt@bt,w
  4879  04C5  3E02               	addlw	2
  4880  04C6  0086               	movwf	6
  4881  04C7  0187               	clrf	7
  4882  04C8  0871               	movf	??_button_timer_interrupt,w
  4883  04C9  0581               	andwf	1,f
  4884  04CA  0008               	return
  4885  04CB                     __end_of_button_timer_interrupt:	
  4886  007E                     btemp	set	126	;btemp
  4887  007E                     int$flags	set	126
  4888  007E                     wtemp	set	126
  4889  007E                     wtemp0	set	126
  4890  0080                     wtemp1	set	128
  4891  0082                     wtemp2	set	130
  4892  0084                     wtemp3	set	132
  4893  0086                     wtemp4	set	134
  4894  0088                     wtemp5	set	136
  4895  007F                     wtemp6	set	127
  4896  007E                     ttemp	set	126
  4897  007E                     ttemp0	set	126
  4898  0081                     ttemp1	set	129
  4899  0084                     ttemp2	set	132
  4900  0087                     ttemp3	set	135
  4901  007F                     ttemp4	set	127
  4902  007E                     ltemp	set	126
  4903  007E                     ltemp0	set	126
  4904  0082                     ltemp1	set	130
  4905  0086                     ltemp2	set	134
  4906  0080                     ltemp3	set	128


Data Sizes:
    Strings     20
    Constant    0
    Data        2
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      12
    BANK0            80     31      46
    BANK1            80     70      71
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    timeset@value	PTR unsigned char  size(1) Largest target is 1
		 -> YY(BANK0[1]), MM(BANK0[1]), DD(BANK0[1]), hh(BANK0[1]), 
		 -> mm(BANK0[1]), ss(BANK0[1]), 

    LCD_Puts@s	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    tx_sends@asciicode	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_2(CODE[17]), 

    tx_buf.buf	PTR unsigned char  size(1) Largest target is 70
		 -> main@buf(BANK1[70]), 

    ringbuf_num@rb.buf	PTR unsigned char  size(1) Largest target is 70
		 -> main@buf(BANK1[70]), 

    ringbuf_num@rb	PTR struct ringbuf size(1) Largest target is 5
		 -> tx_buf(BANK0[4]), 

    ringbuf_pop@rb.buf	PTR unsigned char  size(1) Largest target is 70
		 -> main@buf(BANK1[70]), 

    ringbuf_pop@rb	PTR struct ringbuf size(1) Largest target is 5
		 -> tx_buf(BANK0[4]), 

    ringbuf_push@rb.buf	PTR unsigned char  size(1) Largest target is 70
		 -> main@buf(BANK1[70]), 

    ringbuf_push@rb	PTR struct ringbuf size(1) Largest target is 5
		 -> tx_buf(BANK0[4]), 

    S224ringbuf$buf	PTR unsigned char  size(1) Largest target is 70
		 -> main@buf(BANK1[70]), 

    ringbuf_init@rb.buf	PTR unsigned char  size(1) Largest target is 70
		 -> main@buf(BANK1[70]), 

    ringbuf_init@internal_buf	PTR unsigned char  size(1) Largest target is 70
		 -> main@buf(BANK1[70]), 

    ringbuf_init@rb	PTR struct ringbuf size(1) Largest target is 5
		 -> tx_buf(BANK0[4]), 

    button_timer_interrupt@bt	PTR struct button size(1) Largest target is 3
		 -> sw_RA1(COMMON[3]), sw_RA0(BANK0[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_tx_send
    i1_tx_send->i1_ringbuf_push
    _interrupt_TXIF->_ringbuf_pop

Critical Paths under _main in BANK0

    _main->_timeset
    _tx_sends->_ringbuf_push
    _tx_send->_ringbuf_push
    _timeset->___bmul
    _timeset->_display
    _display->_LCD_SetCursor
    _RTC_Read->_I2C_rStart
    _I2C_rStart->_I2C_IdleCheck
    _I2C_Receive->_I2C_IdleCheck
    _LCD_SetCursor->_LCD_Command
    _LCD_Putc->_I2C_Start
    ___bmul->___awdiv
    _RTC_Write->_I2C_Start
    _LCD_Puts->_I2C_Start
    _LCD_init->_LCD_Clear
    _LCD_Clear->_LCD_Command
    _LCD_Command->_I2C_Start
    _I2C_Stop->_I2C_IdleCheck
    _I2C_Start->_I2C_IdleCheck
    _I2C_Send->_I2C_IdleCheck

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                74    74      0   33204
                                             27 BANK0      4     4      0
                                              0 BANK1     70    70      0
                           _I2C_init
                           _LCD_init
                          _RTC_Write
                          _UART_init
                            _display
                       _month_length
                       _ringbuf_init
                            _timeset
                            _tx_send
                           _tx_sends
 ---------------------------------------------------------------------------------
 (1) _tx_sends                                             6     4      2     583
                                              4 BANK0      6     4      2
                       _ringbuf_push
 ---------------------------------------------------------------------------------
 (1) _tx_send                                              2     2      0     426
                                              4 BANK0      2     2      0
                       _ringbuf_push
 ---------------------------------------------------------------------------------
 (2) _ringbuf_push                                         4     3      1     404
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _timeset                                             14     9      5   21047
                                             13 BANK0     14     9      5
                           _LCD_Putc
                           _LCD_Puts
                      _LCD_SetCursor
                           _RTC_Read
                          _RTC_Write
                            ___awdiv
                            ___awmod
                             ___bmul
                            _display
                       _month_length (ARG)
 ---------------------------------------------------------------------------------
 (2) _display                                              2     2      0    6863
                                             11 BANK0      2     2      0
                           _LCD_Putc
                      _LCD_SetCursor
                           _RTC_Read
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    2258
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _RTC_Read                                             4     4      0    1869
                                              6 BANK0      4     4      0
                        _I2C_Receive
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
                         _I2C_rStart
 ---------------------------------------------------------------------------------
 (4) _I2C_rStart                                           4     0      4     600
                                              2 BANK0      4     0      4
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (4) _I2C_Receive                                          3     3      0      67
                                              2 BANK0      3     3      0
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (3) _LCD_SetCursor                                        4     3      1    1580
                                              7 BANK0      4     3      1
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (3) _LCD_Putc                                             3     3      0    1156
                                              4 BANK0      3     3      0
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     270
                                              9 BANK0      4     3      1
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     830
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _RTC_Write                                            4     3      1    1445
                                              4 BANK0      4     3      1
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _LCD_Puts                                             6     4      2    1268
                                              4 BANK0      6     4      2
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (1) _ringbuf_init                                         4     2      2     346
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _month_length                                         2     1      1     133
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             3     3      0    2312
                                              9 BANK0      3     3      0
                          _LCD_Clear
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            2     2      0    1156
                                              7 BANK0      2     2      0
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (4) _LCD_Command                                          3     3      0    1156
                                              4 BANK0      3     3      0
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0      22
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            2     1      1    1045
                                              2 BANK0      2     1      1
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (4) _I2C_Send                                             1     1      0      44
                                              2 BANK0      1     1      0
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (5) _I2C_IdleCheck                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  2     2      0    1295
                                              6 COMMON     2     2      0
             _button_timer_interrupt
                     _interrupt_TXIF
                          i1_tx_send
 ---------------------------------------------------------------------------------
 (8) i1_tx_send                                            2     2      0     202
                                              4 COMMON     2     2      0
                     i1_ringbuf_push
 ---------------------------------------------------------------------------------
 (9) i1_ringbuf_push                                       4     3      1     180
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (8) _interrupt_TXIF                                       0     0      0     381
                        _ringbuf_num
                        _ringbuf_pop
 ---------------------------------------------------------------------------------
 (9) _ringbuf_pop                                          4     4      0     191
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (9) _ringbuf_num                                          2     2      0     190
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _button_timer_interrupt                               4     3      1     712
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_init
   _LCD_init
     _LCD_Clear
       _LCD_Command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     _LCD_Command
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
   _RTC_Write
     _I2C_Send
       _I2C_IdleCheck
     _I2C_Start
       _I2C_IdleCheck
     _I2C_Stop
       _I2C_IdleCheck
   _UART_init
   _display
     _LCD_Putc
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
     _LCD_SetCursor
       _LCD_Command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     _RTC_Read
       _I2C_Receive
         _I2C_IdleCheck
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
       _I2C_rStart
         _I2C_IdleCheck
     ___awdiv
   _month_length
   _ringbuf_init
   _timeset
     _LCD_Putc
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
     _LCD_Puts
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
     _LCD_SetCursor
       _LCD_Command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     _RTC_Read
       _I2C_Receive
         _I2C_IdleCheck
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
       _I2C_rStart
         _I2C_IdleCheck
     _RTC_Write
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
     ___awdiv
     ___awmod
     ___bmul
       ___awdiv (ARG)
     _display
       _LCD_Putc
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
       _LCD_SetCursor
         _LCD_Command
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
       _RTC_Read
         _I2C_Receive
           _I2C_IdleCheck
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
         _I2C_rStart
           _I2C_IdleCheck
       ___awdiv
     _month_length (ARG)
   _tx_send
     _ringbuf_push
   _tx_sends
     _ringbuf_push

 _isr (ROOT)
   _button_timer_interrupt
   _interrupt_TXIF
     _ringbuf_num
     _ringbuf_pop
   i1_tx_send
     i1_ringbuf_push

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      81       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1F      2E       6       57.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     46      47       8       88.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      81      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Nov 16 18:53:11 2015

                              pc 0002           __end_ofi1_ringbuf_push 06C0                   ___bmul@product 002B  
             __size_of_I2C_Start 001B                      __CFG_CP$OFF 0000                     ?_LCD_Command 0070  
                             _DD 0046                               _EE 00E6                               _MM 0047  
                             _YY 0048                     ___awdiv@sign 0026                               _hh 0049  
                             _mm 004A                               _ss 004B           __end_of_interrupt_TXIF 1000  
                   timeset@t_599 0039                    _LCD_SetCursor 0FA3                              l220 0722  
                            l208 0762                              l240 0742                              l244 05B8  
                            l245 05D3                              l190 07CF                              l159 063A  
                            l184 07B6                              l199 0FBE                              _RA0 0060  
                            _RA1 0061                     __CFG_CPD$OFF 0000                              u985 04EC  
                   timeset@value 003A                              _isr 0004                     ___awmod@sign 0026  
            __size_of_I2C_rStart 0019             __size_of_I2C_Receive 0020                     __CFG_BORV$LO 0000  
                            wreg 0009                             S2156 07D8                     __CFG_LVP$OFF 0000  
                           l2120 014C                             l2112 0097                             l1504 0F87  
                           l1600 04D6                             l1606 04E1                             l1720 0FC7  
                           l1632 0518                             l1624 0507                             l1616 04E9  
                           l1618 04F5                             l1740 0528                             l1724 0FCD  
                           l1628 0510                             l1910 0787                             l1904 0778  
                           l1752 0535                             l1744 052F                             l1754 0541  
                           l1762 0556                             l1930 021D                             l1908 077A  
                           l1684 05F3                             l1940 024F                             l1686 060E  
                           l1766 055E                             l1758 054D                             l1942 0253  
                           l1846 0613                    timeset@column 0030                             l1928 01E3  
                           l1946 028A                             l1962 01C8                             l1892 0770  
                           l1964 0317                             l1956 02DA                             l1958 02DF  
                           l1896 0772                             l1888 076E                             ?_isr 0070  
                           STR_1 0801                             STR_2 07F0                             u1005 04F6  
                           u1015 0500                             u1025 0508                             u1165 0538  
                           u1185 0547                             u1425 0265                             u1195 054E  
                           u1445 02C3                             u1455 02F1                             u1625 00A9  
                           u1707 0728                             u1635 00C1                             u1717 0748  
                           u1645 00D9                             u1727 060B                             u1655 00FC  
                           u1737 056A                             u1665 0114                             u1747 0590  
                           u1675 012C                             u1757 0F9D                             u1767 0768  
                           u1697 05D9                             _RCIF 008D                             _SPEN 0CEF  
                           _TXIE 048C                             _TXIF 008C                             _WPUB 020D  
                   __CFG_WRT$OFF 0000                             _main 005C         button_timer_interrupt@bt 0073  
             __size_of_LCD_Clear 000F                             fsr0h 0005                             fsr1h 0007  
                           fsr0l 0004                             indf0 0000                             indf1 0001  
                           fsr1l 0006                 __end_of_I2C_Send 0FC4                             btemp 007E  
               __end_of_I2C_Stop 0F5D                             ltemp 007E                 __end_of_I2C_init 0F79  
                           start 0040                             ttemp 007E                             wtemp 007E  
                  __CFG_IESO$OFF 0000                ___bmul@multiplier 002C           __size_of_I2C_IdleCheck 000F  
                ?i1_ringbuf_push 0070                            ??_isr 0076                    __CFG_PLLEN$ON 0000  
               __end_of_LCD_Putc 072B                 __end_of_LCD_Puts 0611                   ?_LCD_SetCursor 0027  
                ?_interrupt_TXIF 0070                 __end_of_LCD_init 05A6                            ?_main 0070  
                __end_of___awdiv 051D                            _ADRES 009B                      LCD_Putc@ans 0026  
                          _BRG16 0CFB                    __CFG_WDTE$OFF 0000                  __end_of___awmod 0563  
                ___awdiv@divisor 0020                            _T1CON 0018                            _LATB0 0868  
                 timeset@max_num 002E                            i1l116 0430                            i1l117 043F  
                          i1l118 044E                            i1l119 045D                            i1l164 0FFD  
                          i1l294 003B                  ___awdiv@counter 0025                            _RCREG 0199  
                 timeset@min_num 002D                      LCD_Puts@ans 0028                            _RCSTA 019D  
                          _TMR1H 0017                            _TMR1L 0016                            _PORTA 000C  
                          _PORTB 000D                            _TRISA 008C                            _TRISB 008D  
                   RTC_Read@data 0028                            _TXREG 019A                            _TXSTA 019E  
                 __CFG_FCMEN$OFF 0000                  __end_of_display 0416               __size_of_UART_init 0013  
          ringbuf_push@asciicode 0020                 __end_of_RTC_Read 05DE                __end_of_I2C_Start 07BF  
                 __CFG_BOREN$OFF 0000                     LCD_Command@c 0025                            ltemp0 007E  
                          ltemp1 0082                            ltemp2 0086                            ltemp3 0080  
                __end_of_timeset 0319                            ttemp0 007E                            ttemp1 0081  
                          ttemp2 0084                            ttemp3 0087                            ttemp4 007F  
                          status 0003                            wtemp0 007E                            wtemp1 0080  
                          wtemp2 0082                            wtemp3 0084                            wtemp4 0086  
                          wtemp5 0088                            wtemp6 007F               __size_of_RTC_Write 0020  
                __end_of_tx_send 0F85                month_length@month 0020                   __CFG_MCLRE$OFF 0000  
                __initialization 0042                     __end_of_main 01C4              ringbuf_init@bufsize 0021  
                         ??_main 003B                __end_of_LCD_Clear 0FA3               __size_ofi1_tx_send 000B  
                   RTC_Write@Reg 0026                     RTC_Write@ans 0027                           _BCL1IF 0093  
                  _I2C_IdleCheck 0F85                 ___awdiv@dividend 0022                           _ANSELA 018C  
                         _ANSELB 018D                           i1l2058 0015                           i1l2068 0024  
                         i1l1800 0495                           i1l1804 04A9                           i1l1652 0693  
                         i1l1808 04BC                           i1l1664 06D9                           i1l1792 046D  
                         i1l1796 0481                           _FVRCON 0117                           _OSCCON 0099  
                         _TMR1IF 0088                           _SPBRGH 019C                           _SPBRGL 019B  
                         _SSP1IF 008B                     ??_I2C_rStart 0026                   __CFG_PWRTE$OFF 0000  
                         ___bmul 0FC4                     ?_ringbuf_pop 0070                     ?_ringbuf_num 0070  
              __end_of_UART_init 0FE9                        ??___awdiv 0024                        ??___awmod 0024  
                ??_LCD_SetCursor 0028                           _cnt_t1 0078                 ___awdiv@quotient 0027  
                         _sw_RA0 0043                           _sw_RA1 0079                  ___awmod@divisor 0020  
                ___awmod@counter 0025                           _tx_buf 003F             __size_of_LCD_Command 0020  
                      ??_display 002B                __end_of_RTC_Write 074B                        ?_I2C_Send 0070  
                      ?_I2C_Stop 0070                  UART_init@device 0020                        ?_I2C_init 0070  
             __end_of_I2C_rStart 07D8                   ?_I2C_IdleCheck 0070                        ??_timeset 0032  
                      ??_tx_send 0024                 __end_of_tx_sends 063D          __end_of__initialization 0058  
                      ?_LCD_Putc 0070                        ?_LCD_Puts 0024                        ?_LCD_init 0070  
              __end_ofi1_tx_send 0F6E              ___bmul@multiplicand 0029                   __pcstackCOMMON 0070  
                      LCD_Putc@c 0025                     __pidataBANK0 0002                        LCD_Puts@s 0024  
                      ?_RTC_Read 0070                   _OPTION_REGbits 0095                       ??_I2C_Send 0022  
                     ??_I2C_Stop 0022                       ??_I2C_init 0020                       __pbssBANK0 003F  
                     __pbssBANK1 00E6                       ??_LCD_Putc 0024                       ??_LCD_Puts 0026  
                     ??_LCD_init 0029                 ??i1_ringbuf_push 0071                    RTC_Write@data 0024  
                     __pmaintext 005C                 ??_interrupt_TXIF 0074                          ?___bmul 0029  
                     __pintentry 0004                       ??_RTC_Read 0026                    ??_I2C_Receive 0022  
                   I2C_Send@data 0022                  ??_I2C_IdleCheck 0020                          _SSP1ADD 0212  
                        _SSP1BUF 0211         ??_button_timer_interrupt 0071                    ?_month_length 0020  
                      _I2C_Start 07A4                   I2C_Receive@ack 0023                  __size_of___bmul 0012  
                  ?_ringbuf_init 0020                          ___awdiv 04CB                          ___awmod 051D  
                  ?_ringbuf_push 0020             __size_of_ringbuf_pop 002C             __size_of_ringbuf_num 002B  
                __CFG_STVREN$OFF 0000         LCD_SetCursor@row_offsets 0028                        ?_tx_sends 0024  
                        __ptext1 0611                          __ptext2 0F79                          __ptext3 063D  
                        __ptext4 01C4                          __ptext5 0319                          __ptext6 04CB  
                        __ptext7 05A6                          __ptext8 07BF                          __ptext9 06EB  
                        _display 0319                        _T1CONbits 0018                     __size_of_isr 003C  
               ___awmod@dividend 0022                        _LCD_Clear 0F94              __end_of_I2C_Receive 070B  
                        _timeset 01C4                          main@buf 00A0                          clrloop0 0F5E  
                        _tx_send 0F79             end_of_initialization 0058                 LCD_SetCursor@col 002A  
               LCD_SetCursor@row 0027                   ??_month_length 0021                   LCD_Command@ans 0026  
                     ?_I2C_Start 0022                     I2C_rStart@rw 0024                   ??_ringbuf_init 0022  
                 ??_ringbuf_push 0021                     __pstringtext 07F0                       ??_tx_sends 0026  
                      _UART_init 0FD6                 __CFG_FOSC$INTOSC 0000                       ?_LCD_Clear 0070  
                      _RTC_Write 072B                __size_of_I2C_Send 0011                __size_of_I2C_Stop 0006  
              __size_of_I2C_init 000B  __size_of_button_timer_interrupt 00B5                __size_of_LCD_Putc 0020  
              __size_of_LCD_Puts 0033                __size_of_LCD_init 0043                   ringbuf_init@rb 0023  
                      i1_tx_send 0F63                   ringbuf_pop@ret 0072                    ??_LCD_Command 0024  
                 __end_of___bmul 0FD6                      RTC_Read@Reg 0027                      RTC_Read@ans 0029  
          __end_of_LCD_SetCursor 0FB3                   ringbuf_push@rb 0023                       ?_UART_init 0070  
                    _I2C_Receive 06EB                __size_of_RTC_Read 0038              start_initialization 0042  
               month_length@year 0021                       ?_RTC_Write 0024                      __end_of_isr 0040  
                    ??_I2C_Start 0023                      _APFCON0bits 011D                      _APFCON1bits 011E  
                       ??___bmul 002A                       ?i1_tx_send 0070                      __pdataBANK0 004C  
         _button_timer_interrupt 0416             __end_of_month_length 0789              __end_of_LCD_Command 076B  
                    __pbssCOMMON 0078                        ___latbits 0001                    __pcstackBANK0 0020  
                  __pcstackBANK1 00A0                      ??_LCD_Clear 0027             __end_of_ringbuf_init 07A4  
           __end_of_ringbuf_push 0669                 tx_send@asciicode 0025                         ?___awdiv 0020  
                       ?___awmod 0020                      ??_UART_init 0020                        __pswtext1 07D8  
                       ?_display 0070                __size_of_tx_sends 002C                      I2C_Start@rw 0022  
                       _I2C_Send 0FB3                         _I2C_Stop 0F57                         _I2C_init 0F6E  
          __end_of_I2C_IdleCheck 0F94                      ??_RTC_Write 0025                         ?_timeset 002D  
                       ?_tx_send 0070         ringbuf_init@internal_buf 0020                         _LCD_Putc 070B  
                       _LCD_Puts 05DE                         _LCD_init 0563                        clear_ram0 0F5D  
                       _PIE1bits 0091                    ??_ringbuf_pop 0070                    ??_ringbuf_num 0070  
                    ??i1_tx_send 0074                         _SSP1CON1 0215                         _SSP1CON2 0216  
                       _SSP1STAT 0214                      _LCD_Command 074B                         _RTC_Read 05A6  
                     _ADCON0bits 009D          __size_ofi1_ringbuf_push 002B                       _ADCON1bits 009E  
                     timeset@Reg 002F                       timeset@row 0031   button_timer_interrupt@sw_value 0070  
        __size_of_interrupt_TXIF 0017                    ringbuf_pop@rb 0073                    ringbuf_num@rb 0071  
                  I2C_Start@adrs 0023               LCD_SetCursor@F2888 004C                  I2C_Receive@data 0024  
                     _I2C_rStart 07BF            __size_of_month_length 001E                 __size_of___awdiv 0052  
               __size_of___awmod 0046                I2C_IdleCheck@mask 0021                     ?_I2C_Receive 0070  
              tx_sends@asciicode 0024              __end_of_ringbuf_pop 0695              __end_of_ringbuf_num 06EB  
             i1tx_send@asciicode 0075            __size_of_ringbuf_init 001B                 __size_of_display 00FD  
          __size_of_ringbuf_push 002C                         __ptext10 0FA3                         __ptext11 070B  
                       __ptext20 0F94                         __ptext12 0FC4                         __ptext21 074B  
                       __ptext13 051D                         __ptext30 0FE9                         __ptext22 0F57  
                       __ptext14 072B                         __ptext31 0669                         __ptext23 07A4  
                       __ptext15 05DE                         __ptext32 06C0                         __ptext24 0FB3  
                       __ptext16 0789                         __ptext33 0416                         __ptext25 0F85  
                       __ptext17 076B                         __ptext26 0F6E                         __ptext18 0FD6  
                       __ptext19 0563                         __ptext28 0F63                         __ptext29 0695  
                   _SSP1CON2bits 0216                 __size_of_timeset 0155                 i1ringbuf_push@rb 0073  
               __size_of_tx_send 000C                   I2C_rStart@adrs 0022                    __size_of_main 0168  
                   _month_length 076B          ?_button_timer_interrupt 0070                         int$flags 007E  
                   _ringbuf_init 0789                     _ringbuf_push 063D                         _tx_sends 0611  
                     _INTCONbits 000B                         intlevel1 0000           __size_of_LCD_SetCursor 0010  
                      tx_sends@i 0029                __CFG_CLKOUTEN$OFF 0000                      ?_I2C_rStart 0022  
 __end_of_button_timer_interrupt 04CB                      _ringbuf_pop 0669                      _ringbuf_num 06C0  
                       timeset@t 0038                   i1_ringbuf_push 0695                       _OPTION_REG 0095  
                 _interrupt_TXIF 0FE9          i1ringbuf_push@asciicode 0070  
