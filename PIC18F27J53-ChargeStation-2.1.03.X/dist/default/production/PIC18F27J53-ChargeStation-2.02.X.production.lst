

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Nov 10 22:49:15 2015

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F27J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    96                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    97                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    98  0000                     
    99                           	psect	idataCOMRAM
   100  004169                     __pidataCOMRAM:
   101                           	opt stack 0
   102                           
   103                           ;initializer for ISR@cnt_t1
   104  004169  02                 	db	2
   105                           
   106                           ;initializer for sleep_loop@prev_power_sw
   107  00416A  01                 	db	1
   108                           
   109                           	psect	idataBANK0
   110  004166                     __pidataBANK0:
   111                           	opt stack 0
   112                           
   113                           ;initializer for I2C_LCD_SetCursor@F8672
   114  004166  00                 	db	0
   115  004167  40                 	db	64
   116                           
   117                           ;initializer for epoch_to_caltime@month_cache
   118  004168  01                 	db	1
   119                           
   120                           	psect	smallconst
   121  000F00                     __psmallconst:
   122                           	opt stack 0
   123  000F00  00                 	db	0
   124  000F01                     _weekday_3char:
   125                           	opt stack 0
   126  000F01  53                 	db	83
   127  000F02  55                 	db	85
   128  000F03  4E                 	db	78
   129  000F04  00                 	db	0
   130  000F05  4D                 	db	77
   131  000F06  4F                 	db	79
   132  000F07  4E                 	db	78
   133  000F08  00                 	db	0
   134  000F09  54                 	db	84
   135  000F0A  55                 	db	85
   136  000F0B  45                 	db	69
   137  000F0C  00                 	db	0
   138  000F0D  57                 	db	87
   139  000F0E  45                 	db	69
   140  000F0F  44                 	db	68
   141  000F10  00                 	db	0
   142  000F11  54                 	db	84
   143  000F12  48                 	db	72
   144  000F13  55                 	db	85
   145  000F14  00                 	db	0
   146  000F15  46                 	db	70
   147  000F16  52                 	db	82
   148  000F17  49                 	db	73
   149  000F18  00                 	db	0
   150  000F19  53                 	db	83
   151  000F1A  41                 	db	65
   152  000F1B  54                 	db	84
   153  000F1C  00                 	db	0
   154  000F1D                     __end_of_weekday_3char:
   155                           	opt stack 0
   156  0000                     _ANCON0	set	3912
   157  0000                     _ANCON1	set	3913
   158  0000                     _PADCFG1bits	set	3900
   159  0000                     _RTCCAL	set	3902
   160  0000                     _RTCCFGbits	set	3903
   161  0000                     _RTCVALH	set	3899
   162  0000                     _RTCVALL	set	3898
   163  0000                     _T5CONbits	set	3874
   164  0000                     _ADRES	set	4035
   165  0000                     _ADCON0bits	set	4034
   166  0000                     _ADCON1bits	set	4033
   167  0000                     _BAUDCON1bits	set	3966
   168  0000                     _CTMUCONH	set	4019
   169  0000                     _CTMUCONHbits	set	4019
   170  0000                     _CTMUCONL	set	4018
   171  0000                     _CTMUCONLbits	set	4018
   172  0000                     _CTMUICON	set	4017
   173  0000                     _EECON2	set	4007
   174  0000                     _INTCON2bits	set	4081
   175  0000                     _INTCONbits	set	4082
   176  0000                     _IPR1bits	set	3999
   177  0000                     _IPR2bits	set	4002
   178  0000                     _IPR5bits	set	3993
   179  0000                     _OSCCONbits	set	4051
   180  0000                     _OSCTUNEbits	set	3995
   181  0000                     _PIE1bits	set	3997
   182  0000                     _PIE2bits	set	4000
   183  0000                     _PIE5bits	set	3985
   184  0000                     _PIR1bits	set	3998
   185  0000                     _PIR2bits	set	4001
   186  0000                     _PIR5bits	set	3992
   187  0000                     _PORTBbits	set	3969
   188  0000                     _RCREG1	set	4015
   189  0000                     _RCSTA1bits	set	4012
   190  0000                     _SPBRG1	set	4016
   191  0000                     _SPBRGH1	set	3967
   192  0000                     _SSP1ADD	set	4040
   193  0000                     _SSP1BUF	set	4041
   194  0000                     _SSP1CON1	set	4038
   195  0000                     _SSP1CON2	set	4037
   196  0000                     _SSP1CON2bits	set	4037
   197  0000                     _SSP1STAT	set	4039
   198  0000                     _T0CONbits	set	4053
   199  0000                     _T1CONbits	set	4045
   200  0000                     _T3CONbits	set	3961
   201  0000                     _TMR1H	set	4047
   202  0000                     _TRISA	set	3986
   203  0000                     _TRISB	set	3987
   204  0000                     _TRISC	set	3988
   205  0000                     _TXREG1	set	4014
   206  0000                     _TXSTA1bits	set	4013
   207  0000                     _BCL1IF	set	32011
   208  0000                     _LATA5	set	31821
   209  0000                     _LATA6	set	31822
   210  0000                     _LATA7	set	31823
   211  0000                     _LATB2	set	31826
   212  0000                     _LATB6	set	31830
   213  0000                     _LATB7	set	31831
   214  0000                     _LATC2	set	31834
   215  0000                     _SSP1IF	set	31987
   216  000F1D                     STR_16:
   217  000F1D  53                 	db	83	;'S'
   218  000F1E  4C                 	db	76	;'L'
   219  000F1F  45                 	db	69	;'E'
   220  000F20  45                 	db	69	;'E'
   221  000F21  50                 	db	80	;'P'
   222  000F22  49                 	db	73	;'I'
   223  000F23  4E                 	db	78	;'N'
   224  000F24  47                 	db	71	;'G'
   225  000F25  00                 	db	0
   226  000F26                     STR_13:
   227  000F26  41                 	db	65	;'A'
   228  000F27  6C                 	db	108	;'l'
   229  000F28  77                 	db	119	;'w'
   230  000F29  61                 	db	97	;'a'
   231  000F2A  79                 	db	121	;'y'
   232  000F2B  73                 	db	115	;'s'
   233  000F2C  4F                 	db	79	;'O'
   234  000F2D  4E                 	db	78	;'N'
   235  000F2E  00                 	db	0
   236  000F2F                     STR_14:
   237  000F2F  41                 	db	65	;'A'
   238  000F30  75                 	db	117	;'u'
   239  000F31  74                 	db	116	;'t'
   240  000F32  6F                 	db	111	;'o'
   241  000F33  53                 	db	83	;'S'
   242  000F34  74                 	db	116	;'t'
   243  000F35  6F                 	db	111	;'o'
   244  000F36  70                 	db	112	;'p'
   245  000F37  00                 	db	0
   246  000F38                     STR_12:
   247  000F38  52                 	db	82	;'R'
   248  000F39  65                 	db	101	;'e'
   249  000F3A  73                 	db	115	;'s'
   250  000F3B  65                 	db	101	;'e'
   251  000F3C  74                 	db	116	;'t'
   252  000F3D  65                 	db	101	;'e'
   253  000F3E  64                 	db	100	;'d'
   254  000F3F  00                 	db	0
   255  000F40                     STR_9:
   256  000F40  53                 	db	83	;'S'
   257  000F41  74                 	db	116	;'t'
   258  000F42  61                 	db	97	;'a'
   259  000F43  74                 	db	116	;'t'
   260  000F44  69                 	db	105	;'i'
   261  000F45  6F                 	db	111	;'o'
   262  000F46  6E                 	db	110	;'n'
   263  000F47  00                 	db	0
   264  000F48                     STR_11:
   265  000F48  52                 	db	82	;'R'
   266  000F49  65                 	db	101	;'e'
   267  000F4A  73                 	db	115	;'s'
   268  000F4B  65                 	db	101	;'e'
   269  000F4C  74                 	db	116	;'t'
   270  000F4D  3F                 	db	63	;'?'
   271  000F4E  00                 	db	0
   272  000F4F                     STR_5:
   273  000F4F  43                 	db	67	;'C'
   274  000F50  45                 	db	69	;'E'
   275  000F51  4E                 	db	78	;'N'
   276  000F52  54                 	db	84	;'T'
   277  000F53  45                 	db	69	;'E'
   278  000F54  52                 	db	82	;'R'
   279  000F55  00                 	db	0
   280  000F56                     STR_8:
   281  000F56  43                 	db	67	;'C'
   282  000F57  68                 	db	104	;'h'
   283  000F58  61                 	db	97	;'a'
   284  000F59  72                 	db	114	;'r'
   285  000F5A  67                 	db	103	;'g'
   286  000F5B  65                 	db	101	;'e'
   287  000F5C  00                 	db	0
   288  000F5D                     STR_4:
   289  000F5D  43                 	db	67	;'C'
   290  000F5E  65                 	db	101	;'e'
   291  000F5F  6E                 	db	110	;'n'
   292  000F60  74                 	db	116	;'t'
   293  000F61  65                 	db	101	;'e'
   294  000F62  72                 	db	114	;'r'
   295  000F63  00                 	db	0
   296  000F64                     STR_3:
   297  000F64  52                 	db	82	;'R'
   298  000F65  49                 	db	73	;'I'
   299  000F66  47                 	db	71	;'G'
   300  000F67  48                 	db	72	;'H'
   301  000F68  54                 	db	84	;'T'
   302  000F69  00                 	db	0
   303  000F6A                     STR_2:
   304  000F6A  52                 	db	82	;'R'
   305  000F6B  69                 	db	105	;'i'
   306  000F6C  67                 	db	103	;'g'
   307  000F6D  68                 	db	104	;'h'
   308  000F6E  74                 	db	116	;'t'
   309  000F6F  00                 	db	0
   310  000F70                     STR_15:
   311  000F70  43                 	db	67	;'C'
   312  000F71  2E                 	db	46
   313  000F72  53                 	db	83	;'S'
   314  000F73  2E                 	db	46
   315  000F74  00                 	db	0
   316  000F75                     STR_7:
   317  000F75  4C                 	db	76	;'L'
   318  000F76  45                 	db	69	;'E'
   319  000F77  46                 	db	70	;'F'
   320  000F78  54                 	db	84	;'T'
   321  000F79  00                 	db	0
   322  000F7A                     STR_6:
   323  000F7A  4C                 	db	76	;'L'
   324  000F7B  65                 	db	101	;'e'
   325  000F7C  66                 	db	102	;'f'
   326  000F7D  74                 	db	116	;'t'
   327  000F7E  00                 	db	0
   328  000F7F                     STR_10:
   329  000F7F  6D                 	db	109	;'m'
   330  000F80  41                 	db	65	;'A'
   331  000F81  68                 	db	104	;'h'
   332  000F82  00                 	db	0
   333  000F83                     STR_1:
   334  000F83  20                 	db	32
   335  000F84  20                 	db	32
   336  000F85  00                 	db	0
   337  0000                     
   338                           ; #config settings
   339  000F86  00                 	db	0	; dummy byte at the end
   340  0000                     
   341                           	psect	cinit
   342  0038D0                     __pcinit:
   343                           	opt stack 0
   344  0038D0                     start_initialization:
   345                           	opt stack 0
   346  0038D0                     __initialization:
   347                           	opt stack 0
   348                           
   349                           ; Clear objects allocated to BANK1 (8 bytes)
   350  0038D0  EE01  F0C8         	lfsr	0,__pbssBANK1
   351  0038D4  0E08               	movlw	8
   352  0038D6                     clear_0:
   353  0038D6  6AEE               	clrf	postinc0,c
   354  0038D8  06E8               	decf	wreg,f,c
   355  0038DA  E1FD               	bnz	clear_0
   356                           
   357                           ; Clear objects allocated to BANK0 (103 bytes)
   358  0038DC  EE00  F060         	lfsr	0,__pbssBANK0
   359  0038E0  0E67               	movlw	103
   360  0038E2                     clear_1:
   361  0038E2  6AEE               	clrf	postinc0,c
   362  0038E4  06E8               	decf	wreg,f,c
   363  0038E6  E1FD               	bnz	clear_1
   364                           
   365                           ; Clear objects allocated to COMRAM (28 bytes)
   366  0038E8  EE00  F023         	lfsr	0,__pbssCOMRAM
   367  0038EC  0E1C               	movlw	28
   368  0038EE                     clear_2:
   369  0038EE  6AEE               	clrf	postinc0,c
   370  0038F0  06E8               	decf	wreg,f,c
   371  0038F2  E1FD               	bnz	clear_2
   372                           
   373                           ; Initialize objects allocated to BANK0 (3 bytes)
   374                           ; load TBLPTR registers with __pidataBANK0
   375  0038F4  0E66               	movlw	low __pidataBANK0
   376  0038F6  6EF6               	movwf	tblptrl,c
   377  0038F8  0E41               	movlw	high __pidataBANK0
   378  0038FA  6EF7               	movwf	tblptrh,c
   379  0038FC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   380  0038FE  6EF8               	movwf	tblptru,c
   381  003900  0009               	tblrd		*+	;fetch initializer
   382  003902  CFF5 F0FD          	movff	tablat,__pdataBANK0
   383  003906  0009               	tblrd		*+	;fetch initializer
   384  003908  CFF5 F0FE          	movff	tablat,__pdataBANK0+1
   385  00390C  0009               	tblrd		*+	;fetch initializer
   386  00390E  CFF5 F0FF          	movff	tablat,__pdataBANK0+2
   387                           
   388                           ; Initialize objects allocated to COMRAM (2 bytes)
   389                           ; load TBLPTR registers with __pidataCOMRAM
   390  003912  0E69               	movlw	low __pidataCOMRAM
   391  003914  6EF6               	movwf	tblptrl,c
   392  003916  0E41               	movlw	high __pidataCOMRAM
   393  003918  6EF7               	movwf	tblptrh,c
   394  00391A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   395  00391C  6EF8               	movwf	tblptru,c
   396  00391E  0009               	tblrd		*+	;fetch initializer
   397  003920  CFF5 F03F          	movff	tablat,__pdataCOMRAM
   398  003924  0009               	tblrd		*+	;fetch initializer
   399  003926  CFF5 F040          	movff	tablat,__pdataCOMRAM+1
   400  00392A                     end_of_initialization:
   401                           	opt stack 0
   402  00392A                     __end_of__initialization:
   403                           	opt stack 0
   404  00392A  9041               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   405  00392C  9241               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   406  00392E  0100               	movlb	0
   407  003930  EF67  F011         	goto	_main	;jump to C main() function
   408                           tblptru	equ	0xFF8
   409                           tblptrh	equ	0xFF7
   410                           tblptrl	equ	0xFF6
   411                           tablat	equ	0xFF5
   412                           postinc0	equ	0xFEE
   413                           wreg	equ	0xFE8
   414                           
   415                           	psect	bssCOMRAM
   416  000023                     __pbssCOMRAM:
   417                           	opt stack 0
   418  000023                     _I:
   419                           	opt stack 0
   420  000023                     	ds	6
   421  000029                     _auto_cut_ON:
   422                           	opt stack 0
   423  000029                     	ds	3
   424  00002C                     _ctmu_value0:
   425                           	opt stack 0
   426  00002C                     	ds	2
   427  00002E                     _ctmu_value1:
   428                           	opt stack 0
   429  00002E                     	ds	2
   430  000030                     _ctmu_value2:
   431                           	opt stack 0
   432  000030                     	ds	2
   433  000032                     _ctmu_valuem:
   434                           	opt stack 0
   435  000032                     	ds	2
   436  000034                     millis_timer@cnt:
   437                           	opt stack 0
   438  000034                     	ds	2
   439  000036                     _ctmu_flag:
   440                           	opt stack 0
   441  000036                     	ds	1
   442  000037                     _cut_time_flag:
   443                           	opt stack 0
   444  000037                     	ds	1
   445  000038                     _display_flag:
   446                           	opt stack 0
   447  000038                     	ds	1
   448  000039                     _print_port:
   449                           	opt stack 0
   450  000039                     	ds	1
   451  00003A                     _sleep_flag:
   452                           	opt stack 0
   453  00003A                     	ds	1
   454  00003B                     _time_change_flag:
   455                           	opt stack 0
   456  00003B                     	ds	1
   457  00003C                     _delay_display:
   458                           	opt stack 0
   459  00003C                     	ds	3
   460                           tblptru	equ	0xFF8
   461                           tblptrh	equ	0xFF7
   462                           tblptrl	equ	0xFF6
   463                           tablat	equ	0xFF5
   464                           postinc0	equ	0xFEE
   465                           wreg	equ	0xFE8
   466                           
   467                           	psect	dataCOMRAM
   468  00003F                     __pdataCOMRAM:
   469                           	opt stack 0
   470  00003F                     ISR@cnt_t1:
   471                           	opt stack 0
   472  00003F                     	ds	1
   473  000040                     sleep_loop@prev_power_sw:
   474                           	opt stack 0
   475  000040                     	ds	1
   476                           tblptru	equ	0xFF8
   477                           tblptrh	equ	0xFF7
   478                           tblptrl	equ	0xFF6
   479                           tablat	equ	0xFF5
   480                           postinc0	equ	0xFEE
   481                           wreg	equ	0xFE8
   482                           
   483                           	psect	bssBANK0
   484  000060                     __pbssBANK0:
   485                           	opt stack 0
   486  000060                     _S:
   487                           	opt stack 0
   488  000060                     	ds	12
   489  00006C                     _charge_time:
   490                           	opt stack 0
   491  00006C                     	ds	12
   492  000078                     _s:
   493                           	opt stack 0
   494  000078                     	ds	12
   495  000084                     _cut_cnt:
   496                           	opt stack 0
   497  000084                     	ds	6
   498  00008A                     _ms:
   499                           	opt stack 0
   500  00008A                     	ds	4
   501  00008E                     _d1:
   502                           	opt stack 0
   503  00008E                     	ds	3
   504  000091                     _out_flag:
   505                           	opt stack 0
   506  000091                     	ds	3
   507  000094                     lchika@cnt:
   508                           	opt stack 0
   509  000094                     	ds	3
   510  000097                     lchika@cntf:
   511                           	opt stack 0
   512  000097                     	ds	3
   513  00009A                     ISR@cnt_t0:
   514                           	opt stack 0
   515  00009A                     	ds	2
   516  00009C                     epoch_to_caltime@day_cache:
   517                           	opt stack 0
   518  00009C                     	ds	2
   519  00009E                     RTCC_loop@prev_halfsec:
   520                           	opt stack 0
   521  00009E                     	ds	1
   522  00009F                     _colon:
   523                           	opt stack 0
   524  00009F                     	ds	1
   525  0000A0                     _edit_flag:
   526                           	opt stack 0
   527  0000A0                     	ds	1
   528  0000A1                     _halfsec:
   529                           	opt stack 0
   530  0000A1                     	ds	1
   531  0000A2                     _print_content:
   532                           	opt stack 0
   533  0000A2                     	ds	1
   534  0000A3                     epoch_to_caltime@year_cache:
   535                           	opt stack 0
   536  0000A3                     	ds	1
   537  0000A4                     _rx_buf:
   538                           	opt stack 0
   539  0000A4                     	ds	8
   540  0000AC                     _caltime_now:
   541                           	opt stack 0
   542  0000AC                     	ds	7
   543  0000B3                     _ct0:
   544                           	opt stack 0
   545  0000B3                     	ds	4
   546  0000B7                     _ct1:
   547                           	opt stack 0
   548  0000B7                     	ds	4
   549  0000BB                     _ct2:
   550                           	opt stack 0
   551  0000BB                     	ds	4
   552  0000BF                     _ctm:
   553                           	opt stack 0
   554  0000BF                     	ds	4
   555  0000C3                     _epoch_now:
   556                           	opt stack 0
   557  0000C3                     	ds	4
   558                           tblptru	equ	0xFF8
   559                           tblptrh	equ	0xFF7
   560                           tblptrl	equ	0xFF6
   561                           tablat	equ	0xFF5
   562                           postinc0	equ	0xFEE
   563                           wreg	equ	0xFE8
   564                           
   565                           	psect	dataBANK0
   566  0000FD                     __pdataBANK0:
   567                           	opt stack 0
   568  0000FD                     I2C_LCD_SetCursor@F8672:
   569                           	opt stack 0
   570  0000FD                     	ds	2
   571  0000FF                     epoch_to_caltime@month_cache:
   572                           	opt stack 0
   573  0000FF                     	ds	1
   574                           tblptru	equ	0xFF8
   575                           tblptrh	equ	0xFF7
   576                           tblptrl	equ	0xFF6
   577                           tablat	equ	0xFF5
   578                           postinc0	equ	0xFEE
   579                           wreg	equ	0xFE8
   580                           
   581                           	psect	bssBANK1
   582  0001C8                     __pbssBANK1:
   583                           	opt stack 0
   584  0001C8                     _tx_buf:
   585                           	opt stack 0
   586  0001C8                     	ds	8
   587                           tblptru	equ	0xFF8
   588                           tblptrh	equ	0xFF7
   589                           tblptrl	equ	0xFF6
   590                           tablat	equ	0xFF5
   591                           postinc0	equ	0xFEE
   592                           wreg	equ	0xFE8
   593                           
   594                           	psect	cstackBANK1
   595  000100                     __pcstackBANK1:
   596                           	opt stack 0
   597  000100                     RTCC_adjust_time_inc@ct:
   598                           	opt stack 0
   599  000100                     RTCC_adjust_time_dec@ct:
   600                           	opt stack 0
   601  000100                     display_LCD@str:
   602                           	opt stack 0
   603  000100                     main_init@txbuf:
   604                           	opt stack 0
   605                           
   606                           ; 200 bytes @ 0x0
   607  000100                     	ds	2
   608  000102                     RTCC_adjust_time_inc@ep:
   609                           	opt stack 0
   610  000102                     RTCC_adjust_time_dec@ep:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x2
   614  000102                     	ds	2
   615  000104                     ??_RTCC_adjust_time_inc:
   616  000104                     ??_RTCC_adjust_time_dec:
   617                           
   618                           ; 0 bytes @ 0x4
   619  000104                     	ds	4
   620  000108                     RTCC_adjust_time_inc@i_2077:
   621                           	opt stack 0
   622  000108                     RTCC_adjust_time_dec@i_2090:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0x8
   626  000108                     	ds	1
   627  000109                     RTCC_adjust_time_inc@i:
   628                           	opt stack 0
   629  000109                     RTCC_adjust_time_dec@i:
   630                           	opt stack 0
   631                           
   632                           ; 1 bytes @ 0x9
   633  000109                     	ds	1
   634  00010A                     RTCC_adjust_time_button@mode:
   635                           	opt stack 0
   636  00010A                     _display_LCD$3144:
   637                           	opt stack 0
   638                           
   639                           ; 4 bytes @ 0xA
   640  00010A                     	ds	2
   641  00010C                     RTCC_adjust_time_button@cnt_inc:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0xC
   645  00010C                     	ds	2
   646  00010E                     RTCC_adjust_time_button@cnt_dec:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0xE
   650  00010E                     	ds	186
   651                           tblptru	equ	0xFF8
   652                           tblptrh	equ	0xFF7
   653                           tblptrl	equ	0xFF6
   654                           tablat	equ	0xFF5
   655                           postinc0	equ	0xFEE
   656                           wreg	equ	0xFE8
   657                           
   658                           	psect	cstackBANK0
   659  0000C7                     __pcstackBANK0:
   660                           	opt stack 0
   661  0000C7                     ?___wmul:
   662                           	opt stack 0
   663  0000C7                     ?___lldiv:
   664                           	opt stack 0
   665  0000C7                     I2C_LCD_Command@c:
   666                           	opt stack 0
   667  0000C7                     I2C_LCD_Putc@c:
   668                           	opt stack 0
   669  0000C7                     RTCC_to_caltime@dumy:
   670                           	opt stack 0
   671  0000C7                     port_loop@i:
   672                           	opt stack 0
   673  0000C7                     ___awdiv@counter:
   674                           	opt stack 0
   675  0000C7                     ___awmod@counter:
   676                           	opt stack 0
   677  0000C7                     ___lwmod@counter:
   678                           	opt stack 0
   679  0000C7                     ringbuf_init@rb:
   680                           	opt stack 0
   681  0000C7                     I2C_LCD_Puts@s:
   682                           	opt stack 0
   683  0000C7                     ___wmul@multiplier:
   684                           	opt stack 0
   685  0000C7                     ___lldiv@dividend:
   686                           	opt stack 0
   687                           
   688                           ; 4 bytes @ 0x0
   689  0000C7                     	ds	1
   690  0000C8                     I2C_LCD_Command@ans:
   691                           	opt stack 0
   692  0000C8                     I2C_LCD_Putc@ans:
   693                           	opt stack 0
   694  0000C8                     ___awdiv@sign:
   695                           	opt stack 0
   696  0000C8                     ___awmod@sign:
   697                           	opt stack 0
   698                           
   699                           ; 1 bytes @ 0x1
   700  0000C8                     	ds	1
   701  0000C9                     ??_I2C_LCD_Clear:
   702  0000C9                     ??_I2C_LCD_Puts:
   703  0000C9                     I2C_LCD_SetCursor@row:
   704                           	opt stack 0
   705  0000C9                     month_length@month:
   706                           	opt stack 0
   707  0000C9                     ringbuf_init@internal_buf:
   708                           	opt stack 0
   709  0000C9                     ___wmul@multiplicand:
   710                           	opt stack 0
   711  0000C9                     ___awdiv@quotient:
   712                           	opt stack 0
   713                           
   714                           ; 2 bytes @ 0x2
   715  0000C9                     	ds	1
   716  0000CA                     ??_month_length:
   717  0000CA                     I2C_LCD_SetCursor@row_offsets:
   718                           	opt stack 0
   719  0000CA                     I2C_LCD_Puts@ans:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x3
   723  0000CA                     	ds	1
   724  0000CB                     d_to_x@dec:
   725                           	opt stack 0
   726  0000CB                     ringbuf_init@bufsize:
   727                           	opt stack 0
   728  0000CB                     ___wmul@product:
   729                           	opt stack 0
   730  0000CB                     ___lldiv@divisor:
   731                           	opt stack 0
   732                           
   733                           ; 4 bytes @ 0x4
   734  0000CB                     	ds	1
   735  0000CC                     I2C_LCD_SetCursor@col:
   736                           	opt stack 0
   737  0000CC                     caltime_to_RTCC@ct:
   738                           	opt stack 0
   739                           
   740                           ; 2 bytes @ 0x5
   741  0000CC                     	ds	1
   742  0000CD                     ??_Auto_cut:
   743                           
   744                           ; 0 bytes @ 0x6
   745  0000CD                     	ds	1
   746  0000CE                     month_length@year:
   747                           	opt stack 0
   748                           
   749                           ; 1 bytes @ 0x7
   750  0000CE                     	ds	1
   751  0000CF                     Auto_cut@i:
   752                           	opt stack 0
   753  0000CF                     ___lldiv@quotient:
   754                           	opt stack 0
   755                           
   756                           ; 4 bytes @ 0x8
   757  0000CF                     	ds	4
   758  0000D3                     ___lldiv@counter:
   759                           	opt stack 0
   760                           
   761                           ; 1 bytes @ 0xC
   762  0000D3                     	ds	1
   763  0000D4                     ?___lmul:
   764                           	opt stack 0
   765  0000D4                     ?___llmod:
   766                           	opt stack 0
   767  0000D4                     CTMU_read@ch:
   768                           	opt stack 0
   769  0000D4                     ___lmul@multiplier:
   770                           	opt stack 0
   771  0000D4                     ___llmod@dividend:
   772                           	opt stack 0
   773                           
   774                           ; 4 bytes @ 0xD
   775  0000D4                     	ds	1
   776  0000D5                     CTMU_read@sum:
   777                           	opt stack 0
   778                           
   779                           ; 4 bytes @ 0xE
   780  0000D5                     	ds	3
   781  0000D8                     ___lmul@multiplicand:
   782                           	opt stack 0
   783  0000D8                     ___llmod@divisor:
   784                           	opt stack 0
   785                           
   786                           ; 4 bytes @ 0x11
   787  0000D8                     	ds	1
   788  0000D9                     CTMU_read@i:
   789                           	opt stack 0
   790                           
   791                           ; 1 bytes @ 0x12
   792  0000D9                     	ds	1
   793  0000DA                     ?___lwdiv:
   794                           	opt stack 0
   795  0000DA                     ___lwdiv@dividend:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x13
   799  0000DA                     	ds	2
   800  0000DC                     ___lwdiv@divisor:
   801                           	opt stack 0
   802  0000DC                     ___lmul@product:
   803                           	opt stack 0
   804                           
   805                           ; 4 bytes @ 0x15
   806  0000DC                     	ds	2
   807  0000DE                     ___lwdiv@counter:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0x17
   811  0000DE                     	ds	1
   812  0000DF                     ___lwdiv@quotient:
   813                           	opt stack 0
   814                           
   815                           ; 2 bytes @ 0x18
   816  0000DF                     	ds	1
   817  0000E0                     ?_get_quot_rem:
   818                           	opt stack 0
   819  0000E0                     get_quot_rem@quot:
   820                           	opt stack 0
   821  0000E0                     caltime_to_epoch@ct:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x19
   825  0000E0                     	ds	1
   826  0000E1                     button_timer_interrupt@bt:
   827                           	opt stack 0
   828  0000E1                     my_utoa@str:
   829                           	opt stack 0
   830                           
   831                           ; 2 bytes @ 0x1A
   832  0000E1                     	ds	1
   833  0000E2                     get_quot_rem@div:
   834                           	opt stack 0
   835  0000E2                     caltime_to_epoch@ep:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0x1B
   839  0000E2                     	ds	1
   840  0000E3                     button_timer_interrupt@sw_value:
   841                           	opt stack 0
   842  0000E3                     my_utoa@value:
   843                           	opt stack 0
   844                           
   845                           ; 2 bytes @ 0x1C
   846  0000E3                     	ds	1
   847  0000E4                     ??_caltime_to_epoch:
   848  0000E4                     get_quot_rem@num:
   849                           	opt stack 0
   850                           
   851                           ; 4 bytes @ 0x1D
   852  0000E4                     	ds	1
   853  0000E5                     my_utoa@digits:
   854                           	opt stack 0
   855                           
   856                           ; 1 bytes @ 0x1E
   857  0000E5                     	ds	1
   858  0000E6                     my_utoa@d:
   859                           	opt stack 0
   860                           
   861                           ; 1 bytes @ 0x1F
   862  0000E6                     	ds	1
   863  0000E7                     my_utoa@v:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x20
   867  0000E7                     	ds	1
   868  0000E8                     caltime_to_epoch@year:
   869                           	opt stack 0
   870  0000E8                     epoch_to_caltime@ct:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0x21
   874  0000E8                     	ds	1
   875  0000E9                     caltime_to_epoch@month_1995:
   876                           	opt stack 0
   877  0000E9                     display_dec@edit:
   878                           	opt stack 0
   879                           
   880                           ; 1 bytes @ 0x22
   881  0000E9                     	ds	1
   882  0000EA                     epoch_to_caltime@ep:
   883                           	opt stack 0
   884  0000EA                     caltime_to_epoch@epoch:
   885                           	opt stack 0
   886  0000EA                     display_dec@str:
   887                           	opt stack 0
   888                           
   889                           ; 10 bytes @ 0x23
   890  0000EA                     	ds	2
   891  0000EC                     ??_epoch_to_caltime:
   892                           
   893                           ; 0 bytes @ 0x25
   894  0000EC                     	ds	2
   895  0000EE                     caltime_to_epoch@month:
   896                           	opt stack 0
   897  0000EE                     epoch_to_caltime@day_since_epoch:
   898                           	opt stack 0
   899                           
   900                           ; 2 bytes @ 0x27
   901  0000EE                     	ds	1
   902  0000EF                     RTCC_from_RTCC@ct:
   903                           	opt stack 0
   904                           
   905                           ; 2 bytes @ 0x28
   906  0000EF                     	ds	1
   907  0000F0                     epoch_to_caltime@day:
   908                           	opt stack 0
   909                           
   910                           ; 2 bytes @ 0x29
   911  0000F0                     	ds	1
   912  0000F1                     RTCC_from_RTCC@ep:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x2A
   916  0000F1                     	ds	1
   917  0000F2                     epoch_to_caltime@year:
   918                           	opt stack 0
   919                           
   920                           ; 1 bytes @ 0x2B
   921  0000F2                     	ds	1
   922  0000F3                     epoch_to_caltime@month:
   923                           	opt stack 0
   924  0000F3                     sleep_loop@i:
   925                           	opt stack 0
   926                           
   927                           ; 1 bytes @ 0x2C
   928  0000F3                     	ds	1
   929  0000F4                     display_dec@dec:
   930                           	opt stack 0
   931  0000F4                     epoch_to_caltime@num:
   932                           	opt stack 0
   933                           
   934                           ; 4 bytes @ 0x2D
   935  0000F4                     	ds	1
   936  0000F5                     display_time_0802@ct:
   937                           	opt stack 0
   938                           
   939                           ; 2 bytes @ 0x2E
   940  0000F5                     	ds	2
   941  0000F7                     display_time_0802@ep:
   942                           	opt stack 0
   943                           
   944                           ; 2 bytes @ 0x30
   945  0000F7                     	ds	1
   946  0000F8                     RTCC_from_epoch@ct:
   947                           	opt stack 0
   948                           
   949                           ; 2 bytes @ 0x31
   950  0000F8                     	ds	1
   951  0000F9                     ??_display_time_0802:
   952                           
   953                           ; 0 bytes @ 0x32
   954  0000F9                     	ds	1
   955  0000FA                     RTCC_from_epoch@ep:
   956                           	opt stack 0
   957                           
   958                           ; 2 bytes @ 0x33
   959  0000FA                     	ds	2
   960  0000FC                     main@i:
   961                           	opt stack 0
   962                           
   963                           ; 1 bytes @ 0x35
   964  0000FC                     	ds	1
   965                           tblptru	equ	0xFF8
   966                           tblptrh	equ	0xFF7
   967                           tblptrl	equ	0xFF6
   968                           tablat	equ	0xFF5
   969                           postinc0	equ	0xFEE
   970                           wreg	equ	0xFE8
   971                           
   972                           	psect	cstackCOMRAM
   973  000001                     __pcstackCOMRAM:
   974                           	opt stack 0
   975  000001                     ?_ringbuf_num:
   976                           	opt stack 0
   977  000001                     ?i2___awdiv:
   978                           	opt stack 0
   979  000001                     ?i2___lwdiv:
   980                           	opt stack 0
   981  000001                     ?i2___lldiv:
   982                           	opt stack 0
   983  000001                     i2LED@value:
   984                           	opt stack 0
   985  000001                     ringbuf_num@rb:
   986                           	opt stack 0
   987  000001                     delay_timer_interrupt@d:
   988                           	opt stack 0
   989  000001                     i2___awdiv@dividend:
   990                           	opt stack 0
   991  000001                     i2___lwdiv@dividend:
   992                           	opt stack 0
   993  000001                     i2___lldiv@dividend:
   994                           	opt stack 0
   995                           
   996                           ; 4 bytes @ 0x0
   997  000001                     	ds	1
   998  000002                     i2LED@b:
   999                           	opt stack 0
  1000                           
  1001                           ; 1 bytes @ 0x1
  1002  000002                     	ds	1
  1003  000003                     ??_ringbuf_num:
  1004  000003                     charge_time_count@i:
  1005                           	opt stack 0
  1006  000003                     i2___awdiv@divisor:
  1007                           	opt stack 0
  1008  000003                     i2___lwdiv@divisor:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x2
  1012  000003                     	ds	2
  1013  000005                     i2___awdiv@counter:
  1014                           	opt stack 0
  1015  000005                     i2___lwdiv@quotient:
  1016                           	opt stack 0
  1017  000005                     i2___lldiv@divisor:
  1018                           	opt stack 0
  1019                           
  1020                           ; 4 bytes @ 0x4
  1021  000005                     	ds	1
  1022  000006                     i2___awdiv@sign:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x5
  1026  000006                     	ds	1
  1027  000007                     i2___lwdiv@counter:
  1028                           	opt stack 0
  1029  000007                     i2___awdiv@quotient:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0x6
  1033  000007                     	ds	2
  1034  000009                     ??_lchika:
  1035  000009                     ringbuf_put@rb:
  1036                           	opt stack 0
  1037  000009                     ringbuf_pop@rb:
  1038                           	opt stack 0
  1039  000009                     i2___lldiv@quotient:
  1040                           	opt stack 0
  1041                           
  1042                           ; 4 bytes @ 0x8
  1043  000009                     	ds	2
  1044  00000B                     ??_ringbuf_pop:
  1045  00000B                     ringbuf_put@asciicode:
  1046                           	opt stack 0
  1047                           
  1048                           ; 1 bytes @ 0xA
  1049  00000B                     	ds	1
  1050  00000C                     ??_ringbuf_put:
  1051  00000C                     lchika@i:
  1052                           	opt stack 0
  1053                           
  1054                           ; 1 bytes @ 0xB
  1055  00000C                     	ds	1
  1056  00000D                     i2___lldiv@counter:
  1057                           	opt stack 0
  1058                           
  1059                           ; 1 bytes @ 0xC
  1060  00000D                     	ds	1
  1061  00000E                     ??_integrating:
  1062                           
  1063                           ; 0 bytes @ 0xD
  1064  00000E                     	ds	1
  1065  00000F                     ringbuf_pop@ret:
  1066                           	opt stack 0
  1067                           
  1068                           ; 1 bytes @ 0xE
  1069  00000F                     	ds	1
  1070  000010                     UART_ISR@ascii:
  1071                           	opt stack 0
  1072  000010                     integrating@port:
  1073                           	opt stack 0
  1074                           
  1075                           ; 1 bytes @ 0xF
  1076  000010                     	ds	1
  1077  000011                     ??_ISR:
  1078                           
  1079                           ; 0 bytes @ 0x10
  1080  000011                     	ds	14
  1081  00001F                     ??_timer0_init:
  1082  00001F                     ??_timer3_init:
  1083  00001F                     ??_I2C_IdleCheck:
  1084  00001F                     ??_x_to_d:
  1085  00001F                     ?_ADC:
  1086                           	opt stack 0
  1087  00001F                     ?_CTMU_read:
  1088                           	opt stack 0
  1089  00001F                     ?_sw_flag_read:
  1090                           	opt stack 0
  1091  00001F                     ?___awdiv:
  1092                           	opt stack 0
  1093  00001F                     ?___awmod:
  1094                           	opt stack 0
  1095  00001F                     ?___lwmod:
  1096                           	opt stack 0
  1097  00001F                     timer1_init@clock_select:
  1098                           	opt stack 0
  1099  00001F                     ADC_init@p_ref:
  1100                           	opt stack 0
  1101  00001F                     OUT@value:
  1102                           	opt stack 0
  1103  00001F                     IN@b:
  1104                           	opt stack 0
  1105  00001F                     LED@value:
  1106                           	opt stack 0
  1107  00001F                     ___llmod@counter:
  1108                           	opt stack 0
  1109  00001F                     Delay_ms@ms:
  1110                           	opt stack 0
  1111  00001F                     delay_set@d:
  1112                           	opt stack 0
  1113  00001F                     sw_flag_read@bit_and:
  1114                           	opt stack 0
  1115  00001F                     sw_flag_clear@bit_and:
  1116                           	opt stack 0
  1117  00001F                     ___awdiv@dividend:
  1118                           	opt stack 0
  1119  00001F                     ___awmod@dividend:
  1120                           	opt stack 0
  1121  00001F                     ___lwmod@dividend:
  1122                           	opt stack 0
  1123                           
  1124                           ; 2 bytes @ 0x1E
  1125  00001F                     	ds	1
  1126  000020                     ??_timer1_init:
  1127  000020                     timer0_init@prescaler:
  1128                           	opt stack 0
  1129  000020                     timer3_init@prescaler:
  1130                           	opt stack 0
  1131  000020                     I2C_IdleCheck@mask:
  1132                           	opt stack 0
  1133  000020                     x_to_d@hex:
  1134                           	opt stack 0
  1135  000020                     OUT@b:
  1136                           	opt stack 0
  1137  000020                     LED@b:
  1138                           	opt stack 0
  1139                           
  1140                           ; 1 bytes @ 0x1F
  1141  000020                     	ds	1
  1142  000021                     ??_ADC:
  1143  000021                     ??_CTMU_read:
  1144  000021                     ??_Delay_ms:
  1145  000021                     timer1_init@prescaler:
  1146                           	opt stack 0
  1147  000021                     I2C_Start@rw:
  1148                           	opt stack 0
  1149  000021                     I2C_Send@data:
  1150                           	opt stack 0
  1151  000021                     sw_flag_read@port:
  1152                           	opt stack 0
  1153  000021                     sw_flag_clear@port:
  1154                           	opt stack 0
  1155  000021                     delay_set@value:
  1156                           	opt stack 0
  1157  000021                     RTCC_to_caltime@ct:
  1158                           	opt stack 0
  1159  000021                     ___awdiv@divisor:
  1160                           	opt stack 0
  1161  000021                     ___awmod@divisor:
  1162                           	opt stack 0
  1163  000021                     ___lwmod@divisor:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x20
  1167  000021                     	ds	1
  1168  000022                     ADC@ch:
  1169                           	opt stack 0
  1170  000022                     I2C_Start@adrs:
  1171                           	opt stack 0
  1172                           
  1173                           ; 1 bytes @ 0x21
  1174  000022                     	ds	1
  1175  000023                     tblptru	equ	0xFF8
  1176                           tblptrh	equ	0xFF7
  1177                           tblptrl	equ	0xFF6
  1178                           tablat	equ	0xFF5
  1179                           postinc0	equ	0xFEE
  1180                           wreg	equ	0xFE8
  1181                           
  1182                           ; 0 bytes @ 0x22
  1183 ;;
  1184 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1185 ;;
  1186 ;; *************** function _main *****************
  1187 ;; Defined at:
  1188 ;;		line 110 in file "main.c"
  1189 ;; Parameters:    Size  Location     Type
  1190 ;;		None
  1191 ;; Auto vars:     Size  Location     Type
  1192 ;;  i               1   53[BANK0 ] unsigned char 
  1193 ;; Return value:  Size  Location     Type
  1194 ;;                  2  773[None  ] int 
  1195 ;; Registers used:
  1196 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1197 ;; Tracked objects:
  1198 ;;		On entry : 0/0
  1199 ;;		On exit  : 0/0
  1200 ;;		Unchanged: 0/0
  1201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1203 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1205 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1206 ;;Total ram usage:        1 bytes
  1207 ;; Hardware stack levels required when called:   11
  1208 ;; This function calls:
  1209 ;;		_CTMU_read
  1210 ;;		_Delay_ms
  1211 ;;		_I2C_LCD_Clear
  1212 ;;		_I2C_LCD_Puts
  1213 ;;		_I2C_LCD_SetCursor
  1214 ;;		_LED
  1215 ;;		_OUT
  1216 ;;		_RTCC_from_RTCC
  1217 ;;		_RTCC_from_epoch
  1218 ;;		_RTCC_loop
  1219 ;;		___lwdiv
  1220 ;;		_main_init
  1221 ;;		_normal_mode_loop
  1222 ;;		_sleep_loop
  1223 ;; This function is called by:
  1224 ;;		Startup code after reset
  1225 ;; This function uses a non-reentrant model
  1226 ;;
  1227                           
  1228                           	psect	text0
  1229  0022CE                     __ptext0:
  1230                           	opt stack 0
  1231  0022CE                     _main:
  1232                           	opt stack 20
  1233                           
  1234                           ;main.c: 111: main_init();
  1235                           
  1236                           ;incstack = 0
  1237  0022CE  ECB3  F01B         	call	_main_init	;wreg free
  1238                           
  1239                           ;main.c: 112: INTCONbits.GIE = 1;
  1240  0022D2  8EF2               	bsf	intcon,7,c	;volatile
  1241                           
  1242                           ;main.c: 114: ctmu_value0 = 4 * CTMU_read(2) / 5;
  1243  0022D4  0E02               	movlw	2
  1244  0022D6  EC08  F017         	call	_CTMU_read
  1245  0022DA  90D8               	bcf	status,0,c
  1246  0022DC  361F               	rlcf	?_CTMU_read,f,c
  1247  0022DE  3620               	rlcf	?_CTMU_read+1,f,c
  1248  0022E0  90D8               	bcf	status,0,c
  1249  0022E2  361F               	rlcf	?_CTMU_read,f,c
  1250  0022E4  3620               	rlcf	?_CTMU_read+1,f,c
  1251  0022E6  C01F  F0DA         	movff	?_CTMU_read,___lwdiv@dividend
  1252  0022EA  C020  F0DB         	movff	?_CTMU_read+1,___lwdiv@dividend+1
  1253  0022EE  0E00               	movlw	0
  1254  0022F0  0100               	movlb	0	; () banked
  1255  0022F2  6FDD               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1256  0022F4  0E05               	movlw	5
  1257  0022F6  6FDC               	movwf	___lwdiv@divisor& (0+255),b
  1258  0022F8  ECF1  F01B         	call	___lwdiv	;wreg free
  1259  0022FC  C0DA  F02C         	movff	?___lwdiv,_ctmu_value0
  1260  002300  C0DB  F02D         	movff	?___lwdiv+1,_ctmu_value0+1
  1261                           
  1262                           ;main.c: 115: ctmu_value1 = 4 * CTMU_read(1) / 5;
  1263  002304  0E01               	movlw	1
  1264  002306  EC08  F017         	call	_CTMU_read
  1265  00230A  90D8               	bcf	status,0,c
  1266  00230C  361F               	rlcf	?_CTMU_read,f,c
  1267  00230E  3620               	rlcf	?_CTMU_read+1,f,c
  1268  002310  90D8               	bcf	status,0,c
  1269  002312  361F               	rlcf	?_CTMU_read,f,c
  1270  002314  3620               	rlcf	?_CTMU_read+1,f,c
  1271  002316  C01F  F0DA         	movff	?_CTMU_read,___lwdiv@dividend
  1272  00231A  C020  F0DB         	movff	?_CTMU_read+1,___lwdiv@dividend+1
  1273  00231E  0E00               	movlw	0
  1274  002320  0100               	movlb	0	; () banked
  1275  002322  6FDD               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1276  002324  0E05               	movlw	5
  1277  002326  6FDC               	movwf	___lwdiv@divisor& (0+255),b
  1278  002328  ECF1  F01B         	call	___lwdiv	;wreg free
  1279  00232C  C0DA  F02E         	movff	?___lwdiv,_ctmu_value1
  1280  002330  C0DB  F02F         	movff	?___lwdiv+1,_ctmu_value1+1
  1281                           
  1282                           ;main.c: 116: ctmu_value2 = 4 * CTMU_read(0) / 5;
  1283  002334  0E00               	movlw	0
  1284  002336  EC08  F017         	call	_CTMU_read
  1285  00233A  90D8               	bcf	status,0,c
  1286  00233C  361F               	rlcf	?_CTMU_read,f,c
  1287  00233E  3620               	rlcf	?_CTMU_read+1,f,c
  1288  002340  90D8               	bcf	status,0,c
  1289  002342  361F               	rlcf	?_CTMU_read,f,c
  1290  002344  3620               	rlcf	?_CTMU_read+1,f,c
  1291  002346  C01F  F0DA         	movff	?_CTMU_read,___lwdiv@dividend
  1292  00234A  C020  F0DB         	movff	?_CTMU_read+1,___lwdiv@dividend+1
  1293  00234E  0E00               	movlw	0
  1294  002350  0100               	movlb	0	; () banked
  1295  002352  6FDD               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1296  002354  0E05               	movlw	5
  1297  002356  6FDC               	movwf	___lwdiv@divisor& (0+255),b
  1298  002358  ECF1  F01B         	call	___lwdiv	;wreg free
  1299  00235C  C0DA  F030         	movff	?___lwdiv,_ctmu_value2
  1300  002360  C0DB  F031         	movff	?___lwdiv+1,_ctmu_value2+1
  1301                           
  1302                           ;main.c: 117: ctmu_valuem = 4 * CTMU_read(3) / 5;
  1303  002364  0E03               	movlw	3
  1304  002366  EC08  F017         	call	_CTMU_read
  1305  00236A  90D8               	bcf	status,0,c
  1306  00236C  361F               	rlcf	?_CTMU_read,f,c
  1307  00236E  3620               	rlcf	?_CTMU_read+1,f,c
  1308  002370  90D8               	bcf	status,0,c
  1309  002372  361F               	rlcf	?_CTMU_read,f,c
  1310  002374  3620               	rlcf	?_CTMU_read+1,f,c
  1311  002376  C01F  F0DA         	movff	?_CTMU_read,___lwdiv@dividend
  1312  00237A  C020  F0DB         	movff	?_CTMU_read+1,___lwdiv@dividend+1
  1313  00237E  0E00               	movlw	0
  1314  002380  0100               	movlb	0	; () banked
  1315  002382  6FDD               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1316  002384  0E05               	movlw	5
  1317  002386  6FDC               	movwf	___lwdiv@divisor& (0+255),b
  1318  002388  ECF1  F01B         	call	___lwdiv	;wreg free
  1319  00238C  C0DA  F032         	movff	?___lwdiv,_ctmu_valuem
  1320  002390  C0DB  F033         	movff	?___lwdiv+1,_ctmu_valuem+1
  1321                           
  1322                           ;main.c: 119: RTCC_from_RTCC(&caltime_now, &epoch_now);
  1323  002394  0EAC               	movlw	low _caltime_now
  1324  002396  0100               	movlb	0	; () banked
  1325  002398  6FEF               	movwf	RTCC_from_RTCC@ct& (0+255),b
  1326  00239A  0E00               	movlw	high _caltime_now
  1327  00239C  0100               	movlb	0	; () banked
  1328  00239E  6FF0               	movwf	(RTCC_from_RTCC@ct+1)& (0+255),b
  1329  0023A0  0EC3               	movlw	low _epoch_now
  1330  0023A2  0100               	movlb	0	; () banked
  1331  0023A4  6FF1               	movwf	RTCC_from_RTCC@ep& (0+255),b
  1332  0023A6  0E00               	movlw	high _epoch_now
  1333  0023A8  0100               	movlb	0	; () banked
  1334  0023AA  6FF2               	movwf	(RTCC_from_RTCC@ep+1)& (0+255),b
  1335  0023AC  EC3C  F020         	call	_RTCC_from_RTCC	;wreg free
  1336                           
  1337                           ;main.c: 120: if (caltime_now.DD == 0) {
  1338  0023B0  0100               	movlb	0	; () banked
  1339  0023B2  51B0               	movf	(_caltime_now+4)& (0+255),w,b
  1340  0023B4  A4D8               	btfss	status,2,c
  1341  0023B6  D017               	goto	l6259
  1342                           
  1343                           ; BSR set to: 0
  1344                           ;main.c: 121: epoch_now = 0;
  1345  0023B8  0E00               	movlw	0
  1346  0023BA  0100               	movlb	0	; () banked
  1347  0023BC  6FC3               	movwf	_epoch_now& (0+255),b
  1348  0023BE  0E00               	movlw	0
  1349  0023C0  6FC4               	movwf	(_epoch_now+1)& (0+255),b
  1350  0023C2  0E00               	movlw	0
  1351  0023C4  6FC5               	movwf	(_epoch_now+2)& (0+255),b
  1352  0023C6  0E00               	movlw	0
  1353  0023C8  6FC6               	movwf	(_epoch_now+3)& (0+255),b
  1354                           
  1355                           ; BSR set to: 0
  1356                           ;main.c: 122: RTCC_from_epoch(&caltime_now, &epoch_now);
  1357  0023CA  0EAC               	movlw	low _caltime_now
  1358  0023CC  0100               	movlb	0	; () banked
  1359  0023CE  6FF8               	movwf	RTCC_from_epoch@ct& (0+255),b
  1360  0023D0  0E00               	movlw	high _caltime_now
  1361  0023D2  0100               	movlb	0	; () banked
  1362  0023D4  6FF9               	movwf	(RTCC_from_epoch@ct+1)& (0+255),b
  1363  0023D6  0EC3               	movlw	low _epoch_now
  1364  0023D8  0100               	movlb	0	; () banked
  1365  0023DA  6FFA               	movwf	RTCC_from_epoch@ep& (0+255),b
  1366  0023DC  0E00               	movlw	high _epoch_now
  1367  0023DE  0100               	movlb	0	; () banked
  1368  0023E0  6FFB               	movwf	(RTCC_from_epoch@ep+1)& (0+255),b
  1369  0023E2  EC1A  F020         	call	_RTCC_from_epoch	;wreg free
  1370  0023E6                     l6259:
  1371                           
  1372                           ;main.c: 123: }
  1373                           ;main.c: 124: print_content = TIME;
  1374  0023E6  0E01               	movlw	1
  1375  0023E8  0100               	movlb	0	; () banked
  1376  0023EA  6FA2               	movwf	_print_content& (0+255),b
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;main.c: 126: I2C_LCD_Clear();
  1380  0023EC  EC6B  F020         	call	_I2C_LCD_Clear	;wreg free
  1381                           
  1382                           ;main.c: 127: I2C_LCD_SetCursor(0, 0);
  1383  0023F0  0E00               	movlw	0
  1384  0023F2  0100               	movlb	0	; () banked
  1385  0023F4  6FC9               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  1386  0023F6  0E00               	movlw	0
  1387  0023F8  EC7D  F01F         	call	_I2C_LCD_SetCursor
  1388                           
  1389                           ;main.c: 128: I2C_LCD_Puts("Charge");
  1390  0023FC  0E56               	movlw	low STR_8
  1391  0023FE  0100               	movlb	0	; () banked
  1392  002400  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  1393  002402  0E0F               	movlw	high STR_8
  1394  002404  0100               	movlb	0	; () banked
  1395  002406  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  1396  002408  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  1397                           
  1398                           ;main.c: 129: I2C_LCD_SetCursor(0, 1);
  1399  00240C  0E01               	movlw	1
  1400  00240E  0100               	movlb	0	; () banked
  1401  002410  6FC9               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  1402  002412  0E00               	movlw	0
  1403  002414  EC7D  F01F         	call	_I2C_LCD_SetCursor
  1404                           
  1405                           ;main.c: 130: I2C_LCD_Puts("Station");
  1406  002418  0E40               	movlw	low STR_9
  1407  00241A  0100               	movlb	0	; () banked
  1408  00241C  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  1409  00241E  0E0F               	movlw	high STR_9
  1410  002420  0100               	movlb	0	; () banked
  1411  002422  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  1412  002424  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  1413                           
  1414                           ;main.c: 131: Delay_ms(2000);
  1415  002428  0E07               	movlw	7
  1416  00242A  6E20               	movwf	Delay_ms@ms+1,c
  1417  00242C  0ED0               	movlw	208
  1418  00242E  6E1F               	movwf	Delay_ms@ms,c
  1419  002430  ECF7  F01F         	call	_Delay_ms	;wreg free
  1420                           
  1421                           ;main.c: 133: uint8_t i;
  1422                           ;main.c: 135: for (i = 0; i < 3; i++) {
  1423  002434  0E00               	movlw	0
  1424  002436  0100               	movlb	0	; () banked
  1425  002438  6FFC               	movwf	main@i& (0+255),b
  1426  00243A                     l6275:
  1427                           
  1428                           ; BSR set to: 0
  1429  00243A  0E02               	movlw	2
  1430  00243C  0100               	movlb	0	; () banked
  1431  00243E  65FC               	cpfsgt	main@i& (0+255),b
  1432  002440  D001               	goto	l6279
  1433  002442  D027               	goto	l6291
  1434  002444                     l6279:
  1435                           
  1436                           ; BSR set to: 0
  1437                           ;main.c: 136: OUT(i, 1);
  1438  002444  0E01               	movlw	1
  1439  002446  6E1F               	movwf	OUT@value,c
  1440  002448  0100               	movlb	0	; () banked
  1441  00244A  51FC               	movf	main@i& (0+255),w,b
  1442  00244C  EC75  F01D         	call	_OUT
  1443                           
  1444                           ;main.c: 137: LED(i, 1);
  1445  002450  0E01               	movlw	1
  1446  002452  6E1F               	movwf	LED@value,c
  1447  002454  0100               	movlb	0	; () banked
  1448  002456  51FC               	movf	main@i& (0+255),w,b
  1449  002458  ECBF  F01E         	call	_LED
  1450                           
  1451                           ;main.c: 138: cut_cnt[i] = 0;
  1452  00245C  0100               	movlb	0	; () banked
  1453  00245E  51FC               	movf	main@i& (0+255),w,b
  1454  002460  0D02               	mullw	2
  1455  002462  0E84               	movlw	low _cut_cnt
  1456  002464  24F3               	addwf	prodl,w,c
  1457  002466  6ED9               	movwf	fsr2l,c
  1458  002468  0E00               	movlw	high _cut_cnt
  1459  00246A  20F4               	addwfc	prodh,w,c
  1460  00246C  6EDA               	movwf	fsr2h,c
  1461  00246E  0E00               	movlw	0
  1462  002470  6EDE               	movwf	postinc2,c
  1463  002472  0E00               	movlw	0
  1464  002474  6EDD               	movwf	postdec2,c
  1465                           
  1466                           ; BSR set to: 0
  1467                           ;main.c: 139: auto_cut_ON[i] = 1;
  1468  002476  0100               	movlb	0	; () banked
  1469  002478  51FC               	movf	main@i& (0+255),w,b
  1470  00247A  0D01               	mullw	1
  1471  00247C  0E29               	movlw	low _auto_cut_ON
  1472  00247E  24F3               	addwf	prodl,w,c
  1473  002480  6ED9               	movwf	fsr2l,c
  1474  002482  0E00               	movlw	high _auto_cut_ON
  1475  002484  20F4               	addwfc	prodh,w,c
  1476  002486  6EDA               	movwf	fsr2h,c
  1477  002488  0E01               	movlw	1
  1478  00248A  6EDF               	movwf	indf2,c
  1479                           
  1480                           ; BSR set to: 0
  1481  00248C  0100               	movlb	0	; () banked
  1482  00248E  2BFC               	incf	main@i& (0+255),f,b
  1483  002490  D7D4               	goto	l6275
  1484  002492                     l6291:
  1485                           
  1486                           ;main.c: 143: if (!sleep_flag) {
  1487  002492  503A               	movf	_sleep_flag,w,c
  1488  002494  A4D8               	btfss	status,2,c
  1489  002496  D004               	goto	l6297
  1490                           
  1491                           ;main.c: 144: normal_mode_loop();
  1492  002498  EC7E  F018         	call	_normal_mode_loop	;wreg free
  1493                           
  1494                           ;main.c: 145: RTCC_loop();
  1495  00249C  EC58  F01E         	call	_RTCC_loop	;wreg free
  1496  0024A0                     l6297:
  1497                           
  1498                           ;main.c: 146: }
  1499                           ;main.c: 147: sleep_loop();
  1500  0024A0  ECA5  F016         	call	_sleep_loop	;wreg free
  1501  0024A4  D7F6               	goto	l6291
  1502  0024A6                     __end_of_main:
  1503                           	opt stack 0
  1504                           tblptru	equ	0xFF8
  1505                           tblptrh	equ	0xFF7
  1506                           tblptrl	equ	0xFF6
  1507                           tablat	equ	0xFF5
  1508                           prodh	equ	0xFF4
  1509                           prodl	equ	0xFF3
  1510                           intcon	equ	0xFF2
  1511                           postinc0	equ	0xFEE
  1512                           wreg	equ	0xFE8
  1513                           indf2	equ	0xFDF
  1514                           postinc2	equ	0xFDE
  1515                           postdec2	equ	0xFDD
  1516                           fsr2h	equ	0xFDA
  1517                           fsr2l	equ	0xFD9
  1518                           status	equ	0xFD8
  1519                           
  1520 ;; *************** function _sleep_loop *****************
  1521 ;; Defined at:
  1522 ;;		line 389 in file "tasks.h"
  1523 ;; Parameters:    Size  Location     Type
  1524 ;;		None
  1525 ;; Auto vars:     Size  Location     Type
  1526 ;;  i               1   44[BANK0 ] unsigned char 
  1527 ;; Return value:  Size  Location     Type
  1528 ;;		None               void
  1529 ;; Registers used:
  1530 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1531 ;; Tracked objects:
  1532 ;;		On entry : 0/0
  1533 ;;		On exit  : 0/0
  1534 ;;		Unchanged: 0/0
  1535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1537 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1539 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1540 ;;Total ram usage:        1 bytes
  1541 ;; Hardware stack levels used:    1
  1542 ;; Hardware stack levels required when called:    8
  1543 ;; This function calls:
  1544 ;;		_I2C_LCD_Clear
  1545 ;;		_I2C_LCD_Puts
  1546 ;;		_I2C_LCD_SetCursor
  1547 ;;		_LED
  1548 ;;		_OUT
  1549 ;;		_RTCC_from_RTCC
  1550 ;; This function is called by:
  1551 ;;		_main
  1552 ;; This function uses a non-reentrant model
  1553 ;;
  1554                           
  1555                           	psect	text1
  1556  002D4A                     __ptext1:
  1557                           	opt stack 0
  1558  002D4A                     _sleep_loop:
  1559                           	opt stack 22
  1560                           
  1561                           ;tasks.h: 390: static uint8_t prev_power_sw = 1;
  1562                           ;tasks.h: 391: if (PORTBbits.RB0 != prev_power_sw) {
  1563                           
  1564                           ;incstack = 0
  1565  002D4A  A081               	btfss	3969,0,c	;volatile
  1566  002D4C  D002               	goto	u6570
  1567  002D4E  0E01               	movlw	1
  1568  002D50  D001               	goto	u6576
  1569  002D52                     u6570:
  1570  002D52  0E00               	movlw	0
  1571  002D54                     u6576:
  1572  002D54  1840               	xorwf	sleep_loop@prev_power_sw,w,c
  1573  002D56  B4D8               	btfsc	status,2,c
  1574  002D58  D055               	goto	l6087
  1575                           
  1576                           ;tasks.h: 392: prev_power_sw = PORTBbits.RB0;
  1577  002D5A  0E00               	movlw	0
  1578  002D5C  B081               	btfsc	3969,0,c	;volatile
  1579  002D5E  0E01               	movlw	1
  1580  002D60  6E40               	movwf	sleep_loop@prev_power_sw,c
  1581                           
  1582                           ;tasks.h: 393: if (!PORTBbits.RB0) {
  1583  002D62  B081               	btfsc	3969,0,c	;volatile
  1584  002D64  D039               	goto	l6077
  1585                           
  1586                           ;tasks.h: 394: sleep_flag = 1;
  1587  002D66  0E01               	movlw	1
  1588  002D68  6E3A               	movwf	_sleep_flag,c
  1589                           
  1590                           ;tasks.h: 395: INTCONbits.GIE = 0;
  1591  002D6A  9EF2               	bcf	intcon,7,c	;volatile
  1592                           
  1593                           ;tasks.h: 396: for (uint8_t i = 0; i < 3; i++) {
  1594  002D6C  0E00               	movlw	0
  1595  002D6E  0100               	movlb	0	; () banked
  1596  002D70  6FF3               	movwf	sleep_loop@i& (0+255),b
  1597  002D72                     l6055:
  1598                           
  1599                           ; BSR set to: 0
  1600  002D72  0E02               	movlw	2
  1601  002D74  0100               	movlb	0	; () banked
  1602  002D76  65F3               	cpfsgt	sleep_loop@i& (0+255),b
  1603  002D78  D001               	goto	l6059
  1604  002D7A  D00F               	goto	l6067
  1605  002D7C                     l6059:
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;tasks.h: 397: OUT(i, 0);
  1609  002D7C  0E00               	movlw	0
  1610  002D7E  6E1F               	movwf	OUT@value,c
  1611  002D80  0100               	movlb	0	; () banked
  1612  002D82  51F3               	movf	sleep_loop@i& (0+255),w,b
  1613  002D84  EC75  F01D         	call	_OUT
  1614                           
  1615                           ;tasks.h: 398: LED(i, 0);
  1616  002D88  0E00               	movlw	0
  1617  002D8A  6E1F               	movwf	LED@value,c
  1618  002D8C  0100               	movlb	0	; () banked
  1619  002D8E  51F3               	movf	sleep_loop@i& (0+255),w,b
  1620  002D90  ECBF  F01E         	call	_LED
  1621  002D94  0100               	movlb	0	; () banked
  1622  002D96  2BF3               	incf	sleep_loop@i& (0+255),f,b
  1623  002D98  D7EC               	goto	l6055
  1624  002D9A                     l6067:
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;tasks.h: 399: }
  1628                           ;tasks.h: 400: I2C_LCD_Clear();
  1629  002D9A  EC6B  F020         	call	_I2C_LCD_Clear	;wreg free
  1630                           
  1631                           ;tasks.h: 401: I2C_LCD_SetCursor(0, 0);
  1632  002D9E  0E00               	movlw	0
  1633  002DA0  0100               	movlb	0	; () banked
  1634  002DA2  6FC9               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  1635  002DA4  0E00               	movlw	0
  1636  002DA6  EC7D  F01F         	call	_I2C_LCD_SetCursor
  1637                           
  1638                           ;tasks.h: 402: I2C_LCD_Puts("C.S.");
  1639  002DAA  0E70               	movlw	low STR_15
  1640  002DAC  0100               	movlb	0	; () banked
  1641  002DAE  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  1642  002DB0  0E0F               	movlw	high STR_15
  1643  002DB2  0100               	movlb	0	; () banked
  1644  002DB4  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  1645  002DB6  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  1646                           
  1647                           ;tasks.h: 403: I2C_LCD_SetCursor(0, 1);
  1648  002DBA  0E01               	movlw	1
  1649  002DBC  0100               	movlb	0	; () banked
  1650  002DBE  6FC9               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  1651  002DC0  0E00               	movlw	0
  1652  002DC2  EC7D  F01F         	call	_I2C_LCD_SetCursor
  1653                           
  1654                           ;tasks.h: 404: I2C_LCD_Puts("SLEEPING");
  1655  002DC6  0E1D               	movlw	low STR_16
  1656  002DC8  0100               	movlb	0	; () banked
  1657  002DCA  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  1658  002DCC  0E0F               	movlw	high STR_16
  1659  002DCE  0100               	movlb	0	; () banked
  1660  002DD0  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  1661  002DD2  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  1662                           
  1663                           ;tasks.h: 405: } else {
  1664  002DD6  D016               	goto	l6087
  1665  002DD8                     l6077:
  1666                           
  1667                           ;tasks.h: 406: sleep_flag = 0;
  1668  002DD8  0E00               	movlw	0
  1669  002DDA  6E3A               	movwf	_sleep_flag,c
  1670                           
  1671                           ;tasks.h: 407: RTCC_from_RTCC(&caltime_now, &epoch_now);
  1672  002DDC  0EAC               	movlw	low _caltime_now
  1673  002DDE  0100               	movlb	0	; () banked
  1674  002DE0  6FEF               	movwf	RTCC_from_RTCC@ct& (0+255),b
  1675  002DE2  0E00               	movlw	high _caltime_now
  1676  002DE4  0100               	movlb	0	; () banked
  1677  002DE6  6FF0               	movwf	(RTCC_from_RTCC@ct+1)& (0+255),b
  1678  002DE8  0EC3               	movlw	low _epoch_now
  1679  002DEA  0100               	movlb	0	; () banked
  1680  002DEC  6FF1               	movwf	RTCC_from_RTCC@ep& (0+255),b
  1681  002DEE  0E00               	movlw	high _epoch_now
  1682  002DF0  0100               	movlb	0	; () banked
  1683  002DF2  6FF2               	movwf	(RTCC_from_RTCC@ep+1)& (0+255),b
  1684  002DF4  EC3C  F020         	call	_RTCC_from_RTCC	;wreg free
  1685                           
  1686                           ;tasks.h: 408: print_content = TIME;
  1687  002DF8  0E01               	movlw	1
  1688  002DFA  0100               	movlb	0	; () banked
  1689  002DFC  6FA2               	movwf	_print_content& (0+255),b
  1690                           
  1691                           ; BSR set to: 0
  1692                           ;tasks.h: 409: time_change_flag = 1;
  1693  002DFE  0E01               	movlw	1
  1694  002E00  6E3B               	movwf	_time_change_flag,c
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;tasks.h: 410: INTCONbits.GIE = 1;
  1698  002E02  8EF2               	bsf	intcon,7,c	;volatile
  1699  002E04                     l6087:
  1700                           
  1701                           ;tasks.h: 411: }
  1702                           ;tasks.h: 412: }
  1703                           ;tasks.h: 413: if (sleep_flag) {
  1704  002E04  503A               	movf	_sleep_flag,w,c
  1705  002E06  B4D8               	btfsc	status,2,c
  1706  002E08  0012               	return	
  1707  002E0A  0003               	sleep		;# 
  1708                           
  1709                           ;tasks.h: 415: __nop();
  1710  002E0C  F000               	nop	
  1711  002E0E  0012               	return	
  1712  002E10                     __end_of_sleep_loop:
  1713                           	opt stack 0
  1714                           tblptru	equ	0xFF8
  1715                           tblptrh	equ	0xFF7
  1716                           tblptrl	equ	0xFF6
  1717                           tablat	equ	0xFF5
  1718                           prodh	equ	0xFF4
  1719                           prodl	equ	0xFF3
  1720                           intcon	equ	0xFF2
  1721                           postinc0	equ	0xFEE
  1722                           wreg	equ	0xFE8
  1723                           indf2	equ	0xFDF
  1724                           postinc2	equ	0xFDE
  1725                           postdec2	equ	0xFDD
  1726                           fsr2h	equ	0xFDA
  1727                           fsr2l	equ	0xFD9
  1728                           status	equ	0xFD8
  1729                           
  1730 ;; *************** function _normal_mode_loop *****************
  1731 ;; Defined at:
  1732 ;;		line 345 in file "tasks.h"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;		None
  1735 ;; Auto vars:     Size  Location     Type
  1736 ;;		None
  1737 ;; Return value:  Size  Location     Type
  1738 ;;		None               void
  1739 ;; Registers used:
  1740 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1741 ;; Tracked objects:
  1742 ;;		On entry : 0/0
  1743 ;;		On exit  : 0/0
  1744 ;;		Unchanged: 0/0
  1745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1750 ;;Total ram usage:        0 bytes
  1751 ;; Hardware stack levels used:    1
  1752 ;; Hardware stack levels required when called:   10
  1753 ;; This function calls:
  1754 ;;		_Auto_cut
  1755 ;;		_RTCC_adjust_time_button
  1756 ;;		_ctmu_loop
  1757 ;;		_display_LCD
  1758 ;;		_port_loop
  1759 ;; This function is called by:
  1760 ;;		_main
  1761 ;; This function uses a non-reentrant model
  1762 ;;
  1763                           
  1764                           	psect	text2
  1765  0030FC                     __ptext2:
  1766                           	opt stack 0
  1767  0030FC                     _normal_mode_loop:
  1768                           	opt stack 20
  1769                           
  1770                           ;tasks.h: 346: if (!edit_flag.flags) {
  1771                           
  1772                           ;incstack = 0
  1773  0030FC  0100               	movlb	0	; () banked
  1774  0030FE  51A0               	movf	_edit_flag& (0+255),w,b
  1775  003100  A4D8               	btfss	status,2,c
  1776  003102  D021               	goto	l6019
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;tasks.h: 347: port_loop();
  1780  003104  ECD6  F00C         	call	_port_loop	;wreg free
  1781                           
  1782                           ;tasks.h: 348: if (ctm.flag.press) {
  1783  003108  0100               	movlb	0	; () banked
  1784  00310A  A1C1               	btfss	(_ctm+2)& (0+255),0,b
  1785  00310C  D01C               	goto	l6019
  1786                           
  1787                           ; BSR set to: 0
  1788                           ;tasks.h: 349: ctm.flag.press = 0;
  1789  00310E  0100               	movlb	0	; () banked
  1790  003110  91C1               	bcf	(_ctm+2)& (0+255),0,b
  1791                           
  1792                           ;tasks.h: 350: switch (print_content) {
  1793  003112  D00A               	goto	l6017
  1794  003114                     l6005:
  1795                           
  1796                           ; BSR set to: 0
  1797                           ;tasks.h: 352: print_content = INTEGRATING;
  1798  003114  0E03               	movlw	3
  1799  003116  D003               	goto	L3
  1800  003118                     l6007:
  1801                           
  1802                           ; BSR set to: 0
  1803                           ;tasks.h: 355: print_content = CHARGE_TIME;
  1804  003118  0E04               	movlw	4
  1805  00311A  D001               	goto	L3
  1806  00311C                     l6009:
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;tasks.h: 358: print_content = TIME;
  1810  00311C  0E01               	movlw	1
  1811  00311E                     L3:
  1812  00311E  0100               	movlb	0	; () banked
  1813  003120  6FA2               	movwf	_print_content& (0+255),b
  1814                           
  1815                           ;tasks.h: 362: break;
  1816  003122  D011               	goto	l6019
  1817  003124                     l6013:
  1818                           
  1819                           ; BSR set to: 0
  1820                           ;tasks.h: 364: print_content = CURRENT;
  1821  003124  0E02               	movlw	2
  1822  003126  D7FB               	goto	L3
  1823  003128                     l6017:
  1824                           
  1825                           ; BSR set to: 0
  1826  003128  0100               	movlb	0	; () banked
  1827  00312A  51A2               	movf	_print_content& (0+255),w,b
  1828                           
  1829                           ; Switch size 1, requested type "space"
  1830                           ; Number of cases is 4, Range of values is 1 to 4
  1831                           ; switch strategies available:
  1832                           ; Name         Instructions Cycles
  1833                           ; simple_byte           13     7 (average)
  1834                           ;	Chosen strategy is simple_byte
  1835  00312C  0A01               	xorlw	1	; case 1
  1836  00312E  B4D8               	btfsc	status,2,c
  1837  003130  D7F9               	goto	l6013
  1838  003132  0A03               	xorlw	3	; case 2
  1839  003134  B4D8               	btfsc	status,2,c
  1840  003136  D7EE               	goto	l6005
  1841  003138  0A01               	xorlw	1	; case 3
  1842  00313A  B4D8               	btfsc	status,2,c
  1843  00313C  D7ED               	goto	l6007
  1844  00313E  0A07               	xorlw	7	; case 4
  1845  003140  B4D8               	btfsc	status,2,c
  1846  003142  D7EC               	goto	l6009
  1847  003144  D7EF               	goto	l6013
  1848  003146                     l6019:
  1849                           
  1850                           ; BSR set to: 0
  1851                           ;tasks.h: 367: }
  1852                           ;tasks.h: 368: }
  1853                           ;tasks.h: 369: if (cut_time_flag) {
  1854  003146  5037               	movf	_cut_time_flag,w,c
  1855  003148  B4D8               	btfsc	status,2,c
  1856  00314A  D004               	goto	l6025
  1857                           
  1858                           ; BSR set to: 0
  1859                           ;tasks.h: 370: cut_time_flag = 0;
  1860  00314C  0E00               	movlw	0
  1861  00314E  6E37               	movwf	_cut_time_flag,c
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;tasks.h: 371: Auto_cut();
  1865  003150  EC02  F014         	call	_Auto_cut	;wreg free
  1866  003154                     l6025:
  1867                           
  1868                           ;tasks.h: 372: }
  1869                           ;tasks.h: 373: if (time_change_flag) {
  1870  003154  503B               	movf	_time_change_flag,w,c
  1871  003156  B4D8               	btfsc	status,2,c
  1872  003158  D004               	goto	l6029
  1873                           
  1874                           ;tasks.h: 374: time_change_flag = 0;
  1875  00315A  0E00               	movlw	0
  1876  00315C  6E3B               	movwf	_time_change_flag,c
  1877                           
  1878                           ;tasks.h: 375: display_flag = 1;
  1879  00315E  0E01               	movlw	1
  1880  003160  6E38               	movwf	_display_flag,c
  1881  003162                     l6029:
  1882                           
  1883                           ;tasks.h: 376: }
  1884                           ;tasks.h: 377: if (print_content == TIME)RTCC_adjust_time_button(&ctm, &ct0, &ct1);
  1885  003162  0100               	movlb	0	; () banked
  1886  003164  05A2               	decf	_print_content& (0+255),w,b
  1887  003166  A4D8               	btfss	status,2,c
  1888  003168  D014               	goto	l6033
  1889                           
  1890                           ; BSR set to: 0
  1891  00316A  0EBF               	movlw	low _ctm
  1892  00316C  0101               	movlb	1	; () banked
  1893  00316E  6F0A               	movwf	RTCC_adjust_time_button@mode& (0+255),b
  1894  003170  0E00               	movlw	high _ctm
  1895  003172  0101               	movlb	1	; () banked
  1896  003174  6F0B               	movwf	(RTCC_adjust_time_button@mode+1)& (0+255),b
  1897  003176  0EB3               	movlw	low _ct0
  1898  003178  0101               	movlb	1	; () banked
  1899  00317A  6F0C               	movwf	RTCC_adjust_time_button@cnt_inc& (0+255),b
  1900  00317C  0E00               	movlw	high _ct0
  1901  00317E  0101               	movlb	1	; () banked
  1902  003180  6F0D               	movwf	(RTCC_adjust_time_button@cnt_inc+1)& (0+255),b
  1903  003182  0EB7               	movlw	low _ct1
  1904  003184  0101               	movlb	1	; () banked
  1905  003186  6F0E               	movwf	RTCC_adjust_time_button@cnt_dec& (0+255),b
  1906  003188  0E00               	movlw	high _ct1
  1907  00318A  0101               	movlb	1	; () banked
  1908  00318C  6F0F               	movwf	(RTCC_adjust_time_button@cnt_dec+1)& (0+255),b
  1909  00318E  ECEF  F012         	call	_RTCC_adjust_time_button	;wreg free
  1910  003192                     l6033:
  1911                           
  1912                           ;tasks.h: 378: if (display_flag) {
  1913  003192  5038               	movf	_display_flag,w,c
  1914  003194  B4D8               	btfsc	status,2,c
  1915  003196  D004               	goto	l6039
  1916                           
  1917                           ;tasks.h: 379: display_flag = 0;
  1918  003198  0E00               	movlw	0
  1919  00319A  6E38               	movwf	_display_flag,c
  1920                           
  1921                           ;tasks.h: 380: display_LCD();
  1922  00319C  ECC4  F007         	call	_display_LCD	;wreg free
  1923  0031A0                     l6039:
  1924                           
  1925                           ;tasks.h: 381: }
  1926                           ;tasks.h: 382: if (ctmu_flag) {
  1927  0031A0  5036               	movf	_ctmu_flag,w,c
  1928  0031A2  B4D8               	btfsc	status,2,c
  1929  0031A4  0012               	return	
  1930                           
  1931                           ;tasks.h: 384: ctmu_flag = 0;
  1932  0031A6  0E00               	movlw	0
  1933  0031A8  6E36               	movwf	_ctmu_flag,c
  1934                           
  1935                           ;tasks.h: 385: ctmu_loop();
  1936  0031AA  EC81  F013         	call	_ctmu_loop	;wreg free
  1937  0031AE  0012               	return	
  1938  0031B0                     __end_of_normal_mode_loop:
  1939                           	opt stack 0
  1940                           tblptru	equ	0xFF8
  1941                           tblptrh	equ	0xFF7
  1942                           tblptrl	equ	0xFF6
  1943                           tablat	equ	0xFF5
  1944                           prodh	equ	0xFF4
  1945                           prodl	equ	0xFF3
  1946                           intcon	equ	0xFF2
  1947                           postinc0	equ	0xFEE
  1948                           wreg	equ	0xFE8
  1949                           indf2	equ	0xFDF
  1950                           postinc2	equ	0xFDE
  1951                           postdec2	equ	0xFDD
  1952                           fsr2h	equ	0xFDA
  1953                           fsr2l	equ	0xFD9
  1954                           status	equ	0xFD8
  1955                           
  1956 ;; *************** function _port_loop *****************
  1957 ;; Defined at:
  1958 ;;		line 284 in file "tasks.h"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;		None
  1961 ;; Auto vars:     Size  Location     Type
  1962 ;;  i               1    0[BANK0 ] unsigned char 
  1963 ;; Return value:  Size  Location     Type
  1964 ;;		None               void
  1965 ;; Registers used:
  1966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1967 ;; Tracked objects:
  1968 ;;		On entry : 0/0
  1969 ;;		On exit  : 0/0
  1970 ;;		Unchanged: 0/0
  1971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1973 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1975 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1976 ;;Total ram usage:        1 bytes
  1977 ;; Hardware stack levels used:    1
  1978 ;; Hardware stack levels required when called:    5
  1979 ;; This function calls:
  1980 ;;		_LED
  1981 ;;		_OUT
  1982 ;;		_delay_set
  1983 ;;		_sw_flag_clear
  1984 ;;		_sw_flag_read
  1985 ;; This function is called by:
  1986 ;;		_normal_mode_loop
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989                           
  1990                           	psect	text3
  1991  0019AC                     __ptext3:
  1992                           	opt stack 0
  1993  0019AC                     _port_loop:
  1994                           	opt stack 24
  1995                           
  1996                           ;tasks.h: 285: uint8_t i;
  1997                           ;tasks.h: 286: for (i = 0; i < 3; i++) {
  1998                           
  1999                           ;incstack = 0
  2000  0019AC  0E00               	movlw	0
  2001  0019AE  0100               	movlb	0	; () banked
  2002  0019B0  6FC7               	movwf	port_loop@i& (0+255),b
  2003  0019B2                     l5873:
  2004                           
  2005                           ; BSR set to: 0
  2006  0019B2  0E02               	movlw	2
  2007  0019B4  0100               	movlb	0	; () banked
  2008  0019B6  65C7               	cpfsgt	port_loop@i& (0+255),b
  2009  0019B8  D001               	goto	l5877
  2010  0019BA  D124               	goto	l5951
  2011  0019BC                     l5877:
  2012                           
  2013                           ; BSR set to: 0
  2014                           ;tasks.h: 287: if (sw_flag_read(i, 0x0100)) {
  2015  0019BC  0E01               	movlw	1
  2016  0019BE  6E20               	movwf	sw_flag_read@bit_and+1,c
  2017  0019C0  0E00               	movlw	0
  2018  0019C2  6E1F               	movwf	sw_flag_read@bit_and,c
  2019  0019C4  0100               	movlb	0	; () banked
  2020  0019C6  51C7               	movf	port_loop@i& (0+255),w,b
  2021  0019C8  ECC8  F01C         	call	_sw_flag_read
  2022  0019CC  501F               	movf	?_sw_flag_read,w,c
  2023  0019CE  1020               	iorwf	?_sw_flag_read+1,w,c
  2024  0019D0  B4D8               	btfsc	status,2,c
  2025  0019D2  D02D               	goto	l5893
  2026                           
  2027                           ;tasks.h: 288: OUT(i, 1);
  2028  0019D4  0E01               	movlw	1
  2029  0019D6  6E1F               	movwf	OUT@value,c
  2030  0019D8  0100               	movlb	0	; () banked
  2031  0019DA  51C7               	movf	port_loop@i& (0+255),w,b
  2032  0019DC  EC75  F01D         	call	_OUT
  2033                           
  2034                           ;tasks.h: 289: LED(i, 1);
  2035  0019E0  0E01               	movlw	1
  2036  0019E2  6E1F               	movwf	LED@value,c
  2037  0019E4  0100               	movlb	0	; () banked
  2038  0019E6  51C7               	movf	port_loop@i& (0+255),w,b
  2039  0019E8  ECBF  F01E         	call	_LED
  2040                           
  2041                           ;tasks.h: 290: cut_cnt[i] = 0;
  2042  0019EC  0100               	movlb	0	; () banked
  2043  0019EE  51C7               	movf	port_loop@i& (0+255),w,b
  2044  0019F0  0D02               	mullw	2
  2045  0019F2  0E84               	movlw	low _cut_cnt
  2046  0019F4  24F3               	addwf	prodl,w,c
  2047  0019F6  6ED9               	movwf	fsr2l,c
  2048  0019F8  0E00               	movlw	high _cut_cnt
  2049  0019FA  20F4               	addwfc	prodh,w,c
  2050  0019FC  6EDA               	movwf	fsr2h,c
  2051  0019FE  0E00               	movlw	0
  2052  001A00  6EDE               	movwf	postinc2,c
  2053  001A02  0E00               	movlw	0
  2054  001A04  6EDD               	movwf	postdec2,c
  2055                           
  2056                           ; BSR set to: 0
  2057                           ;tasks.h: 291: print_port = i;
  2058  001A06  C0C7  F039         	movff	port_loop@i,_print_port
  2059                           
  2060                           ;tasks.h: 292: if (print_content == AUTO_STOP || print_content == ALWAYS_ON || print_con
      +                          tent == RESETED)print_content = CURRENT;
  2061  001A0A  0E08               	movlw	8
  2062  001A0C  0100               	movlb	0	; () banked
  2063  001A0E  19A2               	xorwf	_print_content& (0+255),w,b
  2064  001A10  B4D8               	btfsc	status,2,c
  2065  001A12  D00A               	goto	l5891
  2066                           
  2067                           ; BSR set to: 0
  2068  001A14  0E07               	movlw	7
  2069  001A16  0100               	movlb	0	; () banked
  2070  001A18  19A2               	xorwf	_print_content& (0+255),w,b
  2071  001A1A  B4D8               	btfsc	status,2,c
  2072  001A1C  D005               	goto	l5891
  2073                           
  2074                           ; BSR set to: 0
  2075  001A1E  0E06               	movlw	6
  2076  001A20  0100               	movlb	0	; () banked
  2077  001A22  19A2               	xorwf	_print_content& (0+255),w,b
  2078  001A24  A4D8               	btfss	status,2,c
  2079  001A26  D003               	goto	l5893
  2080  001A28                     l5891:
  2081                           
  2082                           ; BSR set to: 0
  2083  001A28  0E02               	movlw	2
  2084  001A2A  0100               	movlb	0	; () banked
  2085  001A2C  6FA2               	movwf	_print_content& (0+255),b
  2086  001A2E                     l5893:
  2087                           
  2088                           ;tasks.h: 293: }
  2089                           ;tasks.h: 294: if (sw_flag_read(i, 0x0400)) {
  2090  001A2E  0E04               	movlw	4
  2091  001A30  6E20               	movwf	sw_flag_read@bit_and+1,c
  2092  001A32  0E00               	movlw	0
  2093  001A34  6E1F               	movwf	sw_flag_read@bit_and,c
  2094  001A36  0100               	movlb	0	; () banked
  2095  001A38  51C7               	movf	port_loop@i& (0+255),w,b
  2096  001A3A  ECC8  F01C         	call	_sw_flag_read
  2097  001A3E  501F               	movf	?_sw_flag_read,w,c
  2098  001A40  1020               	iorwf	?_sw_flag_read+1,w,c
  2099  001A42  B4D8               	btfsc	status,2,c
  2100  001A44  D00B               	goto	l5899
  2101                           
  2102                           ;tasks.h: 295: sw_flag_clear(i, 0x0000);
  2103  001A46  0E00               	movlw	0
  2104  001A48  6E20               	movwf	sw_flag_clear@bit_and+1,c
  2105  001A4A  0E00               	movlw	0
  2106  001A4C  6E1F               	movwf	sw_flag_clear@bit_and,c
  2107  001A4E  0100               	movlb	0	; () banked
  2108  001A50  51C7               	movf	port_loop@i& (0+255),w,b
  2109  001A52  EC7B  F01E         	call	_sw_flag_clear
  2110                           
  2111                           ;tasks.h: 296: print_content = RESET;
  2112  001A56  0E05               	movlw	5
  2113  001A58  0100               	movlb	0	; () banked
  2114  001A5A  6FA2               	movwf	_print_content& (0+255),b
  2115  001A5C                     l5899:
  2116                           
  2117                           ;tasks.h: 297: }
  2118                           ;tasks.h: 298: if (sw_flag_read(i, 0x0004)) {
  2119  001A5C  0E00               	movlw	0
  2120  001A5E  6E20               	movwf	sw_flag_read@bit_and+1,c
  2121  001A60  0E04               	movlw	4
  2122  001A62  6E1F               	movwf	sw_flag_read@bit_and,c
  2123  001A64  0100               	movlb	0	; () banked
  2124  001A66  51C7               	movf	port_loop@i& (0+255),w,b
  2125  001A68  ECC8  F01C         	call	_sw_flag_read
  2126  001A6C  501F               	movf	?_sw_flag_read,w,c
  2127  001A6E  1020               	iorwf	?_sw_flag_read+1,w,c
  2128  001A70  B4D8               	btfsc	status,2,c
  2129  001A72  D03C               	goto	l5913
  2130                           
  2131                           ;tasks.h: 299: sw_flag_clear(i, 0x0000);
  2132  001A74  0E00               	movlw	0
  2133  001A76  6E20               	movwf	sw_flag_clear@bit_and+1,c
  2134  001A78  0E00               	movlw	0
  2135  001A7A  6E1F               	movwf	sw_flag_clear@bit_and,c
  2136  001A7C  0100               	movlb	0	; () banked
  2137  001A7E  51C7               	movf	port_loop@i& (0+255),w,b
  2138  001A80  EC7B  F01E         	call	_sw_flag_clear
  2139                           
  2140                           ;tasks.h: 300: print_content = RESETED;
  2141  001A84  0E06               	movlw	6
  2142  001A86  0100               	movlb	0	; () banked
  2143  001A88  6FA2               	movwf	_print_content& (0+255),b
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;tasks.h: 301: S[i] = 0;
  2147  001A8A  0100               	movlb	0	; () banked
  2148  001A8C  51C7               	movf	port_loop@i& (0+255),w,b
  2149  001A8E  0D04               	mullw	4
  2150  001A90  0E60               	movlw	low _S
  2151  001A92  24F3               	addwf	prodl,w,c
  2152  001A94  6ED9               	movwf	fsr2l,c
  2153  001A96  0E00               	movlw	high _S
  2154  001A98  20F4               	addwfc	prodh,w,c
  2155  001A9A  6EDA               	movwf	fsr2h,c
  2156  001A9C  6ADE               	clrf	postinc2,c
  2157  001A9E  6ADE               	clrf	postinc2,c
  2158  001AA0  6ADE               	clrf	postinc2,c
  2159  001AA2  6ADD               	clrf	postdec2,c
  2160                           
  2161                           ; BSR set to: 0
  2162                           ;tasks.h: 302: s[i] = 0;
  2163  001AA4  0100               	movlb	0	; () banked
  2164  001AA6  51C7               	movf	port_loop@i& (0+255),w,b
  2165  001AA8  0D04               	mullw	4
  2166  001AAA  0E78               	movlw	low _s
  2167  001AAC  24F3               	addwf	prodl,w,c
  2168  001AAE  6ED9               	movwf	fsr2l,c
  2169  001AB0  0E00               	movlw	high _s
  2170  001AB2  20F4               	addwfc	prodh,w,c
  2171  001AB4  6EDA               	movwf	fsr2h,c
  2172  001AB6  6ADE               	clrf	postinc2,c
  2173  001AB8  6ADE               	clrf	postinc2,c
  2174  001ABA  6ADE               	clrf	postinc2,c
  2175  001ABC  6ADD               	clrf	postdec2,c
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;tasks.h: 303: charge_time[i] = 0;
  2179  001ABE  0100               	movlb	0	; () banked
  2180  001AC0  51C7               	movf	port_loop@i& (0+255),w,b
  2181  001AC2  0D04               	mullw	4
  2182  001AC4  0E6C               	movlw	low _charge_time
  2183  001AC6  24F3               	addwf	prodl,w,c
  2184  001AC8  6ED9               	movwf	fsr2l,c
  2185  001ACA  0E00               	movlw	high _charge_time
  2186  001ACC  20F4               	addwfc	prodh,w,c
  2187  001ACE  6EDA               	movwf	fsr2h,c
  2188  001AD0  6ADE               	clrf	postinc2,c
  2189  001AD2  6ADE               	clrf	postinc2,c
  2190  001AD4  6ADE               	clrf	postinc2,c
  2191  001AD6  6ADD               	clrf	postdec2,c
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;tasks.h: 304: delay_set(&delay_display, 64);
  2195  001AD8  0E3C               	movlw	low _delay_display
  2196  001ADA  6E1F               	movwf	delay_set@d,c
  2197  001ADC  0E00               	movlw	high _delay_display
  2198  001ADE  6E20               	movwf	delay_set@d+1,c
  2199  001AE0  0E00               	movlw	0
  2200  001AE2  6E22               	movwf	delay_set@value+1,c
  2201  001AE4  0E40               	movlw	64
  2202  001AE6  6E21               	movwf	delay_set@value,c
  2203  001AE8  EC09  F020         	call	_delay_set	;wreg free
  2204  001AEC                     l5913:
  2205                           
  2206                           ;tasks.h: 305: }
  2207                           ;tasks.h: 306: if (sw_flag_read(i, 0x0800)) {
  2208  001AEC  0E08               	movlw	8
  2209  001AEE  6E20               	movwf	sw_flag_read@bit_and+1,c
  2210  001AF0  0E00               	movlw	0
  2211  001AF2  6E1F               	movwf	sw_flag_read@bit_and,c
  2212  001AF4  0100               	movlb	0	; () banked
  2213  001AF6  51C7               	movf	port_loop@i& (0+255),w,b
  2214  001AF8  ECC8  F01C         	call	_sw_flag_read
  2215  001AFC  501F               	movf	?_sw_flag_read,w,c
  2216  001AFE  1020               	iorwf	?_sw_flag_read+1,w,c
  2217  001B00  B4D8               	btfsc	status,2,c
  2218  001B02  D019               	goto	l5923
  2219                           
  2220                           ;tasks.h: 307: sw_flag_clear(i, 0x0000);
  2221  001B04  0E00               	movlw	0
  2222  001B06  6E20               	movwf	sw_flag_clear@bit_and+1,c
  2223  001B08  0E00               	movlw	0
  2224  001B0A  6E1F               	movwf	sw_flag_clear@bit_and,c
  2225  001B0C  0100               	movlb	0	; () banked
  2226  001B0E  51C7               	movf	port_loop@i& (0+255),w,b
  2227  001B10  EC7B  F01E         	call	_sw_flag_clear
  2228                           
  2229                           ;tasks.h: 308: if (auto_cut_ON[i]) {
  2230  001B14  0100               	movlb	0	; () banked
  2231  001B16  51C7               	movf	port_loop@i& (0+255),w,b
  2232  001B18  0D01               	mullw	1
  2233  001B1A  0E29               	movlw	low _auto_cut_ON
  2234  001B1C  24F3               	addwf	prodl,w,c
  2235  001B1E  6ED9               	movwf	fsr2l,c
  2236  001B20  0E00               	movlw	high _auto_cut_ON
  2237  001B22  20F4               	addwfc	prodh,w,c
  2238  001B24  6EDA               	movwf	fsr2h,c
  2239  001B26  50DF               	movf	indf2,w,c
  2240  001B28  B4D8               	btfsc	status,2,c
  2241  001B2A  D002               	goto	l5921
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;tasks.h: 309: print_content = AUTO_STOP;
  2245  001B2C  0E08               	movlw	8
  2246  001B2E  D001               	goto	L4
  2247  001B30                     l5921:
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;tasks.h: 311: print_content = ALWAYS_ON;
  2251  001B30  0E07               	movlw	7
  2252  001B32                     L4:
  2253  001B32  0100               	movlb	0	; () banked
  2254  001B34  6FA2               	movwf	_print_content& (0+255),b
  2255  001B36                     l5923:
  2256                           
  2257                           ;tasks.h: 312: }
  2258                           ;tasks.h: 313: }
  2259                           ;tasks.h: 314: if (sw_flag_read(i, 0x0008)) {
  2260  001B36  0E00               	movlw	0
  2261  001B38  6E20               	movwf	sw_flag_read@bit_and+1,c
  2262  001B3A  0E08               	movlw	8
  2263  001B3C  6E1F               	movwf	sw_flag_read@bit_and,c
  2264  001B3E  0100               	movlb	0	; () banked
  2265  001B40  51C7               	movf	port_loop@i& (0+255),w,b
  2266  001B42  ECC8  F01C         	call	_sw_flag_read
  2267  001B46  501F               	movf	?_sw_flag_read,w,c
  2268  001B48  1020               	iorwf	?_sw_flag_read+1,w,c
  2269  001B4A  B4D8               	btfsc	status,2,c
  2270  001B4C  D041               	goto	l5941
  2271                           
  2272                           ;tasks.h: 315: sw_flag_clear(i, 0x0000);
  2273  001B4E  0E00               	movlw	0
  2274  001B50  6E20               	movwf	sw_flag_clear@bit_and+1,c
  2275  001B52  0E00               	movlw	0
  2276  001B54  6E1F               	movwf	sw_flag_clear@bit_and,c
  2277  001B56  0100               	movlb	0	; () banked
  2278  001B58  51C7               	movf	port_loop@i& (0+255),w,b
  2279  001B5A  EC7B  F01E         	call	_sw_flag_clear
  2280                           
  2281                           ;tasks.h: 316: if (auto_cut_ON[i]) {
  2282  001B5E  0100               	movlb	0	; () banked
  2283  001B60  51C7               	movf	port_loop@i& (0+255),w,b
  2284  001B62  0D01               	mullw	1
  2285  001B64  0E29               	movlw	low _auto_cut_ON
  2286  001B66  24F3               	addwf	prodl,w,c
  2287  001B68  6ED9               	movwf	fsr2l,c
  2288  001B6A  0E00               	movlw	high _auto_cut_ON
  2289  001B6C  20F4               	addwfc	prodh,w,c
  2290  001B6E  6EDA               	movwf	fsr2h,c
  2291  001B70  50DF               	movf	indf2,w,c
  2292  001B72  B4D8               	btfsc	status,2,c
  2293  001B74  D015               	goto	l5935
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;tasks.h: 317: auto_cut_ON[i] = 0;
  2297  001B76  0100               	movlb	0	; () banked
  2298  001B78  51C7               	movf	port_loop@i& (0+255),w,b
  2299  001B7A  0D01               	mullw	1
  2300  001B7C  0E29               	movlw	low _auto_cut_ON
  2301  001B7E  24F3               	addwf	prodl,w,c
  2302  001B80  6ED9               	movwf	fsr2l,c
  2303  001B82  0E00               	movlw	high _auto_cut_ON
  2304  001B84  20F4               	addwfc	prodh,w,c
  2305  001B86  6EDA               	movwf	fsr2h,c
  2306  001B88  0E00               	movlw	0
  2307  001B8A  6EDF               	movwf	indf2,c
  2308                           
  2309                           ; BSR set to: 0
  2310                           ;tasks.h: 318: print_content = ALWAYS_ON;
  2311  001B8C  0E07               	movlw	7
  2312  001B8E  0100               	movlb	0	; () banked
  2313  001B90  6FA2               	movwf	_print_content& (0+255),b
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;tasks.h: 319: OUT(i, 1);
  2317  001B92  0E01               	movlw	1
  2318  001B94  6E1F               	movwf	OUT@value,c
  2319  001B96  0100               	movlb	0	; () banked
  2320  001B98  51C7               	movf	port_loop@i& (0+255),w,b
  2321  001B9A  EC75  F01D         	call	_OUT
  2322                           
  2323                           ;tasks.h: 320: } else {
  2324  001B9E  D00E               	goto	l5939
  2325  001BA0                     l5935:
  2326                           
  2327                           ;tasks.h: 321: auto_cut_ON[i] = 1;
  2328  001BA0  0100               	movlb	0	; () banked
  2329  001BA2  51C7               	movf	port_loop@i& (0+255),w,b
  2330  001BA4  0D01               	mullw	1
  2331  001BA6  0E29               	movlw	low _auto_cut_ON
  2332  001BA8  24F3               	addwf	prodl,w,c
  2333  001BAA  6ED9               	movwf	fsr2l,c
  2334  001BAC  0E00               	movlw	high _auto_cut_ON
  2335  001BAE  20F4               	addwfc	prodh,w,c
  2336  001BB0  6EDA               	movwf	fsr2h,c
  2337  001BB2  0E01               	movlw	1
  2338  001BB4  6EDF               	movwf	indf2,c
  2339                           
  2340                           ; BSR set to: 0
  2341                           ;tasks.h: 322: print_content = AUTO_STOP;
  2342  001BB6  0E08               	movlw	8
  2343  001BB8  0100               	movlb	0	; () banked
  2344  001BBA  6FA2               	movwf	_print_content& (0+255),b
  2345  001BBC                     l5939:
  2346                           
  2347                           ;tasks.h: 323: }
  2348                           ;tasks.h: 324: delay_set(&delay_display, 64);
  2349  001BBC  0E3C               	movlw	low _delay_display
  2350  001BBE  6E1F               	movwf	delay_set@d,c
  2351  001BC0  0E00               	movlw	high _delay_display
  2352  001BC2  6E20               	movwf	delay_set@d+1,c
  2353  001BC4  0E00               	movlw	0
  2354  001BC6  6E22               	movwf	delay_set@value+1,c
  2355  001BC8  0E40               	movlw	64
  2356  001BCA  6E21               	movwf	delay_set@value,c
  2357  001BCC  EC09  F020         	call	_delay_set	;wreg free
  2358  001BD0                     l5941:
  2359                           
  2360                           ;tasks.h: 325: }
  2361                           ;tasks.h: 326: if (sw_flag_read(i, 0x1000)) {
  2362  001BD0  0E10               	movlw	16
  2363  001BD2  6E20               	movwf	sw_flag_read@bit_and+1,c
  2364  001BD4  0E00               	movlw	0
  2365  001BD6  6E1F               	movwf	sw_flag_read@bit_and,c
  2366  001BD8  0100               	movlb	0	; () banked
  2367  001BDA  51C7               	movf	port_loop@i& (0+255),w,b
  2368  001BDC  ECC8  F01C         	call	_sw_flag_read
  2369  001BE0  501F               	movf	?_sw_flag_read,w,c
  2370  001BE2  1020               	iorwf	?_sw_flag_read+1,w,c
  2371  001BE4  B4D8               	btfsc	status,2,c
  2372  001BE6  D00B               	goto	l5947
  2373                           
  2374                           ;tasks.h: 327: sw_flag_clear(i, 0x0000);
  2375  001BE8  0E00               	movlw	0
  2376  001BEA  6E20               	movwf	sw_flag_clear@bit_and+1,c
  2377  001BEC  0E00               	movlw	0
  2378  001BEE  6E1F               	movwf	sw_flag_clear@bit_and,c
  2379  001BF0  0100               	movlb	0	; () banked
  2380  001BF2  51C7               	movf	port_loop@i& (0+255),w,b
  2381  001BF4  EC7B  F01E         	call	_sw_flag_clear
  2382                           
  2383                           ;tasks.h: 328: print_content = LOGO;
  2384  001BF8  0E00               	movlw	0
  2385  001BFA  0100               	movlb	0	; () banked
  2386  001BFC  6FA2               	movwf	_print_content& (0+255),b
  2387  001BFE                     l5947:
  2388  001BFE  0100               	movlb	0	; () banked
  2389  001C00  2BC7               	incf	port_loop@i& (0+255),f,b
  2390  001C02  D6D7               	goto	l5873
  2391  001C04                     l5951:
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;tasks.h: 329: }
  2395                           ;tasks.h: 330: }
  2396                           ;tasks.h: 331: if (delay_display.flag) {
  2397  001C04  503C               	movf	_delay_display,w,c
  2398  001C06  B4D8               	btfsc	status,2,c
  2399  001C08  0012               	return	
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;tasks.h: 332: delay_display.flag = 0;
  2403  001C0A  0E00               	movlw	0
  2404  001C0C  6E3C               	movwf	_delay_display,c
  2405                           
  2406                           ;tasks.h: 333: print_content = CURRENT;
  2407  001C0E  0E02               	movlw	2
  2408  001C10  0100               	movlb	0	; () banked
  2409  001C12  6FA2               	movwf	_print_content& (0+255),b
  2410                           
  2411                           ;tasks.h: 334: display_flag = 1;
  2412  001C14  0E01               	movlw	1
  2413  001C16  6E38               	movwf	_display_flag,c
  2414  001C18  0012               	return	
  2415  001C1A                     __end_of_port_loop:
  2416                           	opt stack 0
  2417                           tblptru	equ	0xFF8
  2418                           tblptrh	equ	0xFF7
  2419                           tblptrl	equ	0xFF6
  2420                           tablat	equ	0xFF5
  2421                           prodh	equ	0xFF4
  2422                           prodl	equ	0xFF3
  2423                           intcon	equ	0xFF2
  2424                           postinc0	equ	0xFEE
  2425                           wreg	equ	0xFE8
  2426                           indf2	equ	0xFDF
  2427                           postinc2	equ	0xFDE
  2428                           postdec2	equ	0xFDD
  2429                           fsr2h	equ	0xFDA
  2430                           fsr2l	equ	0xFD9
  2431                           status	equ	0xFD8
  2432                           
  2433 ;; *************** function _sw_flag_read *****************
  2434 ;; Defined at:
  2435 ;;		line 90 in file "tasks.h"
  2436 ;; Parameters:    Size  Location     Type
  2437 ;;  port            1    wreg     unsigned char 
  2438 ;;  bit_and         2   30[COMRAM] unsigned int 
  2439 ;; Auto vars:     Size  Location     Type
  2440 ;;  port            1   32[COMRAM] unsigned char 
  2441 ;; Return value:  Size  Location     Type
  2442 ;;                  2   30[COMRAM] unsigned int 
  2443 ;; Registers used:
  2444 ;;		wreg, status,2, status,0
  2445 ;; Tracked objects:
  2446 ;;		On entry : 0/0
  2447 ;;		On exit  : 0/0
  2448 ;;		Unchanged: 0/0
  2449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2450 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2451 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2453 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2454 ;;Total ram usage:        3 bytes
  2455 ;; Hardware stack levels used:    1
  2456 ;; Hardware stack levels required when called:    4
  2457 ;; This function calls:
  2458 ;;		Nothing
  2459 ;; This function is called by:
  2460 ;;		_port_loop
  2461 ;; This function uses a non-reentrant model
  2462 ;;
  2463                           
  2464                           	psect	text4
  2465  003990                     __ptext4:
  2466                           	opt stack 0
  2467  003990                     _sw_flag_read:
  2468                           	opt stack 24
  2469                           
  2470                           ; BSR set to: 0
  2471                           ;incstack = 0
  2472                           ;sw_flag_read@port stored from wreg
  2473  003990  6E21               	movwf	sw_flag_read@port,c
  2474                           
  2475                           ;tasks.h: 91: switch (port) {
  2476  003992  D020               	goto	l5655
  2477  003994                     l5637:
  2478                           
  2479                           ;tasks.h: 93: return (ct0.flags) & bit_and;
  2480  003994  501F               	movf	sw_flag_read@bit_and,w,c
  2481  003996  0100               	movlb	0	; () banked
  2482  003998  15B5               	andwf	(_ct0+2)& (0+255),w,b
  2483  00399A  6E1F               	movwf	?_sw_flag_read,c
  2484  00399C  5020               	movf	sw_flag_read@bit_and+1,w,c
  2485  00399E  0100               	movlb	0	; () banked
  2486  0039A0  15B6               	andwf	(_ct0+3)& (0+255),w,b
  2487  0039A2  6E20               	movwf	?_sw_flag_read+1,c
  2488                           
  2489                           ; BSR set to: 0
  2490  0039A4  0012               	return	
  2491  0039A6                     l5641:
  2492                           
  2493                           ;tasks.h: 95: return (ct1.flags) & bit_and;
  2494  0039A6  501F               	movf	sw_flag_read@bit_and,w,c
  2495  0039A8  0100               	movlb	0	; () banked
  2496  0039AA  15B9               	andwf	(_ct1+2)& (0+255),w,b
  2497  0039AC  6E1F               	movwf	?_sw_flag_read,c
  2498  0039AE  5020               	movf	sw_flag_read@bit_and+1,w,c
  2499  0039B0  0100               	movlb	0	; () banked
  2500  0039B2  15BA               	andwf	(_ct1+3)& (0+255),w,b
  2501  0039B4  6E20               	movwf	?_sw_flag_read+1,c
  2502                           
  2503                           ; BSR set to: 0
  2504  0039B6  0012               	return	
  2505  0039B8                     l5645:
  2506                           
  2507                           ;tasks.h: 97: return (ct2.flags) & bit_and;
  2508  0039B8  501F               	movf	sw_flag_read@bit_and,w,c
  2509  0039BA  0100               	movlb	0	; () banked
  2510  0039BC  15BD               	andwf	(_ct2+2)& (0+255),w,b
  2511  0039BE  6E1F               	movwf	?_sw_flag_read,c
  2512  0039C0  5020               	movf	sw_flag_read@bit_and+1,w,c
  2513  0039C2  0100               	movlb	0	; () banked
  2514  0039C4  15BE               	andwf	(_ct2+3)& (0+255),w,b
  2515  0039C6  6E20               	movwf	?_sw_flag_read+1,c
  2516                           
  2517                           ; BSR set to: 0
  2518  0039C8  0012               	return	
  2519  0039CA                     l5649:
  2520                           
  2521                           ;tasks.h: 99: return 0;
  2522  0039CA  0E00               	movlw	0
  2523  0039CC  6E20               	movwf	?_sw_flag_read+1,c
  2524  0039CE  0E00               	movlw	0
  2525  0039D0  6E1F               	movwf	?_sw_flag_read,c
  2526                           
  2527                           ;tasks.h: 100: }
  2528  0039D2  0012               	return	
  2529  0039D4                     l5655:
  2530  0039D4  5021               	movf	sw_flag_read@port,w,c
  2531                           
  2532                           ; Switch size 1, requested type "space"
  2533                           ; Number of cases is 3, Range of values is 0 to 2
  2534                           ; switch strategies available:
  2535                           ; Name         Instructions Cycles
  2536                           ; simple_byte           10     6 (average)
  2537                           ;	Chosen strategy is simple_byte
  2538  0039D6  0A00               	xorlw	0	; case 0
  2539  0039D8  B4D8               	btfsc	status,2,c
  2540  0039DA  D7DC               	goto	l5637
  2541  0039DC  0A01               	xorlw	1	; case 1
  2542  0039DE  B4D8               	btfsc	status,2,c
  2543  0039E0  D7E2               	goto	l5641
  2544  0039E2  0A03               	xorlw	3	; case 2
  2545  0039E4  B4D8               	btfsc	status,2,c
  2546  0039E6  D7E8               	goto	l5645
  2547  0039E8  D7F0               	goto	l5649
  2548  0039EA                     __end_of_sw_flag_read:
  2549                           	opt stack 0
  2550                           tblptru	equ	0xFF8
  2551                           tblptrh	equ	0xFF7
  2552                           tblptrl	equ	0xFF6
  2553                           tablat	equ	0xFF5
  2554                           prodh	equ	0xFF4
  2555                           prodl	equ	0xFF3
  2556                           intcon	equ	0xFF2
  2557                           postinc0	equ	0xFEE
  2558                           wreg	equ	0xFE8
  2559                           indf2	equ	0xFDF
  2560                           postinc2	equ	0xFDE
  2561                           postdec2	equ	0xFDD
  2562                           fsr2h	equ	0xFDA
  2563                           fsr2l	equ	0xFD9
  2564                           status	equ	0xFD8
  2565                           
  2566 ;; *************** function _sw_flag_clear *****************
  2567 ;; Defined at:
  2568 ;;		line 103 in file "tasks.h"
  2569 ;; Parameters:    Size  Location     Type
  2570 ;;  port            1    wreg     unsigned char 
  2571 ;;  bit_and         2   30[COMRAM] unsigned int 
  2572 ;; Auto vars:     Size  Location     Type
  2573 ;;  port            1   32[COMRAM] unsigned char 
  2574 ;; Return value:  Size  Location     Type
  2575 ;;		None               void
  2576 ;; Registers used:
  2577 ;;		wreg, status,2, status,0
  2578 ;; Tracked objects:
  2579 ;;		On entry : 0/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2583 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2584 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2586 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2587 ;;Total ram usage:        3 bytes
  2588 ;; Hardware stack levels used:    1
  2589 ;; Hardware stack levels required when called:    4
  2590 ;; This function calls:
  2591 ;;		Nothing
  2592 ;; This function is called by:
  2593 ;;		_port_loop
  2594 ;; This function uses a non-reentrant model
  2595 ;;
  2596                           
  2597                           	psect	text5
  2598  003CF6                     __ptext5:
  2599                           	opt stack 0
  2600  003CF6                     _sw_flag_clear:
  2601                           	opt stack 24
  2602                           
  2603                           ;incstack = 0
  2604                           ;sw_flag_clear@port stored from wreg
  2605  003CF6  6E21               	movwf	sw_flag_clear@port,c
  2606                           
  2607                           ;tasks.h: 104: switch (port) {
  2608  003CF8  D015               	goto	l5667
  2609  003CFA                     l5659:
  2610                           
  2611                           ;tasks.h: 106: ct0.flags &= bit_and;
  2612  003CFA  501F               	movf	sw_flag_clear@bit_and,w,c
  2613  003CFC  0100               	movlb	0	; () banked
  2614  003CFE  17B5               	andwf	(_ct0+2)& (0+255),f,b
  2615  003D00  5020               	movf	sw_flag_clear@bit_and+1,w,c
  2616  003D02  0100               	movlb	0	; () banked
  2617  003D04  17B6               	andwf	(_ct0+3)& (0+255),f,b
  2618                           
  2619                           ;tasks.h: 107: break;
  2620  003D06  0012               	return	
  2621  003D08                     l5661:
  2622                           
  2623                           ;tasks.h: 109: ct1.flags &= bit_and;
  2624  003D08  501F               	movf	sw_flag_clear@bit_and,w,c
  2625  003D0A  0100               	movlb	0	; () banked
  2626  003D0C  17B9               	andwf	(_ct1+2)& (0+255),f,b
  2627  003D0E  5020               	movf	sw_flag_clear@bit_and+1,w,c
  2628  003D10  0100               	movlb	0	; () banked
  2629  003D12  17BA               	andwf	(_ct1+3)& (0+255),f,b
  2630                           
  2631                           ;tasks.h: 110: break;
  2632  003D14  0012               	return	
  2633  003D16                     l5663:
  2634                           
  2635                           ;tasks.h: 112: ct2.flags &= bit_and;
  2636  003D16  501F               	movf	sw_flag_clear@bit_and,w,c
  2637  003D18  0100               	movlb	0	; () banked
  2638  003D1A  17BD               	andwf	(_ct2+2)& (0+255),f,b
  2639  003D1C  5020               	movf	sw_flag_clear@bit_and+1,w,c
  2640  003D1E  0100               	movlb	0	; () banked
  2641  003D20  17BE               	andwf	(_ct2+3)& (0+255),f,b
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;tasks.h: 114: }
  2645                           
  2646                           ;tasks.h: 113: break;
  2647  003D22  0012               	return	
  2648  003D24                     l5667:
  2649  003D24  5021               	movf	sw_flag_clear@port,w,c
  2650                           
  2651                           ; Switch size 1, requested type "space"
  2652                           ; Number of cases is 3, Range of values is 0 to 2
  2653                           ; switch strategies available:
  2654                           ; Name         Instructions Cycles
  2655                           ; simple_byte           10     6 (average)
  2656                           ;	Chosen strategy is simple_byte
  2657  003D26  0A00               	xorlw	0	; case 0
  2658  003D28  B4D8               	btfsc	status,2,c
  2659  003D2A  D7E7               	goto	l5659
  2660  003D2C  0A01               	xorlw	1	; case 1
  2661  003D2E  B4D8               	btfsc	status,2,c
  2662  003D30  D7EB               	goto	l5661
  2663  003D32  0A03               	xorlw	3	; case 2
  2664  003D34  A4D8               	btfss	status,2,c
  2665  003D36  0012               	return	
  2666  003D38  D7EE               	goto	l5663
  2667  003D3A                     __end_of_sw_flag_clear:
  2668                           	opt stack 0
  2669                           tblptru	equ	0xFF8
  2670                           tblptrh	equ	0xFF7
  2671                           tblptrl	equ	0xFF6
  2672                           tablat	equ	0xFF5
  2673                           prodh	equ	0xFF4
  2674                           prodl	equ	0xFF3
  2675                           intcon	equ	0xFF2
  2676                           postinc0	equ	0xFEE
  2677                           wreg	equ	0xFE8
  2678                           indf2	equ	0xFDF
  2679                           postinc2	equ	0xFDE
  2680                           postdec2	equ	0xFDD
  2681                           fsr2h	equ	0xFDA
  2682                           fsr2l	equ	0xFD9
  2683                           status	equ	0xFD8
  2684                           
  2685 ;; *************** function _delay_set *****************
  2686 ;; Defined at:
  2687 ;;		line 349 in file "../My_header\My_header.h"
  2688 ;; Parameters:    Size  Location     Type
  2689 ;;  d               2   30[COMRAM] PTR struct Delay
  2690 ;;		 -> delay_display(3), 
  2691 ;;  value           2   32[COMRAM] unsigned int 
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;		None
  2694 ;; Return value:  Size  Location     Type
  2695 ;;		None               void
  2696 ;; Registers used:
  2697 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2698 ;; Tracked objects:
  2699 ;;		On entry : 0/0
  2700 ;;		On exit  : 0/0
  2701 ;;		Unchanged: 0/0
  2702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2703 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2706 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2707 ;;Total ram usage:        4 bytes
  2708 ;; Hardware stack levels used:    1
  2709 ;; Hardware stack levels required when called:    4
  2710 ;; This function calls:
  2711 ;;		Nothing
  2712 ;; This function is called by:
  2713 ;;		_port_loop
  2714 ;; This function uses a non-reentrant model
  2715 ;;
  2716                           
  2717                           	psect	text6
  2718  004012                     __ptext6:
  2719                           	opt stack 0
  2720  004012                     _delay_set:
  2721                           	opt stack 24
  2722                           
  2723                           ;My_header\My_header.h: 350: d->cnt = value;
  2724                           
  2725                           ;incstack = 0
  2726  004012  EE20 F001          	lfsr	2,1
  2727  004016  501F               	movf	delay_set@d,w,c
  2728  004018  26D9               	addwf	fsr2l,f,c
  2729  00401A  5020               	movf	delay_set@d+1,w,c
  2730  00401C  22DA               	addwfc	fsr2h,f,c
  2731  00401E  C021  FFDE         	movff	delay_set@value,postinc2
  2732  004022  C022  FFDD         	movff	delay_set@value+1,postdec2
  2733                           
  2734                           ;My_header\My_header.h: 351: d->flag = 0;
  2735  004026  C01F  FFD9         	movff	delay_set@d,fsr2l
  2736  00402A  C020  FFDA         	movff	delay_set@d+1,fsr2h
  2737  00402E  0E00               	movlw	0
  2738  004030  6EDF               	movwf	indf2,c
  2739  004032  0012               	return		;funcret
  2740  004034                     __end_of_delay_set:
  2741                           	opt stack 0
  2742                           tblptru	equ	0xFF8
  2743                           tblptrh	equ	0xFF7
  2744                           tblptrl	equ	0xFF6
  2745                           tablat	equ	0xFF5
  2746                           prodh	equ	0xFF4
  2747                           prodl	equ	0xFF3
  2748                           intcon	equ	0xFF2
  2749                           postinc0	equ	0xFEE
  2750                           wreg	equ	0xFE8
  2751                           indf2	equ	0xFDF
  2752                           postinc2	equ	0xFDE
  2753                           postdec2	equ	0xFDD
  2754                           fsr2h	equ	0xFDA
  2755                           fsr2l	equ	0xFD9
  2756                           status	equ	0xFD8
  2757                           
  2758 ;; *************** function _LED *****************
  2759 ;; Defined at:
  2760 ;;		line 76 in file "tasks.h"
  2761 ;; Parameters:    Size  Location     Type
  2762 ;;  b               1    wreg     unsigned char 
  2763 ;;  value           1   30[COMRAM] unsigned char 
  2764 ;; Auto vars:     Size  Location     Type
  2765 ;;  b               1   31[COMRAM] unsigned char 
  2766 ;; Return value:  Size  Location     Type
  2767 ;;		None               void
  2768 ;; Registers used:
  2769 ;;		wreg, status,2, status,0
  2770 ;; Tracked objects:
  2771 ;;		On entry : 0/0
  2772 ;;		On exit  : 0/0
  2773 ;;		Unchanged: 0/0
  2774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2775 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2776 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2778 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2779 ;;Total ram usage:        2 bytes
  2780 ;; Hardware stack levels used:    1
  2781 ;; Hardware stack levels required when called:    4
  2782 ;; This function calls:
  2783 ;;		Nothing
  2784 ;; This function is called by:
  2785 ;;		_port_loop
  2786 ;;		_sleep_loop
  2787 ;;		_main
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           	psect	text7
  2792  003D7E                     __ptext7:
  2793                           	opt stack 0
  2794  003D7E                     _LED:
  2795                           	opt stack 25
  2796                           
  2797                           ;incstack = 0
  2798                           ;LED@b stored from wreg
  2799  003D7E  6E20               	movwf	LED@b,c
  2800                           
  2801                           ;tasks.h: 77: switch (b) {
  2802  003D80  D012               	goto	l5633
  2803  003D82                     l621:
  2804                           
  2805                           ;tasks.h: 79: LATC2 = value;
  2806  003D82  A01F               	btfss	LED@value,0,c
  2807  003D84  D002               	goto	u6030
  2808  003D86  848B               	bsf	3979,2,c	;volatile
  2809  003D88  0012               	return	
  2810  003D8A                     u6030:
  2811  003D8A  948B               	bcf	3979,2,c	;volatile
  2812                           
  2813                           ;tasks.h: 80: break;
  2814  003D8C  0012               	return	
  2815  003D8E                     l623:
  2816                           
  2817                           ;tasks.h: 82: LATB6 = value;
  2818  003D8E  A01F               	btfss	LED@value,0,c
  2819  003D90  D002               	goto	u6050
  2820  003D92  8C8A               	bsf	3978,6,c	;volatile
  2821  003D94  0012               	return	
  2822  003D96                     u6050:
  2823  003D96  9C8A               	bcf	3978,6,c	;volatile
  2824                           
  2825                           ;tasks.h: 83: break;
  2826  003D98  0012               	return	
  2827  003D9A                     l624:
  2828                           
  2829                           ;tasks.h: 85: LATB7 = value;
  2830  003D9A  A01F               	btfss	LED@value,0,c
  2831  003D9C  D002               	goto	u6070
  2832  003D9E  8E8A               	bsf	3978,7,c	;volatile
  2833  003DA0  0012               	return	
  2834  003DA2                     u6070:
  2835  003DA2  9E8A               	bcf	3978,7,c	;volatile
  2836                           
  2837                           ;tasks.h: 87: }
  2838                           
  2839                           ;tasks.h: 86: break;
  2840  003DA4  0012               	return	
  2841  003DA6                     l5633:
  2842  003DA6  5020               	movf	LED@b,w,c
  2843                           
  2844                           ; Switch size 1, requested type "space"
  2845                           ; Number of cases is 3, Range of values is 0 to 2
  2846                           ; switch strategies available:
  2847                           ; Name         Instructions Cycles
  2848                           ; simple_byte           10     6 (average)
  2849                           ;	Chosen strategy is simple_byte
  2850  003DA8  0A00               	xorlw	0	; case 0
  2851  003DAA  B4D8               	btfsc	status,2,c
  2852  003DAC  D7EA               	goto	l621
  2853  003DAE  0A01               	xorlw	1	; case 1
  2854  003DB0  B4D8               	btfsc	status,2,c
  2855  003DB2  D7ED               	goto	l623
  2856  003DB4  0A03               	xorlw	3	; case 2
  2857  003DB6  A4D8               	btfss	status,2,c
  2858  003DB8  0012               	return	
  2859  003DBA  D7EF               	goto	l624
  2860  003DBC                     __end_of_LED:
  2861                           	opt stack 0
  2862                           tblptru	equ	0xFF8
  2863                           tblptrh	equ	0xFF7
  2864                           tblptrl	equ	0xFF6
  2865                           tablat	equ	0xFF5
  2866                           prodh	equ	0xFF4
  2867                           prodl	equ	0xFF3
  2868                           intcon	equ	0xFF2
  2869                           postinc0	equ	0xFEE
  2870                           wreg	equ	0xFE8
  2871                           indf2	equ	0xFDF
  2872                           postinc2	equ	0xFDE
  2873                           postdec2	equ	0xFDD
  2874                           fsr2h	equ	0xFDA
  2875                           fsr2l	equ	0xFD9
  2876                           status	equ	0xFD8
  2877                           
  2878 ;; *************** function _display_LCD *****************
  2879 ;; Defined at:
  2880 ;;		line 188 in file "tasks.h"
  2881 ;; Parameters:    Size  Location     Type
  2882 ;;		None
  2883 ;; Auto vars:     Size  Location     Type
  2884 ;;  str            10    0[BANK1 ] unsigned char [10]
  2885 ;; Return value:  Size  Location     Type
  2886 ;;		None               void
  2887 ;; Registers used:
  2888 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2889 ;; Tracked objects:
  2890 ;;		On entry : 0/0
  2891 ;;		On exit  : 0/0
  2892 ;;		Unchanged: 0/0
  2893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2895 ;;      Locals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2897 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2898 ;;Total ram usage:       14 bytes
  2899 ;; Hardware stack levels used:    1
  2900 ;; Hardware stack levels required when called:    9
  2901 ;; This function calls:
  2902 ;;		_I2C_LCD_Clear
  2903 ;;		_I2C_LCD_Putc
  2904 ;;		_I2C_LCD_Puts
  2905 ;;		_I2C_LCD_SetCursor
  2906 ;;		___lldiv
  2907 ;;		___llmod
  2908 ;;		___lwdiv
  2909 ;;		___lwmod
  2910 ;;		_display_port
  2911 ;;		_display_time_0802
  2912 ;;		_my_utoa
  2913 ;; This function is called by:
  2914 ;;		_normal_mode_loop
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           
  2918                           	psect	text8
  2919  000F88                     __ptext8:
  2920                           	opt stack 0
  2921  000F88                     _display_LCD:
  2922                           	opt stack 20
  2923                           
  2924                           ;tasks.h: 189: I2C_LCD_Clear();
  2925                           
  2926                           ;incstack = 0
  2927  000F88  EC6B  F020         	call	_I2C_LCD_Clear	;wreg free
  2928                           
  2929                           ;tasks.h: 190: switch (print_content) {
  2930  000F8C  D249               	goto	l5869
  2931  000F8E                     l5781:
  2932                           
  2933                           ;tasks.h: 192: I2C_LCD_SetCursor(0, 0);
  2934  000F8E  0E00               	movlw	0
  2935  000F90  0100               	movlb	0	; () banked
  2936  000F92  6FC9               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  2937  000F94  0E00               	movlw	0
  2938  000F96  EC7D  F01F         	call	_I2C_LCD_SetCursor
  2939                           
  2940                           ;tasks.h: 193: I2C_LCD_Puts("Charge");
  2941  000F9A  0E56               	movlw	low STR_8
  2942  000F9C  0100               	movlb	0	; () banked
  2943  000F9E  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  2944  000FA0  0E0F               	movlw	high STR_8
  2945  000FA2  0100               	movlb	0	; () banked
  2946  000FA4  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  2947  000FA6  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  2948                           
  2949                           ;tasks.h: 194: I2C_LCD_SetCursor(0, 1);
  2950  000FAA  0E01               	movlw	1
  2951  000FAC  0100               	movlb	0	; () banked
  2952  000FAE  6FC9               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  2953  000FB0  0E00               	movlw	0
  2954  000FB2  EC7D  F01F         	call	_I2C_LCD_SetCursor
  2955                           
  2956                           ;tasks.h: 195: I2C_LCD_Puts("Station");
  2957  000FB6  0E40               	movlw	low STR_9
  2958  000FB8  0100               	movlb	0	; () banked
  2959  000FBA  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  2960  000FBC  0E0F               	movlw	high STR_9
  2961  000FBE  0100               	movlb	0	; () banked
  2962  000FC0  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  2963  000FC2  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  2964                           
  2965                           ;tasks.h: 196: break;
  2966  000FC6  0012               	return	
  2967  000FC8                     l5787:
  2968                           
  2969                           ;tasks.h: 198: display_time_0802(&caltime_now, &epoch_now);
  2970  000FC8  0EAC               	movlw	low _caltime_now
  2971  000FCA  0100               	movlb	0	; () banked
  2972  000FCC  6FF5               	movwf	display_time_0802@ct& (0+255),b
  2973  000FCE  0E00               	movlw	high _caltime_now
  2974  000FD0  0100               	movlb	0	; () banked
  2975  000FD2  6FF6               	movwf	(display_time_0802@ct+1)& (0+255),b
  2976  000FD4  0EC3               	movlw	low _epoch_now
  2977  000FD6  0100               	movlb	0	; () banked
  2978  000FD8  6FF7               	movwf	display_time_0802@ep& (0+255),b
  2979  000FDA  0E00               	movlw	high _epoch_now
  2980  000FDC  0100               	movlb	0	; () banked
  2981  000FDE  6FF8               	movwf	(display_time_0802@ep+1)& (0+255),b
  2982  000FE0  EC53  F012         	call	_display_time_0802	;wreg free
  2983                           
  2984                           ;tasks.h: 199: break;
  2985  000FE4  0012               	return	
  2986  000FE6                     l5789:
  2987                           
  2988                           ;tasks.h: 201: display_port();
  2989  000FE6  EC6D  F015         	call	_display_port	;wreg free
  2990                           
  2991                           ;tasks.h: 202: I2C_LCD_SetCursor(0, 1);
  2992  000FEA  0E01               	movlw	1
  2993  000FEC  0100               	movlb	0	; () banked
  2994  000FEE  6FC9               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  2995  000FF0  0E00               	movlw	0
  2996  000FF2  EC7D  F01F         	call	_I2C_LCD_SetCursor
  2997                           
  2998                           ;tasks.h: 203: I2C_LCD_Putc((I[print_port] % 10000) / 1000 + '0');
  2999  000FF6  0E27               	movlw	39
  3000  000FF8  6E22               	movwf	___lwmod@divisor+1,c
  3001  000FFA  0E10               	movlw	16
  3002  000FFC  6E21               	movwf	___lwmod@divisor,c
  3003  000FFE  5039               	movf	_print_port,w,c
  3004  001000  0D02               	mullw	2
  3005  001002  0E23               	movlw	low _I
  3006  001004  24F3               	addwf	prodl,w,c
  3007  001006  6ED9               	movwf	fsr2l,c
  3008  001008  0E00               	movlw	high _I
  3009  00100A  20F4               	addwfc	prodh,w,c
  3010  00100C  6EDA               	movwf	fsr2h,c
  3011  00100E  CFDE F01F          	movff	postinc2,___lwmod@dividend
  3012  001012  CFDD F020          	movff	postdec2,___lwmod@dividend+1
  3013  001016  ECEC  F01D         	call	___lwmod	;wreg free
  3014  00101A  C01F  F0DA         	movff	?___lwmod,___lwdiv@dividend
  3015  00101E  C020  F0DB         	movff	?___lwmod+1,___lwdiv@dividend+1
  3016  001022  0E03               	movlw	3
  3017  001024  0100               	movlb	0	; () banked
  3018  001026  6FDD               	movwf	(___lwdiv@divisor+1)& (0+255),b
  3019  001028  0EE8               	movlw	232
  3020  00102A  6FDC               	movwf	___lwdiv@divisor& (0+255),b
  3021  00102C  ECF1  F01B         	call	___lwdiv	;wreg free
  3022  001030  0100               	movlb	0	; () banked
  3023  001032  51DA               	movf	?___lwdiv& (0+255),w,b
  3024  001034  0F30               	addlw	48
  3025  001036  ECFD  F01E         	call	_I2C_LCD_Putc
  3026                           
  3027                           ;tasks.h: 204: I2C_LCD_Putc('.');
  3028  00103A  0E2E               	movlw	46
  3029  00103C  ECFD  F01E         	call	_I2C_LCD_Putc
  3030                           
  3031                           ;tasks.h: 205: I2C_LCD_Putc((I[print_port] % 1000) / 100 + '0');
  3032  001040  0E03               	movlw	3
  3033  001042  6E22               	movwf	___lwmod@divisor+1,c
  3034  001044  0EE8               	movlw	232
  3035  001046  6E21               	movwf	___lwmod@divisor,c
  3036  001048  5039               	movf	_print_port,w,c
  3037  00104A  0D02               	mullw	2
  3038  00104C  0E23               	movlw	low _I
  3039  00104E  24F3               	addwf	prodl,w,c
  3040  001050  6ED9               	movwf	fsr2l,c
  3041  001052  0E00               	movlw	high _I
  3042  001054  20F4               	addwfc	prodh,w,c
  3043  001056  6EDA               	movwf	fsr2h,c
  3044  001058  CFDE F01F          	movff	postinc2,___lwmod@dividend
  3045  00105C  CFDD F020          	movff	postdec2,___lwmod@dividend+1
  3046  001060  ECEC  F01D         	call	___lwmod	;wreg free
  3047  001064  C01F  F0DA         	movff	?___lwmod,___lwdiv@dividend
  3048  001068  C020  F0DB         	movff	?___lwmod+1,___lwdiv@dividend+1
  3049  00106C  0E00               	movlw	0
  3050  00106E  0100               	movlb	0	; () banked
  3051  001070  6FDD               	movwf	(___lwdiv@divisor+1)& (0+255),b
  3052  001072  0E64               	movlw	100
  3053  001074  6FDC               	movwf	___lwdiv@divisor& (0+255),b
  3054  001076  ECF1  F01B         	call	___lwdiv	;wreg free
  3055  00107A  0100               	movlb	0	; () banked
  3056  00107C  51DA               	movf	?___lwdiv& (0+255),w,b
  3057  00107E  0F30               	addlw	48
  3058  001080  ECFD  F01E         	call	_I2C_LCD_Putc
  3059                           
  3060                           ;tasks.h: 206: I2C_LCD_Putc((I[print_port] % 100) / 10 + '0');
  3061  001084  0E00               	movlw	0
  3062  001086  6E22               	movwf	___lwmod@divisor+1,c
  3063  001088  0E64               	movlw	100
  3064  00108A  6E21               	movwf	___lwmod@divisor,c
  3065  00108C  5039               	movf	_print_port,w,c
  3066  00108E  0D02               	mullw	2
  3067  001090  0E23               	movlw	low _I
  3068  001092  24F3               	addwf	prodl,w,c
  3069  001094  6ED9               	movwf	fsr2l,c
  3070  001096  0E00               	movlw	high _I
  3071  001098  20F4               	addwfc	prodh,w,c
  3072  00109A  6EDA               	movwf	fsr2h,c
  3073  00109C  CFDE F01F          	movff	postinc2,___lwmod@dividend
  3074  0010A0  CFDD F020          	movff	postdec2,___lwmod@dividend+1
  3075  0010A4  ECEC  F01D         	call	___lwmod	;wreg free
  3076  0010A8  C01F  F0DA         	movff	?___lwmod,___lwdiv@dividend
  3077  0010AC  C020  F0DB         	movff	?___lwmod+1,___lwdiv@dividend+1
  3078  0010B0  0E00               	movlw	0
  3079  0010B2  0100               	movlb	0	; () banked
  3080  0010B4  6FDD               	movwf	(___lwdiv@divisor+1)& (0+255),b
  3081  0010B6  0E0A               	movlw	10
  3082  0010B8  6FDC               	movwf	___lwdiv@divisor& (0+255),b
  3083  0010BA  ECF1  F01B         	call	___lwdiv	;wreg free
  3084  0010BE  0100               	movlb	0	; () banked
  3085  0010C0  51DA               	movf	?___lwdiv& (0+255),w,b
  3086  0010C2  0F30               	addlw	48
  3087  0010C4  ECFD  F01E         	call	_I2C_LCD_Putc
  3088                           
  3089                           ;tasks.h: 207: I2C_LCD_Putc((I[print_port] % 10) / 1 + '0');
  3090  0010C8  5039               	movf	_print_port,w,c
  3091  0010CA  0D02               	mullw	2
  3092  0010CC  0E23               	movlw	low _I
  3093  0010CE  24F3               	addwf	prodl,w,c
  3094  0010D0  6ED9               	movwf	fsr2l,c
  3095  0010D2  0E00               	movlw	high _I
  3096  0010D4  20F4               	addwfc	prodh,w,c
  3097  0010D6  6EDA               	movwf	fsr2h,c
  3098  0010D8  CFDE F01F          	movff	postinc2,___lwmod@dividend
  3099  0010DC  CFDD F020          	movff	postdec2,___lwmod@dividend+1
  3100  0010E0  0E00               	movlw	0
  3101  0010E2  6E22               	movwf	___lwmod@divisor+1,c
  3102  0010E4  0E0A               	movlw	10
  3103  0010E6  6E21               	movwf	___lwmod@divisor,c
  3104  0010E8  ECEC  F01D         	call	___lwmod	;wreg free
  3105  0010EC  501F               	movf	?___lwmod,w,c
  3106  0010EE  0F30               	addlw	48
  3107  0010F0  ECFD  F01E         	call	_I2C_LCD_Putc
  3108                           
  3109                           ;tasks.h: 208: I2C_LCD_Putc('A');
  3110  0010F4  0E41               	movlw	65
  3111  0010F6  ECFD  F01E         	call	_I2C_LCD_Putc
  3112                           
  3113                           ;tasks.h: 209: break;
  3114  0010FA  0012               	return	
  3115  0010FC                     l5805:
  3116                           
  3117                           ;tasks.h: 211: display_port();
  3118  0010FC  EC6D  F015         	call	_display_port	;wreg free
  3119                           
  3120                           ;tasks.h: 212: I2C_LCD_SetCursor(0, 1);
  3121  001100  0E01               	movlw	1
  3122  001102  0100               	movlb	0	; () banked
  3123  001104  6FC9               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3124  001106  0E00               	movlw	0
  3125  001108  EC7D  F01F         	call	_I2C_LCD_SetCursor
  3126                           
  3127                           ;tasks.h: 213: uint8_t str[10];
  3128                           ;tasks.h: 214: my_utoa(str, S[print_port], 5);
  3129  00110C  0E00               	movlw	low display_LCD@str
  3130  00110E  0100               	movlb	0	; () banked
  3131  001110  6FE1               	movwf	my_utoa@str& (0+255),b
  3132  001112  0E01               	movlw	high display_LCD@str
  3133  001114  0100               	movlb	0	; () banked
  3134  001116  6FE2               	movwf	(my_utoa@str+1)& (0+255),b
  3135  001118  5039               	movf	_print_port,w,c
  3136  00111A  0D04               	mullw	4
  3137  00111C  0E60               	movlw	low _S
  3138  00111E  24F3               	addwf	prodl,w,c
  3139  001120  6ED9               	movwf	fsr2l,c
  3140  001122  0E00               	movlw	high _S
  3141  001124  20F4               	addwfc	prodh,w,c
  3142  001126  6EDA               	movwf	fsr2h,c
  3143  001128  CFDE F0E3          	movff	postinc2,my_utoa@value
  3144  00112C  CFDD F0E4          	movff	postdec2,my_utoa@value+1
  3145  001130  0E05               	movlw	5
  3146  001132  0100               	movlb	0	; () banked
  3147  001134  6FE5               	movwf	my_utoa@digits& (0+255),b
  3148  001136  ECAE  F01A         	call	_my_utoa	;wreg free
  3149                           
  3150                           ;tasks.h: 215: I2C_LCD_Puts(str);
  3151  00113A  0E00               	movlw	low display_LCD@str
  3152  00113C  0100               	movlb	0	; () banked
  3153  00113E  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  3154  001140  0E01               	movlw	high display_LCD@str
  3155  001142  0100               	movlb	0	; () banked
  3156  001144  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3157  001146  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  3158                           
  3159                           ;tasks.h: 216: I2C_LCD_Puts("mAh");
  3160  00114A  0E7F               	movlw	low STR_10
  3161  00114C  0100               	movlb	0	; () banked
  3162  00114E  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  3163  001150  0E0F               	movlw	high STR_10
  3164  001152  0100               	movlb	0	; () banked
  3165  001154  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3166  001156  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  3167                           
  3168                           ;tasks.h: 217: break;
  3169  00115A  0012               	return	
  3170  00115C                     l5815:
  3171                           
  3172                           ;tasks.h: 219: display_port();
  3173  00115C  EC6D  F015         	call	_display_port	;wreg free
  3174                           
  3175                           ;tasks.h: 220: uint8_t str[10];
  3176                           ;tasks.h: 221: I2C_LCD_SetCursor(6, 0);
  3177  001160  0E00               	movlw	0
  3178  001162  0100               	movlb	0	; () banked
  3179  001164  6FC9               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3180  001166  0E06               	movlw	6
  3181  001168  EC7D  F01F         	call	_I2C_LCD_SetCursor
  3182                           
  3183                           ;tasks.h: 222: my_utoa(str, charge_time[print_port] / 3600 / 24, 2);
  3184  00116C  0E10               	movlw	16
  3185  00116E  0100               	movlb	0	; () banked
  3186  001170  6FCB               	movwf	___lldiv@divisor& (0+255),b
  3187  001172  0E0E               	movlw	14
  3188  001174  6FCC               	movwf	(___lldiv@divisor+1)& (0+255),b
  3189  001176  0E00               	movlw	0
  3190  001178  6FCD               	movwf	(___lldiv@divisor+2)& (0+255),b
  3191  00117A  0E00               	movlw	0
  3192  00117C  6FCE               	movwf	(___lldiv@divisor+3)& (0+255),b
  3193  00117E  5039               	movf	_print_port,w,c
  3194  001180  0D04               	mullw	4
  3195  001182  0E6C               	movlw	low _charge_time
  3196  001184  24F3               	addwf	prodl,w,c
  3197  001186  6ED9               	movwf	fsr2l,c
  3198  001188  0E00               	movlw	high _charge_time
  3199  00118A  20F4               	addwfc	prodh,w,c
  3200  00118C  6EDA               	movwf	fsr2h,c
  3201  00118E  CFDE F0C7          	movff	postinc2,___lldiv@dividend
  3202  001192  CFDE F0C8          	movff	postinc2,___lldiv@dividend+1
  3203  001196  CFDE F0C9          	movff	postinc2,___lldiv@dividend+2
  3204  00119A  CFDE F0CA          	movff	postinc2,___lldiv@dividend+3
  3205  00119E  EC67  F017         	call	___lldiv	;wreg free
  3206  0011A2  C0C7  F10A         	movff	?___lldiv,_display_LCD$3144
  3207  0011A6  C0C8  F10B         	movff	?___lldiv+1,_display_LCD$3144+1
  3208  0011AA  C0C9  F10C         	movff	?___lldiv+2,_display_LCD$3144+2
  3209  0011AE  C0CA  F10D         	movff	?___lldiv+3,_display_LCD$3144+3
  3210                           
  3211                           ;tasks.h: 222: my_utoa(str, charge_time[print_port] / 3600 / 24, 2);
  3212  0011B2  0E00               	movlw	low display_LCD@str
  3213  0011B4  0100               	movlb	0	; () banked
  3214  0011B6  6FE1               	movwf	my_utoa@str& (0+255),b
  3215  0011B8  0E01               	movlw	high display_LCD@str
  3216  0011BA  0100               	movlb	0	; () banked
  3217  0011BC  6FE2               	movwf	(my_utoa@str+1)& (0+255),b
  3218  0011BE  C10A  F0C7         	movff	_display_LCD$3144,___lldiv@dividend
  3219  0011C2  C10B  F0C8         	movff	_display_LCD$3144+1,___lldiv@dividend+1
  3220  0011C6  C10C  F0C9         	movff	_display_LCD$3144+2,___lldiv@dividend+2
  3221  0011CA  C10D  F0CA         	movff	_display_LCD$3144+3,___lldiv@dividend+3
  3222  0011CE  0E18               	movlw	24
  3223  0011D0  0100               	movlb	0	; () banked
  3224  0011D2  6FCB               	movwf	___lldiv@divisor& (0+255),b
  3225  0011D4  0E00               	movlw	0
  3226  0011D6  6FCC               	movwf	(___lldiv@divisor+1)& (0+255),b
  3227  0011D8  0E00               	movlw	0
  3228  0011DA  6FCD               	movwf	(___lldiv@divisor+2)& (0+255),b
  3229  0011DC  0E00               	movlw	0
  3230  0011DE  6FCE               	movwf	(___lldiv@divisor+3)& (0+255),b
  3231  0011E0  EC67  F017         	call	___lldiv	;wreg free
  3232  0011E4  C0C7  F0E3         	movff	?___lldiv,my_utoa@value
  3233  0011E8  C0C8  F0E4         	movff	?___lldiv+1,my_utoa@value+1
  3234  0011EC  0E02               	movlw	2
  3235  0011EE  0100               	movlb	0	; () banked
  3236  0011F0  6FE5               	movwf	my_utoa@digits& (0+255),b
  3237  0011F2  ECAE  F01A         	call	_my_utoa	;wreg free
  3238                           
  3239                           ;tasks.h: 223: I2C_LCD_Puts(str);
  3240  0011F6  0E00               	movlw	low display_LCD@str
  3241  0011F8  0100               	movlb	0	; () banked
  3242  0011FA  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  3243  0011FC  0E01               	movlw	high display_LCD@str
  3244  0011FE  0100               	movlb	0	; () banked
  3245  001200  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3246  001202  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  3247                           
  3248                           ;tasks.h: 224: I2C_LCD_SetCursor(0, 1);
  3249  001206  0E01               	movlw	1
  3250  001208  0100               	movlb	0	; () banked
  3251  00120A  6FC9               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3252  00120C  0E00               	movlw	0
  3253  00120E  EC7D  F01F         	call	_I2C_LCD_SetCursor
  3254                           
  3255                           ;tasks.h: 225: my_utoa(str, (charge_time[print_port] / 3600) % 24, 2);
  3256  001212  0E00               	movlw	low display_LCD@str
  3257  001214  0100               	movlb	0	; () banked
  3258  001216  6FE1               	movwf	my_utoa@str& (0+255),b
  3259  001218  0E01               	movlw	high display_LCD@str
  3260  00121A  0100               	movlb	0	; () banked
  3261  00121C  6FE2               	movwf	(my_utoa@str+1)& (0+255),b
  3262  00121E  0E10               	movlw	16
  3263  001220  0100               	movlb	0	; () banked
  3264  001222  6FCB               	movwf	___lldiv@divisor& (0+255),b
  3265  001224  0E0E               	movlw	14
  3266  001226  6FCC               	movwf	(___lldiv@divisor+1)& (0+255),b
  3267  001228  0E00               	movlw	0
  3268  00122A  6FCD               	movwf	(___lldiv@divisor+2)& (0+255),b
  3269  00122C  0E00               	movlw	0
  3270  00122E  6FCE               	movwf	(___lldiv@divisor+3)& (0+255),b
  3271  001230  5039               	movf	_print_port,w,c
  3272  001232  0D04               	mullw	4
  3273  001234  0E6C               	movlw	low _charge_time
  3274  001236  24F3               	addwf	prodl,w,c
  3275  001238  6ED9               	movwf	fsr2l,c
  3276  00123A  0E00               	movlw	high _charge_time
  3277  00123C  20F4               	addwfc	prodh,w,c
  3278  00123E  6EDA               	movwf	fsr2h,c
  3279  001240  CFDE F0C7          	movff	postinc2,___lldiv@dividend
  3280  001244  CFDE F0C8          	movff	postinc2,___lldiv@dividend+1
  3281  001248  CFDE F0C9          	movff	postinc2,___lldiv@dividend+2
  3282  00124C  CFDE F0CA          	movff	postinc2,___lldiv@dividend+3
  3283  001250  EC67  F017         	call	___lldiv	;wreg free
  3284  001254  C0C7  F0D4         	movff	?___lldiv,___llmod@dividend
  3285  001258  C0C8  F0D5         	movff	?___lldiv+1,___llmod@dividend+1
  3286  00125C  C0C9  F0D6         	movff	?___lldiv+2,___llmod@dividend+2
  3287  001260  C0CA  F0D7         	movff	?___lldiv+3,___llmod@dividend+3
  3288  001264  0E18               	movlw	24
  3289  001266  0100               	movlb	0	; () banked
  3290  001268  6FD8               	movwf	___llmod@divisor& (0+255),b
  3291  00126A  0E00               	movlw	0
  3292  00126C  6FD9               	movwf	(___llmod@divisor+1)& (0+255),b
  3293  00126E  0E00               	movlw	0
  3294  001270  6FDA               	movwf	(___llmod@divisor+2)& (0+255),b
  3295  001272  0E00               	movlw	0
  3296  001274  6FDB               	movwf	(___llmod@divisor+3)& (0+255),b
  3297  001276  EC1E  F01A         	call	___llmod	;wreg free
  3298  00127A  C0D4  F0E3         	movff	?___llmod,my_utoa@value
  3299  00127E  C0D5  F0E4         	movff	?___llmod+1,my_utoa@value+1
  3300  001282  0E02               	movlw	2
  3301  001284  0100               	movlb	0	; () banked
  3302  001286  6FE5               	movwf	my_utoa@digits& (0+255),b
  3303  001288  ECAE  F01A         	call	_my_utoa	;wreg free
  3304                           
  3305                           ;tasks.h: 226: I2C_LCD_Puts(str);
  3306  00128C  0E00               	movlw	low display_LCD@str
  3307  00128E  0100               	movlb	0	; () banked
  3308  001290  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  3309  001292  0E01               	movlw	high display_LCD@str
  3310  001294  0100               	movlb	0	; () banked
  3311  001296  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3312  001298  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  3313                           
  3314                           ;tasks.h: 227: I2C_LCD_Putc(':');
  3315  00129C  0E3A               	movlw	58
  3316  00129E  ECFD  F01E         	call	_I2C_LCD_Putc
  3317                           
  3318                           ;tasks.h: 228: my_utoa(str, (charge_time[print_port] / 60) % 60, 2);
  3319  0012A2  0E00               	movlw	low display_LCD@str
  3320  0012A4  0100               	movlb	0	; () banked
  3321  0012A6  6FE1               	movwf	my_utoa@str& (0+255),b
  3322  0012A8  0E01               	movlw	high display_LCD@str
  3323  0012AA  0100               	movlb	0	; () banked
  3324  0012AC  6FE2               	movwf	(my_utoa@str+1)& (0+255),b
  3325  0012AE  0E3C               	movlw	60
  3326  0012B0  0100               	movlb	0	; () banked
  3327  0012B2  6FCB               	movwf	___lldiv@divisor& (0+255),b
  3328  0012B4  0E00               	movlw	0
  3329  0012B6  6FCC               	movwf	(___lldiv@divisor+1)& (0+255),b
  3330  0012B8  0E00               	movlw	0
  3331  0012BA  6FCD               	movwf	(___lldiv@divisor+2)& (0+255),b
  3332  0012BC  0E00               	movlw	0
  3333  0012BE  6FCE               	movwf	(___lldiv@divisor+3)& (0+255),b
  3334  0012C0  5039               	movf	_print_port,w,c
  3335  0012C2  0D04               	mullw	4
  3336  0012C4  0E6C               	movlw	low _charge_time
  3337  0012C6  24F3               	addwf	prodl,w,c
  3338  0012C8  6ED9               	movwf	fsr2l,c
  3339  0012CA  0E00               	movlw	high _charge_time
  3340  0012CC  20F4               	addwfc	prodh,w,c
  3341  0012CE  6EDA               	movwf	fsr2h,c
  3342  0012D0  CFDE F0C7          	movff	postinc2,___lldiv@dividend
  3343  0012D4  CFDE F0C8          	movff	postinc2,___lldiv@dividend+1
  3344  0012D8  CFDE F0C9          	movff	postinc2,___lldiv@dividend+2
  3345  0012DC  CFDE F0CA          	movff	postinc2,___lldiv@dividend+3
  3346  0012E0  EC67  F017         	call	___lldiv	;wreg free
  3347  0012E4  C0C7  F0D4         	movff	?___lldiv,___llmod@dividend
  3348  0012E8  C0C8  F0D5         	movff	?___lldiv+1,___llmod@dividend+1
  3349  0012EC  C0C9  F0D6         	movff	?___lldiv+2,___llmod@dividend+2
  3350  0012F0  C0CA  F0D7         	movff	?___lldiv+3,___llmod@dividend+3
  3351  0012F4  0E3C               	movlw	60
  3352  0012F6  0100               	movlb	0	; () banked
  3353  0012F8  6FD8               	movwf	___llmod@divisor& (0+255),b
  3354  0012FA  0E00               	movlw	0
  3355  0012FC  6FD9               	movwf	(___llmod@divisor+1)& (0+255),b
  3356  0012FE  0E00               	movlw	0
  3357  001300  6FDA               	movwf	(___llmod@divisor+2)& (0+255),b
  3358  001302  0E00               	movlw	0
  3359  001304  6FDB               	movwf	(___llmod@divisor+3)& (0+255),b
  3360  001306  EC1E  F01A         	call	___llmod	;wreg free
  3361  00130A  C0D4  F0E3         	movff	?___llmod,my_utoa@value
  3362  00130E  C0D5  F0E4         	movff	?___llmod+1,my_utoa@value+1
  3363  001312  0E02               	movlw	2
  3364  001314  0100               	movlb	0	; () banked
  3365  001316  6FE5               	movwf	my_utoa@digits& (0+255),b
  3366  001318  ECAE  F01A         	call	_my_utoa	;wreg free
  3367                           
  3368                           ;tasks.h: 229: I2C_LCD_Puts(str);
  3369  00131C  0E00               	movlw	low display_LCD@str
  3370  00131E  0100               	movlb	0	; () banked
  3371  001320  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  3372  001322  0E01               	movlw	high display_LCD@str
  3373  001324  0100               	movlb	0	; () banked
  3374  001326  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3375  001328  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  3376                           
  3377                           ;tasks.h: 230: I2C_LCD_Putc('-');
  3378  00132C  0E2D               	movlw	45
  3379  00132E  ECFD  F01E         	call	_I2C_LCD_Putc
  3380                           
  3381                           ;tasks.h: 231: my_utoa(str, charge_time[print_port] % 60, 2);
  3382  001332  0E00               	movlw	low display_LCD@str
  3383  001334  0100               	movlb	0	; () banked
  3384  001336  6FE1               	movwf	my_utoa@str& (0+255),b
  3385  001338  0E01               	movlw	high display_LCD@str
  3386  00133A  0100               	movlb	0	; () banked
  3387  00133C  6FE2               	movwf	(my_utoa@str+1)& (0+255),b
  3388  00133E  5039               	movf	_print_port,w,c
  3389  001340  0D04               	mullw	4
  3390  001342  0E6C               	movlw	low _charge_time
  3391  001344  24F3               	addwf	prodl,w,c
  3392  001346  6ED9               	movwf	fsr2l,c
  3393  001348  0E00               	movlw	high _charge_time
  3394  00134A  20F4               	addwfc	prodh,w,c
  3395  00134C  6EDA               	movwf	fsr2h,c
  3396  00134E  CFDE F0D4          	movff	postinc2,___llmod@dividend
  3397  001352  CFDE F0D5          	movff	postinc2,___llmod@dividend+1
  3398  001356  CFDE F0D6          	movff	postinc2,___llmod@dividend+2
  3399  00135A  CFDE F0D7          	movff	postinc2,___llmod@dividend+3
  3400  00135E  0E3C               	movlw	60
  3401  001360  0100               	movlb	0	; () banked
  3402  001362  6FD8               	movwf	___llmod@divisor& (0+255),b
  3403  001364  0E00               	movlw	0
  3404  001366  6FD9               	movwf	(___llmod@divisor+1)& (0+255),b
  3405  001368  0E00               	movlw	0
  3406  00136A  6FDA               	movwf	(___llmod@divisor+2)& (0+255),b
  3407  00136C  0E00               	movlw	0
  3408  00136E  6FDB               	movwf	(___llmod@divisor+3)& (0+255),b
  3409  001370  EC1E  F01A         	call	___llmod	;wreg free
  3410  001374  C0D4  F0E3         	movff	?___llmod,my_utoa@value
  3411  001378  C0D5  F0E4         	movff	?___llmod+1,my_utoa@value+1
  3412  00137C  0E02               	movlw	2
  3413  00137E  0100               	movlb	0	; () banked
  3414  001380  6FE5               	movwf	my_utoa@digits& (0+255),b
  3415  001382  ECAE  F01A         	call	_my_utoa	;wreg free
  3416                           
  3417                           ;tasks.h: 232: I2C_LCD_Puts(str);
  3418  001386  0E00               	movlw	low display_LCD@str
  3419  001388  0100               	movlb	0	; () banked
  3420  00138A  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  3421  00138C  0E01               	movlw	high display_LCD@str
  3422  00138E  0100               	movlb	0	; () banked
  3423  001390  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3424  001392  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  3425                           
  3426                           ;tasks.h: 233: break;
  3427  001396  0012               	return	
  3428  001398                     l5843:
  3429                           
  3430                           ;tasks.h: 235: display_port();
  3431  001398  EC6D  F015         	call	_display_port	;wreg free
  3432                           
  3433                           ;tasks.h: 236: I2C_LCD_SetCursor(0, 1);
  3434  00139C  0E01               	movlw	1
  3435  00139E  0100               	movlb	0	; () banked
  3436  0013A0  6FC9               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3437  0013A2  0E00               	movlw	0
  3438  0013A4  EC7D  F01F         	call	_I2C_LCD_SetCursor
  3439                           
  3440                           ;tasks.h: 237: I2C_LCD_Puts("Reset?");
  3441  0013A8  0E48               	movlw	low STR_11
  3442  0013AA  0100               	movlb	0	; () banked
  3443  0013AC  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  3444  0013AE  0E0F               	movlw	high STR_11
  3445  0013B0  0100               	movlb	0	; () banked
  3446  0013B2  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3447  0013B4  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  3448                           
  3449                           ;tasks.h: 238: break;
  3450  0013B8  0012               	return	
  3451  0013BA                     l5849:
  3452                           
  3453                           ;tasks.h: 240: display_port();
  3454  0013BA  EC6D  F015         	call	_display_port	;wreg free
  3455                           
  3456                           ;tasks.h: 241: I2C_LCD_SetCursor(0, 1);
  3457  0013BE  0E01               	movlw	1
  3458  0013C0  0100               	movlb	0	; () banked
  3459  0013C2  6FC9               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3460  0013C4  0E00               	movlw	0
  3461  0013C6  EC7D  F01F         	call	_I2C_LCD_SetCursor
  3462                           
  3463                           ;tasks.h: 242: I2C_LCD_Puts("Reseted");
  3464  0013CA  0E38               	movlw	low STR_12
  3465  0013CC  0100               	movlb	0	; () banked
  3466  0013CE  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  3467  0013D0  0E0F               	movlw	high STR_12
  3468  0013D2  0100               	movlb	0	; () banked
  3469  0013D4  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3470  0013D6  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  3471                           
  3472                           ;tasks.h: 243: break;
  3473  0013DA  0012               	return	
  3474  0013DC                     l5855:
  3475                           
  3476                           ;tasks.h: 245: display_port();
  3477  0013DC  EC6D  F015         	call	_display_port	;wreg free
  3478                           
  3479                           ;tasks.h: 246: I2C_LCD_SetCursor(0, 1);
  3480  0013E0  0E01               	movlw	1
  3481  0013E2  0100               	movlb	0	; () banked
  3482  0013E4  6FC9               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3483  0013E6  0E00               	movlw	0
  3484  0013E8  EC7D  F01F         	call	_I2C_LCD_SetCursor
  3485                           
  3486                           ;tasks.h: 247: I2C_LCD_Puts("AlwaysON");
  3487  0013EC  0E26               	movlw	low STR_13
  3488  0013EE  0100               	movlb	0	; () banked
  3489  0013F0  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  3490  0013F2  0E0F               	movlw	high STR_13
  3491  0013F4  0100               	movlb	0	; () banked
  3492  0013F6  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3493  0013F8  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  3494                           
  3495                           ;tasks.h: 248: break;
  3496  0013FC  0012               	return	
  3497  0013FE                     l5861:
  3498                           
  3499                           ;tasks.h: 250: display_port();
  3500  0013FE  EC6D  F015         	call	_display_port	;wreg free
  3501                           
  3502                           ;tasks.h: 251: I2C_LCD_SetCursor(0, 1);
  3503  001402  0E01               	movlw	1
  3504  001404  0100               	movlb	0	; () banked
  3505  001406  6FC9               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3506  001408  0E00               	movlw	0
  3507  00140A  EC7D  F01F         	call	_I2C_LCD_SetCursor
  3508                           
  3509                           ;tasks.h: 252: I2C_LCD_Puts("AutoStop");
  3510  00140E  0E2F               	movlw	low STR_14
  3511  001410  0100               	movlb	0	; () banked
  3512  001412  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  3513  001414  0E0F               	movlw	high STR_14
  3514  001416  0100               	movlb	0	; () banked
  3515  001418  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3516  00141A  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  3517                           
  3518                           ;tasks.h: 255: }
  3519                           
  3520                           ;tasks.h: 254: break;
  3521  00141E  0012               	return	
  3522  001420                     l5869:
  3523  001420  0100               	movlb	0	; () banked
  3524  001422  51A2               	movf	_print_content& (0+255),w,b
  3525                           
  3526                           ; Switch size 1, requested type "space"
  3527                           ; Number of cases is 9, Range of values is 0 to 8
  3528                           ; switch strategies available:
  3529                           ; Name         Instructions Cycles
  3530                           ; simple_byte           28    15 (average)
  3531                           ;	Chosen strategy is simple_byte
  3532  001424  0A00               	xorlw	0	; case 0
  3533  001426  B4D8               	btfsc	status,2,c
  3534  001428  D5B2               	goto	l5781
  3535  00142A  0A01               	xorlw	1	; case 1
  3536  00142C  B4D8               	btfsc	status,2,c
  3537  00142E  D5CC               	goto	l5787
  3538  001430  0A03               	xorlw	3	; case 2
  3539  001432  B4D8               	btfsc	status,2,c
  3540  001434  D5D8               	goto	l5789
  3541  001436  0A01               	xorlw	1	; case 3
  3542  001438  B4D8               	btfsc	status,2,c
  3543  00143A  D660               	goto	l5805
  3544  00143C  0A07               	xorlw	7	; case 4
  3545  00143E  B4D8               	btfsc	status,2,c
  3546  001440  D68D               	goto	l5815
  3547  001442  0A01               	xorlw	1	; case 5
  3548  001444  B4D8               	btfsc	status,2,c
  3549  001446  D7A8               	goto	l5843
  3550  001448  0A03               	xorlw	3	; case 6
  3551  00144A  B4D8               	btfsc	status,2,c
  3552  00144C  D7B6               	goto	l5849
  3553  00144E  0A01               	xorlw	1	; case 7
  3554  001450  B4D8               	btfsc	status,2,c
  3555  001452  D7C4               	goto	l5855
  3556  001454  0A0F               	xorlw	15	; case 8
  3557  001456  A4D8               	btfss	status,2,c
  3558  001458  0012               	return	
  3559  00145A  D7D1               	goto	l5861
  3560  00145C                     __end_of_display_LCD:
  3561                           	opt stack 0
  3562                           tblptru	equ	0xFF8
  3563                           tblptrh	equ	0xFF7
  3564                           tblptrl	equ	0xFF6
  3565                           tablat	equ	0xFF5
  3566                           prodh	equ	0xFF4
  3567                           prodl	equ	0xFF3
  3568                           intcon	equ	0xFF2
  3569                           postinc0	equ	0xFEE
  3570                           wreg	equ	0xFE8
  3571                           indf2	equ	0xFDF
  3572                           postinc2	equ	0xFDE
  3573                           postdec2	equ	0xFDD
  3574                           fsr2h	equ	0xFDA
  3575                           fsr2l	equ	0xFD9
  3576                           status	equ	0xFD8
  3577                           
  3578 ;; *************** function _display_time_0802 *****************
  3579 ;; Defined at:
  3580 ;;		line 258 in file "../My_header\My_RTCC.h"
  3581 ;; Parameters:    Size  Location     Type
  3582 ;;  ct              2   46[BANK0 ] PTR struct .
  3583 ;;		 -> caltime_now(7), 
  3584 ;;  ep              2   48[BANK0 ] PTR unsigned long 
  3585 ;;		 -> epoch_now(4), 
  3586 ;; Auto vars:     Size  Location     Type
  3587 ;;		None
  3588 ;; Return value:  Size  Location     Type
  3589 ;;		None               void
  3590 ;; Registers used:
  3591 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3592 ;; Tracked objects:
  3593 ;;		On entry : 0/0
  3594 ;;		On exit  : 0/0
  3595 ;;		Unchanged: 0/0
  3596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3597 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3599 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3600 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3601 ;;Total ram usage:        5 bytes
  3602 ;; Hardware stack levels used:    1
  3603 ;; Hardware stack levels required when called:    8
  3604 ;; This function calls:
  3605 ;;		_I2C_LCD_Putc
  3606 ;;		_I2C_LCD_Puts
  3607 ;;		_I2C_LCD_SetCursor
  3608 ;;		_RTCC_from_RTCC
  3609 ;;		_display_dec
  3610 ;; This function is called by:
  3611 ;;		_display_LCD
  3612 ;; This function uses a non-reentrant model
  3613 ;;
  3614                           
  3615                           	psect	text9
  3616  0024A6                     __ptext9:
  3617                           	opt stack 0
  3618  0024A6                     _display_time_0802:
  3619                           	opt stack 20
  3620                           
  3621                           ;My_header\My_RTCC.h: 259: RTCC_from_RTCC(ct, ep);
  3622                           
  3623                           ;incstack = 0
  3624  0024A6  C0F5  F0EF         	movff	display_time_0802@ct,RTCC_from_RTCC@ct
  3625  0024AA  C0F6  F0F0         	movff	display_time_0802@ct+1,RTCC_from_RTCC@ct+1
  3626  0024AE  C0F7  F0F1         	movff	display_time_0802@ep,RTCC_from_RTCC@ep
  3627  0024B2  C0F8  F0F2         	movff	display_time_0802@ep+1,RTCC_from_RTCC@ep+1
  3628  0024B6  EC3C  F020         	call	_RTCC_from_RTCC	;wreg free
  3629                           
  3630                           ;My_header\My_RTCC.h: 261: I2C_LCD_SetCursor(0, 0);
  3631  0024BA  0E00               	movlw	0
  3632  0024BC  0100               	movlb	0	; () banked
  3633  0024BE  6FC9               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3634  0024C0  0E00               	movlw	0
  3635  0024C2  EC7D  F01F         	call	_I2C_LCD_SetCursor
  3636                           
  3637                           ;My_header\My_RTCC.h: 262: display_dec(ct->YY, edit_flag.flag.YY);
  3638  0024C6  0E00               	movlw	0
  3639  0024C8  BBA0               	btfsc	_edit_flag& (0+255),5,b
  3640  0024CA  0E01               	movlw	1
  3641  0024CC  0100               	movlb	0	; () banked
  3642  0024CE  6FE9               	movwf	display_dec@edit& (0+255),b
  3643  0024D0  0100               	movlb	0	; () banked
  3644  0024D2  EE20 F006          	lfsr	2,6
  3645  0024D6  51F5               	movf	display_time_0802@ct& (0+255),w,b
  3646  0024D8  26D9               	addwf	fsr2l,f,c
  3647  0024DA  51F6               	movf	(display_time_0802@ct+1)& (0+255),w,b
  3648  0024DC  22DA               	addwfc	fsr2h,f,c
  3649  0024DE  50DF               	movf	indf2,w,c
  3650  0024E0  ECF5  F01C         	call	_display_dec
  3651                           
  3652                           ;My_header\My_RTCC.h: 263: I2C_LCD_Putc('/');
  3653  0024E4  0E2F               	movlw	47
  3654  0024E6  ECFD  F01E         	call	_I2C_LCD_Putc
  3655                           
  3656                           ;My_header\My_RTCC.h: 264: display_dec(ct->MM, edit_flag.flag.MM);
  3657  0024EA  0E00               	movlw	0
  3658  0024EC  B9A0               	btfsc	_edit_flag& (0+255),4,b
  3659  0024EE  0E01               	movlw	1
  3660  0024F0  0100               	movlb	0	; () banked
  3661  0024F2  6FE9               	movwf	display_dec@edit& (0+255),b
  3662  0024F4  0100               	movlb	0	; () banked
  3663  0024F6  EE20 F005          	lfsr	2,5
  3664  0024FA  51F5               	movf	display_time_0802@ct& (0+255),w,b
  3665  0024FC  26D9               	addwf	fsr2l,f,c
  3666  0024FE  51F6               	movf	(display_time_0802@ct+1)& (0+255),w,b
  3667  002500  22DA               	addwfc	fsr2h,f,c
  3668  002502  50DF               	movf	indf2,w,c
  3669  002504  ECF5  F01C         	call	_display_dec
  3670                           
  3671                           ;My_header\My_RTCC.h: 265: I2C_LCD_Putc('/');
  3672  002508  0E2F               	movlw	47
  3673  00250A  ECFD  F01E         	call	_I2C_LCD_Putc
  3674                           
  3675                           ;My_header\My_RTCC.h: 266: display_dec(ct->DD, edit_flag.flag.DD);
  3676  00250E  0E00               	movlw	0
  3677  002510  B7A0               	btfsc	_edit_flag& (0+255),3,b
  3678  002512  0E01               	movlw	1
  3679  002514  0100               	movlb	0	; () banked
  3680  002516  6FE9               	movwf	display_dec@edit& (0+255),b
  3681  002518  0100               	movlb	0	; () banked
  3682  00251A  EE20 F004          	lfsr	2,4
  3683  00251E  51F5               	movf	display_time_0802@ct& (0+255),w,b
  3684  002520  26D9               	addwf	fsr2l,f,c
  3685  002522  51F6               	movf	(display_time_0802@ct+1)& (0+255),w,b
  3686  002524  22DA               	addwfc	fsr2h,f,c
  3687  002526  50DF               	movf	indf2,w,c
  3688  002528  ECF5  F01C         	call	_display_dec
  3689                           
  3690                           ;My_header\My_RTCC.h: 267: I2C_LCD_Putc('/');
  3691  00252C  0E2F               	movlw	47
  3692  00252E  ECFD  F01E         	call	_I2C_LCD_Putc
  3693                           
  3694                           ;My_header\My_RTCC.h: 268: I2C_LCD_Puts(weekday_3char[ct->EE]);
  3695  002532  0100               	movlb	0	; () banked
  3696  002534  EE20 F003          	lfsr	2,3
  3697  002538  51F5               	movf	display_time_0802@ct& (0+255),w,b
  3698  00253A  26D9               	addwf	fsr2l,f,c
  3699  00253C  51F6               	movf	(display_time_0802@ct+1)& (0+255),w,b
  3700  00253E  22DA               	addwfc	fsr2h,f,c
  3701  002540  50DF               	movf	indf2,w,c
  3702  002542  0100               	movlb	0	; () banked
  3703  002544  6FF9               	movwf	??_display_time_0802& (0+255),b
  3704  002546  0100               	movlb	0	; () banked
  3705  002548  51F9               	movf	??_display_time_0802& (0+255),w,b
  3706  00254A  0D04               	mullw	4
  3707  00254C  0E01               	movlw	low _weekday_3char
  3708  00254E  24F3               	addwf	prodl,w,c
  3709  002550  0100               	movlb	0	; () banked
  3710  002552  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  3711  002554  0E0F               	movlw	high _weekday_3char
  3712  002556  20F4               	addwfc	prodh,w,c
  3713  002558  0100               	movlb	0	; () banked
  3714  00255A  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3715  00255C  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  3716                           
  3717                           ;My_header\My_RTCC.h: 269: I2C_LCD_SetCursor(0, 1);
  3718  002560  0E01               	movlw	1
  3719  002562  0100               	movlb	0	; () banked
  3720  002564  6FC9               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  3721  002566  0E00               	movlw	0
  3722  002568  EC7D  F01F         	call	_I2C_LCD_SetCursor
  3723                           
  3724                           ;My_header\My_RTCC.h: 270: display_dec(ct->hh, edit_flag.flag.hh);
  3725  00256C  0E00               	movlw	0
  3726  00256E  B5A0               	btfsc	_edit_flag& (0+255),2,b
  3727  002570  0E01               	movlw	1
  3728  002572  0100               	movlb	0	; () banked
  3729  002574  6FE9               	movwf	display_dec@edit& (0+255),b
  3730  002576  0100               	movlb	0	; () banked
  3731  002578  EE20 F002          	lfsr	2,2
  3732  00257C  51F5               	movf	display_time_0802@ct& (0+255),w,b
  3733  00257E  26D9               	addwf	fsr2l,f,c
  3734  002580  51F6               	movf	(display_time_0802@ct+1)& (0+255),w,b
  3735  002582  22DA               	addwfc	fsr2h,f,c
  3736  002584  50DF               	movf	indf2,w,c
  3737  002586  ECF5  F01C         	call	_display_dec
  3738                           
  3739                           ;My_header\My_RTCC.h: 271: if (colon) I2C_LCD_Putc(':');
  3740  00258A  0100               	movlb	0	; () banked
  3741  00258C  519F               	movf	_colon& (0+255),w,b
  3742  00258E  B4D8               	btfsc	status,2,c
  3743  002590  D004               	goto	l5491
  3744                           
  3745                           ; BSR set to: 0
  3746  002592  0E3A               	movlw	58
  3747  002594  ECFD  F01E         	call	_I2C_LCD_Putc
  3748  002598  D003               	goto	l5493
  3749  00259A                     l5491:
  3750                           
  3751                           ;My_header\My_RTCC.h: 272: else I2C_LCD_Putc(' ');
  3752  00259A  0E20               	movlw	32
  3753  00259C  ECFD  F01E         	call	_I2C_LCD_Putc
  3754  0025A0                     l5493:
  3755                           
  3756                           ;My_header\My_RTCC.h: 273: display_dec(ct->mm, edit_flag.flag.mm);
  3757  0025A0  0E00               	movlw	0
  3758  0025A2  B3A0               	btfsc	_edit_flag& (0+255),1,b
  3759  0025A4  0E01               	movlw	1
  3760  0025A6  0100               	movlb	0	; () banked
  3761  0025A8  6FE9               	movwf	display_dec@edit& (0+255),b
  3762  0025AA  0100               	movlb	0	; () banked
  3763  0025AC  EE20 F001          	lfsr	2,1
  3764  0025B0  51F5               	movf	display_time_0802@ct& (0+255),w,b
  3765  0025B2  26D9               	addwf	fsr2l,f,c
  3766  0025B4  51F6               	movf	(display_time_0802@ct+1)& (0+255),w,b
  3767  0025B6  22DA               	addwfc	fsr2h,f,c
  3768  0025B8  50DF               	movf	indf2,w,c
  3769  0025BA  ECF5  F01C         	call	_display_dec
  3770                           
  3771                           ;My_header\My_RTCC.h: 274: I2C_LCD_Putc('-');
  3772  0025BE  0E2D               	movlw	45
  3773  0025C0  ECFD  F01E         	call	_I2C_LCD_Putc
  3774                           
  3775                           ;My_header\My_RTCC.h: 275: display_dec(ct->ss, edit_flag.flag.ss);
  3776  0025C4  0E00               	movlw	0
  3777  0025C6  B1A0               	btfsc	_edit_flag& (0+255),0,b
  3778  0025C8  0E01               	movlw	1
  3779  0025CA  0100               	movlb	0	; () banked
  3780  0025CC  6FE9               	movwf	display_dec@edit& (0+255),b
  3781  0025CE  C0F5  FFD9         	movff	display_time_0802@ct,fsr2l
  3782  0025D2  C0F6  FFDA         	movff	display_time_0802@ct+1,fsr2h
  3783  0025D6  50DF               	movf	indf2,w,c
  3784  0025D8  ECF5  F01C         	call	_display_dec
  3785  0025DC  0012               	return		;funcret
  3786  0025DE                     __end_of_display_time_0802:
  3787                           	opt stack 0
  3788                           tblptru	equ	0xFF8
  3789                           tblptrh	equ	0xFF7
  3790                           tblptrl	equ	0xFF6
  3791                           tablat	equ	0xFF5
  3792                           prodh	equ	0xFF4
  3793                           prodl	equ	0xFF3
  3794                           intcon	equ	0xFF2
  3795                           postinc0	equ	0xFEE
  3796                           wreg	equ	0xFE8
  3797                           indf2	equ	0xFDF
  3798                           postinc2	equ	0xFDE
  3799                           postdec2	equ	0xFDD
  3800                           fsr2h	equ	0xFDA
  3801                           fsr2l	equ	0xFD9
  3802                           status	equ	0xFD8
  3803                           
  3804 ;; *************** function _display_dec *****************
  3805 ;; Defined at:
  3806 ;;		line 251 in file "../My_header\My_RTCC.h"
  3807 ;; Parameters:    Size  Location     Type
  3808 ;;  dec             1    wreg     unsigned char 
  3809 ;;  edit            1   34[BANK0 ] unsigned char 
  3810 ;; Auto vars:     Size  Location     Type
  3811 ;;  dec             1   45[BANK0 ] unsigned char 
  3812 ;;  str            10   35[BANK0 ] unsigned char [10]
  3813 ;; Return value:  Size  Location     Type
  3814 ;;		None               void
  3815 ;; Registers used:
  3816 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3822 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3823 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3825 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3826 ;;Total ram usage:       12 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; Hardware stack levels required when called:    7
  3829 ;; This function calls:
  3830 ;;		_I2C_LCD_Puts
  3831 ;;		_my_utoa
  3832 ;; This function is called by:
  3833 ;;		_display_time_0802
  3834 ;;		_display_time_1602
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838                           	psect	text10
  3839  0039EA                     __ptext10:
  3840                           	opt stack 0
  3841  0039EA                     _display_dec:
  3842                           	opt stack 20
  3843                           
  3844                           ;incstack = 0
  3845                           ;display_dec@dec stored from wreg
  3846  0039EA  0100               	movlb	0	; () banked
  3847  0039EC  6FF4               	movwf	display_dec@dec& (0+255),b
  3848                           
  3849                           ;My_header\My_RTCC.h: 252: char str[10];
  3850                           ;My_header\My_RTCC.h: 253: my_utoa(str, dec, 2);
  3851  0039EE  0EEA               	movlw	low display_dec@str
  3852  0039F0  0100               	movlb	0	; () banked
  3853  0039F2  6FE1               	movwf	my_utoa@str& (0+255),b
  3854  0039F4  0E00               	movlw	high display_dec@str
  3855  0039F6  0100               	movlb	0	; () banked
  3856  0039F8  6FE2               	movwf	(my_utoa@str+1)& (0+255),b
  3857  0039FA  C0F4  F0E3         	movff	display_dec@dec,my_utoa@value
  3858  0039FE  0100               	movlb	0	; () banked
  3859  003A00  6BE4               	clrf	(my_utoa@value+1)& (0+255),b
  3860  003A02  0E02               	movlw	2
  3861  003A04  0100               	movlb	0	; () banked
  3862  003A06  6FE5               	movwf	my_utoa@digits& (0+255),b
  3863  003A08  ECAE  F01A         	call	_my_utoa	;wreg free
  3864                           
  3865                           ;My_header\My_RTCC.h: 254: if (edit && halfsec)I2C_LCD_Puts("  ");
  3866  003A0C  0100               	movlb	0	; () banked
  3867  003A0E  51E9               	movf	display_dec@edit& (0+255),w,b
  3868  003A10  0100               	movlb	0	; () banked
  3869  003A12  B4D8               	btfsc	status,2,c
  3870  003A14  D00D               	goto	l5353
  3871                           
  3872                           ; BSR set to: 0
  3873  003A16  0100               	movlb	0	; () banked
  3874  003A18  51A1               	movf	_halfsec& (0+255),w,b
  3875  003A1A  B4D8               	btfsc	status,2,c
  3876  003A1C  D009               	goto	l5353
  3877                           
  3878                           ; BSR set to: 0
  3879  003A1E  0E83               	movlw	low STR_1
  3880  003A20  0100               	movlb	0	; () banked
  3881  003A22  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  3882  003A24  0E0F               	movlw	high STR_1
  3883  003A26  0100               	movlb	0	; () banked
  3884  003A28  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3885  003A2A  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  3886  003A2E  0012               	return	
  3887  003A30                     l5353:
  3888                           
  3889                           ;My_header\My_RTCC.h: 255: else I2C_LCD_Puts(str);
  3890  003A30  0EEA               	movlw	low display_dec@str
  3891  003A32  0100               	movlb	0	; () banked
  3892  003A34  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  3893  003A36  0E00               	movlw	high display_dec@str
  3894  003A38  0100               	movlb	0	; () banked
  3895  003A3A  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  3896  003A3C  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  3897  003A40  0012               	return	
  3898  003A42                     __end_of_display_dec:
  3899                           	opt stack 0
  3900                           tblptru	equ	0xFF8
  3901                           tblptrh	equ	0xFF7
  3902                           tblptrl	equ	0xFF6
  3903                           tablat	equ	0xFF5
  3904                           prodh	equ	0xFF4
  3905                           prodl	equ	0xFF3
  3906                           intcon	equ	0xFF2
  3907                           postinc0	equ	0xFEE
  3908                           wreg	equ	0xFE8
  3909                           indf2	equ	0xFDF
  3910                           postinc2	equ	0xFDE
  3911                           postdec2	equ	0xFDD
  3912                           fsr2h	equ	0xFDA
  3913                           fsr2l	equ	0xFD9
  3914                           status	equ	0xFD8
  3915                           
  3916 ;; *************** function _my_utoa *****************
  3917 ;; Defined at:
  3918 ;;		line 11 in file "../My_header\My_stdlib.h"
  3919 ;; Parameters:    Size  Location     Type
  3920 ;;  str             2   26[BANK0 ] PTR unsigned char 
  3921 ;;		 -> display_LCD@str(10), display_dec@str(10), 
  3922 ;;  value           2   28[BANK0 ] unsigned int 
  3923 ;;  digits          1   30[BANK0 ] unsigned char 
  3924 ;; Auto vars:     Size  Location     Type
  3925 ;;  v               2   32[BANK0 ] unsigned int 
  3926 ;;  d               1   31[BANK0 ] unsigned char 
  3927 ;; Return value:  Size  Location     Type
  3928 ;;		None               void
  3929 ;; Registers used:
  3930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3931 ;; Tracked objects:
  3932 ;;		On entry : 0/0
  3933 ;;		On exit  : 0/0
  3934 ;;		Unchanged: 0/0
  3935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3936 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3937 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3939 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3940 ;;Total ram usage:        8 bytes
  3941 ;; Hardware stack levels used:    1
  3942 ;; Hardware stack levels required when called:    5
  3943 ;; This function calls:
  3944 ;;		___lwdiv
  3945 ;;		___lwmod
  3946 ;; This function is called by:
  3947 ;;		_display_dec
  3948 ;;		_display_LCD
  3949 ;; This function uses a non-reentrant model
  3950 ;;
  3951                           
  3952                           	psect	text11
  3953  00355C                     __ptext11:
  3954                           	opt stack 0
  3955  00355C                     _my_utoa:
  3956                           	opt stack 23
  3957                           
  3958                           ;My_header\My_stdlib.h: 12: uint16_t v;
  3959                           ;My_header\My_stdlib.h: 13: uint8_t d;
  3960                           ;My_header\My_stdlib.h: 14: while (digits--) {
  3961                           
  3962                           ;incstack = 0
  3963  00355C  D035               	goto	l5321
  3964  00355E                     l445:
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;My_header\My_stdlib.h: 15: v = value;
  3968  00355E  C0E3  F0E7         	movff	my_utoa@value,my_utoa@v
  3969  003562  C0E4  F0E8         	movff	my_utoa@value+1,my_utoa@v+1
  3970                           
  3971                           ;My_header\My_stdlib.h: 16: d = digits;
  3972  003566  C0E5  F0E6         	movff	my_utoa@digits,my_utoa@d
  3973                           
  3974                           ;My_header\My_stdlib.h: 17: while (d--) {
  3975  00356A  D00F               	goto	l5313
  3976  00356C                     l5311:
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;My_header\My_stdlib.h: 18: v /= 10;
  3980  00356C  C0E7  F0DA         	movff	my_utoa@v,___lwdiv@dividend
  3981  003570  C0E8  F0DB         	movff	my_utoa@v+1,___lwdiv@dividend+1
  3982  003574  0E00               	movlw	0
  3983  003576  0100               	movlb	0	; () banked
  3984  003578  6FDD               	movwf	(___lwdiv@divisor+1)& (0+255),b
  3985  00357A  0E0A               	movlw	10
  3986  00357C  6FDC               	movwf	___lwdiv@divisor& (0+255),b
  3987  00357E  ECF1  F01B         	call	___lwdiv	;wreg free
  3988  003582  C0DA  F0E7         	movff	?___lwdiv,my_utoa@v
  3989  003586  C0DB  F0E8         	movff	?___lwdiv+1,my_utoa@v+1
  3990  00358A                     l5313:
  3991  00358A  0100               	movlb	0	; () banked
  3992  00358C  07E6               	decf	my_utoa@d& (0+255),f,b
  3993  00358E  0100               	movlb	0	; () banked
  3994  003590  29E6               	incf	my_utoa@d& (0+255),w,b
  3995  003592  A4D8               	btfss	status,2,c
  3996  003594  D7EB               	goto	l5311
  3997                           
  3998                           ; BSR set to: 0
  3999                           ;My_header\My_stdlib.h: 19: }
  4000                           ;My_header\My_stdlib.h: 20: v %= 10;
  4001                           
  4002                           ; BSR set to: 0
  4003  003596  C0E7  F01F         	movff	my_utoa@v,___lwmod@dividend
  4004  00359A  C0E8  F020         	movff	my_utoa@v+1,___lwmod@dividend+1
  4005  00359E  0E00               	movlw	0
  4006  0035A0  6E22               	movwf	___lwmod@divisor+1,c
  4007  0035A2  0E0A               	movlw	10
  4008  0035A4  6E21               	movwf	___lwmod@divisor,c
  4009  0035A6  ECEC  F01D         	call	___lwmod	;wreg free
  4010  0035AA  C01F  F0E7         	movff	?___lwmod,my_utoa@v
  4011  0035AE  C020  F0E8         	movff	?___lwmod+1,my_utoa@v+1
  4012                           
  4013                           ;My_header\My_stdlib.h: 21: *str++ = '0' + v;
  4014  0035B2  0100               	movlb	0	; () banked
  4015  0035B4  51E7               	movf	my_utoa@v& (0+255),w,b
  4016  0035B6  0F30               	addlw	48
  4017  0035B8  C0E1  FFD9         	movff	my_utoa@str,fsr2l
  4018  0035BC  C0E2  FFDA         	movff	my_utoa@str+1,fsr2h
  4019  0035C0  6EDF               	movwf	indf2,c
  4020                           
  4021                           ; BSR set to: 0
  4022  0035C2  0100               	movlb	0	; () banked
  4023  0035C4  4BE1               	infsnz	my_utoa@str& (0+255),f,b
  4024  0035C6  2BE2               	incf	(my_utoa@str+1)& (0+255),f,b
  4025  0035C8                     l5321:
  4026  0035C8  0100               	movlb	0	; () banked
  4027  0035CA  07E5               	decf	my_utoa@digits& (0+255),f,b
  4028  0035CC  0100               	movlb	0	; () banked
  4029  0035CE  29E5               	incf	my_utoa@digits& (0+255),w,b
  4030  0035D0  A4D8               	btfss	status,2,c
  4031  0035D2  D7C5               	goto	l445
  4032                           
  4033                           ; BSR set to: 0
  4034                           ;My_header\My_stdlib.h: 22: }
  4035                           ;My_header\My_stdlib.h: 23: *str = '\0';
  4036                           
  4037                           ; BSR set to: 0
  4038  0035D4  C0E1  FFD9         	movff	my_utoa@str,fsr2l
  4039  0035D8  C0E2  FFDA         	movff	my_utoa@str+1,fsr2h
  4040  0035DC  0E00               	movlw	0
  4041  0035DE  6EDF               	movwf	indf2,c
  4042                           
  4043                           ; BSR set to: 0
  4044  0035E0  0012               	return		;funcret
  4045  0035E2                     __end_of_my_utoa:
  4046                           	opt stack 0
  4047                           tblptru	equ	0xFF8
  4048                           tblptrh	equ	0xFF7
  4049                           tblptrl	equ	0xFF6
  4050                           tablat	equ	0xFF5
  4051                           prodh	equ	0xFF4
  4052                           prodl	equ	0xFF3
  4053                           intcon	equ	0xFF2
  4054                           postinc0	equ	0xFEE
  4055                           wreg	equ	0xFE8
  4056                           indf2	equ	0xFDF
  4057                           postinc2	equ	0xFDE
  4058                           postdec2	equ	0xFDD
  4059                           fsr2h	equ	0xFDA
  4060                           fsr2l	equ	0xFD9
  4061                           status	equ	0xFD8
  4062                           
  4063 ;; *************** function ___lwmod *****************
  4064 ;; Defined at:
  4065 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  4066 ;; Parameters:    Size  Location     Type
  4067 ;;  dividend        2   30[COMRAM] unsigned int 
  4068 ;;  divisor         2   32[COMRAM] unsigned int 
  4069 ;; Auto vars:     Size  Location     Type
  4070 ;;  counter         1    0[BANK0 ] unsigned char 
  4071 ;; Return value:  Size  Location     Type
  4072 ;;                  2   30[COMRAM] unsigned int 
  4073 ;; Registers used:
  4074 ;;		wreg, status,2, status,0
  4075 ;; Tracked objects:
  4076 ;;		On entry : 0/0
  4077 ;;		On exit  : 0/0
  4078 ;;		Unchanged: 0/0
  4079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4080 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4081 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4083 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4084 ;;Total ram usage:        5 bytes
  4085 ;; Hardware stack levels used:    1
  4086 ;; Hardware stack levels required when called:    4
  4087 ;; This function calls:
  4088 ;;		Nothing
  4089 ;; This function is called by:
  4090 ;;		_my_utoa
  4091 ;;		_display_LCD
  4092 ;;		_ringbuf_put_num
  4093 ;;		_tx_sendn
  4094 ;; This function uses a non-reentrant model
  4095 ;;
  4096                           
  4097                           	psect	text12
  4098  003BD8                     __ptext12:
  4099                           	opt stack 0
  4100  003BD8                     ___lwmod:
  4101                           	opt stack 23
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;incstack = 0
  4105  003BD8  5021               	movf	___lwmod@divisor,w,c
  4106  003BDA  1022               	iorwf	___lwmod@divisor+1,w,c
  4107  003BDC  B4D8               	btfsc	status,2,c
  4108  003BDE  D01B               	goto	l1194
  4109  003BE0  0E01               	movlw	1
  4110  003BE2  0100               	movlb	0	; () banked
  4111  003BE4  6FC7               	movwf	___lwmod@counter& (0+255),b
  4112  003BE6  D005               	goto	l5157
  4113  003BE8                     l5155:
  4114                           
  4115                           ; BSR set to: 0
  4116  003BE8  90D8               	bcf	status,0,c
  4117  003BEA  3621               	rlcf	___lwmod@divisor,f,c
  4118  003BEC  3622               	rlcf	___lwmod@divisor+1,f,c
  4119  003BEE  0100               	movlb	0	; () banked
  4120  003BF0  2BC7               	incf	___lwmod@counter& (0+255),f,b
  4121  003BF2                     l5157:
  4122                           
  4123                           ; BSR set to: 0
  4124  003BF2  AE22               	btfss	___lwmod@divisor+1,7,c
  4125  003BF4  D7F9               	goto	l5155
  4126  003BF6                     l5159:
  4127                           
  4128                           ; BSR set to: 0
  4129  003BF6  5021               	movf	___lwmod@divisor,w,c
  4130  003BF8  5C1F               	subwf	___lwmod@dividend,w,c
  4131  003BFA  5022               	movf	___lwmod@divisor+1,w,c
  4132  003BFC  5820               	subwfb	___lwmod@dividend+1,w,c
  4133  003BFE  A0D8               	btfss	status,0,c
  4134  003C00  D004               	goto	l5163
  4135                           
  4136                           ; BSR set to: 0
  4137  003C02  5021               	movf	___lwmod@divisor,w,c
  4138  003C04  5E1F               	subwf	___lwmod@dividend,f,c
  4139  003C06  5022               	movf	___lwmod@divisor+1,w,c
  4140  003C08  5A20               	subwfb	___lwmod@dividend+1,f,c
  4141  003C0A                     l5163:
  4142                           
  4143                           ; BSR set to: 0
  4144  003C0A  90D8               	bcf	status,0,c
  4145  003C0C  3222               	rrcf	___lwmod@divisor+1,f,c
  4146  003C0E  3221               	rrcf	___lwmod@divisor,f,c
  4147                           
  4148                           ; BSR set to: 0
  4149  003C10  0100               	movlb	0	; () banked
  4150  003C12  2FC7               	decfsz	___lwmod@counter& (0+255),f,b
  4151  003C14  D7F0               	goto	l5159
  4152  003C16                     l1194:
  4153  003C16  C01F  F01F         	movff	___lwmod@dividend,?___lwmod
  4154  003C1A  C020  F020         	movff	___lwmod@dividend+1,?___lwmod+1
  4155  003C1E  0012               	return		;funcret
  4156  003C20                     __end_of___lwmod:
  4157                           	opt stack 0
  4158                           tblptru	equ	0xFF8
  4159                           tblptrh	equ	0xFF7
  4160                           tblptrl	equ	0xFF6
  4161                           tablat	equ	0xFF5
  4162                           prodh	equ	0xFF4
  4163                           prodl	equ	0xFF3
  4164                           intcon	equ	0xFF2
  4165                           postinc0	equ	0xFEE
  4166                           wreg	equ	0xFE8
  4167                           indf2	equ	0xFDF
  4168                           postinc2	equ	0xFDE
  4169                           postdec2	equ	0xFDD
  4170                           fsr2h	equ	0xFDA
  4171                           fsr2l	equ	0xFD9
  4172                           status	equ	0xFD8
  4173                           
  4174 ;; *************** function _I2C_LCD_Putc *****************
  4175 ;; Defined at:
  4176 ;;		line 118 in file "../My_header\My_I2C.h"
  4177 ;; Parameters:    Size  Location     Type
  4178 ;;  c               1    wreg     unsigned char 
  4179 ;; Auto vars:     Size  Location     Type
  4180 ;;  c               1    0[BANK0 ] unsigned char 
  4181 ;;  ans             1    1[BANK0 ] unsigned char 
  4182 ;; Return value:  Size  Location     Type
  4183 ;;		None               void
  4184 ;; Registers used:
  4185 ;;		wreg, status,2, status,0, cstack
  4186 ;; Tracked objects:
  4187 ;;		On entry : 0/0
  4188 ;;		On exit  : 0/0
  4189 ;;		Unchanged: 0/0
  4190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4192 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4194 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4195 ;;Total ram usage:        2 bytes
  4196 ;; Hardware stack levels used:    1
  4197 ;; Hardware stack levels required when called:    6
  4198 ;; This function calls:
  4199 ;;		_I2C_Send
  4200 ;;		_I2C_Start
  4201 ;;		_I2C_Stop
  4202 ;; This function is called by:
  4203 ;;		_display_time_0802
  4204 ;;		_display_LCD
  4205 ;;		_display_time_1602
  4206 ;; This function uses a non-reentrant model
  4207 ;;
  4208                           
  4209                           	psect	text13
  4210  003DFA                     __ptext13:
  4211                           	opt stack 0
  4212  003DFA                     _I2C_LCD_Putc:
  4213                           	opt stack 21
  4214                           
  4215                           ;incstack = 0
  4216                           ;I2C_LCD_Putc@c stored from wreg
  4217  003DFA  0100               	movlb	0	; () banked
  4218  003DFC  6FC7               	movwf	I2C_LCD_Putc@c& (0+255),b
  4219                           
  4220                           ;My_header\My_I2C.h: 119: uint8_t ans;
  4221                           ;My_header\My_I2C.h: 121: ans = I2C_Start(0x3E, 0);
  4222  003DFE  0E00               	movlw	0
  4223  003E00  6E21               	movwf	I2C_Start@rw,c
  4224  003E02  0E3E               	movlw	62
  4225  003E04  EC93  F01F         	call	_I2C_Start
  4226  003E08  0100               	movlb	0	; () banked
  4227  003E0A  6FC8               	movwf	I2C_LCD_Putc@ans& (0+255),b
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;My_header\My_I2C.h: 122: if (ans == 0) {
  4231  003E0C  0100               	movlb	0	; () banked
  4232  003E0E  51C8               	movf	I2C_LCD_Putc@ans& (0+255),w,b
  4233  003E10  0100               	movlb	0	; () banked
  4234  003E12  A4D8               	btfss	status,2,c
  4235  003E14  D007               	goto	l345
  4236                           
  4237                           ; BSR set to: 0
  4238                           ;My_header\My_I2C.h: 124: I2C_Send(0b11000000);
  4239  003E16  0EC0               	movlw	192
  4240  003E18  EC8F  F020         	call	_I2C_Send
  4241                           
  4242                           ;My_header\My_I2C.h: 125: I2C_Send(c);
  4243  003E1C  0100               	movlb	0	; () banked
  4244  003E1E  51C7               	movf	I2C_LCD_Putc@c& (0+255),w,b
  4245  003E20  EC8F  F020         	call	_I2C_Send
  4246  003E24                     l345:
  4247                           
  4248                           ;My_header\My_I2C.h: 126: }
  4249                           ;My_header\My_I2C.h: 127: I2C_Stop();
  4250  003E24  ECAE  F020         	call	_I2C_Stop	;wreg free
  4251                           
  4252                           ;My_header\My_I2C.h: 128: _delay((unsigned long)((26)*(48000000/4000000.0)));
  4253  003E28  0E68               	movlw	104
  4254  003E2A                     u6827:
  4255  003E2A  2EE8               	decfsz	wreg,f,c
  4256  003E2C  D7FE               	goto	u6827
  4257  003E2E  0012               	return		;funcret
  4258  003E30                     __end_of_I2C_LCD_Putc:
  4259                           	opt stack 0
  4260                           tblptru	equ	0xFF8
  4261                           tblptrh	equ	0xFF7
  4262                           tblptrl	equ	0xFF6
  4263                           tablat	equ	0xFF5
  4264                           prodh	equ	0xFF4
  4265                           prodl	equ	0xFF3
  4266                           intcon	equ	0xFF2
  4267                           postinc0	equ	0xFEE
  4268                           wreg	equ	0xFE8
  4269                           indf2	equ	0xFDF
  4270                           postinc2	equ	0xFDE
  4271                           postdec2	equ	0xFDD
  4272                           fsr2h	equ	0xFDA
  4273                           fsr2l	equ	0xFD9
  4274                           status	equ	0xFD8
  4275                           
  4276 ;; *************** function _display_port *****************
  4277 ;; Defined at:
  4278 ;;		line 170 in file "tasks.h"
  4279 ;; Parameters:    Size  Location     Type
  4280 ;;		None
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;		None
  4283 ;; Return value:  Size  Location     Type
  4284 ;;		None               void
  4285 ;; Registers used:
  4286 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4287 ;; Tracked objects:
  4288 ;;		On entry : 0/0
  4289 ;;		On exit  : 0/0
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4296 ;;Total ram usage:        0 bytes
  4297 ;; Hardware stack levels used:    1
  4298 ;; Hardware stack levels required when called:    8
  4299 ;; This function calls:
  4300 ;;		_I2C_LCD_Puts
  4301 ;;		_I2C_LCD_SetCursor
  4302 ;; This function is called by:
  4303 ;;		_display_LCD
  4304 ;; This function uses a non-reentrant model
  4305 ;;
  4306                           
  4307                           	psect	text14
  4308  002ADA                     __ptext14:
  4309                           	opt stack 0
  4310  002ADA                     _display_port:
  4311                           	opt stack 20
  4312                           
  4313                           ;tasks.h: 171: I2C_LCD_SetCursor(0, 0);
  4314                           
  4315                           ;incstack = 0
  4316  002ADA  0E00               	movlw	0
  4317  002ADC  0100               	movlb	0	; () banked
  4318  002ADE  6FC9               	movwf	I2C_LCD_SetCursor@row& (0+255),b
  4319  002AE0  0E00               	movlw	0
  4320  002AE2  EC7D  F01F         	call	_I2C_LCD_SetCursor
  4321                           
  4322                           ;tasks.h: 172: switch (print_port) {
  4323  002AE6  D057               	goto	l5691
  4324  002AE8                     l5671:
  4325                           
  4326                           ;tasks.h: 174: if (auto_cut_ON[print_port]) I2C_LCD_Puts("Right");
  4327  002AE8  5039               	movf	_print_port,w,c
  4328  002AEA  0D01               	mullw	1
  4329  002AEC  0E29               	movlw	low _auto_cut_ON
  4330  002AEE  24F3               	addwf	prodl,w,c
  4331  002AF0  6ED9               	movwf	fsr2l,c
  4332  002AF2  0E00               	movlw	high _auto_cut_ON
  4333  002AF4  20F4               	addwfc	prodh,w,c
  4334  002AF6  6EDA               	movwf	fsr2h,c
  4335  002AF8  50DF               	movf	indf2,w,c
  4336  002AFA  B4D8               	btfsc	status,2,c
  4337  002AFC  D009               	goto	l5675
  4338  002AFE  0E6A               	movlw	low STR_2
  4339  002B00  0100               	movlb	0	; () banked
  4340  002B02  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  4341  002B04  0E0F               	movlw	high STR_2
  4342  002B06  0100               	movlb	0	; () banked
  4343  002B08  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  4344  002B0A  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  4345  002B0E  0012               	return	
  4346  002B10                     l5675:
  4347                           
  4348                           ;tasks.h: 175: else I2C_LCD_Puts("RIGHT");
  4349  002B10  0E64               	movlw	low STR_3
  4350  002B12  0100               	movlb	0	; () banked
  4351  002B14  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  4352  002B16  0E0F               	movlw	high STR_3
  4353  002B18  0100               	movlb	0	; () banked
  4354  002B1A  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  4355  002B1C  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  4356                           
  4357                           ;tasks.h: 176: break;
  4358  002B20  0012               	return	
  4359  002B22                     l5677:
  4360                           
  4361                           ;tasks.h: 178: if (auto_cut_ON[print_port]) I2C_LCD_Puts("Center");
  4362  002B22  5039               	movf	_print_port,w,c
  4363  002B24  0D01               	mullw	1
  4364  002B26  0E29               	movlw	low _auto_cut_ON
  4365  002B28  24F3               	addwf	prodl,w,c
  4366  002B2A  6ED9               	movwf	fsr2l,c
  4367  002B2C  0E00               	movlw	high _auto_cut_ON
  4368  002B2E  20F4               	addwfc	prodh,w,c
  4369  002B30  6EDA               	movwf	fsr2h,c
  4370  002B32  50DF               	movf	indf2,w,c
  4371  002B34  B4D8               	btfsc	status,2,c
  4372  002B36  D009               	goto	l5681
  4373  002B38  0E5D               	movlw	low STR_4
  4374  002B3A  0100               	movlb	0	; () banked
  4375  002B3C  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  4376  002B3E  0E0F               	movlw	high STR_4
  4377  002B40  0100               	movlb	0	; () banked
  4378  002B42  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  4379  002B44  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  4380  002B48  0012               	return	
  4381  002B4A                     l5681:
  4382                           
  4383                           ;tasks.h: 179: else I2C_LCD_Puts("CENTER");
  4384  002B4A  0E4F               	movlw	low STR_5
  4385  002B4C  0100               	movlb	0	; () banked
  4386  002B4E  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  4387  002B50  0E0F               	movlw	high STR_5
  4388  002B52  0100               	movlb	0	; () banked
  4389  002B54  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  4390  002B56  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  4391                           
  4392                           ;tasks.h: 180: break;
  4393  002B5A  0012               	return	
  4394  002B5C                     l5683:
  4395                           
  4396                           ;tasks.h: 182: if (auto_cut_ON[print_port]) I2C_LCD_Puts("Left");
  4397  002B5C  5039               	movf	_print_port,w,c
  4398  002B5E  0D01               	mullw	1
  4399  002B60  0E29               	movlw	low _auto_cut_ON
  4400  002B62  24F3               	addwf	prodl,w,c
  4401  002B64  6ED9               	movwf	fsr2l,c
  4402  002B66  0E00               	movlw	high _auto_cut_ON
  4403  002B68  20F4               	addwfc	prodh,w,c
  4404  002B6A  6EDA               	movwf	fsr2h,c
  4405  002B6C  50DF               	movf	indf2,w,c
  4406  002B6E  B4D8               	btfsc	status,2,c
  4407  002B70  D009               	goto	l5687
  4408  002B72  0E7A               	movlw	low STR_6
  4409  002B74  0100               	movlb	0	; () banked
  4410  002B76  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  4411  002B78  0E0F               	movlw	high STR_6
  4412  002B7A  0100               	movlb	0	; () banked
  4413  002B7C  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  4414  002B7E  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  4415  002B82  0012               	return	
  4416  002B84                     l5687:
  4417                           
  4418                           ;tasks.h: 183: else I2C_LCD_Puts("LEFT");
  4419  002B84  0E75               	movlw	low STR_7
  4420  002B86  0100               	movlb	0	; () banked
  4421  002B88  6FC7               	movwf	I2C_LCD_Puts@s& (0+255),b
  4422  002B8A  0E0F               	movlw	high STR_7
  4423  002B8C  0100               	movlb	0	; () banked
  4424  002B8E  6FC8               	movwf	(I2C_LCD_Puts@s+1)& (0+255),b
  4425  002B90  EC68  F01A         	call	_I2C_LCD_Puts	;wreg free
  4426                           
  4427                           ;tasks.h: 185: }
  4428                           
  4429                           ;tasks.h: 184: break;
  4430  002B94  0012               	return	
  4431  002B96                     l5691:
  4432  002B96  5039               	movf	_print_port,w,c
  4433                           
  4434                           ; Switch size 1, requested type "space"
  4435                           ; Number of cases is 3, Range of values is 0 to 2
  4436                           ; switch strategies available:
  4437                           ; Name         Instructions Cycles
  4438                           ; simple_byte           10     6 (average)
  4439                           ;	Chosen strategy is simple_byte
  4440  002B98  0A00               	xorlw	0	; case 0
  4441  002B9A  B4D8               	btfsc	status,2,c
  4442  002B9C  D7A5               	goto	l5671
  4443  002B9E  0A01               	xorlw	1	; case 1
  4444  002BA0  B4D8               	btfsc	status,2,c
  4445  002BA2  D7BF               	goto	l5677
  4446  002BA4  0A03               	xorlw	3	; case 2
  4447  002BA6  A4D8               	btfss	status,2,c
  4448  002BA8  0012               	return	
  4449  002BAA  D7D8               	goto	l5683
  4450  002BAC                     __end_of_display_port:
  4451                           	opt stack 0
  4452                           tblptru	equ	0xFF8
  4453                           tblptrh	equ	0xFF7
  4454                           tblptrl	equ	0xFF6
  4455                           tablat	equ	0xFF5
  4456                           prodh	equ	0xFF4
  4457                           prodl	equ	0xFF3
  4458                           intcon	equ	0xFF2
  4459                           postinc0	equ	0xFEE
  4460                           wreg	equ	0xFE8
  4461                           indf2	equ	0xFDF
  4462                           postinc2	equ	0xFDE
  4463                           postdec2	equ	0xFDD
  4464                           fsr2h	equ	0xFDA
  4465                           fsr2l	equ	0xFD9
  4466                           status	equ	0xFD8
  4467                           
  4468 ;; *************** function _I2C_LCD_SetCursor *****************
  4469 ;; Defined at:
  4470 ;;		line 112 in file "../My_header\My_I2C.h"
  4471 ;; Parameters:    Size  Location     Type
  4472 ;;  col             1    wreg     unsigned char 
  4473 ;;  row             1    2[BANK0 ] unsigned char 
  4474 ;; Auto vars:     Size  Location     Type
  4475 ;;  col             1    5[BANK0 ] unsigned char 
  4476 ;;  row_offsets     2    3[BANK0 ] unsigned char [2]
  4477 ;; Return value:  Size  Location     Type
  4478 ;;		None               void
  4479 ;; Registers used:
  4480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4481 ;; Tracked objects:
  4482 ;;		On entry : 0/0
  4483 ;;		On exit  : 0/0
  4484 ;;		Unchanged: 0/0
  4485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4486 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4487 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4489 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4490 ;;Total ram usage:        4 bytes
  4491 ;; Hardware stack levels used:    1
  4492 ;; Hardware stack levels required when called:    7
  4493 ;; This function calls:
  4494 ;;		_I2C_LCD_Command
  4495 ;; This function is called by:
  4496 ;;		_display_time_0802
  4497 ;;		_display_port
  4498 ;;		_display_LCD
  4499 ;;		_sleep_loop
  4500 ;;		_main
  4501 ;;		_display_time_1602
  4502 ;; This function uses a non-reentrant model
  4503 ;;
  4504                           
  4505                           	psect	text15
  4506  003EFA                     __ptext15:
  4507                           	opt stack 0
  4508  003EFA                     _I2C_LCD_SetCursor:
  4509                           	opt stack 22
  4510                           
  4511                           ;incstack = 0
  4512                           ;I2C_LCD_SetCursor@col stored from wreg
  4513  003EFA  0100               	movlb	0	; () banked
  4514  003EFC  6FCC               	movwf	I2C_LCD_SetCursor@col& (0+255),b
  4515                           
  4516                           ;My_header\My_I2C.h: 113: uint8_t row_offsets[] = {0x00, 0x40};
  4517  003EFE  C0FD  F0CA         	movff	I2C_LCD_SetCursor@F8672,I2C_LCD_SetCursor@row_offsets
  4518  003F02  C0FE  F0CB         	movff	I2C_LCD_SetCursor@F8672+1,I2C_LCD_SetCursor@row_offsets+1
  4519                           
  4520                           ;My_header\My_I2C.h: 115: I2C_LCD_Command(0x80 | (col + row_offsets[row]));
  4521  003F06  0100               	movlb	0	; () banked
  4522  003F08  51C9               	movf	I2C_LCD_SetCursor@row& (0+255),w,b
  4523  003F0A  0D01               	mullw	1
  4524  003F0C  0ECA               	movlw	low I2C_LCD_SetCursor@row_offsets
  4525  003F0E  24F3               	addwf	prodl,w,c
  4526  003F10  6ED9               	movwf	fsr2l,c
  4527  003F12  0E00               	movlw	high I2C_LCD_SetCursor@row_offsets
  4528  003F14  20F4               	addwfc	prodh,w,c
  4529  003F16  6EDA               	movwf	fsr2h,c
  4530  003F18  50DF               	movf	indf2,w,c
  4531  003F1A  0100               	movlb	0	; () banked
  4532  003F1C  25CC               	addwf	I2C_LCD_SetCursor@col& (0+255),w,b
  4533  003F1E  0980               	iorlw	128
  4534  003F20  EC33  F01F         	call	_I2C_LCD_Command
  4535  003F24  0012               	return		;funcret
  4536  003F26                     __end_of_I2C_LCD_SetCursor:
  4537                           	opt stack 0
  4538                           tblptru	equ	0xFF8
  4539                           tblptrh	equ	0xFF7
  4540                           tblptrl	equ	0xFF6
  4541                           tablat	equ	0xFF5
  4542                           prodh	equ	0xFF4
  4543                           prodl	equ	0xFF3
  4544                           intcon	equ	0xFF2
  4545                           postinc0	equ	0xFEE
  4546                           wreg	equ	0xFE8
  4547                           indf2	equ	0xFDF
  4548                           postinc2	equ	0xFDE
  4549                           postdec2	equ	0xFDD
  4550                           fsr2h	equ	0xFDA
  4551                           fsr2l	equ	0xFD9
  4552                           status	equ	0xFD8
  4553                           
  4554 ;; *************** function _I2C_LCD_Puts *****************
  4555 ;; Defined at:
  4556 ;;		line 131 in file "../My_header\My_I2C.h"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  4559 ;;		 -> STR_18(8), STR_17(7), STR_16(9), STR_15(5), 
  4560 ;;		 -> STR_14(9), STR_13(9), STR_12(8), STR_11(7), 
  4561 ;;		 -> STR_10(4), display_LCD@str(10), STR_9(8), STR_8(7), 
  4562 ;;		 -> STR_7(5), STR_6(5), STR_5(7), STR_4(7), 
  4563 ;;		 -> STR_3(6), STR_2(6), weekday_3char(28), STR_1(3), 
  4564 ;;		 -> display_dec@str(10), 
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;  ans             2    3[BANK0 ] int 
  4567 ;; Return value:  Size  Location     Type
  4568 ;;		None               void
  4569 ;; Registers used:
  4570 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4571 ;; Tracked objects:
  4572 ;;		On entry : 0/0
  4573 ;;		On exit  : 0/0
  4574 ;;		Unchanged: 0/0
  4575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4576 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4577 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4578 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4579 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4580 ;;Total ram usage:        5 bytes
  4581 ;; Hardware stack levels used:    1
  4582 ;; Hardware stack levels required when called:    6
  4583 ;; This function calls:
  4584 ;;		_I2C_Send
  4585 ;;		_I2C_Start
  4586 ;;		_I2C_Stop
  4587 ;; This function is called by:
  4588 ;;		_display_dec
  4589 ;;		_display_time_0802
  4590 ;;		_display_port
  4591 ;;		_display_LCD
  4592 ;;		_sleep_loop
  4593 ;;		_main
  4594 ;;		_display_time_1602
  4595 ;; This function uses a non-reentrant model
  4596 ;;
  4597                           
  4598                           	psect	text16
  4599  0034D0                     __ptext16:
  4600                           	opt stack 0
  4601  0034D0                     _I2C_LCD_Puts:
  4602                           	opt stack 23
  4603                           
  4604                           ;My_header\My_I2C.h: 132: int ans;
  4605                           ;My_header\My_I2C.h: 134: ans = I2C_Start(0x3E, 0);
  4606                           
  4607                           ;incstack = 0
  4608  0034D0  0E00               	movlw	0
  4609  0034D2  6E21               	movwf	I2C_Start@rw,c
  4610  0034D4  0E3E               	movlw	62
  4611  0034D6  EC93  F01F         	call	_I2C_Start
  4612  0034DA  0100               	movlb	0	; () banked
  4613  0034DC  6FC9               	movwf	??_I2C_LCD_Puts& (0+255),b
  4614  0034DE  0100               	movlb	0	; () banked
  4615  0034E0  51C9               	movf	??_I2C_LCD_Puts& (0+255),w,b
  4616  0034E2  0100               	movlb	0	; () banked
  4617  0034E4  6FCA               	movwf	I2C_LCD_Puts@ans& (0+255),b
  4618  0034E6  6BCB               	clrf	(I2C_LCD_Puts@ans+1)& (0+255),b
  4619                           
  4620                           ; BSR set to: 0
  4621                           ;My_header\My_I2C.h: 135: if (ans == 0) {
  4622  0034E8  0100               	movlb	0	; () banked
  4623  0034EA  51CA               	movf	I2C_LCD_Puts@ans& (0+255),w,b
  4624  0034EC  0100               	movlb	0	; () banked
  4625  0034EE  11CB               	iorwf	(I2C_LCD_Puts@ans+1)& (0+255),w,b
  4626  0034F0  A4D8               	btfss	status,2,c
  4627  0034F2  D031               	goto	l5189
  4628                           
  4629                           ; BSR set to: 0
  4630                           ;My_header\My_I2C.h: 136: I2C_Send(0b01000000);
  4631  0034F4  0E40               	movlw	64
  4632  0034F6  EC8F  F020         	call	_I2C_Send
  4633                           
  4634                           ;My_header\My_I2C.h: 137: while (*s) {
  4635  0034FA  D019               	goto	l5187
  4636  0034FC                     l5181:
  4637                           
  4638                           ;My_header\My_I2C.h: 138: I2C_Send(*s++);
  4639  0034FC  C0C7  FFF6         	movff	I2C_LCD_Puts@s,tblptrl
  4640  003500  C0C8  FFF7         	movff	I2C_LCD_Puts@s+1,tblptrh
  4641  003504  0E00               	movlw	low (__smallconst shr (0+16))
  4642  003506  6EF8               	movwf	tblptru,c
  4643  003508  0E0E               	movlw	(high __ramtop+-1)
  4644  00350A  64F7               	cpfsgt	tblptrh,c
  4645  00350C  D003               	bra	u5367
  4646  00350E  0008               	tblrd		*
  4647  003510  50F5               	movf	tablat,w,c
  4648  003512  D005               	bra	u5360
  4649  003514                     u5367:
  4650  003514  CFF6 FFE1          	movff	tblptrl,fsr1l
  4651  003518  CFF7 FFE2          	movff	tblptrh,fsr1h
  4652  00351C  50E7               	movf	indf1,w,c
  4653  00351E                     u5360:
  4654  00351E  EC8F  F020         	call	_I2C_Send
  4655  003522  0100               	movlb	0	; () banked
  4656  003524  4BC7               	infsnz	I2C_LCD_Puts@s& (0+255),f,b
  4657  003526  2BC8               	incf	(I2C_LCD_Puts@s+1)& (0+255),f,b
  4658                           
  4659                           ; BSR set to: 0
  4660                           ;My_header\My_I2C.h: 139: _delay((unsigned long)((26)*(48000000/4000000.0)));
  4661  003528  0E68               	movlw	104
  4662  00352A                     u6837:
  4663  00352A  2EE8               	decfsz	wreg,f,c
  4664  00352C  D7FE               	goto	u6837
  4665  00352E                     l5187:
  4666  00352E  C0C7  FFF6         	movff	I2C_LCD_Puts@s,tblptrl
  4667  003532  C0C8  FFF7         	movff	I2C_LCD_Puts@s+1,tblptrh
  4668  003536  0E00               	movlw	low (__smallconst shr (0+16))
  4669  003538  6EF8               	movwf	tblptru,c
  4670  00353A  0E0E               	movlw	(high __ramtop+-1)
  4671  00353C  64F7               	cpfsgt	tblptrh,c
  4672  00353E  D003               	bra	u5377
  4673  003540  0008               	tblrd		*
  4674  003542  50F5               	movf	tablat,w,c
  4675  003544  D005               	bra	u5370
  4676  003546                     u5377:
  4677  003546  CFF6 FFE1          	movff	tblptrl,fsr1l
  4678  00354A  CFF7 FFE2          	movff	tblptrh,fsr1h
  4679  00354E  50E7               	movf	indf1,w,c
  4680  003550                     u5370:
  4681  003550  0900               	iorlw	0
  4682  003552  A4D8               	btfss	status,2,c
  4683  003554  D7D3               	goto	l5181
  4684  003556                     l5189:
  4685                           
  4686                           ;My_header\My_I2C.h: 140: }
  4687                           ;My_header\My_I2C.h: 141: }
  4688                           ;My_header\My_I2C.h: 142: I2C_Stop();
  4689  003556  ECAE  F020         	call	_I2C_Stop	;wreg free
  4690  00355A  0012               	return		;funcret
  4691  00355C                     __end_of_I2C_LCD_Puts:
  4692                           	opt stack 0
  4693                           tblptru	equ	0xFF8
  4694                           tblptrh	equ	0xFF7
  4695                           tblptrl	equ	0xFF6
  4696                           tablat	equ	0xFF5
  4697                           prodh	equ	0xFF4
  4698                           prodl	equ	0xFF3
  4699                           intcon	equ	0xFF2
  4700                           postinc0	equ	0xFEE
  4701                           wreg	equ	0xFE8
  4702                           indf1	equ	0xFE7
  4703                           fsr1h	equ	0xFE2
  4704                           fsr1l	equ	0xFE1
  4705                           indf2	equ	0xFDF
  4706                           postinc2	equ	0xFDE
  4707                           postdec2	equ	0xFDD
  4708                           fsr2h	equ	0xFDA
  4709                           fsr2l	equ	0xFD9
  4710                           status	equ	0xFD8
  4711                           
  4712 ;; *************** function ___llmod *****************
  4713 ;; Defined at:
  4714 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\llmod.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;  dividend        4   13[BANK0 ] unsigned long 
  4717 ;;  divisor         4   17[BANK0 ] unsigned long 
  4718 ;; Auto vars:     Size  Location     Type
  4719 ;;  counter         1   30[COMRAM] unsigned char 
  4720 ;; Return value:  Size  Location     Type
  4721 ;;                  4   13[BANK0 ] unsigned long 
  4722 ;; Registers used:
  4723 ;;		wreg, status,2, status,0
  4724 ;; Tracked objects:
  4725 ;;		On entry : 0/0
  4726 ;;		On exit  : 0/0
  4727 ;;		Unchanged: 0/0
  4728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4729 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4730 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4732 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4733 ;;Total ram usage:        9 bytes
  4734 ;; Hardware stack levels used:    1
  4735 ;; Hardware stack levels required when called:    4
  4736 ;; This function calls:
  4737 ;;		Nothing
  4738 ;; This function is called by:
  4739 ;;		_display_LCD
  4740 ;;		_my_utoa32
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744                           	psect	text17
  4745  00343C                     __ptext17:
  4746                           	opt stack 0
  4747  00343C                     ___llmod:
  4748                           	opt stack 24
  4749                           
  4750                           ;incstack = 0
  4751  00343C  0100               	movlb	0	; () banked
  4752  00343E  51D8               	movf	___llmod@divisor& (0+255),w,b
  4753  003440  0100               	movlb	0	; () banked
  4754  003442  11D9               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  4755  003444  0100               	movlb	0	; () banked
  4756  003446  11DA               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  4757  003448  0100               	movlb	0	; () banked
  4758  00344A  11DB               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  4759  00344C  B4D8               	btfsc	status,2,c
  4760  00344E  D037               	goto	l1141
  4761                           
  4762                           ; BSR set to: 0
  4763  003450  0E01               	movlw	1
  4764  003452  6E1F               	movwf	___llmod@counter,c
  4765  003454  D007               	goto	l5705
  4766  003456                     l5703:
  4767                           
  4768                           ; BSR set to: 0
  4769  003456  0100               	movlb	0	; () banked
  4770  003458  90D8               	bcf	status,0,c
  4771  00345A  37D8               	rlcf	___llmod@divisor& (0+255),f,b
  4772  00345C  37D9               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  4773  00345E  37DA               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  4774  003460  37DB               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  4775  003462  2A1F               	incf	___llmod@counter,f,c
  4776  003464                     l5705:
  4777                           
  4778                           ; BSR set to: 0
  4779  003464  0100               	movlb	0	; () banked
  4780  003466  AFDB               	btfss	(___llmod@divisor+3)& (0+255),7,b
  4781  003468  D7F6               	goto	l5703
  4782  00346A                     l5707:
  4783                           
  4784                           ; BSR set to: 0
  4785  00346A  0100               	movlb	0	; () banked
  4786  00346C  51D8               	movf	___llmod@divisor& (0+255),w,b
  4787  00346E  0100               	movlb	0	; () banked
  4788  003470  5DD4               	subwf	___llmod@dividend& (0+255),w,b
  4789  003472  0100               	movlb	0	; () banked
  4790  003474  51D9               	movf	(___llmod@divisor+1)& (0+255),w,b
  4791  003476  0100               	movlb	0	; () banked
  4792  003478  59D5               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  4793  00347A  0100               	movlb	0	; () banked
  4794  00347C  51DA               	movf	(___llmod@divisor+2)& (0+255),w,b
  4795  00347E  0100               	movlb	0	; () banked
  4796  003480  59D6               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  4797  003482  0100               	movlb	0	; () banked
  4798  003484  51DB               	movf	(___llmod@divisor+3)& (0+255),w,b
  4799  003486  0100               	movlb	0	; () banked
  4800  003488  59D7               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  4801  00348A  A0D8               	btfss	status,0,c
  4802  00348C  D010               	goto	l5711
  4803                           
  4804                           ; BSR set to: 0
  4805  00348E  0100               	movlb	0	; () banked
  4806  003490  51D8               	movf	___llmod@divisor& (0+255),w,b
  4807  003492  0100               	movlb	0	; () banked
  4808  003494  5FD4               	subwf	___llmod@dividend& (0+255),f,b
  4809  003496  0100               	movlb	0	; () banked
  4810  003498  51D9               	movf	(___llmod@divisor+1)& (0+255),w,b
  4811  00349A  0100               	movlb	0	; () banked
  4812  00349C  5BD5               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  4813  00349E  0100               	movlb	0	; () banked
  4814  0034A0  51DA               	movf	(___llmod@divisor+2)& (0+255),w,b
  4815  0034A2  0100               	movlb	0	; () banked
  4816  0034A4  5BD6               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  4817  0034A6  0100               	movlb	0	; () banked
  4818  0034A8  51DB               	movf	(___llmod@divisor+3)& (0+255),w,b
  4819  0034AA  0100               	movlb	0	; () banked
  4820  0034AC  5BD7               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  4821  0034AE                     l5711:
  4822                           
  4823                           ; BSR set to: 0
  4824  0034AE  0100               	movlb	0	; () banked
  4825  0034B0  90D8               	bcf	status,0,c
  4826  0034B2  33DB               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  4827  0034B4  33DA               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  4828  0034B6  33D9               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  4829  0034B8  33D8               	rrcf	___llmod@divisor& (0+255),f,b
  4830                           
  4831                           ; BSR set to: 0
  4832  0034BA  2E1F               	decfsz	___llmod@counter,f,c
  4833  0034BC  D7D6               	goto	l5707
  4834  0034BE                     l1141:
  4835                           
  4836                           ; BSR set to: 0
  4837  0034BE  C0D4  F0D4         	movff	___llmod@dividend,?___llmod
  4838  0034C2  C0D5  F0D5         	movff	___llmod@dividend+1,?___llmod+1
  4839  0034C6  C0D6  F0D6         	movff	___llmod@dividend+2,?___llmod+2
  4840  0034CA  C0D7  F0D7         	movff	___llmod@dividend+3,?___llmod+3
  4841                           
  4842                           ; BSR set to: 0
  4843  0034CE  0012               	return		;funcret
  4844  0034D0                     __end_of___llmod:
  4845                           	opt stack 0
  4846                           tblptru	equ	0xFF8
  4847                           tblptrh	equ	0xFF7
  4848                           tblptrl	equ	0xFF6
  4849                           tablat	equ	0xFF5
  4850                           prodh	equ	0xFF4
  4851                           prodl	equ	0xFF3
  4852                           intcon	equ	0xFF2
  4853                           postinc0	equ	0xFEE
  4854                           wreg	equ	0xFE8
  4855                           indf1	equ	0xFE7
  4856                           fsr1h	equ	0xFE2
  4857                           fsr1l	equ	0xFE1
  4858                           indf2	equ	0xFDF
  4859                           postinc2	equ	0xFDE
  4860                           postdec2	equ	0xFDD
  4861                           fsr2h	equ	0xFDA
  4862                           fsr2l	equ	0xFD9
  4863                           status	equ	0xFD8
  4864                           
  4865 ;; *************** function _ctmu_loop *****************
  4866 ;; Defined at:
  4867 ;;		line 338 in file "tasks.h"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;		None
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;		None
  4872 ;; Return value:  Size  Location     Type
  4873 ;;		None               void
  4874 ;; Registers used:
  4875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4876 ;; Tracked objects:
  4877 ;;		On entry : 0/0
  4878 ;;		On exit  : 0/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4885 ;;Total ram usage:        0 bytes
  4886 ;; Hardware stack levels used:    1
  4887 ;; Hardware stack levels required when called:    6
  4888 ;; This function calls:
  4889 ;;		_CTMU_read
  4890 ;;		___lwdiv
  4891 ;;		_button_timer_interrupt
  4892 ;; This function is called by:
  4893 ;;		_normal_mode_loop
  4894 ;; This function uses a non-reentrant model
  4895 ;;
  4896                           
  4897                           	psect	text18
  4898  002702                     __ptext18:
  4899                           	opt stack 0
  4900  002702                     _ctmu_loop:
  4901                           	opt stack 23
  4902                           
  4903                           ;tasks.h: 339: button_timer_interrupt(&ct0, !(CTMU_read(2) / ctmu_value0));
  4904                           
  4905                           ; BSR set to: 0
  4906                           ;incstack = 0
  4907  002702  0EB3               	movlw	low _ct0
  4908  002704  0100               	movlb	0	; () banked
  4909  002706  6FE1               	movwf	button_timer_interrupt@bt& (0+255),b
  4910  002708  0E00               	movlw	high _ct0
  4911  00270A  0100               	movlb	0	; () banked
  4912  00270C  6FE2               	movwf	(button_timer_interrupt@bt+1)& (0+255),b
  4913  00270E  0E02               	movlw	2
  4914  002710  EC08  F017         	call	_CTMU_read
  4915  002714  C01F  F0DA         	movff	?_CTMU_read,___lwdiv@dividend
  4916  002718  C020  F0DB         	movff	?_CTMU_read+1,___lwdiv@dividend+1
  4917  00271C  C02C  F0DC         	movff	_ctmu_value0,___lwdiv@divisor
  4918  002720  C02D  F0DD         	movff	_ctmu_value0+1,___lwdiv@divisor+1
  4919  002724  ECF1  F01B         	call	___lwdiv	;wreg free
  4920  002728  0100               	movlb	0	; () banked
  4921  00272A  51DA               	movf	?___lwdiv& (0+255),w,b
  4922  00272C  0100               	movlb	0	; () banked
  4923  00272E  11DB               	iorwf	(?___lwdiv+1)& (0+255),w,b
  4924  002730  A4D8               	btfss	status,2,c
  4925  002732  D002               	goto	u6400
  4926  002734  0E01               	movlw	1
  4927  002736  D001               	goto	u6410
  4928  002738                     u6400:
  4929  002738  0E00               	movlw	0
  4930  00273A                     u6410:
  4931  00273A  0100               	movlb	0	; () banked
  4932  00273C  6FE3               	movwf	button_timer_interrupt@sw_value& (0+255),b
  4933  00273E  EC2E  F00A         	call	_button_timer_interrupt	;wreg free
  4934                           
  4935                           ;tasks.h: 340: button_timer_interrupt(&ct1, !(CTMU_read(1) / ctmu_value1));
  4936  002742  0EB7               	movlw	low _ct1
  4937  002744  0100               	movlb	0	; () banked
  4938  002746  6FE1               	movwf	button_timer_interrupt@bt& (0+255),b
  4939  002748  0E00               	movlw	high _ct1
  4940  00274A  0100               	movlb	0	; () banked
  4941  00274C  6FE2               	movwf	(button_timer_interrupt@bt+1)& (0+255),b
  4942  00274E  0E01               	movlw	1
  4943  002750  EC08  F017         	call	_CTMU_read
  4944  002754  C01F  F0DA         	movff	?_CTMU_read,___lwdiv@dividend
  4945  002758  C020  F0DB         	movff	?_CTMU_read+1,___lwdiv@dividend+1
  4946  00275C  C02E  F0DC         	movff	_ctmu_value1,___lwdiv@divisor
  4947  002760  C02F  F0DD         	movff	_ctmu_value1+1,___lwdiv@divisor+1
  4948  002764  ECF1  F01B         	call	___lwdiv	;wreg free
  4949  002768  0100               	movlb	0	; () banked
  4950  00276A  51DA               	movf	?___lwdiv& (0+255),w,b
  4951  00276C  0100               	movlb	0	; () banked
  4952  00276E  11DB               	iorwf	(?___lwdiv+1)& (0+255),w,b
  4953  002770  A4D8               	btfss	status,2,c
  4954  002772  D002               	goto	u6420
  4955  002774  0E01               	movlw	1
  4956  002776  D001               	goto	u6430
  4957  002778                     u6420:
  4958  002778  0E00               	movlw	0
  4959  00277A                     u6430:
  4960  00277A  0100               	movlb	0	; () banked
  4961  00277C  6FE3               	movwf	button_timer_interrupt@sw_value& (0+255),b
  4962  00277E  EC2E  F00A         	call	_button_timer_interrupt	;wreg free
  4963                           
  4964                           ;tasks.h: 341: button_timer_interrupt(&ct2, !(CTMU_read(0) / ctmu_value2));
  4965  002782  0EBB               	movlw	low _ct2
  4966  002784  0100               	movlb	0	; () banked
  4967  002786  6FE1               	movwf	button_timer_interrupt@bt& (0+255),b
  4968  002788  0E00               	movlw	high _ct2
  4969  00278A  0100               	movlb	0	; () banked
  4970  00278C  6FE2               	movwf	(button_timer_interrupt@bt+1)& (0+255),b
  4971  00278E  0E00               	movlw	0
  4972  002790  EC08  F017         	call	_CTMU_read
  4973  002794  C01F  F0DA         	movff	?_CTMU_read,___lwdiv@dividend
  4974  002798  C020  F0DB         	movff	?_CTMU_read+1,___lwdiv@dividend+1
  4975  00279C  C030  F0DC         	movff	_ctmu_value2,___lwdiv@divisor
  4976  0027A0  C031  F0DD         	movff	_ctmu_value2+1,___lwdiv@divisor+1
  4977  0027A4  ECF1  F01B         	call	___lwdiv	;wreg free
  4978  0027A8  0100               	movlb	0	; () banked
  4979  0027AA  51DA               	movf	?___lwdiv& (0+255),w,b
  4980  0027AC  0100               	movlb	0	; () banked
  4981  0027AE  11DB               	iorwf	(?___lwdiv+1)& (0+255),w,b
  4982  0027B0  A4D8               	btfss	status,2,c
  4983  0027B2  D002               	goto	u6440
  4984  0027B4  0E01               	movlw	1
  4985  0027B6  D001               	goto	u6450
  4986  0027B8                     u6440:
  4987  0027B8  0E00               	movlw	0
  4988  0027BA                     u6450:
  4989  0027BA  0100               	movlb	0	; () banked
  4990  0027BC  6FE3               	movwf	button_timer_interrupt@sw_value& (0+255),b
  4991  0027BE  EC2E  F00A         	call	_button_timer_interrupt	;wreg free
  4992                           
  4993                           ;tasks.h: 342: button_timer_interrupt(&ctm, !(CTMU_read(3) / ctmu_valuem));
  4994  0027C2  0EBF               	movlw	low _ctm
  4995  0027C4  0100               	movlb	0	; () banked
  4996  0027C6  6FE1               	movwf	button_timer_interrupt@bt& (0+255),b
  4997  0027C8  0E00               	movlw	high _ctm
  4998  0027CA  0100               	movlb	0	; () banked
  4999  0027CC  6FE2               	movwf	(button_timer_interrupt@bt+1)& (0+255),b
  5000  0027CE  0E03               	movlw	3
  5001  0027D0  EC08  F017         	call	_CTMU_read
  5002  0027D4  C01F  F0DA         	movff	?_CTMU_read,___lwdiv@dividend
  5003  0027D8  C020  F0DB         	movff	?_CTMU_read+1,___lwdiv@dividend+1
  5004  0027DC  C032  F0DC         	movff	_ctmu_valuem,___lwdiv@divisor
  5005  0027E0  C033  F0DD         	movff	_ctmu_valuem+1,___lwdiv@divisor+1
  5006  0027E4  ECF1  F01B         	call	___lwdiv	;wreg free
  5007  0027E8  0100               	movlb	0	; () banked
  5008  0027EA  51DA               	movf	?___lwdiv& (0+255),w,b
  5009  0027EC  0100               	movlb	0	; () banked
  5010  0027EE  11DB               	iorwf	(?___lwdiv+1)& (0+255),w,b
  5011  0027F0  A4D8               	btfss	status,2,c
  5012  0027F2  D002               	goto	u6460
  5013  0027F4  0E01               	movlw	1
  5014  0027F6  D001               	goto	u6470
  5015  0027F8                     u6460:
  5016  0027F8  0E00               	movlw	0
  5017  0027FA                     u6470:
  5018  0027FA  0100               	movlb	0	; () banked
  5019  0027FC  6FE3               	movwf	button_timer_interrupt@sw_value& (0+255),b
  5020  0027FE  EC2E  F00A         	call	_button_timer_interrupt	;wreg free
  5021  002802  0012               	return		;funcret
  5022  002804                     __end_of_ctmu_loop:
  5023                           	opt stack 0
  5024                           tblptru	equ	0xFF8
  5025                           tblptrh	equ	0xFF7
  5026                           tblptrl	equ	0xFF6
  5027                           tablat	equ	0xFF5
  5028                           prodh	equ	0xFF4
  5029                           prodl	equ	0xFF3
  5030                           intcon	equ	0xFF2
  5031                           postinc0	equ	0xFEE
  5032                           wreg	equ	0xFE8
  5033                           indf1	equ	0xFE7
  5034                           fsr1h	equ	0xFE2
  5035                           fsr1l	equ	0xFE1
  5036                           indf2	equ	0xFDF
  5037                           postinc2	equ	0xFDE
  5038                           postdec2	equ	0xFDD
  5039                           fsr2h	equ	0xFDA
  5040                           fsr2l	equ	0xFD9
  5041                           status	equ	0xFD8
  5042                           
  5043 ;; *************** function _button_timer_interrupt *****************
  5044 ;; Defined at:
  5045 ;;		line 51 in file "../My_header\My_button.h"
  5046 ;; Parameters:    Size  Location     Type
  5047 ;;  bt              2   26[BANK0 ] PTR struct button
  5048 ;;		 -> ctm(4), ct2(4), ct1(4), ct0(4), 
  5049 ;;  sw_value        1   28[BANK0 ] unsigned char 
  5050 ;; Auto vars:     Size  Location     Type
  5051 ;;		None
  5052 ;; Return value:  Size  Location     Type
  5053 ;;		None               void
  5054 ;; Registers used:
  5055 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5056 ;; Tracked objects:
  5057 ;;		On entry : 0/0
  5058 ;;		On exit  : 0/0
  5059 ;;		Unchanged: 0/0
  5060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5061 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5063 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5064 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5065 ;;Total ram usage:        5 bytes
  5066 ;; Hardware stack levels used:    1
  5067 ;; Hardware stack levels required when called:    4
  5068 ;; This function calls:
  5069 ;;		Nothing
  5070 ;; This function is called by:
  5071 ;;		_ctmu_loop
  5072 ;; This function uses a non-reentrant model
  5073 ;;
  5074                           
  5075                           	psect	text19
  5076  00145C                     __ptext19:
  5077                           	opt stack 0
  5078  00145C                     _button_timer_interrupt:
  5079                           	opt stack 24
  5080                           
  5081                           ;My_header\My_button.h: 52: if (sw_value) {
  5082                           
  5083                           ;incstack = 0
  5084  00145C  0100               	movlb	0	; () banked
  5085  00145E  51E3               	movf	button_timer_interrupt@sw_value& (0+255),w,b
  5086  001460  0100               	movlb	0	; () banked
  5087  001462  B4D8               	btfsc	status,2,c
  5088  001464  D0A8               	goto	l5427
  5089                           
  5090                           ; BSR set to: 0
  5091                           ;My_header\My_button.h: 53: if (bt->cnt_sw == 900)bt->flag.long_holding_7 = 1;
  5092  001466  C0E1  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5093  00146A  C0E2  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5094  00146E  0E84               	movlw	132
  5095  001470  18DE               	xorwf	postinc2,w,c
  5096  001472  E10D               	bnz	l272
  5097  001474  0E03               	movlw	3
  5098  001476  18DE               	xorwf	postinc2,w,c
  5099  001478  A4D8               	btfss	status,2,c
  5100  00147A  D009               	goto	l272
  5101                           
  5102                           ; BSR set to: 0
  5103  00147C  0100               	movlb	0	; () banked
  5104  00147E  EE20 F003          	lfsr	2,3
  5105  001482  51E1               	movf	button_timer_interrupt@bt& (0+255),w,b
  5106  001484  26D9               	addwf	fsr2l,f,c
  5107  001486  51E2               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5108  001488  22DA               	addwfc	fsr2h,f,c
  5109  00148A  0100               	movlb	0	; () banked
  5110  00148C  8EDF               	bsf	indf2,7,c
  5111  00148E                     l272:
  5112                           
  5113                           ; BSR set to: 0
  5114                           ;My_header\My_button.h: 54: if (bt->cnt_sw == 700)bt->flag.long_holding_6 = 1;
  5115  00148E  C0E1  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5116  001492  C0E2  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5117  001496  0EBC               	movlw	188
  5118  001498  18DE               	xorwf	postinc2,w,c
  5119  00149A  E10D               	bnz	l273
  5120  00149C  0E02               	movlw	2
  5121  00149E  18DE               	xorwf	postinc2,w,c
  5122  0014A0  A4D8               	btfss	status,2,c
  5123  0014A2  D009               	goto	l273
  5124                           
  5125                           ; BSR set to: 0
  5126  0014A4  0100               	movlb	0	; () banked
  5127  0014A6  EE20 F003          	lfsr	2,3
  5128  0014AA  51E1               	movf	button_timer_interrupt@bt& (0+255),w,b
  5129  0014AC  26D9               	addwf	fsr2l,f,c
  5130  0014AE  51E2               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5131  0014B0  22DA               	addwfc	fsr2h,f,c
  5132  0014B2  0100               	movlb	0	; () banked
  5133  0014B4  8CDF               	bsf	indf2,6,c
  5134  0014B6                     l273:
  5135                           
  5136                           ; BSR set to: 0
  5137                           ;My_header\My_button.h: 55: if (bt->cnt_sw == 500)bt->flag.long_holding_5 = 1;
  5138  0014B6  C0E1  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5139  0014BA  C0E2  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5140  0014BE  0EF4               	movlw	244
  5141  0014C0  18DE               	xorwf	postinc2,w,c
  5142  0014C2  E10C               	bnz	l274
  5143  0014C4  04DE               	decf	postinc2,w,c
  5144  0014C6  A4D8               	btfss	status,2,c
  5145  0014C8  D009               	goto	l274
  5146                           
  5147                           ; BSR set to: 0
  5148  0014CA  0100               	movlb	0	; () banked
  5149  0014CC  EE20 F003          	lfsr	2,3
  5150  0014D0  51E1               	movf	button_timer_interrupt@bt& (0+255),w,b
  5151  0014D2  26D9               	addwf	fsr2l,f,c
  5152  0014D4  51E2               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5153  0014D6  22DA               	addwfc	fsr2h,f,c
  5154  0014D8  0100               	movlb	0	; () banked
  5155  0014DA  8ADF               	bsf	indf2,5,c
  5156  0014DC                     l274:
  5157                           
  5158                           ; BSR set to: 0
  5159                           ;My_header\My_button.h: 56: if (bt->cnt_sw == 300)bt->flag.long_holding_4 = 1;
  5160  0014DC  C0E1  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5161  0014E0  C0E2  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5162  0014E4  0E2C               	movlw	44
  5163  0014E6  18DE               	xorwf	postinc2,w,c
  5164  0014E8  E10C               	bnz	l275
  5165  0014EA  04DE               	decf	postinc2,w,c
  5166  0014EC  A4D8               	btfss	status,2,c
  5167  0014EE  D009               	goto	l275
  5168                           
  5169                           ; BSR set to: 0
  5170  0014F0  0100               	movlb	0	; () banked
  5171  0014F2  EE20 F003          	lfsr	2,3
  5172  0014F6  51E1               	movf	button_timer_interrupt@bt& (0+255),w,b
  5173  0014F8  26D9               	addwf	fsr2l,f,c
  5174  0014FA  51E2               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5175  0014FC  22DA               	addwfc	fsr2h,f,c
  5176  0014FE  0100               	movlb	0	; () banked
  5177  001500  88DF               	bsf	indf2,4,c
  5178  001502                     l275:
  5179                           
  5180                           ; BSR set to: 0
  5181                           ;My_header\My_button.h: 57: if (bt->cnt_sw == 150)bt->flag.long_holding_3 = 1;
  5182  001502  C0E1  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5183  001506  C0E2  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5184  00150A  0E96               	movlw	150
  5185  00150C  18DE               	xorwf	postinc2,w,c
  5186  00150E  10DE               	iorwf	postinc2,w,c
  5187  001510  A4D8               	btfss	status,2,c
  5188  001512  D009               	goto	l276
  5189                           
  5190                           ; BSR set to: 0
  5191  001514  0100               	movlb	0	; () banked
  5192  001516  EE20 F003          	lfsr	2,3
  5193  00151A  51E1               	movf	button_timer_interrupt@bt& (0+255),w,b
  5194  00151C  26D9               	addwf	fsr2l,f,c
  5195  00151E  51E2               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5196  001520  22DA               	addwfc	fsr2h,f,c
  5197  001522  0100               	movlb	0	; () banked
  5198  001524  86DF               	bsf	indf2,3,c
  5199  001526                     l276:
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;My_header\My_button.h: 58: if (bt->cnt_sw == 60)bt->flag.long_holding_2 = 1;
  5203  001526  C0E1  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5204  00152A  C0E2  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5205  00152E  0E3C               	movlw	60
  5206  001530  18DE               	xorwf	postinc2,w,c
  5207  001532  10DE               	iorwf	postinc2,w,c
  5208  001534  A4D8               	btfss	status,2,c
  5209  001536  D009               	goto	l277
  5210                           
  5211                           ; BSR set to: 0
  5212  001538  0100               	movlb	0	; () banked
  5213  00153A  EE20 F003          	lfsr	2,3
  5214  00153E  51E1               	movf	button_timer_interrupt@bt& (0+255),w,b
  5215  001540  26D9               	addwf	fsr2l,f,c
  5216  001542  51E2               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5217  001544  22DA               	addwfc	fsr2h,f,c
  5218  001546  0100               	movlb	0	; () banked
  5219  001548  84DF               	bsf	indf2,2,c
  5220  00154A                     l277:
  5221                           
  5222                           ; BSR set to: 0
  5223                           ;My_header\My_button.h: 59: if (bt->cnt_sw == 16)bt->flag.long_holding_1 = 1;
  5224  00154A  C0E1  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5225  00154E  C0E2  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5226  001552  0E10               	movlw	16
  5227  001554  18DE               	xorwf	postinc2,w,c
  5228  001556  10DE               	iorwf	postinc2,w,c
  5229  001558  A4D8               	btfss	status,2,c
  5230  00155A  D009               	goto	l278
  5231                           
  5232                           ; BSR set to: 0
  5233  00155C  0100               	movlb	0	; () banked
  5234  00155E  EE20 F003          	lfsr	2,3
  5235  001562  51E1               	movf	button_timer_interrupt@bt& (0+255),w,b
  5236  001564  26D9               	addwf	fsr2l,f,c
  5237  001566  51E2               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5238  001568  22DA               	addwfc	fsr2h,f,c
  5239  00156A  0100               	movlb	0	; () banked
  5240  00156C  82DF               	bsf	indf2,1,c
  5241  00156E                     l278:
  5242                           
  5243                           ; BSR set to: 0
  5244                           ;My_header\My_button.h: 60: if (bt->cnt_sw == 2)bt->flag.pressing = 1;
  5245  00156E  C0E1  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5246  001572  C0E2  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5247  001576  0E02               	movlw	2
  5248  001578  18DE               	xorwf	postinc2,w,c
  5249  00157A  10DE               	iorwf	postinc2,w,c
  5250  00157C  A4D8               	btfss	status,2,c
  5251  00157E  D009               	goto	l279
  5252                           
  5253                           ; BSR set to: 0
  5254  001580  0100               	movlb	0	; () banked
  5255  001582  EE20 F003          	lfsr	2,3
  5256  001586  51E1               	movf	button_timer_interrupt@bt& (0+255),w,b
  5257  001588  26D9               	addwf	fsr2l,f,c
  5258  00158A  51E2               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5259  00158C  22DA               	addwfc	fsr2h,f,c
  5260  00158E  0100               	movlb	0	; () banked
  5261  001590  80DF               	bsf	indf2,0,c
  5262  001592                     l279:
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;My_header\My_button.h: 61: if (bt->cnt_sw < 900 + 1) bt->cnt_sw++;
  5266  001592  C0E1  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5267  001596  C0E2  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5268  00159A  0E85               	movlw	133
  5269  00159C  5CDE               	subwf	postinc2,w,c
  5270  00159E  0E03               	movlw	3
  5271  0015A0  58DE               	subwfb	postinc2,w,c
  5272  0015A2  B0D8               	btfsc	status,0,c
  5273  0015A4  0012               	return	
  5274                           
  5275                           ; BSR set to: 0
  5276  0015A6  C0E1  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5277  0015AA  C0E2  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5278  0015AE  2ADE               	incf	postinc2,f,c
  5279  0015B0  0E00               	movlw	0
  5280  0015B2  22DD               	addwfc	postdec2,f,c
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;My_header\My_button.h: 62: } else {
  5284  0015B4  0012               	return	
  5285  0015B6                     l5427:
  5286                           
  5287                           ; BSR set to: 0
  5288                           ;My_header\My_button.h: 63: if (bt->cnt_sw >= 900)bt->flag.long_hold_7 = 1;
  5289  0015B6  C0E1  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5290  0015BA  C0E2  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5291  0015BE  0E84               	movlw	132
  5292  0015C0  5CDE               	subwf	postinc2,w,c
  5293  0015C2  0E03               	movlw	3
  5294  0015C4  58DE               	subwfb	postinc2,w,c
  5295  0015C6  A0D8               	btfss	status,0,c
  5296  0015C8  D00A               	goto	l5431
  5297                           
  5298                           ; BSR set to: 0
  5299  0015CA  0100               	movlb	0	; () banked
  5300  0015CC  EE20 F002          	lfsr	2,2
  5301  0015D0  51E1               	movf	button_timer_interrupt@bt& (0+255),w,b
  5302  0015D2  26D9               	addwf	fsr2l,f,c
  5303  0015D4  51E2               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5304  0015D6  22DA               	addwfc	fsr2h,f,c
  5305  0015D8  0100               	movlb	0	; () banked
  5306  0015DA  8EDF               	bsf	indf2,7,c
  5307  0015DC  D08F               	goto	l5459
  5308  0015DE                     l5431:
  5309                           
  5310                           ; BSR set to: 0
  5311                           ;My_header\My_button.h: 64: else if (bt->cnt_sw >= 700)bt->flag.long_hold_6 = 1;
  5312  0015DE  C0E1  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5313  0015E2  C0E2  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5314  0015E6  0EBC               	movlw	188
  5315  0015E8  5CDE               	subwf	postinc2,w,c
  5316  0015EA  0E02               	movlw	2
  5317  0015EC  58DE               	subwfb	postinc2,w,c
  5318  0015EE  A0D8               	btfss	status,0,c
  5319  0015F0  D00A               	goto	l5435
  5320                           
  5321                           ; BSR set to: 0
  5322  0015F2  0100               	movlb	0	; () banked
  5323  0015F4  EE20 F002          	lfsr	2,2
  5324  0015F8  51E1               	movf	button_timer_interrupt@bt& (0+255),w,b
  5325  0015FA  26D9               	addwf	fsr2l,f,c
  5326  0015FC  51E2               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5327  0015FE  22DA               	addwfc	fsr2h,f,c
  5328  001600  0100               	movlb	0	; () banked
  5329  001602  8CDF               	bsf	indf2,6,c
  5330  001604  D07B               	goto	l5459
  5331  001606                     l5435:
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;My_header\My_button.h: 65: else if (bt->cnt_sw >= 500)bt->flag.long_hold_5 = 1;
  5335  001606  C0E1  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5336  00160A  C0E2  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5337  00160E  0EF4               	movlw	244
  5338  001610  5CDE               	subwf	postinc2,w,c
  5339  001612  0E01               	movlw	1
  5340  001614  58DE               	subwfb	postinc2,w,c
  5341  001616  A0D8               	btfss	status,0,c
  5342  001618  D00A               	goto	l5439
  5343                           
  5344                           ; BSR set to: 0
  5345  00161A  0100               	movlb	0	; () banked
  5346  00161C  EE20 F002          	lfsr	2,2
  5347  001620  51E1               	movf	button_timer_interrupt@bt& (0+255),w,b
  5348  001622  26D9               	addwf	fsr2l,f,c
  5349  001624  51E2               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5350  001626  22DA               	addwfc	fsr2h,f,c
  5351  001628  0100               	movlb	0	; () banked
  5352  00162A  8ADF               	bsf	indf2,5,c
  5353  00162C  D067               	goto	l5459
  5354  00162E                     l5439:
  5355                           
  5356                           ; BSR set to: 0
  5357                           ;My_header\My_button.h: 66: else if (bt->cnt_sw >= 300)bt->flag.long_hold_4 = 1;
  5358  00162E  C0E1  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5359  001632  C0E2  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5360  001636  0E2C               	movlw	44
  5361  001638  5CDE               	subwf	postinc2,w,c
  5362  00163A  0E01               	movlw	1
  5363  00163C  58DE               	subwfb	postinc2,w,c
  5364  00163E  A0D8               	btfss	status,0,c
  5365  001640  D00A               	goto	l5443
  5366                           
  5367                           ; BSR set to: 0
  5368  001642  0100               	movlb	0	; () banked
  5369  001644  EE20 F002          	lfsr	2,2
  5370  001648  51E1               	movf	button_timer_interrupt@bt& (0+255),w,b
  5371  00164A  26D9               	addwf	fsr2l,f,c
  5372  00164C  51E2               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5373  00164E  22DA               	addwfc	fsr2h,f,c
  5374  001650  0100               	movlb	0	; () banked
  5375  001652  88DF               	bsf	indf2,4,c
  5376  001654  D053               	goto	l5459
  5377  001656                     l5443:
  5378                           
  5379                           ; BSR set to: 0
  5380                           ;My_header\My_button.h: 67: else if (bt->cnt_sw >= 150)bt->flag.long_hold_3 = 1;
  5381  001656  C0E1  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5382  00165A  C0E2  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5383  00165E  0E01               	movlw	1
  5384  001660  50DB               	movf	plusw2,w,c
  5385  001662  E104               	bnz	u5720
  5386  001664  0E96               	movlw	150
  5387  001666  5CDE               	subwf	postinc2,w,c
  5388  001668  A0D8               	btfss	status,0,c
  5389  00166A  D00A               	goto	l5447
  5390  00166C                     u5720:
  5391                           
  5392                           ; BSR set to: 0
  5393  00166C  0100               	movlb	0	; () banked
  5394  00166E  EE20 F002          	lfsr	2,2
  5395  001672  51E1               	movf	button_timer_interrupt@bt& (0+255),w,b
  5396  001674  26D9               	addwf	fsr2l,f,c
  5397  001676  51E2               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5398  001678  22DA               	addwfc	fsr2h,f,c
  5399  00167A  0100               	movlb	0	; () banked
  5400  00167C  86DF               	bsf	indf2,3,c
  5401  00167E  D03E               	goto	l5459
  5402  001680                     l5447:
  5403                           
  5404                           ; BSR set to: 0
  5405                           ;My_header\My_button.h: 68: else if (bt->cnt_sw >= 60)bt->flag.long_hold_2 = 1;
  5406  001680  C0E1  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5407  001684  C0E2  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5408  001688  0E01               	movlw	1
  5409  00168A  50DB               	movf	plusw2,w,c
  5410  00168C  E104               	bnz	u5730
  5411  00168E  0E3C               	movlw	60
  5412  001690  5CDE               	subwf	postinc2,w,c
  5413  001692  A0D8               	btfss	status,0,c
  5414  001694  D00A               	goto	l5451
  5415  001696                     u5730:
  5416                           
  5417                           ; BSR set to: 0
  5418  001696  0100               	movlb	0	; () banked
  5419  001698  EE20 F002          	lfsr	2,2
  5420  00169C  51E1               	movf	button_timer_interrupt@bt& (0+255),w,b
  5421  00169E  26D9               	addwf	fsr2l,f,c
  5422  0016A0  51E2               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5423  0016A2  22DA               	addwfc	fsr2h,f,c
  5424  0016A4  0100               	movlb	0	; () banked
  5425  0016A6  84DF               	bsf	indf2,2,c
  5426  0016A8  D029               	goto	l5459
  5427  0016AA                     l5451:
  5428                           
  5429                           ; BSR set to: 0
  5430                           ;My_header\My_button.h: 69: else if (bt->cnt_sw >= 16)bt->flag.long_hold_1 = 1;
  5431  0016AA  C0E1  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5432  0016AE  C0E2  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5433  0016B2  0E01               	movlw	1
  5434  0016B4  50DB               	movf	plusw2,w,c
  5435  0016B6  E104               	bnz	u5740
  5436  0016B8  0E10               	movlw	16
  5437  0016BA  5CDE               	subwf	postinc2,w,c
  5438  0016BC  A0D8               	btfss	status,0,c
  5439  0016BE  D00A               	goto	l5455
  5440  0016C0                     u5740:
  5441                           
  5442                           ; BSR set to: 0
  5443  0016C0  0100               	movlb	0	; () banked
  5444  0016C2  EE20 F002          	lfsr	2,2
  5445  0016C6  51E1               	movf	button_timer_interrupt@bt& (0+255),w,b
  5446  0016C8  26D9               	addwf	fsr2l,f,c
  5447  0016CA  51E2               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5448  0016CC  22DA               	addwfc	fsr2h,f,c
  5449  0016CE  0100               	movlb	0	; () banked
  5450  0016D0  82DF               	bsf	indf2,1,c
  5451  0016D2  D014               	goto	l5459
  5452  0016D4                     l5455:
  5453                           
  5454                           ; BSR set to: 0
  5455                           ;My_header\My_button.h: 70: else if (bt->cnt_sw >= 2)bt->flag.press = 1;
  5456  0016D4  C0E1  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5457  0016D8  C0E2  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5458  0016DC  0E01               	movlw	1
  5459  0016DE  50DB               	movf	plusw2,w,c
  5460  0016E0  E104               	bnz	u5750
  5461  0016E2  0E02               	movlw	2
  5462  0016E4  5CDE               	subwf	postinc2,w,c
  5463  0016E6  A0D8               	btfss	status,0,c
  5464  0016E8  D009               	goto	l5459
  5465  0016EA                     u5750:
  5466                           
  5467                           ; BSR set to: 0
  5468  0016EA  0100               	movlb	0	; () banked
  5469  0016EC  EE20 F002          	lfsr	2,2
  5470  0016F0  51E1               	movf	button_timer_interrupt@bt& (0+255),w,b
  5471  0016F2  26D9               	addwf	fsr2l,f,c
  5472  0016F4  51E2               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5473  0016F6  22DA               	addwfc	fsr2h,f,c
  5474  0016F8  0100               	movlb	0	; () banked
  5475  0016FA  80DF               	bsf	indf2,0,c
  5476  0016FC                     l5459:
  5477                           
  5478                           ; BSR set to: 0
  5479                           ;My_header\My_button.h: 71: bt->cnt_sw = 0;
  5480  0016FC  C0E1  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  5481  001700  C0E2  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  5482  001704  0E00               	movlw	0
  5483  001706  6EDE               	movwf	postinc2,c
  5484  001708  0E00               	movlw	0
  5485  00170A  6EDD               	movwf	postdec2,c
  5486                           
  5487                           ; BSR set to: 0
  5488                           ;My_header\My_button.h: 72: bt->flags &= 0x00FF;
  5489  00170C  0100               	movlb	0	; () banked
  5490  00170E  EE20 F002          	lfsr	2,2
  5491  001712  51E1               	movf	button_timer_interrupt@bt& (0+255),w,b
  5492  001714  26D9               	addwf	fsr2l,f,c
  5493  001716  51E2               	movf	(button_timer_interrupt@bt+1)& (0+255),w,b
  5494  001718  22DA               	addwfc	fsr2h,f,c
  5495  00171A  0EFF               	movlw	255
  5496  00171C  16DE               	andwf	postinc2,f,c
  5497  00171E  0E00               	movlw	0
  5498  001720  16DD               	andwf	postdec2,f,c
  5499  001722  0012               	return	
  5500  001724                     __end_of_button_timer_interrupt:
  5501                           	opt stack 0
  5502                           tblptru	equ	0xFF8
  5503                           tblptrh	equ	0xFF7
  5504                           tblptrl	equ	0xFF6
  5505                           tablat	equ	0xFF5
  5506                           prodh	equ	0xFF4
  5507                           prodl	equ	0xFF3
  5508                           intcon	equ	0xFF2
  5509                           postinc0	equ	0xFEE
  5510                           wreg	equ	0xFE8
  5511                           indf1	equ	0xFE7
  5512                           fsr1h	equ	0xFE2
  5513                           fsr1l	equ	0xFE1
  5514                           indf2	equ	0xFDF
  5515                           postinc2	equ	0xFDE
  5516                           postdec2	equ	0xFDD
  5517                           plusw2	equ	0xFDB
  5518                           fsr2h	equ	0xFDA
  5519                           fsr2l	equ	0xFD9
  5520                           status	equ	0xFD8
  5521                           
  5522 ;; *************** function ___lwdiv *****************
  5523 ;; Defined at:
  5524 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5525 ;; Parameters:    Size  Location     Type
  5526 ;;  dividend        2   19[BANK0 ] unsigned int 
  5527 ;;  divisor         2   21[BANK0 ] unsigned int 
  5528 ;; Auto vars:     Size  Location     Type
  5529 ;;  quotient        2   24[BANK0 ] unsigned int 
  5530 ;;  counter         1   23[BANK0 ] unsigned char 
  5531 ;; Return value:  Size  Location     Type
  5532 ;;                  2   19[BANK0 ] unsigned int 
  5533 ;; Registers used:
  5534 ;;		wreg, status,2, status,0
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/0
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5540 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5541 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5543 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5544 ;;Total ram usage:        7 bytes
  5545 ;; Hardware stack levels used:    1
  5546 ;; Hardware stack levels required when called:    4
  5547 ;; This function calls:
  5548 ;;		Nothing
  5549 ;; This function is called by:
  5550 ;;		_my_utoa
  5551 ;;		_display_LCD
  5552 ;;		_ctmu_loop
  5553 ;;		_main
  5554 ;;		_ringbuf_put_num
  5555 ;;		_tx_sendn
  5556 ;; This function uses a non-reentrant model
  5557 ;;
  5558                           
  5559                           	psect	text20
  5560  0037E2                     __ptext20:
  5561                           	opt stack 0
  5562  0037E2                     ___lwdiv:
  5563                           	opt stack 23
  5564                           
  5565                           ; BSR set to: 0
  5566                           ;incstack = 0
  5567  0037E2  0E00               	movlw	0
  5568  0037E4  0100               	movlb	0	; () banked
  5569  0037E6  6FE0               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5570  0037E8  0E00               	movlw	0
  5571  0037EA  6FDF               	movwf	___lwdiv@quotient& (0+255),b
  5572                           
  5573                           ; BSR set to: 0
  5574  0037EC  0100               	movlb	0	; () banked
  5575  0037EE  51DC               	movf	___lwdiv@divisor& (0+255),w,b
  5576  0037F0  0100               	movlb	0	; () banked
  5577  0037F2  11DD               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  5578  0037F4  B4D8               	btfsc	status,2,c
  5579  0037F6  D02C               	goto	l1184
  5580                           
  5581                           ; BSR set to: 0
  5582  0037F8  0E01               	movlw	1
  5583  0037FA  0100               	movlb	0	; () banked
  5584  0037FC  6FDE               	movwf	___lwdiv@counter& (0+255),b
  5585  0037FE  D006               	goto	l5137
  5586  003800                     l5135:
  5587                           
  5588                           ; BSR set to: 0
  5589  003800  0100               	movlb	0	; () banked
  5590  003802  90D8               	bcf	status,0,c
  5591  003804  37DC               	rlcf	___lwdiv@divisor& (0+255),f,b
  5592  003806  37DD               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  5593  003808  0100               	movlb	0	; () banked
  5594  00380A  2BDE               	incf	___lwdiv@counter& (0+255),f,b
  5595  00380C                     l5137:
  5596                           
  5597                           ; BSR set to: 0
  5598  00380C  0100               	movlb	0	; () banked
  5599  00380E  AFDD               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  5600  003810  D7F7               	goto	l5135
  5601  003812                     l5139:
  5602                           
  5603                           ; BSR set to: 0
  5604  003812  0100               	movlb	0	; () banked
  5605  003814  90D8               	bcf	status,0,c
  5606  003816  37DF               	rlcf	___lwdiv@quotient& (0+255),f,b
  5607  003818  37E0               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  5608                           
  5609                           ; BSR set to: 0
  5610  00381A  0100               	movlb	0	; () banked
  5611  00381C  51DC               	movf	___lwdiv@divisor& (0+255),w,b
  5612  00381E  0100               	movlb	0	; () banked
  5613  003820  5DDA               	subwf	___lwdiv@dividend& (0+255),w,b
  5614  003822  0100               	movlb	0	; () banked
  5615  003824  51DD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5616  003826  0100               	movlb	0	; () banked
  5617  003828  59DB               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  5618  00382A  A0D8               	btfss	status,0,c
  5619  00382C  D00A               	goto	l5147
  5620                           
  5621                           ; BSR set to: 0
  5622  00382E  0100               	movlb	0	; () banked
  5623  003830  51DC               	movf	___lwdiv@divisor& (0+255),w,b
  5624  003832  0100               	movlb	0	; () banked
  5625  003834  5FDA               	subwf	___lwdiv@dividend& (0+255),f,b
  5626  003836  0100               	movlb	0	; () banked
  5627  003838  51DD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5628  00383A  0100               	movlb	0	; () banked
  5629  00383C  5BDB               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  5630                           
  5631                           ; BSR set to: 0
  5632  00383E  0100               	movlb	0	; () banked
  5633  003840  81DF               	bsf	___lwdiv@quotient& (0+255),0,b
  5634  003842                     l5147:
  5635                           
  5636                           ; BSR set to: 0
  5637  003842  0100               	movlb	0	; () banked
  5638  003844  90D8               	bcf	status,0,c
  5639  003846  33DD               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  5640  003848  33DC               	rrcf	___lwdiv@divisor& (0+255),f,b
  5641                           
  5642                           ; BSR set to: 0
  5643  00384A  0100               	movlb	0	; () banked
  5644  00384C  2FDE               	decfsz	___lwdiv@counter& (0+255),f,b
  5645  00384E  D7E1               	goto	l5139
  5646  003850                     l1184:
  5647                           
  5648                           ; BSR set to: 0
  5649  003850  C0DF  F0DA         	movff	___lwdiv@quotient,?___lwdiv
  5650  003854  C0E0  F0DB         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5651                           
  5652                           ; BSR set to: 0
  5653  003858  0012               	return		;funcret
  5654  00385A                     __end_of___lwdiv:
  5655                           	opt stack 0
  5656                           tblptru	equ	0xFF8
  5657                           tblptrh	equ	0xFF7
  5658                           tblptrl	equ	0xFF6
  5659                           tablat	equ	0xFF5
  5660                           prodh	equ	0xFF4
  5661                           prodl	equ	0xFF3
  5662                           intcon	equ	0xFF2
  5663                           postinc0	equ	0xFEE
  5664                           wreg	equ	0xFE8
  5665                           indf1	equ	0xFE7
  5666                           fsr1h	equ	0xFE2
  5667                           fsr1l	equ	0xFE1
  5668                           indf2	equ	0xFDF
  5669                           postinc2	equ	0xFDE
  5670                           postdec2	equ	0xFDD
  5671                           plusw2	equ	0xFDB
  5672                           fsr2h	equ	0xFDA
  5673                           fsr2l	equ	0xFD9
  5674                           status	equ	0xFD8
  5675                           
  5676 ;; *************** function _CTMU_read *****************
  5677 ;; Defined at:
  5678 ;;		line 304 in file "../My_header\My_header.h"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;  ch              1    wreg     unsigned char 
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;  ch              1   13[BANK0 ] unsigned char 
  5683 ;;  i               1   18[BANK0 ] unsigned char 
  5684 ;;  sum             4   14[BANK0 ] unsigned long 
  5685 ;; Return value:  Size  Location     Type
  5686 ;;                  2   30[COMRAM] unsigned int 
  5687 ;; Registers used:
  5688 ;;		wreg, status,2, status,0, cstack
  5689 ;; Tracked objects:
  5690 ;;		On entry : 0/0
  5691 ;;		On exit  : 0/0
  5692 ;;		Unchanged: 0/0
  5693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5694 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5695 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5696 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5697 ;;      Totals:         3       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5698 ;;Total ram usage:        9 bytes
  5699 ;; Hardware stack levels used:    1
  5700 ;; Hardware stack levels required when called:    5
  5701 ;; This function calls:
  5702 ;;		___lldiv
  5703 ;; This function is called by:
  5704 ;;		_ctmu_loop
  5705 ;;		_main
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           	psect	text21
  5710  002E10                     __ptext21:
  5711                           	opt stack 0
  5712  002E10                     _CTMU_read:
  5713                           	opt stack 23
  5714                           
  5715                           ; BSR set to: 0
  5716                           ;incstack = 0
  5717                           ;CTMU_read@ch stored from wreg
  5718  002E10  0100               	movlb	0	; () banked
  5719  002E12  6FD4               	movwf	CTMU_read@ch& (0+255),b
  5720                           
  5721                           ;My_header\My_header.h: 305: uint32_t sum = 0;
  5722  002E14  0E00               	movlw	0
  5723  002E16  0100               	movlb	0	; () banked
  5724  002E18  6FD5               	movwf	CTMU_read@sum& (0+255),b
  5725  002E1A  0E00               	movlw	0
  5726  002E1C  6FD6               	movwf	(CTMU_read@sum+1)& (0+255),b
  5727  002E1E  0E00               	movlw	0
  5728  002E20  6FD7               	movwf	(CTMU_read@sum+2)& (0+255),b
  5729  002E22  0E00               	movlw	0
  5730  002E24  6FD8               	movwf	(CTMU_read@sum+3)& (0+255),b
  5731                           
  5732                           ;My_header\My_header.h: 306: for (uint8_t i = 0; i < 10; i++) {
  5733  002E26  0E00               	movlw	0
  5734  002E28  0100               	movlb	0	; () banked
  5735  002E2A  6FD9               	movwf	CTMU_read@i& (0+255),b
  5736  002E2C                     l5365:
  5737                           
  5738                           ; BSR set to: 0
  5739  002E2C  0E09               	movlw	9
  5740  002E2E  0100               	movlb	0	; () banked
  5741  002E30  65D9               	cpfsgt	CTMU_read@i& (0+255),b
  5742  002E32  D001               	goto	l5369
  5743  002E34  D029               	goto	l5397
  5744  002E36                     l5369:
  5745                           
  5746                           ; BSR set to: 0
  5747                           ;My_header\My_header.h: 307: ADCON0bits.CHS = ch;
  5748  002E36  C0D4  F021         	movff	CTMU_read@ch,??_CTMU_read
  5749  002E3A  4621               	rlncf	??_CTMU_read,f,c
  5750  002E3C  4621               	rlncf	??_CTMU_read,f,c
  5751  002E3E  50C2               	movf	4034,w,c	;volatile
  5752  002E40  1821               	xorwf	??_CTMU_read,w,c
  5753  002E42  0BC3               	andlw	-61
  5754  002E44  1821               	xorwf	??_CTMU_read,w,c
  5755  002E46  6EC2               	movwf	4034,c	;volatile
  5756                           
  5757                           ; BSR set to: 0
  5758                           ;My_header\My_header.h: 308: CTMUCONHbits.CTMUEN = 1;
  5759  002E48  8EB3               	bsf	4019,7,c	;volatile
  5760                           
  5761                           ; BSR set to: 0
  5762                           ;My_header\My_header.h: 309: CTMUCONLbits.EDG1STAT = 0;
  5763  002E4A  90B2               	bcf	4018,0,c	;volatile
  5764                           
  5765                           ; BSR set to: 0
  5766                           ;My_header\My_header.h: 310: CTMUCONLbits.EDG2STAT = 0;
  5767  002E4C  92B2               	bcf	4018,1,c	;volatile
  5768                           
  5769                           ; BSR set to: 0
  5770                           ;My_header\My_header.h: 313: CTMUCONHbits.IDISSEN = 1;
  5771  002E4E  82B3               	bsf	4019,1,c	;volatile
  5772                           
  5773                           ; BSR set to: 0
  5774                           ;My_header\My_header.h: 314: _delay((unsigned long)((20)*(48000000/4000000.0)));
  5775  002E50  0E50               	movlw	80
  5776  002E52                     u6847:
  5777  002E52  2EE8               	decfsz	wreg,f,c
  5778  002E54  D7FE               	goto	u6847
  5779                           
  5780                           ;My_header\My_header.h: 315: CTMUCONHbits.IDISSEN = 0;
  5781  002E56  92B3               	bcf	4019,1,c	;volatile
  5782                           
  5783                           ;My_header\My_header.h: 317: CTMUCONLbits.EDG1STAT = 1;
  5784  002E58  80B2               	bsf	4018,0,c	;volatile
  5785                           
  5786                           ;My_header\My_header.h: 318: _delay((unsigned long)((5)*(48000000/4000000.0)));
  5787  002E5A  0E14               	movlw	20
  5788  002E5C                     u6857:
  5789  002E5C  2EE8               	decfsz	wreg,f,c
  5790  002E5E  D7FE               	goto	u6857
  5791                           
  5792                           ;My_header\My_header.h: 319: CTMUCONLbits.EDG1STAT = 0;
  5793  002E60  90B2               	bcf	4018,0,c	;volatile
  5794                           
  5795                           ;My_header\My_header.h: 321: PIR1bits.ADIF = 0;
  5796  002E62  9C9E               	bcf	3998,6,c	;volatile
  5797                           
  5798                           ;My_header\My_header.h: 322: ADCON0bits.GO = 1;
  5799  002E64  82C2               	bsf	4034,1,c	;volatile
  5800  002E66                     l237:
  5801  002E66  AC9E               	btfss	3998,6,c	;volatile
  5802  002E68  D7FE               	goto	l237
  5803                           
  5804                           ;My_header\My_header.h: 324: sum += ADRES;
  5805  002E6A  50C3               	movf	4035,w,c	;volatile
  5806  002E6C  0100               	movlb	0	; () banked
  5807  002E6E  27D5               	addwf	CTMU_read@sum& (0+255),f,b
  5808  002E70  50C4               	movf	4036,w,c	;volatile
  5809  002E72  0100               	movlb	0	; () banked
  5810  002E74  23D6               	addwfc	(CTMU_read@sum+1)& (0+255),f,b
  5811  002E76  0E00               	movlw	0
  5812  002E78  0100               	movlb	0	; () banked
  5813  002E7A  23D7               	addwfc	(CTMU_read@sum+2)& (0+255),f,b
  5814  002E7C  0E00               	movlw	0
  5815  002E7E  0100               	movlb	0	; () banked
  5816  002E80  23D8               	addwfc	(CTMU_read@sum+3)& (0+255),f,b
  5817  002E82  0100               	movlb	0	; () banked
  5818  002E84  2BD9               	incf	CTMU_read@i& (0+255),f,b
  5819  002E86  D7D2               	goto	l5365
  5820  002E88                     l5397:
  5821                           
  5822                           ; BSR set to: 0
  5823                           ;My_header\My_header.h: 325: }
  5824                           ;My_header\My_header.h: 326: return sum / 10 / 4;
  5825  002E88  C0D5  F0C7         	movff	CTMU_read@sum,___lldiv@dividend
  5826  002E8C  C0D6  F0C8         	movff	CTMU_read@sum+1,___lldiv@dividend+1
  5827  002E90  C0D7  F0C9         	movff	CTMU_read@sum+2,___lldiv@dividend+2
  5828  002E94  C0D8  F0CA         	movff	CTMU_read@sum+3,___lldiv@dividend+3
  5829  002E98  0E0A               	movlw	10
  5830  002E9A  0100               	movlb	0	; () banked
  5831  002E9C  6FCB               	movwf	___lldiv@divisor& (0+255),b
  5832  002E9E  0E00               	movlw	0
  5833  002EA0  6FCC               	movwf	(___lldiv@divisor+1)& (0+255),b
  5834  002EA2  0E00               	movlw	0
  5835  002EA4  6FCD               	movwf	(___lldiv@divisor+2)& (0+255),b
  5836  002EA6  0E00               	movlw	0
  5837  002EA8  6FCE               	movwf	(___lldiv@divisor+3)& (0+255),b
  5838  002EAA  EC67  F017         	call	___lldiv	;wreg free
  5839  002EAE  0E03               	movlw	3
  5840  002EB0  D007               	goto	u5570
  5841  002EB2                     u5575:
  5842  002EB2  0100               	movlb	0	; () banked
  5843  002EB4  90D8               	bcf	status,0,c
  5844  002EB6  33CA               	rrcf	(?___lldiv+3)& (0+255),f,b
  5845  002EB8  33C9               	rrcf	(?___lldiv+2)& (0+255),f,b
  5846  002EBA  0100               	movlb	0	; () banked
  5847  002EBC  33C8               	rrcf	(?___lldiv+1)& (0+255),f,b
  5848  002EBE  33C7               	rrcf	?___lldiv& (0+255),f,b
  5849  002EC0                     u5570:
  5850  002EC0  2EE8               	decfsz	wreg,f,c
  5851  002EC2  D7F7               	goto	u5575
  5852  002EC4  C0C7  F01F         	movff	?___lldiv,?_CTMU_read
  5853  002EC8  C0C8  F020         	movff	?___lldiv+1,?_CTMU_read+1
  5854  002ECC  0012               	return	
  5855  002ECE                     __end_of_CTMU_read:
  5856                           	opt stack 0
  5857                           tblptru	equ	0xFF8
  5858                           tblptrh	equ	0xFF7
  5859                           tblptrl	equ	0xFF6
  5860                           tablat	equ	0xFF5
  5861                           prodh	equ	0xFF4
  5862                           prodl	equ	0xFF3
  5863                           intcon	equ	0xFF2
  5864                           postinc0	equ	0xFEE
  5865                           wreg	equ	0xFE8
  5866                           indf1	equ	0xFE7
  5867                           fsr1h	equ	0xFE2
  5868                           fsr1l	equ	0xFE1
  5869                           indf2	equ	0xFDF
  5870                           postinc2	equ	0xFDE
  5871                           postdec2	equ	0xFDD
  5872                           plusw2	equ	0xFDB
  5873                           fsr2h	equ	0xFDA
  5874                           fsr2l	equ	0xFD9
  5875                           status	equ	0xFD8
  5876                           
  5877 ;; *************** function _RTCC_adjust_time_button *****************
  5878 ;; Defined at:
  5879 ;;		line 363 in file "../My_header\My_RTCC.h"
  5880 ;; Parameters:    Size  Location     Type
  5881 ;;  mode            2   10[BANK1 ] PTR struct button
  5882 ;;		 -> ctm(4), 
  5883 ;;  cnt_inc         2   12[BANK1 ] PTR struct button
  5884 ;;		 -> ct0(4), 
  5885 ;;  cnt_dec         2   14[BANK1 ] PTR struct button
  5886 ;;		 -> ct1(4), 
  5887 ;; Auto vars:     Size  Location     Type
  5888 ;;		None
  5889 ;; Return value:  Size  Location     Type
  5890 ;;		None               void
  5891 ;; Registers used:
  5892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5893 ;; Tracked objects:
  5894 ;;		On entry : 0/0
  5895 ;;		On exit  : 0/0
  5896 ;;		Unchanged: 0/0
  5897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5898 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5901 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5902 ;;Total ram usage:        6 bytes
  5903 ;; Hardware stack levels used:    1
  5904 ;; Hardware stack levels required when called:    9
  5905 ;; This function calls:
  5906 ;;		_RTCC_adjust_time_cursor
  5907 ;;		_RTCC_adjust_time_dec
  5908 ;;		_RTCC_adjust_time_inc
  5909 ;;		_RTCC_adjust_time_toggle
  5910 ;; This function is called by:
  5911 ;;		_normal_mode_loop
  5912 ;; This function uses a non-reentrant model
  5913 ;;
  5914                           
  5915                           	psect	text22
  5916  0025DE                     __ptext22:
  5917                           	opt stack 0
  5918  0025DE                     _RTCC_adjust_time_button:
  5919                           	opt stack 20
  5920                           
  5921                           ;My_header\My_RTCC.h: 364: if (mode->flag.long_holding_3) {
  5922                           
  5923                           ; BSR set to: 0
  5924                           ;incstack = 0
  5925  0025DE  0101               	movlb	1	; () banked
  5926  0025E0  EE20 F003          	lfsr	2,3
  5927  0025E4  510A               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  5928  0025E6  26D9               	addwf	fsr2l,f,c
  5929  0025E8  510B               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  5930  0025EA  22DA               	addwfc	fsr2h,f,c
  5931  0025EC  0101               	movlb	1	; () banked
  5932  0025EE  A6DF               	btfss	indf2,3,c
  5933  0025F0  D02C               	goto	l5737
  5934                           
  5935                           ; BSR set to: 1
  5936                           ;My_header\My_RTCC.h: 365: mode->flag.long_holding_3 = 0;
  5937  0025F2  0101               	movlb	1	; () banked
  5938  0025F4  EE20 F003          	lfsr	2,3
  5939  0025F8  510A               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  5940  0025FA  26D9               	addwf	fsr2l,f,c
  5941  0025FC  510B               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  5942  0025FE  22DA               	addwfc	fsr2h,f,c
  5943  002600  0101               	movlb	1	; () banked
  5944  002602  96DF               	bcf	indf2,3,c
  5945                           
  5946                           ; BSR set to: 1
  5947                           ;My_header\My_RTCC.h: 366: RTCC_adjust_time_toggle();
  5948  002604  EC84  F020         	call	_RTCC_adjust_time_toggle	;wreg free
  5949                           
  5950                           ;My_header\My_RTCC.h: 367: mode->flags = 0;
  5951  002608  0101               	movlb	1	; () banked
  5952  00260A  EE20 F002          	lfsr	2,2
  5953  00260E  510A               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  5954  002610  26D9               	addwf	fsr2l,f,c
  5955  002612  510B               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  5956  002614  22DA               	addwfc	fsr2h,f,c
  5957  002616  0E00               	movlw	0
  5958  002618  6EDE               	movwf	postinc2,c
  5959  00261A  0E00               	movlw	0
  5960  00261C  6EDD               	movwf	postdec2,c
  5961                           
  5962                           ; BSR set to: 1
  5963                           ;My_header\My_RTCC.h: 368: cnt_inc->flags = 0;
  5964  00261E  0101               	movlb	1	; () banked
  5965  002620  EE20 F002          	lfsr	2,2
  5966  002624  510C               	movf	RTCC_adjust_time_button@cnt_inc& (0+255),w,b
  5967  002626  26D9               	addwf	fsr2l,f,c
  5968  002628  510D               	movf	(RTCC_adjust_time_button@cnt_inc+1)& (0+255),w,b
  5969  00262A  22DA               	addwfc	fsr2h,f,c
  5970  00262C  0E00               	movlw	0
  5971  00262E  6EDE               	movwf	postinc2,c
  5972  002630  0E00               	movlw	0
  5973  002632  6EDD               	movwf	postdec2,c
  5974                           
  5975                           ; BSR set to: 1
  5976                           ;My_header\My_RTCC.h: 369: cnt_dec->flags = 0;
  5977  002634  0101               	movlb	1	; () banked
  5978  002636  EE20 F002          	lfsr	2,2
  5979  00263A  510E               	movf	RTCC_adjust_time_button@cnt_dec& (0+255),w,b
  5980  00263C  26D9               	addwf	fsr2l,f,c
  5981  00263E  510F               	movf	(RTCC_adjust_time_button@cnt_dec+1)& (0+255),w,b
  5982  002640  22DA               	addwfc	fsr2h,f,c
  5983  002642  0E00               	movlw	0
  5984  002644  6EDE               	movwf	postinc2,c
  5985  002646  0E00               	movlw	0
  5986  002648  6EDD               	movwf	postdec2,c
  5987  00264A                     l5737:
  5988                           
  5989                           ; BSR set to: 1
  5990                           ;My_header\My_RTCC.h: 370: }
  5991                           ;My_header\My_RTCC.h: 371: if (edit_flag.flags) {
  5992  00264A  0100               	movlb	0	; () banked
  5993  00264C  51A0               	movf	_edit_flag& (0+255),w,b
  5994  00264E  B4D8               	btfsc	status,2,c
  5995  002650  0012               	return	
  5996                           
  5997                           ; BSR set to: 0
  5998                           ;My_header\My_RTCC.h: 372: if (mode->flag.press) {
  5999  002652  0101               	movlb	1	; () banked
  6000  002654  EE20 F002          	lfsr	2,2
  6001  002658  510A               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  6002  00265A  26D9               	addwf	fsr2l,f,c
  6003  00265C  510B               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  6004  00265E  22DA               	addwfc	fsr2h,f,c
  6005  002660  0101               	movlb	1	; () banked
  6006  002662  A0DF               	btfss	indf2,0,c
  6007  002664  D00B               	goto	l5745
  6008                           
  6009                           ; BSR set to: 1
  6010                           ;My_header\My_RTCC.h: 373: mode->flag.press = 0;
  6011  002666  0101               	movlb	1	; () banked
  6012  002668  EE20 F002          	lfsr	2,2
  6013  00266C  510A               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  6014  00266E  26D9               	addwf	fsr2l,f,c
  6015  002670  510B               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  6016  002672  22DA               	addwfc	fsr2h,f,c
  6017  002674  0101               	movlb	1	; () banked
  6018  002676  90DF               	bcf	indf2,0,c
  6019                           
  6020                           ; BSR set to: 1
  6021                           ;My_header\My_RTCC.h: 374: RTCC_adjust_time_cursor();
  6022  002678  EC9A  F01C         	call	_RTCC_adjust_time_cursor	;wreg free
  6023  00267C                     l5745:
  6024                           
  6025                           ;My_header\My_RTCC.h: 375: }
  6026                           ;My_header\My_RTCC.h: 376: if (cnt_inc->flag.press) {
  6027  00267C  0101               	movlb	1	; () banked
  6028  00267E  EE20 F002          	lfsr	2,2
  6029  002682  510C               	movf	RTCC_adjust_time_button@cnt_inc& (0+255),w,b
  6030  002684  26D9               	addwf	fsr2l,f,c
  6031  002686  510D               	movf	(RTCC_adjust_time_button@cnt_inc+1)& (0+255),w,b
  6032  002688  22DA               	addwfc	fsr2h,f,c
  6033  00268A  0101               	movlb	1	; () banked
  6034  00268C  A0DF               	btfss	indf2,0,c
  6035  00268E  D017               	goto	l5751
  6036                           
  6037                           ; BSR set to: 1
  6038                           ;My_header\My_RTCC.h: 377: cnt_inc->flag.press = 0;
  6039  002690  0101               	movlb	1	; () banked
  6040  002692  EE20 F002          	lfsr	2,2
  6041  002696  510C               	movf	RTCC_adjust_time_button@cnt_inc& (0+255),w,b
  6042  002698  26D9               	addwf	fsr2l,f,c
  6043  00269A  510D               	movf	(RTCC_adjust_time_button@cnt_inc+1)& (0+255),w,b
  6044  00269C  22DA               	addwfc	fsr2h,f,c
  6045  00269E  0101               	movlb	1	; () banked
  6046  0026A0  90DF               	bcf	indf2,0,c
  6047                           
  6048                           ; BSR set to: 1
  6049                           ;My_header\My_RTCC.h: 378: RTCC_adjust_time_inc(&caltime_now, &epoch_now);
  6050  0026A2  0EAC               	movlw	low _caltime_now
  6051  0026A4  0101               	movlb	1	; () banked
  6052  0026A6  6F00               	movwf	RTCC_adjust_time_inc@ct& (0+255),b
  6053  0026A8  0E00               	movlw	high _caltime_now
  6054  0026AA  0101               	movlb	1	; () banked
  6055  0026AC  6F01               	movwf	(RTCC_adjust_time_inc@ct+1)& (0+255),b
  6056  0026AE  0EC3               	movlw	low _epoch_now
  6057  0026B0  0101               	movlb	1	; () banked
  6058  0026B2  6F02               	movwf	RTCC_adjust_time_inc@ep& (0+255),b
  6059  0026B4  0E00               	movlw	high _epoch_now
  6060  0026B6  0101               	movlb	1	; () banked
  6061  0026B8  6F03               	movwf	(RTCC_adjust_time_inc@ep+1)& (0+255),b
  6062  0026BA  EC0D  F00E         	call	_RTCC_adjust_time_inc	;wreg free
  6063  0026BE                     l5751:
  6064                           
  6065                           ;My_header\My_RTCC.h: 379: }
  6066                           ;My_header\My_RTCC.h: 380: if (cnt_dec->flag.press) {
  6067  0026BE  0101               	movlb	1	; () banked
  6068  0026C0  EE20 F002          	lfsr	2,2
  6069  0026C4  510E               	movf	RTCC_adjust_time_button@cnt_dec& (0+255),w,b
  6070  0026C6  26D9               	addwf	fsr2l,f,c
  6071  0026C8  510F               	movf	(RTCC_adjust_time_button@cnt_dec+1)& (0+255),w,b
  6072  0026CA  22DA               	addwfc	fsr2h,f,c
  6073  0026CC  0101               	movlb	1	; () banked
  6074  0026CE  A0DF               	btfss	indf2,0,c
  6075  0026D0  0012               	return	
  6076                           
  6077                           ; BSR set to: 1
  6078                           ;My_header\My_RTCC.h: 381: cnt_dec->flag.press = 0;
  6079  0026D2  0101               	movlb	1	; () banked
  6080  0026D4  EE20 F002          	lfsr	2,2
  6081  0026D8  510E               	movf	RTCC_adjust_time_button@cnt_dec& (0+255),w,b
  6082  0026DA  26D9               	addwf	fsr2l,f,c
  6083  0026DC  510F               	movf	(RTCC_adjust_time_button@cnt_dec+1)& (0+255),w,b
  6084  0026DE  22DA               	addwfc	fsr2h,f,c
  6085  0026E0  0101               	movlb	1	; () banked
  6086  0026E2  90DF               	bcf	indf2,0,c
  6087                           
  6088                           ; BSR set to: 1
  6089                           ;My_header\My_RTCC.h: 382: RTCC_adjust_time_dec(&caltime_now, &epoch_now);
  6090  0026E4  0EAC               	movlw	low _caltime_now
  6091  0026E6  0101               	movlb	1	; () banked
  6092  0026E8  6F00               	movwf	RTCC_adjust_time_dec@ct& (0+255),b
  6093  0026EA  0E00               	movlw	high _caltime_now
  6094  0026EC  0101               	movlb	1	; () banked
  6095  0026EE  6F01               	movwf	(RTCC_adjust_time_dec@ct+1)& (0+255),b
  6096  0026F0  0EC3               	movlw	low _epoch_now
  6097  0026F2  0101               	movlb	1	; () banked
  6098  0026F4  6F02               	movwf	RTCC_adjust_time_dec@ep& (0+255),b
  6099  0026F6  0E00               	movlw	high _epoch_now
  6100  0026F8  0101               	movlb	1	; () banked
  6101  0026FA  6F03               	movwf	(RTCC_adjust_time_dec@ep+1)& (0+255),b
  6102  0026FC  EC3F  F00F         	call	_RTCC_adjust_time_dec	;wreg free
  6103  002700  0012               	return	
  6104  002702                     __end_of_RTCC_adjust_time_button:
  6105                           	opt stack 0
  6106                           tblptru	equ	0xFF8
  6107                           tblptrh	equ	0xFF7
  6108                           tblptrl	equ	0xFF6
  6109                           tablat	equ	0xFF5
  6110                           prodh	equ	0xFF4
  6111                           prodl	equ	0xFF3
  6112                           intcon	equ	0xFF2
  6113                           postinc0	equ	0xFEE
  6114                           wreg	equ	0xFE8
  6115                           indf1	equ	0xFE7
  6116                           fsr1h	equ	0xFE2
  6117                           fsr1l	equ	0xFE1
  6118                           indf2	equ	0xFDF
  6119                           postinc2	equ	0xFDE
  6120                           postdec2	equ	0xFDD
  6121                           plusw2	equ	0xFDB
  6122                           fsr2h	equ	0xFDA
  6123                           fsr2l	equ	0xFD9
  6124                           status	equ	0xFD8
  6125                           
  6126 ;; *************** function _RTCC_adjust_time_toggle *****************
  6127 ;; Defined at:
  6128 ;;		line 303 in file "../My_header\My_RTCC.h"
  6129 ;; Parameters:    Size  Location     Type
  6130 ;;		None
  6131 ;; Auto vars:     Size  Location     Type
  6132 ;;		None
  6133 ;; Return value:  Size  Location     Type
  6134 ;;		None               void
  6135 ;; Registers used:
  6136 ;;		wreg, status,2
  6137 ;; Tracked objects:
  6138 ;;		On entry : 0/0
  6139 ;;		On exit  : 0/0
  6140 ;;		Unchanged: 0/0
  6141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6146 ;;Total ram usage:        0 bytes
  6147 ;; Hardware stack levels used:    1
  6148 ;; Hardware stack levels required when called:    4
  6149 ;; This function calls:
  6150 ;;		Nothing
  6151 ;; This function is called by:
  6152 ;;		_RTCC_adjust_time_button
  6153 ;; This function uses a non-reentrant model
  6154 ;;
  6155                           
  6156                           	psect	text23
  6157  004108                     __ptext23:
  6158                           	opt stack 0
  6159  004108                     _RTCC_adjust_time_toggle:
  6160                           	opt stack 24
  6161                           
  6162                           ;My_header\My_RTCC.h: 304: if (edit_flag.flags) {
  6163                           
  6164                           ;incstack = 0
  6165  004108  0100               	movlb	0	; () banked
  6166  00410A  51A0               	movf	_edit_flag& (0+255),w,b
  6167  00410C  B4D8               	btfsc	status,2,c
  6168  00410E  D004               	goto	l493
  6169                           
  6170                           ; BSR set to: 0
  6171                           ;My_header\My_RTCC.h: 305: edit_flag.flags = 0;
  6172  004110  0E00               	movlw	0
  6173  004112  0100               	movlb	0	; () banked
  6174  004114  6FA0               	movwf	_edit_flag& (0+255),b
  6175                           
  6176                           ;My_header\My_RTCC.h: 306: } else {
  6177  004116  0012               	return	
  6178  004118                     l493:
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;My_header\My_RTCC.h: 307: edit_flag.flag.ss = 1;
  6182  004118  0100               	movlb	0	; () banked
  6183  00411A  81A0               	bsf	_edit_flag& (0+255),0,b
  6184  00411C  0012               	return	
  6185  00411E                     __end_of_RTCC_adjust_time_toggle:
  6186                           	opt stack 0
  6187                           tblptru	equ	0xFF8
  6188                           tblptrh	equ	0xFF7
  6189                           tblptrl	equ	0xFF6
  6190                           tablat	equ	0xFF5
  6191                           prodh	equ	0xFF4
  6192                           prodl	equ	0xFF3
  6193                           intcon	equ	0xFF2
  6194                           postinc0	equ	0xFEE
  6195                           wreg	equ	0xFE8
  6196                           indf1	equ	0xFE7
  6197                           fsr1h	equ	0xFE2
  6198                           fsr1l	equ	0xFE1
  6199                           indf2	equ	0xFDF
  6200                           postinc2	equ	0xFDE
  6201                           postdec2	equ	0xFDD
  6202                           plusw2	equ	0xFDB
  6203                           fsr2h	equ	0xFDA
  6204                           fsr2l	equ	0xFD9
  6205                           status	equ	0xFD8
  6206                           
  6207 ;; *************** function _RTCC_adjust_time_inc *****************
  6208 ;; Defined at:
  6209 ;;		line 321 in file "../My_header\My_RTCC.h"
  6210 ;; Parameters:    Size  Location     Type
  6211 ;;  ct              2    0[BANK1 ] PTR struct .
  6212 ;;		 -> caltime_now(7), 
  6213 ;;  ep              2    2[BANK1 ] PTR unsigned long 
  6214 ;;		 -> epoch_now(4), 
  6215 ;; Auto vars:     Size  Location     Type
  6216 ;;  i               1    8[BANK1 ] unsigned char 
  6217 ;;  i               1    9[BANK1 ] unsigned char 
  6218 ;; Return value:  Size  Location     Type
  6219 ;;		None               void
  6220 ;; Registers used:
  6221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6222 ;; Tracked objects:
  6223 ;;		On entry : 0/0
  6224 ;;		On exit  : 0/0
  6225 ;;		Unchanged: 0/0
  6226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6227 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6228 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6229 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6230 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6231 ;;Total ram usage:       10 bytes
  6232 ;; Hardware stack levels used:    1
  6233 ;; Hardware stack levels required when called:    8
  6234 ;; This function calls:
  6235 ;;		_RTCC_from_RTCC
  6236 ;;		_RTCC_from_epoch
  6237 ;;		___lmul
  6238 ;;		_month_length
  6239 ;; This function is called by:
  6240 ;;		_RTCC_adjust_time_button
  6241 ;; This function uses a non-reentrant model
  6242 ;;
  6243                           
  6244                           	psect	text24
  6245  001C1A                     __ptext24:
  6246                           	opt stack 0
  6247  001C1A                     _RTCC_adjust_time_inc:
  6248                           	opt stack 20
  6249                           
  6250                           ;My_header\My_RTCC.h: 322: RTCC_from_RTCC(ct, ep);
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;incstack = 0
  6254  001C1A  C100  F0EF         	movff	RTCC_adjust_time_inc@ct,RTCC_from_RTCC@ct
  6255  001C1E  C101  F0F0         	movff	RTCC_adjust_time_inc@ct+1,RTCC_from_RTCC@ct+1
  6256  001C22  C102  F0F1         	movff	RTCC_adjust_time_inc@ep,RTCC_from_RTCC@ep
  6257  001C26  C103  F0F2         	movff	RTCC_adjust_time_inc@ep+1,RTCC_from_RTCC@ep+1
  6258  001C2A  EC3C  F020         	call	_RTCC_from_RTCC	;wreg free
  6259                           
  6260                           ;My_header\My_RTCC.h: 323: if (edit_flag.flag.ss) *ep += 1;
  6261  001C2E  0100               	movlb	0	; () banked
  6262  001C30  A1A0               	btfss	_edit_flag& (0+255),0,b
  6263  001C32  D009               	goto	l5503
  6264                           
  6265                           ; BSR set to: 0
  6266  001C34  C102  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6267  001C38  C103  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6268  001C3C  2ADE               	incf	postinc2,f,c
  6269  001C3E  0E00               	movlw	0
  6270  001C40  22DE               	addwfc	postinc2,f,c
  6271  001C42  22DE               	addwfc	postinc2,f,c
  6272  001C44  22DE               	addwfc	postinc2,f,c
  6273  001C46                     l5503:
  6274                           
  6275                           ; BSR set to: 0
  6276                           ;My_header\My_RTCC.h: 324: if (edit_flag.flag.mm) *ep += ((epoch_t)60);
  6277  001C46  0100               	movlb	0	; () banked
  6278  001C48  A3A0               	btfss	_edit_flag& (0+255),1,b
  6279  001C4A  D00A               	goto	l5507
  6280                           
  6281                           ; BSR set to: 0
  6282  001C4C  0E3C               	movlw	60
  6283  001C4E  C102  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6284  001C52  C103  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6285  001C56  26DE               	addwf	postinc2,f,c
  6286  001C58  0E00               	movlw	0
  6287  001C5A  22DE               	addwfc	postinc2,f,c
  6288  001C5C  22DE               	addwfc	postinc2,f,c
  6289  001C5E  22DE               	addwfc	postinc2,f,c
  6290  001C60                     l5507:
  6291                           
  6292                           ; BSR set to: 0
  6293                           ;My_header\My_RTCC.h: 325: if (edit_flag.flag.hh) *ep += ((epoch_t)60*60);
  6294  001C60  0100               	movlb	0	; () banked
  6295  001C62  A5A0               	btfss	_edit_flag& (0+255),2,b
  6296  001C64  D00C               	goto	l5511
  6297                           
  6298                           ; BSR set to: 0
  6299  001C66  C102  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6300  001C6A  C103  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6301  001C6E  0E10               	movlw	16
  6302  001C70  26DE               	addwf	postinc2,f,c
  6303  001C72  0E0E               	movlw	14
  6304  001C74  22DE               	addwfc	postinc2,f,c
  6305  001C76  0E00               	movlw	0
  6306  001C78  22DE               	addwfc	postinc2,f,c
  6307  001C7A  0E00               	movlw	0
  6308  001C7C  22DE               	addwfc	postinc2,f,c
  6309  001C7E                     l5511:
  6310                           
  6311                           ; BSR set to: 0
  6312                           ;My_header\My_RTCC.h: 326: if (edit_flag.flag.DD) *ep += ((epoch_t)60*60*24);
  6313  001C7E  0100               	movlb	0	; () banked
  6314  001C80  A7A0               	btfss	_edit_flag& (0+255),3,b
  6315  001C82  D00C               	goto	l5515
  6316                           
  6317                           ; BSR set to: 0
  6318  001C84  C102  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6319  001C88  C103  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6320  001C8C  0E80               	movlw	128
  6321  001C8E  26DE               	addwf	postinc2,f,c
  6322  001C90  0E51               	movlw	81
  6323  001C92  22DE               	addwfc	postinc2,f,c
  6324  001C94  0E01               	movlw	1
  6325  001C96  22DE               	addwfc	postinc2,f,c
  6326  001C98  0E00               	movlw	0
  6327  001C9A  22DE               	addwfc	postinc2,f,c
  6328  001C9C                     l5515:
  6329                           
  6330                           ; BSR set to: 0
  6331                           ;My_header\My_RTCC.h: 327: if (edit_flag.flag.MM) *ep += ((epoch_t)60*60*24) * month_len
      +                          gth(ct->YY, ct->MM);
  6332  001C9C  0100               	movlb	0	; () banked
  6333  001C9E  A9A0               	btfss	_edit_flag& (0+255),4,b
  6334  001CA0  D038               	goto	l5519
  6335                           
  6336                           ; BSR set to: 0
  6337  001CA2  0101               	movlb	1	; () banked
  6338  001CA4  EE20 F005          	lfsr	2,5
  6339  001CA8  5100               	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  6340  001CAA  26D9               	addwf	fsr2l,f,c
  6341  001CAC  5101               	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  6342  001CAE  22DA               	addwfc	fsr2h,f,c
  6343  001CB0  50DF               	movf	indf2,w,c
  6344  001CB2  0100               	movlb	0	; () banked
  6345  001CB4  6FC9               	movwf	month_length@month& (0+255),b
  6346  001CB6  0101               	movlb	1	; () banked
  6347  001CB8  EE20 F006          	lfsr	2,6
  6348  001CBC  5100               	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  6349  001CBE  26D9               	addwf	fsr2l,f,c
  6350  001CC0  5101               	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  6351  001CC2  22DA               	addwfc	fsr2h,f,c
  6352  001CC4  50DF               	movf	indf2,w,c
  6353  001CC6  EC3E  F016         	call	_month_length
  6354  001CCA  0101               	movlb	1	; () banked
  6355  001CCC  6F04               	movwf	??_RTCC_adjust_time_inc& (0+255),b
  6356  001CCE  0101               	movlb	1	; () banked
  6357  001CD0  5104               	movf	??_RTCC_adjust_time_inc& (0+255),w,b
  6358  001CD2  0100               	movlb	0	; () banked
  6359  001CD4  6FD4               	movwf	___lmul@multiplier& (0+255),b
  6360  001CD6  6BD5               	clrf	(___lmul@multiplier+1)& (0+255),b
  6361  001CD8  6BD6               	clrf	(___lmul@multiplier+2)& (0+255),b
  6362  001CDA  6BD7               	clrf	(___lmul@multiplier+3)& (0+255),b
  6363  001CDC  0E80               	movlw	128
  6364  001CDE  0100               	movlb	0	; () banked
  6365  001CE0  6FD8               	movwf	___lmul@multiplicand& (0+255),b
  6366  001CE2  0E51               	movlw	81
  6367  001CE4  6FD9               	movwf	(___lmul@multiplicand+1)& (0+255),b
  6368  001CE6  0E01               	movlw	1
  6369  001CE8  6FDA               	movwf	(___lmul@multiplicand+2)& (0+255),b
  6370  001CEA  0E00               	movlw	0
  6371  001CEC  6FDB               	movwf	(___lmul@multiplicand+3)& (0+255),b
  6372  001CEE  EC2D  F01C         	call	___lmul	;wreg free
  6373  001CF2  C102  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6374  001CF6  C103  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6375  001CFA  0100               	movlb	0	; () banked
  6376  001CFC  51D4               	movf	?___lmul& (0+255),w,b
  6377  001CFE  26DE               	addwf	postinc2,f,c
  6378  001D00  0100               	movlb	0	; () banked
  6379  001D02  51D5               	movf	(?___lmul+1)& (0+255),w,b
  6380  001D04  22DE               	addwfc	postinc2,f,c
  6381  001D06  0100               	movlb	0	; () banked
  6382  001D08  51D6               	movf	(?___lmul+2)& (0+255),w,b
  6383  001D0A  22DE               	addwfc	postinc2,f,c
  6384  001D0C  0100               	movlb	0	; () banked
  6385  001D0E  51D7               	movf	(?___lmul+3)& (0+255),w,b
  6386  001D10  22DE               	addwfc	postinc2,f,c
  6387  001D12                     l5519:
  6388                           
  6389                           ; BSR set to: 0
  6390                           ;My_header\My_RTCC.h: 328: if (edit_flag.flag.YY) {
  6391  001D12  0100               	movlb	0	; () banked
  6392  001D14  ABA0               	btfss	_edit_flag& (0+255),5,b
  6393  001D16  D088               	goto	l5541
  6394                           
  6395                           ; BSR set to: 0
  6396                           ;My_header\My_RTCC.h: 329: for (uint8_t i = ct->MM; i <= 12; i++) {
  6397  001D18  0101               	movlb	1	; () banked
  6398  001D1A  EE20 F005          	lfsr	2,5
  6399  001D1E  5100               	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  6400  001D20  26D9               	addwf	fsr2l,f,c
  6401  001D22  5101               	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  6402  001D24  22DA               	addwfc	fsr2h,f,c
  6403  001D26  50DF               	movf	indf2,w,c
  6404  001D28  0101               	movlb	1	; () banked
  6405  001D2A  6F09               	movwf	RTCC_adjust_time_inc@i& (0+255),b
  6406  001D2C                     l5523:
  6407                           
  6408                           ; BSR set to: 1
  6409  001D2C  0E0C               	movlw	12
  6410  001D2E  0101               	movlb	1	; () banked
  6411  001D30  6509               	cpfsgt	RTCC_adjust_time_inc@i& (0+255),b
  6412  001D32  D001               	goto	l5527
  6413  001D34  D033               	goto	l5533
  6414  001D36                     l5527:
  6415                           
  6416                           ; BSR set to: 1
  6417                           ;My_header\My_RTCC.h: 330: *ep += ((epoch_t)60*60*24) * month_length(ct->YY, i);
  6418  001D36  C109  F0C9         	movff	RTCC_adjust_time_inc@i,month_length@month
  6419  001D3A  0101               	movlb	1	; () banked
  6420  001D3C  EE20 F006          	lfsr	2,6
  6421  001D40  5100               	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  6422  001D42  26D9               	addwf	fsr2l,f,c
  6423  001D44  5101               	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  6424  001D46  22DA               	addwfc	fsr2h,f,c
  6425  001D48  50DF               	movf	indf2,w,c
  6426  001D4A  EC3E  F016         	call	_month_length
  6427  001D4E  0101               	movlb	1	; () banked
  6428  001D50  6F04               	movwf	??_RTCC_adjust_time_inc& (0+255),b
  6429  001D52  0101               	movlb	1	; () banked
  6430  001D54  5104               	movf	??_RTCC_adjust_time_inc& (0+255),w,b
  6431  001D56  0100               	movlb	0	; () banked
  6432  001D58  6FD4               	movwf	___lmul@multiplier& (0+255),b
  6433  001D5A  6BD5               	clrf	(___lmul@multiplier+1)& (0+255),b
  6434  001D5C  6BD6               	clrf	(___lmul@multiplier+2)& (0+255),b
  6435  001D5E  6BD7               	clrf	(___lmul@multiplier+3)& (0+255),b
  6436  001D60  0E80               	movlw	128
  6437  001D62  0100               	movlb	0	; () banked
  6438  001D64  6FD8               	movwf	___lmul@multiplicand& (0+255),b
  6439  001D66  0E51               	movlw	81
  6440  001D68  6FD9               	movwf	(___lmul@multiplicand+1)& (0+255),b
  6441  001D6A  0E01               	movlw	1
  6442  001D6C  6FDA               	movwf	(___lmul@multiplicand+2)& (0+255),b
  6443  001D6E  0E00               	movlw	0
  6444  001D70  6FDB               	movwf	(___lmul@multiplicand+3)& (0+255),b
  6445  001D72  EC2D  F01C         	call	___lmul	;wreg free
  6446  001D76  C102  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6447  001D7A  C103  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6448  001D7E  0100               	movlb	0	; () banked
  6449  001D80  51D4               	movf	?___lmul& (0+255),w,b
  6450  001D82  26DE               	addwf	postinc2,f,c
  6451  001D84  0100               	movlb	0	; () banked
  6452  001D86  51D5               	movf	(?___lmul+1)& (0+255),w,b
  6453  001D88  22DE               	addwfc	postinc2,f,c
  6454  001D8A  0100               	movlb	0	; () banked
  6455  001D8C  51D6               	movf	(?___lmul+2)& (0+255),w,b
  6456  001D8E  22DE               	addwfc	postinc2,f,c
  6457  001D90  0100               	movlb	0	; () banked
  6458  001D92  51D7               	movf	(?___lmul+3)& (0+255),w,b
  6459  001D94  22DE               	addwfc	postinc2,f,c
  6460                           
  6461                           ; BSR set to: 0
  6462  001D96  0101               	movlb	1	; () banked
  6463  001D98  2B09               	incf	RTCC_adjust_time_inc@i& (0+255),f,b
  6464  001D9A  D7C8               	goto	l5523
  6465  001D9C                     l5533:
  6466                           
  6467                           ; BSR set to: 1
  6468                           ;My_header\My_RTCC.h: 331: }
  6469                           ;My_header\My_RTCC.h: 332: for (uint8_t i = 1; i < ct->MM; i++) {
  6470  001D9C  0E01               	movlw	1
  6471  001D9E  0101               	movlb	1	; () banked
  6472  001DA0  6F08               	movwf	RTCC_adjust_time_inc@i_2077& (0+255),b
  6473  001DA2  D036               	goto	l5539
  6474  001DA4                     l5535:
  6475                           
  6476                           ; BSR set to: 1
  6477                           ;My_header\My_RTCC.h: 333: *ep += ((epoch_t)60*60*24) * month_length(ct->YY + 1, i);
  6478  001DA4  C108  F0C9         	movff	RTCC_adjust_time_inc@i_2077,month_length@month
  6479  001DA8  0101               	movlb	1	; () banked
  6480  001DAA  EE20 F006          	lfsr	2,6
  6481  001DAE  5100               	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  6482  001DB0  26D9               	addwf	fsr2l,f,c
  6483  001DB2  5101               	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  6484  001DB4  22DA               	addwfc	fsr2h,f,c
  6485  001DB6  50DF               	movf	indf2,w,c
  6486  001DB8  0101               	movlb	1	; () banked
  6487  001DBA  6F04               	movwf	??_RTCC_adjust_time_inc& (0+255),b
  6488  001DBC  0101               	movlb	1	; () banked
  6489  001DBE  2904               	incf	??_RTCC_adjust_time_inc& (0+255),w,b
  6490  001DC0  EC3E  F016         	call	_month_length
  6491  001DC4  0101               	movlb	1	; () banked
  6492  001DC6  6F05               	movwf	(??_RTCC_adjust_time_inc+1)& (0+255),b
  6493  001DC8  0101               	movlb	1	; () banked
  6494  001DCA  5105               	movf	(??_RTCC_adjust_time_inc+1)& (0+255),w,b
  6495  001DCC  0100               	movlb	0	; () banked
  6496  001DCE  6FD4               	movwf	___lmul@multiplier& (0+255),b
  6497  001DD0  6BD5               	clrf	(___lmul@multiplier+1)& (0+255),b
  6498  001DD2  6BD6               	clrf	(___lmul@multiplier+2)& (0+255),b
  6499  001DD4  6BD7               	clrf	(___lmul@multiplier+3)& (0+255),b
  6500  001DD6  0E80               	movlw	128
  6501  001DD8  0100               	movlb	0	; () banked
  6502  001DDA  6FD8               	movwf	___lmul@multiplicand& (0+255),b
  6503  001DDC  0E51               	movlw	81
  6504  001DDE  6FD9               	movwf	(___lmul@multiplicand+1)& (0+255),b
  6505  001DE0  0E01               	movlw	1
  6506  001DE2  6FDA               	movwf	(___lmul@multiplicand+2)& (0+255),b
  6507  001DE4  0E00               	movlw	0
  6508  001DE6  6FDB               	movwf	(___lmul@multiplicand+3)& (0+255),b
  6509  001DE8  EC2D  F01C         	call	___lmul	;wreg free
  6510  001DEC  C102  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6511  001DF0  C103  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6512  001DF4  0100               	movlb	0	; () banked
  6513  001DF6  51D4               	movf	?___lmul& (0+255),w,b
  6514  001DF8  26DE               	addwf	postinc2,f,c
  6515  001DFA  0100               	movlb	0	; () banked
  6516  001DFC  51D5               	movf	(?___lmul+1)& (0+255),w,b
  6517  001DFE  22DE               	addwfc	postinc2,f,c
  6518  001E00  0100               	movlb	0	; () banked
  6519  001E02  51D6               	movf	(?___lmul+2)& (0+255),w,b
  6520  001E04  22DE               	addwfc	postinc2,f,c
  6521  001E06  0100               	movlb	0	; () banked
  6522  001E08  51D7               	movf	(?___lmul+3)& (0+255),w,b
  6523  001E0A  22DE               	addwfc	postinc2,f,c
  6524                           
  6525                           ; BSR set to: 0
  6526  001E0C  0101               	movlb	1	; () banked
  6527  001E0E  2B08               	incf	RTCC_adjust_time_inc@i_2077& (0+255),f,b
  6528  001E10                     l5539:
  6529                           
  6530                           ; BSR set to: 1
  6531  001E10  0101               	movlb	1	; () banked
  6532  001E12  EE20 F005          	lfsr	2,5
  6533  001E16  5100               	movf	RTCC_adjust_time_inc@ct& (0+255),w,b
  6534  001E18  26D9               	addwf	fsr2l,f,c
  6535  001E1A  5101               	movf	(RTCC_adjust_time_inc@ct+1)& (0+255),w,b
  6536  001E1C  22DA               	addwfc	fsr2h,f,c
  6537  001E1E  50DE               	movf	postinc2,w,c
  6538  001E20  0101               	movlb	1	; () banked
  6539  001E22  5D08               	subwf	RTCC_adjust_time_inc@i_2077& (0+255),w,b
  6540  001E24  A0D8               	btfss	status,0,c
  6541  001E26  D7BE               	goto	l5535
  6542  001E28                     l5541:
  6543                           
  6544                           ;My_header\My_RTCC.h: 334: }
  6545                           ;My_header\My_RTCC.h: 335: }
  6546                           ;My_header\My_RTCC.h: 337: if (*ep >= 3155760000)*ep -= 3155760000;
  6547  001E28  C102  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6548  001E2C  C103  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6549  001E30  0E80               	movlw	128
  6550  001E32  5CDE               	subwf	postinc2,w,c
  6551  001E34  0E13               	movlw	19
  6552  001E36  58DE               	subwfb	postinc2,w,c
  6553  001E38  0E19               	movlw	25
  6554  001E3A  58DE               	subwfb	postinc2,w,c
  6555  001E3C  0EBC               	movlw	188
  6556  001E3E  58DE               	subwfb	postinc2,w,c
  6557  001E40  A0D8               	btfss	status,0,c
  6558  001E42  D00C               	goto	l5545
  6559  001E44  C102  FFD9         	movff	RTCC_adjust_time_inc@ep,fsr2l
  6560  001E48  C103  FFDA         	movff	RTCC_adjust_time_inc@ep+1,fsr2h
  6561  001E4C  0E80               	movlw	128
  6562  001E4E  5EDE               	subwf	postinc2,f,c
  6563  001E50  0E13               	movlw	19
  6564  001E52  5ADE               	subwfb	postinc2,f,c
  6565  001E54  0E19               	movlw	25
  6566  001E56  5ADE               	subwfb	postinc2,f,c
  6567  001E58  0EBC               	movlw	188
  6568  001E5A  5ADE               	subwfb	postinc2,f,c
  6569  001E5C                     l5545:
  6570                           
  6571                           ;My_header\My_RTCC.h: 338: RTCC_from_epoch(&caltime_now, &epoch_now);
  6572  001E5C  0EAC               	movlw	low _caltime_now
  6573  001E5E  0100               	movlb	0	; () banked
  6574  001E60  6FF8               	movwf	RTCC_from_epoch@ct& (0+255),b
  6575  001E62  0E00               	movlw	high _caltime_now
  6576  001E64  0100               	movlb	0	; () banked
  6577  001E66  6FF9               	movwf	(RTCC_from_epoch@ct+1)& (0+255),b
  6578  001E68  0EC3               	movlw	low _epoch_now
  6579  001E6A  0100               	movlb	0	; () banked
  6580  001E6C  6FFA               	movwf	RTCC_from_epoch@ep& (0+255),b
  6581  001E6E  0E00               	movlw	high _epoch_now
  6582  001E70  0100               	movlb	0	; () banked
  6583  001E72  6FFB               	movwf	(RTCC_from_epoch@ep+1)& (0+255),b
  6584  001E74  EC1A  F020         	call	_RTCC_from_epoch	;wreg free
  6585                           
  6586                           ;My_header\My_RTCC.h: 339: time_change_flag = 1;
  6587  001E78  0E01               	movlw	1
  6588  001E7A  6E3B               	movwf	_time_change_flag,c
  6589  001E7C  0012               	return		;funcret
  6590  001E7E                     __end_of_RTCC_adjust_time_inc:
  6591                           	opt stack 0
  6592                           tblptru	equ	0xFF8
  6593                           tblptrh	equ	0xFF7
  6594                           tblptrl	equ	0xFF6
  6595                           tablat	equ	0xFF5
  6596                           prodh	equ	0xFF4
  6597                           prodl	equ	0xFF3
  6598                           intcon	equ	0xFF2
  6599                           postinc0	equ	0xFEE
  6600                           wreg	equ	0xFE8
  6601                           indf1	equ	0xFE7
  6602                           fsr1h	equ	0xFE2
  6603                           fsr1l	equ	0xFE1
  6604                           indf2	equ	0xFDF
  6605                           postinc2	equ	0xFDE
  6606                           postdec2	equ	0xFDD
  6607                           plusw2	equ	0xFDB
  6608                           fsr2h	equ	0xFDA
  6609                           fsr2l	equ	0xFD9
  6610                           status	equ	0xFD8
  6611                           
  6612 ;; *************** function _RTCC_adjust_time_dec *****************
  6613 ;; Defined at:
  6614 ;;		line 342 in file "../My_header\My_RTCC.h"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;  ct              2    0[BANK1 ] PTR struct .
  6617 ;;		 -> caltime_now(7), 
  6618 ;;  ep              2    2[BANK1 ] PTR unsigned long 
  6619 ;;		 -> epoch_now(4), 
  6620 ;; Auto vars:     Size  Location     Type
  6621 ;;  i               1    8[BANK1 ] unsigned char 
  6622 ;;  i               1    9[BANK1 ] unsigned char 
  6623 ;; Return value:  Size  Location     Type
  6624 ;;		None               void
  6625 ;; Registers used:
  6626 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6627 ;; Tracked objects:
  6628 ;;		On entry : 0/0
  6629 ;;		On exit  : 0/0
  6630 ;;		Unchanged: 0/0
  6631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6632 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6633 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6634 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6635 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6636 ;;Total ram usage:       10 bytes
  6637 ;; Hardware stack levels used:    1
  6638 ;; Hardware stack levels required when called:    8
  6639 ;; This function calls:
  6640 ;;		_RTCC_from_RTCC
  6641 ;;		_RTCC_from_epoch
  6642 ;;		___lmul
  6643 ;;		_month_length
  6644 ;; This function is called by:
  6645 ;;		_RTCC_adjust_time_button
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649                           	psect	text25
  6650  001E7E                     __ptext25:
  6651                           	opt stack 0
  6652  001E7E                     _RTCC_adjust_time_dec:
  6653                           	opt stack 20
  6654                           
  6655                           ;My_header\My_RTCC.h: 343: RTCC_from_RTCC(ct, ep);
  6656                           
  6657                           ;incstack = 0
  6658  001E7E  C100  F0EF         	movff	RTCC_adjust_time_dec@ct,RTCC_from_RTCC@ct
  6659  001E82  C101  F0F0         	movff	RTCC_adjust_time_dec@ct+1,RTCC_from_RTCC@ct+1
  6660  001E86  C102  F0F1         	movff	RTCC_adjust_time_dec@ep,RTCC_from_RTCC@ep
  6661  001E8A  C103  F0F2         	movff	RTCC_adjust_time_dec@ep+1,RTCC_from_RTCC@ep+1
  6662  001E8E  EC3C  F020         	call	_RTCC_from_RTCC	;wreg free
  6663                           
  6664                           ;My_header\My_RTCC.h: 344: if (edit_flag.flag.ss) *ep -= 1;
  6665  001E92  0100               	movlb	0	; () banked
  6666  001E94  A1A0               	btfss	_edit_flag& (0+255),0,b
  6667  001E96  D009               	goto	l5555
  6668                           
  6669                           ; BSR set to: 0
  6670  001E98  C102  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6671  001E9C  C103  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6672  001EA0  06DE               	decf	postinc2,f,c
  6673  001EA2  0E00               	movlw	0
  6674  001EA4  5ADE               	subwfb	postinc2,f,c
  6675  001EA6  5ADE               	subwfb	postinc2,f,c
  6676  001EA8  5ADE               	subwfb	postinc2,f,c
  6677  001EAA                     l5555:
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;My_header\My_RTCC.h: 345: if (edit_flag.flag.mm) *ep -= ((epoch_t)60);
  6681  001EAA  0100               	movlb	0	; () banked
  6682  001EAC  A3A0               	btfss	_edit_flag& (0+255),1,b
  6683  001EAE  D00A               	goto	l5559
  6684                           
  6685                           ; BSR set to: 0
  6686  001EB0  0E3C               	movlw	60
  6687  001EB2  C102  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6688  001EB6  C103  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6689  001EBA  5EDE               	subwf	postinc2,f,c
  6690  001EBC  0E00               	movlw	0
  6691  001EBE  5ADE               	subwfb	postinc2,f,c
  6692  001EC0  5ADE               	subwfb	postinc2,f,c
  6693  001EC2  5ADE               	subwfb	postinc2,f,c
  6694  001EC4                     l5559:
  6695                           
  6696                           ; BSR set to: 0
  6697                           ;My_header\My_RTCC.h: 346: if (edit_flag.flag.hh) *ep -= ((epoch_t)60*60);
  6698  001EC4  0100               	movlb	0	; () banked
  6699  001EC6  A5A0               	btfss	_edit_flag& (0+255),2,b
  6700  001EC8  D00C               	goto	l5563
  6701                           
  6702                           ; BSR set to: 0
  6703  001ECA  C102  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6704  001ECE  C103  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6705  001ED2  0E10               	movlw	16
  6706  001ED4  5EDE               	subwf	postinc2,f,c
  6707  001ED6  0E0E               	movlw	14
  6708  001ED8  5ADE               	subwfb	postinc2,f,c
  6709  001EDA  0E00               	movlw	0
  6710  001EDC  5ADE               	subwfb	postinc2,f,c
  6711  001EDE  0E00               	movlw	0
  6712  001EE0  5ADE               	subwfb	postinc2,f,c
  6713  001EE2                     l5563:
  6714                           
  6715                           ; BSR set to: 0
  6716                           ;My_header\My_RTCC.h: 347: if (edit_flag.flag.DD) *ep -= ((epoch_t)60*60*24);
  6717  001EE2  0100               	movlb	0	; () banked
  6718  001EE4  A7A0               	btfss	_edit_flag& (0+255),3,b
  6719  001EE6  D00C               	goto	l5567
  6720                           
  6721                           ; BSR set to: 0
  6722  001EE8  C102  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6723  001EEC  C103  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6724  001EF0  0E80               	movlw	128
  6725  001EF2  5EDE               	subwf	postinc2,f,c
  6726  001EF4  0E51               	movlw	81
  6727  001EF6  5ADE               	subwfb	postinc2,f,c
  6728  001EF8  0E01               	movlw	1
  6729  001EFA  5ADE               	subwfb	postinc2,f,c
  6730  001EFC  0E00               	movlw	0
  6731  001EFE  5ADE               	subwfb	postinc2,f,c
  6732  001F00                     l5567:
  6733                           
  6734                           ; BSR set to: 0
  6735                           ;My_header\My_RTCC.h: 348: if (edit_flag.flag.MM) *ep -= ((epoch_t)60*60*24) * month_len
      +                          gth(ct->YY, ct->MM);
  6736  001F00  0100               	movlb	0	; () banked
  6737  001F02  A9A0               	btfss	_edit_flag& (0+255),4,b
  6738  001F04  D038               	goto	l5571
  6739                           
  6740                           ; BSR set to: 0
  6741  001F06  0101               	movlb	1	; () banked
  6742  001F08  EE20 F005          	lfsr	2,5
  6743  001F0C  5100               	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  6744  001F0E  26D9               	addwf	fsr2l,f,c
  6745  001F10  5101               	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  6746  001F12  22DA               	addwfc	fsr2h,f,c
  6747  001F14  50DF               	movf	indf2,w,c
  6748  001F16  0100               	movlb	0	; () banked
  6749  001F18  6FC9               	movwf	month_length@month& (0+255),b
  6750  001F1A  0101               	movlb	1	; () banked
  6751  001F1C  EE20 F006          	lfsr	2,6
  6752  001F20  5100               	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  6753  001F22  26D9               	addwf	fsr2l,f,c
  6754  001F24  5101               	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  6755  001F26  22DA               	addwfc	fsr2h,f,c
  6756  001F28  50DF               	movf	indf2,w,c
  6757  001F2A  EC3E  F016         	call	_month_length
  6758  001F2E  0101               	movlb	1	; () banked
  6759  001F30  6F04               	movwf	??_RTCC_adjust_time_dec& (0+255),b
  6760  001F32  0101               	movlb	1	; () banked
  6761  001F34  5104               	movf	??_RTCC_adjust_time_dec& (0+255),w,b
  6762  001F36  0100               	movlb	0	; () banked
  6763  001F38  6FD4               	movwf	___lmul@multiplier& (0+255),b
  6764  001F3A  6BD5               	clrf	(___lmul@multiplier+1)& (0+255),b
  6765  001F3C  6BD6               	clrf	(___lmul@multiplier+2)& (0+255),b
  6766  001F3E  6BD7               	clrf	(___lmul@multiplier+3)& (0+255),b
  6767  001F40  0E80               	movlw	128
  6768  001F42  0100               	movlb	0	; () banked
  6769  001F44  6FD8               	movwf	___lmul@multiplicand& (0+255),b
  6770  001F46  0E51               	movlw	81
  6771  001F48  6FD9               	movwf	(___lmul@multiplicand+1)& (0+255),b
  6772  001F4A  0E01               	movlw	1
  6773  001F4C  6FDA               	movwf	(___lmul@multiplicand+2)& (0+255),b
  6774  001F4E  0E00               	movlw	0
  6775  001F50  6FDB               	movwf	(___lmul@multiplicand+3)& (0+255),b
  6776  001F52  EC2D  F01C         	call	___lmul	;wreg free
  6777  001F56  C102  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6778  001F5A  C103  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6779  001F5E  0100               	movlb	0	; () banked
  6780  001F60  51D4               	movf	?___lmul& (0+255),w,b
  6781  001F62  5EDE               	subwf	postinc2,f,c
  6782  001F64  0100               	movlb	0	; () banked
  6783  001F66  51D5               	movf	(?___lmul+1)& (0+255),w,b
  6784  001F68  5ADE               	subwfb	postinc2,f,c
  6785  001F6A  0100               	movlb	0	; () banked
  6786  001F6C  51D6               	movf	(?___lmul+2)& (0+255),w,b
  6787  001F6E  5ADE               	subwfb	postinc2,f,c
  6788  001F70  0100               	movlb	0	; () banked
  6789  001F72  51D7               	movf	(?___lmul+3)& (0+255),w,b
  6790  001F74  5ADE               	subwfb	postinc2,f,c
  6791  001F76                     l5571:
  6792                           
  6793                           ; BSR set to: 0
  6794                           ;My_header\My_RTCC.h: 349: if (edit_flag.flag.YY) {
  6795  001F76  0100               	movlb	0	; () banked
  6796  001F78  ABA0               	btfss	_edit_flag& (0+255),5,b
  6797  001F7A  D088               	goto	l5593
  6798                           
  6799                           ; BSR set to: 0
  6800                           ;My_header\My_RTCC.h: 350: for (uint8_t i = ct->MM; i >= 1; i--) {
  6801  001F7C  0101               	movlb	1	; () banked
  6802  001F7E  EE20 F005          	lfsr	2,5
  6803  001F82  5100               	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  6804  001F84  26D9               	addwf	fsr2l,f,c
  6805  001F86  5101               	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  6806  001F88  22DA               	addwfc	fsr2h,f,c
  6807  001F8A  50DF               	movf	indf2,w,c
  6808  001F8C  0101               	movlb	1	; () banked
  6809  001F8E  6F09               	movwf	RTCC_adjust_time_dec@i& (0+255),b
  6810  001F90                     l5575:
  6811                           
  6812                           ; BSR set to: 1
  6813  001F90  0101               	movlb	1	; () banked
  6814  001F92  5109               	movf	RTCC_adjust_time_dec@i& (0+255),w,b
  6815  001F94  0101               	movlb	1	; () banked
  6816  001F96  B4D8               	btfsc	status,2,c
  6817  001F98  D033               	goto	l5585
  6818                           
  6819                           ; BSR set to: 1
  6820                           ;My_header\My_RTCC.h: 351: *ep -= ((epoch_t)60*60*24) * month_length(ct->YY, i);
  6821                           
  6822                           ; BSR set to: 1
  6823                           
  6824                           ; BSR set to: 1
  6825  001F9A  C109  F0C9         	movff	RTCC_adjust_time_dec@i,month_length@month
  6826  001F9E  0101               	movlb	1	; () banked
  6827  001FA0  EE20 F006          	lfsr	2,6
  6828  001FA4  5100               	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  6829  001FA6  26D9               	addwf	fsr2l,f,c
  6830  001FA8  5101               	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  6831  001FAA  22DA               	addwfc	fsr2h,f,c
  6832  001FAC  50DF               	movf	indf2,w,c
  6833  001FAE  EC3E  F016         	call	_month_length
  6834  001FB2  0101               	movlb	1	; () banked
  6835  001FB4  6F04               	movwf	??_RTCC_adjust_time_dec& (0+255),b
  6836  001FB6  0101               	movlb	1	; () banked
  6837  001FB8  5104               	movf	??_RTCC_adjust_time_dec& (0+255),w,b
  6838  001FBA  0100               	movlb	0	; () banked
  6839  001FBC  6FD4               	movwf	___lmul@multiplier& (0+255),b
  6840  001FBE  6BD5               	clrf	(___lmul@multiplier+1)& (0+255),b
  6841  001FC0  6BD6               	clrf	(___lmul@multiplier+2)& (0+255),b
  6842  001FC2  6BD7               	clrf	(___lmul@multiplier+3)& (0+255),b
  6843  001FC4  0E80               	movlw	128
  6844  001FC6  0100               	movlb	0	; () banked
  6845  001FC8  6FD8               	movwf	___lmul@multiplicand& (0+255),b
  6846  001FCA  0E51               	movlw	81
  6847  001FCC  6FD9               	movwf	(___lmul@multiplicand+1)& (0+255),b
  6848  001FCE  0E01               	movlw	1
  6849  001FD0  6FDA               	movwf	(___lmul@multiplicand+2)& (0+255),b
  6850  001FD2  0E00               	movlw	0
  6851  001FD4  6FDB               	movwf	(___lmul@multiplicand+3)& (0+255),b
  6852  001FD6  EC2D  F01C         	call	___lmul	;wreg free
  6853  001FDA  C102  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6854  001FDE  C103  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6855  001FE2  0100               	movlb	0	; () banked
  6856  001FE4  51D4               	movf	?___lmul& (0+255),w,b
  6857  001FE6  5EDE               	subwf	postinc2,f,c
  6858  001FE8  0100               	movlb	0	; () banked
  6859  001FEA  51D5               	movf	(?___lmul+1)& (0+255),w,b
  6860  001FEC  5ADE               	subwfb	postinc2,f,c
  6861  001FEE  0100               	movlb	0	; () banked
  6862  001FF0  51D6               	movf	(?___lmul+2)& (0+255),w,b
  6863  001FF2  5ADE               	subwfb	postinc2,f,c
  6864  001FF4  0100               	movlb	0	; () banked
  6865  001FF6  51D7               	movf	(?___lmul+3)& (0+255),w,b
  6866  001FF8  5ADE               	subwfb	postinc2,f,c
  6867                           
  6868                           ; BSR set to: 0
  6869  001FFA  0101               	movlb	1	; () banked
  6870  001FFC  0709               	decf	RTCC_adjust_time_dec@i& (0+255),f,b
  6871  001FFE  D7C8               	goto	l5575
  6872  002000                     l5585:
  6873                           
  6874                           ; BSR set to: 1
  6875                           ;My_header\My_RTCC.h: 352: }
  6876                           ;My_header\My_RTCC.h: 353: for (uint8_t i = 12; i > ct->MM; i--) {
  6877  002000  0E0C               	movlw	12
  6878  002002  0101               	movlb	1	; () banked
  6879  002004  6F08               	movwf	RTCC_adjust_time_dec@i_2090& (0+255),b
  6880  002006  D036               	goto	l5591
  6881  002008                     l5587:
  6882                           
  6883                           ; BSR set to: 1
  6884                           ;My_header\My_RTCC.h: 354: *ep -= ((epoch_t)60*60*24) * month_length(ct->YY - 1, i);
  6885  002008  C108  F0C9         	movff	RTCC_adjust_time_dec@i_2090,month_length@month
  6886  00200C  0101               	movlb	1	; () banked
  6887  00200E  EE20 F006          	lfsr	2,6
  6888  002012  5100               	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  6889  002014  26D9               	addwf	fsr2l,f,c
  6890  002016  5101               	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  6891  002018  22DA               	addwfc	fsr2h,f,c
  6892  00201A  50DF               	movf	indf2,w,c
  6893  00201C  0101               	movlb	1	; () banked
  6894  00201E  6F04               	movwf	??_RTCC_adjust_time_dec& (0+255),b
  6895  002020  0101               	movlb	1	; () banked
  6896  002022  0504               	decf	??_RTCC_adjust_time_dec& (0+255),w,b
  6897  002024  EC3E  F016         	call	_month_length
  6898  002028  0101               	movlb	1	; () banked
  6899  00202A  6F05               	movwf	(??_RTCC_adjust_time_dec+1)& (0+255),b
  6900  00202C  0101               	movlb	1	; () banked
  6901  00202E  5105               	movf	(??_RTCC_adjust_time_dec+1)& (0+255),w,b
  6902  002030  0100               	movlb	0	; () banked
  6903  002032  6FD4               	movwf	___lmul@multiplier& (0+255),b
  6904  002034  6BD5               	clrf	(___lmul@multiplier+1)& (0+255),b
  6905  002036  6BD6               	clrf	(___lmul@multiplier+2)& (0+255),b
  6906  002038  6BD7               	clrf	(___lmul@multiplier+3)& (0+255),b
  6907  00203A  0E80               	movlw	128
  6908  00203C  0100               	movlb	0	; () banked
  6909  00203E  6FD8               	movwf	___lmul@multiplicand& (0+255),b
  6910  002040  0E51               	movlw	81
  6911  002042  6FD9               	movwf	(___lmul@multiplicand+1)& (0+255),b
  6912  002044  0E01               	movlw	1
  6913  002046  6FDA               	movwf	(___lmul@multiplicand+2)& (0+255),b
  6914  002048  0E00               	movlw	0
  6915  00204A  6FDB               	movwf	(___lmul@multiplicand+3)& (0+255),b
  6916  00204C  EC2D  F01C         	call	___lmul	;wreg free
  6917  002050  C102  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6918  002054  C103  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6919  002058  0100               	movlb	0	; () banked
  6920  00205A  51D4               	movf	?___lmul& (0+255),w,b
  6921  00205C  5EDE               	subwf	postinc2,f,c
  6922  00205E  0100               	movlb	0	; () banked
  6923  002060  51D5               	movf	(?___lmul+1)& (0+255),w,b
  6924  002062  5ADE               	subwfb	postinc2,f,c
  6925  002064  0100               	movlb	0	; () banked
  6926  002066  51D6               	movf	(?___lmul+2)& (0+255),w,b
  6927  002068  5ADE               	subwfb	postinc2,f,c
  6928  00206A  0100               	movlb	0	; () banked
  6929  00206C  51D7               	movf	(?___lmul+3)& (0+255),w,b
  6930  00206E  5ADE               	subwfb	postinc2,f,c
  6931                           
  6932                           ; BSR set to: 0
  6933  002070  0101               	movlb	1	; () banked
  6934  002072  0708               	decf	RTCC_adjust_time_dec@i_2090& (0+255),f,b
  6935  002074                     l5591:
  6936                           
  6937                           ; BSR set to: 1
  6938  002074  0101               	movlb	1	; () banked
  6939  002076  EE20 F005          	lfsr	2,5
  6940  00207A  5100               	movf	RTCC_adjust_time_dec@ct& (0+255),w,b
  6941  00207C  26D9               	addwf	fsr2l,f,c
  6942  00207E  5101               	movf	(RTCC_adjust_time_dec@ct+1)& (0+255),w,b
  6943  002080  22DA               	addwfc	fsr2h,f,c
  6944  002082  0101               	movlb	1	; () banked
  6945  002084  5108               	movf	RTCC_adjust_time_dec@i_2090& (0+255),w,b
  6946  002086  5CDE               	subwf	postinc2,w,c
  6947  002088  A0D8               	btfss	status,0,c
  6948  00208A  D7BE               	goto	l5587
  6949  00208C                     l5593:
  6950                           
  6951                           ;My_header\My_RTCC.h: 355: }
  6952                           ;My_header\My_RTCC.h: 356: }
  6953                           ;My_header\My_RTCC.h: 358: if (*ep >= 3155760000)*ep += 3155760000;
  6954  00208C  C102  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6955  002090  C103  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6956  002094  0E80               	movlw	128
  6957  002096  5CDE               	subwf	postinc2,w,c
  6958  002098  0E13               	movlw	19
  6959  00209A  58DE               	subwfb	postinc2,w,c
  6960  00209C  0E19               	movlw	25
  6961  00209E  58DE               	subwfb	postinc2,w,c
  6962  0020A0  0EBC               	movlw	188
  6963  0020A2  58DE               	subwfb	postinc2,w,c
  6964  0020A4  A0D8               	btfss	status,0,c
  6965  0020A6  D00C               	goto	l5597
  6966  0020A8  C102  FFD9         	movff	RTCC_adjust_time_dec@ep,fsr2l
  6967  0020AC  C103  FFDA         	movff	RTCC_adjust_time_dec@ep+1,fsr2h
  6968  0020B0  0E80               	movlw	128
  6969  0020B2  26DE               	addwf	postinc2,f,c
  6970  0020B4  0E13               	movlw	19
  6971  0020B6  22DE               	addwfc	postinc2,f,c
  6972  0020B8  0E19               	movlw	25
  6973  0020BA  22DE               	addwfc	postinc2,f,c
  6974  0020BC  0EBC               	movlw	188
  6975  0020BE  22DE               	addwfc	postinc2,f,c
  6976  0020C0                     l5597:
  6977                           
  6978                           ;My_header\My_RTCC.h: 359: RTCC_from_epoch(&caltime_now, &epoch_now);
  6979  0020C0  0EAC               	movlw	low _caltime_now
  6980  0020C2  0100               	movlb	0	; () banked
  6981  0020C4  6FF8               	movwf	RTCC_from_epoch@ct& (0+255),b
  6982  0020C6  0E00               	movlw	high _caltime_now
  6983  0020C8  0100               	movlb	0	; () banked
  6984  0020CA  6FF9               	movwf	(RTCC_from_epoch@ct+1)& (0+255),b
  6985  0020CC  0EC3               	movlw	low _epoch_now
  6986  0020CE  0100               	movlb	0	; () banked
  6987  0020D0  6FFA               	movwf	RTCC_from_epoch@ep& (0+255),b
  6988  0020D2  0E00               	movlw	high _epoch_now
  6989  0020D4  0100               	movlb	0	; () banked
  6990  0020D6  6FFB               	movwf	(RTCC_from_epoch@ep+1)& (0+255),b
  6991  0020D8  EC1A  F020         	call	_RTCC_from_epoch	;wreg free
  6992                           
  6993                           ;My_header\My_RTCC.h: 360: time_change_flag = 1;
  6994  0020DC  0E01               	movlw	1
  6995  0020DE  6E3B               	movwf	_time_change_flag,c
  6996  0020E0  0012               	return		;funcret
  6997  0020E2                     __end_of_RTCC_adjust_time_dec:
  6998                           	opt stack 0
  6999                           tblptru	equ	0xFF8
  7000                           tblptrh	equ	0xFF7
  7001                           tblptrl	equ	0xFF6
  7002                           tablat	equ	0xFF5
  7003                           prodh	equ	0xFF4
  7004                           prodl	equ	0xFF3
  7005                           intcon	equ	0xFF2
  7006                           postinc0	equ	0xFEE
  7007                           wreg	equ	0xFE8
  7008                           indf1	equ	0xFE7
  7009                           fsr1h	equ	0xFE2
  7010                           fsr1l	equ	0xFE1
  7011                           indf2	equ	0xFDF
  7012                           postinc2	equ	0xFDE
  7013                           postdec2	equ	0xFDD
  7014                           plusw2	equ	0xFDB
  7015                           fsr2h	equ	0xFDA
  7016                           fsr2l	equ	0xFD9
  7017                           status	equ	0xFD8
  7018                           
  7019 ;; *************** function _RTCC_from_epoch *****************
  7020 ;; Defined at:
  7021 ;;		line 242 in file "../My_header\My_RTCC.h"
  7022 ;; Parameters:    Size  Location     Type
  7023 ;;  ct              2   49[BANK0 ] PTR struct .
  7024 ;;		 -> caltime_now(7), 
  7025 ;;  ep              2   51[BANK0 ] PTR unsigned long 
  7026 ;;		 -> epoch_now(4), 
  7027 ;; Auto vars:     Size  Location     Type
  7028 ;;		None
  7029 ;; Return value:  Size  Location     Type
  7030 ;;		None               void
  7031 ;; Registers used:
  7032 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7033 ;; Tracked objects:
  7034 ;;		On entry : 0/0
  7035 ;;		On exit  : 0/0
  7036 ;;		Unchanged: 0/0
  7037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7038 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7041 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7042 ;;Total ram usage:        4 bytes
  7043 ;; Hardware stack levels used:    1
  7044 ;; Hardware stack levels required when called:    7
  7045 ;; This function calls:
  7046 ;;		_caltime_to_RTCC
  7047 ;;		_epoch_to_caltime
  7048 ;; This function is called by:
  7049 ;;		_RTCC_adjust_time_inc
  7050 ;;		_RTCC_adjust_time_dec
  7051 ;;		_main
  7052 ;; This function uses a non-reentrant model
  7053 ;;
  7054                           
  7055                           	psect	text26
  7056  004034                     __ptext26:
  7057                           	opt stack 0
  7058  004034                     _RTCC_from_epoch:
  7059                           	opt stack 20
  7060                           
  7061                           ;My_header\My_RTCC.h: 243: epoch_to_caltime(ct, ep);
  7062                           
  7063                           ;incstack = 0
  7064  004034  C0F8  F0E8         	movff	RTCC_from_epoch@ct,epoch_to_caltime@ct
  7065  004038  C0F9  F0E9         	movff	RTCC_from_epoch@ct+1,epoch_to_caltime@ct+1
  7066  00403C  C0FA  F0EA         	movff	RTCC_from_epoch@ep,epoch_to_caltime@ep
  7067  004040  C0FB  F0EB         	movff	RTCC_from_epoch@ep+1,epoch_to_caltime@ep+1
  7068  004044  EC71  F010         	call	_epoch_to_caltime	;wreg free
  7069                           
  7070                           ;My_header\My_RTCC.h: 244: caltime_to_RTCC(ct);
  7071  004048  C0F8  F0CC         	movff	RTCC_from_epoch@ct,caltime_to_RTCC@ct
  7072  00404C  C0F9  F0CD         	movff	RTCC_from_epoch@ct+1,caltime_to_RTCC@ct+1
  7073  004050  ECD6  F015         	call	_caltime_to_RTCC	;wreg free
  7074  004054  0012               	return		;funcret
  7075  004056                     __end_of_RTCC_from_epoch:
  7076                           	opt stack 0
  7077                           tblptru	equ	0xFF8
  7078                           tblptrh	equ	0xFF7
  7079                           tblptrl	equ	0xFF6
  7080                           tablat	equ	0xFF5
  7081                           prodh	equ	0xFF4
  7082                           prodl	equ	0xFF3
  7083                           intcon	equ	0xFF2
  7084                           postinc0	equ	0xFEE
  7085                           wreg	equ	0xFE8
  7086                           indf1	equ	0xFE7
  7087                           fsr1h	equ	0xFE2
  7088                           fsr1l	equ	0xFE1
  7089                           indf2	equ	0xFDF
  7090                           postinc2	equ	0xFDE
  7091                           postdec2	equ	0xFDD
  7092                           plusw2	equ	0xFDB
  7093                           fsr2h	equ	0xFDA
  7094                           fsr2l	equ	0xFD9
  7095                           status	equ	0xFD8
  7096                           
  7097 ;; *************** function _epoch_to_caltime *****************
  7098 ;; Defined at:
  7099 ;;		line 157 in file "../My_header\My_RTCC.h"
  7100 ;; Parameters:    Size  Location     Type
  7101 ;;  ct              2   33[BANK0 ] PTR struct .
  7102 ;;		 -> caltime_now(7), 
  7103 ;;  ep              2   35[BANK0 ] PTR unsigned long 
  7104 ;;		 -> epoch_now(4), 
  7105 ;; Auto vars:     Size  Location     Type
  7106 ;;  num             4   45[BANK0 ] unsigned long 
  7107 ;;  day             2   41[BANK0 ] unsigned int 
  7108 ;;  day_since_ep    2   39[BANK0 ] unsigned int 
  7109 ;;  month           1   44[BANK0 ] unsigned char 
  7110 ;;  year            1   43[BANK0 ] unsigned char 
  7111 ;; Return value:  Size  Location     Type
  7112 ;;		None               void
  7113 ;; Registers used:
  7114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7115 ;; Tracked objects:
  7116 ;;		On entry : 0/0
  7117 ;;		On exit  : 0/0
  7118 ;;		Unchanged: 0/0
  7119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7120 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7121 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7122 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7123 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7124 ;;Total ram usage:       16 bytes
  7125 ;; Hardware stack levels used:    1
  7126 ;; Hardware stack levels required when called:    6
  7127 ;; This function calls:
  7128 ;;		_get_quot_rem
  7129 ;;		_month_length
  7130 ;; This function is called by:
  7131 ;;		_RTCC_from_epoch
  7132 ;;		_RTCC_from_caltime
  7133 ;; This function uses a non-reentrant model
  7134 ;;
  7135                           
  7136                           	psect	text27
  7137  0020E2                     __ptext27:
  7138                           	opt stack 0
  7139  0020E2                     _epoch_to_caltime:
  7140                           	opt stack 20
  7141                           
  7142                           ;My_header\My_RTCC.h: 160: static uint16_t day_cache = 0;
  7143                           ;My_header\My_RTCC.h: 161: static uint8_t month_cache = 1;
  7144                           ;My_header\My_RTCC.h: 162: static uint8_t year_cache = 0;
  7145                           ;My_header\My_RTCC.h: 163: uint16_t day_since_epoch;
  7146                           ;My_header\My_RTCC.h: 164: uint16_t day;
  7147                           ;My_header\My_RTCC.h: 165: uint8_t year = 0;
  7148                           
  7149                           ;incstack = 0
  7150  0020E2  0E00               	movlw	0
  7151  0020E4  0100               	movlb	0	; () banked
  7152  0020E6  6FF2               	movwf	epoch_to_caltime@year& (0+255),b
  7153                           
  7154                           ;My_header\My_RTCC.h: 166: uint8_t month = 1;
  7155  0020E8  0E01               	movlw	1
  7156  0020EA  0100               	movlb	0	; () banked
  7157  0020EC  6FF3               	movwf	epoch_to_caltime@month& (0+255),b
  7158                           
  7159                           ; BSR set to: 0
  7160                           ;My_header\My_RTCC.h: 167: epoch_t num;
  7161                           ;My_header\My_RTCC.h: 169: num = *ep;
  7162  0020EE  C0EA  FFD9         	movff	epoch_to_caltime@ep,fsr2l
  7163  0020F2  C0EB  FFDA         	movff	epoch_to_caltime@ep+1,fsr2h
  7164  0020F6  CFDE F0F4          	movff	postinc2,epoch_to_caltime@num
  7165  0020FA  CFDE F0F5          	movff	postinc2,epoch_to_caltime@num+1
  7166  0020FE  CFDE F0F6          	movff	postinc2,epoch_to_caltime@num+2
  7167  002102  CFDE F0F7          	movff	postinc2,epoch_to_caltime@num+3
  7168                           
  7169                           ; BSR set to: 0
  7170                           ;My_header\My_RTCC.h: 170: ct->ss = get_quot_rem(&num, 60);
  7171  002106  0EF4               	movlw	low epoch_to_caltime@num
  7172  002108  0100               	movlb	0	; () banked
  7173  00210A  6FE0               	movwf	get_quot_rem@quot& (0+255),b
  7174  00210C  0E00               	movlw	high epoch_to_caltime@num
  7175  00210E  0100               	movlb	0	; () banked
  7176  002110  6FE1               	movwf	(get_quot_rem@quot+1)& (0+255),b
  7177  002112  0E3C               	movlw	60
  7178  002114  0100               	movlb	0	; () banked
  7179  002116  6FE2               	movwf	get_quot_rem@div& (0+255),b
  7180  002118  EC03  F015         	call	_get_quot_rem	;wreg free
  7181  00211C  0100               	movlb	0	; () banked
  7182  00211E  51E0               	movf	?_get_quot_rem& (0+255),w,b
  7183  002120  C0E8  FFD9         	movff	epoch_to_caltime@ct,fsr2l
  7184  002124  C0E9  FFDA         	movff	epoch_to_caltime@ct+1,fsr2h
  7185  002128  6EDF               	movwf	indf2,c
  7186                           
  7187                           ; BSR set to: 0
  7188                           ;My_header\My_RTCC.h: 171: ct->mm = get_quot_rem(&num, 60);
  7189  00212A  0EF4               	movlw	low epoch_to_caltime@num
  7190  00212C  0100               	movlb	0	; () banked
  7191  00212E  6FE0               	movwf	get_quot_rem@quot& (0+255),b
  7192  002130  0E00               	movlw	high epoch_to_caltime@num
  7193  002132  0100               	movlb	0	; () banked
  7194  002134  6FE1               	movwf	(get_quot_rem@quot+1)& (0+255),b
  7195  002136  0E3C               	movlw	60
  7196  002138  0100               	movlb	0	; () banked
  7197  00213A  6FE2               	movwf	get_quot_rem@div& (0+255),b
  7198  00213C  EC03  F015         	call	_get_quot_rem	;wreg free
  7199  002140  0100               	movlb	0	; () banked
  7200  002142  EE20 F001          	lfsr	2,1
  7201  002146  51E8               	movf	epoch_to_caltime@ct& (0+255),w,b
  7202  002148  26D9               	addwf	fsr2l,f,c
  7203  00214A  51E9               	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
  7204  00214C  22DA               	addwfc	fsr2h,f,c
  7205  00214E  0100               	movlb	0	; () banked
  7206  002150  C0E0  FFDF         	movff	?_get_quot_rem,indf2
  7207                           
  7208                           ; BSR set to: 0
  7209                           ;My_header\My_RTCC.h: 172: ct->hh = get_quot_rem(&num, 24);
  7210  002154  0EF4               	movlw	low epoch_to_caltime@num
  7211  002156  0100               	movlb	0	; () banked
  7212  002158  6FE0               	movwf	get_quot_rem@quot& (0+255),b
  7213  00215A  0E00               	movlw	high epoch_to_caltime@num
  7214  00215C  0100               	movlb	0	; () banked
  7215  00215E  6FE1               	movwf	(get_quot_rem@quot+1)& (0+255),b
  7216  002160  0E18               	movlw	24
  7217  002162  0100               	movlb	0	; () banked
  7218  002164  6FE2               	movwf	get_quot_rem@div& (0+255),b
  7219  002166  EC03  F015         	call	_get_quot_rem	;wreg free
  7220  00216A  0100               	movlb	0	; () banked
  7221  00216C  EE20 F002          	lfsr	2,2
  7222  002170  51E8               	movf	epoch_to_caltime@ct& (0+255),w,b
  7223  002172  26D9               	addwf	fsr2l,f,c
  7224  002174  51E9               	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
  7225  002176  22DA               	addwfc	fsr2h,f,c
  7226  002178  0100               	movlb	0	; () banked
  7227  00217A  C0E0  FFDF         	movff	?_get_quot_rem,indf2
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;My_header\My_RTCC.h: 173: day = num;
  7231  00217E  C0F4  F0F0         	movff	epoch_to_caltime@num,epoch_to_caltime@day
  7232  002182  C0F5  F0F1         	movff	epoch_to_caltime@num+1,epoch_to_caltime@day+1
  7233                           
  7234                           ; BSR set to: 0
  7235                           ;My_header\My_RTCC.h: 174: day_since_epoch = day;
  7236  002186  C0F0  F0EE         	movff	epoch_to_caltime@day,epoch_to_caltime@day_since_epoch
  7237  00218A  C0F1  F0EF         	movff	epoch_to_caltime@day+1,epoch_to_caltime@day_since_epoch+1
  7238                           
  7239                           ; BSR set to: 0
  7240                           ;My_header\My_RTCC.h: 176: num += 6;
  7241  00218E  0E06               	movlw	6
  7242  002190  0100               	movlb	0	; () banked
  7243  002192  27F4               	addwf	epoch_to_caltime@num& (0+255),f,b
  7244  002194  0E00               	movlw	0
  7245  002196  23F5               	addwfc	(epoch_to_caltime@num+1)& (0+255),f,b
  7246  002198  23F6               	addwfc	(epoch_to_caltime@num+2)& (0+255),f,b
  7247  00219A  23F7               	addwfc	(epoch_to_caltime@num+3)& (0+255),f,b
  7248                           
  7249                           ; BSR set to: 0
  7250                           ;My_header\My_RTCC.h: 177: ct->EE = get_quot_rem(&num, 7);
  7251  00219C  0EF4               	movlw	low epoch_to_caltime@num
  7252  00219E  0100               	movlb	0	; () banked
  7253  0021A0  6FE0               	movwf	get_quot_rem@quot& (0+255),b
  7254  0021A2  0E00               	movlw	high epoch_to_caltime@num
  7255  0021A4  0100               	movlb	0	; () banked
  7256  0021A6  6FE1               	movwf	(get_quot_rem@quot+1)& (0+255),b
  7257  0021A8  0E07               	movlw	7
  7258  0021AA  0100               	movlb	0	; () banked
  7259  0021AC  6FE2               	movwf	get_quot_rem@div& (0+255),b
  7260  0021AE  EC03  F015         	call	_get_quot_rem	;wreg free
  7261  0021B2  0100               	movlb	0	; () banked
  7262  0021B4  EE20 F003          	lfsr	2,3
  7263  0021B8  51E8               	movf	epoch_to_caltime@ct& (0+255),w,b
  7264  0021BA  26D9               	addwf	fsr2l,f,c
  7265  0021BC  51E9               	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
  7266  0021BE  22DA               	addwfc	fsr2h,f,c
  7267  0021C0  0100               	movlb	0	; () banked
  7268  0021C2  C0E0  FFDF         	movff	?_get_quot_rem,indf2
  7269                           
  7270                           ;My_header\My_RTCC.h: 186: while (day >= month_length(year, month)) {
  7271  0021C6  D03F               	goto	l5265
  7272  0021C8                     l416:
  7273                           
  7274                           ; BSR set to: 0
  7275                           ;My_header\My_RTCC.h: 187: LATB2 = 1;
  7276  0021C8  848A               	bsf	3978,2,c	;volatile
  7277                           
  7278                           ; BSR set to: 0
  7279                           ;My_header\My_RTCC.h: 188: day = day - month_length(year, month);
  7280  0021CA  C0F3  F0C9         	movff	epoch_to_caltime@month,month_length@month
  7281  0021CE  0100               	movlb	0	; () banked
  7282  0021D0  51F2               	movf	epoch_to_caltime@year& (0+255),w,b
  7283  0021D2  EC3E  F016         	call	_month_length
  7284  0021D6  0100               	movlb	0	; () banked
  7285  0021D8  6FEC               	movwf	??_epoch_to_caltime& (0+255),b
  7286  0021DA  6BED               	clrf	(??_epoch_to_caltime+1)& (0+255),b
  7287  0021DC  0100               	movlb	0	; () banked
  7288  0021DE  1FEC               	comf	??_epoch_to_caltime& (0+255),f,b
  7289  0021E0  1FED               	comf	(??_epoch_to_caltime+1)& (0+255),f,b
  7290  0021E2  4BEC               	infsnz	??_epoch_to_caltime& (0+255),f,b
  7291  0021E4  2BED               	incf	(??_epoch_to_caltime+1)& (0+255),f,b
  7292  0021E6  0100               	movlb	0	; () banked
  7293  0021E8  51F0               	movf	epoch_to_caltime@day& (0+255),w,b
  7294  0021EA  0100               	movlb	0	; () banked
  7295  0021EC  25EC               	addwf	??_epoch_to_caltime& (0+255),w,b
  7296  0021EE  0100               	movlb	0	; () banked
  7297  0021F0  6FF0               	movwf	epoch_to_caltime@day& (0+255),b
  7298  0021F2  0100               	movlb	0	; () banked
  7299  0021F4  51F1               	movf	(epoch_to_caltime@day+1)& (0+255),w,b
  7300  0021F6  0100               	movlb	0	; () banked
  7301  0021F8  21ED               	addwfc	(??_epoch_to_caltime+1)& (0+255),w,b
  7302  0021FA  0100               	movlb	0	; () banked
  7303  0021FC  6FF1               	movwf	(epoch_to_caltime@day+1)& (0+255),b
  7304                           
  7305                           ; BSR set to: 0
  7306                           ;My_header\My_RTCC.h: 189: if (month == 12) {
  7307  0021FE  0E0C               	movlw	12
  7308  002200  0100               	movlb	0	; () banked
  7309  002202  19F3               	xorwf	epoch_to_caltime@month& (0+255),w,b
  7310  002204  A4D8               	btfss	status,2,c
  7311  002206  D019               	goto	l5259
  7312                           
  7313                           ; BSR set to: 0
  7314                           ;My_header\My_RTCC.h: 190: month = 1;
  7315  002208  0E01               	movlw	1
  7316  00220A  0100               	movlb	0	; () banked
  7317  00220C  6FF3               	movwf	epoch_to_caltime@month& (0+255),b
  7318                           
  7319                           ; BSR set to: 0
  7320                           ;My_header\My_RTCC.h: 191: year++;
  7321  00220E  0100               	movlb	0	; () banked
  7322  002210  2BF2               	incf	epoch_to_caltime@year& (0+255),f,b
  7323                           
  7324                           ; BSR set to: 0
  7325                           ;My_header\My_RTCC.h: 193: if (year >= 100) {
  7326  002212  0E63               	movlw	99
  7327  002214  0100               	movlb	0	; () banked
  7328  002216  65F2               	cpfsgt	epoch_to_caltime@year& (0+255),b
  7329  002218  D012               	goto	l5261
  7330                           
  7331                           ; BSR set to: 0
  7332                           ;My_header\My_RTCC.h: 194: *ep -= 3155760000;
  7333  00221A  C0EA  FFD9         	movff	epoch_to_caltime@ep,fsr2l
  7334  00221E  C0EB  FFDA         	movff	epoch_to_caltime@ep+1,fsr2h
  7335  002222  0E80               	movlw	128
  7336  002224  5EDE               	subwf	postinc2,f,c
  7337  002226  0E13               	movlw	19
  7338  002228  5ADE               	subwfb	postinc2,f,c
  7339  00222A  0E19               	movlw	25
  7340  00222C  5ADE               	subwfb	postinc2,f,c
  7341  00222E  0EBC               	movlw	188
  7342  002230  5ADE               	subwfb	postinc2,f,c
  7343                           
  7344                           ; BSR set to: 0
  7345                           ;My_header\My_RTCC.h: 195: year = 0;
  7346  002232  0E00               	movlw	0
  7347  002234  0100               	movlb	0	; () banked
  7348  002236  6FF2               	movwf	epoch_to_caltime@year& (0+255),b
  7349                           
  7350                           ; BSR set to: 0
  7351                           ;My_header\My_RTCC.h: 196: }
  7352                           ;My_header\My_RTCC.h: 197: } else {
  7353  002238  D002               	goto	l5261
  7354  00223A                     l5259:
  7355                           
  7356                           ; BSR set to: 0
  7357                           ;My_header\My_RTCC.h: 198: month++;
  7358  00223A  0100               	movlb	0	; () banked
  7359  00223C  2BF3               	incf	epoch_to_caltime@month& (0+255),f,b
  7360  00223E                     l5261:
  7361                           
  7362                           ; BSR set to: 0
  7363                           ;My_header\My_RTCC.h: 199: }
  7364                           ;My_header\My_RTCC.h: 200: month_cache = month;
  7365  00223E  C0F3  F0FF         	movff	epoch_to_caltime@month,epoch_to_caltime@month_cache
  7366                           
  7367                           ; BSR set to: 0
  7368                           ;My_header\My_RTCC.h: 201: year_cache = year;
  7369  002242  C0F2  F0A3         	movff	epoch_to_caltime@year,epoch_to_caltime@year_cache
  7370  002246                     l5265:
  7371                           
  7372                           ; BSR set to: 0
  7373  002246  C0F3  F0C9         	movff	epoch_to_caltime@month,month_length@month
  7374  00224A  0100               	movlb	0	; () banked
  7375  00224C  51F2               	movf	epoch_to_caltime@year& (0+255),w,b
  7376  00224E  EC3E  F016         	call	_month_length
  7377  002252  0100               	movlb	0	; () banked
  7378  002254  6FEC               	movwf	??_epoch_to_caltime& (0+255),b
  7379  002256  0100               	movlb	0	; () banked
  7380  002258  51EC               	movf	??_epoch_to_caltime& (0+255),w,b
  7381  00225A  0100               	movlb	0	; () banked
  7382  00225C  5DF0               	subwf	epoch_to_caltime@day& (0+255),w,b
  7383  00225E  0E00               	movlw	0
  7384  002260  59F1               	subwfb	(epoch_to_caltime@day+1)& (0+255),w,b
  7385  002262  B0D8               	btfsc	status,0,c
  7386  002264  D7B1               	goto	l416
  7387                           
  7388                           ; BSR set to: 0
  7389                           ;My_header\My_RTCC.h: 202: }
  7390                           ;My_header\My_RTCC.h: 203: day_cache = day_since_epoch - day;
  7391                           
  7392                           ; BSR set to: 0
  7393  002266  C0F0  F0EC         	movff	epoch_to_caltime@day,??_epoch_to_caltime
  7394  00226A  C0F1  F0ED         	movff	epoch_to_caltime@day+1,??_epoch_to_caltime+1
  7395  00226E  0100               	movlb	0	; () banked
  7396  002270  1FEC               	comf	??_epoch_to_caltime& (0+255),f,b
  7397  002272  1FED               	comf	(??_epoch_to_caltime+1)& (0+255),f,b
  7398  002274  4BEC               	infsnz	??_epoch_to_caltime& (0+255),f,b
  7399  002276  2BED               	incf	(??_epoch_to_caltime+1)& (0+255),f,b
  7400  002278  0100               	movlb	0	; () banked
  7401  00227A  51EE               	movf	epoch_to_caltime@day_since_epoch& (0+255),w,b
  7402  00227C  0100               	movlb	0	; () banked
  7403  00227E  25EC               	addwf	??_epoch_to_caltime& (0+255),w,b
  7404  002280  0100               	movlb	0	; () banked
  7405  002282  6F9C               	movwf	epoch_to_caltime@day_cache& (0+255),b
  7406  002284  0100               	movlb	0	; () banked
  7407  002286  51EF               	movf	(epoch_to_caltime@day_since_epoch+1)& (0+255),w,b
  7408  002288  0100               	movlb	0	; () banked
  7409  00228A  21ED               	addwfc	(??_epoch_to_caltime+1)& (0+255),w,b
  7410  00228C  0100               	movlb	0	; () banked
  7411  00228E  6F9D               	movwf	(epoch_to_caltime@day_cache+1)& (0+255),b
  7412                           
  7413                           ; BSR set to: 0
  7414                           ;My_header\My_RTCC.h: 204: day++;
  7415  002290  0100               	movlb	0	; () banked
  7416  002292  4BF0               	infsnz	epoch_to_caltime@day& (0+255),f,b
  7417  002294  2BF1               	incf	(epoch_to_caltime@day+1)& (0+255),f,b
  7418                           
  7419                           ; BSR set to: 0
  7420                           ;My_header\My_RTCC.h: 206: ct->YY = year;
  7421  002296  0100               	movlb	0	; () banked
  7422  002298  EE20 F006          	lfsr	2,6
  7423  00229C  51E8               	movf	epoch_to_caltime@ct& (0+255),w,b
  7424  00229E  26D9               	addwf	fsr2l,f,c
  7425  0022A0  51E9               	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
  7426  0022A2  22DA               	addwfc	fsr2h,f,c
  7427  0022A4  C0F2  FFDF         	movff	epoch_to_caltime@year,indf2
  7428                           
  7429                           ; BSR set to: 0
  7430                           ;My_header\My_RTCC.h: 207: ct->MM = month;
  7431  0022A8  0100               	movlb	0	; () banked
  7432  0022AA  EE20 F005          	lfsr	2,5
  7433  0022AE  51E8               	movf	epoch_to_caltime@ct& (0+255),w,b
  7434  0022B0  26D9               	addwf	fsr2l,f,c
  7435  0022B2  51E9               	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
  7436  0022B4  22DA               	addwfc	fsr2h,f,c
  7437  0022B6  C0F3  FFDF         	movff	epoch_to_caltime@month,indf2
  7438                           
  7439                           ; BSR set to: 0
  7440                           ;My_header\My_RTCC.h: 208: ct->DD = day;
  7441  0022BA  0100               	movlb	0	; () banked
  7442  0022BC  EE20 F004          	lfsr	2,4
  7443  0022C0  51E8               	movf	epoch_to_caltime@ct& (0+255),w,b
  7444  0022C2  26D9               	addwf	fsr2l,f,c
  7445  0022C4  51E9               	movf	(epoch_to_caltime@ct+1)& (0+255),w,b
  7446  0022C6  22DA               	addwfc	fsr2h,f,c
  7447  0022C8  C0F0  FFDF         	movff	epoch_to_caltime@day,indf2
  7448                           
  7449                           ; BSR set to: 0
  7450  0022CC  0012               	return		;funcret
  7451  0022CE                     __end_of_epoch_to_caltime:
  7452                           	opt stack 0
  7453                           tblptru	equ	0xFF8
  7454                           tblptrh	equ	0xFF7
  7455                           tblptrl	equ	0xFF6
  7456                           tablat	equ	0xFF5
  7457                           prodh	equ	0xFF4
  7458                           prodl	equ	0xFF3
  7459                           intcon	equ	0xFF2
  7460                           postinc0	equ	0xFEE
  7461                           wreg	equ	0xFE8
  7462                           indf1	equ	0xFE7
  7463                           fsr1h	equ	0xFE2
  7464                           fsr1l	equ	0xFE1
  7465                           indf2	equ	0xFDF
  7466                           postinc2	equ	0xFDE
  7467                           postdec2	equ	0xFDD
  7468                           plusw2	equ	0xFDB
  7469                           fsr2h	equ	0xFDA
  7470                           fsr2l	equ	0xFD9
  7471                           status	equ	0xFD8
  7472                           
  7473 ;; *************** function _get_quot_rem *****************
  7474 ;; Defined at:
  7475 ;;		line 112 in file "../My_header\My_RTCC.h"
  7476 ;; Parameters:    Size  Location     Type
  7477 ;;  quot            2   25[BANK0 ] PTR unsigned long 
  7478 ;;		 -> epoch_to_caltime@num(4), 
  7479 ;;  div             1   27[BANK0 ] unsigned char 
  7480 ;; Auto vars:     Size  Location     Type
  7481 ;;  num             4   29[BANK0 ] unsigned long 
  7482 ;; Return value:  Size  Location     Type
  7483 ;;                  4   25[BANK0 ] unsigned long 
  7484 ;; Registers used:
  7485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7486 ;; Tracked objects:
  7487 ;;		On entry : 0/0
  7488 ;;		On exit  : 0/0
  7489 ;;		Unchanged: 0/0
  7490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7491 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7492 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7494 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7495 ;;Total ram usage:        8 bytes
  7496 ;; Hardware stack levels used:    1
  7497 ;; Hardware stack levels required when called:    5
  7498 ;; This function calls:
  7499 ;;		___lldiv
  7500 ;;		___lmul
  7501 ;; This function is called by:
  7502 ;;		_epoch_to_caltime
  7503 ;; This function uses a non-reentrant model
  7504 ;;
  7505                           
  7506                           	psect	text28
  7507  002A06                     __ptext28:
  7508                           	opt stack 0
  7509  002A06                     _get_quot_rem:
  7510                           	opt stack 20
  7511                           
  7512                           ;My_header\My_RTCC.h: 115: epoch_t num = *quot;
  7513                           
  7514                           ; BSR set to: 0
  7515                           ;incstack = 0
  7516  002A06  C0E0  FFD9         	movff	get_quot_rem@quot,fsr2l
  7517  002A0A  C0E1  FFDA         	movff	get_quot_rem@quot+1,fsr2h
  7518  002A0E  CFDE F0E4          	movff	postinc2,get_quot_rem@num
  7519  002A12  CFDE F0E5          	movff	postinc2,get_quot_rem@num+1
  7520  002A16  CFDE F0E6          	movff	postinc2,get_quot_rem@num+2
  7521  002A1A  CFDE F0E7          	movff	postinc2,get_quot_rem@num+3
  7522                           
  7523                           ;My_header\My_RTCC.h: 116: return num - (*quot = num / div) * div;
  7524  002A1E  0100               	movlb	0	; () banked
  7525  002A20  51E2               	movf	get_quot_rem@div& (0+255),w,b
  7526  002A22  0100               	movlb	0	; () banked
  7527  002A24  6FCB               	movwf	___lldiv@divisor& (0+255),b
  7528  002A26  6BCC               	clrf	(___lldiv@divisor+1)& (0+255),b
  7529  002A28  6BCD               	clrf	(___lldiv@divisor+2)& (0+255),b
  7530  002A2A  6BCE               	clrf	(___lldiv@divisor+3)& (0+255),b
  7531  002A2C  C0E4  F0C7         	movff	get_quot_rem@num,___lldiv@dividend
  7532  002A30  C0E5  F0C8         	movff	get_quot_rem@num+1,___lldiv@dividend+1
  7533  002A34  C0E6  F0C9         	movff	get_quot_rem@num+2,___lldiv@dividend+2
  7534  002A38  C0E7  F0CA         	movff	get_quot_rem@num+3,___lldiv@dividend+3
  7535  002A3C  EC67  F017         	call	___lldiv	;wreg free
  7536  002A40  C0E0  FFD9         	movff	get_quot_rem@quot,fsr2l
  7537  002A44  C0E1  FFDA         	movff	get_quot_rem@quot+1,fsr2h
  7538  002A48  0100               	movlb	0	; () banked
  7539  002A4A  C0C7  FFDE         	movff	?___lldiv,postinc2
  7540  002A4E  0100               	movlb	0	; () banked
  7541  002A50  C0C8  FFDE         	movff	?___lldiv+1,postinc2
  7542  002A54  0100               	movlb	0	; () banked
  7543  002A56  C0C9  FFDE         	movff	?___lldiv+2,postinc2
  7544  002A5A  0100               	movlb	0	; () banked
  7545  002A5C  C0CA  FFDD         	movff	?___lldiv+3,postdec2
  7546  002A60  52DD               	movf	postdec2,f,c
  7547  002A62  52DD               	movf	postdec2,f,c
  7548  002A64  CFDE F0D4          	movff	postinc2,___lmul@multiplier
  7549  002A68  CFDE F0D5          	movff	postinc2,___lmul@multiplier+1
  7550  002A6C  CFDE F0D6          	movff	postinc2,___lmul@multiplier+2
  7551  002A70  CFDE F0D7          	movff	postinc2,___lmul@multiplier+3
  7552  002A74  0100               	movlb	0	; () banked
  7553  002A76  51E2               	movf	get_quot_rem@div& (0+255),w,b
  7554  002A78  0100               	movlb	0	; () banked
  7555  002A7A  6FD8               	movwf	___lmul@multiplicand& (0+255),b
  7556  002A7C  6BD9               	clrf	(___lmul@multiplicand+1)& (0+255),b
  7557  002A7E  6BDA               	clrf	(___lmul@multiplicand+2)& (0+255),b
  7558  002A80  6BDB               	clrf	(___lmul@multiplicand+3)& (0+255),b
  7559  002A82  EC2D  F01C         	call	___lmul	;wreg free
  7560  002A86  0100               	movlb	0	; () banked
  7561  002A88  1FD4               	comf	?___lmul& (0+255),f,b
  7562  002A8A  0100               	movlb	0	; () banked
  7563  002A8C  1FD5               	comf	(?___lmul+1)& (0+255),f,b
  7564  002A8E  0100               	movlb	0	; () banked
  7565  002A90  1FD6               	comf	(?___lmul+2)& (0+255),f,b
  7566  002A92  0100               	movlb	0	; () banked
  7567  002A94  1FD7               	comf	(?___lmul+3)& (0+255),f,b
  7568  002A96  0100               	movlb	0	; () banked
  7569  002A98  2BD4               	incf	?___lmul& (0+255),f,b
  7570  002A9A  0E00               	movlw	0
  7571  002A9C  0100               	movlb	0	; () banked
  7572  002A9E  23D5               	addwfc	(?___lmul+1)& (0+255),f,b
  7573  002AA0  0100               	movlb	0	; () banked
  7574  002AA2  23D6               	addwfc	(?___lmul+2)& (0+255),f,b
  7575  002AA4  0100               	movlb	0	; () banked
  7576  002AA6  23D7               	addwfc	(?___lmul+3)& (0+255),f,b
  7577  002AA8  0100               	movlb	0	; () banked
  7578  002AAA  51E4               	movf	get_quot_rem@num& (0+255),w,b
  7579  002AAC  0100               	movlb	0	; () banked
  7580  002AAE  25D4               	addwf	?___lmul& (0+255),w,b
  7581  002AB0  0100               	movlb	0	; () banked
  7582  002AB2  6FE0               	movwf	?_get_quot_rem& (0+255),b
  7583  002AB4  0100               	movlb	0	; () banked
  7584  002AB6  51E5               	movf	(get_quot_rem@num+1)& (0+255),w,b
  7585  002AB8  0100               	movlb	0	; () banked
  7586  002ABA  21D5               	addwfc	(?___lmul+1)& (0+255),w,b
  7587  002ABC  0100               	movlb	0	; () banked
  7588  002ABE  6FE1               	movwf	(?_get_quot_rem+1)& (0+255),b
  7589  002AC0  0100               	movlb	0	; () banked
  7590  002AC2  51E6               	movf	(get_quot_rem@num+2)& (0+255),w,b
  7591  002AC4  0100               	movlb	0	; () banked
  7592  002AC6  21D6               	addwfc	(?___lmul+2)& (0+255),w,b
  7593  002AC8  0100               	movlb	0	; () banked
  7594  002ACA  6FE2               	movwf	(?_get_quot_rem+2)& (0+255),b
  7595  002ACC  0100               	movlb	0	; () banked
  7596  002ACE  51E7               	movf	(get_quot_rem@num+3)& (0+255),w,b
  7597  002AD0  0100               	movlb	0	; () banked
  7598  002AD2  21D7               	addwfc	(?___lmul+3)& (0+255),w,b
  7599  002AD4  0100               	movlb	0	; () banked
  7600  002AD6  6FE3               	movwf	(?_get_quot_rem+3)& (0+255),b
  7601  002AD8  0012               	return	
  7602  002ADA                     __end_of_get_quot_rem:
  7603                           	opt stack 0
  7604                           tblptru	equ	0xFF8
  7605                           tblptrh	equ	0xFF7
  7606                           tblptrl	equ	0xFF6
  7607                           tablat	equ	0xFF5
  7608                           prodh	equ	0xFF4
  7609                           prodl	equ	0xFF3
  7610                           intcon	equ	0xFF2
  7611                           postinc0	equ	0xFEE
  7612                           wreg	equ	0xFE8
  7613                           indf1	equ	0xFE7
  7614                           fsr1h	equ	0xFE2
  7615                           fsr1l	equ	0xFE1
  7616                           indf2	equ	0xFDF
  7617                           postinc2	equ	0xFDE
  7618                           postdec2	equ	0xFDD
  7619                           plusw2	equ	0xFDB
  7620                           fsr2h	equ	0xFDA
  7621                           fsr2l	equ	0xFD9
  7622                           status	equ	0xFD8
  7623                           
  7624 ;; *************** function ___lldiv *****************
  7625 ;; Defined at:
  7626 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lldiv.c"
  7627 ;; Parameters:    Size  Location     Type
  7628 ;;  dividend        4    0[BANK0 ] unsigned long 
  7629 ;;  divisor         4    4[BANK0 ] unsigned long 
  7630 ;; Auto vars:     Size  Location     Type
  7631 ;;  quotient        4    8[BANK0 ] unsigned long 
  7632 ;;  counter         1   12[BANK0 ] unsigned char 
  7633 ;; Return value:  Size  Location     Type
  7634 ;;                  4    0[BANK0 ] unsigned long 
  7635 ;; Registers used:
  7636 ;;		wreg, status,2, status,0
  7637 ;; Tracked objects:
  7638 ;;		On entry : 0/0
  7639 ;;		On exit  : 0/0
  7640 ;;		Unchanged: 0/0
  7641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7642 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7643 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7645 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7646 ;;Total ram usage:       13 bytes
  7647 ;; Hardware stack levels used:    1
  7648 ;; Hardware stack levels required when called:    4
  7649 ;; This function calls:
  7650 ;;		Nothing
  7651 ;; This function is called by:
  7652 ;;		_CTMU_read
  7653 ;;		_get_quot_rem
  7654 ;;		_display_LCD
  7655 ;;		_my_utoa32
  7656 ;; This function uses a non-reentrant model
  7657 ;;
  7658                           
  7659                           	psect	text29
  7660  002ECE                     __ptext29:
  7661                           	opt stack 0
  7662  002ECE                     ___lldiv:
  7663                           	opt stack 24
  7664                           
  7665                           ; BSR set to: 0
  7666                           ;incstack = 0
  7667  002ECE  0E00               	movlw	0
  7668  002ED0  0100               	movlb	0	; () banked
  7669  002ED2  6FCF               	movwf	___lldiv@quotient& (0+255),b
  7670  002ED4  0E00               	movlw	0
  7671  002ED6  6FD0               	movwf	(___lldiv@quotient+1)& (0+255),b
  7672  002ED8  0E00               	movlw	0
  7673  002EDA  6FD1               	movwf	(___lldiv@quotient+2)& (0+255),b
  7674  002EDC  0E00               	movlw	0
  7675  002EDE  6FD2               	movwf	(___lldiv@quotient+3)& (0+255),b
  7676                           
  7677                           ; BSR set to: 0
  7678  002EE0  0100               	movlb	0	; () banked
  7679  002EE2  51CB               	movf	___lldiv@divisor& (0+255),w,b
  7680  002EE4  0100               	movlb	0	; () banked
  7681  002EE6  11CC               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7682  002EE8  0100               	movlb	0	; () banked
  7683  002EEA  11CD               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7684  002EEC  0100               	movlb	0	; () banked
  7685  002EEE  11CE               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7686  002EF0  B4D8               	btfsc	status,2,c
  7687  002EF2  D042               	goto	l1131
  7688                           
  7689                           ; BSR set to: 0
  7690  002EF4  0E01               	movlw	1
  7691  002EF6  0100               	movlb	0	; () banked
  7692  002EF8  6FD3               	movwf	___lldiv@counter& (0+255),b
  7693  002EFA  D008               	goto	l5063
  7694  002EFC                     l5061:
  7695                           
  7696                           ; BSR set to: 0
  7697  002EFC  0100               	movlb	0	; () banked
  7698  002EFE  90D8               	bcf	status,0,c
  7699  002F00  37CB               	rlcf	___lldiv@divisor& (0+255),f,b
  7700  002F02  37CC               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7701  002F04  37CD               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7702  002F06  37CE               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7703  002F08  0100               	movlb	0	; () banked
  7704  002F0A  2BD3               	incf	___lldiv@counter& (0+255),f,b
  7705  002F0C                     l5063:
  7706                           
  7707                           ; BSR set to: 0
  7708  002F0C  0100               	movlb	0	; () banked
  7709  002F0E  AFCE               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7710  002F10  D7F5               	goto	l5061
  7711  002F12                     l5065:
  7712                           
  7713                           ; BSR set to: 0
  7714  002F12  0100               	movlb	0	; () banked
  7715  002F14  90D8               	bcf	status,0,c
  7716  002F16  37CF               	rlcf	___lldiv@quotient& (0+255),f,b
  7717  002F18  37D0               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7718  002F1A  37D1               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7719  002F1C  37D2               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7720                           
  7721                           ; BSR set to: 0
  7722  002F1E  0100               	movlb	0	; () banked
  7723  002F20  51CB               	movf	___lldiv@divisor& (0+255),w,b
  7724  002F22  0100               	movlb	0	; () banked
  7725  002F24  5DC7               	subwf	___lldiv@dividend& (0+255),w,b
  7726  002F26  0100               	movlb	0	; () banked
  7727  002F28  51CC               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7728  002F2A  0100               	movlb	0	; () banked
  7729  002F2C  59C8               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7730  002F2E  0100               	movlb	0	; () banked
  7731  002F30  51CD               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7732  002F32  0100               	movlb	0	; () banked
  7733  002F34  59C9               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7734  002F36  0100               	movlb	0	; () banked
  7735  002F38  51CE               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7736  002F3A  0100               	movlb	0	; () banked
  7737  002F3C  59CA               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7738  002F3E  A0D8               	btfss	status,0,c
  7739  002F40  D012               	goto	l5073
  7740                           
  7741                           ; BSR set to: 0
  7742  002F42  0100               	movlb	0	; () banked
  7743  002F44  51CB               	movf	___lldiv@divisor& (0+255),w,b
  7744  002F46  0100               	movlb	0	; () banked
  7745  002F48  5FC7               	subwf	___lldiv@dividend& (0+255),f,b
  7746  002F4A  0100               	movlb	0	; () banked
  7747  002F4C  51CC               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7748  002F4E  0100               	movlb	0	; () banked
  7749  002F50  5BC8               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7750  002F52  0100               	movlb	0	; () banked
  7751  002F54  51CD               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7752  002F56  0100               	movlb	0	; () banked
  7753  002F58  5BC9               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7754  002F5A  0100               	movlb	0	; () banked
  7755  002F5C  51CE               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7756  002F5E  0100               	movlb	0	; () banked
  7757  002F60  5BCA               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7758                           
  7759                           ; BSR set to: 0
  7760  002F62  0100               	movlb	0	; () banked
  7761  002F64  81CF               	bsf	___lldiv@quotient& (0+255),0,b
  7762  002F66                     l5073:
  7763                           
  7764                           ; BSR set to: 0
  7765  002F66  0100               	movlb	0	; () banked
  7766  002F68  90D8               	bcf	status,0,c
  7767  002F6A  33CE               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7768  002F6C  33CD               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7769  002F6E  33CC               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7770  002F70  33CB               	rrcf	___lldiv@divisor& (0+255),f,b
  7771                           
  7772                           ; BSR set to: 0
  7773  002F72  0100               	movlb	0	; () banked
  7774  002F74  2FD3               	decfsz	___lldiv@counter& (0+255),f,b
  7775  002F76  D7CD               	goto	l5065
  7776  002F78                     l1131:
  7777                           
  7778                           ; BSR set to: 0
  7779  002F78  C0CF  F0C7         	movff	___lldiv@quotient,?___lldiv
  7780  002F7C  C0D0  F0C8         	movff	___lldiv@quotient+1,?___lldiv+1
  7781  002F80  C0D1  F0C9         	movff	___lldiv@quotient+2,?___lldiv+2
  7782  002F84  C0D2  F0CA         	movff	___lldiv@quotient+3,?___lldiv+3
  7783                           
  7784                           ; BSR set to: 0
  7785  002F88  0012               	return		;funcret
  7786  002F8A                     __end_of___lldiv:
  7787                           	opt stack 0
  7788                           tblptru	equ	0xFF8
  7789                           tblptrh	equ	0xFF7
  7790                           tblptrl	equ	0xFF6
  7791                           tablat	equ	0xFF5
  7792                           prodh	equ	0xFF4
  7793                           prodl	equ	0xFF3
  7794                           intcon	equ	0xFF2
  7795                           postinc0	equ	0xFEE
  7796                           wreg	equ	0xFE8
  7797                           indf1	equ	0xFE7
  7798                           fsr1h	equ	0xFE2
  7799                           fsr1l	equ	0xFE1
  7800                           indf2	equ	0xFDF
  7801                           postinc2	equ	0xFDE
  7802                           postdec2	equ	0xFDD
  7803                           plusw2	equ	0xFDB
  7804                           fsr2h	equ	0xFDA
  7805                           fsr2l	equ	0xFD9
  7806                           status	equ	0xFD8
  7807                           
  7808 ;; *************** function _caltime_to_RTCC *****************
  7809 ;; Defined at:
  7810 ;;		line 137 in file "../My_header\My_RTCC.h"
  7811 ;; Parameters:    Size  Location     Type
  7812 ;;  ct              2    5[BANK0 ] PTR struct .
  7813 ;;		 -> caltime_now(7), 
  7814 ;; Auto vars:     Size  Location     Type
  7815 ;;		None
  7816 ;; Return value:  Size  Location     Type
  7817 ;;		None               void
  7818 ;; Registers used:
  7819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7820 ;; Tracked objects:
  7821 ;;		On entry : 0/0
  7822 ;;		On exit  : 0/0
  7823 ;;		Unchanged: 0/0
  7824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7825 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7828 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7829 ;;Total ram usage:        2 bytes
  7830 ;; Hardware stack levels used:    1
  7831 ;; Hardware stack levels required when called:    6
  7832 ;; This function calls:
  7833 ;;		_d_to_x
  7834 ;; This function is called by:
  7835 ;;		_RTCC_from_epoch
  7836 ;;		_RTCC_from_caltime
  7837 ;; This function uses a non-reentrant model
  7838 ;;
  7839                           
  7840                           	psect	text30
  7841  002BAC                     __ptext30:
  7842                           	opt stack 0
  7843  002BAC                     _caltime_to_RTCC:
  7844                           	opt stack 20
  7845  002BAC                     l403:
  7846  002BAC  010F               	movlb	15	; () banked
  7847  002BAE  B93F               	btfsc	63,4,b	;volatile
  7848  002BB0  D7FD               	goto	l403
  7849                           
  7850                           ; BSR set to: 15
  7851                           ;My_header\My_RTCC.h: 139: RTCCFGbits.RTCPTR0 = 1;
  7852  002BB2  010F               	movlb	15	; () banked
  7853  002BB4  813F               	bsf	63,0,b	;volatile
  7854                           
  7855                           ;My_header\My_RTCC.h: 140: RTCCFGbits.RTCPTR1 = 1;
  7856  002BB6  010F               	movlb	15	; () banked
  7857  002BB8  833F               	bsf	63,1,b	;volatile
  7858                           
  7859                           ; BSR set to: 15
  7860                           ;My_header\My_RTCC.h: 141: RTCVALL = d_to_x(ct->YY);
  7861  002BBA  0100               	movlb	0	; () banked
  7862  002BBC  EE20 F006          	lfsr	2,6
  7863  002BC0  51CC               	movf	caltime_to_RTCC@ct& (0+255),w,b
  7864  002BC2  26D9               	addwf	fsr2l,f,c
  7865  002BC4  51CD               	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
  7866  002BC6  22DA               	addwfc	fsr2h,f,c
  7867  002BC8  50DF               	movf	indf2,w,c
  7868  002BCA  EC2B  F020         	call	_d_to_x
  7869  002BCE  010F               	movlb	15	; () banked
  7870  002BD0  6F3A               	movwf	58,b	;volatile
  7871                           
  7872                           ; BSR set to: 15
  7873                           ;My_header\My_RTCC.h: 142: RTCVALH = 0x00;
  7874  002BD2  0E00               	movlw	0
  7875  002BD4  010F               	movlb	15	; () banked
  7876  002BD6  6F3B               	movwf	59,b	;volatile
  7877                           
  7878                           ; BSR set to: 15
  7879                           ;My_header\My_RTCC.h: 143: RTCCFGbits.RTCPTR0 = 0;
  7880  002BD8  010F               	movlb	15	; () banked
  7881  002BDA  913F               	bcf	63,0,b	;volatile
  7882                           
  7883                           ; BSR set to: 15
  7884                           ;My_header\My_RTCC.h: 144: RTCCFGbits.RTCPTR1 = 1;
  7885  002BDC  010F               	movlb	15	; () banked
  7886  002BDE  833F               	bsf	63,1,b	;volatile
  7887                           
  7888                           ; BSR set to: 15
  7889                           ;My_header\My_RTCC.h: 145: RTCVALL = d_to_x(ct->DD);
  7890  002BE0  0100               	movlb	0	; () banked
  7891  002BE2  EE20 F004          	lfsr	2,4
  7892  002BE6  51CC               	movf	caltime_to_RTCC@ct& (0+255),w,b
  7893  002BE8  26D9               	addwf	fsr2l,f,c
  7894  002BEA  51CD               	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
  7895  002BEC  22DA               	addwfc	fsr2h,f,c
  7896  002BEE  50DF               	movf	indf2,w,c
  7897  002BF0  EC2B  F020         	call	_d_to_x
  7898  002BF4  010F               	movlb	15	; () banked
  7899  002BF6  6F3A               	movwf	58,b	;volatile
  7900                           
  7901                           ; BSR set to: 15
  7902                           ;My_header\My_RTCC.h: 146: RTCVALH = d_to_x(ct->MM);
  7903  002BF8  0100               	movlb	0	; () banked
  7904  002BFA  EE20 F005          	lfsr	2,5
  7905  002BFE  51CC               	movf	caltime_to_RTCC@ct& (0+255),w,b
  7906  002C00  26D9               	addwf	fsr2l,f,c
  7907  002C02  51CD               	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
  7908  002C04  22DA               	addwfc	fsr2h,f,c
  7909  002C06  50DF               	movf	indf2,w,c
  7910  002C08  EC2B  F020         	call	_d_to_x
  7911  002C0C  010F               	movlb	15	; () banked
  7912  002C0E  6F3B               	movwf	59,b	;volatile
  7913                           
  7914                           ; BSR set to: 15
  7915                           ;My_header\My_RTCC.h: 147: RTCCFGbits.RTCPTR0 = 1;
  7916  002C10  010F               	movlb	15	; () banked
  7917  002C12  813F               	bsf	63,0,b	;volatile
  7918                           
  7919                           ; BSR set to: 15
  7920                           ;My_header\My_RTCC.h: 148: RTCCFGbits.RTCPTR1 = 0;
  7921  002C14  010F               	movlb	15	; () banked
  7922  002C16  933F               	bcf	63,1,b	;volatile
  7923                           
  7924                           ; BSR set to: 15
  7925                           ;My_header\My_RTCC.h: 149: RTCVALL = d_to_x(ct->hh);
  7926  002C18  0100               	movlb	0	; () banked
  7927  002C1A  EE20 F002          	lfsr	2,2
  7928  002C1E  51CC               	movf	caltime_to_RTCC@ct& (0+255),w,b
  7929  002C20  26D9               	addwf	fsr2l,f,c
  7930  002C22  51CD               	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
  7931  002C24  22DA               	addwfc	fsr2h,f,c
  7932  002C26  50DF               	movf	indf2,w,c
  7933  002C28  EC2B  F020         	call	_d_to_x
  7934  002C2C  010F               	movlb	15	; () banked
  7935  002C2E  6F3A               	movwf	58,b	;volatile
  7936                           
  7937                           ; BSR set to: 15
  7938                           ;My_header\My_RTCC.h: 150: RTCVALH = d_to_x(ct->EE);
  7939  002C30  0100               	movlb	0	; () banked
  7940  002C32  EE20 F003          	lfsr	2,3
  7941  002C36  51CC               	movf	caltime_to_RTCC@ct& (0+255),w,b
  7942  002C38  26D9               	addwf	fsr2l,f,c
  7943  002C3A  51CD               	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
  7944  002C3C  22DA               	addwfc	fsr2h,f,c
  7945  002C3E  50DF               	movf	indf2,w,c
  7946  002C40  EC2B  F020         	call	_d_to_x
  7947  002C44  010F               	movlb	15	; () banked
  7948  002C46  6F3B               	movwf	59,b	;volatile
  7949                           
  7950                           ; BSR set to: 15
  7951                           ;My_header\My_RTCC.h: 151: RTCCFGbits.RTCPTR0 = 0;
  7952  002C48  010F               	movlb	15	; () banked
  7953  002C4A  913F               	bcf	63,0,b	;volatile
  7954                           
  7955                           ; BSR set to: 15
  7956                           ;My_header\My_RTCC.h: 152: RTCCFGbits.RTCPTR1 = 0;
  7957  002C4C  010F               	movlb	15	; () banked
  7958  002C4E  933F               	bcf	63,1,b	;volatile
  7959                           
  7960                           ; BSR set to: 15
  7961                           ;My_header\My_RTCC.h: 153: RTCVALL = d_to_x(ct->ss);
  7962  002C50  C0CC  FFD9         	movff	caltime_to_RTCC@ct,fsr2l
  7963  002C54  C0CD  FFDA         	movff	caltime_to_RTCC@ct+1,fsr2h
  7964  002C58  50DF               	movf	indf2,w,c
  7965  002C5A  EC2B  F020         	call	_d_to_x
  7966  002C5E  010F               	movlb	15	; () banked
  7967  002C60  6F3A               	movwf	58,b	;volatile
  7968                           
  7969                           ; BSR set to: 15
  7970                           ;My_header\My_RTCC.h: 154: RTCVALH = d_to_x(ct->mm);
  7971  002C62  0100               	movlb	0	; () banked
  7972  002C64  EE20 F001          	lfsr	2,1
  7973  002C68  51CC               	movf	caltime_to_RTCC@ct& (0+255),w,b
  7974  002C6A  26D9               	addwf	fsr2l,f,c
  7975  002C6C  51CD               	movf	(caltime_to_RTCC@ct+1)& (0+255),w,b
  7976  002C6E  22DA               	addwfc	fsr2h,f,c
  7977  002C70  50DF               	movf	indf2,w,c
  7978  002C72  EC2B  F020         	call	_d_to_x
  7979  002C76  010F               	movlb	15	; () banked
  7980  002C78  6F3B               	movwf	59,b	;volatile
  7981                           
  7982                           ; BSR set to: 15
  7983  002C7A  0012               	return		;funcret
  7984  002C7C                     __end_of_caltime_to_RTCC:
  7985                           	opt stack 0
  7986                           tblptru	equ	0xFF8
  7987                           tblptrh	equ	0xFF7
  7988                           tblptrl	equ	0xFF6
  7989                           tablat	equ	0xFF5
  7990                           prodh	equ	0xFF4
  7991                           prodl	equ	0xFF3
  7992                           intcon	equ	0xFF2
  7993                           postinc0	equ	0xFEE
  7994                           wreg	equ	0xFE8
  7995                           indf1	equ	0xFE7
  7996                           fsr1h	equ	0xFE2
  7997                           fsr1l	equ	0xFE1
  7998                           indf2	equ	0xFDF
  7999                           postinc2	equ	0xFDE
  8000                           postdec2	equ	0xFDD
  8001                           plusw2	equ	0xFDB
  8002                           fsr2h	equ	0xFDA
  8003                           fsr2l	equ	0xFD9
  8004                           status	equ	0xFD8
  8005                           
  8006 ;; *************** function _d_to_x *****************
  8007 ;; Defined at:
  8008 ;;		line 73 in file "../My_header\My_RTCC.h"
  8009 ;; Parameters:    Size  Location     Type
  8010 ;;  dec             1    wreg     unsigned char 
  8011 ;; Auto vars:     Size  Location     Type
  8012 ;;  dec             1    4[BANK0 ] unsigned char 
  8013 ;; Return value:  Size  Location     Type
  8014 ;;                  1    wreg      unsigned char 
  8015 ;; Registers used:
  8016 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8017 ;; Tracked objects:
  8018 ;;		On entry : 0/0
  8019 ;;		On exit  : 0/0
  8020 ;;		Unchanged: 0/0
  8021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8025 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8026 ;;Total ram usage:        1 bytes
  8027 ;; Hardware stack levels used:    1
  8028 ;; Hardware stack levels required when called:    5
  8029 ;; This function calls:
  8030 ;;		___awdiv
  8031 ;; This function is called by:
  8032 ;;		_caltime_to_RTCC
  8033 ;; This function uses a non-reentrant model
  8034 ;;
  8035                           
  8036                           	psect	text31
  8037  004056                     __ptext31:
  8038                           	opt stack 0
  8039  004056                     _d_to_x:
  8040                           	opt stack 20
  8041                           
  8042                           ; BSR set to: 15
  8043                           ;incstack = 0
  8044                           ;d_to_x@dec stored from wreg
  8045  004056  0100               	movlb	0	; () banked
  8046  004058  6FCB               	movwf	d_to_x@dec& (0+255),b
  8047                           
  8048                           ;My_header\My_RTCC.h: 76: return dec / 10 * 6 + dec;
  8049  00405A  C0CB  F01F         	movff	d_to_x@dec,___awdiv@dividend
  8050  00405E  6A20               	clrf	___awdiv@dividend+1,c
  8051  004060  0E00               	movlw	0
  8052  004062  6E22               	movwf	___awdiv@divisor+1,c
  8053  004064  0E0A               	movlw	10
  8054  004066  6E21               	movwf	___awdiv@divisor,c
  8055  004068  EC83  F019         	call	___awdiv	;wreg free
  8056  00406C  501F               	movf	?___awdiv,w,c
  8057  00406E  0D06               	mullw	6
  8058  004070  50F3               	movf	prodl,w,c
  8059  004072  0100               	movlb	0	; () banked
  8060  004074  25CB               	addwf	d_to_x@dec& (0+255),w,b
  8061  004076  0012               	return	
  8062  004078                     __end_of_d_to_x:
  8063                           	opt stack 0
  8064                           tblptru	equ	0xFF8
  8065                           tblptrh	equ	0xFF7
  8066                           tblptrl	equ	0xFF6
  8067                           tablat	equ	0xFF5
  8068                           prodh	equ	0xFF4
  8069                           prodl	equ	0xFF3
  8070                           intcon	equ	0xFF2
  8071                           postinc0	equ	0xFEE
  8072                           wreg	equ	0xFE8
  8073                           indf1	equ	0xFE7
  8074                           fsr1h	equ	0xFE2
  8075                           fsr1l	equ	0xFE1
  8076                           indf2	equ	0xFDF
  8077                           postinc2	equ	0xFDE
  8078                           postdec2	equ	0xFDD
  8079                           plusw2	equ	0xFDB
  8080                           fsr2h	equ	0xFDA
  8081                           fsr2l	equ	0xFD9
  8082                           status	equ	0xFD8
  8083                           
  8084 ;; *************** function ___awdiv *****************
  8085 ;; Defined at:
  8086 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  8087 ;; Parameters:    Size  Location     Type
  8088 ;;  dividend        2   30[COMRAM] int 
  8089 ;;  divisor         2   32[COMRAM] int 
  8090 ;; Auto vars:     Size  Location     Type
  8091 ;;  quotient        2    2[BANK0 ] int 
  8092 ;;  sign            1    1[BANK0 ] unsigned char 
  8093 ;;  counter         1    0[BANK0 ] unsigned char 
  8094 ;; Return value:  Size  Location     Type
  8095 ;;                  2   30[COMRAM] int 
  8096 ;; Registers used:
  8097 ;;		wreg, status,2, status,0
  8098 ;; Tracked objects:
  8099 ;;		On entry : 0/0
  8100 ;;		On exit  : 0/0
  8101 ;;		Unchanged: 0/0
  8102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8103 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8104 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8106 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8107 ;;Total ram usage:        8 bytes
  8108 ;; Hardware stack levels used:    1
  8109 ;; Hardware stack levels required when called:    4
  8110 ;; This function calls:
  8111 ;;		Nothing
  8112 ;; This function is called by:
  8113 ;;		_d_to_x
  8114 ;; This function uses a non-reentrant model
  8115 ;;
  8116                           
  8117                           	psect	text32
  8118  003306                     __ptext32:
  8119                           	opt stack 0
  8120  003306                     ___awdiv:
  8121                           	opt stack 20
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;incstack = 0
  8125  003306  0E00               	movlw	0
  8126  003308  0100               	movlb	0	; () banked
  8127  00330A  6FC8               	movwf	___awdiv@sign& (0+255),b
  8128                           
  8129                           ; BSR set to: 0
  8130  00330C  AE22               	btfss	___awdiv@divisor+1,7,c
  8131  00330E  D007               	goto	l4983
  8132                           
  8133                           ; BSR set to: 0
  8134  003310  6C21               	negf	___awdiv@divisor,c
  8135  003312  1E22               	comf	___awdiv@divisor+1,f,c
  8136  003314  B0D8               	btfsc	status,0,c
  8137  003316  2A22               	incf	___awdiv@divisor+1,f,c
  8138                           
  8139                           ; BSR set to: 0
  8140  003318  0E01               	movlw	1
  8141  00331A  0100               	movlb	0	; () banked
  8142  00331C  6FC8               	movwf	___awdiv@sign& (0+255),b
  8143  00331E                     l4983:
  8144                           
  8145                           ; BSR set to: 0
  8146  00331E  AE20               	btfss	___awdiv@dividend+1,7,c
  8147  003320  D007               	goto	l4989
  8148                           
  8149                           ; BSR set to: 0
  8150  003322  6C1F               	negf	___awdiv@dividend,c
  8151  003324  1E20               	comf	___awdiv@dividend+1,f,c
  8152  003326  B0D8               	btfsc	status,0,c
  8153  003328  2A20               	incf	___awdiv@dividend+1,f,c
  8154                           
  8155                           ; BSR set to: 0
  8156  00332A  0E01               	movlw	1
  8157  00332C  0100               	movlb	0	; () banked
  8158  00332E  1BC8               	xorwf	___awdiv@sign& (0+255),f,b
  8159  003330                     l4989:
  8160                           
  8161                           ; BSR set to: 0
  8162  003330  0E00               	movlw	0
  8163  003332  0100               	movlb	0	; () banked
  8164  003334  6FCA               	movwf	(___awdiv@quotient+1)& (0+255),b
  8165  003336  0E00               	movlw	0
  8166  003338  6FC9               	movwf	___awdiv@quotient& (0+255),b
  8167                           
  8168                           ; BSR set to: 0
  8169  00333A  5021               	movf	___awdiv@divisor,w,c
  8170  00333C  1022               	iorwf	___awdiv@divisor+1,w,c
  8171  00333E  B4D8               	btfsc	status,2,c
  8172  003340  D021               	goto	l5011
  8173                           
  8174                           ; BSR set to: 0
  8175  003342  0E01               	movlw	1
  8176  003344  0100               	movlb	0	; () banked
  8177  003346  6FC7               	movwf	___awdiv@counter& (0+255),b
  8178  003348  D005               	goto	l4997
  8179  00334A                     l4995:
  8180                           
  8181                           ; BSR set to: 0
  8182  00334A  90D8               	bcf	status,0,c
  8183  00334C  3621               	rlcf	___awdiv@divisor,f,c
  8184  00334E  3622               	rlcf	___awdiv@divisor+1,f,c
  8185  003350  0100               	movlb	0	; () banked
  8186  003352  2BC7               	incf	___awdiv@counter& (0+255),f,b
  8187  003354                     l4997:
  8188                           
  8189                           ; BSR set to: 0
  8190  003354  AE22               	btfss	___awdiv@divisor+1,7,c
  8191  003356  D7F9               	goto	l4995
  8192  003358                     l4999:
  8193                           
  8194                           ; BSR set to: 0
  8195  003358  0100               	movlb	0	; () banked
  8196  00335A  90D8               	bcf	status,0,c
  8197  00335C  37C9               	rlcf	___awdiv@quotient& (0+255),f,b
  8198  00335E  37CA               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8199                           
  8200                           ; BSR set to: 0
  8201  003360  5021               	movf	___awdiv@divisor,w,c
  8202  003362  5C1F               	subwf	___awdiv@dividend,w,c
  8203  003364  5022               	movf	___awdiv@divisor+1,w,c
  8204  003366  5820               	subwfb	___awdiv@dividend+1,w,c
  8205  003368  A0D8               	btfss	status,0,c
  8206  00336A  D006               	goto	l5007
  8207                           
  8208                           ; BSR set to: 0
  8209  00336C  5021               	movf	___awdiv@divisor,w,c
  8210  00336E  5E1F               	subwf	___awdiv@dividend,f,c
  8211  003370  5022               	movf	___awdiv@divisor+1,w,c
  8212  003372  5A20               	subwfb	___awdiv@dividend+1,f,c
  8213                           
  8214                           ; BSR set to: 0
  8215  003374  0100               	movlb	0	; () banked
  8216  003376  81C9               	bsf	___awdiv@quotient& (0+255),0,b
  8217  003378                     l5007:
  8218                           
  8219                           ; BSR set to: 0
  8220  003378  90D8               	bcf	status,0,c
  8221  00337A  3222               	rrcf	___awdiv@divisor+1,f,c
  8222  00337C  3221               	rrcf	___awdiv@divisor,f,c
  8223                           
  8224                           ; BSR set to: 0
  8225  00337E  0100               	movlb	0	; () banked
  8226  003380  2FC7               	decfsz	___awdiv@counter& (0+255),f,b
  8227  003382  D7EA               	goto	l4999
  8228  003384                     l5011:
  8229                           
  8230                           ; BSR set to: 0
  8231  003384  0100               	movlb	0	; () banked
  8232  003386  51C8               	movf	___awdiv@sign& (0+255),w,b
  8233  003388  0100               	movlb	0	; () banked
  8234  00338A  B4D8               	btfsc	status,2,c
  8235  00338C  D005               	goto	l5015
  8236                           
  8237                           ; BSR set to: 0
  8238  00338E  0100               	movlb	0	; () banked
  8239  003390  6DC9               	negf	___awdiv@quotient& (0+255),b
  8240  003392  1FCA               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8241  003394  B0D8               	btfsc	status,0,c
  8242  003396  2BCA               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8243  003398                     l5015:
  8244                           
  8245                           ; BSR set to: 0
  8246  003398  C0C9  F01F         	movff	___awdiv@quotient,?___awdiv
  8247  00339C  C0CA  F020         	movff	___awdiv@quotient+1,?___awdiv+1
  8248  0033A0  0012               	return	
  8249  0033A2                     __end_of___awdiv:
  8250                           	opt stack 0
  8251                           tblptru	equ	0xFF8
  8252                           tblptrh	equ	0xFF7
  8253                           tblptrl	equ	0xFF6
  8254                           tablat	equ	0xFF5
  8255                           prodh	equ	0xFF4
  8256                           prodl	equ	0xFF3
  8257                           intcon	equ	0xFF2
  8258                           postinc0	equ	0xFEE
  8259                           wreg	equ	0xFE8
  8260                           indf1	equ	0xFE7
  8261                           fsr1h	equ	0xFE2
  8262                           fsr1l	equ	0xFE1
  8263                           indf2	equ	0xFDF
  8264                           postinc2	equ	0xFDE
  8265                           postdec2	equ	0xFDD
  8266                           plusw2	equ	0xFDB
  8267                           fsr2h	equ	0xFDA
  8268                           fsr2l	equ	0xFD9
  8269                           status	equ	0xFD8
  8270                           
  8271 ;; *************** function _RTCC_adjust_time_cursor *****************
  8272 ;; Defined at:
  8273 ;;		line 311 in file "../My_header\My_RTCC.h"
  8274 ;; Parameters:    Size  Location     Type
  8275 ;;		None
  8276 ;; Auto vars:     Size  Location     Type
  8277 ;;		None
  8278 ;; Return value:  Size  Location     Type
  8279 ;;		None               void
  8280 ;; Registers used:
  8281 ;;		wreg, status,2
  8282 ;; Tracked objects:
  8283 ;;		On entry : 0/0
  8284 ;;		On exit  : 0/0
  8285 ;;		Unchanged: 0/0
  8286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8291 ;;Total ram usage:        0 bytes
  8292 ;; Hardware stack levels used:    1
  8293 ;; Hardware stack levels required when called:    4
  8294 ;; This function calls:
  8295 ;;		Nothing
  8296 ;; This function is called by:
  8297 ;;		_RTCC_adjust_time_button
  8298 ;; This function uses a non-reentrant model
  8299 ;;
  8300                           
  8301                           	psect	text33
  8302  003934                     __ptext33:
  8303                           	opt stack 0
  8304  003934                     _RTCC_adjust_time_cursor:
  8305                           	opt stack 24
  8306                           
  8307                           ;My_header\My_RTCC.h: 312: if (edit_flag.flag.ss)edit_flag.flags = 0x02;
  8308                           
  8309                           ; BSR set to: 0
  8310                           ;incstack = 0
  8311  003934  0100               	movlb	0	; () banked
  8312  003936  A1A0               	btfss	_edit_flag& (0+255),0,b
  8313  003938  D004               	goto	l498
  8314                           
  8315                           ; BSR set to: 0
  8316  00393A  0E02               	movlw	2
  8317  00393C  0100               	movlb	0	; () banked
  8318  00393E  6FA0               	movwf	_edit_flag& (0+255),b
  8319  003940  0012               	return	
  8320  003942                     l498:
  8321                           
  8322                           ; BSR set to: 0
  8323                           ;My_header\My_RTCC.h: 313: else if (edit_flag.flag.mm)edit_flag.flags = 0x04;
  8324  003942  0100               	movlb	0	; () banked
  8325  003944  A3A0               	btfss	_edit_flag& (0+255),1,b
  8326  003946  D004               	goto	l500
  8327                           
  8328                           ; BSR set to: 0
  8329  003948  0E04               	movlw	4
  8330  00394A  0100               	movlb	0	; () banked
  8331  00394C  6FA0               	movwf	_edit_flag& (0+255),b
  8332  00394E  0012               	return	
  8333  003950                     l500:
  8334                           
  8335                           ; BSR set to: 0
  8336                           ;My_header\My_RTCC.h: 314: else if (edit_flag.flag.hh)edit_flag.flags = 0x08;
  8337  003950  0100               	movlb	0	; () banked
  8338  003952  A5A0               	btfss	_edit_flag& (0+255),2,b
  8339  003954  D004               	goto	l502
  8340                           
  8341                           ; BSR set to: 0
  8342  003956  0E08               	movlw	8
  8343  003958  0100               	movlb	0	; () banked
  8344  00395A  6FA0               	movwf	_edit_flag& (0+255),b
  8345  00395C  0012               	return	
  8346  00395E                     l502:
  8347                           
  8348                           ; BSR set to: 0
  8349                           ;My_header\My_RTCC.h: 315: else if (edit_flag.flag.DD)edit_flag.flags = 0x10;
  8350  00395E  0100               	movlb	0	; () banked
  8351  003960  A7A0               	btfss	_edit_flag& (0+255),3,b
  8352  003962  D004               	goto	l504
  8353                           
  8354                           ; BSR set to: 0
  8355  003964  0E10               	movlw	16
  8356  003966  0100               	movlb	0	; () banked
  8357  003968  6FA0               	movwf	_edit_flag& (0+255),b
  8358  00396A  0012               	return	
  8359  00396C                     l504:
  8360                           
  8361                           ; BSR set to: 0
  8362                           ;My_header\My_RTCC.h: 316: else if (edit_flag.flag.MM)edit_flag.flags = 0x20;
  8363  00396C  0100               	movlb	0	; () banked
  8364  00396E  A9A0               	btfss	_edit_flag& (0+255),4,b
  8365  003970  D004               	goto	l506
  8366                           
  8367                           ; BSR set to: 0
  8368  003972  0E20               	movlw	32
  8369  003974  0100               	movlb	0	; () banked
  8370  003976  6FA0               	movwf	_edit_flag& (0+255),b
  8371  003978  0012               	return	
  8372  00397A                     l506:
  8373                           
  8374                           ; BSR set to: 0
  8375                           ;My_header\My_RTCC.h: 317: else if (edit_flag.flag.YY)edit_flag.flags = 0x01;
  8376  00397A  0100               	movlb	0	; () banked
  8377  00397C  ABA0               	btfss	_edit_flag& (0+255),5,b
  8378  00397E  D004               	goto	l3773
  8379                           
  8380                           ; BSR set to: 0
  8381  003980  0E01               	movlw	1
  8382  003982  0100               	movlb	0	; () banked
  8383  003984  6FA0               	movwf	_edit_flag& (0+255),b
  8384  003986  0012               	return	
  8385  003988                     l3773:
  8386                           
  8387                           ; BSR set to: 0
  8388                           ;My_header\My_RTCC.h: 318: else edit_flag.flags = 0x00;
  8389  003988  0E00               	movlw	0
  8390  00398A  0100               	movlb	0	; () banked
  8391  00398C  6FA0               	movwf	_edit_flag& (0+255),b
  8392                           
  8393                           ; BSR set to: 0
  8394                           
  8395                           ; BSR set to: 0
  8396                           
  8397                           ; BSR set to: 0
  8398                           
  8399                           ; BSR set to: 0
  8400                           
  8401                           ; BSR set to: 0
  8402  00398E  0012               	return	
  8403  003990                     __end_of_RTCC_adjust_time_cursor:
  8404                           	opt stack 0
  8405                           tblptru	equ	0xFF8
  8406                           tblptrh	equ	0xFF7
  8407                           tblptrl	equ	0xFF6
  8408                           tablat	equ	0xFF5
  8409                           prodh	equ	0xFF4
  8410                           prodl	equ	0xFF3
  8411                           intcon	equ	0xFF2
  8412                           postinc0	equ	0xFEE
  8413                           wreg	equ	0xFE8
  8414                           indf1	equ	0xFE7
  8415                           fsr1h	equ	0xFE2
  8416                           fsr1l	equ	0xFE1
  8417                           indf2	equ	0xFDF
  8418                           postinc2	equ	0xFDE
  8419                           postdec2	equ	0xFDD
  8420                           plusw2	equ	0xFDB
  8421                           fsr2h	equ	0xFDA
  8422                           fsr2l	equ	0xFD9
  8423                           status	equ	0xFD8
  8424                           
  8425 ;; *************** function _Auto_cut *****************
  8426 ;; Defined at:
  8427 ;;		line 140 in file "tasks.h"
  8428 ;; Parameters:    Size  Location     Type
  8429 ;;		None
  8430 ;; Auto vars:     Size  Location     Type
  8431 ;;  i               1    8[BANK0 ] unsigned char 
  8432 ;; Return value:  Size  Location     Type
  8433 ;;		None               void
  8434 ;; Registers used:
  8435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8436 ;; Tracked objects:
  8437 ;;		On entry : 0/0
  8438 ;;		On exit  : 0/0
  8439 ;;		Unchanged: 0/0
  8440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8442 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8443 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8444 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8445 ;;Total ram usage:        3 bytes
  8446 ;; Hardware stack levels used:    1
  8447 ;; Hardware stack levels required when called:    5
  8448 ;; This function calls:
  8449 ;;		_ADC
  8450 ;;		_IN
  8451 ;;		_OUT
  8452 ;;		___wmul
  8453 ;; This function is called by:
  8454 ;;		_normal_mode_loop
  8455 ;; This function uses a non-reentrant model
  8456 ;;
  8457                           
  8458                           	psect	text34
  8459  002804                     __ptext34:
  8460                           	opt stack 0
  8461  002804                     _Auto_cut:
  8462                           	opt stack 24
  8463                           
  8464                           ;tasks.h: 141: for (uint8_t i = 0; i < 3; i++) {
  8465                           
  8466                           ; BSR set to: 0
  8467                           ;incstack = 0
  8468  002804  0E00               	movlw	0
  8469  002806  0100               	movlb	0	; () banked
  8470  002808  6FCF               	movwf	Auto_cut@i& (0+255),b
  8471  00280A                     l5759:
  8472                           
  8473                           ; BSR set to: 0
  8474  00280A  0E02               	movlw	2
  8475  00280C  0100               	movlb	0	; () banked
  8476  00280E  65CF               	cpfsgt	Auto_cut@i& (0+255),b
  8477  002810  D001               	goto	l5763
  8478  002812  0012               	return	
  8479  002814                     l5763:
  8480                           
  8481                           ; BSR set to: 0
  8482                           ;tasks.h: 142: I[i] = 13 * ADC(IN(i)) / 16;
  8483  002814  0100               	movlb	0	; () banked
  8484  002816  51CF               	movf	Auto_cut@i& (0+255),w,b
  8485  002818  ECA8  F01F         	call	_IN
  8486  00281C  ECBC  F01F         	call	_ADC
  8487  002820  C01F  F0C7         	movff	?_ADC,___wmul@multiplier
  8488  002824  C020  F0C8         	movff	?_ADC+1,___wmul@multiplier+1
  8489  002828  0E00               	movlw	0
  8490  00282A  0100               	movlb	0	; () banked
  8491  00282C  6FCA               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8492  00282E  0E0D               	movlw	13
  8493  002830  6FC9               	movwf	___wmul@multiplicand& (0+255),b
  8494  002832  EC18  F01F         	call	___wmul	;wreg free
  8495  002836  0E04               	movlw	4
  8496  002838  0100               	movlb	0	; () banked
  8497  00283A  6FCD               	movwf	??_Auto_cut& (0+255),b
  8498  00283C                     u6215:
  8499  00283C  0100               	movlb	0	; () banked
  8500  00283E  90D8               	bcf	status,0,c
  8501  002840  33C8               	rrcf	(?___wmul+1)& (0+255),f,b
  8502  002842  33C7               	rrcf	?___wmul& (0+255),f,b
  8503  002844  0100               	movlb	0	; () banked
  8504  002846  2FCD               	decfsz	??_Auto_cut& (0+255),f,b
  8505  002848  D7F9               	goto	u6215
  8506  00284A  0100               	movlb	0	; () banked
  8507  00284C  51CF               	movf	Auto_cut@i& (0+255),w,b
  8508  00284E  0D02               	mullw	2
  8509  002850  0E23               	movlw	low _I
  8510  002852  24F3               	addwf	prodl,w,c
  8511  002854  6ED9               	movwf	fsr2l,c
  8512  002856  0E00               	movlw	high _I
  8513  002858  20F4               	addwfc	prodh,w,c
  8514  00285A  6EDA               	movwf	fsr2h,c
  8515  00285C  0100               	movlb	0	; () banked
  8516  00285E  C0C7  FFDE         	movff	?___wmul,postinc2
  8517  002862  0100               	movlb	0	; () banked
  8518  002864  C0C8  FFDD         	movff	?___wmul+1,postdec2
  8519                           
  8520                           ; BSR set to: 0
  8521                           ;tasks.h: 143: if (auto_cut_ON[i]) {
  8522  002868  0100               	movlb	0	; () banked
  8523  00286A  51CF               	movf	Auto_cut@i& (0+255),w,b
  8524  00286C  0D01               	mullw	1
  8525  00286E  0E29               	movlw	low _auto_cut_ON
  8526  002870  24F3               	addwf	prodl,w,c
  8527  002872  6ED9               	movwf	fsr2l,c
  8528  002874  0E00               	movlw	high _auto_cut_ON
  8529  002876  20F4               	addwfc	prodh,w,c
  8530  002878  6EDA               	movwf	fsr2h,c
  8531  00287A  50DF               	movf	indf2,w,c
  8532  00287C  B4D8               	btfsc	status,2,c
  8533  00287E  D040               	goto	l5775
  8534                           
  8535                           ; BSR set to: 0
  8536                           ;tasks.h: 144: if (I[i] < 100) {
  8537  002880  0100               	movlb	0	; () banked
  8538  002882  51CF               	movf	Auto_cut@i& (0+255),w,b
  8539  002884  0D02               	mullw	2
  8540  002886  0E23               	movlw	low _I
  8541  002888  24F3               	addwf	prodl,w,c
  8542  00288A  6ED9               	movwf	fsr2l,c
  8543  00288C  0E00               	movlw	high _I
  8544  00288E  20F4               	addwfc	prodh,w,c
  8545  002890  6EDA               	movwf	fsr2h,c
  8546  002892  0E01               	movlw	1
  8547  002894  50DB               	movf	plusw2,w,c
  8548  002896  E127               	bnz	l5773
  8549  002898  0E64               	movlw	100
  8550  00289A  5CDE               	subwf	postinc2,w,c
  8551  00289C  B0D8               	btfsc	status,0,c
  8552  00289E  D023               	goto	l5773
  8553                           
  8554                           ; BSR set to: 0
  8555                           ;tasks.h: 145: cut_cnt[i]++;
  8556  0028A0  0100               	movlb	0	; () banked
  8557  0028A2  51CF               	movf	Auto_cut@i& (0+255),w,b
  8558  0028A4  0D02               	mullw	2
  8559  0028A6  0E84               	movlw	low _cut_cnt
  8560  0028A8  24F3               	addwf	prodl,w,c
  8561  0028AA  6ED9               	movwf	fsr2l,c
  8562  0028AC  0E00               	movlw	high _cut_cnt
  8563  0028AE  20F4               	addwfc	prodh,w,c
  8564  0028B0  6EDA               	movwf	fsr2h,c
  8565  0028B2  2ADE               	incf	postinc2,f,c
  8566  0028B4  0E00               	movlw	0
  8567  0028B6  22DD               	addwfc	postdec2,f,c
  8568                           
  8569                           ;tasks.h: 146: if (cut_cnt[i] > 6) {
  8570  0028B8  0100               	movlb	0	; () banked
  8571  0028BA  51CF               	movf	Auto_cut@i& (0+255),w,b
  8572  0028BC  0D02               	mullw	2
  8573  0028BE  0E84               	movlw	low _cut_cnt
  8574  0028C0  24F3               	addwf	prodl,w,c
  8575  0028C2  6ED9               	movwf	fsr2l,c
  8576  0028C4  0E00               	movlw	high _cut_cnt
  8577  0028C6  20F4               	addwfc	prodh,w,c
  8578  0028C8  6EDA               	movwf	fsr2h,c
  8579  0028CA  0E01               	movlw	1
  8580  0028CC  50DB               	movf	plusw2,w,c
  8581  0028CE  E104               	bnz	u6240
  8582  0028D0  0E07               	movlw	7
  8583  0028D2  5CDE               	subwf	postinc2,w,c
  8584  0028D4  A0D8               	btfss	status,0,c
  8585  0028D6  D014               	goto	l5775
  8586  0028D8                     u6240:
  8587                           
  8588                           ; BSR set to: 0
  8589                           ;tasks.h: 147: OUT(i, 0);
  8590  0028D8  0E00               	movlw	0
  8591  0028DA  6E1F               	movwf	OUT@value,c
  8592  0028DC  0100               	movlb	0	; () banked
  8593  0028DE  51CF               	movf	Auto_cut@i& (0+255),w,b
  8594  0028E0  EC75  F01D         	call	_OUT
  8595                           
  8596                           ;tasks.h: 148: }
  8597                           ;tasks.h: 149: } else {
  8598  0028E4  D00D               	goto	l5775
  8599  0028E6                     l5773:
  8600                           
  8601                           ;tasks.h: 150: cut_cnt[i] = 0;
  8602  0028E6  0100               	movlb	0	; () banked
  8603  0028E8  51CF               	movf	Auto_cut@i& (0+255),w,b
  8604  0028EA  0D02               	mullw	2
  8605  0028EC  0E84               	movlw	low _cut_cnt
  8606  0028EE  24F3               	addwf	prodl,w,c
  8607  0028F0  6ED9               	movwf	fsr2l,c
  8608  0028F2  0E00               	movlw	high _cut_cnt
  8609  0028F4  20F4               	addwfc	prodh,w,c
  8610  0028F6  6EDA               	movwf	fsr2h,c
  8611  0028F8  0E00               	movlw	0
  8612  0028FA  6EDE               	movwf	postinc2,c
  8613  0028FC  0E00               	movlw	0
  8614  0028FE  6EDD               	movwf	postdec2,c
  8615  002900                     l5775:
  8616  002900  0100               	movlb	0	; () banked
  8617  002902  2BCF               	incf	Auto_cut@i& (0+255),f,b
  8618  002904  D782               	goto	l5759
  8619  002906                     __end_of_Auto_cut:
  8620                           	opt stack 0
  8621                           tblptru	equ	0xFF8
  8622                           tblptrh	equ	0xFF7
  8623                           tblptrl	equ	0xFF6
  8624                           tablat	equ	0xFF5
  8625                           prodh	equ	0xFF4
  8626                           prodl	equ	0xFF3
  8627                           intcon	equ	0xFF2
  8628                           postinc0	equ	0xFEE
  8629                           wreg	equ	0xFE8
  8630                           indf1	equ	0xFE7
  8631                           fsr1h	equ	0xFE2
  8632                           fsr1l	equ	0xFE1
  8633                           indf2	equ	0xFDF
  8634                           postinc2	equ	0xFDE
  8635                           postdec2	equ	0xFDD
  8636                           plusw2	equ	0xFDB
  8637                           fsr2h	equ	0xFDA
  8638                           fsr2l	equ	0xFD9
  8639                           status	equ	0xFD8
  8640                           
  8641 ;; *************** function ___wmul *****************
  8642 ;; Defined at:
  8643 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  8644 ;; Parameters:    Size  Location     Type
  8645 ;;  multiplier      2    0[BANK0 ] unsigned int 
  8646 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  8647 ;; Auto vars:     Size  Location     Type
  8648 ;;  product         2    4[BANK0 ] unsigned int 
  8649 ;; Return value:  Size  Location     Type
  8650 ;;                  2    0[BANK0 ] unsigned int 
  8651 ;; Registers used:
  8652 ;;		wreg, status,2, status,0, prodl, prodh
  8653 ;; Tracked objects:
  8654 ;;		On entry : 0/0
  8655 ;;		On exit  : 0/0
  8656 ;;		Unchanged: 0/0
  8657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8658 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8659 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8661 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8662 ;;Total ram usage:        6 bytes
  8663 ;; Hardware stack levels used:    1
  8664 ;; Hardware stack levels required when called:    4
  8665 ;; This function calls:
  8666 ;;		Nothing
  8667 ;; This function is called by:
  8668 ;;		_Auto_cut
  8669 ;;		_my_atoi
  8670 ;; This function uses a non-reentrant model
  8671 ;;
  8672                           
  8673                           	psect	text35
  8674  003E30                     __ptext35:
  8675                           	opt stack 0
  8676  003E30                     ___wmul:
  8677                           	opt stack 24
  8678                           
  8679                           ; BSR set to: 0
  8680                           ;incstack = 0
  8681  003E30  0100               	movlb	0	; () banked
  8682  003E32  51C7               	movf	___wmul@multiplier& (0+255),w,b
  8683  003E34  0100               	movlb	0	; () banked
  8684  003E36  03C9               	mulwf	___wmul@multiplicand& (0+255),b
  8685  003E38  CFF3 F0CB          	movff	prodl,___wmul@product
  8686  003E3C  CFF4 F0CC          	movff	prodh,___wmul@product+1
  8687  003E40  0100               	movlb	0	; () banked
  8688  003E42  51C7               	movf	___wmul@multiplier& (0+255),w,b
  8689  003E44  0100               	movlb	0	; () banked
  8690  003E46  03CA               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  8691  003E48  50F3               	movf	prodl,w,c
  8692  003E4A  0100               	movlb	0	; () banked
  8693  003E4C  27CC               	addwf	(___wmul@product+1)& (0+255),f,b
  8694  003E4E  0100               	movlb	0	; () banked
  8695  003E50  51C8               	movf	(___wmul@multiplier+1)& (0+255),w,b
  8696  003E52  0100               	movlb	0	; () banked
  8697  003E54  03C9               	mulwf	___wmul@multiplicand& (0+255),b
  8698  003E56  50F3               	movf	prodl,w,c
  8699  003E58  0100               	movlb	0	; () banked
  8700  003E5A  27CC               	addwf	(___wmul@product+1)& (0+255),f,b
  8701                           
  8702                           ; BSR set to: 0
  8703  003E5C  C0CB  F0C7         	movff	___wmul@product,?___wmul
  8704  003E60  C0CC  F0C8         	movff	___wmul@product+1,?___wmul+1
  8705  003E64  0012               	return	
  8706  003E66                     __end_of___wmul:
  8707                           	opt stack 0
  8708                           tblptru	equ	0xFF8
  8709                           tblptrh	equ	0xFF7
  8710                           tblptrl	equ	0xFF6
  8711                           tablat	equ	0xFF5
  8712                           prodh	equ	0xFF4
  8713                           prodl	equ	0xFF3
  8714                           intcon	equ	0xFF2
  8715                           postinc0	equ	0xFEE
  8716                           wreg	equ	0xFE8
  8717                           indf1	equ	0xFE7
  8718                           fsr1h	equ	0xFE2
  8719                           fsr1l	equ	0xFE1
  8720                           indf2	equ	0xFDF
  8721                           postinc2	equ	0xFDE
  8722                           postdec2	equ	0xFDD
  8723                           plusw2	equ	0xFDB
  8724                           fsr2h	equ	0xFDA
  8725                           fsr2l	equ	0xFD9
  8726                           status	equ	0xFD8
  8727                           
  8728 ;; *************** function _OUT *****************
  8729 ;; Defined at:
  8730 ;;		line 49 in file "tasks.h"
  8731 ;; Parameters:    Size  Location     Type
  8732 ;;  b               1    wreg     unsigned char 
  8733 ;;  value           1   30[COMRAM] unsigned char 
  8734 ;; Auto vars:     Size  Location     Type
  8735 ;;  b               1   31[COMRAM] unsigned char 
  8736 ;; Return value:  Size  Location     Type
  8737 ;;		None               void
  8738 ;; Registers used:
  8739 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8740 ;; Tracked objects:
  8741 ;;		On entry : 0/0
  8742 ;;		On exit  : 0/0
  8743 ;;		Unchanged: 0/0
  8744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8745 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8746 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8748 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8749 ;;Total ram usage:        2 bytes
  8750 ;; Hardware stack levels used:    1
  8751 ;; Hardware stack levels required when called:    4
  8752 ;; This function calls:
  8753 ;;		Nothing
  8754 ;; This function is called by:
  8755 ;;		_Auto_cut
  8756 ;;		_port_loop
  8757 ;;		_sleep_loop
  8758 ;;		_main
  8759 ;; This function uses a non-reentrant model
  8760 ;;
  8761                           
  8762                           	psect	text36
  8763  003AEA                     __ptext36:
  8764                           	opt stack 0
  8765  003AEA                     _OUT:
  8766                           	opt stack 25
  8767                           
  8768                           ; BSR set to: 0
  8769                           ;incstack = 0
  8770                           ;OUT@b stored from wreg
  8771  003AEA  6E20               	movwf	OUT@b,c
  8772                           
  8773                           ;tasks.h: 50: out_flag[b] = value;
  8774  003AEC  5020               	movf	OUT@b,w,c
  8775  003AEE  0D01               	mullw	1
  8776  003AF0  0E91               	movlw	low _out_flag
  8777  003AF2  24F3               	addwf	prodl,w,c
  8778  003AF4  6ED9               	movwf	fsr2l,c
  8779  003AF6  0E00               	movlw	high _out_flag
  8780  003AF8  20F4               	addwfc	prodh,w,c
  8781  003AFA  6EDA               	movwf	fsr2h,c
  8782  003AFC  C01F  FFDF         	movff	OUT@value,indf2
  8783                           
  8784                           ;tasks.h: 51: switch (b) {
  8785  003B00  D012               	goto	l5605
  8786  003B02                     l605:
  8787                           
  8788                           ;tasks.h: 53: LATA7 = value;
  8789  003B02  A01F               	btfss	OUT@value,0,c
  8790  003B04  D002               	goto	u5970
  8791  003B06  8E89               	bsf	3977,7,c	;volatile
  8792  003B08  0012               	return	
  8793  003B0A                     u5970:
  8794  003B0A  9E89               	bcf	3977,7,c	;volatile
  8795                           
  8796                           ;tasks.h: 54: break;
  8797  003B0C  0012               	return	
  8798  003B0E                     l607:
  8799                           
  8800                           ;tasks.h: 56: LATA6 = value;
  8801  003B0E  A01F               	btfss	OUT@value,0,c
  8802  003B10  D002               	goto	u5990
  8803  003B12  8C89               	bsf	3977,6,c	;volatile
  8804  003B14  0012               	return	
  8805  003B16                     u5990:
  8806  003B16  9C89               	bcf	3977,6,c	;volatile
  8807                           
  8808                           ;tasks.h: 57: break;
  8809  003B18  0012               	return	
  8810  003B1A                     l608:
  8811                           
  8812                           ;tasks.h: 59: LATA5 = value;
  8813  003B1A  A01F               	btfss	OUT@value,0,c
  8814  003B1C  D002               	goto	u6010
  8815  003B1E  8A89               	bsf	3977,5,c	;volatile
  8816  003B20  0012               	return	
  8817  003B22                     u6010:
  8818  003B22  9A89               	bcf	3977,5,c	;volatile
  8819                           
  8820                           ;tasks.h: 61: }
  8821                           
  8822                           ;tasks.h: 60: break;
  8823  003B24  0012               	return	
  8824  003B26                     l5605:
  8825  003B26  5020               	movf	OUT@b,w,c
  8826                           
  8827                           ; Switch size 1, requested type "space"
  8828                           ; Number of cases is 3, Range of values is 0 to 2
  8829                           ; switch strategies available:
  8830                           ; Name         Instructions Cycles
  8831                           ; simple_byte           10     6 (average)
  8832                           ;	Chosen strategy is simple_byte
  8833  003B28  0A00               	xorlw	0	; case 0
  8834  003B2A  B4D8               	btfsc	status,2,c
  8835  003B2C  D7EA               	goto	l605
  8836  003B2E  0A01               	xorlw	1	; case 1
  8837  003B30  B4D8               	btfsc	status,2,c
  8838  003B32  D7ED               	goto	l607
  8839  003B34  0A03               	xorlw	3	; case 2
  8840  003B36  A4D8               	btfss	status,2,c
  8841  003B38  0012               	return	
  8842  003B3A  D7EF               	goto	l608
  8843  003B3C                     __end_of_OUT:
  8844                           	opt stack 0
  8845                           tblptru	equ	0xFF8
  8846                           tblptrh	equ	0xFF7
  8847                           tblptrl	equ	0xFF6
  8848                           tablat	equ	0xFF5
  8849                           prodh	equ	0xFF4
  8850                           prodl	equ	0xFF3
  8851                           intcon	equ	0xFF2
  8852                           postinc0	equ	0xFEE
  8853                           wreg	equ	0xFE8
  8854                           indf1	equ	0xFE7
  8855                           fsr1h	equ	0xFE2
  8856                           fsr1l	equ	0xFE1
  8857                           indf2	equ	0xFDF
  8858                           postinc2	equ	0xFDE
  8859                           postdec2	equ	0xFDD
  8860                           plusw2	equ	0xFDB
  8861                           fsr2h	equ	0xFDA
  8862                           fsr2l	equ	0xFD9
  8863                           status	equ	0xFD8
  8864                           
  8865 ;; *************** function _IN *****************
  8866 ;; Defined at:
  8867 ;;		line 64 in file "tasks.h"
  8868 ;; Parameters:    Size  Location     Type
  8869 ;;  b               1    wreg     unsigned char 
  8870 ;; Auto vars:     Size  Location     Type
  8871 ;;  b               1   30[COMRAM] unsigned char 
  8872 ;; Return value:  Size  Location     Type
  8873 ;;                  1    wreg      unsigned char 
  8874 ;; Registers used:
  8875 ;;		wreg, status,2, status,0
  8876 ;; Tracked objects:
  8877 ;;		On entry : 0/0
  8878 ;;		On exit  : 0/0
  8879 ;;		Unchanged: 0/0
  8880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8882 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8884 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8885 ;;Total ram usage:        1 bytes
  8886 ;; Hardware stack levels used:    1
  8887 ;; Hardware stack levels required when called:    4
  8888 ;; This function calls:
  8889 ;;		Nothing
  8890 ;; This function is called by:
  8891 ;;		_Auto_cut
  8892 ;; This function uses a non-reentrant model
  8893 ;;
  8894                           
  8895                           	psect	text37
  8896  003F50                     __ptext37:
  8897                           	opt stack 0
  8898  003F50                     _IN:
  8899                           	opt stack 24
  8900                           
  8901                           ;incstack = 0
  8902                           ;IN@b stored from wreg
  8903  003F50  6E1F               	movwf	IN@b,c
  8904                           
  8905                           ;tasks.h: 65: switch (b) {
  8906  003F52  D006               	goto	l5623
  8907  003F54                     l5609:
  8908                           
  8909                           ;tasks.h: 67: return 10;
  8910  003F54  0E0A               	movlw	10
  8911  003F56  0012               	return	
  8912  003F58                     l5613:
  8913                           
  8914                           ;tasks.h: 69: return 9;
  8915  003F58  0E09               	movlw	9
  8916  003F5A  0012               	return	
  8917  003F5C                     l5617:
  8918                           
  8919                           ;tasks.h: 71: return 8;
  8920  003F5C  0E08               	movlw	8
  8921  003F5E  0012               	return	
  8922  003F60                     l5623:
  8923  003F60  501F               	movf	IN@b,w,c
  8924                           
  8925                           ; Switch size 1, requested type "space"
  8926                           ; Number of cases is 3, Range of values is 0 to 2
  8927                           ; switch strategies available:
  8928                           ; Name         Instructions Cycles
  8929                           ; simple_byte           10     6 (average)
  8930                           ;	Chosen strategy is simple_byte
  8931  003F62  0A00               	xorlw	0	; case 0
  8932  003F64  B4D8               	btfsc	status,2,c
  8933  003F66  D7F6               	goto	l5609
  8934  003F68  0A01               	xorlw	1	; case 1
  8935  003F6A  B4D8               	btfsc	status,2,c
  8936  003F6C  D7F5               	goto	l5613
  8937  003F6E  0A03               	xorlw	3	; case 2
  8938  003F70  B4D8               	btfsc	status,2,c
  8939  003F72  D7F4               	goto	l5617
  8940                           
  8941                           ;tasks.h: 73: return 0;
  8942  003F74  0E00               	movlw	0
  8943  003F76  0012               	return	
  8944  003F78                     __end_of_IN:
  8945                           	opt stack 0
  8946                           tblptru	equ	0xFF8
  8947                           tblptrh	equ	0xFF7
  8948                           tblptrl	equ	0xFF6
  8949                           tablat	equ	0xFF5
  8950                           prodh	equ	0xFF4
  8951                           prodl	equ	0xFF3
  8952                           intcon	equ	0xFF2
  8953                           postinc0	equ	0xFEE
  8954                           wreg	equ	0xFE8
  8955                           indf1	equ	0xFE7
  8956                           fsr1h	equ	0xFE2
  8957                           fsr1l	equ	0xFE1
  8958                           indf2	equ	0xFDF
  8959                           postinc2	equ	0xFDE
  8960                           postdec2	equ	0xFDD
  8961                           plusw2	equ	0xFDB
  8962                           fsr2h	equ	0xFDA
  8963                           fsr2l	equ	0xFD9
  8964                           status	equ	0xFD8
  8965                           
  8966 ;; *************** function _ADC *****************
  8967 ;; Defined at:
  8968 ;;		line 172 in file "../My_header\My_header.h"
  8969 ;; Parameters:    Size  Location     Type
  8970 ;;  ch              1    wreg     unsigned char 
  8971 ;; Auto vars:     Size  Location     Type
  8972 ;;  ch              1   33[COMRAM] unsigned char 
  8973 ;; Return value:  Size  Location     Type
  8974 ;;                  2   30[COMRAM] unsigned int 
  8975 ;; Registers used:
  8976 ;;		wreg, status,2, status,0
  8977 ;; Tracked objects:
  8978 ;;		On entry : 0/0
  8979 ;;		On exit  : 0/0
  8980 ;;		Unchanged: 0/0
  8981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8982 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8983 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8984 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8985 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8986 ;;Total ram usage:        4 bytes
  8987 ;; Hardware stack levels used:    1
  8988 ;; Hardware stack levels required when called:    4
  8989 ;; This function calls:
  8990 ;;		Nothing
  8991 ;; This function is called by:
  8992 ;;		_Auto_cut
  8993 ;; This function uses a non-reentrant model
  8994 ;;
  8995                           
  8996                           	psect	text38
  8997  003F78                     __ptext38:
  8998                           	opt stack 0
  8999  003F78                     _ADC:
  9000                           	opt stack 24
  9001                           
  9002                           ;incstack = 0
  9003                           ;ADC@ch stored from wreg
  9004  003F78  6E22               	movwf	ADC@ch,c
  9005                           
  9006                           ;My_header\My_header.h: 173: ADCON0bits.CHS = ch;
  9007  003F7A  C022  F021         	movff	ADC@ch,??_ADC
  9008  003F7E  4621               	rlncf	??_ADC,f,c
  9009  003F80  4621               	rlncf	??_ADC,f,c
  9010  003F82  50C2               	movf	4034,w,c	;volatile
  9011  003F84  1821               	xorwf	??_ADC,w,c
  9012  003F86  0BC3               	andlw	-61
  9013  003F88  1821               	xorwf	??_ADC,w,c
  9014  003F8A  6EC2               	movwf	4034,c	;volatile
  9015                           
  9016                           ;My_header\My_header.h: 174: ADCON0bits.ADON = 1;
  9017  003F8C  80C2               	bsf	4034,0,c	;volatile
  9018                           
  9019                           ;My_header\My_header.h: 176: PIR1bits.ADIF = 0;
  9020  003F8E  9C9E               	bcf	3998,6,c	;volatile
  9021                           
  9022                           ;My_header\My_header.h: 177: ADCON0bits.GO_nDONE = 1;
  9023  003F90  82C2               	bsf	4034,1,c	;volatile
  9024  003F92                     l149:
  9025  003F92  AC9E               	btfss	3998,6,c	;volatile
  9026  003F94  D7FE               	goto	l149
  9027                           
  9028                           ;My_header\My_header.h: 179: return ADRES;
  9029  003F96  CFC3 F01F          	movff	4035,?_ADC	;volatile
  9030  003F9A  CFC4 F020          	movff	4036,?_ADC+1	;volatile
  9031  003F9E  0012               	return		;funcret
  9032  003FA0                     __end_of_ADC:
  9033                           	opt stack 0
  9034                           tblptru	equ	0xFF8
  9035                           tblptrh	equ	0xFF7
  9036                           tblptrl	equ	0xFF6
  9037                           tablat	equ	0xFF5
  9038                           prodh	equ	0xFF4
  9039                           prodl	equ	0xFF3
  9040                           intcon	equ	0xFF2
  9041                           postinc0	equ	0xFEE
  9042                           wreg	equ	0xFE8
  9043                           indf1	equ	0xFE7
  9044                           fsr1h	equ	0xFE2
  9045                           fsr1l	equ	0xFE1
  9046                           indf2	equ	0xFDF
  9047                           postinc2	equ	0xFDE
  9048                           postdec2	equ	0xFDD
  9049                           plusw2	equ	0xFDB
  9050                           fsr2h	equ	0xFDA
  9051                           fsr2l	equ	0xFD9
  9052                           status	equ	0xFD8
  9053                           
  9054 ;; *************** function _main_init *****************
  9055 ;; Defined at:
  9056 ;;		line 258 in file "tasks.h"
  9057 ;; Parameters:    Size  Location     Type
  9058 ;;		None
  9059 ;; Auto vars:     Size  Location     Type
  9060 ;;  txbuf         200    0[BANK1 ] unsigned char [200]
  9061 ;; Return value:  Size  Location     Type
  9062 ;;		None               void
  9063 ;; Registers used:
  9064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9065 ;; Tracked objects:
  9066 ;;		On entry : 0/0
  9067 ;;		On exit  : 0/0
  9068 ;;		Unchanged: 0/0
  9069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9071 ;;      Locals:         0       0     200       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9073 ;;      Totals:         0       0     200       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9074 ;;Total ram usage:      200 bytes
  9075 ;; Hardware stack levels used:    1
  9076 ;; Hardware stack levels required when called:    9
  9077 ;; This function calls:
  9078 ;;		_ADC_init
  9079 ;;		_CTMU_init
  9080 ;;		_I2C_LCD_init
  9081 ;;		_I2C_init
  9082 ;;		_RTCC_init
  9083 ;;		_UART_init
  9084 ;;		_ringbuf_init
  9085 ;;		_timer0_init
  9086 ;;		_timer1_init
  9087 ;;		_timer3_init
  9088 ;; This function is called by:
  9089 ;;		_main
  9090 ;; This function uses a non-reentrant model
  9091 ;;
  9092                           
  9093                           	psect	text39
  9094  003766                     __ptext39:
  9095                           	opt stack 0
  9096  003766                     _main_init:
  9097                           	opt stack 21
  9098                           
  9099                           ;tasks.h: 260: OSCCONbits.IRCF = 7;
  9100                           
  9101                           ;incstack = 0
  9102  003766  88D3               	bsf	4051,4,c	;volatile
  9103  003768  8AD3               	bsf	4051,5,c	;volatile
  9104  00376A  8CD3               	bsf	4051,6,c	;volatile
  9105                           
  9106                           ;tasks.h: 261: OSCTUNEbits.PLLEN = 1;
  9107  00376C  8C9B               	bsf	3995,6,c	;volatile
  9108                           
  9109                           ;tasks.h: 262: OSCCONbits.SCS = 0;
  9110  00376E  0EFC               	movlw	-4
  9111  003770  16D3               	andwf	4051,f,c	;volatile
  9112                           
  9113                           ;tasks.h: 263: TRISA = 0b00011111;
  9114  003772  0E1F               	movlw	31
  9115  003774  6E92               	movwf	3986,c	;volatile
  9116                           
  9117                           ;tasks.h: 264: TRISB = 0b00111111;
  9118  003776  0E3F               	movlw	63
  9119  003778  6E93               	movwf	3987,c	;volatile
  9120                           
  9121                           ;tasks.h: 265: TRISC = 0b10110010;
  9122  00377A  0EB2               	movlw	178
  9123  00377C  6E94               	movwf	3988,c	;volatile
  9124                           
  9125                           ;tasks.h: 266: ANCON0 = 0b11111111;
  9126  00377E  010F               	movlb	15	; () banked
  9127  003780  6948               	setf	72,b	;volatile
  9128                           
  9129                           ;tasks.h: 267: ANCON1 = 0b00011000;
  9130  003782  0E18               	movlw	24
  9131  003784  010F               	movlb	15	; () banked
  9132  003786  6F49               	movwf	73,b	;volatile
  9133                           
  9134                           ; BSR set to: 15
  9135                           ;tasks.h: 268: INTCON2bits.RBPU = 0;
  9136  003788  9EF1               	bcf	intcon2,7,c	;volatile
  9137                           
  9138                           ; BSR set to: 15
  9139                           ;tasks.h: 270: timer0_init(6);
  9140  00378A  0E06               	movlw	6
  9141  00378C  EC4E  F01F         	call	_timer0_init
  9142                           
  9143                           ;tasks.h: 271: timer1_init(0, 2);
  9144  003790  0E02               	movlw	2
  9145  003792  6E1F               	movwf	timer1_init@clock_select,c
  9146  003794  0E00               	movlw	0
  9147  003796  EC9D  F01E         	call	_timer1_init
  9148                           
  9149                           ;tasks.h: 272: timer3_init(2);
  9150  00379A  0E02               	movlw	2
  9151  00379C  ECE4  F01F         	call	_timer3_init
  9152                           
  9153                           ;tasks.h: 273: I2C_init();
  9154  0037A0  ECA5  F020         	call	_I2C_init	;wreg free
  9155                           
  9156                           ;tasks.h: 274: I2C_LCD_init();
  9157  0037A4  EC4B  F01D         	call	_I2C_LCD_init	;wreg free
  9158                           
  9159                           ;tasks.h: 275: ADC_init(0);
  9160  0037A8  0E00               	movlw	0
  9161  0037AA  EC5D  F020         	call	_ADC_init
  9162                           
  9163                           ;tasks.h: 276: RTCC_init();
  9164  0037AE  EC66  F01F         	call	_RTCC_init	;wreg free
  9165                           
  9166                           ;tasks.h: 277: CTMU_init();
  9167  0037B2  ECD0  F01F         	call	_CTMU_init	;wreg free
  9168                           
  9169                           ;tasks.h: 279: UART_init();
  9170  0037B6  EC4D  F020         	call	_UART_init	;wreg free
  9171                           
  9172                           ;tasks.h: 280: uint8_t txbuf[200];
  9173                           ;tasks.h: 281: ringbuf_init(&tx_buf, txbuf, sizeof (txbuf));
  9174  0037BA  0EC8               	movlw	low _tx_buf
  9175  0037BC  0100               	movlb	0	; () banked
  9176  0037BE  6FC7               	movwf	ringbuf_init@rb& (0+255),b
  9177  0037C0  0E01               	movlw	high _tx_buf
  9178  0037C2  0100               	movlb	0	; () banked
  9179  0037C4  6FC8               	movwf	(ringbuf_init@rb+1)& (0+255),b
  9180  0037C6  0E00               	movlw	low main_init@txbuf
  9181  0037C8  0100               	movlb	0	; () banked
  9182  0037CA  6FC9               	movwf	ringbuf_init@internal_buf& (0+255),b
  9183  0037CC  0E01               	movlw	high main_init@txbuf
  9184  0037CE  0100               	movlb	0	; () banked
  9185  0037D0  6FCA               	movwf	(ringbuf_init@internal_buf+1)& (0+255),b
  9186  0037D2  0E00               	movlw	0
  9187  0037D4  0100               	movlb	0	; () banked
  9188  0037D6  6FCC               	movwf	(ringbuf_init@bufsize+1)& (0+255),b
  9189  0037D8  0EC8               	movlw	200
  9190  0037DA  6FCB               	movwf	ringbuf_init@bufsize& (0+255),b
  9191  0037DC  EC21  F01D         	call	_ringbuf_init	;wreg free
  9192  0037E0  0012               	return		;funcret
  9193  0037E2                     __end_of_main_init:
  9194                           	opt stack 0
  9195                           tblptru	equ	0xFF8
  9196                           tblptrh	equ	0xFF7
  9197                           tblptrl	equ	0xFF6
  9198                           tablat	equ	0xFF5
  9199                           prodh	equ	0xFF4
  9200                           prodl	equ	0xFF3
  9201                           intcon	equ	0xFF2
  9202                           intcon2	equ	0xFF1
  9203                           postinc0	equ	0xFEE
  9204                           wreg	equ	0xFE8
  9205                           indf1	equ	0xFE7
  9206                           fsr1h	equ	0xFE2
  9207                           fsr1l	equ	0xFE1
  9208                           indf2	equ	0xFDF
  9209                           postinc2	equ	0xFDE
  9210                           postdec2	equ	0xFDD
  9211                           plusw2	equ	0xFDB
  9212                           fsr2h	equ	0xFDA
  9213                           fsr2l	equ	0xFD9
  9214                           status	equ	0xFD8
  9215                           
  9216 ;; *************** function _timer3_init *****************
  9217 ;; Defined at:
  9218 ;;		line 85 in file "../My_header\My_header.h"
  9219 ;; Parameters:    Size  Location     Type
  9220 ;;  prescaler       1    wreg     unsigned char 
  9221 ;; Auto vars:     Size  Location     Type
  9222 ;;  prescaler       1   31[COMRAM] unsigned char 
  9223 ;; Return value:  Size  Location     Type
  9224 ;;		None               void
  9225 ;; Registers used:
  9226 ;;		wreg, status,2, status,0
  9227 ;; Tracked objects:
  9228 ;;		On entry : 0/0
  9229 ;;		On exit  : 0/0
  9230 ;;		Unchanged: 0/0
  9231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9233 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9234 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9235 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9236 ;;Total ram usage:        2 bytes
  9237 ;; Hardware stack levels used:    1
  9238 ;; Hardware stack levels required when called:    4
  9239 ;; This function calls:
  9240 ;;		Nothing
  9241 ;; This function is called by:
  9242 ;;		_main_init
  9243 ;; This function uses a non-reentrant model
  9244 ;;
  9245                           
  9246                           	psect	text40
  9247  003FC8                     __ptext40:
  9248                           	opt stack 0
  9249  003FC8                     _timer3_init:
  9250                           	opt stack 25
  9251                           
  9252                           ;incstack = 0
  9253                           ;timer3_init@prescaler stored from wreg
  9254  003FC8  6E20               	movwf	timer3_init@prescaler,c
  9255                           
  9256                           ;My_header\My_header.h: 86: T3CONbits.TMR3CS = 0;
  9257  003FCA  0E3F               	movlw	-193
  9258  003FCC  1679               	andwf	3961,f,c	;volatile
  9259                           
  9260                           ;My_header\My_header.h: 87: T3CONbits.T3OSCEN = 0;
  9261  003FCE  9679               	bcf	3961,3,c	;volatile
  9262                           
  9263                           ;My_header\My_header.h: 88: T3CONbits.T3CKPS = prescaler;
  9264  003FD0  C020  F01F         	movff	timer3_init@prescaler,??_timer3_init
  9265  003FD4  3A1F               	swapf	??_timer3_init,f,c
  9266  003FD6  5079               	movf	3961,w,c	;volatile
  9267  003FD8  181F               	xorwf	??_timer3_init,w,c
  9268  003FDA  0BCF               	andlw	-49
  9269  003FDC  181F               	xorwf	??_timer3_init,w,c
  9270  003FDE  6E79               	movwf	3961,c	;volatile
  9271                           
  9272                           ;My_header\My_header.h: 89: T3CONbits.RD163 = 0;
  9273  003FE0  9E79               	bcf	3961,7,c	;volatile
  9274                           
  9275                           ;My_header\My_header.h: 90: T3CONbits.TMR3ON = 1;
  9276  003FE2  8079               	bsf	3961,0,c	;volatile
  9277                           
  9278                           ;My_header\My_header.h: 91: IPR2bits.TMR3IP = 0;
  9279  003FE4  92A2               	bcf	4002,1,c	;volatile
  9280                           
  9281                           ;My_header\My_header.h: 92: PIR2bits.TMR3IF = 0;
  9282  003FE6  92A1               	bcf	4001,1,c	;volatile
  9283                           
  9284                           ;My_header\My_header.h: 93: PIE2bits.TMR3IE = 1;
  9285  003FE8  82A0               	bsf	4000,1,c	;volatile
  9286                           
  9287                           ;My_header\My_header.h: 94: INTCONbits.PEIE = 1;
  9288  003FEA  8CF2               	bsf	intcon,6,c	;volatile
  9289  003FEC  0012               	return		;funcret
  9290  003FEE                     __end_of_timer3_init:
  9291                           	opt stack 0
  9292                           tblptru	equ	0xFF8
  9293                           tblptrh	equ	0xFF7
  9294                           tblptrl	equ	0xFF6
  9295                           tablat	equ	0xFF5
  9296                           prodh	equ	0xFF4
  9297                           prodl	equ	0xFF3
  9298                           intcon	equ	0xFF2
  9299                           intcon2	equ	0xFF1
  9300                           postinc0	equ	0xFEE
  9301                           wreg	equ	0xFE8
  9302                           indf1	equ	0xFE7
  9303                           fsr1h	equ	0xFE2
  9304                           fsr1l	equ	0xFE1
  9305                           indf2	equ	0xFDF
  9306                           postinc2	equ	0xFDE
  9307                           postdec2	equ	0xFDD
  9308                           plusw2	equ	0xFDB
  9309                           fsr2h	equ	0xFDA
  9310                           fsr2l	equ	0xFD9
  9311                           status	equ	0xFD8
  9312                           
  9313 ;; *************** function _timer1_init *****************
  9314 ;; Defined at:
  9315 ;;		line 54 in file "../My_header\My_header.h"
  9316 ;; Parameters:    Size  Location     Type
  9317 ;;  prescaler       1    wreg     unsigned char 
  9318 ;;  clock_select    1   30[COMRAM] unsigned char 
  9319 ;; Auto vars:     Size  Location     Type
  9320 ;;  prescaler       1   32[COMRAM] unsigned char 
  9321 ;; Return value:  Size  Location     Type
  9322 ;;		None               void
  9323 ;; Registers used:
  9324 ;;		wreg, status,2, status,0
  9325 ;; Tracked objects:
  9326 ;;		On entry : 0/0
  9327 ;;		On exit  : 0/0
  9328 ;;		Unchanged: 0/0
  9329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9330 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9331 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9332 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9333 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9334 ;;Total ram usage:        3 bytes
  9335 ;; Hardware stack levels used:    1
  9336 ;; Hardware stack levels required when called:    4
  9337 ;; This function calls:
  9338 ;;		Nothing
  9339 ;; This function is called by:
  9340 ;;		_main_init
  9341 ;; This function uses a non-reentrant model
  9342 ;;
  9343                           
  9344                           	psect	text41
  9345  003D3A                     __ptext41:
  9346                           	opt stack 0
  9347  003D3A                     _timer1_init:
  9348                           	opt stack 25
  9349                           
  9350                           ;incstack = 0
  9351                           ;timer1_init@prescaler stored from wreg
  9352  003D3A  6E21               	movwf	timer1_init@prescaler,c
  9353                           
  9354                           ;My_header\My_header.h: 55: T1CONbits.TMR1CS = clock_select;
  9355  003D3C  C01F  F020         	movff	timer1_init@clock_select,??_timer1_init
  9356  003D40  3A20               	swapf	??_timer1_init,f,c
  9357  003D42  4620               	rlncf	??_timer1_init,f,c
  9358  003D44  4620               	rlncf	??_timer1_init,f,c
  9359  003D46  50CD               	movf	4045,w,c	;volatile
  9360  003D48  1820               	xorwf	??_timer1_init,w,c
  9361  003D4A  0B3F               	andlw	-193
  9362  003D4C  1820               	xorwf	??_timer1_init,w,c
  9363  003D4E  6ECD               	movwf	4045,c	;volatile
  9364                           
  9365                           ;My_header\My_header.h: 56: if (clock_select == 2) T1CONbits.T1OSCEN = 1;
  9366  003D50  0E02               	movlw	2
  9367  003D52  181F               	xorwf	timer1_init@clock_select,w,c
  9368  003D54  A4D8               	btfss	status,2,c
  9369  003D56  D002               	goto	l132
  9370  003D58  86CD               	bsf	4045,3,c	;volatile
  9371  003D5A  D001               	goto	l4013
  9372  003D5C                     l132:
  9373                           
  9374                           ;My_header\My_header.h: 57: else T1CONbits.T1OSCEN = 0;
  9375  003D5C  96CD               	bcf	4045,3,c	;volatile
  9376  003D5E                     l4013:
  9377                           
  9378                           ;My_header\My_header.h: 58: T1CONbits.T1CKPS = prescaler;
  9379  003D5E  C021  F020         	movff	timer1_init@prescaler,??_timer1_init
  9380  003D62  3A20               	swapf	??_timer1_init,f,c
  9381  003D64  50CD               	movf	4045,w,c	;volatile
  9382  003D66  1820               	xorwf	??_timer1_init,w,c
  9383  003D68  0BCF               	andlw	-49
  9384  003D6A  1820               	xorwf	??_timer1_init,w,c
  9385  003D6C  6ECD               	movwf	4045,c	;volatile
  9386                           
  9387                           ;My_header\My_header.h: 59: T1CONbits.nT1SYNC = 1;
  9388  003D6E  84CD               	bsf	4045,2,c	;volatile
  9389                           
  9390                           ;My_header\My_header.h: 60: T1CONbits.RD16 = 0;
  9391  003D70  92CD               	bcf	4045,1,c	;volatile
  9392                           
  9393                           ;My_header\My_header.h: 61: T1CONbits.TMR1ON = 1;
  9394  003D72  80CD               	bsf	4045,0,c	;volatile
  9395                           
  9396                           ;My_header\My_header.h: 62: IPR1bits.TMR1IP = 0;
  9397  003D74  909F               	bcf	3999,0,c	;volatile
  9398                           
  9399                           ;My_header\My_header.h: 63: PIR1bits.TMR1IF = 0;
  9400  003D76  909E               	bcf	3998,0,c	;volatile
  9401                           
  9402                           ;My_header\My_header.h: 64: PIE1bits.TMR1IE = 1;
  9403  003D78  809D               	bsf	3997,0,c	;volatile
  9404                           
  9405                           ;My_header\My_header.h: 65: INTCONbits.PEIE = 1;
  9406  003D7A  8CF2               	bsf	intcon,6,c	;volatile
  9407  003D7C  0012               	return		;funcret
  9408  003D7E                     __end_of_timer1_init:
  9409                           	opt stack 0
  9410                           tblptru	equ	0xFF8
  9411                           tblptrh	equ	0xFF7
  9412                           tblptrl	equ	0xFF6
  9413                           tablat	equ	0xFF5
  9414                           prodh	equ	0xFF4
  9415                           prodl	equ	0xFF3
  9416                           intcon	equ	0xFF2
  9417                           intcon2	equ	0xFF1
  9418                           postinc0	equ	0xFEE
  9419                           wreg	equ	0xFE8
  9420                           indf1	equ	0xFE7
  9421                           fsr1h	equ	0xFE2
  9422                           fsr1l	equ	0xFE1
  9423                           indf2	equ	0xFDF
  9424                           postinc2	equ	0xFDE
  9425                           postdec2	equ	0xFDD
  9426                           plusw2	equ	0xFDB
  9427                           fsr2h	equ	0xFDA
  9428                           fsr2l	equ	0xFD9
  9429                           status	equ	0xFD8
  9430                           
  9431 ;; *************** function _timer0_init *****************
  9432 ;; Defined at:
  9433 ;;		line 15 in file "../My_header\My_header.h"
  9434 ;; Parameters:    Size  Location     Type
  9435 ;;  prescaler       1    wreg     unsigned char 
  9436 ;; Auto vars:     Size  Location     Type
  9437 ;;  prescaler       1   31[COMRAM] unsigned char 
  9438 ;; Return value:  Size  Location     Type
  9439 ;;		None               void
  9440 ;; Registers used:
  9441 ;;		wreg, status,2, status,0
  9442 ;; Tracked objects:
  9443 ;;		On entry : 0/0
  9444 ;;		On exit  : 0/0
  9445 ;;		Unchanged: 0/0
  9446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9448 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9449 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9450 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9451 ;;Total ram usage:        2 bytes
  9452 ;; Hardware stack levels used:    1
  9453 ;; Hardware stack levels required when called:    4
  9454 ;; This function calls:
  9455 ;;		Nothing
  9456 ;; This function is called by:
  9457 ;;		_main_init
  9458 ;; This function uses a non-reentrant model
  9459 ;;
  9460                           
  9461                           	psect	text42
  9462  003E9C                     __ptext42:
  9463                           	opt stack 0
  9464  003E9C                     _timer0_init:
  9465                           	opt stack 25
  9466                           
  9467                           ;incstack = 0
  9468                           ;timer0_init@prescaler stored from wreg
  9469  003E9C  6E20               	movwf	timer0_init@prescaler,c
  9470                           
  9471                           ;My_header\My_header.h: 16: T0CONbits.TMR0ON = 1;
  9472  003E9E  8ED5               	bsf	4053,7,c	;volatile
  9473                           
  9474                           ;My_header\My_header.h: 17: T0CONbits.T08BIT = 1;
  9475  003EA0  8CD5               	bsf	4053,6,c	;volatile
  9476                           
  9477                           ;My_header\My_header.h: 18: T0CONbits.T0CS = 0;
  9478  003EA2  9AD5               	bcf	4053,5,c	;volatile
  9479                           
  9480                           ;My_header\My_header.h: 19: if (prescaler == 0) {
  9481  003EA4  5020               	movf	timer0_init@prescaler,w,c
  9482  003EA6  A4D8               	btfss	status,2,c
  9483  003EA8  D002               	goto	l127
  9484                           
  9485                           ;My_header\My_header.h: 20: T0CONbits.PSA = 1;
  9486  003EAA  86D5               	bsf	4053,3,c	;volatile
  9487                           
  9488                           ;My_header\My_header.h: 21: } else {
  9489  003EAC  D00A               	goto	l4001
  9490  003EAE                     l127:
  9491                           
  9492                           ;My_header\My_header.h: 22: T0CONbits.PSA = 0;
  9493  003EAE  96D5               	bcf	4053,3,c	;volatile
  9494                           
  9495                           ;My_header\My_header.h: 23: T0CONbits.T0PS = prescaler - 1;
  9496  003EB0  C020  F01F         	movff	timer0_init@prescaler,??_timer0_init
  9497  003EB4  0EFF               	movlw	255
  9498  003EB6  261F               	addwf	??_timer0_init,f,c
  9499  003EB8  50D5               	movf	4053,w,c	;volatile
  9500  003EBA  181F               	xorwf	??_timer0_init,w,c
  9501  003EBC  0BF8               	andlw	-8
  9502  003EBE  181F               	xorwf	??_timer0_init,w,c
  9503  003EC0  6ED5               	movwf	4053,c	;volatile
  9504  003EC2                     l4001:
  9505                           
  9506                           ;My_header\My_header.h: 24: }
  9507                           ;My_header\My_header.h: 25: INTCONbits.T0IE = 1;
  9508  003EC2  8AF2               	bsf	intcon,5,c	;volatile
  9509                           
  9510                           ;My_header\My_header.h: 26: INTCONbits.TMR0IF = 0;
  9511  003EC4  94F2               	bcf	intcon,2,c	;volatile
  9512                           
  9513                           ;My_header\My_header.h: 27: INTCON2bits.TMR0IP = 0;
  9514  003EC6  94F1               	bcf	intcon2,2,c	;volatile
  9515                           
  9516                           ;My_header\My_header.h: 28: INTCONbits.PEIE = 1;
  9517  003EC8  8CF2               	bsf	intcon,6,c	;volatile
  9518  003ECA  0012               	return		;funcret
  9519  003ECC                     __end_of_timer0_init:
  9520                           	opt stack 0
  9521                           tblptru	equ	0xFF8
  9522                           tblptrh	equ	0xFF7
  9523                           tblptrl	equ	0xFF6
  9524                           tablat	equ	0xFF5
  9525                           prodh	equ	0xFF4
  9526                           prodl	equ	0xFF3
  9527                           intcon	equ	0xFF2
  9528                           intcon2	equ	0xFF1
  9529                           postinc0	equ	0xFEE
  9530                           wreg	equ	0xFE8
  9531                           indf1	equ	0xFE7
  9532                           fsr1h	equ	0xFE2
  9533                           fsr1l	equ	0xFE1
  9534                           indf2	equ	0xFDF
  9535                           postinc2	equ	0xFDE
  9536                           postdec2	equ	0xFDD
  9537                           plusw2	equ	0xFDB
  9538                           fsr2h	equ	0xFDA
  9539                           fsr2l	equ	0xFD9
  9540                           status	equ	0xFD8
  9541                           
  9542 ;; *************** function _ringbuf_init *****************
  9543 ;; Defined at:
  9544 ;;		line 24 in file "../My_header\My_ringbuf.h"
  9545 ;; Parameters:    Size  Location     Type
  9546 ;;  rb              2    0[BANK0 ] PTR struct ringbuf
  9547 ;;		 -> tx_buf(8), 
  9548 ;;  internal_buf    2    2[BANK0 ] PTR unsigned char 
  9549 ;;		 -> main_init@txbuf(200), 
  9550 ;;  bufsize         2    4[BANK0 ] unsigned int 
  9551 ;; Auto vars:     Size  Location     Type
  9552 ;;		None
  9553 ;; Return value:  Size  Location     Type
  9554 ;;		None               void
  9555 ;; Registers used:
  9556 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9557 ;; Tracked objects:
  9558 ;;		On entry : 0/0
  9559 ;;		On exit  : 0/0
  9560 ;;		Unchanged: 0/0
  9561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9562 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9565 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9566 ;;Total ram usage:        6 bytes
  9567 ;; Hardware stack levels used:    1
  9568 ;; Hardware stack levels required when called:    4
  9569 ;; This function calls:
  9570 ;;		Nothing
  9571 ;; This function is called by:
  9572 ;;		_main_init
  9573 ;; This function uses a non-reentrant model
  9574 ;;
  9575                           
  9576                           	psect	text43
  9577  003A42                     __ptext43:
  9578                           	opt stack 0
  9579  003A42                     _ringbuf_init:
  9580                           	opt stack 25
  9581                           
  9582                           ;My_header\My_ringbuf.h: 25: rb->buf = internal_buf;
  9583                           
  9584                           ;incstack = 0
  9585  003A42  C0C7  FFD9         	movff	ringbuf_init@rb,fsr2l
  9586  003A46  C0C8  FFDA         	movff	ringbuf_init@rb+1,fsr2h
  9587  003A4A  C0C9  FFDE         	movff	ringbuf_init@internal_buf,postinc2
  9588  003A4E  C0CA  FFDD         	movff	ringbuf_init@internal_buf+1,postdec2
  9589                           
  9590                           ;My_header\My_ringbuf.h: 26: rb->size = bufsize;
  9591  003A52  0100               	movlb	0	; () banked
  9592  003A54  EE20 F002          	lfsr	2,2
  9593  003A58  51C7               	movf	ringbuf_init@rb& (0+255),w,b
  9594  003A5A  26D9               	addwf	fsr2l,f,c
  9595  003A5C  51C8               	movf	(ringbuf_init@rb+1)& (0+255),w,b
  9596  003A5E  22DA               	addwfc	fsr2h,f,c
  9597  003A60  C0CB  FFDE         	movff	ringbuf_init@bufsize,postinc2
  9598  003A64  C0CC  FFDD         	movff	ringbuf_init@bufsize+1,postdec2
  9599                           
  9600                           ; BSR set to: 0
  9601                           ;My_header\My_ringbuf.h: 27: rb->head = 0;
  9602  003A68  0100               	movlb	0	; () banked
  9603  003A6A  EE20 F004          	lfsr	2,4
  9604  003A6E  51C7               	movf	ringbuf_init@rb& (0+255),w,b
  9605  003A70  26D9               	addwf	fsr2l,f,c
  9606  003A72  51C8               	movf	(ringbuf_init@rb+1)& (0+255),w,b
  9607  003A74  22DA               	addwfc	fsr2h,f,c
  9608  003A76  0E00               	movlw	0
  9609  003A78  6EDE               	movwf	postinc2,c
  9610  003A7A  0E00               	movlw	0
  9611  003A7C  6EDD               	movwf	postdec2,c
  9612                           
  9613                           ; BSR set to: 0
  9614                           ;My_header\My_ringbuf.h: 28: rb->tail = 0;
  9615  003A7E  0100               	movlb	0	; () banked
  9616  003A80  EE20 F006          	lfsr	2,6
  9617  003A84  51C7               	movf	ringbuf_init@rb& (0+255),w,b
  9618  003A86  26D9               	addwf	fsr2l,f,c
  9619  003A88  51C8               	movf	(ringbuf_init@rb+1)& (0+255),w,b
  9620  003A8A  22DA               	addwfc	fsr2h,f,c
  9621  003A8C  0E00               	movlw	0
  9622  003A8E  6EDE               	movwf	postinc2,c
  9623  003A90  0E00               	movlw	0
  9624  003A92  6EDD               	movwf	postdec2,c
  9625                           
  9626                           ; BSR set to: 0
  9627  003A94  0012               	return		;funcret
  9628  003A96                     __end_of_ringbuf_init:
  9629                           	opt stack 0
  9630                           tblptru	equ	0xFF8
  9631                           tblptrh	equ	0xFF7
  9632                           tblptrl	equ	0xFF6
  9633                           tablat	equ	0xFF5
  9634                           prodh	equ	0xFF4
  9635                           prodl	equ	0xFF3
  9636                           intcon	equ	0xFF2
  9637                           intcon2	equ	0xFF1
  9638                           postinc0	equ	0xFEE
  9639                           wreg	equ	0xFE8
  9640                           indf1	equ	0xFE7
  9641                           fsr1h	equ	0xFE2
  9642                           fsr1l	equ	0xFE1
  9643                           indf2	equ	0xFDF
  9644                           postinc2	equ	0xFDE
  9645                           postdec2	equ	0xFDD
  9646                           plusw2	equ	0xFDB
  9647                           fsr2h	equ	0xFDA
  9648                           fsr2l	equ	0xFD9
  9649                           status	equ	0xFD8
  9650                           
  9651 ;; *************** function _UART_init *****************
  9652 ;; Defined at:
  9653 ;;		line 192 in file "../My_header\My_header.h"
  9654 ;; Parameters:    Size  Location     Type
  9655 ;;		None
  9656 ;; Auto vars:     Size  Location     Type
  9657 ;;		None
  9658 ;; Return value:  Size  Location     Type
  9659 ;;		None               void
  9660 ;; Registers used:
  9661 ;;		wreg, status,2
  9662 ;; Tracked objects:
  9663 ;;		On entry : 0/0
  9664 ;;		On exit  : 0/0
  9665 ;;		Unchanged: 0/0
  9666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9671 ;;Total ram usage:        0 bytes
  9672 ;; Hardware stack levels used:    1
  9673 ;; Hardware stack levels required when called:    4
  9674 ;; This function calls:
  9675 ;;		Nothing
  9676 ;; This function is called by:
  9677 ;;		_main_init
  9678 ;; This function uses a non-reentrant model
  9679 ;;
  9680                           
  9681                           	psect	text44
  9682  00409A                     __ptext44:
  9683                           	opt stack 0
  9684  00409A                     _UART_init:
  9685                           	opt stack 25
  9686                           
  9687                           ;My_header\My_header.h: 193: TXSTA1bits.TX9 = 0;
  9688                           
  9689                           ; BSR set to: 0
  9690                           ;incstack = 0
  9691  00409A  9CAD               	bcf	4013,6,c	;volatile
  9692                           
  9693                           ;My_header\My_header.h: 194: TXSTA1bits.TXEN = 1;
  9694  00409C  8AAD               	bsf	4013,5,c	;volatile
  9695                           
  9696                           ;My_header\My_header.h: 195: TXSTA1bits.SYNC = 0;
  9697  00409E  98AD               	bcf	4013,4,c	;volatile
  9698                           
  9699                           ;My_header\My_header.h: 196: TXSTA1bits.BRGH = 0;
  9700  0040A0  94AD               	bcf	4013,2,c	;volatile
  9701                           
  9702                           ;My_header\My_header.h: 197: RCSTA1bits.SPEN = 1;
  9703  0040A2  8EAC               	bsf	4012,7,c	;volatile
  9704                           
  9705                           ;My_header\My_header.h: 198: RCSTA1bits.RX9 = 0;
  9706  0040A4  9CAC               	bcf	4012,6,c	;volatile
  9707                           
  9708                           ;My_header\My_header.h: 199: RCSTA1bits.CREN = 1;
  9709  0040A6  88AC               	bsf	4012,4,c	;volatile
  9710                           
  9711                           ;My_header\My_header.h: 200: BAUDCON1bits.BRG16 = 0;
  9712  0040A8  967E               	bcf	3966,3,c	;volatile
  9713                           
  9714                           ;My_header\My_header.h: 201: SPBRG1 = 48000000 / 64 / 9600 - 1;
  9715  0040AA  0E4D               	movlw	77
  9716  0040AC  6EB0               	movwf	4016,c	;volatile
  9717                           
  9718                           ;My_header\My_header.h: 202: SPBRGH1 = 0;
  9719  0040AE  0E00               	movlw	0
  9720  0040B0  6E7F               	movwf	3967,c	;volatile
  9721                           
  9722                           ;My_header\My_header.h: 203: IPR1bits.RC1IP = 0;
  9723  0040B2  9A9F               	bcf	3999,5,c	;volatile
  9724                           
  9725                           ;My_header\My_header.h: 204: PIE1bits.RCIE = 1;
  9726  0040B4  8A9D               	bsf	3997,5,c	;volatile
  9727                           
  9728                           ;My_header\My_header.h: 205: INTCONbits.PEIE = 1;
  9729  0040B6  8CF2               	bsf	intcon,6,c	;volatile
  9730  0040B8  0012               	return		;funcret
  9731  0040BA                     __end_of_UART_init:
  9732                           	opt stack 0
  9733                           tblptru	equ	0xFF8
  9734                           tblptrh	equ	0xFF7
  9735                           tblptrl	equ	0xFF6
  9736                           tablat	equ	0xFF5
  9737                           prodh	equ	0xFF4
  9738                           prodl	equ	0xFF3
  9739                           intcon	equ	0xFF2
  9740                           intcon2	equ	0xFF1
  9741                           postinc0	equ	0xFEE
  9742                           wreg	equ	0xFE8
  9743                           indf1	equ	0xFE7
  9744                           fsr1h	equ	0xFE2
  9745                           fsr1l	equ	0xFE1
  9746                           indf2	equ	0xFDF
  9747                           postinc2	equ	0xFDE
  9748                           postdec2	equ	0xFDD
  9749                           plusw2	equ	0xFDB
  9750                           fsr2h	equ	0xFDA
  9751                           fsr2l	equ	0xFD9
  9752                           status	equ	0xFD8
  9753                           
  9754 ;; *************** function _RTCC_init *****************
  9755 ;; Defined at:
  9756 ;;		line 56 in file "../My_header\My_RTCC.h"
  9757 ;; Parameters:    Size  Location     Type
  9758 ;;		None
  9759 ;; Auto vars:     Size  Location     Type
  9760 ;;		None
  9761 ;; Return value:  Size  Location     Type
  9762 ;;		None               void
  9763 ;; Registers used:
  9764 ;;		wreg, status,2
  9765 ;; Tracked objects:
  9766 ;;		On entry : 0/0
  9767 ;;		On exit  : 0/0
  9768 ;;		Unchanged: 0/0
  9769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9774 ;;Total ram usage:        0 bytes
  9775 ;; Hardware stack levels used:    1
  9776 ;; Hardware stack levels required when called:    4
  9777 ;; This function calls:
  9778 ;;		Nothing
  9779 ;; This function is called by:
  9780 ;;		_main_init
  9781 ;; This function uses a non-reentrant model
  9782 ;;
  9783                           
  9784                           	psect	text45
  9785  003ECC                     __ptext45:
  9786                           	opt stack 0
  9787  003ECC                     _RTCC_init:
  9788                           	opt stack 25
  9789                           
  9790                           ;My_header\My_RTCC.h: 57: RTCCFGbits.RTCWREN = 1;
  9791                           
  9792                           ;incstack = 0
  9793  003ECC  010F               	movlb	15	; () banked
  9794  003ECE  8B3F               	bsf	63,5,b	;volatile
  9795                           
  9796                           ;My_header\My_RTCC.h: 58: if (RTCCFGbits.RTCWREN != 1) {
  9797  003ED0  010F               	movlb	15	; () banked
  9798  003ED2  BB3F               	btfsc	63,5,b	;volatile
  9799  003ED4  D006               	goto	l4131
  9800                           
  9801                           ; BSR set to: 15
  9802                           ;My_header\My_RTCC.h: 59: EECON2 = 0x55;
  9803  003ED6  0E55               	movlw	85
  9804  003ED8  6EA7               	movwf	4007,c	;volatile
  9805                           
  9806                           ;My_header\My_RTCC.h: 60: EECON2 = 0xAA;
  9807  003EDA  0EAA               	movlw	170
  9808  003EDC  6EA7               	movwf	4007,c	;volatile
  9809                           
  9810                           ; BSR set to: 15
  9811                           ;My_header\My_RTCC.h: 61: RTCCFGbits.RTCWREN = 1;
  9812  003EDE  010F               	movlb	15	; () banked
  9813  003EE0  8B3F               	bsf	63,5,b	;volatile
  9814  003EE2                     l4131:
  9815                           
  9816                           ; BSR set to: 15
  9817                           ;My_header\My_RTCC.h: 62: }
  9818                           ;My_header\My_RTCC.h: 63: RTCCFGbits.RTCEN = 1;
  9819  003EE2  010F               	movlb	15	; () banked
  9820  003EE4  8F3F               	bsf	63,7,b	;volatile
  9821                           
  9822                           ; BSR set to: 15
  9823                           ;My_header\My_RTCC.h: 64: RTCCFGbits.RTCOE = 0;
  9824  003EE6  010F               	movlb	15	; () banked
  9825  003EE8  953F               	bcf	63,2,b	;volatile
  9826                           
  9827                           ; BSR set to: 15
  9828                           ;My_header\My_RTCC.h: 65: PADCFG1bits.RTSECSEL0 = 1;
  9829  003EEA  010F               	movlb	15	; () banked
  9830  003EEC  833C               	bsf	60,1,b	;volatile
  9831                           
  9832                           ; BSR set to: 15
  9833                           ;My_header\My_RTCC.h: 66: PADCFG1bits.RTSECSEL1 = 1;
  9834  003EEE  010F               	movlb	15	; () banked
  9835  003EF0  853C               	bsf	60,2,b	;volatile
  9836                           
  9837                           ;My_header\My_RTCC.h: 67: RTCCAL = 0x00;
  9838  003EF2  0E00               	movlw	0
  9839  003EF4  010F               	movlb	15	; () banked
  9840  003EF6  6F3E               	movwf	62,b	;volatile
  9841                           
  9842                           ; BSR set to: 15
  9843  003EF8  0012               	return		;funcret
  9844  003EFA                     __end_of_RTCC_init:
  9845                           	opt stack 0
  9846                           tblptru	equ	0xFF8
  9847                           tblptrh	equ	0xFF7
  9848                           tblptrl	equ	0xFF6
  9849                           tablat	equ	0xFF5
  9850                           prodh	equ	0xFF4
  9851                           prodl	equ	0xFF3
  9852                           intcon	equ	0xFF2
  9853                           intcon2	equ	0xFF1
  9854                           postinc0	equ	0xFEE
  9855                           wreg	equ	0xFE8
  9856                           indf1	equ	0xFE7
  9857                           fsr1h	equ	0xFE2
  9858                           fsr1l	equ	0xFE1
  9859                           indf2	equ	0xFDF
  9860                           postinc2	equ	0xFDE
  9861                           postdec2	equ	0xFDD
  9862                           plusw2	equ	0xFDB
  9863                           fsr2h	equ	0xFDA
  9864                           fsr2l	equ	0xFD9
  9865                           status	equ	0xFD8
  9866                           
  9867 ;; *************** function _I2C_init *****************
  9868 ;; Defined at:
  9869 ;;		line 25 in file "../My_header\My_I2C.h"
  9870 ;; Parameters:    Size  Location     Type
  9871 ;;		None
  9872 ;; Auto vars:     Size  Location     Type
  9873 ;;		None
  9874 ;; Return value:  Size  Location     Type
  9875 ;;		None               void
  9876 ;; Registers used:
  9877 ;;		wreg, status,2
  9878 ;; Tracked objects:
  9879 ;;		On entry : 0/0
  9880 ;;		On exit  : 0/0
  9881 ;;		Unchanged: 0/0
  9882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9887 ;;Total ram usage:        0 bytes
  9888 ;; Hardware stack levels used:    1
  9889 ;; Hardware stack levels required when called:    4
  9890 ;; This function calls:
  9891 ;;		Nothing
  9892 ;; This function is called by:
  9893 ;;		_main_init
  9894 ;; This function uses a non-reentrant model
  9895 ;;
  9896                           
  9897                           	psect	text46
  9898  00414A                     __ptext46:
  9899                           	opt stack 0
  9900  00414A                     _I2C_init:
  9901                           	opt stack 25
  9902                           
  9903                           ;My_header\My_I2C.h: 26: SSP1STAT = 0b10000000;
  9904                           
  9905                           ; BSR set to: 15
  9906                           ;incstack = 0
  9907  00414A  0E80               	movlw	128
  9908  00414C  6EC7               	movwf	4039,c	;volatile
  9909                           
  9910                           ;My_header\My_I2C.h: 27: SSP1CON1 = 0b00101000;
  9911  00414E  0E28               	movlw	40
  9912  004150  6EC6               	movwf	4038,c	;volatile
  9913                           
  9914                           ;My_header\My_I2C.h: 28: SSP1ADD = 0x13;
  9915  004152  0E13               	movlw	19
  9916  004154  6EC8               	movwf	4040,c	;volatile
  9917                           
  9918                           ;My_header\My_I2C.h: 31: SSP1IF = 0;
  9919  004156  969E               	bcf	3998,3,c	;volatile
  9920                           
  9921                           ;My_header\My_I2C.h: 32: BCL1IF = 0;
  9922  004158  96A1               	bcf	4001,3,c	;volatile
  9923  00415A  0012               	return		;funcret
  9924  00415C                     __end_of_I2C_init:
  9925                           	opt stack 0
  9926                           tblptru	equ	0xFF8
  9927                           tblptrh	equ	0xFF7
  9928                           tblptrl	equ	0xFF6
  9929                           tablat	equ	0xFF5
  9930                           prodh	equ	0xFF4
  9931                           prodl	equ	0xFF3
  9932                           intcon	equ	0xFF2
  9933                           intcon2	equ	0xFF1
  9934                           postinc0	equ	0xFEE
  9935                           wreg	equ	0xFE8
  9936                           indf1	equ	0xFE7
  9937                           fsr1h	equ	0xFE2
  9938                           fsr1l	equ	0xFE1
  9939                           indf2	equ	0xFDF
  9940                           postinc2	equ	0xFDE
  9941                           postdec2	equ	0xFDD
  9942                           plusw2	equ	0xFDB
  9943                           fsr2h	equ	0xFDA
  9944                           fsr2l	equ	0xFD9
  9945                           status	equ	0xFD8
  9946                           
  9947 ;; *************** function _I2C_LCD_init *****************
  9948 ;; Defined at:
  9949 ;;		line 164 in file "../My_header\My_I2C.h"
  9950 ;; Parameters:    Size  Location     Type
  9951 ;;		None
  9952 ;; Auto vars:     Size  Location     Type
  9953 ;;		None
  9954 ;; Return value:  Size  Location     Type
  9955 ;;		None               void
  9956 ;; Registers used:
  9957 ;;		wreg, status,2, status,0, cstack
  9958 ;; Tracked objects:
  9959 ;;		On entry : 0/0
  9960 ;;		On exit  : 0/0
  9961 ;;		Unchanged: 0/0
  9962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9967 ;;Total ram usage:        0 bytes
  9968 ;; Hardware stack levels used:    1
  9969 ;; Hardware stack levels required when called:    8
  9970 ;; This function calls:
  9971 ;;		_Delay_ms
  9972 ;;		_I2C_LCD_Clear
  9973 ;;		_I2C_LCD_Command
  9974 ;; This function is called by:
  9975 ;;		_main_init
  9976 ;; This function uses a non-reentrant model
  9977 ;;
  9978                           
  9979                           	psect	text47
  9980  003A96                     __ptext47:
  9981                           	opt stack 0
  9982  003A96                     _I2C_LCD_init:
  9983                           	opt stack 21
  9984                           
  9985                           ;My_header\My_I2C.h: 165: Delay_ms(40);
  9986                           
  9987                           ;incstack = 0
  9988  003A96  0E00               	movlw	0
  9989  003A98  6E20               	movwf	Delay_ms@ms+1,c
  9990  003A9A  0E28               	movlw	40
  9991  003A9C  6E1F               	movwf	Delay_ms@ms,c
  9992  003A9E  ECF7  F01F         	call	_Delay_ms	;wreg free
  9993                           
  9994                           ;My_header\My_I2C.h: 166: I2C_LCD_Command(0x38);
  9995  003AA2  0E38               	movlw	56
  9996  003AA4  EC33  F01F         	call	_I2C_LCD_Command
  9997                           
  9998                           ;My_header\My_I2C.h: 167: I2C_LCD_Command(0x39);
  9999  003AA8  0E39               	movlw	57
 10000  003AAA  EC33  F01F         	call	_I2C_LCD_Command
 10001                           
 10002                           ;My_header\My_I2C.h: 168: I2C_LCD_Command(0x14);
 10003  003AAE  0E14               	movlw	20
 10004  003AB0  EC33  F01F         	call	_I2C_LCD_Command
 10005                           
 10006                           ;My_header\My_I2C.h: 169: I2C_LCD_Command(0x70);
 10007  003AB4  0E70               	movlw	112
 10008  003AB6  EC33  F01F         	call	_I2C_LCD_Command
 10009                           
 10010                           ;My_header\My_I2C.h: 170: I2C_LCD_Command(0x56);
 10011  003ABA  0E56               	movlw	86
 10012  003ABC  EC33  F01F         	call	_I2C_LCD_Command
 10013                           
 10014                           ;My_header\My_I2C.h: 171: I2C_LCD_Command(0x6C);
 10015  003AC0  0E6C               	movlw	108
 10016  003AC2  EC33  F01F         	call	_I2C_LCD_Command
 10017                           
 10018                           ;My_header\My_I2C.h: 172: Delay_ms(200);
 10019  003AC6  0E00               	movlw	0
 10020  003AC8  6E20               	movwf	Delay_ms@ms+1,c
 10021  003ACA  0EC8               	movlw	200
 10022  003ACC  6E1F               	movwf	Delay_ms@ms,c
 10023  003ACE  ECF7  F01F         	call	_Delay_ms	;wreg free
 10024                           
 10025                           ;My_header\My_I2C.h: 173: I2C_LCD_Command(0x38);
 10026  003AD2  0E38               	movlw	56
 10027  003AD4  EC33  F01F         	call	_I2C_LCD_Command
 10028                           
 10029                           ;My_header\My_I2C.h: 174: I2C_LCD_Command(0x0C);
 10030  003AD8  0E0C               	movlw	12
 10031  003ADA  EC33  F01F         	call	_I2C_LCD_Command
 10032                           
 10033                           ;My_header\My_I2C.h: 175: I2C_LCD_Command(0x06);
 10034  003ADE  0E06               	movlw	6
 10035  003AE0  EC33  F01F         	call	_I2C_LCD_Command
 10036                           
 10037                           ;My_header\My_I2C.h: 176: I2C_LCD_Clear();
 10038  003AE4  EC6B  F020         	call	_I2C_LCD_Clear	;wreg free
 10039  003AE8  0012               	return		;funcret
 10040  003AEA                     __end_of_I2C_LCD_init:
 10041                           	opt stack 0
 10042                           tblptru	equ	0xFF8
 10043                           tblptrh	equ	0xFF7
 10044                           tblptrl	equ	0xFF6
 10045                           tablat	equ	0xFF5
 10046                           prodh	equ	0xFF4
 10047                           prodl	equ	0xFF3
 10048                           intcon	equ	0xFF2
 10049                           intcon2	equ	0xFF1
 10050                           postinc0	equ	0xFEE
 10051                           wreg	equ	0xFE8
 10052                           indf1	equ	0xFE7
 10053                           fsr1h	equ	0xFE2
 10054                           fsr1l	equ	0xFE1
 10055                           indf2	equ	0xFDF
 10056                           postinc2	equ	0xFDE
 10057                           postdec2	equ	0xFDD
 10058                           plusw2	equ	0xFDB
 10059                           fsr2h	equ	0xFDA
 10060                           fsr2l	equ	0xFD9
 10061                           status	equ	0xFD8
 10062                           
 10063 ;; *************** function _I2C_LCD_Clear *****************
 10064 ;; Defined at:
 10065 ;;		line 107 in file "../My_header\My_I2C.h"
 10066 ;; Parameters:    Size  Location     Type
 10067 ;;		None
 10068 ;; Auto vars:     Size  Location     Type
 10069 ;;		None
 10070 ;; Return value:  Size  Location     Type
 10071 ;;		None               void
 10072 ;; Registers used:
 10073 ;;		wreg, status,2, status,0, cstack
 10074 ;; Tracked objects:
 10075 ;;		On entry : 0/0
 10076 ;;		On exit  : 0/0
 10077 ;;		Unchanged: 0/0
 10078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10081 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10082 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10083 ;;Total ram usage:        1 bytes
 10084 ;; Hardware stack levels used:    1
 10085 ;; Hardware stack levels required when called:    7
 10086 ;; This function calls:
 10087 ;;		_I2C_LCD_Command
 10088 ;; This function is called by:
 10089 ;;		_I2C_LCD_init
 10090 ;;		_display_LCD
 10091 ;;		_sleep_loop
 10092 ;;		_main
 10093 ;; This function uses a non-reentrant model
 10094 ;;
 10095                           
 10096                           	psect	text48
 10097  0040D6                     __ptext48:
 10098                           	opt stack 0
 10099  0040D6                     _I2C_LCD_Clear:
 10100                           	opt stack 22
 10101                           
 10102                           ;My_header\My_I2C.h: 108: I2C_LCD_Command(0x01);
 10103                           
 10104                           ;incstack = 0
 10105  0040D6  0E01               	movlw	1
 10106  0040D8  EC33  F01F         	call	_I2C_LCD_Command
 10107                           
 10108                           ;My_header\My_I2C.h: 109: _delay((unsigned long)((1100)*(48000000/4000000.0)));
 10109  0040DC  0E12               	movlw	18
 10110  0040DE  0100               	movlb	0	; () banked
 10111  0040E0  6FC9               	movwf	??_I2C_LCD_Clear& (0+255),b
 10112  0040E2  0E23               	movlw	35
 10113  0040E4                     u6867:
 10114  0040E4  2EE8               	decfsz	wreg,f,c
 10115  0040E6  D7FE               	goto	u6867
 10116  0040E8  2FC9               	decfsz	??_I2C_LCD_Clear& (0+255),f,b
 10117  0040EA  D7FC               	goto	u6867
 10118  0040EC  F000               	nop	
 10119  0040EE  0012               	return		;funcret
 10120  0040F0                     __end_of_I2C_LCD_Clear:
 10121                           	opt stack 0
 10122                           tblptru	equ	0xFF8
 10123                           tblptrh	equ	0xFF7
 10124                           tblptrl	equ	0xFF6
 10125                           tablat	equ	0xFF5
 10126                           prodh	equ	0xFF4
 10127                           prodl	equ	0xFF3
 10128                           intcon	equ	0xFF2
 10129                           intcon2	equ	0xFF1
 10130                           postinc0	equ	0xFEE
 10131                           wreg	equ	0xFE8
 10132                           indf1	equ	0xFE7
 10133                           fsr1h	equ	0xFE2
 10134                           fsr1l	equ	0xFE1
 10135                           indf2	equ	0xFDF
 10136                           postinc2	equ	0xFDE
 10137                           postdec2	equ	0xFDD
 10138                           plusw2	equ	0xFDB
 10139                           fsr2h	equ	0xFDA
 10140                           fsr2l	equ	0xFD9
 10141                           status	equ	0xFD8
 10142                           
 10143 ;; *************** function _I2C_LCD_Command *****************
 10144 ;; Defined at:
 10145 ;;		line 94 in file "../My_header\My_I2C.h"
 10146 ;; Parameters:    Size  Location     Type
 10147 ;;  c               1    wreg     unsigned char 
 10148 ;; Auto vars:     Size  Location     Type
 10149 ;;  c               1    0[BANK0 ] unsigned char 
 10150 ;;  ans             1    1[BANK0 ] unsigned char 
 10151 ;; Return value:  Size  Location     Type
 10152 ;;		None               void
 10153 ;; Registers used:
 10154 ;;		wreg, status,2, status,0, cstack
 10155 ;; Tracked objects:
 10156 ;;		On entry : 0/0
 10157 ;;		On exit  : 0/0
 10158 ;;		Unchanged: 0/0
 10159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10161 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10163 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10164 ;;Total ram usage:        2 bytes
 10165 ;; Hardware stack levels used:    1
 10166 ;; Hardware stack levels required when called:    6
 10167 ;; This function calls:
 10168 ;;		_I2C_Send
 10169 ;;		_I2C_Start
 10170 ;;		_I2C_Stop
 10171 ;; This function is called by:
 10172 ;;		_I2C_LCD_Clear
 10173 ;;		_I2C_LCD_SetCursor
 10174 ;;		_I2C_LCD_init
 10175 ;; This function uses a non-reentrant model
 10176 ;;
 10177                           
 10178                           	psect	text49
 10179  003E66                     __ptext49:
 10180                           	opt stack 0
 10181  003E66                     _I2C_LCD_Command:
 10182                           	opt stack 22
 10183                           
 10184                           ;incstack = 0
 10185                           ;I2C_LCD_Command@c stored from wreg
 10186  003E66  0100               	movlb	0	; () banked
 10187  003E68  6FC7               	movwf	I2C_LCD_Command@c& (0+255),b
 10188                           
 10189                           ;My_header\My_I2C.h: 95: uint8_t ans;
 10190                           ;My_header\My_I2C.h: 97: ans = I2C_Start(0x3E, 0);
 10191  003E6A  0E00               	movlw	0
 10192  003E6C  6E21               	movwf	I2C_Start@rw,c
 10193  003E6E  0E3E               	movlw	62
 10194  003E70  EC93  F01F         	call	_I2C_Start
 10195  003E74  0100               	movlb	0	; () banked
 10196  003E76  6FC8               	movwf	I2C_LCD_Command@ans& (0+255),b
 10197                           
 10198                           ; BSR set to: 0
 10199                           ;My_header\My_I2C.h: 98: if (ans == 0) {
 10200  003E78  0100               	movlb	0	; () banked
 10201  003E7A  51C8               	movf	I2C_LCD_Command@ans& (0+255),w,b
 10202  003E7C  0100               	movlb	0	; () banked
 10203  003E7E  A4D8               	btfss	status,2,c
 10204  003E80  D007               	goto	l333
 10205                           
 10206                           ; BSR set to: 0
 10207                           ;My_header\My_I2C.h: 100: I2C_Send(0b10000000);
 10208  003E82  0E80               	movlw	128
 10209  003E84  EC8F  F020         	call	_I2C_Send
 10210                           
 10211                           ;My_header\My_I2C.h: 101: I2C_Send(c);
 10212  003E88  0100               	movlb	0	; () banked
 10213  003E8A  51C7               	movf	I2C_LCD_Command@c& (0+255),w,b
 10214  003E8C  EC8F  F020         	call	_I2C_Send
 10215  003E90                     l333:
 10216                           
 10217                           ;My_header\My_I2C.h: 102: }
 10218                           ;My_header\My_I2C.h: 103: I2C_Stop();
 10219  003E90  ECAE  F020         	call	_I2C_Stop	;wreg free
 10220                           
 10221                           ;My_header\My_I2C.h: 104: _delay((unsigned long)((26)*(48000000/4000000.0)));
 10222  003E94  0E68               	movlw	104
 10223  003E96                     u6877:
 10224  003E96  2EE8               	decfsz	wreg,f,c
 10225  003E98  D7FE               	goto	u6877
 10226  003E9A  0012               	return		;funcret
 10227  003E9C                     __end_of_I2C_LCD_Command:
 10228                           	opt stack 0
 10229                           tblptru	equ	0xFF8
 10230                           tblptrh	equ	0xFF7
 10231                           tblptrl	equ	0xFF6
 10232                           tablat	equ	0xFF5
 10233                           prodh	equ	0xFF4
 10234                           prodl	equ	0xFF3
 10235                           intcon	equ	0xFF2
 10236                           intcon2	equ	0xFF1
 10237                           postinc0	equ	0xFEE
 10238                           wreg	equ	0xFE8
 10239                           indf1	equ	0xFE7
 10240                           fsr1h	equ	0xFE2
 10241                           fsr1l	equ	0xFE1
 10242                           indf2	equ	0xFDF
 10243                           postinc2	equ	0xFDE
 10244                           postdec2	equ	0xFDD
 10245                           plusw2	equ	0xFDB
 10246                           fsr2h	equ	0xFDA
 10247                           fsr2l	equ	0xFD9
 10248                           status	equ	0xFD8
 10249                           
 10250 ;; *************** function _I2C_Stop *****************
 10251 ;; Defined at:
 10252 ;;		line 59 in file "../My_header\My_I2C.h"
 10253 ;; Parameters:    Size  Location     Type
 10254 ;;		None
 10255 ;; Auto vars:     Size  Location     Type
 10256 ;;		None
 10257 ;; Return value:  Size  Location     Type
 10258 ;;		None               void
 10259 ;; Registers used:
 10260 ;;		wreg, status,2, status,0, cstack
 10261 ;; Tracked objects:
 10262 ;;		On entry : 0/0
 10263 ;;		On exit  : 0/0
 10264 ;;		Unchanged: 0/0
 10265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10270 ;;Total ram usage:        0 bytes
 10271 ;; Hardware stack levels used:    1
 10272 ;; Hardware stack levels required when called:    5
 10273 ;; This function calls:
 10274 ;;		_I2C_IdleCheck
 10275 ;; This function is called by:
 10276 ;;		_I2C_LCD_Command
 10277 ;;		_I2C_LCD_Putc
 10278 ;;		_I2C_LCD_Puts
 10279 ;;		_I2C_LCD_CreateChar
 10280 ;; This function uses a non-reentrant model
 10281 ;;
 10282                           
 10283                           	psect	text50
 10284  00415C                     __ptext50:
 10285                           	opt stack 0
 10286  00415C                     _I2C_Stop:
 10287                           	opt stack 22
 10288                           
 10289                           ;My_header\My_I2C.h: 61: I2C_IdleCheck(0x5);
 10290                           
 10291                           ;incstack = 0
 10292  00415C  0E05               	movlw	5
 10293  00415E  EC9A  F020         	call	_I2C_IdleCheck
 10294                           
 10295                           ;My_header\My_I2C.h: 62: SSP1CON2bits.PEN = 1;
 10296  004162  84C5               	bsf	4037,2,c	;volatile
 10297  004164  0012               	return		;funcret
 10298  004166                     __end_of_I2C_Stop:
 10299                           	opt stack 0
 10300                           tblptru	equ	0xFF8
 10301                           tblptrh	equ	0xFF7
 10302                           tblptrl	equ	0xFF6
 10303                           tablat	equ	0xFF5
 10304                           prodh	equ	0xFF4
 10305                           prodl	equ	0xFF3
 10306                           intcon	equ	0xFF2
 10307                           intcon2	equ	0xFF1
 10308                           postinc0	equ	0xFEE
 10309                           wreg	equ	0xFE8
 10310                           indf1	equ	0xFE7
 10311                           fsr1h	equ	0xFE2
 10312                           fsr1l	equ	0xFE1
 10313                           indf2	equ	0xFDF
 10314                           postinc2	equ	0xFDE
 10315                           postdec2	equ	0xFDD
 10316                           plusw2	equ	0xFDB
 10317                           fsr2h	equ	0xFDA
 10318                           fsr2l	equ	0xFD9
 10319                           status	equ	0xFD8
 10320                           
 10321 ;; *************** function _I2C_Start *****************
 10322 ;; Defined at:
 10323 ;;		line 35 in file "../My_header\My_I2C.h"
 10324 ;; Parameters:    Size  Location     Type
 10325 ;;  adrs            1    wreg     unsigned char 
 10326 ;;  rw              1   32[COMRAM] unsigned char 
 10327 ;; Auto vars:     Size  Location     Type
 10328 ;;  adrs            1   33[COMRAM] unsigned char 
 10329 ;; Return value:  Size  Location     Type
 10330 ;;                  1    wreg      unsigned char 
 10331 ;; Registers used:
 10332 ;;		wreg, status,2, status,0, cstack
 10333 ;; Tracked objects:
 10334 ;;		On entry : 0/0
 10335 ;;		On exit  : 0/0
 10336 ;;		Unchanged: 0/0
 10337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10338 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10339 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10341 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10342 ;;Total ram usage:        2 bytes
 10343 ;; Hardware stack levels used:    1
 10344 ;; Hardware stack levels required when called:    5
 10345 ;; This function calls:
 10346 ;;		_I2C_IdleCheck
 10347 ;; This function is called by:
 10348 ;;		_I2C_LCD_Command
 10349 ;;		_I2C_LCD_Putc
 10350 ;;		_I2C_LCD_Puts
 10351 ;;		_I2C_LCD_CreateChar
 10352 ;; This function uses a non-reentrant model
 10353 ;;
 10354                           
 10355                           	psect	text51
 10356  003F26                     __ptext51:
 10357                           	opt stack 0
 10358  003F26                     _I2C_Start:
 10359                           	opt stack 22
 10360                           
 10361                           ;incstack = 0
 10362                           ;I2C_Start@adrs stored from wreg
 10363  003F26  6E22               	movwf	I2C_Start@adrs,c
 10364                           
 10365                           ;My_header\My_I2C.h: 37: I2C_IdleCheck(0x5);
 10366  003F28  0E05               	movlw	5
 10367  003F2A  EC9A  F020         	call	_I2C_IdleCheck
 10368                           
 10369                           ;My_header\My_I2C.h: 38: SSP1CON2bits.SEN = 1;
 10370  003F2E  80C5               	bsf	4037,0,c	;volatile
 10371                           
 10372                           ;My_header\My_I2C.h: 40: I2C_IdleCheck(0x5);
 10373  003F30  0E05               	movlw	5
 10374  003F32  EC9A  F020         	call	_I2C_IdleCheck
 10375                           
 10376                           ;My_header\My_I2C.h: 41: SSP1IF = 0;
 10377  003F36  969E               	bcf	3998,3,c	;volatile
 10378                           
 10379                           ;My_header\My_I2C.h: 42: SSP1BUF = (uint8_t) ((adrs << 1) + rw);
 10380  003F38  5022               	movf	I2C_Start@adrs,w,c
 10381  003F3A  2422               	addwf	I2C_Start@adrs,w,c
 10382  003F3C  2421               	addwf	I2C_Start@rw,w,c
 10383  003F3E  6EC9               	movwf	4041,c	;volatile
 10384  003F40                     l309:
 10385  003F40  A69E               	btfss	3998,3,c	;volatile
 10386  003F42  D7FE               	goto	l309
 10387                           
 10388                           ;My_header\My_I2C.h: 44: return SSP1CON2bits.ACKSTAT;
 10389  003F44  ACC5               	btfss	4037,6,c	;volatile
 10390  003F46  D002               	goto	u5170
 10391  003F48  0E01               	movlw	1
 10392  003F4A  0012               	return	
 10393  003F4C                     u5170:
 10394  003F4C  0E00               	movlw	0
 10395  003F4E  0012               	return	
 10396  003F50                     __end_of_I2C_Start:
 10397                           	opt stack 0
 10398                           tblptru	equ	0xFF8
 10399                           tblptrh	equ	0xFF7
 10400                           tblptrl	equ	0xFF6
 10401                           tablat	equ	0xFF5
 10402                           prodh	equ	0xFF4
 10403                           prodl	equ	0xFF3
 10404                           intcon	equ	0xFF2
 10405                           intcon2	equ	0xFF1
 10406                           postinc0	equ	0xFEE
 10407                           wreg	equ	0xFE8
 10408                           indf1	equ	0xFE7
 10409                           fsr1h	equ	0xFE2
 10410                           fsr1l	equ	0xFE1
 10411                           indf2	equ	0xFDF
 10412                           postinc2	equ	0xFDE
 10413                           postdec2	equ	0xFDD
 10414                           plusw2	equ	0xFDB
 10415                           fsr2h	equ	0xFDA
 10416                           fsr2l	equ	0xFD9
 10417                           status	equ	0xFD8
 10418                           
 10419 ;; *************** function _I2C_Send *****************
 10420 ;; Defined at:
 10421 ;;		line 65 in file "../My_header\My_I2C.h"
 10422 ;; Parameters:    Size  Location     Type
 10423 ;;  data            1    wreg     unsigned char 
 10424 ;; Auto vars:     Size  Location     Type
 10425 ;;  data            1   32[COMRAM] unsigned char 
 10426 ;; Return value:  Size  Location     Type
 10427 ;;                  1    wreg      unsigned char 
 10428 ;; Registers used:
 10429 ;;		wreg, status,2, status,0, cstack
 10430 ;; Tracked objects:
 10431 ;;		On entry : 0/0
 10432 ;;		On exit  : 0/0
 10433 ;;		Unchanged: 0/0
 10434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10436 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10438 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10439 ;;Total ram usage:        1 bytes
 10440 ;; Hardware stack levels used:    1
 10441 ;; Hardware stack levels required when called:    5
 10442 ;; This function calls:
 10443 ;;		_I2C_IdleCheck
 10444 ;; This function is called by:
 10445 ;;		_I2C_LCD_Command
 10446 ;;		_I2C_LCD_Putc
 10447 ;;		_I2C_LCD_Puts
 10448 ;;		_I2C_LCD_CreateChar
 10449 ;; This function uses a non-reentrant model
 10450 ;;
 10451                           
 10452                           	psect	text52
 10453  00411E                     __ptext52:
 10454                           	opt stack 0
 10455  00411E                     _I2C_Send:
 10456                           	opt stack 22
 10457                           
 10458                           ;incstack = 0
 10459                           ;I2C_Send@data stored from wreg
 10460  00411E  6E21               	movwf	I2C_Send@data,c
 10461                           
 10462                           ;My_header\My_I2C.h: 66: I2C_IdleCheck(0x5);
 10463  004120  0E05               	movlw	5
 10464  004122  EC9A  F020         	call	_I2C_IdleCheck
 10465                           
 10466                           ;My_header\My_I2C.h: 67: SSP1IF = 0;
 10467  004126  969E               	bcf	3998,3,c	;volatile
 10468                           
 10469                           ;My_header\My_I2C.h: 68: SSP1BUF = data;
 10470  004128  C021  FFC9         	movff	I2C_Send@data,4041	;volatile
 10471  00412C                     l324:
 10472  00412C  A69E               	btfss	3998,3,c	;volatile
 10473  00412E  D7FE               	goto	l324
 10474                           
 10475                           ;My_header\My_I2C.h: 70: return SSP1CON2bits.ACKSTAT;
 10476                           ;	Return value of _I2C_Send is never used
 10477  004130  50C5               	movf	4037,w,c	;volatile
 10478  004132  0012               	return	
 10479  004134                     __end_of_I2C_Send:
 10480                           	opt stack 0
 10481                           tblptru	equ	0xFF8
 10482                           tblptrh	equ	0xFF7
 10483                           tblptrl	equ	0xFF6
 10484                           tablat	equ	0xFF5
 10485                           prodh	equ	0xFF4
 10486                           prodl	equ	0xFF3
 10487                           intcon	equ	0xFF2
 10488                           intcon2	equ	0xFF1
 10489                           postinc0	equ	0xFEE
 10490                           wreg	equ	0xFE8
 10491                           indf1	equ	0xFE7
 10492                           fsr1h	equ	0xFE2
 10493                           fsr1l	equ	0xFE1
 10494                           indf2	equ	0xFDF
 10495                           postinc2	equ	0xFDE
 10496                           postdec2	equ	0xFDD
 10497                           plusw2	equ	0xFDB
 10498                           fsr2h	equ	0xFDA
 10499                           fsr2l	equ	0xFD9
 10500                           status	equ	0xFD8
 10501                           
 10502 ;; *************** function _I2C_IdleCheck *****************
 10503 ;; Defined at:
 10504 ;;		line 21 in file "../My_header\My_I2C.h"
 10505 ;; Parameters:    Size  Location     Type
 10506 ;;  mask            1    wreg     unsigned char 
 10507 ;; Auto vars:     Size  Location     Type
 10508 ;;  mask            1   31[COMRAM] unsigned char 
 10509 ;; Return value:  Size  Location     Type
 10510 ;;		None               void
 10511 ;; Registers used:
 10512 ;;		wreg, status,2, status,0
 10513 ;; Tracked objects:
 10514 ;;		On entry : 0/0
 10515 ;;		On exit  : 0/0
 10516 ;;		Unchanged: 0/0
 10517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10519 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10520 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10521 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10522 ;;Total ram usage:        2 bytes
 10523 ;; Hardware stack levels used:    1
 10524 ;; Hardware stack levels required when called:    4
 10525 ;; This function calls:
 10526 ;;		Nothing
 10527 ;; This function is called by:
 10528 ;;		_I2C_Start
 10529 ;;		_I2C_Stop
 10530 ;;		_I2C_Send
 10531 ;;		_I2C_rStart
 10532 ;;		_I2C_Receive
 10533 ;; This function uses a non-reentrant model
 10534 ;;
 10535                           
 10536                           	psect	text53
 10537  004134                     __ptext53:
 10538                           	opt stack 0
 10539  004134                     _I2C_IdleCheck:
 10540                           	opt stack 22
 10541                           
 10542                           ;incstack = 0
 10543                           ;I2C_IdleCheck@mask stored from wreg
 10544  004134  6E20               	movwf	I2C_IdleCheck@mask,c
 10545  004136                     l4963:
 10546  004136  50C7               	movf	4039,w,c	;volatile
 10547  004138  1420               	andwf	I2C_IdleCheck@mask,w,c
 10548  00413A  6E1F               	movwf	??_I2C_IdleCheck& (0+255),c
 10549  00413C  50C5               	movf	4037,w,c	;volatile
 10550  00413E  0B1F               	andlw	31
 10551  004140  101F               	iorwf	??_I2C_IdleCheck,w,c
 10552  004142  0900               	iorlw	0
 10553  004144  B4D8               	btfsc	status,2,c
 10554  004146  0012               	return	
 10555  004148  D7F6               	goto	l4963
 10556  00414A                     __end_of_I2C_IdleCheck:
 10557                           	opt stack 0
 10558                           tblptru	equ	0xFF8
 10559                           tblptrh	equ	0xFF7
 10560                           tblptrl	equ	0xFF6
 10561                           tablat	equ	0xFF5
 10562                           prodh	equ	0xFF4
 10563                           prodl	equ	0xFF3
 10564                           intcon	equ	0xFF2
 10565                           intcon2	equ	0xFF1
 10566                           postinc0	equ	0xFEE
 10567                           wreg	equ	0xFE8
 10568                           indf1	equ	0xFE7
 10569                           fsr1h	equ	0xFE2
 10570                           fsr1l	equ	0xFE1
 10571                           indf2	equ	0xFDF
 10572                           postinc2	equ	0xFDE
 10573                           postdec2	equ	0xFDD
 10574                           plusw2	equ	0xFDB
 10575                           fsr2h	equ	0xFDA
 10576                           fsr2l	equ	0xFD9
 10577                           status	equ	0xFD8
 10578                           
 10579 ;; *************** function _Delay_ms *****************
 10580 ;; Defined at:
 10581 ;;		line 333 in file "../My_header\My_header.h"
 10582 ;; Parameters:    Size  Location     Type
 10583 ;;  ms              2   30[COMRAM] unsigned int 
 10584 ;; Auto vars:     Size  Location     Type
 10585 ;;		None
 10586 ;; Return value:  Size  Location     Type
 10587 ;;		None               void
 10588 ;; Registers used:
 10589 ;;		wreg, status,2, status,0
 10590 ;; Tracked objects:
 10591 ;;		On entry : 0/0
 10592 ;;		On exit  : 0/0
 10593 ;;		Unchanged: 0/0
 10594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10595 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10597 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10598 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10599 ;;Total ram usage:        3 bytes
 10600 ;; Hardware stack levels used:    1
 10601 ;; Hardware stack levels required when called:    4
 10602 ;; This function calls:
 10603 ;;		Nothing
 10604 ;; This function is called by:
 10605 ;;		_I2C_LCD_init
 10606 ;;		_main
 10607 ;; This function uses a non-reentrant model
 10608 ;;
 10609                           
 10610                           	psect	text54
 10611  003FEE                     __ptext54:
 10612                           	opt stack 0
 10613  003FEE                     _Delay_ms:
 10614                           	opt stack 24
 10615                           
 10616                           ;My_header\My_header.h: 334: while (ms--)_delay((unsigned long)((1)*(48000000/4000.0)));
 10617                           
 10618                           ;incstack = 0
 10619  003FEE  D008               	goto	l3657
 10620  003FF0                     l3655:
 10621  003FF0  0E10               	movlw	16
 10622  003FF2  6E21               	movwf	??_Delay_ms& (0+255),c
 10623  003FF4  0E94               	movlw	148
 10624  003FF6                     u6887:
 10625  003FF6  2EE8               	decfsz	wreg,f,c
 10626  003FF8  D7FE               	goto	u6887
 10627  003FFA  2E21               	decfsz	??_Delay_ms& (0+255),f,c
 10628  003FFC  D7FC               	goto	u6887
 10629  003FFE  D000               	nop2	
 10630  004000                     l3657:
 10631  004000  061F               	decf	Delay_ms@ms,f,c
 10632  004002  A0D8               	btfss	status,0,c
 10633  004004  0620               	decf	Delay_ms@ms+1,f,c
 10634  004006  281F               	incf	Delay_ms@ms,w,c
 10635  004008  E1F3               	bnz	l3655
 10636  00400A  2820               	incf	Delay_ms@ms+1,w,c
 10637  00400C  B4D8               	btfsc	status,2,c
 10638  00400E  0012               	return	
 10639  004010  D7EF               	goto	l3655
 10640  004012                     __end_of_Delay_ms:
 10641                           	opt stack 0
 10642                           tblptru	equ	0xFF8
 10643                           tblptrh	equ	0xFF7
 10644                           tblptrl	equ	0xFF6
 10645                           tablat	equ	0xFF5
 10646                           prodh	equ	0xFF4
 10647                           prodl	equ	0xFF3
 10648                           intcon	equ	0xFF2
 10649                           intcon2	equ	0xFF1
 10650                           postinc0	equ	0xFEE
 10651                           wreg	equ	0xFE8
 10652                           indf1	equ	0xFE7
 10653                           fsr1h	equ	0xFE2
 10654                           fsr1l	equ	0xFE1
 10655                           indf2	equ	0xFDF
 10656                           postinc2	equ	0xFDE
 10657                           postdec2	equ	0xFDD
 10658                           plusw2	equ	0xFDB
 10659                           fsr2h	equ	0xFDA
 10660                           fsr2l	equ	0xFD9
 10661                           status	equ	0xFD8
 10662                           
 10663 ;; *************** function _CTMU_init *****************
 10664 ;; Defined at:
 10665 ;;		line 289 in file "../My_header\My_header.h"
 10666 ;; Parameters:    Size  Location     Type
 10667 ;;		None
 10668 ;; Auto vars:     Size  Location     Type
 10669 ;;		None
 10670 ;; Return value:  Size  Location     Type
 10671 ;;		None               void
 10672 ;; Registers used:
 10673 ;;		wreg, status,2
 10674 ;; Tracked objects:
 10675 ;;		On entry : 0/0
 10676 ;;		On exit  : 0/0
 10677 ;;		Unchanged: 0/0
 10678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10683 ;;Total ram usage:        0 bytes
 10684 ;; Hardware stack levels used:    1
 10685 ;; Hardware stack levels required when called:    4
 10686 ;; This function calls:
 10687 ;;		Nothing
 10688 ;; This function is called by:
 10689 ;;		_main_init
 10690 ;; This function uses a non-reentrant model
 10691 ;;
 10692                           
 10693                           	psect	text55
 10694  003FA0                     __ptext55:
 10695                           	opt stack 0
 10696  003FA0                     _CTMU_init:
 10697                           	opt stack 25
 10698                           
 10699                           ;My_header\My_header.h: 290: CTMUCONH = 0x00;
 10700                           
 10701                           ;incstack = 0
 10702  003FA0  0E00               	movlw	0
 10703  003FA2  6EB3               	movwf	4019,c	;volatile
 10704                           
 10705                           ;My_header\My_header.h: 291: CTMUCONL = 0x90;
 10706  003FA4  0E90               	movlw	144
 10707  003FA6  6EB2               	movwf	4018,c	;volatile
 10708                           
 10709                           ;My_header\My_header.h: 292: CTMUICON = 0x01;
 10710  003FA8  0E01               	movlw	1
 10711  003FAA  6EB1               	movwf	4017,c	;volatile
 10712                           
 10713                           ;My_header\My_header.h: 294: ADCON1bits.ADFM = 1;
 10714  003FAC  8EC1               	bsf	4033,7,c	;volatile
 10715                           
 10716                           ;My_header\My_header.h: 295: ADCON1bits.ADCAL = 0;
 10717  003FAE  9CC1               	bcf	4033,6,c	;volatile
 10718                           
 10719                           ;My_header\My_header.h: 296: ADCON1bits.ACQT = 1;
 10720  003FB0  50C1               	movf	4033,w,c	;volatile
 10721  003FB2  0BC7               	andlw	-57
 10722  003FB4  0908               	iorlw	8
 10723  003FB6  6EC1               	movwf	4033,c	;volatile
 10724                           
 10725                           ;My_header\My_header.h: 297: ADCON1bits.ADCS = 6;
 10726  003FB8  50C1               	movf	4033,w,c	;volatile
 10727  003FBA  0BF8               	andlw	-8
 10728  003FBC  0906               	iorlw	6
 10729  003FBE  6EC1               	movwf	4033,c	;volatile
 10730                           
 10731                           ;My_header\My_header.h: 299: ADCON0bits.VCFG0 = 0;
 10732  003FC0  9CC2               	bcf	4034,6,c	;volatile
 10733                           
 10734                           ;My_header\My_header.h: 300: ADCON0bits.VCFG1 = 0;
 10735  003FC2  9EC2               	bcf	4034,7,c	;volatile
 10736                           
 10737                           ;My_header\My_header.h: 301: ADCON0bits.ADON = 1;
 10738  003FC4  80C2               	bsf	4034,0,c	;volatile
 10739  003FC6  0012               	return		;funcret
 10740  003FC8                     __end_of_CTMU_init:
 10741                           	opt stack 0
 10742                           tblptru	equ	0xFF8
 10743                           tblptrh	equ	0xFF7
 10744                           tblptrl	equ	0xFF6
 10745                           tablat	equ	0xFF5
 10746                           prodh	equ	0xFF4
 10747                           prodl	equ	0xFF3
 10748                           intcon	equ	0xFF2
 10749                           intcon2	equ	0xFF1
 10750                           postinc0	equ	0xFEE
 10751                           wreg	equ	0xFE8
 10752                           indf1	equ	0xFE7
 10753                           fsr1h	equ	0xFE2
 10754                           fsr1l	equ	0xFE1
 10755                           indf2	equ	0xFDF
 10756                           postinc2	equ	0xFDE
 10757                           postdec2	equ	0xFDD
 10758                           plusw2	equ	0xFDB
 10759                           fsr2h	equ	0xFDA
 10760                           fsr2l	equ	0xFD9
 10761                           status	equ	0xFD8
 10762                           
 10763 ;; *************** function _ADC_init *****************
 10764 ;; Defined at:
 10765 ;;		line 149 in file "../My_header\My_header.h"
 10766 ;; Parameters:    Size  Location     Type
 10767 ;;  p_ref           1    wreg     unsigned char 
 10768 ;; Auto vars:     Size  Location     Type
 10769 ;;  p_ref           1   30[COMRAM] unsigned char 
 10770 ;; Return value:  Size  Location     Type
 10771 ;;		None               void
 10772 ;; Registers used:
 10773 ;;		wreg, status,2
 10774 ;; Tracked objects:
 10775 ;;		On entry : 0/0
 10776 ;;		On exit  : 0/0
 10777 ;;		Unchanged: 0/0
 10778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10780 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10782 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10783 ;;Total ram usage:        1 bytes
 10784 ;; Hardware stack levels used:    1
 10785 ;; Hardware stack levels required when called:    4
 10786 ;; This function calls:
 10787 ;;		Nothing
 10788 ;; This function is called by:
 10789 ;;		_main_init
 10790 ;; This function uses a non-reentrant model
 10791 ;;
 10792                           
 10793                           	psect	text56
 10794  0040BA                     __ptext56:
 10795                           	opt stack 0
 10796  0040BA                     _ADC_init:
 10797                           	opt stack 25
 10798                           
 10799                           ;incstack = 0
 10800                           ;ADC_init@p_ref stored from wreg
 10801  0040BA  6E1F               	movwf	ADC_init@p_ref,c
 10802                           
 10803                           ;My_header\My_header.h: 150: ADCON0bits.VCFG1 = 0;
 10804  0040BC  9EC2               	bcf	4034,7,c	;volatile
 10805                           
 10806                           ;My_header\My_header.h: 151: ADCON0bits.VCFG0 = p_ref;
 10807  0040BE  B01F               	btfsc	ADC_init@p_ref,0,c
 10808  0040C0  D002               	bra	u3795
 10809  0040C2  9CC2               	bcf	4034,6,c	;volatile
 10810  0040C4  D001               	bra	u3796
 10811  0040C6                     u3795:
 10812  0040C6  8CC2               	bsf	4034,6,c	;volatile
 10813  0040C8                     u3796:
 10814                           
 10815                           ;My_header\My_header.h: 153: ADCON1bits.ADFM = 1;
 10816  0040C8  8EC1               	bsf	4033,7,c	;volatile
 10817                           
 10818                           ;My_header\My_header.h: 154: ADCON1bits.ADCAL = 0;
 10819  0040CA  9CC1               	bcf	4033,6,c	;volatile
 10820                           
 10821                           ;My_header\My_header.h: 155: ADCON1bits.ADCS = 6;
 10822  0040CC  50C1               	movf	4033,w,c	;volatile
 10823  0040CE  0BF8               	andlw	-8
 10824  0040D0  0906               	iorlw	6
 10825  0040D2  6EC1               	movwf	4033,c	;volatile
 10826  0040D4  0012               	return		;funcret
 10827  0040D6                     __end_of_ADC_init:
 10828                           	opt stack 0
 10829                           tblptru	equ	0xFF8
 10830                           tblptrh	equ	0xFF7
 10831                           tblptrl	equ	0xFF6
 10832                           tablat	equ	0xFF5
 10833                           prodh	equ	0xFF4
 10834                           prodl	equ	0xFF3
 10835                           intcon	equ	0xFF2
 10836                           intcon2	equ	0xFF1
 10837                           postinc0	equ	0xFEE
 10838                           wreg	equ	0xFE8
 10839                           indf1	equ	0xFE7
 10840                           fsr1h	equ	0xFE2
 10841                           fsr1l	equ	0xFE1
 10842                           indf2	equ	0xFDF
 10843                           postinc2	equ	0xFDE
 10844                           postdec2	equ	0xFDD
 10845                           plusw2	equ	0xFDB
 10846                           fsr2h	equ	0xFDA
 10847                           fsr2l	equ	0xFD9
 10848                           status	equ	0xFD8
 10849                           
 10850 ;; *************** function _RTCC_loop *****************
 10851 ;; Defined at:
 10852 ;;		line 387 in file "../My_header\My_RTCC.h"
 10853 ;; Parameters:    Size  Location     Type
 10854 ;;		None
 10855 ;; Auto vars:     Size  Location     Type
 10856 ;;		None
 10857 ;; Return value:  Size  Location     Type
 10858 ;;		None               void
 10859 ;; Registers used:
 10860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10861 ;; Tracked objects:
 10862 ;;		On entry : 0/0
 10863 ;;		On exit  : 0/0
 10864 ;;		Unchanged: 0/0
 10865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10870 ;;Total ram usage:        0 bytes
 10871 ;; Hardware stack levels used:    1
 10872 ;; Hardware stack levels required when called:    8
 10873 ;; This function calls:
 10874 ;;		_RTCC_from_RTCC
 10875 ;; This function is called by:
 10876 ;;		_main
 10877 ;; This function uses a non-reentrant model
 10878 ;;
 10879                           
 10880                           	psect	text57
 10881  003CB0                     __ptext57:
 10882                           	opt stack 0
 10883  003CB0                     _RTCC_loop:
 10884                           	opt stack 22
 10885  003CB0                     l553:
 10886  003CB0  010F               	movlb	15	; () banked
 10887  003CB2  B93F               	btfsc	63,4,b	;volatile
 10888  003CB4  D7FD               	goto	l553
 10889                           
 10890                           ; BSR set to: 15
 10891                           ;My_header\My_RTCC.h: 390: halfsec = RTCCFGbits.HALFSEC;
 10892                           
 10893                           ; BSR set to: 15
 10894  003CB6  0E00               	movlw	0
 10895  003CB8  B73F               	btfsc	63,3,b	;volatile
 10896  003CBA  0E01               	movlw	1
 10897  003CBC  0100               	movlb	0	; () banked
 10898  003CBE  6FA1               	movwf	_halfsec& (0+255),b
 10899                           
 10900                           ; BSR set to: 0
 10901                           ;My_header\My_RTCC.h: 391: if (prev_halfsec != halfsec) {
 10902  003CC0  0100               	movlb	0	; () banked
 10903  003CC2  51A1               	movf	_halfsec& (0+255),w,b
 10904  003CC4  0100               	movlb	0	; () banked
 10905  003CC6  199E               	xorwf	RTCC_loop@prev_halfsec& (0+255),w,b
 10906  003CC8  B4D8               	btfsc	status,2,c
 10907  003CCA  0012               	return	
 10908                           
 10909                           ; BSR set to: 0
 10910                           ;My_header\My_RTCC.h: 392: prev_halfsec = halfsec;
 10911  003CCC  C0A1  F09E         	movff	_halfsec,RTCC_loop@prev_halfsec
 10912                           
 10913                           ;My_header\My_RTCC.h: 393: colon = halfsec;
 10914  003CD0  C0A1  F09F         	movff	_halfsec,_colon
 10915                           
 10916                           ; BSR set to: 0
 10917                           ;My_header\My_RTCC.h: 394: time_change_flag = 1;
 10918  003CD4  0E01               	movlw	1
 10919  003CD6  6E3B               	movwf	_time_change_flag,c
 10920                           
 10921                           ; BSR set to: 0
 10922                           ;My_header\My_RTCC.h: 395: RTCC_from_RTCC(&caltime_now, &epoch_now);
 10923  003CD8  0EAC               	movlw	low _caltime_now
 10924  003CDA  0100               	movlb	0	; () banked
 10925  003CDC  6FEF               	movwf	RTCC_from_RTCC@ct& (0+255),b
 10926  003CDE  0E00               	movlw	high _caltime_now
 10927  003CE0  0100               	movlb	0	; () banked
 10928  003CE2  6FF0               	movwf	(RTCC_from_RTCC@ct+1)& (0+255),b
 10929  003CE4  0EC3               	movlw	low _epoch_now
 10930  003CE6  0100               	movlb	0	; () banked
 10931  003CE8  6FF1               	movwf	RTCC_from_RTCC@ep& (0+255),b
 10932  003CEA  0E00               	movlw	high _epoch_now
 10933  003CEC  0100               	movlb	0	; () banked
 10934  003CEE  6FF2               	movwf	(RTCC_from_RTCC@ep+1)& (0+255),b
 10935  003CF0  EC3C  F020         	call	_RTCC_from_RTCC	;wreg free
 10936  003CF4  0012               	return	
 10937  003CF6                     __end_of_RTCC_loop:
 10938                           	opt stack 0
 10939                           tblptru	equ	0xFF8
 10940                           tblptrh	equ	0xFF7
 10941                           tblptrl	equ	0xFF6
 10942                           tablat	equ	0xFF5
 10943                           prodh	equ	0xFF4
 10944                           prodl	equ	0xFF3
 10945                           intcon	equ	0xFF2
 10946                           intcon2	equ	0xFF1
 10947                           postinc0	equ	0xFEE
 10948                           wreg	equ	0xFE8
 10949                           indf1	equ	0xFE7
 10950                           fsr1h	equ	0xFE2
 10951                           fsr1l	equ	0xFE1
 10952                           indf2	equ	0xFDF
 10953                           postinc2	equ	0xFDE
 10954                           postdec2	equ	0xFDD
 10955                           plusw2	equ	0xFDB
 10956                           fsr2h	equ	0xFDA
 10957                           fsr2l	equ	0xFD9
 10958                           status	equ	0xFD8
 10959                           
 10960 ;; *************** function _RTCC_from_RTCC *****************
 10961 ;; Defined at:
 10962 ;;		line 231 in file "../My_header\My_RTCC.h"
 10963 ;; Parameters:    Size  Location     Type
 10964 ;;  ct              2   40[BANK0 ] PTR struct .
 10965 ;;		 -> caltime_now(7), 
 10966 ;;  ep              2   42[BANK0 ] PTR unsigned long 
 10967 ;;		 -> epoch_now(4), 
 10968 ;; Auto vars:     Size  Location     Type
 10969 ;;		None
 10970 ;; Return value:  Size  Location     Type
 10971 ;;		None               void
 10972 ;; Registers used:
 10973 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10974 ;; Tracked objects:
 10975 ;;		On entry : 0/0
 10976 ;;		On exit  : 0/0
 10977 ;;		Unchanged: 0/0
 10978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10979 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10982 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10983 ;;Total ram usage:        4 bytes
 10984 ;; Hardware stack levels used:    1
 10985 ;; Hardware stack levels required when called:    7
 10986 ;; This function calls:
 10987 ;;		_RTCC_to_caltime
 10988 ;;		_caltime_to_epoch
 10989 ;; This function is called by:
 10990 ;;		_display_time_0802
 10991 ;;		_RTCC_adjust_time_inc
 10992 ;;		_RTCC_adjust_time_dec
 10993 ;;		_RTCC_loop
 10994 ;;		_sleep_loop
 10995 ;;		_main
 10996 ;;		_display_time_1602
 10997 ;; This function uses a non-reentrant model
 10998 ;;
 10999                           
 11000                           	psect	text58
 11001  004078                     __ptext58:
 11002                           	opt stack 0
 11003  004078                     _RTCC_from_RTCC:
 11004                           	opt stack 22
 11005                           
 11006                           ;My_header\My_RTCC.h: 232: RTCC_to_caltime(ct);
 11007                           
 11008                           ;incstack = 0
 11009  004078  C0EF  F021         	movff	RTCC_from_RTCC@ct,RTCC_to_caltime@ct
 11010  00407C  C0F0  F022         	movff	RTCC_from_RTCC@ct+1,RTCC_to_caltime@ct+1
 11011  004080  EC2E  F019         	call	_RTCC_to_caltime	;wreg free
 11012                           
 11013                           ;My_header\My_RTCC.h: 233: caltime_to_epoch(ct, ep);
 11014  004084  C0EF  F0E0         	movff	RTCC_from_RTCC@ct,caltime_to_epoch@ct
 11015  004088  C0F0  F0E1         	movff	RTCC_from_RTCC@ct+1,caltime_to_epoch@ct+1
 11016  00408C  C0F1  F0E2         	movff	RTCC_from_RTCC@ep,caltime_to_epoch@ep
 11017  004090  C0F2  F0E3         	movff	RTCC_from_RTCC@ep+1,caltime_to_epoch@ep+1
 11018  004094  EC92  F00B         	call	_caltime_to_epoch	;wreg free
 11019  004098  0012               	return		;funcret
 11020  00409A                     __end_of_RTCC_from_RTCC:
 11021                           	opt stack 0
 11022                           tblptru	equ	0xFF8
 11023                           tblptrh	equ	0xFF7
 11024                           tblptrl	equ	0xFF6
 11025                           tablat	equ	0xFF5
 11026                           prodh	equ	0xFF4
 11027                           prodl	equ	0xFF3
 11028                           intcon	equ	0xFF2
 11029                           intcon2	equ	0xFF1
 11030                           postinc0	equ	0xFEE
 11031                           wreg	equ	0xFE8
 11032                           indf1	equ	0xFE7
 11033                           fsr1h	equ	0xFE2
 11034                           fsr1l	equ	0xFE1
 11035                           indf2	equ	0xFDF
 11036                           postinc2	equ	0xFDE
 11037                           postdec2	equ	0xFDD
 11038                           plusw2	equ	0xFDB
 11039                           fsr2h	equ	0xFDA
 11040                           fsr2l	equ	0xFD9
 11041                           status	equ	0xFD8
 11042                           
 11043 ;; *************** function _caltime_to_epoch *****************
 11044 ;; Defined at:
 11045 ;;		line 211 in file "../My_header\My_RTCC.h"
 11046 ;; Parameters:    Size  Location     Type
 11047 ;;  ct              2   25[BANK0 ] PTR struct .
 11048 ;;		 -> caltime_now(7), 
 11049 ;;  ep              2   27[BANK0 ] PTR unsigned long 
 11050 ;;		 -> epoch_now(4), 
 11051 ;; Auto vars:     Size  Location     Type
 11052 ;;  month           1   39[BANK0 ] unsigned char 
 11053 ;;  month           1   34[BANK0 ] unsigned char 
 11054 ;;  year            1   33[BANK0 ] unsigned char 
 11055 ;;  epoch           4   35[BANK0 ] unsigned long 
 11056 ;; Return value:  Size  Location     Type
 11057 ;;		None               void
 11058 ;; Registers used:
 11059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11060 ;; Tracked objects:
 11061 ;;		On entry : 0/0
 11062 ;;		On exit  : 0/0
 11063 ;;		Unchanged: 0/0
 11064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11065 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11066 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11067 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11068 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11069 ;;Total ram usage:       15 bytes
 11070 ;; Hardware stack levels used:    1
 11071 ;; Hardware stack levels required when called:    6
 11072 ;; This function calls:
 11073 ;;		___lmul
 11074 ;;		_month_length
 11075 ;; This function is called by:
 11076 ;;		_RTCC_from_RTCC
 11077 ;;		_RTCC_from_caltime
 11078 ;; This function uses a non-reentrant model
 11079 ;;
 11080                           
 11081                           	psect	text59
 11082  001724                     __ptext59:
 11083                           	opt stack 0
 11084  001724                     _caltime_to_epoch:
 11085                           	opt stack 22
 11086                           
 11087                           ;My_header\My_RTCC.h: 212: epoch_t epoch = 0;
 11088                           
 11089                           ;incstack = 0
 11090  001724  0E00               	movlw	0
 11091  001726  0100               	movlb	0	; () banked
 11092  001728  6FEA               	movwf	caltime_to_epoch@epoch& (0+255),b
 11093  00172A  0E00               	movlw	0
 11094  00172C  6FEB               	movwf	(caltime_to_epoch@epoch+1)& (0+255),b
 11095  00172E  0E00               	movlw	0
 11096  001730  6FEC               	movwf	(caltime_to_epoch@epoch+2)& (0+255),b
 11097  001732  0E00               	movlw	0
 11098  001734  6FED               	movwf	(caltime_to_epoch@epoch+3)& (0+255),b
 11099                           
 11100                           ;My_header\My_RTCC.h: 213: for (uint8_t year = 0; year < ct->YY; year++) {
 11101  001736  0E00               	movlw	0
 11102  001738  0100               	movlb	0	; () banked
 11103  00173A  6FE8               	movwf	caltime_to_epoch@year& (0+255),b
 11104  00173C  D037               	goto	l5293
 11105  00173E                     l5279:
 11106                           
 11107                           ; BSR set to: 0
 11108                           ;My_header\My_RTCC.h: 214: for (uint8_t month = 1; month <= 12; month++) {
 11109  00173E  0E01               	movlw	1
 11110  001740  0100               	movlb	0	; () banked
 11111  001742  6FEE               	movwf	caltime_to_epoch@month& (0+255),b
 11112  001744                     l5281:
 11113                           
 11114                           ; BSR set to: 0
 11115  001744  0E0C               	movlw	12
 11116  001746  0100               	movlb	0	; () banked
 11117  001748  65EE               	cpfsgt	caltime_to_epoch@month& (0+255),b
 11118  00174A  D001               	goto	l5285
 11119  00174C  D02D               	goto	l5291
 11120  00174E                     l5285:
 11121                           
 11122                           ; BSR set to: 0
 11123                           ;My_header\My_RTCC.h: 215: epoch += ((epoch_t)60*60*24) * month_length(year, month);
 11124  00174E  C0EE  F0C9         	movff	caltime_to_epoch@month,month_length@month
 11125  001752  0100               	movlb	0	; () banked
 11126  001754  51E8               	movf	caltime_to_epoch@year& (0+255),w,b
 11127  001756  EC3E  F016         	call	_month_length
 11128  00175A  0100               	movlb	0	; () banked
 11129  00175C  6FE4               	movwf	??_caltime_to_epoch& (0+255),b
 11130  00175E  0100               	movlb	0	; () banked
 11131  001760  51E4               	movf	??_caltime_to_epoch& (0+255),w,b
 11132  001762  0100               	movlb	0	; () banked
 11133  001764  6FD4               	movwf	___lmul@multiplier& (0+255),b
 11134  001766  6BD5               	clrf	(___lmul@multiplier+1)& (0+255),b
 11135  001768  6BD6               	clrf	(___lmul@multiplier+2)& (0+255),b
 11136  00176A  6BD7               	clrf	(___lmul@multiplier+3)& (0+255),b
 11137  00176C  0E80               	movlw	128
 11138  00176E  0100               	movlb	0	; () banked
 11139  001770  6FD8               	movwf	___lmul@multiplicand& (0+255),b
 11140  001772  0E51               	movlw	81
 11141  001774  6FD9               	movwf	(___lmul@multiplicand+1)& (0+255),b
 11142  001776  0E01               	movlw	1
 11143  001778  6FDA               	movwf	(___lmul@multiplicand+2)& (0+255),b
 11144  00177A  0E00               	movlw	0
 11145  00177C  6FDB               	movwf	(___lmul@multiplicand+3)& (0+255),b
 11146  00177E  EC2D  F01C         	call	___lmul	;wreg free
 11147  001782  0100               	movlb	0	; () banked
 11148  001784  51D4               	movf	?___lmul& (0+255),w,b
 11149  001786  0100               	movlb	0	; () banked
 11150  001788  27EA               	addwf	caltime_to_epoch@epoch& (0+255),f,b
 11151  00178A  0100               	movlb	0	; () banked
 11152  00178C  51D5               	movf	(?___lmul+1)& (0+255),w,b
 11153  00178E  0100               	movlb	0	; () banked
 11154  001790  23EB               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
 11155  001792  0100               	movlb	0	; () banked
 11156  001794  51D6               	movf	(?___lmul+2)& (0+255),w,b
 11157  001796  0100               	movlb	0	; () banked
 11158  001798  23EC               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
 11159  00179A  0100               	movlb	0	; () banked
 11160  00179C  51D7               	movf	(?___lmul+3)& (0+255),w,b
 11161  00179E  0100               	movlb	0	; () banked
 11162  0017A0  23ED               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
 11163                           
 11164                           ; BSR set to: 0
 11165  0017A2  0100               	movlb	0	; () banked
 11166  0017A4  2BEE               	incf	caltime_to_epoch@month& (0+255),f,b
 11167  0017A6  D7CE               	goto	l5281
 11168  0017A8                     l5291:
 11169                           
 11170                           ; BSR set to: 0
 11171  0017A8  0100               	movlb	0	; () banked
 11172  0017AA  2BE8               	incf	caltime_to_epoch@year& (0+255),f,b
 11173  0017AC                     l5293:
 11174                           
 11175                           ; BSR set to: 0
 11176  0017AC  0100               	movlb	0	; () banked
 11177  0017AE  EE20 F006          	lfsr	2,6
 11178  0017B2  51E0               	movf	caltime_to_epoch@ct& (0+255),w,b
 11179  0017B4  26D9               	addwf	fsr2l,f,c
 11180  0017B6  51E1               	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
 11181  0017B8  22DA               	addwfc	fsr2h,f,c
 11182  0017BA  50DE               	movf	postinc2,w,c
 11183  0017BC  0100               	movlb	0	; () banked
 11184  0017BE  5DE8               	subwf	caltime_to_epoch@year& (0+255),w,b
 11185  0017C0  A0D8               	btfss	status,0,c
 11186  0017C2  D7BD               	goto	l5279
 11187                           
 11188                           ; BSR set to: 0
 11189                           ;My_header\My_RTCC.h: 216: }
 11190                           ;My_header\My_RTCC.h: 217: }
 11191                           ;My_header\My_RTCC.h: 218: for (uint8_t month = 1; month < ct->MM; month++) {
 11192                           
 11193                           ; BSR set to: 0
 11194  0017C4  0E01               	movlw	1
 11195  0017C6  0100               	movlb	0	; () banked
 11196  0017C8  6FE9               	movwf	caltime_to_epoch@month_1995& (0+255),b
 11197  0017CA  D032               	goto	l5301
 11198  0017CC                     l5297:
 11199                           
 11200                           ; BSR set to: 0
 11201                           ;My_header\My_RTCC.h: 219: epoch += ((epoch_t)60*60*24) * month_length(ct->YY, month);
 11202  0017CC  C0E9  F0C9         	movff	caltime_to_epoch@month_1995,month_length@month
 11203  0017D0  0100               	movlb	0	; () banked
 11204  0017D2  EE20 F006          	lfsr	2,6
 11205  0017D6  51E0               	movf	caltime_to_epoch@ct& (0+255),w,b
 11206  0017D8  26D9               	addwf	fsr2l,f,c
 11207  0017DA  51E1               	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
 11208  0017DC  22DA               	addwfc	fsr2h,f,c
 11209  0017DE  50DF               	movf	indf2,w,c
 11210  0017E0  EC3E  F016         	call	_month_length
 11211  0017E4  0100               	movlb	0	; () banked
 11212  0017E6  6FE4               	movwf	??_caltime_to_epoch& (0+255),b
 11213  0017E8  0100               	movlb	0	; () banked
 11214  0017EA  51E4               	movf	??_caltime_to_epoch& (0+255),w,b
 11215  0017EC  0100               	movlb	0	; () banked
 11216  0017EE  6FD4               	movwf	___lmul@multiplier& (0+255),b
 11217  0017F0  6BD5               	clrf	(___lmul@multiplier+1)& (0+255),b
 11218  0017F2  6BD6               	clrf	(___lmul@multiplier+2)& (0+255),b
 11219  0017F4  6BD7               	clrf	(___lmul@multiplier+3)& (0+255),b
 11220  0017F6  0E80               	movlw	128
 11221  0017F8  0100               	movlb	0	; () banked
 11222  0017FA  6FD8               	movwf	___lmul@multiplicand& (0+255),b
 11223  0017FC  0E51               	movlw	81
 11224  0017FE  6FD9               	movwf	(___lmul@multiplicand+1)& (0+255),b
 11225  001800  0E01               	movlw	1
 11226  001802  6FDA               	movwf	(___lmul@multiplicand+2)& (0+255),b
 11227  001804  0E00               	movlw	0
 11228  001806  6FDB               	movwf	(___lmul@multiplicand+3)& (0+255),b
 11229  001808  EC2D  F01C         	call	___lmul	;wreg free
 11230  00180C  0100               	movlb	0	; () banked
 11231  00180E  51D4               	movf	?___lmul& (0+255),w,b
 11232  001810  0100               	movlb	0	; () banked
 11233  001812  27EA               	addwf	caltime_to_epoch@epoch& (0+255),f,b
 11234  001814  0100               	movlb	0	; () banked
 11235  001816  51D5               	movf	(?___lmul+1)& (0+255),w,b
 11236  001818  0100               	movlb	0	; () banked
 11237  00181A  23EB               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
 11238  00181C  0100               	movlb	0	; () banked
 11239  00181E  51D6               	movf	(?___lmul+2)& (0+255),w,b
 11240  001820  0100               	movlb	0	; () banked
 11241  001822  23EC               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
 11242  001824  0100               	movlb	0	; () banked
 11243  001826  51D7               	movf	(?___lmul+3)& (0+255),w,b
 11244  001828  0100               	movlb	0	; () banked
 11245  00182A  23ED               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
 11246                           
 11247                           ; BSR set to: 0
 11248  00182C  0100               	movlb	0	; () banked
 11249  00182E  2BE9               	incf	caltime_to_epoch@month_1995& (0+255),f,b
 11250  001830                     l5301:
 11251                           
 11252                           ; BSR set to: 0
 11253  001830  0100               	movlb	0	; () banked
 11254  001832  EE20 F005          	lfsr	2,5
 11255  001836  51E0               	movf	caltime_to_epoch@ct& (0+255),w,b
 11256  001838  26D9               	addwf	fsr2l,f,c
 11257  00183A  51E1               	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
 11258  00183C  22DA               	addwfc	fsr2h,f,c
 11259  00183E  50DE               	movf	postinc2,w,c
 11260  001840  0100               	movlb	0	; () banked
 11261  001842  5DE9               	subwf	caltime_to_epoch@month_1995& (0+255),w,b
 11262  001844  A0D8               	btfss	status,0,c
 11263  001846  D7C2               	goto	l5297
 11264                           
 11265                           ; BSR set to: 0
 11266                           ;My_header\My_RTCC.h: 220: }
 11267                           ;My_header\My_RTCC.h: 221: epoch += ((epoch_t)60*60*24) * (ct->DD - 1);
 11268                           
 11269                           ; BSR set to: 0
 11270  001848  0EFF               	movlw	255
 11271  00184A  0100               	movlb	0	; () banked
 11272  00184C  6FE4               	movwf	??_caltime_to_epoch& (0+255),b
 11273  00184E  0EFF               	movlw	255
 11274  001850  0100               	movlb	0	; () banked
 11275  001852  6FE5               	movwf	(??_caltime_to_epoch+1)& (0+255),b
 11276  001854  0100               	movlb	0	; () banked
 11277  001856  EE20 F004          	lfsr	2,4
 11278  00185A  51E0               	movf	caltime_to_epoch@ct& (0+255),w,b
 11279  00185C  26D9               	addwf	fsr2l,f,c
 11280  00185E  51E1               	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
 11281  001860  22DA               	addwfc	fsr2h,f,c
 11282  001862  50DF               	movf	indf2,w,c
 11283  001864  0100               	movlb	0	; () banked
 11284  001866  6FE6               	movwf	(??_caltime_to_epoch+2)& (0+255),b
 11285  001868  6BE7               	clrf	(??_caltime_to_epoch+3)& (0+255),b
 11286  00186A  0100               	movlb	0	; () banked
 11287  00186C  51E4               	movf	??_caltime_to_epoch& (0+255),w,b
 11288  00186E  0100               	movlb	0	; () banked
 11289  001870  27E6               	addwf	(??_caltime_to_epoch+2)& (0+255),f,b
 11290  001872  0100               	movlb	0	; () banked
 11291  001874  51E5               	movf	(??_caltime_to_epoch+1)& (0+255),w,b
 11292  001876  0100               	movlb	0	; () banked
 11293  001878  23E7               	addwfc	(??_caltime_to_epoch+3)& (0+255),f,b
 11294  00187A  C0E6  F0D4         	movff	??_caltime_to_epoch+2,___lmul@multiplier
 11295  00187E  C0E7  F0D5         	movff	??_caltime_to_epoch+3,___lmul@multiplier+1
 11296  001882  0100               	movlb	0	; () banked
 11297  001884  0E00               	movlw	0
 11298  001886  BFD5               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
 11299  001888  0EFF               	movlw	-1
 11300  00188A  6FD6               	movwf	(___lmul@multiplier+2)& (0+255),b
 11301  00188C  6FD7               	movwf	(___lmul@multiplier+3)& (0+255),b
 11302  00188E  0E80               	movlw	128
 11303  001890  0100               	movlb	0	; () banked
 11304  001892  6FD8               	movwf	___lmul@multiplicand& (0+255),b
 11305  001894  0E51               	movlw	81
 11306  001896  6FD9               	movwf	(___lmul@multiplicand+1)& (0+255),b
 11307  001898  0E01               	movlw	1
 11308  00189A  6FDA               	movwf	(___lmul@multiplicand+2)& (0+255),b
 11309  00189C  0E00               	movlw	0
 11310  00189E  6FDB               	movwf	(___lmul@multiplicand+3)& (0+255),b
 11311  0018A0  EC2D  F01C         	call	___lmul	;wreg free
 11312  0018A4  0100               	movlb	0	; () banked
 11313  0018A6  51D4               	movf	?___lmul& (0+255),w,b
 11314  0018A8  0100               	movlb	0	; () banked
 11315  0018AA  27EA               	addwf	caltime_to_epoch@epoch& (0+255),f,b
 11316  0018AC  0100               	movlb	0	; () banked
 11317  0018AE  51D5               	movf	(?___lmul+1)& (0+255),w,b
 11318  0018B0  0100               	movlb	0	; () banked
 11319  0018B2  23EB               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
 11320  0018B4  0100               	movlb	0	; () banked
 11321  0018B6  51D6               	movf	(?___lmul+2)& (0+255),w,b
 11322  0018B8  0100               	movlb	0	; () banked
 11323  0018BA  23EC               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
 11324  0018BC  0100               	movlb	0	; () banked
 11325  0018BE  51D7               	movf	(?___lmul+3)& (0+255),w,b
 11326  0018C0  0100               	movlb	0	; () banked
 11327  0018C2  23ED               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
 11328                           
 11329                           ;My_header\My_RTCC.h: 222: epoch += ((epoch_t)60*60) * ct->hh;
 11330  0018C4  0100               	movlb	0	; () banked
 11331  0018C6  EE20 F002          	lfsr	2,2
 11332  0018CA  51E0               	movf	caltime_to_epoch@ct& (0+255),w,b
 11333  0018CC  26D9               	addwf	fsr2l,f,c
 11334  0018CE  51E1               	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
 11335  0018D0  22DA               	addwfc	fsr2h,f,c
 11336  0018D2  50DF               	movf	indf2,w,c
 11337  0018D4  0100               	movlb	0	; () banked
 11338  0018D6  6FE4               	movwf	??_caltime_to_epoch& (0+255),b
 11339  0018D8  0100               	movlb	0	; () banked
 11340  0018DA  51E4               	movf	??_caltime_to_epoch& (0+255),w,b
 11341  0018DC  0100               	movlb	0	; () banked
 11342  0018DE  6FD4               	movwf	___lmul@multiplier& (0+255),b
 11343  0018E0  6BD5               	clrf	(___lmul@multiplier+1)& (0+255),b
 11344  0018E2  6BD6               	clrf	(___lmul@multiplier+2)& (0+255),b
 11345  0018E4  6BD7               	clrf	(___lmul@multiplier+3)& (0+255),b
 11346  0018E6  0E10               	movlw	16
 11347  0018E8  0100               	movlb	0	; () banked
 11348  0018EA  6FD8               	movwf	___lmul@multiplicand& (0+255),b
 11349  0018EC  0E0E               	movlw	14
 11350  0018EE  6FD9               	movwf	(___lmul@multiplicand+1)& (0+255),b
 11351  0018F0  0E00               	movlw	0
 11352  0018F2  6FDA               	movwf	(___lmul@multiplicand+2)& (0+255),b
 11353  0018F4  0E00               	movlw	0
 11354  0018F6  6FDB               	movwf	(___lmul@multiplicand+3)& (0+255),b
 11355  0018F8  EC2D  F01C         	call	___lmul	;wreg free
 11356  0018FC  0100               	movlb	0	; () banked
 11357  0018FE  51D4               	movf	?___lmul& (0+255),w,b
 11358  001900  0100               	movlb	0	; () banked
 11359  001902  27EA               	addwf	caltime_to_epoch@epoch& (0+255),f,b
 11360  001904  0100               	movlb	0	; () banked
 11361  001906  51D5               	movf	(?___lmul+1)& (0+255),w,b
 11362  001908  0100               	movlb	0	; () banked
 11363  00190A  23EB               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
 11364  00190C  0100               	movlb	0	; () banked
 11365  00190E  51D6               	movf	(?___lmul+2)& (0+255),w,b
 11366  001910  0100               	movlb	0	; () banked
 11367  001912  23EC               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
 11368  001914  0100               	movlb	0	; () banked
 11369  001916  51D7               	movf	(?___lmul+3)& (0+255),w,b
 11370  001918  0100               	movlb	0	; () banked
 11371  00191A  23ED               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
 11372                           
 11373                           ;My_header\My_RTCC.h: 223: epoch += ((epoch_t)60) * ct->mm;
 11374  00191C  0100               	movlb	0	; () banked
 11375  00191E  EE20 F001          	lfsr	2,1
 11376  001922  51E0               	movf	caltime_to_epoch@ct& (0+255),w,b
 11377  001924  26D9               	addwf	fsr2l,f,c
 11378  001926  51E1               	movf	(caltime_to_epoch@ct+1)& (0+255),w,b
 11379  001928  22DA               	addwfc	fsr2h,f,c
 11380  00192A  50DF               	movf	indf2,w,c
 11381  00192C  0100               	movlb	0	; () banked
 11382  00192E  6FE4               	movwf	??_caltime_to_epoch& (0+255),b
 11383  001930  0100               	movlb	0	; () banked
 11384  001932  51E4               	movf	??_caltime_to_epoch& (0+255),w,b
 11385  001934  0100               	movlb	0	; () banked
 11386  001936  6FD4               	movwf	___lmul@multiplier& (0+255),b
 11387  001938  6BD5               	clrf	(___lmul@multiplier+1)& (0+255),b
 11388  00193A  6BD6               	clrf	(___lmul@multiplier+2)& (0+255),b
 11389  00193C  6BD7               	clrf	(___lmul@multiplier+3)& (0+255),b
 11390  00193E  0E3C               	movlw	60
 11391  001940  0100               	movlb	0	; () banked
 11392  001942  6FD8               	movwf	___lmul@multiplicand& (0+255),b
 11393  001944  0E00               	movlw	0
 11394  001946  6FD9               	movwf	(___lmul@multiplicand+1)& (0+255),b
 11395  001948  0E00               	movlw	0
 11396  00194A  6FDA               	movwf	(___lmul@multiplicand+2)& (0+255),b
 11397  00194C  0E00               	movlw	0
 11398  00194E  6FDB               	movwf	(___lmul@multiplicand+3)& (0+255),b
 11399  001950  EC2D  F01C         	call	___lmul	;wreg free
 11400  001954  0100               	movlb	0	; () banked
 11401  001956  51D4               	movf	?___lmul& (0+255),w,b
 11402  001958  0100               	movlb	0	; () banked
 11403  00195A  27EA               	addwf	caltime_to_epoch@epoch& (0+255),f,b
 11404  00195C  0100               	movlb	0	; () banked
 11405  00195E  51D5               	movf	(?___lmul+1)& (0+255),w,b
 11406  001960  0100               	movlb	0	; () banked
 11407  001962  23EB               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
 11408  001964  0100               	movlb	0	; () banked
 11409  001966  51D6               	movf	(?___lmul+2)& (0+255),w,b
 11410  001968  0100               	movlb	0	; () banked
 11411  00196A  23EC               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
 11412  00196C  0100               	movlb	0	; () banked
 11413  00196E  51D7               	movf	(?___lmul+3)& (0+255),w,b
 11414  001970  0100               	movlb	0	; () banked
 11415  001972  23ED               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
 11416                           
 11417                           ; BSR set to: 0
 11418                           ;My_header\My_RTCC.h: 224: epoch += ct->ss;
 11419  001974  C0E0  FFD9         	movff	caltime_to_epoch@ct,fsr2l
 11420  001978  C0E1  FFDA         	movff	caltime_to_epoch@ct+1,fsr2h
 11421  00197C  50DF               	movf	indf2,w,c
 11422  00197E  0100               	movlb	0	; () banked
 11423  001980  6FE4               	movwf	??_caltime_to_epoch& (0+255),b
 11424  001982  0100               	movlb	0	; () banked
 11425  001984  51E4               	movf	??_caltime_to_epoch& (0+255),w,b
 11426  001986  0100               	movlb	0	; () banked
 11427  001988  27EA               	addwf	caltime_to_epoch@epoch& (0+255),f,b
 11428  00198A  0E00               	movlw	0
 11429  00198C  23EB               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
 11430  00198E  23EC               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
 11431  001990  23ED               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
 11432                           
 11433                           ; BSR set to: 0
 11434                           ;My_header\My_RTCC.h: 226: *ep = epoch;
 11435  001992  C0E2  FFD9         	movff	caltime_to_epoch@ep,fsr2l
 11436  001996  C0E3  FFDA         	movff	caltime_to_epoch@ep+1,fsr2h
 11437  00199A  C0EA  FFDE         	movff	caltime_to_epoch@epoch,postinc2
 11438  00199E  C0EB  FFDE         	movff	caltime_to_epoch@epoch+1,postinc2
 11439  0019A2  C0EC  FFDE         	movff	caltime_to_epoch@epoch+2,postinc2
 11440  0019A6  C0ED  FFDE         	movff	caltime_to_epoch@epoch+3,postinc2
 11441                           
 11442                           ; BSR set to: 0
 11443  0019AA  0012               	return		;funcret
 11444  0019AC                     __end_of_caltime_to_epoch:
 11445                           	opt stack 0
 11446                           tblptru	equ	0xFF8
 11447                           tblptrh	equ	0xFF7
 11448                           tblptrl	equ	0xFF6
 11449                           tablat	equ	0xFF5
 11450                           prodh	equ	0xFF4
 11451                           prodl	equ	0xFF3
 11452                           intcon	equ	0xFF2
 11453                           intcon2	equ	0xFF1
 11454                           postinc0	equ	0xFEE
 11455                           wreg	equ	0xFE8
 11456                           indf1	equ	0xFE7
 11457                           fsr1h	equ	0xFE2
 11458                           fsr1l	equ	0xFE1
 11459                           indf2	equ	0xFDF
 11460                           postinc2	equ	0xFDE
 11461                           postdec2	equ	0xFDD
 11462                           plusw2	equ	0xFDB
 11463                           fsr2h	equ	0xFDA
 11464                           fsr2l	equ	0xFD9
 11465                           status	equ	0xFD8
 11466                           
 11467 ;; *************** function _month_length *****************
 11468 ;; Defined at:
 11469 ;;		line 87 in file "../My_header\My_RTCC.h"
 11470 ;; Parameters:    Size  Location     Type
 11471 ;;  year            1    wreg     unsigned char 
 11472 ;;  month           1    2[BANK0 ] unsigned char 
 11473 ;; Auto vars:     Size  Location     Type
 11474 ;;  year            1    7[BANK0 ] unsigned char 
 11475 ;; Return value:  Size  Location     Type
 11476 ;;                  1    wreg      unsigned char 
 11477 ;; Registers used:
 11478 ;;		wreg, status,2, status,0, cstack
 11479 ;; Tracked objects:
 11480 ;;		On entry : 0/0
 11481 ;;		On exit  : 0/0
 11482 ;;		Unchanged: 0/0
 11483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11484 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11485 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11486 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11487 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11488 ;;Total ram usage:        6 bytes
 11489 ;; Hardware stack levels used:    1
 11490 ;; Hardware stack levels required when called:    5
 11491 ;; This function calls:
 11492 ;;		___awmod
 11493 ;; This function is called by:
 11494 ;;		_epoch_to_caltime
 11495 ;;		_caltime_to_epoch
 11496 ;;		_RTCC_adjust_time_inc
 11497 ;;		_RTCC_adjust_time_dec
 11498 ;; This function uses a non-reentrant model
 11499 ;;
 11500                           
 11501                           	psect	text60
 11502  002C7C                     __ptext60:
 11503                           	opt stack 0
 11504  002C7C                     _month_length:
 11505                           	opt stack 22
 11506                           
 11507                           ; BSR set to: 0
 11508                           ;incstack = 0
 11509                           ;month_length@year stored from wreg
 11510  002C7C  0100               	movlb	0	; () banked
 11511  002C7E  6FCE               	movwf	month_length@year& (0+255),b
 11512                           
 11513                           ;My_header\My_RTCC.h: 88: if (month == 2) return 28 + !(year & 3)-!(year % 100)+!(year %
      +                           400);
 11514  002C80  0E02               	movlw	2
 11515  002C82  0100               	movlb	0	; () banked
 11516  002C84  19C9               	xorwf	month_length@month& (0+255),w,b
 11517  002C86  A4D8               	btfss	status,2,c
 11518  002C88  D036               	goto	l5119
 11519                           
 11520                           ; BSR set to: 0
 11521  002C8A  C0CE  F01F         	movff	month_length@year,___awmod@dividend
 11522  002C8E  6A20               	clrf	___awmod@dividend+1,c
 11523  002C90  0E00               	movlw	0
 11524  002C92  6E22               	movwf	___awmod@divisor+1,c
 11525  002C94  0E64               	movlw	100
 11526  002C96  6E21               	movwf	___awmod@divisor,c
 11527  002C98  EC74  F01B         	call	___awmod	;wreg free
 11528  002C9C  501F               	movf	?___awmod,w,c
 11529  002C9E  1020               	iorwf	?___awmod+1,w,c
 11530  002CA0  A4D8               	btfss	status,2,c
 11531  002CA2  D002               	goto	u5200
 11532  002CA4  0E01               	movlw	1
 11533  002CA6  D001               	goto	u5210
 11534  002CA8                     u5200:
 11535  002CA8  0E00               	movlw	0
 11536  002CAA                     u5210:
 11537  002CAA  0800               	sublw	0
 11538  002CAC  0100               	movlb	0	; () banked
 11539  002CAE  6FCA               	movwf	??_month_length& (0+255),b
 11540  002CB0  C0CE  F01F         	movff	month_length@year,___awmod@dividend
 11541  002CB4  6A20               	clrf	___awmod@dividend+1,c
 11542  002CB6  0E01               	movlw	1
 11543  002CB8  6E22               	movwf	___awmod@divisor+1,c
 11544  002CBA  0E90               	movlw	144
 11545  002CBC  6E21               	movwf	___awmod@divisor,c
 11546  002CBE  EC74  F01B         	call	___awmod	;wreg free
 11547  002CC2  501F               	movf	?___awmod,w,c
 11548  002CC4  1020               	iorwf	?___awmod+1,w,c
 11549  002CC6  A4D8               	btfss	status,2,c
 11550  002CC8  D004               	goto	u5220
 11551  002CCA  0100               	movlb	0	; () banked
 11552  002CCC  6BCB               	clrf	(??_month_length+1)& (0+255),b
 11553  002CCE  2BCB               	incf	(??_month_length+1)& (0+255),f,b
 11554  002CD0  D002               	goto	u5238
 11555  002CD2                     u5220:
 11556  002CD2  0100               	movlb	0	; () banked
 11557  002CD4  6BCB               	clrf	(??_month_length+1)& (0+255),b
 11558  002CD6                     u5238:
 11559  002CD6  C0CE  F0CC         	movff	month_length@year,??_month_length+2
 11560  002CDA  0E03               	movlw	3
 11561  002CDC  0100               	movlb	0	; () banked
 11562  002CDE  17CC               	andwf	(??_month_length+2)& (0+255),f,b
 11563  002CE0  A4D8               	btfss	status,2,c
 11564  002CE2  D002               	goto	u5240
 11565  002CE4  0E01               	movlw	1
 11566  002CE6  D001               	goto	u5250
 11567  002CE8                     u5240:
 11568  002CE8  0E00               	movlw	0
 11569  002CEA                     u5250:
 11570  002CEA  0100               	movlb	0	; () banked
 11571  002CEC  25CB               	addwf	(??_month_length+1)& (0+255),w,b
 11572  002CEE  0100               	movlb	0	; () banked
 11573  002CF0  25CA               	addwf	??_month_length& (0+255),w,b
 11574  002CF2  0F1C               	addlw	28
 11575                           
 11576                           ; BSR set to: 0
 11577                           
 11578                           ; BSR set to: 0
 11579  002CF4  0012               	return	
 11580  002CF6                     l5119:
 11581                           
 11582                           ; BSR set to: 0
 11583                           ;My_header\My_RTCC.h: 89: else return 31 - (((-(month & 1)^month)&13) == 4);
 11584  002CF6  0100               	movlb	0	; () banked
 11585  002CF8  51C9               	movf	month_length@month& (0+255),w,b
 11586  002CFA  0B01               	andlw	1
 11587  002CFC  0100               	movlb	0	; () banked
 11588  002CFE  6FCA               	movwf	??_month_length& (0+255),b
 11589  002D00  6BCB               	clrf	(??_month_length+1)& (0+255),b
 11590  002D02  0100               	movlb	0	; () banked
 11591  002D04  1FCA               	comf	??_month_length& (0+255),f,b
 11592  002D06  1FCB               	comf	(??_month_length+1)& (0+255),f,b
 11593  002D08  4BCA               	infsnz	??_month_length& (0+255),f,b
 11594  002D0A  2BCB               	incf	(??_month_length+1)& (0+255),f,b
 11595  002D0C  0100               	movlb	0	; () banked
 11596  002D0E  51C9               	movf	month_length@month& (0+255),w,b
 11597  002D10  0100               	movlb	0	; () banked
 11598  002D12  6FCC               	movwf	(??_month_length+2)& (0+255),b
 11599  002D14  6BCD               	clrf	(??_month_length+3)& (0+255),b
 11600  002D16  0100               	movlb	0	; () banked
 11601  002D18  51CA               	movf	??_month_length& (0+255),w,b
 11602  002D1A  0100               	movlb	0	; () banked
 11603  002D1C  1BCC               	xorwf	(??_month_length+2)& (0+255),f,b
 11604  002D1E  0100               	movlb	0	; () banked
 11605  002D20  51CB               	movf	(??_month_length+1)& (0+255),w,b
 11606  002D22  0100               	movlb	0	; () banked
 11607  002D24  1BCD               	xorwf	(??_month_length+3)& (0+255),f,b
 11608  002D26  0E0D               	movlw	13
 11609  002D28  0100               	movlb	0	; () banked
 11610  002D2A  17CC               	andwf	(??_month_length+2)& (0+255),f,b
 11611  002D2C  0E00               	movlw	0
 11612  002D2E  17CD               	andwf	(??_month_length+3)& (0+255),f,b
 11613  002D30  0E04               	movlw	4
 11614  002D32  0100               	movlb	0	; () banked
 11615  002D34  19CC               	xorwf	(??_month_length+2)& (0+255),w,b
 11616  002D36  0100               	movlb	0	; () banked
 11617  002D38  11CD               	iorwf	(??_month_length+3)& (0+255),w,b
 11618  002D3A  A4D8               	btfss	status,2,c
 11619  002D3C  D002               	goto	u5260
 11620  002D3E  0E01               	movlw	1
 11621  002D40  D001               	goto	u5270
 11622  002D42                     u5260:
 11623  002D42  0E00               	movlw	0
 11624  002D44                     u5270:
 11625  002D44  0800               	sublw	0
 11626  002D46  0F1F               	addlw	31
 11627                           
 11628                           ; BSR set to: 0
 11629  002D48  0012               	return	
 11630  002D4A                     __end_of_month_length:
 11631                           	opt stack 0
 11632                           tblptru	equ	0xFF8
 11633                           tblptrh	equ	0xFF7
 11634                           tblptrl	equ	0xFF6
 11635                           tablat	equ	0xFF5
 11636                           prodh	equ	0xFF4
 11637                           prodl	equ	0xFF3
 11638                           intcon	equ	0xFF2
 11639                           intcon2	equ	0xFF1
 11640                           postinc0	equ	0xFEE
 11641                           wreg	equ	0xFE8
 11642                           indf1	equ	0xFE7
 11643                           fsr1h	equ	0xFE2
 11644                           fsr1l	equ	0xFE1
 11645                           indf2	equ	0xFDF
 11646                           postinc2	equ	0xFDE
 11647                           postdec2	equ	0xFDD
 11648                           plusw2	equ	0xFDB
 11649                           fsr2h	equ	0xFDA
 11650                           fsr2l	equ	0xFD9
 11651                           status	equ	0xFD8
 11652                           
 11653 ;; *************** function ___awmod *****************
 11654 ;; Defined at:
 11655 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
 11656 ;; Parameters:    Size  Location     Type
 11657 ;;  dividend        2   30[COMRAM] int 
 11658 ;;  divisor         2   32[COMRAM] int 
 11659 ;; Auto vars:     Size  Location     Type
 11660 ;;  sign            1    1[BANK0 ] unsigned char 
 11661 ;;  counter         1    0[BANK0 ] unsigned char 
 11662 ;; Return value:  Size  Location     Type
 11663 ;;                  2   30[COMRAM] int 
 11664 ;; Registers used:
 11665 ;;		wreg, status,2, status,0
 11666 ;; Tracked objects:
 11667 ;;		On entry : 0/0
 11668 ;;		On exit  : 0/0
 11669 ;;		Unchanged: 0/0
 11670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11671 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11672 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11674 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11675 ;;Total ram usage:        6 bytes
 11676 ;; Hardware stack levels used:    1
 11677 ;; Hardware stack levels required when called:    4
 11678 ;; This function calls:
 11679 ;;		Nothing
 11680 ;; This function is called by:
 11681 ;;		_month_length
 11682 ;; This function uses a non-reentrant model
 11683 ;;
 11684                           
 11685                           	psect	text61
 11686  0036E8                     __ptext61:
 11687                           	opt stack 0
 11688  0036E8                     ___awmod:
 11689                           	opt stack 22
 11690                           
 11691                           ; BSR set to: 0
 11692                           ;incstack = 0
 11693  0036E8  0E00               	movlw	0
 11694  0036EA  0100               	movlb	0	; () banked
 11695  0036EC  6FC8               	movwf	___awmod@sign& (0+255),b
 11696                           
 11697                           ; BSR set to: 0
 11698  0036EE  AE20               	btfss	___awmod@dividend+1,7,c
 11699  0036F0  D007               	goto	l5027
 11700                           
 11701                           ; BSR set to: 0
 11702  0036F2  6C1F               	negf	___awmod@dividend,c
 11703  0036F4  1E20               	comf	___awmod@dividend+1,f,c
 11704  0036F6  B0D8               	btfsc	status,0,c
 11705  0036F8  2A20               	incf	___awmod@dividend+1,f,c
 11706                           
 11707                           ; BSR set to: 0
 11708  0036FA  0E01               	movlw	1
 11709  0036FC  0100               	movlb	0	; () banked
 11710  0036FE  6FC8               	movwf	___awmod@sign& (0+255),b
 11711  003700                     l5027:
 11712                           
 11713                           ; BSR set to: 0
 11714  003700  AE22               	btfss	___awmod@divisor+1,7,c
 11715  003702  D004               	goto	l5031
 11716                           
 11717                           ; BSR set to: 0
 11718  003704  6C21               	negf	___awmod@divisor,c
 11719  003706  1E22               	comf	___awmod@divisor+1,f,c
 11720  003708  B0D8               	btfsc	status,0,c
 11721  00370A  2A22               	incf	___awmod@divisor+1,f,c
 11722  00370C                     l5031:
 11723                           
 11724                           ; BSR set to: 0
 11725  00370C  5021               	movf	___awmod@divisor,w,c
 11726  00370E  1022               	iorwf	___awmod@divisor+1,w,c
 11727  003710  B4D8               	btfsc	status,2,c
 11728  003712  D01B               	goto	l5047
 11729                           
 11730                           ; BSR set to: 0
 11731  003714  0E01               	movlw	1
 11732  003716  0100               	movlb	0	; () banked
 11733  003718  6FC7               	movwf	___awmod@counter& (0+255),b
 11734  00371A  D005               	goto	l5037
 11735  00371C                     l5035:
 11736                           
 11737                           ; BSR set to: 0
 11738  00371C  90D8               	bcf	status,0,c
 11739  00371E  3621               	rlcf	___awmod@divisor,f,c
 11740  003720  3622               	rlcf	___awmod@divisor+1,f,c
 11741  003722  0100               	movlb	0	; () banked
 11742  003724  2BC7               	incf	___awmod@counter& (0+255),f,b
 11743  003726                     l5037:
 11744                           
 11745                           ; BSR set to: 0
 11746  003726  AE22               	btfss	___awmod@divisor+1,7,c
 11747  003728  D7F9               	goto	l5035
 11748  00372A                     l5039:
 11749                           
 11750                           ; BSR set to: 0
 11751  00372A  5021               	movf	___awmod@divisor,w,c
 11752  00372C  5C1F               	subwf	___awmod@dividend,w,c
 11753  00372E  5022               	movf	___awmod@divisor+1,w,c
 11754  003730  5820               	subwfb	___awmod@dividend+1,w,c
 11755  003732  A0D8               	btfss	status,0,c
 11756  003734  D004               	goto	l5043
 11757                           
 11758                           ; BSR set to: 0
 11759  003736  5021               	movf	___awmod@divisor,w,c
 11760  003738  5E1F               	subwf	___awmod@dividend,f,c
 11761  00373A  5022               	movf	___awmod@divisor+1,w,c
 11762  00373C  5A20               	subwfb	___awmod@dividend+1,f,c
 11763  00373E                     l5043:
 11764                           
 11765                           ; BSR set to: 0
 11766  00373E  90D8               	bcf	status,0,c
 11767  003740  3222               	rrcf	___awmod@divisor+1,f,c
 11768  003742  3221               	rrcf	___awmod@divisor,f,c
 11769                           
 11770                           ; BSR set to: 0
 11771  003744  0100               	movlb	0	; () banked
 11772  003746  2FC7               	decfsz	___awmod@counter& (0+255),f,b
 11773  003748  D7F0               	goto	l5039
 11774  00374A                     l5047:
 11775                           
 11776                           ; BSR set to: 0
 11777  00374A  0100               	movlb	0	; () banked
 11778  00374C  51C8               	movf	___awmod@sign& (0+255),w,b
 11779  00374E  0100               	movlb	0	; () banked
 11780  003750  B4D8               	btfsc	status,2,c
 11781  003752  D004               	goto	l5051
 11782                           
 11783                           ; BSR set to: 0
 11784  003754  6C1F               	negf	___awmod@dividend,c
 11785  003756  1E20               	comf	___awmod@dividend+1,f,c
 11786  003758  B0D8               	btfsc	status,0,c
 11787  00375A  2A20               	incf	___awmod@dividend+1,f,c
 11788  00375C                     l5051:
 11789                           
 11790                           ; BSR set to: 0
 11791  00375C  C01F  F01F         	movff	___awmod@dividend,?___awmod
 11792  003760  C020  F020         	movff	___awmod@dividend+1,?___awmod+1
 11793  003764  0012               	return	
 11794  003766                     __end_of___awmod:
 11795                           	opt stack 0
 11796                           tblptru	equ	0xFF8
 11797                           tblptrh	equ	0xFF7
 11798                           tblptrl	equ	0xFF6
 11799                           tablat	equ	0xFF5
 11800                           prodh	equ	0xFF4
 11801                           prodl	equ	0xFF3
 11802                           intcon	equ	0xFF2
 11803                           intcon2	equ	0xFF1
 11804                           postinc0	equ	0xFEE
 11805                           wreg	equ	0xFE8
 11806                           indf1	equ	0xFE7
 11807                           fsr1h	equ	0xFE2
 11808                           fsr1l	equ	0xFE1
 11809                           indf2	equ	0xFDF
 11810                           postinc2	equ	0xFDE
 11811                           postdec2	equ	0xFDD
 11812                           plusw2	equ	0xFDB
 11813                           fsr2h	equ	0xFDA
 11814                           fsr2l	equ	0xFD9
 11815                           status	equ	0xFD8
 11816                           
 11817 ;; *************** function ___lmul *****************
 11818 ;; Defined at:
 11819 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul32.c"
 11820 ;; Parameters:    Size  Location     Type
 11821 ;;  multiplier      4   13[BANK0 ] unsigned long 
 11822 ;;  multiplicand    4   17[BANK0 ] unsigned long 
 11823 ;; Auto vars:     Size  Location     Type
 11824 ;;  product         4   21[BANK0 ] unsigned long 
 11825 ;; Return value:  Size  Location     Type
 11826 ;;                  4   13[BANK0 ] unsigned long 
 11827 ;; Registers used:
 11828 ;;		wreg, status,2, status,0
 11829 ;; Tracked objects:
 11830 ;;		On entry : 0/0
 11831 ;;		On exit  : 0/0
 11832 ;;		Unchanged: 0/0
 11833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11834 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11835 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11837 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11838 ;;Total ram usage:       12 bytes
 11839 ;; Hardware stack levels used:    1
 11840 ;; Hardware stack levels required when called:    4
 11841 ;; This function calls:
 11842 ;;		Nothing
 11843 ;; This function is called by:
 11844 ;;		_get_quot_rem
 11845 ;;		_caltime_to_epoch
 11846 ;;		_RTCC_adjust_time_inc
 11847 ;;		_RTCC_adjust_time_dec
 11848 ;; This function uses a non-reentrant model
 11849 ;;
 11850                           
 11851                           	psect	text62
 11852  00385A                     __ptext62:
 11853                           	opt stack 0
 11854  00385A                     ___lmul:
 11855                           	opt stack 23
 11856                           
 11857                           ; BSR set to: 0
 11858                           ;incstack = 0
 11859  00385A  0E00               	movlw	0
 11860  00385C  0100               	movlb	0	; () banked
 11861  00385E  6FDC               	movwf	___lmul@product& (0+255),b
 11862  003860  0E00               	movlw	0
 11863  003862  6FDD               	movwf	(___lmul@product+1)& (0+255),b
 11864  003864  0E00               	movlw	0
 11865  003866  6FDE               	movwf	(___lmul@product+2)& (0+255),b
 11866  003868  0E00               	movlw	0
 11867  00386A  6FDF               	movwf	(___lmul@product+3)& (0+255),b
 11868  00386C                     l4967:
 11869                           
 11870                           ; BSR set to: 0
 11871  00386C  0100               	movlb	0	; () banked
 11872  00386E  A1D4               	btfss	___lmul@multiplier& (0+255),0,b
 11873  003870  D010               	goto	l4971
 11874                           
 11875                           ; BSR set to: 0
 11876  003872  0100               	movlb	0	; () banked
 11877  003874  51D8               	movf	___lmul@multiplicand& (0+255),w,b
 11878  003876  0100               	movlb	0	; () banked
 11879  003878  27DC               	addwf	___lmul@product& (0+255),f,b
 11880  00387A  0100               	movlb	0	; () banked
 11881  00387C  51D9               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 11882  00387E  0100               	movlb	0	; () banked
 11883  003880  23DD               	addwfc	(___lmul@product+1)& (0+255),f,b
 11884  003882  0100               	movlb	0	; () banked
 11885  003884  51DA               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 11886  003886  0100               	movlb	0	; () banked
 11887  003888  23DE               	addwfc	(___lmul@product+2)& (0+255),f,b
 11888  00388A  0100               	movlb	0	; () banked
 11889  00388C  51DB               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 11890  00388E  0100               	movlb	0	; () banked
 11891  003890  23DF               	addwfc	(___lmul@product+3)& (0+255),f,b
 11892  003892                     l4971:
 11893                           
 11894                           ; BSR set to: 0
 11895  003892  0100               	movlb	0	; () banked
 11896  003894  90D8               	bcf	status,0,c
 11897  003896  37D8               	rlcf	___lmul@multiplicand& (0+255),f,b
 11898  003898  37D9               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 11899  00389A  37DA               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 11900  00389C  37DB               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 11901                           
 11902                           ; BSR set to: 0
 11903  00389E  0100               	movlb	0	; () banked
 11904  0038A0  90D8               	bcf	status,0,c
 11905  0038A2  33D7               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 11906  0038A4  33D6               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 11907  0038A6  33D5               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 11908  0038A8  33D4               	rrcf	___lmul@multiplier& (0+255),f,b
 11909  0038AA  0100               	movlb	0	; () banked
 11910  0038AC  51D4               	movf	___lmul@multiplier& (0+255),w,b
 11911  0038AE  0100               	movlb	0	; () banked
 11912  0038B0  11D5               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 11913  0038B2  0100               	movlb	0	; () banked
 11914  0038B4  11D6               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 11915  0038B6  0100               	movlb	0	; () banked
 11916  0038B8  11D7               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 11917  0038BA  A4D8               	btfss	status,2,c
 11918  0038BC  D7D7               	goto	l4967
 11919                           
 11920                           ; BSR set to: 0
 11921  0038BE  C0DC  F0D4         	movff	___lmul@product,?___lmul
 11922  0038C2  C0DD  F0D5         	movff	___lmul@product+1,?___lmul+1
 11923  0038C6  C0DE  F0D6         	movff	___lmul@product+2,?___lmul+2
 11924  0038CA  C0DF  F0D7         	movff	___lmul@product+3,?___lmul+3
 11925                           
 11926                           ; BSR set to: 0
 11927  0038CE  0012               	return		;funcret
 11928  0038D0                     __end_of___lmul:
 11929                           	opt stack 0
 11930                           tblptru	equ	0xFF8
 11931                           tblptrh	equ	0xFF7
 11932                           tblptrl	equ	0xFF6
 11933                           tablat	equ	0xFF5
 11934                           prodh	equ	0xFF4
 11935                           prodl	equ	0xFF3
 11936                           intcon	equ	0xFF2
 11937                           intcon2	equ	0xFF1
 11938                           postinc0	equ	0xFEE
 11939                           wreg	equ	0xFE8
 11940                           indf1	equ	0xFE7
 11941                           fsr1h	equ	0xFE2
 11942                           fsr1l	equ	0xFE1
 11943                           indf2	equ	0xFDF
 11944                           postinc2	equ	0xFDE
 11945                           postdec2	equ	0xFDD
 11946                           plusw2	equ	0xFDB
 11947                           fsr2h	equ	0xFDA
 11948                           fsr2l	equ	0xFD9
 11949                           status	equ	0xFD8
 11950                           
 11951 ;; *************** function _RTCC_to_caltime *****************
 11952 ;; Defined at:
 11953 ;;		line 121 in file "../My_header\My_RTCC.h"
 11954 ;; Parameters:    Size  Location     Type
 11955 ;;  ct              2   32[COMRAM] PTR struct .
 11956 ;;		 -> caltime_now(7), 
 11957 ;; Auto vars:     Size  Location     Type
 11958 ;;  dumy            1    0[BANK0 ] unsigned char 
 11959 ;; Return value:  Size  Location     Type
 11960 ;;		None               void
 11961 ;; Registers used:
 11962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11963 ;; Tracked objects:
 11964 ;;		On entry : 0/0
 11965 ;;		On exit  : 0/0
 11966 ;;		Unchanged: 0/0
 11967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11968 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11969 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11971 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11972 ;;Total ram usage:        3 bytes
 11973 ;; Hardware stack levels used:    1
 11974 ;; Hardware stack levels required when called:    5
 11975 ;; This function calls:
 11976 ;;		_x_to_d
 11977 ;; This function is called by:
 11978 ;;		_RTCC_from_RTCC
 11979 ;; This function uses a non-reentrant model
 11980 ;;
 11981                           
 11982                           	psect	text63
 11983  00325C                     __ptext63:
 11984                           	opt stack 0
 11985  00325C                     _RTCC_to_caltime:
 11986                           	opt stack 23
 11987  00325C                     l397:
 11988  00325C  010F               	movlb	15	; () banked
 11989  00325E  B93F               	btfsc	63,4,b	;volatile
 11990  003260  D7FD               	goto	l397
 11991                           
 11992                           ; BSR set to: 15
 11993                           ;My_header\My_RTCC.h: 124: RTCCFGbits.RTCPTR0 = 1;
 11994  003262  010F               	movlb	15	; () banked
 11995  003264  813F               	bsf	63,0,b	;volatile
 11996                           
 11997                           ;My_header\My_RTCC.h: 125: RTCCFGbits.RTCPTR1 = 1;
 11998  003266  010F               	movlb	15	; () banked
 11999  003268  833F               	bsf	63,1,b	;volatile
 12000                           
 12001                           ; BSR set to: 15
 12002                           ;My_header\My_RTCC.h: 127: ct->YY = x_to_d(RTCVALL);
 12003  00326A  EE20 F006          	lfsr	2,6
 12004  00326E  5021               	movf	RTCC_to_caltime@ct,w,c
 12005  003270  26D9               	addwf	fsr2l,f,c
 12006  003272  5022               	movf	RTCC_to_caltime@ct+1,w,c
 12007  003274  22DA               	addwfc	fsr2h,f,c
 12008  003276  010F               	movlb	15	; () banked
 12009  003278  513A               	movf	58,w,b	;volatile
 12010  00327A  EC78  F020         	call	_x_to_d
 12011  00327E  6EDF               	movwf	indf2,c
 12012                           
 12013                           ;My_header\My_RTCC.h: 128: uint8_t dumy = RTCVALH;
 12014  003280  CF3B F0C7          	movff	3899,RTCC_to_caltime@dumy	;volatile
 12015                           
 12016                           ;My_header\My_RTCC.h: 129: ct->DD = x_to_d(RTCVALL);
 12017  003284  EE20 F004          	lfsr	2,4
 12018  003288  5021               	movf	RTCC_to_caltime@ct,w,c
 12019  00328A  26D9               	addwf	fsr2l,f,c
 12020  00328C  5022               	movf	RTCC_to_caltime@ct+1,w,c
 12021  00328E  22DA               	addwfc	fsr2h,f,c
 12022  003290  010F               	movlb	15	; () banked
 12023  003292  513A               	movf	58,w,b	;volatile
 12024  003294  EC78  F020         	call	_x_to_d
 12025  003298  6EDF               	movwf	indf2,c
 12026                           
 12027                           ;My_header\My_RTCC.h: 130: ct->MM = x_to_d(RTCVALH);
 12028  00329A  EE20 F005          	lfsr	2,5
 12029  00329E  5021               	movf	RTCC_to_caltime@ct,w,c
 12030  0032A0  26D9               	addwf	fsr2l,f,c
 12031  0032A2  5022               	movf	RTCC_to_caltime@ct+1,w,c
 12032  0032A4  22DA               	addwfc	fsr2h,f,c
 12033  0032A6  010F               	movlb	15	; () banked
 12034  0032A8  513B               	movf	59,w,b	;volatile
 12035  0032AA  EC78  F020         	call	_x_to_d
 12036  0032AE  6EDF               	movwf	indf2,c
 12037                           
 12038                           ;My_header\My_RTCC.h: 131: ct->hh = x_to_d(RTCVALL);
 12039  0032B0  EE20 F002          	lfsr	2,2
 12040  0032B4  5021               	movf	RTCC_to_caltime@ct,w,c
 12041  0032B6  26D9               	addwf	fsr2l,f,c
 12042  0032B8  5022               	movf	RTCC_to_caltime@ct+1,w,c
 12043  0032BA  22DA               	addwfc	fsr2h,f,c
 12044  0032BC  010F               	movlb	15	; () banked
 12045  0032BE  513A               	movf	58,w,b	;volatile
 12046  0032C0  EC78  F020         	call	_x_to_d
 12047  0032C4  6EDF               	movwf	indf2,c
 12048                           
 12049                           ;My_header\My_RTCC.h: 132: ct->EE = x_to_d(RTCVALH);
 12050  0032C6  EE20 F003          	lfsr	2,3
 12051  0032CA  5021               	movf	RTCC_to_caltime@ct,w,c
 12052  0032CC  26D9               	addwf	fsr2l,f,c
 12053  0032CE  5022               	movf	RTCC_to_caltime@ct+1,w,c
 12054  0032D0  22DA               	addwfc	fsr2h,f,c
 12055  0032D2  010F               	movlb	15	; () banked
 12056  0032D4  513B               	movf	59,w,b	;volatile
 12057  0032D6  EC78  F020         	call	_x_to_d
 12058  0032DA  6EDF               	movwf	indf2,c
 12059                           
 12060                           ;My_header\My_RTCC.h: 133: ct->ss = x_to_d(RTCVALL);
 12061  0032DC  010F               	movlb	15	; () banked
 12062  0032DE  513A               	movf	58,w,b	;volatile
 12063  0032E0  EC78  F020         	call	_x_to_d
 12064  0032E4  C021  FFD9         	movff	RTCC_to_caltime@ct,fsr2l
 12065  0032E8  C022  FFDA         	movff	RTCC_to_caltime@ct+1,fsr2h
 12066  0032EC  6EDF               	movwf	indf2,c
 12067                           
 12068                           ;My_header\My_RTCC.h: 134: ct->mm = x_to_d(RTCVALH);
 12069  0032EE  EE20 F001          	lfsr	2,1
 12070  0032F2  5021               	movf	RTCC_to_caltime@ct,w,c
 12071  0032F4  26D9               	addwf	fsr2l,f,c
 12072  0032F6  5022               	movf	RTCC_to_caltime@ct+1,w,c
 12073  0032F8  22DA               	addwfc	fsr2h,f,c
 12074  0032FA  010F               	movlb	15	; () banked
 12075  0032FC  513B               	movf	59,w,b	;volatile
 12076  0032FE  EC78  F020         	call	_x_to_d
 12077  003302  6EDF               	movwf	indf2,c
 12078  003304  0012               	return		;funcret
 12079  003306                     __end_of_RTCC_to_caltime:
 12080                           	opt stack 0
 12081                           tblptru	equ	0xFF8
 12082                           tblptrh	equ	0xFF7
 12083                           tblptrl	equ	0xFF6
 12084                           tablat	equ	0xFF5
 12085                           prodh	equ	0xFF4
 12086                           prodl	equ	0xFF3
 12087                           intcon	equ	0xFF2
 12088                           intcon2	equ	0xFF1
 12089                           postinc0	equ	0xFEE
 12090                           wreg	equ	0xFE8
 12091                           indf1	equ	0xFE7
 12092                           fsr1h	equ	0xFE2
 12093                           fsr1l	equ	0xFE1
 12094                           indf2	equ	0xFDF
 12095                           postinc2	equ	0xFDE
 12096                           postdec2	equ	0xFDD
 12097                           plusw2	equ	0xFDB
 12098                           fsr2h	equ	0xFDA
 12099                           fsr2l	equ	0xFD9
 12100                           status	equ	0xFD8
 12101                           
 12102 ;; *************** function _x_to_d *****************
 12103 ;; Defined at:
 12104 ;;		line 81 in file "../My_header\My_RTCC.h"
 12105 ;; Parameters:    Size  Location     Type
 12106 ;;  hex             1    wreg     unsigned char 
 12107 ;; Auto vars:     Size  Location     Type
 12108 ;;  hex             1   31[COMRAM] unsigned char 
 12109 ;; Return value:  Size  Location     Type
 12110 ;;                  1    wreg      unsigned char 
 12111 ;; Registers used:
 12112 ;;		wreg, status,2, status,0, prodl, prodh
 12113 ;; Tracked objects:
 12114 ;;		On entry : 0/0
 12115 ;;		On exit  : 0/0
 12116 ;;		Unchanged: 0/0
 12117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12119 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12120 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12121 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12122 ;;Total ram usage:        2 bytes
 12123 ;; Hardware stack levels used:    1
 12124 ;; Hardware stack levels required when called:    4
 12125 ;; This function calls:
 12126 ;;		Nothing
 12127 ;; This function is called by:
 12128 ;;		_RTCC_to_caltime
 12129 ;; This function uses a non-reentrant model
 12130 ;;
 12131                           
 12132                           	psect	text64
 12133  0040F0                     __ptext64:
 12134                           	opt stack 0
 12135  0040F0                     _x_to_d:
 12136                           	opt stack 23
 12137                           
 12138                           ;incstack = 0
 12139                           ;x_to_d@hex stored from wreg
 12140  0040F0  6E20               	movwf	x_to_d@hex,c
 12141                           
 12142                           ;My_header\My_RTCC.h: 82: return 10 * (0x0F & (hex >> 4)) + (0x0F & hex);
 12143  0040F2  C020  F01F         	movff	x_to_d@hex,??_x_to_d
 12144  0040F6  0E0F               	movlw	15
 12145  0040F8  161F               	andwf	??_x_to_d,f,c
 12146  0040FA  3820               	swapf	x_to_d@hex,w,c
 12147  0040FC  0B0F               	andlw	15
 12148  0040FE  0B0F               	andlw	15
 12149  004100  0D0A               	mullw	10
 12150  004102  50F3               	movf	prodl,w,c
 12151  004104  241F               	addwf	??_x_to_d,w,c
 12152  004106  0012               	return	
 12153  004108                     __end_of_x_to_d:
 12154                           	opt stack 0
 12155                           tblptru	equ	0xFF8
 12156                           tblptrh	equ	0xFF7
 12157                           tblptrl	equ	0xFF6
 12158                           tablat	equ	0xFF5
 12159                           prodh	equ	0xFF4
 12160                           prodl	equ	0xFF3
 12161                           intcon	equ	0xFF2
 12162                           intcon2	equ	0xFF1
 12163                           postinc0	equ	0xFEE
 12164                           wreg	equ	0xFE8
 12165                           indf1	equ	0xFE7
 12166                           fsr1h	equ	0xFE2
 12167                           fsr1l	equ	0xFE1
 12168                           indf2	equ	0xFDF
 12169                           postinc2	equ	0xFDE
 12170                           postdec2	equ	0xFDD
 12171                           plusw2	equ	0xFDB
 12172                           fsr2h	equ	0xFDA
 12173                           fsr2l	equ	0xFD9
 12174                           status	equ	0xFD8
 12175                           
 12176 ;; *************** function _ISR *****************
 12177 ;; Defined at:
 12178 ;;		line 76 in file "main.c"
 12179 ;; Parameters:    Size  Location     Type
 12180 ;;		None
 12181 ;; Auto vars:     Size  Location     Type
 12182 ;;		None
 12183 ;; Return value:  Size  Location     Type
 12184 ;;		None               void
 12185 ;; Registers used:
 12186 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12187 ;; Tracked objects:
 12188 ;;		On entry : 0/0
 12189 ;;		On exit  : 0/0
 12190 ;;		Unchanged: 0/0
 12191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12194 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12195 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12196 ;;Total ram usage:       14 bytes
 12197 ;; Hardware stack levels used:    1
 12198 ;; Hardware stack levels required when called:    3
 12199 ;; This function calls:
 12200 ;;		_UART_ISR
 12201 ;;		_charge_time_count
 12202 ;;		_delay_timer_interrupt
 12203 ;;		_integrating
 12204 ;;		_lchika
 12205 ;; This function is called by:
 12206 ;;		Interrupt level 2
 12207 ;; This function uses a non-reentrant model
 12208 ;;
 12209                           
 12210                           	psect	intcode
 12211  000008                     __pintcode:
 12212                           	opt stack 0
 12213  000008                     _ISR:
 12214                           	opt stack 20
 12215                           
 12216                           ;incstack = 0
 12217  000008  8241               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12218  00000A  CFFA F011          	movff	pclath,??_ISR
 12219  00000E  CFFB F012          	movff	pclatu,??_ISR+1
 12220  000012  CFE9 F013          	movff	fsr0l,??_ISR+2
 12221  000016  CFEA F014          	movff	fsr0h,??_ISR+3
 12222  00001A  CFE1 F015          	movff	fsr1l,??_ISR+4
 12223  00001E  CFE2 F016          	movff	fsr1h,??_ISR+5
 12224  000022  CFD9 F017          	movff	fsr2l,??_ISR+6
 12225  000026  CFDA F018          	movff	fsr2h,??_ISR+7
 12226  00002A  CFF3 F019          	movff	prodl,??_ISR+8
 12227  00002E  CFF4 F01A          	movff	prodh,??_ISR+9
 12228  000032  CFF6 F01B          	movff	tblptrl,??_ISR+10
 12229  000036  CFF7 F01C          	movff	tblptrh,??_ISR+11
 12230  00003A  CFF8 F01D          	movff	tblptru,??_ISR+12
 12231  00003E  CFF5 F01E          	movff	tablat,??_ISR+13
 12232                           
 12233                           ;main.c: 77: UART_ISR();
 12234  000042  ECC7  F01D         	call	_UART_ISR	;wreg free
 12235                           
 12236                           ;main.c: 78: if (INTCONbits.T0IE && INTCONbits.T0IF) {
 12237  000046  BAF2               	btfsc	intcon,5,c	;volatile
 12238  000048  A4F2               	btfss	intcon,2,c	;volatile
 12239  00004A  D013               	goto	i2l4875
 12240                           
 12241                           ;main.c: 79: INTCONbits.T0IF = 0;
 12242  00004C  94F2               	bcf	intcon,2,c	;volatile
 12243                           
 12244                           ;main.c: 80: static uint16_t cnt_t0;
 12245                           ;main.c: 81: if (cnt_t0) {
 12246  00004E  0100               	movlb	0	; () banked
 12247  000050  519A               	movf	ISR@cnt_t0& (0+255),w,b
 12248  000052  0100               	movlb	0	; () banked
 12249  000054  119B               	iorwf	(ISR@cnt_t0+1)& (0+255),w,b
 12250  000056  B4D8               	btfsc	status,2,c
 12251  000058  D005               	goto	i2l4871
 12252                           
 12253                           ; BSR set to: 0
 12254                           ;main.c: 82: cnt_t0--;
 12255  00005A  0100               	movlb	0	; () banked
 12256  00005C  079A               	decf	ISR@cnt_t0& (0+255),f,b
 12257  00005E  A0D8               	btfss	status,0,c
 12258  000060  079B               	decf	(ISR@cnt_t0+1)& (0+255),f,b
 12259                           
 12260                           ;main.c: 83: } else {
 12261  000062  D007               	goto	i2l4875
 12262  000064                     i2l4871:
 12263                           
 12264                           ; BSR set to: 0
 12265                           ;main.c: 84: cnt_t0 = 120;
 12266  000064  0E00               	movlw	0
 12267  000066  0100               	movlb	0	; () banked
 12268  000068  6F9B               	movwf	(ISR@cnt_t0+1)& (0+255),b
 12269  00006A  0E78               	movlw	120
 12270  00006C  6F9A               	movwf	ISR@cnt_t0& (0+255),b
 12271                           
 12272                           ; BSR set to: 0
 12273                           ;main.c: 85: lchika();
 12274  00006E  EC83  F014         	call	_lchika	;wreg free
 12275  000072                     i2l4875:
 12276                           
 12277                           ;main.c: 86: }
 12278                           ;main.c: 87: }
 12279                           ;main.c: 88: if (PIE1bits.TMR1IE && PIR1bits.TMR1IF) {
 12280  000072  B09D               	btfsc	3997,0,c	;volatile
 12281  000074  A09E               	btfss	3998,0,c	;volatile
 12282  000076  D015               	goto	i2l4891
 12283                           
 12284                           ;main.c: 89: PIR1bits.TMR1IF = 0;
 12285  000078  909E               	bcf	3998,0,c	;volatile
 12286                           
 12287                           ;main.c: 90: TMR1H = 0xC0;
 12288  00007A  0EC0               	movlw	192
 12289  00007C  6ECF               	movwf	4047,c	;volatile
 12290                           
 12291                           ;main.c: 91: cut_time_flag = 1;
 12292  00007E  0E01               	movlw	1
 12293  000080  6E37               	movwf	_cut_time_flag,c
 12294                           
 12295                           ;main.c: 92: display_flag = 1;
 12296  000082  0E01               	movlw	1
 12297  000084  6E38               	movwf	_display_flag,c
 12298                           
 12299                           ;main.c: 93: static uint8_t cnt_t1 = 2;
 12300                           ;main.c: 94: if (cnt_t1) {
 12301  000086  503F               	movf	ISR@cnt_t1,w,c
 12302  000088  B4D8               	btfsc	status,2,c
 12303  00008A  D003               	goto	i2l4885
 12304                           
 12305                           ;main.c: 95: cnt_t1 = 0;
 12306  00008C  0E00               	movlw	0
 12307  00008E  6E3F               	movwf	ISR@cnt_t1,c
 12308                           
 12309                           ;main.c: 96: } else {
 12310  000090  D008               	goto	i2l4891
 12311  000092                     i2l4885:
 12312                           
 12313                           ;main.c: 97: cnt_t1 = 1;
 12314  000092  0E01               	movlw	1
 12315  000094  6E3F               	movwf	ISR@cnt_t1,c
 12316                           
 12317                           ;main.c: 98: integrating();
 12318  000096  ECD1  F019         	call	_integrating	;wreg free
 12319                           
 12320                           ;main.c: 99: charge_time_count();
 12321  00009A  EC34  F01E         	call	_charge_time_count	;wreg free
 12322                           
 12323                           ;main.c: 100: display_flag = 1;
 12324  00009E  0E01               	movlw	1
 12325  0000A0  6E38               	movwf	_display_flag,c
 12326  0000A2                     i2l4891:
 12327                           
 12328                           ;main.c: 101: }
 12329                           ;main.c: 102: }
 12330                           ;main.c: 103: if (PIE2bits.TMR3IE && PIR2bits.TMR3IF) {
 12331  0000A2  B2A0               	btfsc	4000,1,c	;volatile
 12332  0000A4  A2A1               	btfss	4001,1,c	;volatile
 12333  0000A6  D009               	goto	i2l771
 12334                           
 12335                           ;main.c: 104: PIR2bits.TMR3IF = 0;
 12336  0000A8  92A1               	bcf	4001,1,c	;volatile
 12337                           
 12338                           ;main.c: 105: ctmu_flag = 1;
 12339  0000AA  0E01               	movlw	1
 12340  0000AC  6E36               	movwf	_ctmu_flag,c
 12341                           
 12342                           ;main.c: 106: delay_timer_interrupt(&delay_display);
 12343  0000AE  0E3C               	movlw	low _delay_display
 12344  0000B0  6E01               	movwf	delay_timer_interrupt@d,c
 12345  0000B2  0E00               	movlw	high _delay_display
 12346  0000B4  6E02               	movwf	delay_timer_interrupt@d+1,c
 12347  0000B6  EC10  F01E         	call	_delay_timer_interrupt	;wreg free
 12348  0000BA                     i2l771:
 12349  0000BA  C01E  FFF5         	movff	??_ISR+13,tablat
 12350  0000BE  C01D  FFF8         	movff	??_ISR+12,tblptru
 12351  0000C2  C01C  FFF7         	movff	??_ISR+11,tblptrh
 12352  0000C6  C01B  FFF6         	movff	??_ISR+10,tblptrl
 12353  0000CA  C01A  FFF4         	movff	??_ISR+9,prodh
 12354  0000CE  C019  FFF3         	movff	??_ISR+8,prodl
 12355  0000D2  C018  FFDA         	movff	??_ISR+7,fsr2h
 12356  0000D6  C017  FFD9         	movff	??_ISR+6,fsr2l
 12357  0000DA  C016  FFE2         	movff	??_ISR+5,fsr1h
 12358  0000DE  C015  FFE1         	movff	??_ISR+4,fsr1l
 12359  0000E2  C014  FFEA         	movff	??_ISR+3,fsr0h
 12360  0000E6  C013  FFE9         	movff	??_ISR+2,fsr0l
 12361  0000EA  C012  FFFB         	movff	??_ISR+1,pclatu
 12362  0000EE  C011  FFFA         	movff	??_ISR,pclath
 12363  0000F2  9241               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12364  0000F4  0011               	retfie		f
 12365  0000F6                     __end_of_ISR:
 12366                           	opt stack 0
 12367                           pclatu	equ	0xFFB
 12368                           pclath	equ	0xFFA
 12369                           tblptru	equ	0xFF8
 12370                           tblptrh	equ	0xFF7
 12371                           tblptrl	equ	0xFF6
 12372                           tablat	equ	0xFF5
 12373                           prodh	equ	0xFF4
 12374                           prodl	equ	0xFF3
 12375                           intcon	equ	0xFF2
 12376                           intcon2	equ	0xFF1
 12377                           postinc0	equ	0xFEE
 12378                           fsr0h	equ	0xFEA
 12379                           fsr0l	equ	0xFE9
 12380                           wreg	equ	0xFE8
 12381                           indf1	equ	0xFE7
 12382                           fsr1h	equ	0xFE2
 12383                           fsr1l	equ	0xFE1
 12384                           indf2	equ	0xFDF
 12385                           postinc2	equ	0xFDE
 12386                           postdec2	equ	0xFDD
 12387                           plusw2	equ	0xFDB
 12388                           fsr2h	equ	0xFDA
 12389                           fsr2l	equ	0xFD9
 12390                           status	equ	0xFD8
 12391                           
 12392 ;; *************** function _lchika *****************
 12393 ;; Defined at:
 12394 ;;		line 117 in file "tasks.h"
 12395 ;; Parameters:    Size  Location     Type
 12396 ;;		None
 12397 ;; Auto vars:     Size  Location     Type
 12398 ;;  i               1   11[COMRAM] unsigned char 
 12399 ;; Return value:  Size  Location     Type
 12400 ;;		None               void
 12401 ;; Registers used:
 12402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12403 ;; Tracked objects:
 12404 ;;		On entry : 0/0
 12405 ;;		On exit  : 0/0
 12406 ;;		Unchanged: 0/0
 12407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12409 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12410 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12411 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12412 ;;Total ram usage:        4 bytes
 12413 ;; Hardware stack levels used:    1
 12414 ;; Hardware stack levels required when called:    1
 12415 ;; This function calls:
 12416 ;;		i2_LED
 12417 ;;		i2___awdiv
 12418 ;;		i2___lwdiv
 12419 ;; This function is called by:
 12420 ;;		_ISR
 12421 ;; This function uses a non-reentrant model
 12422 ;;
 12423                           
 12424                           	psect	text66
 12425  002906                     __ptext66:
 12426                           	opt stack 0
 12427  002906                     _lchika:
 12428                           	opt stack 21
 12429                           
 12430                           ;tasks.h: 118: uint8_t i;
 12431                           ;tasks.h: 119: static uint8_t cnt[3];
 12432                           ;tasks.h: 120: static uint8_t cntf[3];
 12433                           ;tasks.h: 121: for (i = 0; i < 3; i++) {
 12434                           
 12435                           ;incstack = 0
 12436  002906  0E00               	movlw	0
 12437  002908  6E0C               	movwf	lchika@i,c
 12438  00290A                     i2l4505:
 12439  00290A  0E02               	movlw	2
 12440  00290C  640C               	cpfsgt	lchika@i,c
 12441  00290E  D001               	goto	i2l4509
 12442  002910  0012               	return	
 12443  002912                     i2l4509:
 12444                           
 12445                           ;tasks.h: 122: cnt[i]++;
 12446  002912  500C               	movf	lchika@i,w,c
 12447  002914  0D01               	mullw	1
 12448  002916  0E94               	movlw	low lchika@cnt
 12449  002918  24F3               	addwf	prodl,w,c
 12450  00291A  6ED9               	movwf	fsr2l,c
 12451  00291C  0E00               	movlw	high lchika@cnt
 12452  00291E  20F4               	addwfc	prodh,w,c
 12453  002920  6EDA               	movwf	fsr2h,c
 12454  002922  2ADF               	incf	indf2,f,c
 12455                           
 12456                           ;tasks.h: 123: if (cnt[i] % 2 == 1) {
 12457  002924  500C               	movf	lchika@i,w,c
 12458  002926  0D01               	mullw	1
 12459  002928  0E94               	movlw	low lchika@cnt
 12460  00292A  24F3               	addwf	prodl,w,c
 12461  00292C  6ED9               	movwf	fsr2l,c
 12462  00292E  0E00               	movlw	high lchika@cnt
 12463  002930  20F4               	addwfc	prodh,w,c
 12464  002932  6EDA               	movwf	fsr2h,c
 12465  002934  0100               	movlb	0	; () banked
 12466  002936  A0DF               	btfss	indf2,0,c
 12467  002938  D006               	goto	i2l4513
 12468                           
 12469                           ; BSR set to: 0
 12470                           ;tasks.h: 124: LED(i, 0);
 12471  00293A  0E00               	movlw	0
 12472  00293C  6E01               	movwf	i2LED@value,c
 12473  00293E  500C               	movf	lchika@i,w,c
 12474  002940  ECDE  F01E         	call	i2_LED
 12475                           
 12476                           ;tasks.h: 125: } else {
 12477  002944  D05E               	goto	i2l4527
 12478  002946                     i2l4513:
 12479                           
 12480                           ;tasks.h: 126: if (cnt[i] / 2 <= I[i] / 100) {
 12481  002946  500C               	movf	lchika@i,w,c
 12482  002948  0D02               	mullw	2
 12483  00294A  0E23               	movlw	low _I
 12484  00294C  24F3               	addwf	prodl,w,c
 12485  00294E  6ED9               	movwf	fsr2l,c
 12486  002950  0E00               	movlw	high _I
 12487  002952  20F4               	addwfc	prodh,w,c
 12488  002954  6EDA               	movwf	fsr2h,c
 12489  002956  CFDE F001          	movff	postinc2,i2___lwdiv@dividend
 12490  00295A  CFDD F002          	movff	postdec2,i2___lwdiv@dividend+1
 12491  00295E  0E00               	movlw	0
 12492  002960  6E04               	movwf	i2___lwdiv@divisor+1,c
 12493  002962  0E64               	movlw	100
 12494  002964  6E03               	movwf	i2___lwdiv@divisor,c
 12495  002966  EC9E  F01D         	call	i2___lwdiv	;wreg free
 12496  00296A  C001  F009         	movff	?i2___lwdiv,??_lchika
 12497  00296E  C002  F00A         	movff	?i2___lwdiv+1,??_lchika+1
 12498  002972  500C               	movf	lchika@i,w,c
 12499  002974  0D01               	mullw	1
 12500  002976  0E94               	movlw	low lchika@cnt
 12501  002978  24F3               	addwf	prodl,w,c
 12502  00297A  6ED9               	movwf	fsr2l,c
 12503  00297C  0E00               	movlw	high lchika@cnt
 12504  00297E  20F4               	addwfc	prodh,w,c
 12505  002980  6EDA               	movwf	fsr2h,c
 12506  002982  50DF               	movf	indf2,w,c
 12507  002984  6E0B               	movwf	(??_lchika+2)& (0+255),c
 12508  002986  500B               	movf	??_lchika+2,w,c
 12509  002988  6E01               	movwf	i2___awdiv@dividend,c
 12510  00298A  6A02               	clrf	i2___awdiv@dividend+1,c
 12511  00298C  0E00               	movlw	0
 12512  00298E  6E04               	movwf	i2___awdiv@divisor+1,c
 12513  002990  0E02               	movlw	2
 12514  002992  6E03               	movwf	i2___awdiv@divisor,c
 12515  002994  ECF1  F01A         	call	i2___awdiv	;wreg free
 12516  002998  5001               	movf	?i2___awdiv,w,c
 12517  00299A  5C09               	subwf	??_lchika,w,c
 12518  00299C  5002               	movf	?i2___awdiv+1,w,c
 12519  00299E  580A               	subwfb	??_lchika+1,w,c
 12520  0029A0  A0D8               	btfss	status,0,c
 12521  0029A2  D00C               	goto	i2l4519
 12522                           
 12523                           ;tasks.h: 127: LED(i, 1);
 12524  0029A4  0E01               	movlw	1
 12525  0029A6  6E01               	movwf	i2LED@value,c
 12526  0029A8  500C               	movf	lchika@i,w,c
 12527  0029AA  ECDE  F01E         	call	i2_LED
 12528                           
 12529                           ;tasks.h: 128: cntf[i] = 0;
 12530  0029AE  500C               	movf	lchika@i,w,c
 12531  0029B0  0D01               	mullw	1
 12532  0029B2  0E97               	movlw	low lchika@cntf
 12533  0029B4  24F3               	addwf	prodl,w,c
 12534  0029B6  6ED9               	movwf	fsr2l,c
 12535  0029B8  0E00               	movlw	high lchika@cntf
 12536  0029BA  D01F               	goto	L5
 12537  0029BC                     i2l4519:
 12538                           
 12539                           ;tasks.h: 130: cntf[i]++;
 12540  0029BC  500C               	movf	lchika@i,w,c
 12541  0029BE  0D01               	mullw	1
 12542  0029C0  0E97               	movlw	low lchika@cntf
 12543  0029C2  24F3               	addwf	prodl,w,c
 12544  0029C4  6ED9               	movwf	fsr2l,c
 12545  0029C6  0E00               	movlw	high lchika@cntf
 12546  0029C8  20F4               	addwfc	prodh,w,c
 12547  0029CA  6EDA               	movwf	fsr2h,c
 12548  0029CC  2ADF               	incf	indf2,f,c
 12549                           
 12550                           ;tasks.h: 131: LED(i, 0);
 12551  0029CE  0E00               	movlw	0
 12552  0029D0  6E01               	movwf	i2LED@value,c
 12553  0029D2  500C               	movf	lchika@i,w,c
 12554  0029D4  ECDE  F01E         	call	i2_LED
 12555                           
 12556                           ;tasks.h: 132: if (cntf[i] >= 2) {
 12557  0029D8  500C               	movf	lchika@i,w,c
 12558  0029DA  0D01               	mullw	1
 12559  0029DC  0E97               	movlw	low lchika@cntf
 12560  0029DE  24F3               	addwf	prodl,w,c
 12561  0029E0  6ED9               	movwf	fsr2l,c
 12562  0029E2  0E00               	movlw	high lchika@cntf
 12563  0029E4  20F4               	addwfc	prodh,w,c
 12564  0029E6  6EDA               	movwf	fsr2h,c
 12565  0029E8  0E01               	movlw	1
 12566  0029EA  64DF               	cpfsgt	indf2,c
 12567  0029EC  D00A               	goto	i2l4527
 12568                           
 12569                           ;tasks.h: 133: cnt[i] = 0;
 12570  0029EE  500C               	movf	lchika@i,w,c
 12571  0029F0  0D01               	mullw	1
 12572  0029F2  0E94               	movlw	low lchika@cnt
 12573  0029F4  24F3               	addwf	prodl,w,c
 12574  0029F6  6ED9               	movwf	fsr2l,c
 12575  0029F8  0E00               	movlw	high lchika@cnt
 12576  0029FA                     L5:
 12577  0029FA  20F4               	addwfc	prodh,w,c
 12578  0029FC  6EDA               	movwf	fsr2h,c
 12579  0029FE  0E00               	movlw	0
 12580  002A00  6EDF               	movwf	indf2,c
 12581  002A02                     i2l4527:
 12582  002A02  2A0C               	incf	lchika@i,f,c
 12583  002A04  D782               	goto	i2l4505
 12584  002A06                     __end_of_lchika:
 12585                           	opt stack 0
 12586                           pclatu	equ	0xFFB
 12587                           pclath	equ	0xFFA
 12588                           tblptru	equ	0xFF8
 12589                           tblptrh	equ	0xFF7
 12590                           tblptrl	equ	0xFF6
 12591                           tablat	equ	0xFF5
 12592                           prodh	equ	0xFF4
 12593                           prodl	equ	0xFF3
 12594                           intcon	equ	0xFF2
 12595                           intcon2	equ	0xFF1
 12596                           postinc0	equ	0xFEE
 12597                           fsr0h	equ	0xFEA
 12598                           fsr0l	equ	0xFE9
 12599                           wreg	equ	0xFE8
 12600                           indf1	equ	0xFE7
 12601                           fsr1h	equ	0xFE2
 12602                           fsr1l	equ	0xFE1
 12603                           indf2	equ	0xFDF
 12604                           postinc2	equ	0xFDE
 12605                           postdec2	equ	0xFDD
 12606                           plusw2	equ	0xFDB
 12607                           fsr2h	equ	0xFDA
 12608                           fsr2l	equ	0xFD9
 12609                           status	equ	0xFD8
 12610                           
 12611 ;; *************** function i2___lwdiv *****************
 12612 ;; Defined at:
 12613 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
 12614 ;; Parameters:    Size  Location     Type
 12615 ;;  dividend        2    0[COMRAM] unsigned int 
 12616 ;;  divisor         2    2[COMRAM] unsigned int 
 12617 ;; Auto vars:     Size  Location     Type
 12618 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 12619 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 12620 ;; Return value:  Size  Location     Type
 12621 ;;                  2    0[COMRAM] unsigned int 
 12622 ;; Registers used:
 12623 ;;		wreg, status,2, status,0
 12624 ;; Tracked objects:
 12625 ;;		On entry : 0/0
 12626 ;;		On exit  : 0/0
 12627 ;;		Unchanged: 0/0
 12628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12629 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12630 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12632 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12633 ;;Total ram usage:        7 bytes
 12634 ;; Hardware stack levels used:    1
 12635 ;; This function calls:
 12636 ;;		Nothing
 12637 ;; This function is called by:
 12638 ;;		_lchika
 12639 ;; This function uses a non-reentrant model
 12640 ;;
 12641                           
 12642                           	psect	text67
 12643  003B3C                     __ptext67:
 12644                           	opt stack 0
 12645  003B3C                     i2___lwdiv:
 12646                           	opt stack 21
 12647                           
 12648                           ;incstack = 0
 12649  003B3C  0E00               	movlw	0
 12650  003B3E  6E06               	movwf	i2___lwdiv@quotient+1,c
 12651  003B40  0E00               	movlw	0
 12652  003B42  6E05               	movwf	i2___lwdiv@quotient,c
 12653  003B44  5003               	movf	i2___lwdiv@divisor,w,c
 12654  003B46  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 12655  003B48  B4D8               	btfsc	status,2,c
 12656  003B4A  D01C               	goto	i2l1184
 12657  003B4C  0E01               	movlw	1
 12658  003B4E  6E07               	movwf	i2___lwdiv@counter,c
 12659  003B50  D004               	goto	i2l4451
 12660  003B52                     i2l4449:
 12661  003B52  90D8               	bcf	status,0,c
 12662  003B54  3603               	rlcf	i2___lwdiv@divisor,f,c
 12663  003B56  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 12664  003B58  2A07               	incf	i2___lwdiv@counter,f,c
 12665  003B5A                     i2l4451:
 12666  003B5A  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 12667  003B5C  D7FA               	goto	i2l4449
 12668  003B5E                     i2l4453:
 12669  003B5E  90D8               	bcf	status,0,c
 12670  003B60  3605               	rlcf	i2___lwdiv@quotient,f,c
 12671  003B62  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 12672  003B64  5003               	movf	i2___lwdiv@divisor,w,c
 12673  003B66  5C01               	subwf	i2___lwdiv@dividend,w,c
 12674  003B68  5004               	movf	i2___lwdiv@divisor+1,w,c
 12675  003B6A  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 12676  003B6C  A0D8               	btfss	status,0,c
 12677  003B6E  D005               	goto	i2l4461
 12678  003B70  5003               	movf	i2___lwdiv@divisor,w,c
 12679  003B72  5E01               	subwf	i2___lwdiv@dividend,f,c
 12680  003B74  5004               	movf	i2___lwdiv@divisor+1,w,c
 12681  003B76  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 12682  003B78  8005               	bsf	i2___lwdiv@quotient,0,c
 12683  003B7A                     i2l4461:
 12684  003B7A  90D8               	bcf	status,0,c
 12685  003B7C  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 12686  003B7E  3203               	rrcf	i2___lwdiv@divisor,f,c
 12687  003B80  2E07               	decfsz	i2___lwdiv@counter,f,c
 12688  003B82  D7ED               	goto	i2l4453
 12689  003B84                     i2l1184:
 12690  003B84  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 12691  003B88  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 12692  003B8C  0012               	return		;funcret
 12693  003B8E                     __end_ofi2___lwdiv:
 12694                           	opt stack 0
 12695                           pclatu	equ	0xFFB
 12696                           pclath	equ	0xFFA
 12697                           tblptru	equ	0xFF8
 12698                           tblptrh	equ	0xFF7
 12699                           tblptrl	equ	0xFF6
 12700                           tablat	equ	0xFF5
 12701                           prodh	equ	0xFF4
 12702                           prodl	equ	0xFF3
 12703                           intcon	equ	0xFF2
 12704                           intcon2	equ	0xFF1
 12705                           postinc0	equ	0xFEE
 12706                           fsr0h	equ	0xFEA
 12707                           fsr0l	equ	0xFE9
 12708                           wreg	equ	0xFE8
 12709                           indf1	equ	0xFE7
 12710                           fsr1h	equ	0xFE2
 12711                           fsr1l	equ	0xFE1
 12712                           indf2	equ	0xFDF
 12713                           postinc2	equ	0xFDE
 12714                           postdec2	equ	0xFDD
 12715                           plusw2	equ	0xFDB
 12716                           fsr2h	equ	0xFDA
 12717                           fsr2l	equ	0xFD9
 12718                           status	equ	0xFD8
 12719                           
 12720 ;; *************** function i2___awdiv *****************
 12721 ;; Defined at:
 12722 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
 12723 ;; Parameters:    Size  Location     Type
 12724 ;;  dividend        2    0[COMRAM] int 
 12725 ;;  divisor         2    2[COMRAM] int 
 12726 ;; Auto vars:     Size  Location     Type
 12727 ;;  __awdiv         2    6[COMRAM] int 
 12728 ;;  __awdiv         1    5[COMRAM] unsigned char 
 12729 ;;  __awdiv         1    4[COMRAM] unsigned char 
 12730 ;; Return value:  Size  Location     Type
 12731 ;;                  2    0[COMRAM] int 
 12732 ;; Registers used:
 12733 ;;		wreg, status,2, status,0
 12734 ;; Tracked objects:
 12735 ;;		On entry : 0/0
 12736 ;;		On exit  : 0/0
 12737 ;;		Unchanged: 0/0
 12738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12739 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12740 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12742 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12743 ;;Total ram usage:        8 bytes
 12744 ;; Hardware stack levels used:    1
 12745 ;; This function calls:
 12746 ;;		Nothing
 12747 ;; This function is called by:
 12748 ;;		_lchika
 12749 ;; This function uses a non-reentrant model
 12750 ;;
 12751                           
 12752                           	psect	text68
 12753  0035E2                     __ptext68:
 12754                           	opt stack 0
 12755  0035E2                     i2___awdiv:
 12756                           	opt stack 21
 12757                           
 12758                           ;incstack = 0
 12759  0035E2  0E00               	movlw	0
 12760  0035E4  6E06               	movwf	i2___awdiv@sign,c
 12761  0035E6  AE04               	btfss	i2___awdiv@divisor+1,7,c
 12762  0035E8  D006               	goto	i2l4385
 12763  0035EA  6C03               	negf	i2___awdiv@divisor,c
 12764  0035EC  1E04               	comf	i2___awdiv@divisor+1,f,c
 12765  0035EE  B0D8               	btfsc	status,0,c
 12766  0035F0  2A04               	incf	i2___awdiv@divisor+1,f,c
 12767  0035F2  0E01               	movlw	1
 12768  0035F4  6E06               	movwf	i2___awdiv@sign,c
 12769  0035F6                     i2l4385:
 12770  0035F6  AE02               	btfss	i2___awdiv@dividend+1,7,c
 12771  0035F8  D006               	goto	i2l4391
 12772  0035FA  6C01               	negf	i2___awdiv@dividend,c
 12773  0035FC  1E02               	comf	i2___awdiv@dividend+1,f,c
 12774  0035FE  B0D8               	btfsc	status,0,c
 12775  003600  2A02               	incf	i2___awdiv@dividend+1,f,c
 12776  003602  0E01               	movlw	1
 12777  003604  1A06               	xorwf	i2___awdiv@sign,f,c
 12778  003606                     i2l4391:
 12779  003606  0E00               	movlw	0
 12780  003608  6E08               	movwf	i2___awdiv@quotient+1,c
 12781  00360A  0E00               	movlw	0
 12782  00360C  6E07               	movwf	i2___awdiv@quotient,c
 12783  00360E  5003               	movf	i2___awdiv@divisor,w,c
 12784  003610  1004               	iorwf	i2___awdiv@divisor+1,w,c
 12785  003612  B4D8               	btfsc	status,2,c
 12786  003614  D01C               	goto	i2l4413
 12787  003616  0E01               	movlw	1
 12788  003618  6E05               	movwf	i2___awdiv@counter,c
 12789  00361A  D004               	goto	i2l4399
 12790  00361C                     i2l4397:
 12791  00361C  90D8               	bcf	status,0,c
 12792  00361E  3603               	rlcf	i2___awdiv@divisor,f,c
 12793  003620  3604               	rlcf	i2___awdiv@divisor+1,f,c
 12794  003622  2A05               	incf	i2___awdiv@counter,f,c
 12795  003624                     i2l4399:
 12796  003624  AE04               	btfss	i2___awdiv@divisor+1,7,c
 12797  003626  D7FA               	goto	i2l4397
 12798  003628                     i2l4401:
 12799  003628  90D8               	bcf	status,0,c
 12800  00362A  3607               	rlcf	i2___awdiv@quotient,f,c
 12801  00362C  3608               	rlcf	i2___awdiv@quotient+1,f,c
 12802  00362E  5003               	movf	i2___awdiv@divisor,w,c
 12803  003630  5C01               	subwf	i2___awdiv@dividend,w,c
 12804  003632  5004               	movf	i2___awdiv@divisor+1,w,c
 12805  003634  5802               	subwfb	i2___awdiv@dividend+1,w,c
 12806  003636  A0D8               	btfss	status,0,c
 12807  003638  D005               	goto	i2l4409
 12808  00363A  5003               	movf	i2___awdiv@divisor,w,c
 12809  00363C  5E01               	subwf	i2___awdiv@dividend,f,c
 12810  00363E  5004               	movf	i2___awdiv@divisor+1,w,c
 12811  003640  5A02               	subwfb	i2___awdiv@dividend+1,f,c
 12812  003642  8007               	bsf	i2___awdiv@quotient,0,c
 12813  003644                     i2l4409:
 12814  003644  90D8               	bcf	status,0,c
 12815  003646  3204               	rrcf	i2___awdiv@divisor+1,f,c
 12816  003648  3203               	rrcf	i2___awdiv@divisor,f,c
 12817  00364A  2E05               	decfsz	i2___awdiv@counter,f,c
 12818  00364C  D7ED               	goto	i2l4401
 12819  00364E                     i2l4413:
 12820  00364E  5006               	movf	i2___awdiv@sign,w,c
 12821  003650  B4D8               	btfsc	status,2,c
 12822  003652  D004               	goto	i2l4417
 12823  003654  6C07               	negf	i2___awdiv@quotient,c
 12824  003656  1E08               	comf	i2___awdiv@quotient+1,f,c
 12825  003658  B0D8               	btfsc	status,0,c
 12826  00365A  2A08               	incf	i2___awdiv@quotient+1,f,c
 12827  00365C                     i2l4417:
 12828  00365C  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
 12829  003660  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 12830  003664  0012               	return	
 12831  003666                     __end_ofi2___awdiv:
 12832                           	opt stack 0
 12833                           pclatu	equ	0xFFB
 12834                           pclath	equ	0xFFA
 12835                           tblptru	equ	0xFF8
 12836                           tblptrh	equ	0xFF7
 12837                           tblptrl	equ	0xFF6
 12838                           tablat	equ	0xFF5
 12839                           prodh	equ	0xFF4
 12840                           prodl	equ	0xFF3
 12841                           intcon	equ	0xFF2
 12842                           intcon2	equ	0xFF1
 12843                           postinc0	equ	0xFEE
 12844                           fsr0h	equ	0xFEA
 12845                           fsr0l	equ	0xFE9
 12846                           wreg	equ	0xFE8
 12847                           indf1	equ	0xFE7
 12848                           fsr1h	equ	0xFE2
 12849                           fsr1l	equ	0xFE1
 12850                           indf2	equ	0xFDF
 12851                           postinc2	equ	0xFDE
 12852                           postdec2	equ	0xFDD
 12853                           plusw2	equ	0xFDB
 12854                           fsr2h	equ	0xFDA
 12855                           fsr2l	equ	0xFD9
 12856                           status	equ	0xFD8
 12857                           
 12858 ;; *************** function i2_LED *****************
 12859 ;; Defined at:
 12860 ;;		line 76 in file "tasks.h"
 12861 ;; Parameters:    Size  Location     Type
 12862 ;;  b               1    wreg     unsigned char 
 12863 ;;  value           1    0[COMRAM] unsigned char 
 12864 ;; Auto vars:     Size  Location     Type
 12865 ;;  b               1    1[COMRAM] unsigned char 
 12866 ;; Return value:  Size  Location     Type
 12867 ;;		None               void
 12868 ;; Registers used:
 12869 ;;		wreg, status,2, status,0
 12870 ;; Tracked objects:
 12871 ;;		On entry : 0/0
 12872 ;;		On exit  : 0/0
 12873 ;;		Unchanged: 0/0
 12874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12875 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12876 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12878 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12879 ;;Total ram usage:        2 bytes
 12880 ;; Hardware stack levels used:    1
 12881 ;; This function calls:
 12882 ;;		Nothing
 12883 ;; This function is called by:
 12884 ;;		_lchika
 12885 ;; This function uses a non-reentrant model
 12886 ;;
 12887                           
 12888                           	psect	text69
 12889  003DBC                     __ptext69:
 12890                           	opt stack 0
 12891  003DBC                     i2_LED:
 12892                           	opt stack 21
 12893                           
 12894                           ;incstack = 0
 12895                           ;i2LED@b stored from wreg
 12896  003DBC  6E02               	movwf	i2LED@b,c
 12897                           
 12898                           ;tasks.h: 77: switch (b) {
 12899  003DBE  D012               	goto	i2l4375
 12900  003DC0                     i2l621:
 12901                           
 12902                           ;tasks.h: 79: LATC2 = value;
 12903  003DC0  A001               	btfss	i2LED@value,0,c
 12904  003DC2  D002               	goto	i2u418_40
 12905  003DC4  848B               	bsf	3979,2,c	;volatile
 12906  003DC6  0012               	return	
 12907  003DC8                     i2u418_40:
 12908  003DC8  948B               	bcf	3979,2,c	;volatile
 12909                           
 12910                           ;tasks.h: 80: break;
 12911  003DCA  0012               	return	
 12912  003DCC                     i2l623:
 12913                           
 12914                           ;tasks.h: 82: LATB6 = value;
 12915  003DCC  A001               	btfss	i2LED@value,0,c
 12916  003DCE  D002               	goto	i2u420_40
 12917  003DD0  8C8A               	bsf	3978,6,c	;volatile
 12918  003DD2  0012               	return	
 12919  003DD4                     i2u420_40:
 12920  003DD4  9C8A               	bcf	3978,6,c	;volatile
 12921                           
 12922                           ;tasks.h: 83: break;
 12923  003DD6  0012               	return	
 12924  003DD8                     i2l624:
 12925                           
 12926                           ;tasks.h: 85: LATB7 = value;
 12927  003DD8  A001               	btfss	i2LED@value,0,c
 12928  003DDA  D002               	goto	i2u422_40
 12929  003DDC  8E8A               	bsf	3978,7,c	;volatile
 12930  003DDE  0012               	return	
 12931  003DE0                     i2u422_40:
 12932  003DE0  9E8A               	bcf	3978,7,c	;volatile
 12933                           
 12934                           ;tasks.h: 87: }
 12935                           
 12936                           ;tasks.h: 86: break;
 12937  003DE2  0012               	return	
 12938  003DE4                     i2l4375:
 12939  003DE4  5002               	movf	i2LED@b,w,c
 12940                           
 12941                           ; Switch size 1, requested type "space"
 12942                           ; Number of cases is 3, Range of values is 0 to 2
 12943                           ; switch strategies available:
 12944                           ; Name         Instructions Cycles
 12945                           ; simple_byte           10     6 (average)
 12946                           ;	Chosen strategy is simple_byte
 12947  003DE6  0A00               	xorlw	0	; case 0
 12948  003DE8  B4D8               	btfsc	status,2,c
 12949  003DEA  D7EA               	goto	i2l621
 12950  003DEC  0A01               	xorlw	1	; case 1
 12951  003DEE  B4D8               	btfsc	status,2,c
 12952  003DF0  D7ED               	goto	i2l623
 12953  003DF2  0A03               	xorlw	3	; case 2
 12954  003DF4  A4D8               	btfss	status,2,c
 12955  003DF6  0012               	return	
 12956  003DF8  D7EF               	goto	i2l624
 12957  003DFA                     __end_ofi2_LED:
 12958                           	opt stack 0
 12959                           pclatu	equ	0xFFB
 12960                           pclath	equ	0xFFA
 12961                           tblptru	equ	0xFF8
 12962                           tblptrh	equ	0xFF7
 12963                           tblptrl	equ	0xFF6
 12964                           tablat	equ	0xFF5
 12965                           prodh	equ	0xFF4
 12966                           prodl	equ	0xFF3
 12967                           intcon	equ	0xFF2
 12968                           intcon2	equ	0xFF1
 12969                           postinc0	equ	0xFEE
 12970                           fsr0h	equ	0xFEA
 12971                           fsr0l	equ	0xFE9
 12972                           wreg	equ	0xFE8
 12973                           indf1	equ	0xFE7
 12974                           fsr1h	equ	0xFE2
 12975                           fsr1l	equ	0xFE1
 12976                           indf2	equ	0xFDF
 12977                           postinc2	equ	0xFDE
 12978                           postdec2	equ	0xFDD
 12979                           plusw2	equ	0xFDB
 12980                           fsr2h	equ	0xFDA
 12981                           fsr2l	equ	0xFD9
 12982                           status	equ	0xFD8
 12983                           
 12984 ;; *************** function _integrating *****************
 12985 ;; Defined at:
 12986 ;;		line 156 in file "tasks.h"
 12987 ;; Parameters:    Size  Location     Type
 12988 ;;		None
 12989 ;; Auto vars:     Size  Location     Type
 12990 ;;  port            1   15[COMRAM] unsigned char 
 12991 ;; Return value:  Size  Location     Type
 12992 ;;		None               void
 12993 ;; Registers used:
 12994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12995 ;; Tracked objects:
 12996 ;;		On entry : 0/0
 12997 ;;		On exit  : 0/0
 12998 ;;		Unchanged: 0/0
 12999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13001 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13002 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13003 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13004 ;;Total ram usage:        3 bytes
 13005 ;; Hardware stack levels used:    1
 13006 ;; Hardware stack levels required when called:    1
 13007 ;; This function calls:
 13008 ;;		i2___lldiv
 13009 ;; This function is called by:
 13010 ;;		_ISR
 13011 ;; This function uses a non-reentrant model
 13012 ;;
 13013                           
 13014                           	psect	text70
 13015  0033A2                     __ptext70:
 13016                           	opt stack 0
 13017  0033A2                     _integrating:
 13018                           	opt stack 21
 13019                           
 13020                           ;tasks.h: 157: for (uint8_t port = 0; port < 3; port++) {
 13021                           
 13022                           ;incstack = 0
 13023  0033A2  0E00               	movlw	0
 13024  0033A4  6E10               	movwf	integrating@port,c
 13025  0033A6                     i2l4533:
 13026  0033A6  0E02               	movlw	2
 13027  0033A8  6410               	cpfsgt	integrating@port,c
 13028  0033AA  D001               	goto	i2l4537
 13029  0033AC  0012               	return	
 13030  0033AE                     i2l4537:
 13031                           
 13032                           ;tasks.h: 158: s[port] += I[port];
 13033  0033AE  5010               	movf	integrating@port,w,c
 13034  0033B0  0D02               	mullw	2
 13035  0033B2  0E23               	movlw	low _I
 13036  0033B4  24F3               	addwf	prodl,w,c
 13037  0033B6  6ED9               	movwf	fsr2l,c
 13038  0033B8  0E00               	movlw	high _I
 13039  0033BA  20F4               	addwfc	prodh,w,c
 13040  0033BC  6EDA               	movwf	fsr2h,c
 13041  0033BE  CFDE F00E          	movff	postinc2,??_integrating
 13042  0033C2  CFDD F00F          	movff	postdec2,??_integrating+1
 13043  0033C6  5010               	movf	integrating@port,w,c
 13044  0033C8  0D04               	mullw	4
 13045  0033CA  0E78               	movlw	low _s
 13046  0033CC  24F3               	addwf	prodl,w,c
 13047  0033CE  6ED9               	movwf	fsr2l,c
 13048  0033D0  0E00               	movlw	high _s
 13049  0033D2  20F4               	addwfc	prodh,w,c
 13050  0033D4  6EDA               	movwf	fsr2h,c
 13051  0033D6  500E               	movf	??_integrating,w,c
 13052  0033D8  26DE               	addwf	postinc2,f,c
 13053  0033DA  500F               	movf	??_integrating+1,w,c
 13054  0033DC  22DE               	addwfc	postinc2,f,c
 13055  0033DE  0E00               	movlw	0
 13056  0033E0  22DE               	addwfc	postinc2,f,c
 13057  0033E2  22DE               	addwfc	postinc2,f,c
 13058                           
 13059                           ;tasks.h: 159: S[port] = s[port] / 3600;
 13060  0033E4  5010               	movf	integrating@port,w,c
 13061  0033E6  0D04               	mullw	4
 13062  0033E8  0E78               	movlw	low _s
 13063  0033EA  24F3               	addwf	prodl,w,c
 13064  0033EC  6ED9               	movwf	fsr2l,c
 13065  0033EE  0E00               	movlw	high _s
 13066  0033F0  20F4               	addwfc	prodh,w,c
 13067  0033F2  6EDA               	movwf	fsr2h,c
 13068  0033F4  CFDE F001          	movff	postinc2,i2___lldiv@dividend
 13069  0033F8  CFDE F002          	movff	postinc2,i2___lldiv@dividend+1
 13070  0033FC  CFDE F003          	movff	postinc2,i2___lldiv@dividend+2
 13071  003400  CFDE F004          	movff	postinc2,i2___lldiv@dividend+3
 13072  003404  0E10               	movlw	16
 13073  003406  6E05               	movwf	i2___lldiv@divisor,c
 13074  003408  0E0E               	movlw	14
 13075  00340A  6E06               	movwf	i2___lldiv@divisor+1,c
 13076  00340C  0E00               	movlw	0
 13077  00340E  6E07               	movwf	i2___lldiv@divisor+2,c
 13078  003410  0E00               	movlw	0
 13079  003412  6E08               	movwf	i2___lldiv@divisor+3,c
 13080  003414  EC33  F01B         	call	i2___lldiv	;wreg free
 13081  003418  5010               	movf	integrating@port,w,c
 13082  00341A  0D04               	mullw	4
 13083  00341C  0E60               	movlw	low _S
 13084  00341E  24F3               	addwf	prodl,w,c
 13085  003420  6ED9               	movwf	fsr2l,c
 13086  003422  0E00               	movlw	high _S
 13087  003424  20F4               	addwfc	prodh,w,c
 13088  003426  6EDA               	movwf	fsr2h,c
 13089  003428  C001  FFDE         	movff	?i2___lldiv,postinc2
 13090  00342C  C002  FFDE         	movff	?i2___lldiv+1,postinc2
 13091  003430  C003  FFDE         	movff	?i2___lldiv+2,postinc2
 13092  003434  C004  FFDE         	movff	?i2___lldiv+3,postinc2
 13093  003438  2A10               	incf	integrating@port,f,c
 13094  00343A  D7B5               	goto	i2l4533
 13095  00343C                     __end_of_integrating:
 13096                           	opt stack 0
 13097                           pclatu	equ	0xFFB
 13098                           pclath	equ	0xFFA
 13099                           tblptru	equ	0xFF8
 13100                           tblptrh	equ	0xFF7
 13101                           tblptrl	equ	0xFF6
 13102                           tablat	equ	0xFF5
 13103                           prodh	equ	0xFF4
 13104                           prodl	equ	0xFF3
 13105                           intcon	equ	0xFF2
 13106                           intcon2	equ	0xFF1
 13107                           postinc0	equ	0xFEE
 13108                           fsr0h	equ	0xFEA
 13109                           fsr0l	equ	0xFE9
 13110                           wreg	equ	0xFE8
 13111                           indf1	equ	0xFE7
 13112                           fsr1h	equ	0xFE2
 13113                           fsr1l	equ	0xFE1
 13114                           indf2	equ	0xFDF
 13115                           postinc2	equ	0xFDE
 13116                           postdec2	equ	0xFDD
 13117                           plusw2	equ	0xFDB
 13118                           fsr2h	equ	0xFDA
 13119                           fsr2l	equ	0xFD9
 13120                           status	equ	0xFD8
 13121                           
 13122 ;; *************** function i2___lldiv *****************
 13123 ;; Defined at:
 13124 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lldiv.c"
 13125 ;; Parameters:    Size  Location     Type
 13126 ;;  dividend        4    0[COMRAM] unsigned long 
 13127 ;;  divisor         4    4[COMRAM] unsigned long 
 13128 ;; Auto vars:     Size  Location     Type
 13129 ;;  __lldiv         4    8[COMRAM] unsigned long 
 13130 ;;  __lldiv         1   12[COMRAM] unsigned char 
 13131 ;; Return value:  Size  Location     Type
 13132 ;;                  4    0[COMRAM] unsigned long 
 13133 ;; Registers used:
 13134 ;;		wreg, status,2, status,0
 13135 ;; Tracked objects:
 13136 ;;		On entry : 0/0
 13137 ;;		On exit  : 0/0
 13138 ;;		Unchanged: 0/0
 13139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13140 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13141 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13143 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13144 ;;Total ram usage:       13 bytes
 13145 ;; Hardware stack levels used:    1
 13146 ;; This function calls:
 13147 ;;		Nothing
 13148 ;; This function is called by:
 13149 ;;		_integrating
 13150 ;; This function uses a non-reentrant model
 13151 ;;
 13152                           
 13153                           	psect	text71
 13154  003666                     __ptext71:
 13155                           	opt stack 0
 13156  003666                     i2___lldiv:
 13157                           	opt stack 21
 13158                           
 13159                           ;incstack = 0
 13160  003666  0E00               	movlw	0
 13161  003668  6E09               	movwf	i2___lldiv@quotient,c
 13162  00366A  0E00               	movlw	0
 13163  00366C  6E0A               	movwf	i2___lldiv@quotient+1,c
 13164  00366E  0E00               	movlw	0
 13165  003670  6E0B               	movwf	i2___lldiv@quotient+2,c
 13166  003672  0E00               	movlw	0
 13167  003674  6E0C               	movwf	i2___lldiv@quotient+3,c
 13168  003676  5005               	movf	i2___lldiv@divisor,w,c
 13169  003678  1006               	iorwf	i2___lldiv@divisor+1,w,c
 13170  00367A  1007               	iorwf	i2___lldiv@divisor+2,w,c
 13171  00367C  1008               	iorwf	i2___lldiv@divisor+3,w,c
 13172  00367E  B4D8               	btfsc	status,2,c
 13173  003680  D02A               	goto	i2l1131
 13174  003682  0E01               	movlw	1
 13175  003684  6E0D               	movwf	i2___lldiv@counter,c
 13176  003686  D006               	goto	i2l4429
 13177  003688                     i2l4427:
 13178  003688  90D8               	bcf	status,0,c
 13179  00368A  3605               	rlcf	i2___lldiv@divisor,f,c
 13180  00368C  3606               	rlcf	i2___lldiv@divisor+1,f,c
 13181  00368E  3607               	rlcf	i2___lldiv@divisor+2,f,c
 13182  003690  3608               	rlcf	i2___lldiv@divisor+3,f,c
 13183  003692  2A0D               	incf	i2___lldiv@counter,f,c
 13184  003694                     i2l4429:
 13185  003694  AE08               	btfss	i2___lldiv@divisor+3,7,c
 13186  003696  D7F8               	goto	i2l4427
 13187  003698                     i2l4431:
 13188  003698  90D8               	bcf	status,0,c
 13189  00369A  3609               	rlcf	i2___lldiv@quotient,f,c
 13190  00369C  360A               	rlcf	i2___lldiv@quotient+1,f,c
 13191  00369E  360B               	rlcf	i2___lldiv@quotient+2,f,c
 13192  0036A0  360C               	rlcf	i2___lldiv@quotient+3,f,c
 13193  0036A2  5005               	movf	i2___lldiv@divisor,w,c
 13194  0036A4  5C01               	subwf	i2___lldiv@dividend,w,c
 13195  0036A6  5006               	movf	i2___lldiv@divisor+1,w,c
 13196  0036A8  5802               	subwfb	i2___lldiv@dividend+1,w,c
 13197  0036AA  5007               	movf	i2___lldiv@divisor+2,w,c
 13198  0036AC  5803               	subwfb	i2___lldiv@dividend+2,w,c
 13199  0036AE  5008               	movf	i2___lldiv@divisor+3,w,c
 13200  0036B0  5804               	subwfb	i2___lldiv@dividend+3,w,c
 13201  0036B2  A0D8               	btfss	status,0,c
 13202  0036B4  D009               	goto	i2l4439
 13203  0036B6  5005               	movf	i2___lldiv@divisor,w,c
 13204  0036B8  5E01               	subwf	i2___lldiv@dividend,f,c
 13205  0036BA  5006               	movf	i2___lldiv@divisor+1,w,c
 13206  0036BC  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 13207  0036BE  5007               	movf	i2___lldiv@divisor+2,w,c
 13208  0036C0  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 13209  0036C2  5008               	movf	i2___lldiv@divisor+3,w,c
 13210  0036C4  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 13211  0036C6  8009               	bsf	i2___lldiv@quotient,0,c
 13212  0036C8                     i2l4439:
 13213  0036C8  90D8               	bcf	status,0,c
 13214  0036CA  3208               	rrcf	i2___lldiv@divisor+3,f,c
 13215  0036CC  3207               	rrcf	i2___lldiv@divisor+2,f,c
 13216  0036CE  3206               	rrcf	i2___lldiv@divisor+1,f,c
 13217  0036D0  3205               	rrcf	i2___lldiv@divisor,f,c
 13218  0036D2  2E0D               	decfsz	i2___lldiv@counter,f,c
 13219  0036D4  D7E1               	goto	i2l4431
 13220  0036D6                     i2l1131:
 13221  0036D6  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 13222  0036DA  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 13223  0036DE  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 13224  0036E2  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 13225  0036E6  0012               	return		;funcret
 13226  0036E8                     __end_ofi2___lldiv:
 13227                           	opt stack 0
 13228                           pclatu	equ	0xFFB
 13229                           pclath	equ	0xFFA
 13230                           tblptru	equ	0xFF8
 13231                           tblptrh	equ	0xFF7
 13232                           tblptrl	equ	0xFF6
 13233                           tablat	equ	0xFF5
 13234                           prodh	equ	0xFF4
 13235                           prodl	equ	0xFF3
 13236                           intcon	equ	0xFF2
 13237                           intcon2	equ	0xFF1
 13238                           postinc0	equ	0xFEE
 13239                           fsr0h	equ	0xFEA
 13240                           fsr0l	equ	0xFE9
 13241                           wreg	equ	0xFE8
 13242                           indf1	equ	0xFE7
 13243                           fsr1h	equ	0xFE2
 13244                           fsr1l	equ	0xFE1
 13245                           indf2	equ	0xFDF
 13246                           postinc2	equ	0xFDE
 13247                           postdec2	equ	0xFDD
 13248                           plusw2	equ	0xFDB
 13249                           fsr2h	equ	0xFDA
 13250                           fsr2l	equ	0xFD9
 13251                           status	equ	0xFD8
 13252                           
 13253 ;; *************** function _delay_timer_interrupt *****************
 13254 ;; Defined at:
 13255 ;;		line 344 in file "../My_header\My_header.h"
 13256 ;; Parameters:    Size  Location     Type
 13257 ;;  d               2    0[COMRAM] PTR struct Delay
 13258 ;;		 -> delay_display(3), 
 13259 ;; Auto vars:     Size  Location     Type
 13260 ;;		None
 13261 ;; Return value:  Size  Location     Type
 13262 ;;		None               void
 13263 ;; Registers used:
 13264 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13265 ;; Tracked objects:
 13266 ;;		On entry : 0/0
 13267 ;;		On exit  : 0/0
 13268 ;;		Unchanged: 0/0
 13269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13270 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13272 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13273 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13274 ;;Total ram usage:        4 bytes
 13275 ;; Hardware stack levels used:    1
 13276 ;; This function calls:
 13277 ;;		Nothing
 13278 ;; This function is called by:
 13279 ;;		_ISR
 13280 ;; This function uses a non-reentrant model
 13281 ;;
 13282                           
 13283                           	psect	text72
 13284  003C20                     __ptext72:
 13285                           	opt stack 0
 13286  003C20                     _delay_timer_interrupt:
 13287                           	opt stack 22
 13288                           
 13289                           ;My_header\My_header.h: 345: if (d->cnt == 1)d->flag = 1;
 13290                           
 13291                           ;incstack = 0
 13292  003C20  EE20 F001          	lfsr	2,1
 13293  003C24  5001               	movf	delay_timer_interrupt@d,w,c
 13294  003C26  26D9               	addwf	fsr2l,f,c
 13295  003C28  5002               	movf	delay_timer_interrupt@d+1,w,c
 13296  003C2A  22DA               	addwfc	fsr2h,f,c
 13297  003C2C  04DE               	decf	postinc2,w,c
 13298  003C2E  10DE               	iorwf	postinc2,w,c
 13299  003C30  A4D8               	btfss	status,2,c
 13300  003C32  D006               	goto	i2l4487
 13301  003C34  C001  FFD9         	movff	delay_timer_interrupt@d,fsr2l
 13302  003C38  C002  FFDA         	movff	delay_timer_interrupt@d+1,fsr2h
 13303  003C3C  0E01               	movlw	1
 13304  003C3E  6EDF               	movwf	indf2,c
 13305  003C40                     i2l4487:
 13306                           
 13307                           ;My_header\My_header.h: 346: if (d->cnt)d->cnt--;
 13308  003C40  EE20 F001          	lfsr	2,1
 13309  003C44  5001               	movf	delay_timer_interrupt@d,w,c
 13310  003C46  26D9               	addwf	fsr2l,f,c
 13311  003C48  5002               	movf	delay_timer_interrupt@d+1,w,c
 13312  003C4A  22DA               	addwfc	fsr2h,f,c
 13313  003C4C  50DE               	movf	postinc2,w,c
 13314  003C4E  10DE               	iorwf	postinc2,w,c
 13315  003C50  B4D8               	btfsc	status,2,c
 13316  003C52  0012               	return	
 13317  003C54  EE20 F001          	lfsr	2,1
 13318  003C58  5001               	movf	delay_timer_interrupt@d,w,c
 13319  003C5A  26D9               	addwf	fsr2l,f,c
 13320  003C5C  5002               	movf	delay_timer_interrupt@d+1,w,c
 13321  003C5E  22DA               	addwfc	fsr2h,f,c
 13322  003C60  06DE               	decf	postinc2,f,c
 13323  003C62  0E00               	movlw	0
 13324  003C64  5ADD               	subwfb	postdec2,f,c
 13325  003C66  0012               	return	
 13326  003C68                     __end_of_delay_timer_interrupt:
 13327                           	opt stack 0
 13328                           pclatu	equ	0xFFB
 13329                           pclath	equ	0xFFA
 13330                           tblptru	equ	0xFF8
 13331                           tblptrh	equ	0xFF7
 13332                           tblptrl	equ	0xFF6
 13333                           tablat	equ	0xFF5
 13334                           prodh	equ	0xFF4
 13335                           prodl	equ	0xFF3
 13336                           intcon	equ	0xFF2
 13337                           intcon2	equ	0xFF1
 13338                           postinc0	equ	0xFEE
 13339                           fsr0h	equ	0xFEA
 13340                           fsr0l	equ	0xFE9
 13341                           wreg	equ	0xFE8
 13342                           indf1	equ	0xFE7
 13343                           fsr1h	equ	0xFE2
 13344                           fsr1l	equ	0xFE1
 13345                           indf2	equ	0xFDF
 13346                           postinc2	equ	0xFDE
 13347                           postdec2	equ	0xFDD
 13348                           plusw2	equ	0xFDB
 13349                           fsr2h	equ	0xFDA
 13350                           fsr2l	equ	0xFD9
 13351                           status	equ	0xFD8
 13352                           
 13353 ;; *************** function _charge_time_count *****************
 13354 ;; Defined at:
 13355 ;;		line 163 in file "tasks.h"
 13356 ;; Parameters:    Size  Location     Type
 13357 ;;		None
 13358 ;; Auto vars:     Size  Location     Type
 13359 ;;  i               1    2[COMRAM] unsigned char 
 13360 ;; Return value:  Size  Location     Type
 13361 ;;		None               void
 13362 ;; Registers used:
 13363 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13364 ;; Tracked objects:
 13365 ;;		On entry : 0/0
 13366 ;;		On exit  : 0/0
 13367 ;;		Unchanged: 0/0
 13368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13370 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13371 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13372 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13373 ;;Total ram usage:        3 bytes
 13374 ;; Hardware stack levels used:    1
 13375 ;; This function calls:
 13376 ;;		Nothing
 13377 ;; This function is called by:
 13378 ;;		_ISR
 13379 ;; This function uses a non-reentrant model
 13380 ;;
 13381                           
 13382                           	psect	text73
 13383  003C68                     __ptext73:
 13384                           	opt stack 0
 13385  003C68                     _charge_time_count:
 13386                           	opt stack 22
 13387                           
 13388                           ;tasks.h: 164: uint8_t i;
 13389                           ;tasks.h: 165: for (i = 0; i < 3; i++) {
 13390                           
 13391                           ;incstack = 0
 13392  003C68  0E00               	movlw	0
 13393  003C6A  6E03               	movwf	charge_time_count@i,c
 13394  003C6C                     i2l4547:
 13395  003C6C  0E02               	movlw	2
 13396  003C6E  6403               	cpfsgt	charge_time_count@i,c
 13397  003C70  D001               	goto	i2l4551
 13398  003C72  0012               	return	
 13399  003C74                     i2l4551:
 13400                           
 13401                           ;tasks.h: 166: if (I[i] > 100)charge_time[i]++;
 13402  003C74  5003               	movf	charge_time_count@i,w,c
 13403  003C76  0D02               	mullw	2
 13404  003C78  0E23               	movlw	low _I
 13405  003C7A  24F3               	addwf	prodl,w,c
 13406  003C7C  6ED9               	movwf	fsr2l,c
 13407  003C7E  0E00               	movlw	high _I
 13408  003C80  20F4               	addwfc	prodh,w,c
 13409  003C82  6EDA               	movwf	fsr2h,c
 13410  003C84  0E01               	movlw	1
 13411  003C86  50DB               	movf	plusw2,w,c
 13412  003C88  E104               	bnz	i2u453_40
 13413  003C8A  0E65               	movlw	101
 13414  003C8C  5CDE               	subwf	postinc2,w,c
 13415  003C8E  A0D8               	btfss	status,0,c
 13416  003C90  D00D               	goto	i2l4555
 13417  003C92                     i2u453_40:
 13418  003C92  5003               	movf	charge_time_count@i,w,c
 13419  003C94  0D04               	mullw	4
 13420  003C96  0E6C               	movlw	low _charge_time
 13421  003C98  24F3               	addwf	prodl,w,c
 13422  003C9A  6ED9               	movwf	fsr2l,c
 13423  003C9C  0E00               	movlw	high _charge_time
 13424  003C9E  20F4               	addwfc	prodh,w,c
 13425  003CA0  6EDA               	movwf	fsr2h,c
 13426  003CA2  2ADE               	incf	postinc2,f,c
 13427  003CA4  0E00               	movlw	0
 13428  003CA6  22DE               	addwfc	postinc2,f,c
 13429  003CA8  22DE               	addwfc	postinc2,f,c
 13430  003CAA  22DE               	addwfc	postinc2,f,c
 13431  003CAC                     i2l4555:
 13432  003CAC  2A03               	incf	charge_time_count@i,f,c
 13433  003CAE  D7DE               	goto	i2l4547
 13434  003CB0                     __end_of_charge_time_count:
 13435                           	opt stack 0
 13436                           pclatu	equ	0xFFB
 13437                           pclath	equ	0xFFA
 13438                           tblptru	equ	0xFF8
 13439                           tblptrh	equ	0xFF7
 13440                           tblptrl	equ	0xFF6
 13441                           tablat	equ	0xFF5
 13442                           prodh	equ	0xFF4
 13443                           prodl	equ	0xFF3
 13444                           intcon	equ	0xFF2
 13445                           intcon2	equ	0xFF1
 13446                           postinc0	equ	0xFEE
 13447                           fsr0h	equ	0xFEA
 13448                           fsr0l	equ	0xFE9
 13449                           wreg	equ	0xFE8
 13450                           indf1	equ	0xFE7
 13451                           fsr1h	equ	0xFE2
 13452                           fsr1l	equ	0xFE1
 13453                           indf2	equ	0xFDF
 13454                           postinc2	equ	0xFDE
 13455                           postdec2	equ	0xFDD
 13456                           plusw2	equ	0xFDB
 13457                           fsr2h	equ	0xFDA
 13458                           fsr2l	equ	0xFD9
 13459                           status	equ	0xFD8
 13460                           
 13461 ;; *************** function _UART_ISR *****************
 13462 ;; Defined at:
 13463 ;;		line 208 in file "../My_header\My_header.h"
 13464 ;; Parameters:    Size  Location     Type
 13465 ;;		None
 13466 ;; Auto vars:     Size  Location     Type
 13467 ;;  ascii           1   15[COMRAM] unsigned char 
 13468 ;; Return value:  Size  Location     Type
 13469 ;;		None               void
 13470 ;; Registers used:
 13471 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13472 ;; Tracked objects:
 13473 ;;		On entry : 0/0
 13474 ;;		On exit  : 0/0
 13475 ;;		Unchanged: 0/0
 13476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13478 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13480 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13481 ;;Total ram usage:        1 bytes
 13482 ;; Hardware stack levels used:    1
 13483 ;; Hardware stack levels required when called:    2
 13484 ;; This function calls:
 13485 ;;		_ringbuf_num
 13486 ;;		_ringbuf_pop
 13487 ;;		_ringbuf_put
 13488 ;; This function is called by:
 13489 ;;		_ISR
 13490 ;; This function uses a non-reentrant model
 13491 ;;
 13492                           
 13493                           	psect	text74
 13494  003B8E                     __ptext74:
 13495                           	opt stack 0
 13496  003B8E                     _UART_ISR:
 13497                           	opt stack 20
 13498                           
 13499                           ;My_header\My_header.h: 209: if (PIE1bits.TXIE && PIR1bits.TXIF) {
 13500                           
 13501                           ;incstack = 0
 13502  003B8E  B89D               	btfsc	3997,4,c	;volatile
 13503  003B90  A89E               	btfss	3998,4,c	;volatile
 13504  003B92  D013               	goto	i2l207
 13505                           
 13506                           ;My_header\My_header.h: 210: if (ringbuf_num(&tx_buf)) {
 13507  003B94  0EC8               	movlw	low _tx_buf
 13508  003B96  6E01               	movwf	ringbuf_num@rb,c
 13509  003B98  0E01               	movlw	high _tx_buf
 13510  003B9A  6E02               	movwf	ringbuf_num@rb+1,c
 13511  003B9C  ECC5  F017         	call	_ringbuf_num	;wreg free
 13512  003BA0  5001               	movf	?_ringbuf_num,w,c
 13513  003BA2  1002               	iorwf	?_ringbuf_num+1,w,c
 13514  003BA4  B4D8               	btfsc	status,2,c
 13515  003BA6  D008               	goto	i2l208
 13516                           
 13517                           ;My_header\My_header.h: 211: TXREG1 = ringbuf_pop(&tx_buf);
 13518  003BA8  0EC8               	movlw	low _tx_buf
 13519  003BAA  6E09               	movwf	ringbuf_pop@rb,c
 13520  003BAC  0E01               	movlw	high _tx_buf
 13521  003BAE  6E0A               	movwf	ringbuf_pop@rb+1,c
 13522  003BB0  ECD8  F018         	call	_ringbuf_pop	;wreg free
 13523  003BB4  6EAE               	movwf	4014,c	;volatile
 13524                           
 13525                           ;My_header\My_header.h: 212: } else {
 13526  003BB6  D001               	goto	i2l207
 13527  003BB8                     i2l208:
 13528                           
 13529                           ;My_header\My_header.h: 213: PIE1bits.TXIE = 0;
 13530  003BB8  989D               	bcf	3997,4,c	;volatile
 13531  003BBA                     i2l207:
 13532                           
 13533                           ;My_header\My_header.h: 214: }
 13534                           ;My_header\My_header.h: 215: }
 13535                           ;My_header\My_header.h: 216: if (PIR1bits.RCIF && PIE1bits.RCIE) {
 13536  003BBA  AA9E               	btfss	3998,5,c	;volatile
 13537  003BBC  0012               	return	
 13538  003BBE  AA9D               	btfss	3997,5,c	;volatile
 13539  003BC0  0012               	return	
 13540                           
 13541                           ;My_header\My_header.h: 217: char ascii = RCREG1;
 13542  003BC2  CFAF F010          	movff	4015,UART_ISR@ascii	;volatile
 13543                           
 13544                           ;My_header\My_header.h: 218: ringbuf_put(&rx_buf, ascii);
 13545  003BC6  0EA4               	movlw	low _rx_buf
 13546  003BC8  6E09               	movwf	ringbuf_put@rb,c
 13547  003BCA  0E00               	movlw	high _rx_buf
 13548  003BCC  6E0A               	movwf	ringbuf_put@rb+1,c
 13549  003BCE  C010  F00B         	movff	UART_ISR@ascii,ringbuf_put@asciicode
 13550  003BD2  EC23  F018         	call	_ringbuf_put	;wreg free
 13551  003BD6  0012               	return	
 13552  003BD8                     __end_of_UART_ISR:
 13553                           	opt stack 0
 13554                           pclatu	equ	0xFFB
 13555                           pclath	equ	0xFFA
 13556                           tblptru	equ	0xFF8
 13557                           tblptrh	equ	0xFF7
 13558                           tblptrl	equ	0xFF6
 13559                           tablat	equ	0xFF5
 13560                           prodh	equ	0xFF4
 13561                           prodl	equ	0xFF3
 13562                           intcon	equ	0xFF2
 13563                           intcon2	equ	0xFF1
 13564                           postinc0	equ	0xFEE
 13565                           fsr0h	equ	0xFEA
 13566                           fsr0l	equ	0xFE9
 13567                           wreg	equ	0xFE8
 13568                           indf1	equ	0xFE7
 13569                           fsr1h	equ	0xFE2
 13570                           fsr1l	equ	0xFE1
 13571                           indf2	equ	0xFDF
 13572                           postinc2	equ	0xFDE
 13573                           postdec2	equ	0xFDD
 13574                           plusw2	equ	0xFDB
 13575                           fsr2h	equ	0xFDA
 13576                           fsr2l	equ	0xFD9
 13577                           status	equ	0xFD8
 13578                           
 13579 ;; *************** function _ringbuf_put *****************
 13580 ;; Defined at:
 13581 ;;		line 39 in file "../My_header\My_ringbuf.h"
 13582 ;; Parameters:    Size  Location     Type
 13583 ;;  rb              2    8[COMRAM] PTR struct ringbuf
 13584 ;;		 -> rx_buf(8), tx_buf(8), 
 13585 ;;  asciicode       1   10[COMRAM] unsigned char 
 13586 ;; Auto vars:     Size  Location     Type
 13587 ;;		None
 13588 ;; Return value:  Size  Location     Type
 13589 ;;		None               void
 13590 ;; Registers used:
 13591 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13592 ;; Tracked objects:
 13593 ;;		On entry : 0/0
 13594 ;;		On exit  : 0/0
 13595 ;;		Unchanged: 0/0
 13596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13597 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13599 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13600 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13601 ;;Total ram usage:        7 bytes
 13602 ;; Hardware stack levels used:    1
 13603 ;; Hardware stack levels required when called:    1
 13604 ;; This function calls:
 13605 ;;		_ringbuf_num
 13606 ;; This function is called by:
 13607 ;;		_UART_ISR
 13608 ;;		_ringbuf_put_num
 13609 ;;		_ringbuf_put_str
 13610 ;;		_tx_send
 13611 ;;		_tx_sends
 13612 ;; This function uses a non-reentrant model
 13613 ;;
 13614                           
 13615                           	psect	text75
 13616  003046                     __ptext75:
 13617                           	opt stack 0
 13618  003046                     _ringbuf_put:
 13619                           	opt stack 20
 13620                           
 13621                           ;My_header\My_ringbuf.h: 40: if (ringbuf_num(rb) < rb->size) {
 13622                           
 13623                           ;incstack = 0
 13624  003046  C009  F001         	movff	ringbuf_put@rb,ringbuf_num@rb
 13625  00304A  C00A  F002         	movff	ringbuf_put@rb+1,ringbuf_num@rb+1
 13626  00304E  ECC5  F017         	call	_ringbuf_num	;wreg free
 13627  003052  EE20 F002          	lfsr	2,2
 13628  003056  5009               	movf	ringbuf_put@rb,w,c
 13629  003058  26D9               	addwf	fsr2l,f,c
 13630  00305A  500A               	movf	ringbuf_put@rb+1,w,c
 13631  00305C  22DA               	addwfc	fsr2h,f,c
 13632  00305E  50DE               	movf	postinc2,w,c
 13633  003060  5C01               	subwf	?_ringbuf_num,w,c
 13634  003062  50DE               	movf	postinc2,w,c
 13635  003064  5802               	subwfb	?_ringbuf_num+1,w,c
 13636  003066  B0D8               	btfsc	status,0,c
 13637  003068  0012               	return	
 13638                           
 13639                           ;My_header\My_ringbuf.h: 41: rb->buf[rb->head] = asciicode;
 13640  00306A  EE20 F004          	lfsr	2,4
 13641  00306E  5009               	movf	ringbuf_put@rb,w,c
 13642  003070  26D9               	addwf	fsr2l,f,c
 13643  003072  500A               	movf	ringbuf_put@rb+1,w,c
 13644  003074  22DA               	addwfc	fsr2h,f,c
 13645  003076  CFDE F00C          	movff	postinc2,??_ringbuf_put
 13646  00307A  CFDD F00D          	movff	postdec2,??_ringbuf_put+1
 13647  00307E  C009  FFD9         	movff	ringbuf_put@rb,fsr2l
 13648  003082  C00A  FFDA         	movff	ringbuf_put@rb+1,fsr2h
 13649  003086  CFDE F00E          	movff	postinc2,??_ringbuf_put+2
 13650  00308A  CFDD F00F          	movff	postdec2,??_ringbuf_put+3
 13651  00308E  500C               	movf	??_ringbuf_put,w,c
 13652  003090  240E               	addwf	??_ringbuf_put+2,w,c
 13653  003092  6ED9               	movwf	fsr2l,c
 13654  003094  500D               	movf	??_ringbuf_put+1,w,c
 13655  003096  200F               	addwfc	??_ringbuf_put+3,w,c
 13656  003098  6EDA               	movwf	fsr2h,c
 13657  00309A  C00B  FFDF         	movff	ringbuf_put@asciicode,indf2
 13658                           
 13659                           ;My_header\My_ringbuf.h: 42: if (rb->head + 1 < rb->size) rb->head++;
 13660  00309E  EE20 F002          	lfsr	2,2
 13661  0030A2  5009               	movf	ringbuf_put@rb,w,c
 13662  0030A4  26D9               	addwf	fsr2l,f,c
 13663  0030A6  500A               	movf	ringbuf_put@rb+1,w,c
 13664  0030A8  22DA               	addwfc	fsr2h,f,c
 13665  0030AA  EE10 F004          	lfsr	1,4
 13666  0030AE  5009               	movf	ringbuf_put@rb,w,c
 13667  0030B0  26E1               	addwf	fsr1l,f,c
 13668  0030B2  500A               	movf	ringbuf_put@rb+1,w,c
 13669  0030B4  22E2               	addwfc	fsr1h,f,c
 13670  0030B6  CFE6 F00E          	movff	postinc1,??_ringbuf_put+2
 13671  0030BA  CFE5 F00F          	movff	postdec1,??_ringbuf_put+3
 13672  0030BE  0E01               	movlw	1
 13673  0030C0  260E               	addwf	??_ringbuf_put+2,f,c
 13674  0030C2  0E00               	movlw	0
 13675  0030C4  220F               	addwfc	??_ringbuf_put+3,f,c
 13676  0030C6  50DE               	movf	postinc2,w,c
 13677  0030C8  5C0E               	subwf	??_ringbuf_put+2,w,c
 13678  0030CA  50DE               	movf	postinc2,w,c
 13679  0030CC  580F               	subwfb	??_ringbuf_put+3,w,c
 13680  0030CE  B0D8               	btfsc	status,0,c
 13681  0030D0  D00A               	goto	i2l4073
 13682  0030D2  EE20 F004          	lfsr	2,4
 13683  0030D6  5009               	movf	ringbuf_put@rb,w,c
 13684  0030D8  26D9               	addwf	fsr2l,f,c
 13685  0030DA  500A               	movf	ringbuf_put@rb+1,w,c
 13686  0030DC  22DA               	addwfc	fsr2h,f,c
 13687  0030DE  2ADE               	incf	postinc2,f,c
 13688  0030E0  0E00               	movlw	0
 13689  0030E2  22DD               	addwfc	postdec2,f,c
 13690  0030E4  0012               	return	
 13691  0030E6                     i2l4073:
 13692                           
 13693                           ;My_header\My_ringbuf.h: 43: else rb->head = 0;
 13694  0030E6  EE20 F004          	lfsr	2,4
 13695  0030EA  5009               	movf	ringbuf_put@rb,w,c
 13696  0030EC  26D9               	addwf	fsr2l,f,c
 13697  0030EE  500A               	movf	ringbuf_put@rb+1,w,c
 13698  0030F0  22DA               	addwfc	fsr2h,f,c
 13699  0030F2  0E00               	movlw	0
 13700  0030F4  6EDE               	movwf	postinc2,c
 13701  0030F6  0E00               	movlw	0
 13702  0030F8  6EDD               	movwf	postdec2,c
 13703  0030FA  0012               	return	
 13704  0030FC                     __end_of_ringbuf_put:
 13705                           	opt stack 0
 13706                           pclatu	equ	0xFFB
 13707                           pclath	equ	0xFFA
 13708                           tblptru	equ	0xFF8
 13709                           tblptrh	equ	0xFF7
 13710                           tblptrl	equ	0xFF6
 13711                           tablat	equ	0xFF5
 13712                           prodh	equ	0xFF4
 13713                           prodl	equ	0xFF3
 13714                           intcon	equ	0xFF2
 13715                           intcon2	equ	0xFF1
 13716                           postinc0	equ	0xFEE
 13717                           fsr0h	equ	0xFEA
 13718                           fsr0l	equ	0xFE9
 13719                           wreg	equ	0xFE8
 13720                           indf1	equ	0xFE7
 13721                           postinc1	equ	0xFE6
 13722                           postdec1	equ	0xFE5
 13723                           fsr1h	equ	0xFE2
 13724                           fsr1l	equ	0xFE1
 13725                           indf2	equ	0xFDF
 13726                           postinc2	equ	0xFDE
 13727                           postdec2	equ	0xFDD
 13728                           plusw2	equ	0xFDB
 13729                           fsr2h	equ	0xFDA
 13730                           fsr2l	equ	0xFD9
 13731                           status	equ	0xFD8
 13732                           
 13733 ;; *************** function _ringbuf_pop *****************
 13734 ;; Defined at:
 13735 ;;		line 64 in file "../My_header\My_ringbuf.h"
 13736 ;; Parameters:    Size  Location     Type
 13737 ;;  rb              2    8[COMRAM] PTR struct ringbuf
 13738 ;;		 -> tx_buf(8), 
 13739 ;; Auto vars:     Size  Location     Type
 13740 ;;  ret             1   14[COMRAM] unsigned char 
 13741 ;; Return value:  Size  Location     Type
 13742 ;;                  1    wreg      unsigned char 
 13743 ;; Registers used:
 13744 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13745 ;; Tracked objects:
 13746 ;;		On entry : 0/0
 13747 ;;		On exit  : 0/0
 13748 ;;		Unchanged: 0/0
 13749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13750 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13751 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13752 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13753 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13754 ;;Total ram usage:        7 bytes
 13755 ;; Hardware stack levels used:    1
 13756 ;; Hardware stack levels required when called:    1
 13757 ;; This function calls:
 13758 ;;		_ringbuf_num
 13759 ;; This function is called by:
 13760 ;;		_UART_ISR
 13761 ;; This function uses a non-reentrant model
 13762 ;;
 13763                           
 13764                           	psect	text76
 13765  0031B0                     __ptext76:
 13766                           	opt stack 0
 13767  0031B0                     _ringbuf_pop:
 13768                           	opt stack 20
 13769                           
 13770                           ;My_header\My_ringbuf.h: 65: if (ringbuf_num(rb)) {
 13771                           
 13772                           ;incstack = 0
 13773  0031B0  C009  F001         	movff	ringbuf_pop@rb,ringbuf_num@rb
 13774  0031B4  C00A  F002         	movff	ringbuf_pop@rb+1,ringbuf_num@rb+1
 13775  0031B8  ECC5  F017         	call	_ringbuf_num	;wreg free
 13776  0031BC  5001               	movf	?_ringbuf_num,w,c
 13777  0031BE  1002               	iorwf	?_ringbuf_num+1,w,c
 13778  0031C0  B4D8               	btfsc	status,2,c
 13779  0031C2  D04A               	goto	i2l4091
 13780                           
 13781                           ;My_header\My_ringbuf.h: 66: char ret = rb->buf[rb->tail];
 13782  0031C4  EE20 F006          	lfsr	2,6
 13783  0031C8  5009               	movf	ringbuf_pop@rb,w,c
 13784  0031CA  26D9               	addwf	fsr2l,f,c
 13785  0031CC  500A               	movf	ringbuf_pop@rb+1,w,c
 13786  0031CE  22DA               	addwfc	fsr2h,f,c
 13787  0031D0  CFDE F00B          	movff	postinc2,??_ringbuf_pop
 13788  0031D4  CFDD F00C          	movff	postdec2,??_ringbuf_pop+1
 13789  0031D8  C009  FFD9         	movff	ringbuf_pop@rb,fsr2l
 13790  0031DC  C00A  FFDA         	movff	ringbuf_pop@rb+1,fsr2h
 13791  0031E0  CFDE F00D          	movff	postinc2,??_ringbuf_pop+2
 13792  0031E4  CFDD F00E          	movff	postdec2,??_ringbuf_pop+3
 13793  0031E8  500B               	movf	??_ringbuf_pop,w,c
 13794  0031EA  240D               	addwf	??_ringbuf_pop+2,w,c
 13795  0031EC  6ED9               	movwf	fsr2l,c
 13796  0031EE  500C               	movf	??_ringbuf_pop+1,w,c
 13797  0031F0  200E               	addwfc	??_ringbuf_pop+3,w,c
 13798  0031F2  6EDA               	movwf	fsr2h,c
 13799  0031F4  50DF               	movf	indf2,w,c
 13800  0031F6  6E0F               	movwf	ringbuf_pop@ret,c
 13801                           
 13802                           ;My_header\My_ringbuf.h: 67: if (rb->tail + 1 < rb->size) {
 13803  0031F8  EE20 F002          	lfsr	2,2
 13804  0031FC  5009               	movf	ringbuf_pop@rb,w,c
 13805  0031FE  26D9               	addwf	fsr2l,f,c
 13806  003200  500A               	movf	ringbuf_pop@rb+1,w,c
 13807  003202  22DA               	addwfc	fsr2h,f,c
 13808  003204  EE10 F006          	lfsr	1,6
 13809  003208  5009               	movf	ringbuf_pop@rb,w,c
 13810  00320A  26E1               	addwf	fsr1l,f,c
 13811  00320C  500A               	movf	ringbuf_pop@rb+1,w,c
 13812  00320E  22E2               	addwfc	fsr1h,f,c
 13813  003210  CFE6 F00D          	movff	postinc1,??_ringbuf_pop+2
 13814  003214  CFE5 F00E          	movff	postdec1,??_ringbuf_pop+3
 13815  003218  0E01               	movlw	1
 13816  00321A  260D               	addwf	??_ringbuf_pop+2,f,c
 13817  00321C  0E00               	movlw	0
 13818  00321E  220E               	addwfc	??_ringbuf_pop+3,f,c
 13819  003220  50DE               	movf	postinc2,w,c
 13820  003222  5C0D               	subwf	??_ringbuf_pop+2,w,c
 13821  003224  50DE               	movf	postinc2,w,c
 13822  003226  580E               	subwfb	??_ringbuf_pop+3,w,c
 13823  003228  B0D8               	btfsc	status,0,c
 13824  00322A  D00A               	goto	i2l4083
 13825                           
 13826                           ;My_header\My_ringbuf.h: 68: rb->tail++;
 13827  00322C  EE20 F006          	lfsr	2,6
 13828  003230  5009               	movf	ringbuf_pop@rb,w,c
 13829  003232  26D9               	addwf	fsr2l,f,c
 13830  003234  500A               	movf	ringbuf_pop@rb+1,w,c
 13831  003236  22DA               	addwfc	fsr2h,f,c
 13832  003238  2ADE               	incf	postinc2,f,c
 13833  00323A  0E00               	movlw	0
 13834  00323C  22DD               	addwfc	postdec2,f,c
 13835                           
 13836                           ;My_header\My_ringbuf.h: 69: } else {
 13837  00323E  D00A               	goto	i2l4085
 13838  003240                     i2l4083:
 13839                           
 13840                           ;My_header\My_ringbuf.h: 70: rb->tail = 0;
 13841  003240  EE20 F006          	lfsr	2,6
 13842  003244  5009               	movf	ringbuf_pop@rb,w,c
 13843  003246  26D9               	addwf	fsr2l,f,c
 13844  003248  500A               	movf	ringbuf_pop@rb+1,w,c
 13845  00324A  22DA               	addwfc	fsr2h,f,c
 13846  00324C  0E00               	movlw	0
 13847  00324E  6EDE               	movwf	postinc2,c
 13848  003250  0E00               	movlw	0
 13849  003252  6EDD               	movwf	postdec2,c
 13850  003254                     i2l4085:
 13851                           
 13852                           ;My_header\My_ringbuf.h: 71: }
 13853                           ;My_header\My_ringbuf.h: 72: return ret;
 13854  003254  500F               	movf	ringbuf_pop@ret,w,c
 13855                           
 13856                           ;My_header\My_ringbuf.h: 73: } else {
 13857  003256  0012               	return	
 13858  003258                     i2l4091:
 13859                           
 13860                           ;My_header\My_ringbuf.h: 74: return 0;
 13861  003258  0E00               	movlw	0
 13862  00325A  0012               	return	
 13863  00325C                     __end_of_ringbuf_pop:
 13864                           	opt stack 0
 13865                           pclatu	equ	0xFFB
 13866                           pclath	equ	0xFFA
 13867                           tblptru	equ	0xFF8
 13868                           tblptrh	equ	0xFF7
 13869                           tblptrl	equ	0xFF6
 13870                           tablat	equ	0xFF5
 13871                           prodh	equ	0xFF4
 13872                           prodl	equ	0xFF3
 13873                           intcon	equ	0xFF2
 13874                           intcon2	equ	0xFF1
 13875                           postinc0	equ	0xFEE
 13876                           fsr0h	equ	0xFEA
 13877                           fsr0l	equ	0xFE9
 13878                           wreg	equ	0xFE8
 13879                           indf1	equ	0xFE7
 13880                           postinc1	equ	0xFE6
 13881                           postdec1	equ	0xFE5
 13882                           fsr1h	equ	0xFE2
 13883                           fsr1l	equ	0xFE1
 13884                           indf2	equ	0xFDF
 13885                           postinc2	equ	0xFDE
 13886                           postdec2	equ	0xFDD
 13887                           plusw2	equ	0xFDB
 13888                           fsr2h	equ	0xFDA
 13889                           fsr2l	equ	0xFD9
 13890                           status	equ	0xFD8
 13891                           
 13892 ;; *************** function _ringbuf_num *****************
 13893 ;; Defined at:
 13894 ;;		line 31 in file "../My_header\My_ringbuf.h"
 13895 ;; Parameters:    Size  Location     Type
 13896 ;;  rb              2    0[COMRAM] PTR struct ringbuf
 13897 ;;		 -> rx_buf(8), tx_buf(8), 
 13898 ;; Auto vars:     Size  Location     Type
 13899 ;;		None
 13900 ;; Return value:  Size  Location     Type
 13901 ;;                  2    0[COMRAM] unsigned int 
 13902 ;; Registers used:
 13903 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13904 ;; Tracked objects:
 13905 ;;		On entry : 0/0
 13906 ;;		On exit  : 0/0
 13907 ;;		Unchanged: 0/0
 13908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13909 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13911 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13912 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13913 ;;Total ram usage:        8 bytes
 13914 ;; Hardware stack levels used:    1
 13915 ;; This function calls:
 13916 ;;		Nothing
 13917 ;; This function is called by:
 13918 ;;		_ringbuf_put
 13919 ;;		_ringbuf_pop
 13920 ;;		_UART_ISR
 13921 ;;		_ringbuf_backspace
 13922 ;; This function uses a non-reentrant model
 13923 ;;
 13924                           
 13925                           	psect	text77
 13926  002F8A                     __ptext77:
 13927                           	opt stack 0
 13928  002F8A                     _ringbuf_num:
 13929                           	opt stack 20
 13930                           
 13931                           ;My_header\My_ringbuf.h: 32: if (rb->head >= rb->tail) {
 13932                           
 13933                           ;incstack = 0
 13934  002F8A  EE20 F006          	lfsr	2,6
 13935  002F8E  5001               	movf	ringbuf_num@rb,w,c
 13936  002F90  26D9               	addwf	fsr2l,f,c
 13937  002F92  5002               	movf	ringbuf_num@rb+1,w,c
 13938  002F94  22DA               	addwfc	fsr2h,f,c
 13939  002F96  EE10 F004          	lfsr	1,4
 13940  002F9A  5001               	movf	ringbuf_num@rb,w,c
 13941  002F9C  26E1               	addwf	fsr1l,f,c
 13942  002F9E  5002               	movf	ringbuf_num@rb+1,w,c
 13943  002FA0  22E2               	addwfc	fsr1h,f,c
 13944  002FA2  50DE               	movf	postinc2,w,c
 13945  002FA4  5CE6               	subwf	postinc1,w,c
 13946  002FA6  50DE               	movf	postinc2,w,c
 13947  002FA8  58E6               	subwfb	postinc1,w,c
 13948  002FAA  A0D8               	btfss	status,0,c
 13949  002FAC  D01F               	goto	i2l3611
 13950                           
 13951                           ;My_header\My_ringbuf.h: 33: return (rb->head - rb->tail);
 13952  002FAE  EE20 F004          	lfsr	2,4
 13953  002FB2  5001               	movf	ringbuf_num@rb,w,c
 13954  002FB4  26D9               	addwf	fsr2l,f,c
 13955  002FB6  5002               	movf	ringbuf_num@rb+1,w,c
 13956  002FB8  22DA               	addwfc	fsr2h,f,c
 13957  002FBA  CFDE F003          	movff	postinc2,??_ringbuf_num
 13958  002FBE  CFDD F004          	movff	postdec2,??_ringbuf_num+1
 13959  002FC2  EE20 F006          	lfsr	2,6
 13960  002FC6  5001               	movf	ringbuf_num@rb,w,c
 13961  002FC8  26D9               	addwf	fsr2l,f,c
 13962  002FCA  5002               	movf	ringbuf_num@rb+1,w,c
 13963  002FCC  22DA               	addwfc	fsr2h,f,c
 13964  002FCE  CFDE F005          	movff	postinc2,??_ringbuf_num+2
 13965  002FD2  CFDD F006          	movff	postdec2,??_ringbuf_num+3
 13966  002FD6  1E05               	comf	??_ringbuf_num+2,f,c
 13967  002FD8  1E06               	comf	??_ringbuf_num+3,f,c
 13968  002FDA  4A05               	infsnz	??_ringbuf_num+2,f,c
 13969  002FDC  2A06               	incf	??_ringbuf_num+3,f,c
 13970  002FDE  5003               	movf	??_ringbuf_num,w,c
 13971  002FE0  2405               	addwf	??_ringbuf_num+2,w,c
 13972  002FE2  6E01               	movwf	?_ringbuf_num,c
 13973  002FE4  5004               	movf	??_ringbuf_num+1,w,c
 13974  002FE6  2006               	addwfc	??_ringbuf_num+3,w,c
 13975  002FE8  6E02               	movwf	?_ringbuf_num+1,c
 13976                           
 13977                           ;My_header\My_ringbuf.h: 34: } else {
 13978  002FEA  0012               	return	
 13979  002FEC                     i2l3611:
 13980                           
 13981                           ;My_header\My_ringbuf.h: 35: return (rb->size + rb->head - rb->tail);
 13982  002FEC  EE20 F004          	lfsr	2,4
 13983  002FF0  5001               	movf	ringbuf_num@rb,w,c
 13984  002FF2  26D9               	addwf	fsr2l,f,c
 13985  002FF4  5002               	movf	ringbuf_num@rb+1,w,c
 13986  002FF6  22DA               	addwfc	fsr2h,f,c
 13987  002FF8  CFDE F003          	movff	postinc2,??_ringbuf_num
 13988  002FFC  CFDD F004          	movff	postdec2,??_ringbuf_num+1
 13989  003000  EE20 F002          	lfsr	2,2
 13990  003004  5001               	movf	ringbuf_num@rb,w,c
 13991  003006  26D9               	addwf	fsr2l,f,c
 13992  003008  5002               	movf	ringbuf_num@rb+1,w,c
 13993  00300A  22DA               	addwfc	fsr2h,f,c
 13994  00300C  CFDE F005          	movff	postinc2,??_ringbuf_num+2
 13995  003010  CFDD F006          	movff	postdec2,??_ringbuf_num+3
 13996  003014  EE20 F006          	lfsr	2,6
 13997  003018  5001               	movf	ringbuf_num@rb,w,c
 13998  00301A  26D9               	addwf	fsr2l,f,c
 13999  00301C  5002               	movf	ringbuf_num@rb+1,w,c
 14000  00301E  22DA               	addwfc	fsr2h,f,c
 14001  003020  CFDE F007          	movff	postinc2,??_ringbuf_num+4
 14002  003024  CFDD F008          	movff	postdec2,??_ringbuf_num+5
 14003  003028  1E07               	comf	??_ringbuf_num+4,f,c
 14004  00302A  1E08               	comf	??_ringbuf_num+5,f,c
 14005  00302C  4A07               	infsnz	??_ringbuf_num+4,f,c
 14006  00302E  2A08               	incf	??_ringbuf_num+5,f,c
 14007  003030  5005               	movf	??_ringbuf_num+2,w,c
 14008  003032  2607               	addwf	??_ringbuf_num+4,f,c
 14009  003034  5006               	movf	??_ringbuf_num+3,w,c
 14010  003036  2208               	addwfc	??_ringbuf_num+5,f,c
 14011  003038  5003               	movf	??_ringbuf_num,w,c
 14012  00303A  2407               	addwf	??_ringbuf_num+4,w,c
 14013  00303C  6E01               	movwf	?_ringbuf_num,c
 14014  00303E  5004               	movf	??_ringbuf_num+1,w,c
 14015  003040  2008               	addwfc	??_ringbuf_num+5,w,c
 14016  003042  6E02               	movwf	?_ringbuf_num+1,c
 14017  003044  0012               	return	
 14018  003046                     __end_of_ringbuf_num:
 14019                           	opt stack 0
 14020                           pclatu	equ	0xFFB
 14021                           pclath	equ	0xFFA
 14022                           tblptru	equ	0xFF8
 14023                           tblptrh	equ	0xFF7
 14024                           tblptrl	equ	0xFF6
 14025                           tablat	equ	0xFF5
 14026                           prodh	equ	0xFF4
 14027                           prodl	equ	0xFF3
 14028                           intcon	equ	0xFF2
 14029                           intcon2	equ	0xFF1
 14030                           postinc0	equ	0xFEE
 14031                           fsr0h	equ	0xFEA
 14032                           fsr0l	equ	0xFE9
 14033                           wreg	equ	0xFE8
 14034                           indf1	equ	0xFE7
 14035                           postinc1	equ	0xFE6
 14036                           postdec1	equ	0xFE5
 14037                           fsr1h	equ	0xFE2
 14038                           fsr1l	equ	0xFE1
 14039                           indf2	equ	0xFDF
 14040                           postinc2	equ	0xFDE
 14041                           postdec2	equ	0xFDD
 14042                           plusw2	equ	0xFDB
 14043                           fsr2h	equ	0xFDA
 14044                           fsr2l	equ	0xFD9
 14045                           status	equ	0xFD8
 14046                           pclatu	equ	0xFFB
 14047                           pclath	equ	0xFFA
 14048                           tblptru	equ	0xFF8
 14049                           tblptrh	equ	0xFF7
 14050                           tblptrl	equ	0xFF6
 14051                           tablat	equ	0xFF5
 14052                           prodh	equ	0xFF4
 14053                           prodl	equ	0xFF3
 14054                           intcon	equ	0xFF2
 14055                           intcon2	equ	0xFF1
 14056                           postinc0	equ	0xFEE
 14057                           fsr0h	equ	0xFEA
 14058                           fsr0l	equ	0xFE9
 14059                           wreg	equ	0xFE8
 14060                           indf1	equ	0xFE7
 14061                           postinc1	equ	0xFE6
 14062                           postdec1	equ	0xFE5
 14063                           fsr1h	equ	0xFE2
 14064                           fsr1l	equ	0xFE1
 14065                           indf2	equ	0xFDF
 14066                           postinc2	equ	0xFDE
 14067                           postdec2	equ	0xFDD
 14068                           plusw2	equ	0xFDB
 14069                           fsr2h	equ	0xFDA
 14070                           fsr2l	equ	0xFD9
 14071                           status	equ	0xFD8
 14072                           
 14073                           	psect	rparam
 14074  0000                     pclatu	equ	0xFFB
 14075                           pclath	equ	0xFFA
 14076                           tblptru	equ	0xFF8
 14077                           tblptrh	equ	0xFF7
 14078                           tblptrl	equ	0xFF6
 14079                           tablat	equ	0xFF5
 14080                           prodh	equ	0xFF4
 14081                           prodl	equ	0xFF3
 14082                           intcon	equ	0xFF2
 14083                           intcon2	equ	0xFF1
 14084                           postinc0	equ	0xFEE
 14085                           fsr0h	equ	0xFEA
 14086                           fsr0l	equ	0xFE9
 14087                           wreg	equ	0xFE8
 14088                           indf1	equ	0xFE7
 14089                           postinc1	equ	0xFE6
 14090                           postdec1	equ	0xFE5
 14091                           fsr1h	equ	0xFE2
 14092                           fsr1l	equ	0xFE1
 14093                           indf2	equ	0xFDF
 14094                           postinc2	equ	0xFDE
 14095                           postdec2	equ	0xFDD
 14096                           plusw2	equ	0xFDB
 14097                           fsr2h	equ	0xFDA
 14098                           fsr2l	equ	0xFD9
 14099                           status	equ	0xFD8
 14100                           
 14101                           	psect	temp
 14102  000041                     btemp:
 14103                           	opt stack 0
 14104  000041                     	ds	1
 14105  0000                     int$flags	set	btemp
 14106                           pclatu	equ	0xFFB
 14107                           pclath	equ	0xFFA
 14108                           tblptru	equ	0xFF8
 14109                           tblptrh	equ	0xFF7
 14110                           tblptrl	equ	0xFF6
 14111                           tablat	equ	0xFF5
 14112                           prodh	equ	0xFF4
 14113                           prodl	equ	0xFF3
 14114                           intcon	equ	0xFF2
 14115                           intcon2	equ	0xFF1
 14116                           postinc0	equ	0xFEE
 14117                           fsr0h	equ	0xFEA
 14118                           fsr0l	equ	0xFE9
 14119                           wreg	equ	0xFE8
 14120                           indf1	equ	0xFE7
 14121                           postinc1	equ	0xFE6
 14122                           postdec1	equ	0xFE5
 14123                           fsr1h	equ	0xFE2
 14124                           fsr1l	equ	0xFE1
 14125                           indf2	equ	0xFDF
 14126                           postinc2	equ	0xFDE
 14127                           postdec2	equ	0xFDD
 14128                           plusw2	equ	0xFDB
 14129                           fsr2h	equ	0xFDA
 14130                           fsr2l	equ	0xFD9
 14131                           status	equ	0xFD8


Data Sizes:
    Strings     105
    Constant    28
    Data        5
    BSS         139
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     34      64
    BANK0           160     54     160
    BANK1           256    200     208
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    RTCC_adjust_time_button@cnt_dec	PTR struct button size(2) Largest target is 4
		 -> ct1(BANK0[4]), 

    RTCC_adjust_time_button@cnt_inc	PTR struct button size(2) Largest target is 4
		 -> ct0(BANK0[4]), 

    RTCC_adjust_time_button@mode	PTR struct button size(2) Largest target is 4
		 -> ctm(BANK0[4]), 

    RTCC_adjust_time_dec@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    RTCC_adjust_time_dec@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    RTCC_adjust_time_inc@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    RTCC_adjust_time_inc@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    display_time_0802@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    display_time_0802@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    my_utoa@str	PTR unsigned char  size(2) Largest target is 10
		 -> display_LCD@str(BANK1[10]), display_dec@str(BANK0[10]), 

    RTCC_from_epoch@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    RTCC_from_epoch@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    RTCC_from_RTCC@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    RTCC_from_RTCC@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    caltime_to_epoch@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    caltime_to_epoch@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    epoch_to_caltime@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    epoch_to_caltime@ep	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_now(BANK0[4]), 

    caltime_to_RTCC@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    RTCC_to_caltime@ct	PTR struct . size(2) Largest target is 7
		 -> caltime_now(BANK0[7]), 

    get_quot_rem@quot	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_to_caltime@num(BANK0[4]), 

    I2C_LCD_Puts@s	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_18(CODE[8]), STR_17(CODE[7]), STR_16(CODE[9]), STR_15(CODE[5]), 
		 -> STR_14(CODE[9]), STR_13(CODE[9]), STR_12(CODE[8]), STR_11(CODE[7]), 
		 -> STR_10(CODE[4]), display_LCD@str(BANK1[10]), STR_9(CODE[8]), STR_8(CODE[7]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[7]), STR_4(CODE[7]), 
		 -> STR_3(CODE[6]), STR_2(CODE[6]), weekday_3char(CODE[28]), STR_1(CODE[3]), 
		 -> display_dec@str(BANK0[10]), 

    button_timer_interrupt@bt	PTR struct button size(2) Largest target is 4
		 -> ctm(BANK0[4]), ct2(BANK0[4]), ct1(BANK0[4]), ct0(BANK0[4]), 

    delay_set@d	PTR struct Delay size(2) Largest target is 3
		 -> delay_display(COMRAM[3]), 

    delay_timer_interrupt@d	PTR struct Delay size(2) Largest target is 3
		 -> delay_display(COMRAM[3]), 

    rx_buf.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@txbuf(BANK1[200]), 

    tx_buf.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@txbuf(BANK1[200]), 

    ringbuf_delete@rb.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@txbuf(BANK1[200]), 

    ringbuf_backspace@rb.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@txbuf(BANK1[200]), 

    ringbuf_pop@rb.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@txbuf(BANK1[200]), 

    ringbuf_pop@rb	PTR struct ringbuf size(2) Largest target is 9
		 -> tx_buf(BANK1[8]), 

    ringbuf_put@rb.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@txbuf(BANK1[200]), 

    ringbuf_put@rb	PTR struct ringbuf size(2) Largest target is 9
		 -> rx_buf(BANK0[8]), tx_buf(BANK1[8]), 

    ringbuf_num@rb.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@txbuf(BANK1[200]), 

    ringbuf_num@rb	PTR struct ringbuf size(2) Largest target is 9
		 -> rx_buf(BANK0[8]), tx_buf(BANK1[8]), 

    S790ringbuf$buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@txbuf(BANK1[200]), 

    ringbuf_init@rb.buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@txbuf(BANK1[200]), 

    ringbuf_init@internal_buf	PTR unsigned char  size(2) Largest target is 200
		 -> main_init@txbuf(BANK1[200]), 

    ringbuf_init@rb	PTR struct ringbuf size(2) Largest target is 9
		 -> tx_buf(BANK1[8]), 


Critical Paths under _main in COMRAM

    _port_loop->_delay_set
    _display_LCD->___lwmod
    _my_utoa->___lwmod
    _I2C_LCD_Putc->_I2C_Start
    _I2C_LCD_Puts->_I2C_Start
    ___lwdiv->___lwmod
    _d_to_x->___awdiv
    _Auto_cut->_ADC
    ___wmul->_ADC
    _I2C_LCD_Command->_I2C_Start
    _I2C_Stop->_I2C_IdleCheck
    _I2C_Start->_I2C_IdleCheck
    _I2C_Send->_I2C_IdleCheck
    _RTCC_from_RTCC->_RTCC_to_caltime
    _month_length->___awmod
    _RTCC_to_caltime->_x_to_d

Critical Paths under _ISR in COMRAM

    _ISR->_UART_ISR
    _ISR->_integrating
    _lchika->i2___awdiv
    _integrating->i2___lldiv
    _UART_ISR->_ringbuf_pop
    _UART_ISR->_ringbuf_put
    _ringbuf_put->_ringbuf_num
    _ringbuf_pop->_ringbuf_num

Critical Paths under _main in BANK0

    _main->_RTCC_from_epoch
    _sleep_loop->_RTCC_from_RTCC
    _display_LCD->_display_time_0802
    _display_time_0802->_display_dec
    _display_dec->_my_utoa
    _my_utoa->___lwdiv
    _display_port->_I2C_LCD_SetCursor
    _I2C_LCD_SetCursor->_I2C_LCD_Command
    ___llmod->___lldiv
    _ctmu_loop->_button_timer_interrupt
    _button_timer_interrupt->___lwdiv
    ___lwdiv->_CTMU_read
    _CTMU_read->___lldiv
    _RTCC_adjust_time_inc->_RTCC_from_epoch
    _RTCC_adjust_time_dec->_RTCC_from_epoch
    _RTCC_from_epoch->_epoch_to_caltime
    _epoch_to_caltime->_get_quot_rem
    _get_quot_rem->___lmul
    _caltime_to_RTCC->_d_to_x
    _d_to_x->___awdiv
    _Auto_cut->___wmul
    _main_init->_ringbuf_init
    _I2C_LCD_init->_I2C_LCD_Clear
    _I2C_LCD_Clear->_I2C_LCD_Command
    _RTCC_loop->_RTCC_from_RTCC
    _RTCC_from_RTCC->_caltime_to_epoch
    _caltime_to_epoch->___lmul
    _month_length->___awmod
    ___lmul->___lldiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_main_init
    _normal_mode_loop->_RTCC_adjust_time_button
    _RTCC_adjust_time_button->_RTCC_adjust_time_dec
    _RTCC_adjust_time_button->_RTCC_adjust_time_inc

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  168849
                                             53 BANK0      1     1      0
                          _CTMU_read
                           _Delay_ms
                      _I2C_LCD_Clear
                       _I2C_LCD_Puts
                  _I2C_LCD_SetCursor
                                _LED
                                _OUT
                     _RTCC_from_RTCC
                    _RTCC_from_epoch
                          _RTCC_loop
                            ___lwdiv
                          _main_init
                   _normal_mode_loop
                         _sleep_loop
 ---------------------------------------------------------------------------------
 (1) _sleep_loop                                           1     1      0   15214
                                             44 BANK0      1     1      0
                      _I2C_LCD_Clear
                       _I2C_LCD_Puts
                  _I2C_LCD_SetCursor
                                _LED
                                _OUT
                     _RTCC_from_RTCC
 ---------------------------------------------------------------------------------
 (1) _normal_mode_loop                                     0     0      0  113206
                           _Auto_cut
            _RTCC_adjust_time_button
                          _ctmu_loop
                        _display_LCD
                          _port_loop
 ---------------------------------------------------------------------------------
 (2) _port_loop                                            1     1      0    4031
                                              0 BANK0      1     1      0
                                _LED
                                _OUT
                          _delay_set
                      _sw_flag_clear
                       _sw_flag_read
 ---------------------------------------------------------------------------------
 (3) _sw_flag_read                                         3     1      2     748
                                             30 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _sw_flag_clear                                        3     1      2     644
                                             30 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _delay_set                                            4     0      4     509
                                             30 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _LED                                                  2     1      1     643
                                             30 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _display_LCD                                         14    14      0   55279
                                              0 BANK1     14    14      0
                      _I2C_LCD_Clear
                       _I2C_LCD_Putc
                       _I2C_LCD_Puts
                  _I2C_LCD_SetCursor
                            ___lldiv
                            ___llmod
                            ___lwdiv
                            ___lwmod
                       _display_port
                  _display_time_0802
                            _my_utoa
 ---------------------------------------------------------------------------------
 (3) _display_time_0802                                    5     1      4   26266
                                             46 BANK0      5     1      4
                       _I2C_LCD_Putc
                       _I2C_LCD_Puts
                  _I2C_LCD_SetCursor
                     _RTCC_from_RTCC
                        _display_dec
 ---------------------------------------------------------------------------------
 (4) _display_dec                                         12    11      1   12044
                                             34 BANK0     12    11      1
                       _I2C_LCD_Puts
                            _my_utoa
 ---------------------------------------------------------------------------------
 (3) _my_utoa                                              8     3      5    7145
                                             26 BANK0      8     3      5
                            ___lldiv (ARG)
                            ___llmod (ARG)
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4    1688
                                             30 COMRAM     4     0      4
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _I2C_LCD_Putc                                         2     2      0     667
                                              0 BANK0      2     2      0
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _display_port                                         0     0      0    6147
                       _I2C_LCD_Puts
                  _I2C_LCD_SetCursor
 ---------------------------------------------------------------------------------
 (2) _I2C_LCD_SetCursor                                    4     3      1    2742
                                              2 BANK0      4     3      1
                    _I2C_LCD_Command
 ---------------------------------------------------------------------------------
 (2) _I2C_LCD_Puts                                         5     3      2    3405
                                              0 BANK0      5     3      2
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8    1064
                                             30 COMRAM     1     1      0
                                             13 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _ctmu_loop                                            0     0      0    7241
                          _CTMU_read
                            ___lwdiv
             _button_timer_interrupt
 ---------------------------------------------------------------------------------
 (3) _button_timer_interrupt                               5     2      3    1979
                                             26 BANK0      5     2      3
                          _CTMU_read (ARG)
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4    3291
                                             19 BANK0      7     3      4
                          _CTMU_read (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _CTMU_read                                            9     7      2    1971
                                             30 COMRAM     3     1      2
                                             13 BANK0      6     6      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _RTCC_adjust_time_button                              6     0      6   44923
                                             10 BANK1      6     0      6
            _RTCC_adjust_time_cursor
               _RTCC_adjust_time_dec
               _RTCC_adjust_time_inc
            _RTCC_adjust_time_toggle
 ---------------------------------------------------------------------------------
 (3) _RTCC_adjust_time_toggle                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RTCC_adjust_time_inc                                10     6      4   22135
                                              0 BANK1     10     6      4
                     _RTCC_from_RTCC
                    _RTCC_from_epoch
                             ___lmul
                       _month_length
 ---------------------------------------------------------------------------------
 (3) _RTCC_adjust_time_dec                                10     6      4   22135
                                              0 BANK1     10     6      4
                     _RTCC_from_RTCC
                    _RTCC_from_epoch
                             ___lmul
                       _month_length
 ---------------------------------------------------------------------------------
 (4) _RTCC_from_epoch                                      4     0      4   10277
                                             49 BANK0      4     0      4
                    _caltime_to_RTCC
                   _epoch_to_caltime
 ---------------------------------------------------------------------------------
 (5) _epoch_to_caltime                                    16    12      4    8282
                                             33 BANK0     16    12      4
                       _get_quot_rem
                       _month_length
 ---------------------------------------------------------------------------------
 (6) _get_quot_rem                                         8     4      4    4816
                                             25 BANK0      8     4      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1835
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _caltime_to_RTCC                                      2     0      2    1278
                                              5 BANK0      2     0      2
                             _d_to_x
 ---------------------------------------------------------------------------------
 (6) _d_to_x                                               1     1      0     853
                                              4 BANK0      1     1      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     791
                                             30 COMRAM     4     0      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _RTCC_adjust_time_cursor                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Auto_cut                                             3     3      0    1732
                                              6 BANK0      3     3      0
                                _ADC
                                 _IN
                                _OUT
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     648
                                              0 BANK0      6     2      4
                                _ADC (ARG)
                                 _IN (ARG)
 ---------------------------------------------------------------------------------
 (2) _OUT                                                  2     1      1     706
                                             30 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _IN                                                   1     1      0      31
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ADC                                                  4     2      2      31
                                             30 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _main_init                                          200   200      0    2404
                                              0 BANK1    200   200      0
                           _ADC_init
                          _CTMU_init
                       _I2C_LCD_init
                           _I2C_init
                          _RTCC_init
                          _UART_init
                       _ringbuf_init
                        _timer0_init
                        _timer1_init
                        _timer3_init
 ---------------------------------------------------------------------------------
 (2) _timer3_init                                          2     2      0      22
                                             30 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _timer1_init                                          3     2      1     155
                                             30 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _timer0_init                                          2     2      0      44
                                             30 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ringbuf_init                                         6     0      6     498
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RTCC_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_LCD_init                                         0     0      0    1623
                           _Delay_ms
                      _I2C_LCD_Clear
                    _I2C_LCD_Command
 ---------------------------------------------------------------------------------
 (2) _I2C_LCD_Clear                                        1     1      0     667
                                              2 BANK0      1     1      0
                    _I2C_LCD_Command
 ---------------------------------------------------------------------------------
 (3) _I2C_LCD_Command                                      2     2      0     667
                                              0 BANK0      2     2      0
                           _I2C_Send
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0      31
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            2     1      1     509
                                             32 COMRAM     2     1      1
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (4) _I2C_Send                                             1     1      0      62
                                             32 COMRAM     1     1      0
                      _I2C_IdleCheck
 ---------------------------------------------------------------------------------
 (5) _I2C_IdleCheck                                        2     2      0      31
                                             30 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Delay_ms                                             3     1      2     289
                                             30 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _CTMU_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             1     1      0      22
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _RTCC_loop                                            0     0      0    6921
                     _RTCC_from_RTCC
 ---------------------------------------------------------------------------------
 (2) _RTCC_from_RTCC                                       4     0      4    6921
                                             40 BANK0      4     0      4
                    _RTCC_to_caltime
                   _caltime_to_epoch
 ---------------------------------------------------------------------------------
 (3) _caltime_to_epoch                                    15    11      4    4986
                                             25 BANK0     15    11      4
                             ___lmul
                       _month_length
 ---------------------------------------------------------------------------------
 (4) _month_length                                         6     5      1    2075
                                              2 BANK0      6     5      1
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     849
                                             30 COMRAM     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8    1960
                                             13 BANK0     12     4      8
                            ___lldiv (ARG)
                       _month_length (ARG)
 ---------------------------------------------------------------------------------
 (3) _RTCC_to_caltime                                      3     1      2     386
                                             32 COMRAM     2     0      2
                                              0 BANK0      1     1      0
                             _x_to_d
 ---------------------------------------------------------------------------------
 (4) _x_to_d                                               2     2      0      62
                                             30 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 14    14      0    4542
                                             16 COMRAM    14    14      0
                           _UART_ISR
                  _charge_time_count
              _delay_timer_interrupt
                        _integrating
                             _lchika
 ---------------------------------------------------------------------------------
 (9) _lchika                                               4     4      0    1020
                                              8 COMRAM     4     4      0
                              i2_LED
                          i2___awdiv
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (10) i2___awdiv                                           8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (10) i2_LED                                               2     1      1     166
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (9) _integrating                                          3     3      0     348
                                             13 COMRAM     3     3      0
                          i2___lldiv
 ---------------------------------------------------------------------------------
 (10) i2___lldiv                                          13     5      8     214
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (9) _delay_timer_interrupt                                4     2      2     177
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _charge_time_count                                    3     3      0      90
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) _UART_ISR                                             1     1      0    2907
                                             15 COMRAM     1     1      0
                        _ringbuf_num
                        _ringbuf_pop
                        _ringbuf_put
 ---------------------------------------------------------------------------------
 (10) _ringbuf_put                                         7     4      3    1598
                                              8 COMRAM     7     4      3
                        _ringbuf_num
 ---------------------------------------------------------------------------------
 (10) _ringbuf_pop                                         7     5      2     776
                                              8 COMRAM     7     5      2
                        _ringbuf_num
 ---------------------------------------------------------------------------------
 (11) _ringbuf_num                                         8     6      2     510
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CTMU_read
     ___lldiv
   _Delay_ms
   _I2C_LCD_Clear
     _I2C_LCD_Command
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
   _I2C_LCD_Puts
     _I2C_Send
       _I2C_IdleCheck
     _I2C_Start
       _I2C_IdleCheck
     _I2C_Stop
       _I2C_IdleCheck
   _I2C_LCD_SetCursor
     _I2C_LCD_Command
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
   _LED
   _OUT
   _RTCC_from_RTCC
     _RTCC_to_caltime
       _x_to_d
     _caltime_to_epoch
       ___lmul
         ___lldiv (ARG)
         _month_length (ARG)
           ___awmod
       _month_length
         ___awmod
   _RTCC_from_epoch
     _caltime_to_RTCC
       _d_to_x
         ___awdiv
     _epoch_to_caltime
       _get_quot_rem
         ___lldiv
         ___lmul
           ___lldiv (ARG)
           _month_length (ARG)
             ___awmod
       _month_length
         ___awmod
   _RTCC_loop
     _RTCC_from_RTCC
       _RTCC_to_caltime
         _x_to_d
       _caltime_to_epoch
         ___lmul
           ___lldiv (ARG)
           _month_length (ARG)
             ___awmod
         _month_length
           ___awmod
   ___lwdiv
     _CTMU_read (ARG)
       ___lldiv
     ___lwmod (ARG)
   _main_init
     _ADC_init
     _CTMU_init
     _I2C_LCD_init
       _Delay_ms
       _I2C_LCD_Clear
         _I2C_LCD_Command
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
       _I2C_LCD_Command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     _I2C_init
     _RTCC_init
     _UART_init
     _ringbuf_init
     _timer0_init
     _timer1_init
     _timer3_init
   _normal_mode_loop
     _Auto_cut
       _ADC
       _IN
       _OUT
       ___wmul
         _ADC (ARG)
         _IN (ARG)
     _RTCC_adjust_time_button
       _RTCC_adjust_time_cursor
       _RTCC_adjust_time_dec
         _RTCC_from_RTCC
           _RTCC_to_caltime
             _x_to_d
           _caltime_to_epoch
             ___lmul
               ___lldiv (ARG)
               _month_length (ARG)
                 ___awmod
             _month_length
               ___awmod
         _RTCC_from_epoch
           _caltime_to_RTCC
             _d_to_x
               ___awdiv
           _epoch_to_caltime
             _get_quot_rem
               ___lldiv
               ___lmul
                 ___lldiv (ARG)
                 _month_length (ARG)
                   ___awmod
             _month_length
               ___awmod
         ___lmul
           ___lldiv (ARG)
           _month_length (ARG)
             ___awmod
         _month_length
           ___awmod
       _RTCC_adjust_time_inc
         _RTCC_from_RTCC
           _RTCC_to_caltime
             _x_to_d
           _caltime_to_epoch
             ___lmul
               ___lldiv (ARG)
               _month_length (ARG)
                 ___awmod
             _month_length
               ___awmod
         _RTCC_from_epoch
           _caltime_to_RTCC
             _d_to_x
               ___awdiv
           _epoch_to_caltime
             _get_quot_rem
               ___lldiv
               ___lmul
                 ___lldiv (ARG)
                 _month_length (ARG)
                   ___awmod
             _month_length
               ___awmod
         ___lmul
           ___lldiv (ARG)
           _month_length (ARG)
             ___awmod
         _month_length
           ___awmod
       _RTCC_adjust_time_toggle
     _ctmu_loop
       _CTMU_read
         ___lldiv
       ___lwdiv
         _CTMU_read (ARG)
           ___lldiv
         ___lwmod (ARG)
       _button_timer_interrupt
         _CTMU_read (ARG)
           ___lldiv
         ___lwdiv (ARG)
           _CTMU_read (ARG)
             ___lldiv
           ___lwmod (ARG)
     _display_LCD
       _I2C_LCD_Clear
         _I2C_LCD_Command
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
       _I2C_LCD_Putc
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
       _I2C_LCD_Puts
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
       _I2C_LCD_SetCursor
         _I2C_LCD_Command
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lwdiv
         _CTMU_read (ARG)
           ___lldiv
         ___lwmod (ARG)
       ___lwmod
       _display_port
         _I2C_LCD_Puts
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
         _I2C_LCD_SetCursor
           _I2C_LCD_Command
             _I2C_Send
               _I2C_IdleCheck
             _I2C_Start
               _I2C_IdleCheck
             _I2C_Stop
               _I2C_IdleCheck
       _display_time_0802
         _I2C_LCD_Putc
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
         _I2C_LCD_Puts
           _I2C_Send
             _I2C_IdleCheck
           _I2C_Start
             _I2C_IdleCheck
           _I2C_Stop
             _I2C_IdleCheck
         _I2C_LCD_SetCursor
           _I2C_LCD_Command
             _I2C_Send
               _I2C_IdleCheck
             _I2C_Start
               _I2C_IdleCheck
             _I2C_Stop
               _I2C_IdleCheck
         _RTCC_from_RTCC
           _RTCC_to_caltime
             _x_to_d
           _caltime_to_epoch
             ___lmul
               ___lldiv (ARG)
               _month_length (ARG)
                 ___awmod
             _month_length
               ___awmod
         _display_dec
           _I2C_LCD_Puts
             _I2C_Send
               _I2C_IdleCheck
             _I2C_Start
               _I2C_IdleCheck
             _I2C_Stop
               _I2C_IdleCheck
           _my_utoa
             ___lldiv (ARG)
             ___llmod (ARG)
               ___lldiv (ARG)
             ___lwdiv (ARG)
               _CTMU_read (ARG)
                 ___lldiv
               ___lwmod (ARG)
             ___lwmod (ARG)
       _my_utoa
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lwdiv (ARG)
           _CTMU_read (ARG)
             ___lldiv
           ___lwmod (ARG)
         ___lwmod (ARG)
     _port_loop
       _LED
       _OUT
       _delay_set
       _sw_flag_clear
       _sw_flag_read
   _sleep_loop
     _I2C_LCD_Clear
       _I2C_LCD_Command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     _I2C_LCD_Puts
       _I2C_Send
         _I2C_IdleCheck
       _I2C_Start
         _I2C_IdleCheck
       _I2C_Stop
         _I2C_IdleCheck
     _I2C_LCD_SetCursor
       _I2C_LCD_Command
         _I2C_Send
           _I2C_IdleCheck
         _I2C_Start
           _I2C_IdleCheck
         _I2C_Stop
           _I2C_IdleCheck
     _LED
     _OUT
     _RTCC_from_RTCC
       _RTCC_to_caltime
         _x_to_d
       _caltime_to_epoch
         ___lmul
           ___lldiv (ARG)
           _month_length (ARG)
             ___awmod
         _month_length
           ___awmod

 _ISR (ROOT)
   _UART_ISR
     _ringbuf_num
     _ringbuf_pop
       _ringbuf_num
     _ringbuf_put
       _ringbuf_num
   _charge_time_count
   _delay_timer_interrupt
   _integrating
     i2___lldiv
   _lchika
     i2_LED
     i2___awdiv
     i2___lwdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EAF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     C8      D0       8       81.3%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     36      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     22      40       1       68.1%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B0       6        0.0%
DATA                 0      0     1B0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Nov 10 22:49:15 2015

                               _I 0023                                 _S 0060  
                               _s 0078                      ?_display_LCD 0001  
               _charge_time_count 3C68                __size_of_I2C_Start 002A  
                    ?_display_dec 00E9                                _IN 3F50  
                              _d1 008E                      ___awdiv@sign 00C8  
       __size_of_normal_mode_loop 00B4                                _ms 008A  
             ___wmul@multiplicand 00C9                i2___lwdiv@dividend 0001  
               ??_RTCC_from_epoch 0023                      _sw_flag_read 3990  
              ?_charge_time_count 0001                      __CFG_CP0$OFF 000000  
                             ?_IN 0001                               IN@b 001F  
                             l132 3D5C                               l127 3EAE  
                             l403 2BAC                               l324 412C  
                             l500 3950                               l309 3F40  
                             l333 3E90                               l149 3F92  
                             l237 2E66                               l502 395E  
                             _ADC 3F78                               l504 396C  
                             l416 21C8                               l272 148E  
                             l273 14B6                               l345 3E24  
                             l506 397A                               l274 14DC  
                             l275 1502                               l276 1526  
                             l605 3B02                               l277 154A  
                             l445 355E                               l621 3D82  
                             l278 156E                               l607 3B0E  
                             l279 1592                               l623 3D8E  
                             l608 3B1A                               l624 3D9A  
                             l553 3CB0                               l397 325C  
                             l493 4118                               l498 3942  
                             _LED 3D7E                               _ISR 0008  
                             _OUT 3AEA                     ?_get_quot_rem 00E0  
                   ?_display_port 0001                caltime_to_epoch@ep 00E2  
              caltime_to_epoch@ct 00E0                               _ct0 00B3  
                             _ct1 00B7                               _ct2 00BB  
                             _ctm 00BF                     _sw_flag_clear 3CF6  
                    ___awmod@sign 00C8                               prod 000FF3  
                             wreg 000FE8                        _TXSTA1bits 000FAD  
     RTCC_adjust_time_button@mode 010A               ??_charge_time_count 0001  
         _RTCC_adjust_time_button 25DE           _RTCC_adjust_time_cursor 3934  
                            ??_IN 001F                      _I2C_LCD_Putc 3DFA  
                    _I2C_LCD_Puts 34D0                              ?_ADC 001F  
             sw_flag_read@bit_and 001F           _RTCC_adjust_time_toggle 4108  
                            LED@b 0020                              ?_LED 001F  
               ??_I2C_LCD_Command 0023                              ?_ISR 0001  
                            ?_OUT 001F                      _I2C_LCD_init 3A96  
                            l1131 2F78                              l1141 34BE  
                            l1184 3850                              l4001 3EC2  
                            l1194 3C16                              l4013 3D5E  
                            l4131 3EE2                              l5011 3384  
                            l5031 370C                              l5015 3398  
                            l5007 3378                              l5051 375C  
                            l5043 373E                              l5035 371C  
                            l5027 3700                              l5037 3726  
                            l5301 1830                              l5061 2EFC  
                            l6013 3124                              l6005 3114  
                            l5039 372A                              l5047 374A  
                            l5119 2CF6                              l5063 2F0C  
                            l5135 3800                              l5311 356C  
                            l6007 3118                              l5073 2F66  
                            l5065 2F12                              l5137 380C  
                            l5313 358A                              l5321 35C8  
                            l6033 3192                              l6025 3154  
                            l6009 311C                              l6017 3128  
                            OUT@b 0020                              l5147 3842  
                            l5139 3812                              l5163 3C0A  
                            l5155 3BE8                              l6019 3146  
                            l5261 223E                              l5181 34FC  
                            l5157 3BF2                              l6029 3162  
                            l3655 3FF0                              l5511 1C7E  
                            l5503 1C46                              l5431 15DE  
                            l5159 3BF6                              l6039 31A0  
                            l6055 2D72                              l5281 1744  
                            l3657 4000                              l5265 2246  
                            l5353 3A30                              l5291 17A8  
                            l5259 223A                              l5523 1D2C  
                            l5515 1C9C                              l5507 1C60  
                            l5451 16AA                              l5443 1656  
                            l5435 1606                              l5427 15B6  
                            l5187 352E                              l6067 2D9A  
                            l6059 2D7C                              l5285 174E  
                            l5293 17AC                              l5613 3F58  
                            l5605 3B26                              l3773 3988  
                            l5533 1D9C                              l5541 1E28  
                            l5365 2E2C                              l5189 3556  
                            l6077 2DD8                              l5279 173E  
                            l5623 3F60                              l5535 1DA4  
                            l5527 1D36                              l5519 1D12  
                            l5455 16D4                              l5447 1680  
                            l5439 162E                              l5711 34AE  
                            l5703 3456                              l6087 2E04  
                            l5297 17CC                              l5617 3F5C  
                            l5609 3F54                              l5545 1E5C  
                            l5369 2E36                              l5705 3464  
                            l5633 3DA6                              l5641 39A6  
                            l5571 1F76                              l5563 1EE2  
                            l5555 1EAA                              l5539 1E10  
                            l5459 16FC                              l5707 346A  
                            l5491 259A                              l6291 2492  
                            l6275 243A                              l6259 23E6  
                            l5397 2E88                              l5493 25A0  
                            l5805 10FC                              l5661 3D08  
                            l5645 39B8                              l5637 3994  
                            l5591 2074                              l5575 1F90  
                            l5567 1F00                              l5559 1EC4  
                            l5751 26BE                              l5671 2AE8  
                            l5815 115C                              l5663 3D16  
                            l5655 39D4                              l6279 2444  
              __CFG_WPFP$PAGE_127 000000                              l5585 2000  
                            l5593 208C                              l5745 267C  
                            l5737 264A                              l5681 2B4A  
                            l5649 39CA                              l5921 1B30  
                            l5913 1AEC                              l6297 24A0  
                            l4971 3892                              l4963 4136  
                            l5763 2814                              l5587 2008  
                            l5683 2B5C                              l5675 2B10  
                            l5691 2B96                              l5843 1398  
                            l5659 3CFA                              l5667 3D24  
                            l5923 1B36                              l5773 28E6  
                            l5597 20C0                              l5677 2B22  
                            l5861 13FE                              l5781 0F8E  
                            l5941 1BD0                              l4967 386C  
                            l5775 2900                              l5759 280A  
                            l4983 331E                              l5687 2B84  
                            l5855 13DC                              l5935 1BA0  
                            l5951 1C04                              l5849 13BA  
                            l5873 19B2                              l4995 334A  
                            l5787 0FC8                              l5947 1BFE  
                            l5939 1BBC                              l5891 1A28  
                            l4997 3354                              l4989 3330  
                            l5789 0FE6                              l5869 1420  
                            l5893 1A2E                              l5877 19BC  
                            l4999 3358                              l5899 1A5C  
                            STR_1 0F83                              STR_2 0F6A  
                            STR_3 0F64                              STR_4 0F5D  
                            STR_5 0F4F                              STR_6 0F7A  
                            STR_7 0F75                              STR_8 0F56  
                            STR_9 0F40                              u5200 2CA8  
                            u5210 2CAA                              u6010 3B22  
                            u5220 2CD2                              u6030 3D8A  
                            u5240 2CE8                              u5250 2CEA  
                            u5170 3F4C                              u6050 3D96  
                            u5260 2D42                              u5270 2D44  
                            u5238 2CD6                              u6070 3DA2  
                            u6215 283C                              u6240 28D8  
                            u6400 2738                              u5360 351E  
                            u6410 273A                              u5370 3550  
                            u6420 2778                              u6430 277A  
                            u5367 3514                              u5720 166C  
                            u6440 27B8                              u5377 3546  
                            u5570 2EC0                              u5730 1696  
                            u6450 27BA                              u3795 40C6  
                            u3796 40C8                              u5740 16C0  
                            u6460 27F8                              u5750 16EA  
                            u6470 27FA                              u5575 2EB2  
                            u6570 2D52                              u6576 2D54  
                            u5970 3B0A                              u6827 3E2A  
                            u6837 352A                              u5990 3B16  
                            u6847 2E52                              u6857 2E5C  
                            u6867 40E4                              u6877 3E96  
                            u6887 3FF6                              _main 22CE  
        button_timer_interrupt@bt 00E1                              fsr0h 000FEA  
                            fsr1h 000FE2                i2___lwdiv@quotient 0005  
                            fsr0l 000FE9                              fsr2h 000FDA  
                            indf1 000FE7                              fsr1l 000FE1  
                            indf2 000FDF                              fsr2l 000FD9  
                __end_of_I2C_Send 4134                              btemp 0041  
          __CFG_DSWDTOSC$T1OSCREF 000000                  __end_of_I2C_Stop 4166  
                            pclat 000FFA                  __end_of_I2C_init 415C  
                            prodh 000FF4                              prodl 000FF3  
                            start 00F6                  __end_of_ADC_init 40D6  
                   __CFG_IESO$OFF 000000        RTCC_adjust_time_dec@i_2090 0108  
              __size_of_CTMU_init 0028                __size_of_CTMU_read 00BE  
       __end_of_charge_time_count 3CB0                      ___param_bank 000010  
                   _I2C_LCD_Clear 40D6                             ??_ADC 0021  
                           ADC@ch 0022                     ADC_init@p_ref 001F  
                           ??_LED 0020                             ??_ISR 0011  
          __size_of_I2C_IdleCheck 0016                             ??_OUT 0020  
               ??_RTCC_to_caltime 0023                     __CFG_PLLDIV$2 000000  
                    _BAUDCON1bits 000F7E                             ?_main 0001  
                  ??_get_quot_rem 0023                    ??_display_port 0023  
                 __end_of___awdiv 33A2                             _ADRES 000FC3  
                           STR_10 0F7F                             STR_11 0F48  
                           STR_12 0F38                             STR_13 0F26  
                           STR_14 0F2F                             STR_15 0F70  
                           STR_16 0F1D                             STR_17 0F56  
                           STR_18 0F40                   __end_of___awmod 3766  
                 __end_of___lldiv 2F8A                   ___awdiv@divisor 0021  
                 __end_of___llmod 34D0                             _LATB2 007C52  
                           _LATA5 007C4D                             _LATC2 007C5A  
                           _LATA6 007C4E                             _LATA7 007C4F  
                           _LATB6 007C56                             _LATB7 007C57  
                 __end_of___lwdiv 385A                    ?_sw_flag_clear 001F  
                 __end_of___lwmod 3C20                             i2l207 3BBA  
                           i2l208 3BB8                             i2l621 3DC0  
                           i2l623 3DCC                             i2l624 3DD8  
                           i2l771 00BA                   ___awdiv@counter 00C7  
                           i2_LED 3DBC                             _TMR1H 000FCF  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94               ___lmul@multiplicand 00D8  
                  __CFG_FCMEN$OFF 000000                  __end_of_UART_ISR 3BD8  
            caltime_to_epoch@year 00E8                __size_of_UART_init 0020  
                           _colon 009F                __size_of_RTCC_init 002E  
              __size_of_RTCC_loop 0046                             main@i 00FC  
               __end_of_I2C_Start 3F50                             tablat 000FF5  
                 __end_of_my_utoa 35E2                             plusw2 000FDB  
          ?_delay_timer_interrupt 0001                      ?_integrating 0001  
                           status 000FD8                  __end_of_Delay_ms 4012  
                  delay_set@value 0021                __size_ofi2___awdiv 0084  
               month_length@month 00C9                       CTMU_read@ch 00D4  
              __size_ofi2___lldiv 0082                __size_ofi2___lwdiv 0052  
                  ?_I2C_LCD_Clear 0001                   __initialization 38D0  
               i2___lldiv@divisor 0005                      __end_of_main 24A6  
               i2___lldiv@counter 000D                  __end_of_Auto_cut 2906  
             ringbuf_init@bufsize 00CB                  RTCC_from_RTCC@ep 00F1  
                RTCC_from_RTCC@ct 00EF        RTCC_adjust_time_inc@i_2077 0108  
                          ??_main 0023                     __activetblptr 000003  
       ??_RTCC_adjust_time_button 0023         ??_RTCC_adjust_time_cursor 001F  
                          ?i2_LED 0001         ??_RTCC_adjust_time_toggle 001F  
               __end_of_CTMU_init 3FC8                 __end_of_CTMU_read 2ECE  
                          _BCL1IF 007D0B                     _I2C_IdleCheck 4134  
                ___llmod@dividend 00D4                 _I2C_LCD_SetCursor 3EFA  
             display_time_0802@ep 00F7               display_time_0802@ct 00F5  
                          _EECON2 000FA7                            _ANCON0 000F48  
                          _ANCON1 000F49                  ___awdiv@dividend 001F  
                          i2LED@b 0002                I2C_LCD_Command@ans 00C8  
                          i2l1131 36D6                            i2l1184 3B84  
                  __CFG_WDTEN$OFF 000000                            i2l4073 30E6  
                          i2l4401 3628                            i2l3611 2FEC  
                          i2l4083 3240                            i2l4091 3258  
                          i2l4085 3254                            i2l4413 364E  
                          i2l4431 3698                            i2l4417 365C  
                          i2l4409 3644                            i2l4513 2946  
                          i2l4505 290A                            i2l4427 3688  
                          i2l4451 3B5A                            i2l4429 3694  
                          i2l4533 33A6                            i2l4461 3B7A  
                          i2l4453 3B5E                            i2l4509 2912  
                          i2l4551 3C74                            i2l4439 36C8  
                          i2l4375 3DE4                            i2l4391 3606  
                          i2l4519 29BC                            i2l4527 2A02  
                          i2l4537 33AE                            i2l4385 35F6  
                          i2l4449 3B52                            i2l4555 3CAC  
                          i2l4547 3C6C                            i2l4397 361C  
                          i2l4487 3C40                            i2l4399 3624  
                          i2l4871 0064                            i2l4891 00A2  
                          i2l4875 0072                            i2l4885 0092  
              ?_I2C_LCD_SetCursor 00C9                            _RCREG1 000FAF  
                          _RTCCAL 000F3E                            _SPBRG1 000FB0  
                          _SSP1IF 007CF3                    __CFG_WPCFG$OFF 000000  
               sw_flag_clear@port 0021                            _TXREG1 000FAE  
                  __CFG_WPDIS$OFF 000000                epoch_to_caltime@ep 00EA  
              epoch_to_caltime@ct 00E8               ??_I2C_LCD_SetCursor 0023  
                  __CFG_XINST$OFF 000000                 ?_epoch_to_caltime 00E8  
      __size_of_charge_time_count 0048             caltime_to_epoch@epoch 00EA  
                    ?_ringbuf_pop 0009                      ?_ringbuf_num 0001  
                    ?_ringbuf_put 0009             caltime_to_epoch@month 00EE  
                          ___lmul 385A                   _caltime_to_RTCC 2BAC  
                          ___wmul 3E30                ??_epoch_to_caltime 00EC  
               __end_of_UART_init 40BA                         ??___awdiv 0023  
                       ??___awmod 0023      __end_of_RTCC_adjust_time_dec 20E2  
    __end_of_RTCC_adjust_time_inc 1E7E                            _d_to_x 4056  
                       ??___lldiv 001F                      ?_timer0_init 0001  
                       ??___llmod 001F                 __end_of_RTCC_init 3EFA  
                    ?_timer1_init 001F                         ??___lwdiv 0023  
               __end_of_RTCC_loop 3CF6                         ??___lwmod 0023  
                    ?_timer3_init 0001                            _lchika 2906  
                _normal_mode_loop 30FC                            clear_0 38D6  
                          clear_1 38E2                            clear_2 38EE  
                 __CFG_CLKOEC$OFF 000000                  ___awdiv@quotient 00C9  
                 ___awmod@divisor 0021                   ??_sw_flag_clear 0021  
            __size_of_display_LCD 04D4                   ___awmod@counter 00C7  
                          _x_to_d 40F0                            _rx_buf 00A4  
                          _tx_buf 01C8              __size_of_display_dec 0058  
                  i2___awdiv@sign 0006         __size_of_caltime_to_epoch 0288  
                    __pdataCOMRAM 003F                 __end_ofi2___awdiv 3666  
                       ?_I2C_Send 0001                         ?_I2C_Stop 0001  
               __end_ofi2___lldiv 36E8                 __end_ofi2___lwdiv 3B8E  
                    __mediumconst 0000                     _cut_time_flag 0037  
                       ?_I2C_init 0001         __end_of_I2C_LCD_SetCursor 3F26  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                         ?_ADC_init 0001  
                  ?_I2C_IdleCheck 0001                         ??_my_utoa 0023  
          delay_timer_interrupt@d 0001    RTCC_adjust_time_button@cnt_dec 010E  
            __CFG_LS48MHZ$SYS48X8 000000    RTCC_adjust_time_button@cnt_inc 010C  
                      __accesstop 0060           __end_of__initialization 392A  
                    CTMU_read@sum 00D5              __end_of_get_quot_rem 2ADA  
            __end_of_display_port 2BAC                     ___rparam_used 000001  
                 ??_I2C_LCD_Clear 00C9                   _RTCC_from_epoch 4034  
                   __end_ofi2_LED 3DFA              __CFG_WPEND$PAGE_WPFP 000000  
                  __pcstackCOMRAM 0001                i2___lldiv@dividend 0001  
                    __pidataBANK0 4166                         ?_UART_ISR 0001  
                 __CFG_DSWDTPS$G2 000000                        __end_of_IN 3F78  
                 _I2C_LCD_Command 3E66                __size_of_delay_set 0022  
                         ??i2_LED 0002           sleep_loop@prev_power_sw 0040  
                I2C_LCD_Command@c 00C7                        ??_I2C_Send 0021  
                      ??_I2C_Stop 0021                        ??_I2C_init 001F  
                       ?_Delay_ms 001F                        ??_ADC_init 001F  
      caltime_to_epoch@month_1995 00E9            RTCC_adjust_time_dec@ep 0102  
          RTCC_adjust_time_dec@ct 0100                i2___lldiv@quotient 0009  
          RTCC_adjust_time_inc@ep 0102            RTCC_adjust_time_inc@ct 0100  
              __size_of_main_init 007C                        __pbssBANK0 0060  
                      __pbssBANK1 01C8                         ?_Auto_cut 0001  
              __size_of_ctmu_loop 0102                         ISR@cnt_t0 009A  
                       ISR@cnt_t1 003F           __end_of_caltime_to_RTCC 2C7C  
                 _RTCC_to_caltime 325C              __size_of_integrating 009A  
           __end_of_weekday_3char 0F1D                           ?___lmul 00D4  
                      ??_UART_ISR 0010                           ?___wmul 00C7  
                         ?_d_to_x 0001                           ?_lchika 0001  
            I2C_LCD_SetCursor@col 00CC                    ___lmul@product 00DC  
            I2C_LCD_SetCursor@row 00C9                           ?_x_to_d 0001  
                    I2C_Send@data 0021                __CFG_OSC$INTOSCPLL 000000  
                 ??_I2C_IdleCheck 001F                        ??_Delay_ms 0021  
      __size_of_I2C_LCD_SetCursor 002C                __size_of_port_loop 026E  
          I2C_LCD_SetCursor@F8672 00FD                   __CFG_WDTPS$1024 000000  
                         _SPBRGH1 000F7F                           _SSP1ADD 000FC8  
                         _SSP1BUF 000FC9                           _RTCVALH 000F3B  
                         _RTCVALL 000F3A           ??_delay_timer_interrupt 0003  
         __end_of_RTCC_from_epoch 4056              timer1_init@prescaler 0021  
            _RTCC_adjust_time_dec 1E7E              _RTCC_adjust_time_inc 1C1A  
                      ??_Auto_cut 00CD                  __CFG_CFGPLLEN$ON 000000  
        ??_button_timer_interrupt 00E4                   integrating@port 0010  
               __end_of_delay_set 4034                     ?_month_length 00C9  
             epoch_to_caltime@day 00F0                 RTCC_from_epoch@ep 00FA  
               RTCC_from_epoch@ct 00F8               epoch_to_caltime@num 00F4  
                       _I2C_Start 3F26                           __Hparam 0000  
                         __Lparam 0000           __end_of_I2C_LCD_Command 3E9C  
                  display_LCD@str 0100                     ?_ringbuf_init 00C7  
                         ___awdiv 3306                   __size_of___lmul 0076  
                         ___awmod 36E8                           ___lldiv 2ECE  
                 __size_of___wmul 0036                           ___llmod 343C  
                         ___lwdiv 37E2                           ___lwmod 3BD8  
                 __size_of_d_to_x 0022                      __psmallconst 0F00  
            __size_of_ringbuf_pop 00AC              __size_of_ringbuf_num 00BC  
            __size_of_ringbuf_put 00B6                   __CFG_STVREN$OFF 000000  
                 __size_of_lchika 0100                 __end_of_main_init 37E2  
     epoch_to_caltime@month_cache 00FF                           __pcinit 38D0  
                         __ramtop 0F00              __size_of_timer0_init 0030  
                         _halfsec 00A1              __size_of_timer1_init 0044  
                         __ptext0 22CE                           __ptext1 2D4A  
                         __ptext2 30FC                           __ptext3 19AC  
                         __ptext4 3990                           __ptext5 3CF6  
                         __ptext6 4012                           __ptext7 3D7E  
                         __ptext8 0F88                           __ptext9 24A6  
                   I2C_LCD_Putc@c 00C7              __size_of_timer3_init 0026  
               __end_of_ctmu_loop 2804                   __size_of_x_to_d 0018  
                   I2C_LCD_Puts@s 00C7                         _T0CONbits 000FD5  
                    __size_of_ADC 0028                      __size_of_LED 003E  
                _time_change_flag 003B                  _caltime_to_epoch 1724  
                    __size_of_ISR 00EE                         _T1CONbits 000FCD  
                    __size_of_OUT 0052                           _cut_cnt 0084  
         __size_of_RTCC_from_RTCC 0022                         _T3CONbits 000F79  
                ___awmod@dividend 001F                         _T5CONbits 000F22  
                         _my_utoa 355C           __end_of_RTCC_to_caltime 3306  
                         lchika@i 000C             ?_RTCC_adjust_time_dec 0100  
           ?_RTCC_adjust_time_inc 0100             __size_of_get_quot_rem 00D4  
           __size_of_display_port 00D2              end_of_initialization 392A  
                      delay_set@d 001F                         _CTMU_init 3FA0  
                       _CTMU_read 2E10          __end_of_normal_mode_loop 31B0  
                    _CTMUCONHbits 000FB3                      _CTMUCONLbits 000FB2  
                  ??_month_length 00CA                    display_dec@dec 00F4  
                  display_dec@str 00EA                       sleep_loop@i 00F3  
                ?_caltime_to_RTCC 00CC                        ?_I2C_Start 0021  
                 ___lldiv@divisor 00CB              timer3_init@prescaler 0020  
                 ___lldiv@counter 00D3                    ??_ringbuf_init 001F  
               __end_of_port_loop 1C1A                        _sleep_flag 003A  
                         postdec1 000FE5                           postdec2 000FDD  
                      _sleep_loop 2D4A              sw_flag_clear@bit_and 001F  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE                         _PORTBbits 000F81  
                       _UART_init 409A                  __CFG_DSBOREN$OFF 000000  
                       _RTCC_init 3ECC                         _RTCC_loop 3CB0  
                    _display_flag 0038         epoch_to_caltime@day_cache 009C  
                    _get_quot_rem 2A06                      _display_port 2ADA  
                      _print_port 0039         __size_of_epoch_to_caltime 01EC  
                __CFG_CPUDIV$OSC1 000000                 __size_of_I2C_Send 0016  
               __size_of_I2C_Stop 000A                         i2___awdiv 35E2  
               __size_of_I2C_init 0012                 i2___lwdiv@divisor 0003  
                       i2___lldiv 3666                 __size_of_ADC_init 001C  
                       i2___lwdiv 3B3C                 i2___lwdiv@counter 0007  
                ?_RTCC_from_epoch 00F8                        ?_CTMU_init 0001  
                      ?_CTMU_read 001F                         Auto_cut@i 00CF  
 __size_of_button_timer_interrupt 02C8           timer1_init@clock_select 001F  
                __CFG_IOL1WAY$OFF 000000                i2___awdiv@dividend 0001  
             __CFG_MSSP7B_EN$MSK7 000000                  ?_I2C_LCD_Command 0001  
                  ringbuf_init@rb 00C7                        lchika@cntf 0097  
                   ??_display_LCD 0023                    ringbuf_pop@ret 000F  
                   ??_display_dec 0023                    __end_of___lmul 38D0  
        ?_RTCC_adjust_time_button 010A          ?_RTCC_adjust_time_cursor 0001  
                  __end_of___wmul 3E66                     ?_sw_flag_read 001F  
                  __end_of_d_to_x 4078                     __pidataCOMRAM 4169  
               __size_of_UART_ISR 004A          ?_RTCC_adjust_time_toggle 0001  
                  __end_of_lchika 2A06                        ?_UART_init 0001  
                      ?_RTCC_init 0001                        ?_RTCC_loop 0001  
                __CFG_DSWDTEN$OFF 000000             __end_of_sw_flag_clear 3D3A  
                  __end_of_x_to_d 4108             epoch_to_caltime@month 00F3  
             start_initialization 38D0                        CTMU_read@i 00D9  
                month_length@year 00CE                       __end_of_ADC 3FA0  
              i2___awdiv@quotient 0007                       __end_of_LED 3DBC  
                     __end_of_ISR 00F6                       __end_of_OUT 3B3C  
                   ?_I2C_LCD_Putc 0001                     ?_I2C_LCD_Puts 00C7  
          ??_RTCC_adjust_time_dec 0104            ??_RTCC_adjust_time_inc 0104  
                   ?_I2C_LCD_init 0001                     UART_ISR@ascii 0010  
                      ?i2___awdiv 0001                 __size_of_Delay_ms 0024  
                      ?i2___lldiv 0001                  ?_RTCC_to_caltime 0021  
                      ?i2___lwdiv 0001                   ___llmod@divisor 00D8  
               __size_of_Auto_cut 0102                       ??_I2C_Start 0022  
                 ___llmod@counter 001F             __end_of_I2C_LCD_Clear 40F0  
                        ??___lmul 0023                       ?_sleep_loop 0001  
                        ??___wmul 0023                          ??_d_to_x 0023  
                  ??_sw_flag_read 0021                 __CFG_ADCSEL$BIT12 000000  
                     __pdataBANK0 00FD                          ??_lchika 0009  
          _button_timer_interrupt 145C                          ??_x_to_d 001F  
            __end_of_month_length 2D4A                    _RTCC_from_RTCC 4078  
             __end_of_display_LCD 145C               __end_of_display_dec 3A42  
                     __pbssCOMRAM 0023               RTCC_to_caltime@dumy 00C7  
                        LED@value 001F                     __pcstackBANK0 00C7  
                   __pcstackBANK1 0100                    ??_I2C_LCD_Putc 0023  
                sw_flag_read@port 0021                    ??_I2C_LCD_Puts 00C9  
                  ??_I2C_LCD_init 0023                       _caltime_now 00AC  
                   _delay_display 003C              __end_of_ringbuf_init 3A96  
                     _charge_time 006C                       ??_CTMU_init 001F  
                     ??_CTMU_read 0021    __size_of_delay_timer_interrupt 0048  
   __end_of_delay_timer_interrupt 3C68                     ??_integrating 000E  
           RTCC_adjust_time_dec@i 0109             RTCC_adjust_time_inc@i 0109  
        __end_of_caltime_to_epoch 19AC                   millis_timer@cnt 0034  
                ___lwdiv@dividend 00DA   __end_of_RTCC_adjust_time_button 2702  
 __end_of_RTCC_adjust_time_cursor 3990                         _delay_set 4012  
                       _edit_flag 00A0                         __pintcode 0008  
 __end_of_RTCC_adjust_time_toggle 411E                          ?___awdiv 001F  
                        ?___awmod 001F                          ?___lldiv 00C7  
              charge_time_count@i 0003                          ?___llmod 00D4  
                        ?___lwdiv 00DA                          ?___lwmod 001F  
                 I2C_LCD_Putc@ans 00C8            __end_of_RTCC_from_RTCC 409A  
                 I2C_LCD_Puts@ans 00CA                       ??_UART_init 001F  
                     ??_RTCC_init 001F                       ??_RTCC_loop 0023  
                     __smallconst 0F00                    __size_ofi2_LED 003E  
                       _epoch_now 00C3                         _main_init 3766  
                     I2C_Start@rw 0021                  _epoch_to_caltime 20E2  
                        _I2C_Send 411E                          OUT@value 001F  
                        _I2C_Stop 415C              __CFG_RTCOSC$T1OSCREF 000000  
                       _ctmu_flag 0036                          _I2C_init 414A  
                _display_LCD$3144 010A                         _ctmu_loop 2702  
                        _ADC_init 40BA             __end_of_I2C_IdleCheck 414A  
                     _PADCFG1bits 000F3C                          ?_my_utoa 00E1  
                ___lwdiv@quotient 00DF                       ??i2___awdiv 0005  
                     ??i2___lldiv 0009                       ??i2___lwdiv 0005  
             __size_of_sleep_loop 00C6                       __size_of_IN 0028  
                       d_to_x@dec 00CB                          _CTMUCONH 000FB3  
                        _CTMUCONL 000FB2                          _CTMUICON 000FB1  
               ?_normal_mode_loop 0001          ringbuf_init@internal_buf 00C9  
                  ___wmul@product 00CB                ??_normal_mode_loop 0023  
                        _IPR1bits 000F9F                          _IPR2bits 000FA2  
                        _PIE1bits 000F9D                          _PIE2bits 000FA0  
                        _IPR5bits 000F99                          _PIE5bits 000F91  
                        i2u420_40 3DD4                          i2u422_40 3DE0  
                      ?_delay_set 001F                          _PIR1bits 000F9E  
                        i2u418_40 3DC8                          _PIR2bits 000FA1  
                        i2u453_40 3C92                          _PIR5bits 000F98  
      epoch_to_caltime@year_cache 00A3                     ??_ringbuf_pop 000B  
                   ??_ringbuf_num 0003                     ??_ringbuf_put 000C  
             __end_of_integrating 343C                 _display_time_0802 24A6  
                        _UART_ISR 3B8E                          _SSP1CON1 000FC6  
                        _SSP1CON2 000FC5                     ??_timer0_init 001F  
                   ??_timer1_init 0020                       _display_LCD 0F88  
                   ??_timer3_init 001F                          _SSP1STAT 000FC7  
              ?_display_time_0802 00F5                       _display_dec 39EA  
                       _port_loop 19AC                   ?_RTCC_from_RTCC 00EF  
                      my_utoa@str 00E1                        _ADCON0bits 000FC2  
                      _ADCON1bits 000FC1                 ___wmul@multiplier 00C7  
                __CFG_SOSCSEL$LOW 000000    button_timer_interrupt@sw_value 00E3  
                      ?_main_init 0001               ??_display_time_0802 00F9  
               i2___awdiv@divisor 0003                          _Delay_ms 3FEE  
               i2___awdiv@counter 0005                        ?_ctmu_loop 0001  
                       lchika@cnt 0094                     ringbuf_pop@rb 0009  
                   ringbuf_num@rb 0001                     I2C_Start@adrs 0022  
                   ringbuf_put@rb 0009                 ___lmul@multiplier 00D4  
                     _INTCON2bits 000FF1                        port_loop@i 00C7  
            __end_of_sw_flag_read 39EA                          _Auto_cut 2804  
            epoch_to_caltime@year 00F2                       _auto_cut_ON 0029  
       __end_of_display_time_0802 25DE                          __Hrparam 0000  
                     _ctmu_value0 002C                       _ctmu_value1 002E  
                     _ctmu_value2 0030                       _ctmu_valuem 0032  
                        __Lrparam 0000              __end_of_I2C_LCD_Putc 3E30  
            __end_of_I2C_LCD_Puts 355C                     _weekday_3char 0F01  
            __end_of_I2C_LCD_init 3AEA             __size_of_month_length 00CE  
        __size_of_caltime_to_RTCC 00D0                  __size_of___awdiv 009C  
                __size_of___awmod 007E                 I2C_IdleCheck@mask 0020  
                __size_of___lldiv 00BC                  __size_of___llmod 0094  
                __size_of___lwdiv 0078                  __size_of___lwmod 0048  
                      ?_port_loop 0001               __end_of_ringbuf_pop 325C  
             __end_of_ringbuf_num 3046               __end_of_ringbuf_put 30FC  
             __end_of_timer0_init 3ECC             __size_of_ringbuf_init 0054  
             __end_of_timer1_init 3D7E               __end_of_timer3_init 3FEE  
                      i2LED@value 0001                   ___lwdiv@divisor 00DC  
                 ___lwdiv@counter 00DE              timer0_init@prescaler 0020  
                        __ptext10 39EA                          __ptext11 355C  
                        __ptext20 37E2                          __ptext12 3BD8  
                        __ptext21 2E10                          __ptext13 3DFA  
                        __ptext30 2BAC                          __ptext22 25DE  
                        __ptext14 2ADA                          __ptext31 4056  
                        __ptext23 4108                          __ptext15 3EFA  
                        __ptext40 3FC8                          __ptext32 3306  
                        __ptext24 1C1A                          __ptext16 34D0  
                        __ptext41 3D3A                          __ptext33 3934  
                        __ptext25 1E7E                          __ptext17 343C  
                        __ptext50 415C                          __ptext42 3E9C  
                        __ptext34 2804                          __ptext26 4034  
                        __ptext18 2702                          __ptext51 3F26  
                        __ptext43 3A42                          __ptext35 3E30  
                        __ptext27 20E2                          __ptext19 145C  
                        __ptext60 2C7C                          __ptext52 411E  
                        __ptext44 409A                          __ptext36 3AEA  
                        __ptext28 2A06                          __ptext61 36E8  
                        __ptext53 4134                          __ptext45 3ECC  
                        __ptext37 3F50                          __ptext29 2ECE  
                        __ptext70 33A2                          __ptext62 385A  
                        __ptext54 3FEE                          __ptext46 414A  
                        __ptext38 3F78                          __ptext71 3666  
                        __ptext63 325C                          __ptext55 3FA0  
                        __ptext47 3A96                          __ptext39 3766  
                        __ptext72 3C20                          __ptext64 40F0  
                        __ptext56 40BA                          __ptext48 40D6  
                        __ptext73 3C68                          __ptext57 3CB0  
                        __ptext49 3E66                          __ptext74 3B8E  
                        __ptext66 2906                          __ptext58 4078  
                        __ptext75 3046                          __ptext67 3B3C  
                        __ptext59 1724                          __ptext76 31B0  
                        __ptext68 35E2                          __ptext77 2F8A  
                        __ptext69 3DBC                      _SSP1CON2bits 000FC5  
__size_of_RTCC_adjust_time_button 0124  __size_of_RTCC_adjust_time_cursor 005C  
                __size_of_my_utoa 0086  __size_of_RTCC_adjust_time_toggle 0016  
           RTCC_loop@prev_halfsec 009E                       _integrating 33A2  
                   __size_of_main 01D8                      _month_length 2C7C  
        __size_of_RTCC_from_epoch 0022                       ??_delay_set 0023  
                    ??_sleep_loop 0023           ?_button_timer_interrupt 00E1  
                        int$flags 0041                          _out_flag 0091  
                    _ringbuf_init 3A42                         x_to_d@hex 0020  
        __size_of_I2C_LCD_Command 0036                    main_init@txbuf 0100  
                     ??_main_init 0023                       _OSCTUNEbits 000F9B  
                      _INTCONbits 000FF2              ringbuf_put@asciicode 000B  
                     ??_ctmu_loop 0023      I2C_LCD_SetCursor@row_offsets 00CA  
                      Delay_ms@ms 001F                   display_dec@edit 00E9  
                get_quot_rem@quot 00E0                 RTCC_to_caltime@ct 0021  
   __size_of_RTCC_adjust_time_dec 0264     __size_of_RTCC_adjust_time_inc 0264  
                        intlevel2 0000                __end_of_sleep_loop 2E10  
                ___lwmod@dividend 001F                  ___lldiv@dividend 00C7  
                      _RCSTA1bits 000FAC                 ?_caltime_to_epoch 00E0  
      __size_of_display_time_0802 0138          __end_of_epoch_to_caltime 22CE  
          __size_of_sw_flag_clear 0044          __size_of_RTCC_to_caltime 00AA  
                   _print_content 00A2                        _OSCCONbits 000FD3  
  __end_of_button_timer_interrupt 1724                ??_caltime_to_epoch 00E4  
                        my_utoa@d 00E6                          my_utoa@v 00E7  
                     _ringbuf_pop 31B0                       _ringbuf_num 2F8A  
                     _ringbuf_put 3046                       _timer0_init 3E9C  
                     _timer1_init 3D3A                       _timer3_init 3FC8  
                     ??_port_loop 0023                   get_quot_rem@div 00E2  
                 get_quot_rem@num 00E4                        _RTCCFGbits 000F3F  
                ___lldiv@quotient 00CF                 caltime_to_RTCC@ct 00CC  
                 ___lwmod@divisor 0021                 ??_caltime_to_RTCC 0023  
                 ___lwmod@counter 00C7             __size_of_sw_flag_read 005A  
          __size_of_I2C_LCD_Clear 001A   epoch_to_caltime@day_since_epoch 00EE  
                   my_utoa@digits 00E5             __size_of_I2C_LCD_Putc 0036  
           __size_of_I2C_LCD_Puts 008C             _delay_timer_interrupt 3C20  
           __size_of_I2C_LCD_init 0054                      my_utoa@value 00E3  
                ??_RTCC_from_RTCC 0023  
