

Microchip Technology PIC LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Nov 16 19:10:23 2015

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	intentry,global,class=CODE,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	dabs	1,0x7E,2
    32  0000                     	;# 
    33  0001                     	;# 
    34  0002                     	;# 
    35  0003                     	;# 
    36  0004                     	;# 
    37  0005                     	;# 
    38  0006                     	;# 
    39  0007                     	;# 
    40  0008                     	;# 
    41  0009                     	;# 
    42  000A                     	;# 
    43  000B                     	;# 
    44  000C                     	;# 
    45  000D                     	;# 
    46  0011                     	;# 
    47  0012                     	;# 
    48  0013                     	;# 
    49  0014                     	;# 
    50  0015                     	;# 
    51  0016                     	;# 
    52  0016                     	;# 
    53  0017                     	;# 
    54  0018                     	;# 
    55  0019                     	;# 
    56  001A                     	;# 
    57  001B                     	;# 
    58  001C                     	;# 
    59  001E                     	;# 
    60  001F                     	;# 
    61  008C                     	;# 
    62  008D                     	;# 
    63  0091                     	;# 
    64  0092                     	;# 
    65  0093                     	;# 
    66  0094                     	;# 
    67  0095                     	;# 
    68  0096                     	;# 
    69  0097                     	;# 
    70  0098                     	;# 
    71  0099                     	;# 
    72  009A                     	;# 
    73  009B                     	;# 
    74  009B                     	;# 
    75  009C                     	;# 
    76  009D                     	;# 
    77  009E                     	;# 
    78  010C                     	;# 
    79  010D                     	;# 
    80  0111                     	;# 
    81  0112                     	;# 
    82  0113                     	;# 
    83  0114                     	;# 
    84  0115                     	;# 
    85  0116                     	;# 
    86  0117                     	;# 
    87  0118                     	;# 
    88  0119                     	;# 
    89  011A                     	;# 
    90  011B                     	;# 
    91  011D                     	;# 
    92  011E                     	;# 
    93  018C                     	;# 
    94  018D                     	;# 
    95  0191                     	;# 
    96  0191                     	;# 
    97  0192                     	;# 
    98  0193                     	;# 
    99  0193                     	;# 
   100  0193                     	;# 
   101  0194                     	;# 
   102  0195                     	;# 
   103  0196                     	;# 
   104  0199                     	;# 
   105  019A                     	;# 
   106  019B                     	;# 
   107  019B                     	;# 
   108  019B                     	;# 
   109  019B                     	;# 
   110  019C                     	;# 
   111  019C                     	;# 
   112  019D                     	;# 
   113  019E                     	;# 
   114  019F                     	;# 
   115  020C                     	;# 
   116  020D                     	;# 
   117  0211                     	;# 
   118  0211                     	;# 
   119  0212                     	;# 
   120  0212                     	;# 
   121  0213                     	;# 
   122  0213                     	;# 
   123  0214                     	;# 
   124  0214                     	;# 
   125  0215                     	;# 
   126  0215                     	;# 
   127  0215                     	;# 
   128  0216                     	;# 
   129  0216                     	;# 
   130  0217                     	;# 
   131  0217                     	;# 
   132  0219                     	;# 
   133  021A                     	;# 
   134  021B                     	;# 
   135  021C                     	;# 
   136  021D                     	;# 
   137  021E                     	;# 
   138  021F                     	;# 
   139  0291                     	;# 
   140  0291                     	;# 
   141  0292                     	;# 
   142  0293                     	;# 
   143  0294                     	;# 
   144  0295                     	;# 
   145  0295                     	;# 
   146  0296                     	;# 
   147  0298                     	;# 
   148  0298                     	;# 
   149  0299                     	;# 
   150  029A                     	;# 
   151  029B                     	;# 
   152  029C                     	;# 
   153  029C                     	;# 
   154  029D                     	;# 
   155  029E                     	;# 
   156  029E                     	;# 
   157  0311                     	;# 
   158  0311                     	;# 
   159  0312                     	;# 
   160  0313                     	;# 
   161  0318                     	;# 
   162  0318                     	;# 
   163  0319                     	;# 
   164  031A                     	;# 
   165  0394                     	;# 
   166  0395                     	;# 
   167  0396                     	;# 
   168  039A                     	;# 
   169  039C                     	;# 
   170  039D                     	;# 
   171  039E                     	;# 
   172  039F                     	;# 
   173  0415                     	;# 
   174  0416                     	;# 
   175  0417                     	;# 
   176  041C                     	;# 
   177  041D                     	;# 
   178  041E                     	;# 
   179  0FE4                     	;# 
   180  0FE5                     	;# 
   181  0FE6                     	;# 
   182  0FE7                     	;# 
   183  0FE8                     	;# 
   184  0FE9                     	;# 
   185  0FEA                     	;# 
   186  0FEB                     	;# 
   187  0FED                     	;# 
   188  0FEE                     	;# 
   189  0FEF                     	;# 
   190                           
   191                           	psect	stringtext
   192  043A                     __pstringtext:	
   193  043A                     _dpowers:	
   194  043A  3401               	retlw	1
   195  043B  3400               	retlw	0
   196  043C  340A               	retlw	10
   197  043D  3400               	retlw	0
   198  043E  3464               	retlw	100
   199  043F  3400               	retlw	0
   200  0440  34E8               	retlw	232
   201  0441  3403               	retlw	3
   202  0442  3410               	retlw	16
   203  0443  3427               	retlw	39
   204  0444                     __end_of_dpowers:	
   205  000B                     _INTCONbits	set	11
   206  0011                     _PIR1bits	set	17
   207  0018                     _T1CONbits	set	24
   208  0015                     _TMR0	set	21
   209  0017                     _TMR1H	set	23
   210  0016                     _TMR1L	set	22
   211  008D                     _RCIF	set	141
   212  008B                     _SSP1IF	set	139
   213  005A                     _TMR0IF	set	90
   214  009B                     _ADRES	set	155
   215  009D                     _ADCON0bits	set	157
   216  009E                     _ADCON1bits	set	158
   217  0095                     _OPTION_REGbits	set	149
   218  0099                     _OSCCON	set	153
   219  0091                     _PIE1bits	set	145
   220  008C                     _TRISA	set	140
   221  008D                     _TRISB	set	141
   222  011D                     _APFCON0bits	set	285
   223  011E                     _APFCON1bits	set	286
   224  0117                     _FVRCON	set	279
   225  010C                     _LATAbits	set	268
   226  018C                     _ANSELA	set	396
   227  018D                     _ANSELB	set	397
   228  0199                     _RCREG	set	409
   229  019D                     _RCSTA	set	413
   230  019C                     _SPBRGH	set	412
   231  019B                     _SPBRGL	set	411
   232  019A                     _TXREG	set	410
   233  019E                     _TXSTA	set	414
   234  0CFB                     _BRG16	set	3323
   235  0CEF                     _SPEN	set	3311
   236  0211                     _SSP1BUF	set	529
   237  0215                     _SSP1CON1bits	set	533
   238  0214                     _SSP1STATbits	set	532
   239  020C                     _WPUA	set	524
   240  020D                     _WPUB	set	525
   241  0444                     STR_1:	
   242  0444  3474               	retlw	116	;'t'
   243  0445  343D               	retlw	61	;'='
   244  0446  3425               	retlw	37	;'%'
   245  0447  3464               	retlw	100	;'d'
   246  0448  340A               	retlw	10
   247  0449  3400               	retlw	0
   248                           
   249                           ; #config settings
   250  0000                     
   251                           	psect	cinit
   252  0024                     start_initialization:	
   253  0024                     __initialization:	
   254                           
   255                           ; Clear objects allocated to BANK0
   256  0024  3046               	movlw	low __pbssBANK0
   257  0025  0084               	movwf	4
   258  0026  3000               	movlw	high __pbssBANK0
   259  0027  0085               	movwf	5
   260  0028  3017               	movlw	23
   261  0029  3184  2464         	fcall	clear_ram0
   262  002B                     end_of_initialization:	
   263                           ;End of C runtime variable initialization code
   264                           
   265  002B                     __end_of__initialization:	
   266  002B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   267  002C  0020               	movlb	0
   268  002D  3181  29A9         	ljmp	_main	;jump to C main() function
   269                           
   270                           	psect	bssBANK0
   271  0046                     __pbssBANK0:	
   272  0046                     _rx_buf:	
   273  0046                     	ds	7
   274  004D                     _ms:	
   275  004D                     	ds	4
   276  0051                     _d1:	
   277  0051                     	ds	3
   278  0054                     millis_timer@cnt:	
   279  0054                     	ds	2
   280  0056                     _tx_buf:	
   281  0056                     	ds	7
   282                           
   283                           	psect	clrtext
   284  0464                     clear_ram0:	
   285                           ;	Called with FSR0 containing the base address, and
   286                           ;	WREG with the size to clear
   287                           
   288  0464  0064               	clrwdt	;clear the watchdog before getting into this loop
   289  0465                     clrloop0:	
   290  0465  0180               	clrf	0	;clear RAM location pointed to by FSR
   291  0466  3101               	addfsr 0,1
   292  0467  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   293  0468  2C65               	goto	clrloop0	;have we reached the end yet?
   294  0469  3400               	retlw	0	;all done for this memory range, return
   295                           
   296                           	psect	cstackBANK1
   297  00A0                     __pcstackBANK1:	
   298  00A0                     main@buf:	
   299                           
   300                           ; 30 bytes @ 0x0
   301  00A0                     	ds	30
   302  00BE                     main@cbuf:	
   303                           
   304                           ; 50 bytes @ 0x1E
   305  00BE                     	ds	50
   306                           
   307                           	psect	cstackCOMMON
   308  0070                     __pcstackCOMMON:	
   309  0070                     ?_UART_init:	
   310  0070                     ?_interrupt_TXIF:	
   311                           ; 0 bytes @ 0x0
   312                           
   313  0070                     ?_tx_send:	
   314                           ; 0 bytes @ 0x0
   315                           
   316  0070                     ?_tx_sends:	
   317                           ; 0 bytes @ 0x0
   318                           
   319  0070                     ?_SPI_init:	
   320                           ; 0 bytes @ 0x0
   321                           
   322  0070                     ?_SPI_TM_init:	
   323                           ; 0 bytes @ 0x0
   324                           
   325  0070                     ?_isr:	
   326                           ; 0 bytes @ 0x0
   327                           
   328  0070                     ?_main:	
   329                           ; 0 bytes @ 0x0
   330                           
   331  0070                     ?_ringbuf_pop:	
   332                           ; 0 bytes @ 0x0
   333                           
   334  0070                     ?_SPI_Transfer:	
   335                           ; 1 bytes @ 0x0
   336                           
   337  0070                     ?i1_ringbuf_num:	
   338                           ; 1 bytes @ 0x0
   339                           
   340                           
   341                           ; 2 bytes @ 0x0
   342  0070                     	ds	2
   343  0072                     ??i1_ringbuf_num:	
   344                           
   345                           ; 0 bytes @ 0x2
   346  0072                     	ds	4
   347  0076                     i1ringbuf_num@rb:	
   348                           
   349                           ; 1 bytes @ 0x6
   350  0076                     	ds	1
   351  0077                     ??_ringbuf_pop:	
   352  0077                     ?i1_ringbuf_put:	
   353                           ; 0 bytes @ 0x7
   354                           
   355  0077                     i1ringbuf_put@asciicode:	
   356                           ; 0 bytes @ 0x7
   357                           
   358                           
   359                           ; 1 bytes @ 0x7
   360  0077                     	ds	1
   361  0078                     ??i1_ringbuf_put:	
   362                           
   363                           ; 0 bytes @ 0x8
   364  0078                     	ds	5
   365  007D                     ??_interrupt_TXIF:	
   366                           
   367                           ; 0 bytes @ 0xD
   368  007D                     	ds	1
   369                           
   370                           	psect	cstackBANK0
   371  0020                     __pcstackBANK0:	
   372  0020                     ringbuf_pop@ret:	
   373  0020                     i1ringbuf_put@rb:	
   374                           ; 1 bytes @ 0x0
   375                           
   376                           
   377                           ; 1 bytes @ 0x0
   378  0020                     	ds	1
   379  0021                     ??_tx_send:	
   380  0021                     ringbuf_pop@rb:	
   381                           ; 0 bytes @ 0x1
   382                           
   383                           
   384                           ; 1 bytes @ 0x1
   385  0021                     	ds	1
   386  0022                     tx_send@asciicode:	
   387                           
   388                           ; 1 bytes @ 0x2
   389  0022                     	ds	1
   390  0023                     ??_isr:	
   391                           
   392                           ; 0 bytes @ 0x3
   393  0023                     	ds	2
   394  0025                     isr@ascii:	
   395                           
   396                           ; 1 bytes @ 0x5
   397  0025                     	ds	1
   398  0026                     ?_ringbuf_init:	
   399  0026                     ??_UART_init:	
   400                           ; 0 bytes @ 0x6
   401                           
   402  0026                     ?_Delay_ms:	
   403                           ; 0 bytes @ 0x6
   404                           
   405  0026                     ??_SPI_init:	
   406                           ; 0 bytes @ 0x6
   407                           
   408  0026                     ??_SPI_Transfer:	
   409                           ; 0 bytes @ 0x6
   410                           
   411  0026                     ?_ringbuf_num:	
   412                           ; 0 bytes @ 0x6
   413                           
   414  0026                     ?___lwdiv:	
   415                           ; 2 bytes @ 0x6
   416                           
   417  0026                     ringbuf_init@internal_buf:	
   418                           ; 2 bytes @ 0x6
   419                           
   420  0026                     SPI_init@mode:	
   421                           ; 1 bytes @ 0x6
   422                           
   423  0026                     Delay_ms@ms:	
   424                           ; 1 bytes @ 0x6
   425                           
   426  0026                     ___lwdiv@divisor:	
   427                           ; 2 bytes @ 0x6
   428                           
   429                           
   430                           ; 2 bytes @ 0x6
   431  0026                     	ds	1
   432  0027                     SPI_Transfer@txdata:	
   433  0027                     ringbuf_init@bufsize:	
   434                           ; 1 bytes @ 0x7
   435                           
   436                           
   437                           ; 2 bytes @ 0x7
   438  0027                     	ds	1
   439  0028                     ??_ringbuf_num:	
   440  0028                     ??_Delay_ms:	
   441                           ; 0 bytes @ 0x8
   442                           
   443  0028                     SPI_Transfer@rxdata:	
   444                           ; 0 bytes @ 0x8
   445                           
   446  0028                     ___lwdiv@dividend:	
   447                           ; 1 bytes @ 0x8
   448                           
   449                           
   450                           ; 2 bytes @ 0x8
   451  0028                     	ds	1
   452  0029                     ??_ringbuf_init:	
   453  0029                     ??_SPI_TM_init:	
   454                           ; 0 bytes @ 0x9
   455                           
   456  0029                     ?_SPI_TM_Read:	
   457                           ; 0 bytes @ 0x9
   458                           
   459                           
   460                           ; 2 bytes @ 0x9
   461  0029                     	ds	1
   462  002A                     ??___lwdiv:	
   463  002A                     ringbuf_init@rb:	
   464                           ; 0 bytes @ 0xA
   465                           
   466  002A                     SPI_TM_init@dumy:	
   467                           ; 1 bytes @ 0xA
   468                           
   469                           
   470                           ; 1 bytes @ 0xA
   471  002A                     	ds	1
   472  002B                     ??_SPI_TM_Read:	
   473  002B                     ___lwdiv@quotient:	
   474                           ; 0 bytes @ 0xB
   475                           
   476                           
   477                           ; 2 bytes @ 0xB
   478  002B                     	ds	1
   479  002C                     ringbuf_num@rb:	
   480                           
   481                           ; 1 bytes @ 0xC
   482  002C                     	ds	1
   483  002D                     ?_ringbuf_put:	
   484  002D                     ringbuf_put@asciicode:	
   485                           ; 0 bytes @ 0xD
   486                           
   487  002D                     ___lwdiv@counter:	
   488                           ; 1 bytes @ 0xD
   489                           
   490                           
   491                           ; 1 bytes @ 0xD
   492  002D                     	ds	1
   493  002E                     ??_ringbuf_put:	
   494  002E                     ?___lwmod:	
   495                           ; 0 bytes @ 0xE
   496                           
   497  002E                     ___lwmod@divisor:	
   498                           ; 2 bytes @ 0xE
   499                           
   500                           
   501                           ; 2 bytes @ 0xE
   502  002E                     	ds	2
   503  0030                     ___lwmod@dividend:	
   504                           
   505                           ; 2 bytes @ 0x10
   506  0030                     	ds	2
   507  0032                     ??___lwmod:	
   508  0032                     SPI_TM_Read@th:	
   509                           ; 0 bytes @ 0x12
   510                           
   511                           
   512                           ; 1 bytes @ 0x12
   513  0032                     	ds	1
   514  0033                     SPI_TM_Read@tl:	
   515  0033                     ___lwmod@counter:	
   516                           ; 1 bytes @ 0x13
   517                           
   518                           
   519                           ; 1 bytes @ 0x13
   520  0033                     	ds	1
   521  0034                     ?_sprintf:	
   522  0034                     ringbuf_put@rb:	
   523                           ; 2 bytes @ 0x14
   524                           
   525  0034                     sprintf@f:	
   526                           ; 1 bytes @ 0x14
   527                           
   528                           
   529                           ; 2 bytes @ 0x14
   530  0034                     	ds	1
   531  0035                     ??_tx_sends:	
   532                           
   533                           ; 0 bytes @ 0x15
   534  0035                     	ds	1
   535  0036                     tx_sends@asciicode:	
   536                           
   537                           ; 1 bytes @ 0x16
   538  0036                     	ds	2
   539  0038                     ??_sprintf:	
   540                           
   541                           ; 0 bytes @ 0x18
   542  0038                     	ds	4
   543  003C                     sprintf@ap:	
   544                           
   545                           ; 1 bytes @ 0x1C
   546  003C                     	ds	1
   547  003D                     sprintf@flag:	
   548                           
   549                           ; 1 bytes @ 0x1D
   550  003D                     	ds	1
   551  003E                     sprintf@prec:	
   552                           
   553                           ; 1 bytes @ 0x1E
   554  003E                     	ds	1
   555  003F                     sprintf@val:	
   556                           
   557                           ; 2 bytes @ 0x1F
   558  003F                     	ds	2
   559  0041                     sprintf@sp:	
   560                           
   561                           ; 1 bytes @ 0x21
   562  0041                     	ds	1
   563  0042                     sprintf@c:	
   564                           
   565                           ; 1 bytes @ 0x22
   566  0042                     	ds	1
   567  0043                     ??_main:	
   568                           
   569                           ; 0 bytes @ 0x23
   570  0043                     	ds	1
   571  0044                     main@t:	
   572                           
   573                           ; 2 bytes @ 0x24
   574  0044                     	ds	2
   575                           
   576                           	psect	maintext
   577  01A9                     __pmaintext:	
   578 ;;
   579 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   580 ;;
   581 ;; *************** function _main *****************
   582 ;; Defined at:
   583 ;;		line 46 in file "PIC16F1827-SPI_TM01.c"
   584 ;; Parameters:    Size  Location     Type
   585 ;;		None
   586 ;; Auto vars:     Size  Location     Type
   587 ;;  cbuf           50   30[BANK1 ] unsigned char [50]
   588 ;;  t               2   36[BANK0 ] int 
   589 ;;  buf            30    0[BANK1 ] unsigned char [30]
   590 ;; Return value:  Size  Location     Type
   591 ;;		None               void
   592 ;; Registers used:
   593 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   594 ;; Tracked objects:
   595 ;;		On entry : B1F/0
   596 ;;		On exit  : 0/0
   597 ;;		Unchanged: 0/0
   598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   599 ;;      Params:         0       0       0       0       0       0
   600 ;;      Locals:         0       2      80       0       0       0
   601 ;;      Temps:          0       1       0       0       0       0
   602 ;;      Totals:         0       3      80       0       0       0
   603 ;;Total ram usage:       83 bytes
   604 ;; Hardware stack levels required when called:    7
   605 ;; This function calls:
   606 ;;		_Delay_ms
   607 ;;		_SPI_TM_Read
   608 ;;		_SPI_TM_init
   609 ;;		_SPI_init
   610 ;;		_UART_init
   611 ;;		_ringbuf_init
   612 ;;		_sprintf
   613 ;;		_tx_sends
   614 ;; This function is called by:
   615 ;;		Startup code after reset
   616 ;; This function uses a non-reentrant model
   617 ;;
   618                           
   619                           
   620                           ;psect for function _main
   621  01A9                     _main:	
   622                           
   623                           ;PIC16F1827-SPI_TM01.c: 47: OSCCON = 0x70;
   624                           
   625                           ;incstack = 0
   626                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   627  01A9  3070               	movlw	112
   628  01AA  0021               	movlb	1	; select bank1
   629  01AB  0099               	movwf	25	;volatile
   630                           
   631                           ;PIC16F1827-SPI_TM01.c: 48: ANSELA = 0x00;
   632  01AC  0023               	movlb	3	; select bank3
   633  01AD  018C               	clrf	12	;volatile
   634                           
   635                           ;PIC16F1827-SPI_TM01.c: 49: ANSELB = 0x00;
   636  01AE  018D               	clrf	13	;volatile
   637                           
   638                           ;PIC16F1827-SPI_TM01.c: 50: TRISA = 0x00;
   639  01AF  0021               	movlb	1	; select bank1
   640  01B0  018C               	clrf	12	;volatile
   641                           
   642                           ;PIC16F1827-SPI_TM01.c: 51: TRISB = 0x06;
   643  01B1  3006               	movlw	6
   644  01B2  008D               	movwf	13	;volatile
   645                           
   646                           ;PIC16F1827-SPI_TM01.c: 52: WPUA = TRISA;
   647  01B3  080C               	movf	12,w	;volatile
   648  01B4  0024               	movlb	4	; select bank4
   649  01B5  008C               	movwf	12	;volatile
   650                           
   651                           ;PIC16F1827-SPI_TM01.c: 53: WPUB = TRISB;
   652  01B6  0021               	movlb	1	; select bank1
   653  01B7  080D               	movf	13,w	;volatile
   654  01B8  0024               	movlb	4	; select bank4
   655  01B9  008D               	movwf	13	;volatile
   656                           
   657                           ;PIC16F1827-SPI_TM01.c: 54: OPTION_REGbits.nWPUEN = 0;
   658  01BA  0021               	movlb	1	; select bank1
   659  01BB  1395               	bcf	21,7	;volatile
   660                           
   661                           ;PIC16F1827-SPI_TM01.c: 55: APFCON0bits.RXDTSEL = 1;
   662  01BC  0022               	movlb	2	; select bank2
   663  01BD  179D               	bsf	29,7	;volatile
   664                           
   665                           ;PIC16F1827-SPI_TM01.c: 56: APFCON0bits.SDO1SEL = 1;
   666  01BE  171D               	bsf	29,6	;volatile
   667                           
   668                           ;PIC16F1827-SPI_TM01.c: 57: APFCON1bits.TXCKSEL = 1;
   669  01BF  141E               	bsf	30,0	;volatile
   670                           
   671                           ;PIC16F1827-SPI_TM01.c: 59: UART_init();
   672  01C0  3184  244A  3181   	fcall	_UART_init
   673                           
   674                           ;PIC16F1827-SPI_TM01.c: 60: SPI_init(0);
   675  01C3  3000               	movlw	0
   676  01C4  3183  237C  3181   	fcall	_SPI_init
   677                           
   678                           ;PIC16F1827-SPI_TM01.c: 62: char buf[30];
   679                           ;PIC16F1827-SPI_TM01.c: 63: ringbuf_init(&tx_buf, buf, sizeof (buf));
   680  01C7  30A0               	movlw	(low (main@buf| 0))& (0+255)
   681  01C8  0020               	movlb	0	; select bank0
   682  01C9  00C3               	movwf	??_main
   683  01CA  0843               	movf	??_main,w
   684  01CB  00A6               	movwf	ringbuf_init@internal_buf
   685  01CC  301E               	movlw	30
   686  01CD  00A7               	movwf	ringbuf_init@bufsize
   687  01CE  3000               	movlw	0
   688  01CF  00A8               	movwf	ringbuf_init@bufsize+1
   689  01D0  3056               	movlw	(low (_tx_buf| 0))& (0+255)
   690  01D1  3183  239F  3181   	fcall	_ringbuf_init
   691                           
   692                           ;PIC16F1827-SPI_TM01.c: 65: INTCONbits.GIE = 1;
   693  01D4  178B               	bsf	11,7	;volatile
   694                           
   695                           ;PIC16F1827-SPI_TM01.c: 67: SPI_TM_init();
   696  01D5  3183  23DA  3181   	fcall	_SPI_TM_init
   697                           
   698                           ;PIC16F1827-SPI_TM01.c: 68: Delay_ms(240);
   699  01D8  30F0               	movlw	240
   700  01D9  0020               	movlb	0	; select bank0
   701  01DA  00A6               	movwf	Delay_ms@ms
   702  01DB  3000               	movlw	0
   703  01DC                     L1:	
   704  01DC  00A7               	movwf	Delay_ms@ms+1
   705  01DD  3184  2425  3181   	fcall	_Delay_ms
   706                           
   707                           ;PIC16F1827-SPI_TM01.c: 71: char cbuf[50];
   708                           ;PIC16F1827-SPI_TM01.c: 72: int16_t t = SPI_TM_Read();
   709                           
   710                           ;PIC16F1827-SPI_TM01.c: 70: while (1) {
   711  01E0  3183  2352  3181   	fcall	_SPI_TM_Read
   712  01E3  0020               	movlb	0	; select bank0
   713  01E4  082A               	movf	?_SPI_TM_Read+1,w
   714  01E5  00C5               	movwf	main@t+1
   715  01E6  0829               	movf	?_SPI_TM_Read,w
   716  01E7  00C4               	movwf	main@t
   717                           
   718                           ;PIC16F1827-SPI_TM01.c: 73: sprintf(cbuf, "t=%d\n", t);
   719  01E8  3044               	movlw	low (STR_1| (0+32768))
   720  01E9  00B4               	movwf	sprintf@f
   721  01EA  3084               	movlw	high (STR_1| (0+32768))
   722  01EB  00B5               	movwf	sprintf@f+1
   723  01EC  0845               	movf	main@t+1,w
   724  01ED  00B7               	movwf	?_sprintf+3
   725  01EE  0844               	movf	main@t,w
   726  01EF  00B6               	movwf	?_sprintf+2
   727  01F0  30BE               	movlw	(low (main@cbuf| 0))& (0+255)
   728  01F1  3180  202F  3181   	fcall	_sprintf
   729                           
   730                           ;PIC16F1827-SPI_TM01.c: 74: tx_sends(&cbuf);
   731  01F4  30BE               	movlw	(low (main@cbuf| 0))& (0+255)
   732  01F5  3183  23BE  3181   	fcall	_tx_sends
   733                           
   734                           ;PIC16F1827-SPI_TM01.c: 75: Delay_ms(1000);
   735  01F8  30E8               	movlw	232
   736  01F9  0020               	movlb	0	; select bank0
   737  01FA  00A6               	movwf	Delay_ms@ms
   738  01FB  3003               	movlw	3
   739  01FC  29DC               	goto	L1
   740  01FD                     __end_of_main:	
   741                           
   742                           	psect	text1
   743  03BE                     __ptext1:	
   744 ;; *************** function _tx_sends *****************
   745 ;; Defined at:
   746 ;;		line 264 in file "../My_header\My_header.h"
   747 ;; Parameters:    Size  Location     Type
   748 ;;  asciicode       1    wreg     PTR const unsigned char 
   749 ;;		 -> main@cbuf(50), 
   750 ;; Auto vars:     Size  Location     Type
   751 ;;  asciicode       1   22[BANK0 ] PTR const unsigned char 
   752 ;;		 -> main@cbuf(50), 
   753 ;; Return value:  Size  Location     Type
   754 ;;		None               void
   755 ;; Registers used:
   756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   757 ;; Tracked objects:
   758 ;;		On entry : 0/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   762 ;;      Params:         0       0       0       0       0       0
   763 ;;      Locals:         0       1       0       0       0       0
   764 ;;      Temps:          0       1       0       0       0       0
   765 ;;      Totals:         0       2       0       0       0       0
   766 ;;Total ram usage:        2 bytes
   767 ;; Hardware stack levels used:    1
   768 ;; Hardware stack levels required when called:    6
   769 ;; This function calls:
   770 ;;		_ringbuf_put
   771 ;; This function is called by:
   772 ;;		_main
   773 ;; This function uses a non-reentrant model
   774 ;;
   775                           
   776                           
   777                           ;psect for function _tx_sends
   778  03BE                     _tx_sends:	
   779                           
   780                           ;incstack = 0
   781                           ; Regs used in _tx_sends: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   782                           ;tx_sends@asciicode stored from wreg
   783  03BE  0020               	movlb	0	; select bank0
   784  03BF  00B6               	movwf	tx_sends@asciicode
   785  03C0                     l1304:	
   786                           ;My_header\My_header.h: 265: while (*asciicode) {
   787                           
   788  03C0  0836               	movf	tx_sends@asciicode,w
   789  03C1  0086               	movwf	6
   790  03C2  0187               	clrf	7
   791  03C3  0801               	movf	1,w
   792  03C4  1903               	btfsc	3,2
   793  03C5  2BD7               	goto	l160
   794                           
   795                           ;My_header\My_header.h: 266: ringbuf_put(&tx_buf, *asciicode++);
   796  03C6  0836               	movf	tx_sends@asciicode,w
   797  03C7  0086               	movwf	6
   798  03C8  0187               	clrf	7
   799  03C9  0801               	movf	1,w
   800  03CA  00B5               	movwf	??_tx_sends
   801  03CB  0835               	movf	??_tx_sends,w
   802  03CC  00AD               	movwf	ringbuf_put@asciicode
   803  03CD  3056               	movlw	(low (_tx_buf| 0))& (0+255)
   804  03CE  3180  20FD  3183   	fcall	_ringbuf_put
   805  03D1  3001               	movlw	1
   806  03D2  0020               	movlb	0	; select bank0
   807  03D3  00B5               	movwf	??_tx_sends
   808  03D4  0835               	movf	??_tx_sends,w
   809  03D5  07B6               	addwf	tx_sends@asciicode,f
   810  03D6  2BC0               	goto	l1304
   811  03D7                     l160:	
   812                           
   813                           ;My_header\My_header.h: 267: }
   814                           ;My_header\My_header.h: 268: PIE1bits.TXIE = 1;
   815  03D7  0021               	movlb	1	; select bank1
   816  03D8  1611               	bsf	17,4	;volatile
   817  03D9  0008               	return
   818  03DA                     __end_of_tx_sends:	
   819                           
   820                           	psect	text2
   821  00FD                     __ptext2:	
   822 ;; *************** function _ringbuf_put *****************
   823 ;; Defined at:
   824 ;;		line 39 in file "../My_header\My_ringbuf.h"
   825 ;; Parameters:    Size  Location     Type
   826 ;;  rb              1    wreg     PTR struct ringbuf
   827 ;;		 -> tx_buf(7), 
   828 ;;  asciicode       1   13[BANK0 ] unsigned char 
   829 ;; Auto vars:     Size  Location     Type
   830 ;;  rb              1   20[BANK0 ] PTR struct ringbuf
   831 ;;		 -> tx_buf(7), 
   832 ;; Return value:  Size  Location     Type
   833 ;;		None               void
   834 ;; Registers used:
   835 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   836 ;; Tracked objects:
   837 ;;		On entry : 0/0
   838 ;;		On exit  : 0/0
   839 ;;		Unchanged: 0/0
   840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   841 ;;      Params:         0       1       0       0       0       0
   842 ;;      Locals:         0       1       0       0       0       0
   843 ;;      Temps:          0       6       0       0       0       0
   844 ;;      Totals:         0       8       0       0       0       0
   845 ;;Total ram usage:        8 bytes
   846 ;; Hardware stack levels used:    1
   847 ;; Hardware stack levels required when called:    5
   848 ;; This function calls:
   849 ;;		_ringbuf_num
   850 ;; This function is called by:
   851 ;;		_tx_sends
   852 ;;		_ringbuf_put_num
   853 ;;		_ringbuf_put_str
   854 ;; This function uses a non-reentrant model
   855 ;;
   856                           
   857                           
   858                           ;psect for function _ringbuf_put
   859  00FD                     _ringbuf_put:	
   860                           
   861                           ;incstack = 0
   862                           ; Regs used in _ringbuf_put: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   863                           ;ringbuf_put@rb stored from wreg
   864  00FD  0020               	movlb	0	; select bank0
   865  00FE  00B4               	movwf	ringbuf_put@rb
   866                           
   867                           ;My_header\My_ringbuf.h: 40: if (ringbuf_num(rb) < rb->size) {
   868  00FF  0A34               	incf	ringbuf_put@rb,w
   869  0100  0086               	movwf	6
   870  0101  0187               	clrf	7
   871  0102  3F40               	moviw [0]fsr1
   872  0103  00AE               	movwf	??_ringbuf_put
   873  0104  3F41               	moviw [1]fsr1
   874  0105  00AF               	movwf	??_ringbuf_put+1
   875  0106  0834               	movf	ringbuf_put@rb,w
   876  0107  3181  21FD  3180   	fcall	_ringbuf_num
   877  010A  0020               	movlb	0	; select bank0
   878  010B  082F               	movf	??_ringbuf_put+1,w
   879  010C  0227               	subwf	?_ringbuf_num+1,w
   880  010D  1D03               	skipz
   881  010E  2911               	goto	u525
   882  010F  082E               	movf	??_ringbuf_put,w
   883  0110  0226               	subwf	?_ringbuf_num,w
   884  0111                     u525:	
   885  0111  1803               	skipnc
   886  0112  0008               	return
   887                           
   888                           ;My_header\My_ringbuf.h: 41: rb->buf[rb->head] = asciicode;
   889  0113  082D               	movf	ringbuf_put@asciicode,w
   890  0114  00AE               	movwf	??_ringbuf_put
   891  0115  0834               	movf	ringbuf_put@rb,w
   892  0116  0086               	movwf	6
   893  0117  0187               	clrf	7
   894  0118  0834               	movf	ringbuf_put@rb,w
   895  0119  3E03               	addlw	3
   896  011A  0084               	movwf	4
   897  011B  0185               	clrf	5
   898  011C  0800               	movf	0,w
   899  011D  0701               	addwf	1,w
   900  011E  00AF               	movwf	??_ringbuf_put+1
   901  011F  082F               	movf	??_ringbuf_put+1,w
   902  0120  0086               	movwf	6
   903  0121  0187               	clrf	7
   904  0122  082E               	movf	??_ringbuf_put,w
   905  0123  0081               	movwf	1
   906                           
   907                           ;My_header\My_ringbuf.h: 42: if (rb->head + 1 < rb->size) rb->head++;
   908  0124  0A34               	incf	ringbuf_put@rb,w
   909  0125  0086               	movwf	6
   910  0126  0187               	clrf	7
   911  0127  3F40               	moviw [0]fsr1
   912  0128  00AE               	movwf	??_ringbuf_put
   913  0129  3F41               	moviw [1]fsr1
   914  012A  00AF               	movwf	??_ringbuf_put+1
   915  012B  0834               	movf	ringbuf_put@rb,w
   916  012C  3E03               	addlw	3
   917  012D  0086               	movwf	6
   918  012E  0187               	clrf	7
   919  012F  3F40               	moviw [0]fsr1
   920  0130  00B0               	movwf	??_ringbuf_put+2
   921  0131  3F41               	moviw [1]fsr1
   922  0132  00B1               	movwf	??_ringbuf_put+3
   923  0133  0830               	movf	??_ringbuf_put+2,w
   924  0134  3E01               	addlw	1
   925  0135  00B2               	movwf	??_ringbuf_put+4
   926  0136  3000               	movlw	0
   927  0137  3D31               	addwfc	??_ringbuf_put+3,w
   928  0138  00B3               	movwf	??_ringbuf_put+5
   929  0139  082F               	movf	??_ringbuf_put+1,w
   930  013A  0233               	subwf	??_ringbuf_put+5,w
   931  013B  1D03               	skipz
   932  013C  293F               	goto	u535
   933  013D  082E               	movf	??_ringbuf_put,w
   934  013E  0232               	subwf	??_ringbuf_put+4,w
   935  013F                     u535:	
   936  013F  1803               	skipnc
   937  0140  294B               	goto	l1174
   938  0141  0834               	movf	ringbuf_put@rb,w
   939  0142  3E03               	addlw	3
   940  0143  0086               	movwf	6
   941  0144  0187               	clrf	7
   942  0145  3001               	movlw	1
   943  0146  0781               	addwf	1,f
   944  0147  3141               	addfsr 1,1
   945  0148  1803               	skipnc
   946  0149  0A81               	incf	1,f
   947  014A  0008               	return
   948  014B                     l1174:	
   949                           
   950                           ;My_header\My_ringbuf.h: 43: else rb->head = 0;
   951  014B  0834               	movf	ringbuf_put@rb,w
   952  014C  3E03               	addlw	3
   953  014D  0086               	movwf	6
   954  014E  0187               	clrf	7
   955  014F  3000               	movlw	0
   956  0150  3FC0               	movwi [0]fsr1
   957  0151  3FC1               	movwi [1]fsr1
   958  0152  0008               	return
   959  0153                     __end_of_ringbuf_put:	
   960                           
   961                           	psect	text3
   962  01FD                     __ptext3:	
   963 ;; *************** function _ringbuf_num *****************
   964 ;; Defined at:
   965 ;;		line 31 in file "../My_header\My_ringbuf.h"
   966 ;; Parameters:    Size  Location     Type
   967 ;;  rb              1    wreg     PTR struct ringbuf
   968 ;;		 -> tx_buf(7), 
   969 ;; Auto vars:     Size  Location     Type
   970 ;;  rb              1   12[BANK0 ] PTR struct ringbuf
   971 ;;		 -> tx_buf(7), 
   972 ;; Return value:  Size  Location     Type
   973 ;;                  2    6[BANK0 ] unsigned int 
   974 ;; Registers used:
   975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
   976 ;; Tracked objects:
   977 ;;		On entry : 0/0
   978 ;;		On exit  : 0/0
   979 ;;		Unchanged: 0/0
   980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   981 ;;      Params:         0       2       0       0       0       0
   982 ;;      Locals:         0       1       0       0       0       0
   983 ;;      Temps:          0       4       0       0       0       0
   984 ;;      Totals:         0       7       0       0       0       0
   985 ;;Total ram usage:        7 bytes
   986 ;; Hardware stack levels used:    1
   987 ;; Hardware stack levels required when called:    4
   988 ;; This function calls:
   989 ;;		Nothing
   990 ;; This function is called by:
   991 ;;		_ringbuf_put
   992 ;;		_ringbuf_backspace
   993 ;; This function uses a non-reentrant model
   994 ;;
   995                           
   996                           
   997                           ;psect for function _ringbuf_num
   998  01FD                     _ringbuf_num:	
   999                           
  1000                           ;incstack = 0
  1001                           ; Regs used in _ringbuf_num: [wreg-fsr1h+status,2+status,0]
  1002                           ;ringbuf_num@rb stored from wreg
  1003  01FD  0020               	movlb	0	; select bank0
  1004  01FE  00AC               	movwf	ringbuf_num@rb
  1005                           
  1006                           ;My_header\My_ringbuf.h: 32: if (rb->head >= rb->tail) {
  1007  01FF  082C               	movf	ringbuf_num@rb,w
  1008  0200  3E05               	addlw	5
  1009  0201  0086               	movwf	6
  1010  0202  0187               	clrf	7
  1011  0203  3F40               	moviw [0]fsr1
  1012  0204  00A8               	movwf	??_ringbuf_num
  1013  0205  3F41               	moviw [1]fsr1
  1014  0206  00A9               	movwf	??_ringbuf_num+1
  1015  0207  082C               	movf	ringbuf_num@rb,w
  1016  0208  3E03               	addlw	3
  1017  0209  0086               	movwf	6
  1018  020A  0187               	clrf	7
  1019  020B  3F40               	moviw [0]fsr1
  1020  020C  00AA               	movwf	??_ringbuf_num+2
  1021  020D  3F41               	moviw [1]fsr1
  1022  020E  00AB               	movwf	??_ringbuf_num+3
  1023  020F  0829               	movf	??_ringbuf_num+1,w
  1024  0210  022B               	subwf	??_ringbuf_num+3,w
  1025  0211  1D03               	skipz
  1026  0212  2A15               	goto	u505
  1027  0213  0828               	movf	??_ringbuf_num,w
  1028  0214  022A               	subwf	??_ringbuf_num+2,w
  1029  0215                     u505:	
  1030  0215  1C03               	skipc
  1031  0216  2A2F               	goto	l1150
  1032                           
  1033                           ;My_header\My_ringbuf.h: 33: return (rb->head - rb->tail);
  1034  0217  082C               	movf	ringbuf_num@rb,w
  1035  0218  3E03               	addlw	3
  1036  0219  0086               	movwf	6
  1037  021A  0187               	clrf	7
  1038  021B  082C               	movf	ringbuf_num@rb,w
  1039  021C  3E05               	addlw	5
  1040  021D  0084               	movwf	4
  1041  021E  0185               	clrf	5
  1042  021F  3F00               	moviw [0]fsr0
  1043  0220  00A8               	movwf	??_ringbuf_num
  1044  0221  3F01               	moviw [1]fsr0
  1045  0222  00A9               	movwf	??_ringbuf_num+1
  1046  0223  09A8               	comf	??_ringbuf_num,f
  1047  0224  09A9               	comf	??_ringbuf_num+1,f
  1048  0225  0AA8               	incf	??_ringbuf_num,f
  1049  0226  1903               	skipnz
  1050  0227  0AA9               	incf	??_ringbuf_num+1,f
  1051  0228  3F40               	moviw [0]fsr1
  1052  0229  0728               	addwf	??_ringbuf_num,w
  1053  022A  00A6               	movwf	?_ringbuf_num
  1054  022B  3F41               	moviw [1]fsr1
  1055  022C  3D29               	addwfc	??_ringbuf_num+1,w
  1056  022D  00A7               	movwf	?_ringbuf_num+1
  1057                           
  1058                           ;My_header\My_ringbuf.h: 34: } else {
  1059  022E  0008               	return
  1060  022F                     l1150:	
  1061                           
  1062                           ;My_header\My_ringbuf.h: 35: return (rb->size + rb->head - rb->tail);
  1063  022F  082C               	movf	ringbuf_num@rb,w
  1064  0230  3E03               	addlw	3
  1065  0231  0086               	movwf	6
  1066  0232  0187               	clrf	7
  1067  0233  082C               	movf	ringbuf_num@rb,w
  1068  0234  3E05               	addlw	5
  1069  0235  0084               	movwf	4
  1070  0236  0185               	clrf	5
  1071  0237  3F00               	moviw [0]fsr0
  1072  0238  00A8               	movwf	??_ringbuf_num
  1073  0239  3F01               	moviw [1]fsr0
  1074  023A  00A9               	movwf	??_ringbuf_num+1
  1075  023B  09A8               	comf	??_ringbuf_num,f
  1076  023C  09A9               	comf	??_ringbuf_num+1,f
  1077  023D  0AA8               	incf	??_ringbuf_num,f
  1078  023E  1903               	skipnz
  1079  023F  0AA9               	incf	??_ringbuf_num+1,f
  1080  0240  0A2C               	incf	ringbuf_num@rb,w
  1081  0241  0084               	movwf	4
  1082  0242  0185               	clrf	5
  1083  0243  3F00               	moviw [0]fsr0
  1084  0244  0728               	addwf	??_ringbuf_num,w
  1085  0245  00AA               	movwf	??_ringbuf_num+2
  1086  0246  3F01               	moviw [1]fsr0
  1087  0247  3D29               	addwfc	??_ringbuf_num+1,w
  1088  0248  00AB               	movwf	??_ringbuf_num+3
  1089  0249  3F40               	moviw [0]fsr1
  1090  024A  072A               	addwf	??_ringbuf_num+2,w
  1091  024B  00A6               	movwf	?_ringbuf_num
  1092  024C  3F41               	moviw [1]fsr1
  1093  024D  3D2B               	addwfc	??_ringbuf_num+3,w
  1094  024E  00A7               	movwf	?_ringbuf_num+1
  1095  024F  0008               	return
  1096  0250                     __end_of_ringbuf_num:	
  1097                           
  1098                           	psect	text4
  1099  002F                     __ptext4:	
  1100 ;; *************** function _sprintf *****************
  1101 ;; Defined at:
  1102 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  1103 ;; Parameters:    Size  Location     Type
  1104 ;;  sp              1    wreg     PTR unsigned char 
  1105 ;;		 -> main@cbuf(50), 
  1106 ;;  f               2   20[BANK0 ] PTR const unsigned char 
  1107 ;;		 -> STR_1(6), 
  1108 ;; Auto vars:     Size  Location     Type
  1109 ;;  sp              1   33[BANK0 ] PTR unsigned char 
  1110 ;;		 -> main@cbuf(50), 
  1111 ;;  tmpval          4    0        struct .
  1112 ;;  val             2   31[BANK0 ] unsigned int 
  1113 ;;  cp              2    0        PTR const unsigned char 
  1114 ;;  len             2    0        unsigned int 
  1115 ;;  c               1   34[BANK0 ] char 
  1116 ;;  prec            1   30[BANK0 ] char 
  1117 ;;  flag            1   29[BANK0 ] unsigned char 
  1118 ;;  ap              1   28[BANK0 ] PTR void [1]
  1119 ;;		 -> ?_sprintf(2), 
  1120 ;; Return value:  Size  Location     Type
  1121 ;;                  2   20[BANK0 ] int 
  1122 ;; Registers used:
  1123 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1124 ;; Tracked objects:
  1125 ;;		On entry : 0/0
  1126 ;;		On exit  : 0/0
  1127 ;;		Unchanged: 0/0
  1128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1129 ;;      Params:         0       4       0       0       0       0
  1130 ;;      Locals:         0       7       0       0       0       0
  1131 ;;      Temps:          0       4       0       0       0       0
  1132 ;;      Totals:         0      15       0       0       0       0
  1133 ;;Total ram usage:       15 bytes
  1134 ;; Hardware stack levels used:    1
  1135 ;; Hardware stack levels required when called:    5
  1136 ;; This function calls:
  1137 ;;		___lwdiv
  1138 ;;		___lwmod
  1139 ;; This function is called by:
  1140 ;;		_main
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           
  1145                           ;psect for function _sprintf
  1146  002F                     _sprintf:	
  1147                           
  1148                           ;incstack = 0
  1149                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1150                           ;sprintf@sp stored from wreg
  1151  002F  0020               	movlb	0	; select bank0
  1152  0030  00C1               	movwf	sprintf@sp
  1153                           
  1154                           ;doprnt.c: 494: va_list ap;
  1155                           ;doprnt.c: 499: signed char c;
  1156                           ;doprnt.c: 506: signed char prec;
  1157                           ;doprnt.c: 508: unsigned char flag;
  1158                           ;doprnt.c: 523: union {
  1159                           ;doprnt.c: 524: unsigned long vd;
  1160                           ;doprnt.c: 525: double integ;
  1161                           ;doprnt.c: 526: } tmpval;
  1162                           ;doprnt.c: 528: unsigned int val;
  1163                           ;doprnt.c: 529: unsigned len;
  1164                           ;doprnt.c: 530: const char * cp;
  1165                           ;doprnt.c: 533: *ap = __va_start();
  1166  0031  3036               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  1167  0032  00B8               	movwf	??_sprintf
  1168  0033  0838               	movf	??_sprintf,w
  1169  0034  00BC               	movwf	sprintf@ap
  1170  0035                     l1394:	
  1171                           ;doprnt.c: 536: while(c = *f++) {
  1172                           
  1173  0035  0835               	movf	sprintf@f+1,w
  1174  0036  00B9               	movwf	??_sprintf+1
  1175  0037  0834               	movf	sprintf@f,w
  1176  0038  00B8               	movwf	??_sprintf
  1177  0039  0AB4               	incf	sprintf@f,f
  1178  003A  1903               	skipnz
  1179  003B  0AB5               	incf	sprintf@f+1,f
  1180  003C  0838               	movf	??_sprintf,w
  1181  003D  0084               	movwf	4
  1182  003E  0839               	movf	??_sprintf+1,w
  1183  003F  0085               	movwf	5
  1184  0040  0800               	movf	0,w	;code access
  1185  0041  00BA               	movwf	??_sprintf+2
  1186  0042  083A               	movf	??_sprintf+2,w
  1187  0043  00C2               	movwf	sprintf@c
  1188  0044  0842               	movf	sprintf@c,w
  1189  0045  1903               	btfsc	3,2
  1190  0046  28F8               	goto	l1396
  1191                           
  1192                           ;doprnt.c: 538: if(c != '%')
  1193  0047  3025               	movlw	37
  1194  0048  0642               	xorwf	sprintf@c,w
  1195  0049  1903               	btfsc	3,2
  1196  004A  2857               	goto	l1350
  1197                           
  1198                           ;doprnt.c: 540: {
  1199                           ;doprnt.c: 541: ((*sp++ = (c)));
  1200  004B  0842               	movf	sprintf@c,w
  1201  004C  00B8               	movwf	??_sprintf
  1202  004D  0841               	movf	sprintf@sp,w
  1203  004E  0086               	movwf	6
  1204  004F  0187               	clrf	7
  1205  0050  0838               	movf	??_sprintf,w
  1206  0051  0081               	movwf	1
  1207  0052  3001               	movlw	1
  1208  0053  00B8               	movwf	??_sprintf
  1209  0054  0838               	movf	??_sprintf,w
  1210  0055  07C1               	addwf	sprintf@sp,f
  1211                           
  1212                           ;doprnt.c: 542: continue;
  1213  0056  2835               	goto	l1394
  1214  0057                     l1350:	
  1215                           
  1216                           ;doprnt.c: 543: }
  1217                           ;doprnt.c: 548: flag = 0;
  1218  0057  01BD               	clrf	sprintf@flag
  1219                           
  1220                           ;doprnt.c: 822: }
  1221                           
  1222                           ;doprnt.c: 813: continue;
  1223                           
  1224                           ;doprnt.c: 802: default:
  1225                           
  1226                           ;doprnt.c: 698: case 'i':
  1227                           ;doprnt.c: 699: break;
  1228                           
  1229                           ;doprnt.c: 697: case 'd':
  1230                           
  1231                           ;doprnt.c: 638: goto alldone;
  1232                           
  1233                           ;doprnt.c: 637: case 0:
  1234                           
  1235                           ;doprnt.c: 635: switch(c = *f++) {
  1236  0058  0835               	movf	sprintf@f+1,w
  1237  0059  00B9               	movwf	??_sprintf+1
  1238  005A  0834               	movf	sprintf@f,w
  1239  005B  00B8               	movwf	??_sprintf
  1240  005C  0AB4               	incf	sprintf@f,f
  1241  005D  1903               	skipnz
  1242  005E  0AB5               	incf	sprintf@f+1,f
  1243  005F  0838               	movf	??_sprintf,w
  1244  0060  0084               	movwf	4
  1245  0061  0839               	movf	??_sprintf+1,w
  1246  0062  0085               	movwf	5
  1247  0063  0800               	movf	0,w	;code access
  1248  0064  00C2               	movwf	sprintf@c
  1249                           
  1250                           ; Switch size 1, requested type "space"
  1251                           ; Number of cases is 3, Range of values is 0 to 105
  1252                           ; switch strategies available:
  1253                           ; Name         Instructions Cycles
  1254                           ; simple_byte           10     6 (average)
  1255                           ; direct_byte          218     6 (fixed)
  1256                           ; jumptable            260     6 (fixed)
  1257                           ;	Chosen strategy is simple_byte
  1258  0065  3A00               	xorlw	0	; case 0
  1259  0066  1903               	skipnz
  1260  0067  28F8               	goto	l1396
  1261  0068  3A64               	xorlw	100	; case 100
  1262  0069  1903               	skipnz
  1263  006A  286F               	goto	l1356
  1264  006B  3A0D               	xorlw	13	; case 105
  1265  006C  1903               	skipnz
  1266  006D  286F               	goto	l1356
  1267  006E  2835               	goto	l1394
  1268  006F                     l1356:	
  1269                           
  1270                           ;doprnt.c: 1253: {
  1271                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1272  006F  083C               	movf	sprintf@ap,w
  1273  0070  0086               	movwf	6
  1274  0071  0187               	clrf	7
  1275  0072  3F40               	moviw [0]fsr1
  1276  0073  00BF               	movwf	sprintf@val
  1277  0074  3F41               	moviw [1]fsr1
  1278  0075  00C0               	movwf	sprintf@val+1
  1279  0076  3002               	movlw	2
  1280  0077  00B8               	movwf	??_sprintf
  1281  0078  0838               	movf	??_sprintf,w
  1282  0079  07BC               	addwf	sprintf@ap,f
  1283                           
  1284                           ;doprnt.c: 1261: if((int)val < 0) {
  1285  007A  1FC0               	btfss	sprintf@val+1,7
  1286  007B  2885               	goto	l1366
  1287                           
  1288                           ;doprnt.c: 1262: flag |= 0x03;
  1289  007C  3003               	movlw	3
  1290  007D  00B8               	movwf	??_sprintf
  1291  007E  0838               	movf	??_sprintf,w
  1292  007F  04BD               	iorwf	sprintf@flag,f
  1293                           
  1294                           ;doprnt.c: 1263: val = -val;
  1295  0080  09BF               	comf	sprintf@val,f
  1296  0081  09C0               	comf	sprintf@val+1,f
  1297  0082  0ABF               	incf	sprintf@val,f
  1298  0083  1903               	skipnz
  1299  0084  0AC0               	incf	sprintf@val+1,f
  1300  0085                     l1366:	
  1301                           
  1302                           ;doprnt.c: 1264: }
  1303                           ;doprnt.c: 1266: }
  1304                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1305  0085  01C2               	clrf	sprintf@c
  1306  0086  0AC2               	incf	sprintf@c,f
  1307  0087  3005               	movlw	5
  1308  0088  0642               	xorwf	sprintf@c,w
  1309  0089  1903               	btfsc	3,2
  1310  008A  28AA               	goto	l1378
  1311  008B                     l1372:	
  1312                           
  1313                           ;doprnt.c: 1306: if(val < dpowers[c])
  1314  008B  0842               	movf	sprintf@c,w
  1315  008C  00B8               	movwf	??_sprintf
  1316  008D  01B9               	clrf	??_sprintf+1
  1317  008E  35B8               	lslf	??_sprintf,f
  1318  008F  0DB9               	rlf	??_sprintf+1,f
  1319  0090  303A               	movlw	low (_dpowers| (0+32768))
  1320  0091  0738               	addwf	??_sprintf,w
  1321  0092  0084               	movwf	4
  1322  0093  3084               	movlw	high (_dpowers| (0+32768))
  1323  0094  3D39               	addwfc	??_sprintf+1,w
  1324  0095  0085               	movwf	5
  1325  0096  3F00               	moviw [0]fsr0
  1326  0097  00BA               	movwf	??_sprintf+2
  1327  0098  3F01               	moviw [1]fsr0
  1328  0099  00BB               	movwf	??_sprintf+3
  1329  009A  083B               	movf	??_sprintf+3,w
  1330  009B  0240               	subwf	sprintf@val+1,w
  1331  009C  1D03               	skipz
  1332  009D  28A0               	goto	u835
  1333  009E  083A               	movf	??_sprintf+2,w
  1334  009F  023F               	subwf	sprintf@val,w
  1335  00A0                     u835:	
  1336  00A0  1C03               	btfss	3,0
  1337  00A1  28AA               	goto	l1378
  1338                           
  1339                           ;doprnt.c: 1307: break;
  1340  00A2  3001               	movlw	1
  1341  00A3  00B8               	movwf	??_sprintf
  1342  00A4  0838               	movf	??_sprintf,w
  1343  00A5  07C2               	addwf	sprintf@c,f
  1344  00A6  3005               	movlw	5
  1345  00A7  0642               	xorwf	sprintf@c,w
  1346  00A8  1D03               	btfss	3,2
  1347  00A9  288B               	goto	l1372
  1348  00AA                     l1378:	
  1349                           
  1350                           ;doprnt.c: 1422: {
  1351                           ;doprnt.c: 1438: if(flag & 0x03)
  1352  00AA  083D               	movf	sprintf@flag,w
  1353  00AB  3903               	andlw	3
  1354  00AC  1903               	btfsc	3,2
  1355  00AD  28B9               	goto	l1384
  1356                           
  1357                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1358  00AE  302D               	movlw	45
  1359  00AF  00B8               	movwf	??_sprintf
  1360  00B0  0841               	movf	sprintf@sp,w
  1361  00B1  0086               	movwf	6
  1362  00B2  0187               	clrf	7
  1363  00B3  0838               	movf	??_sprintf,w
  1364  00B4  0081               	movwf	1
  1365  00B5  3001               	movlw	1
  1366  00B6  00B8               	movwf	??_sprintf
  1367  00B7  0838               	movf	??_sprintf,w
  1368  00B8  07C1               	addwf	sprintf@sp,f
  1369  00B9                     l1384:	
  1370                           
  1371                           ;doprnt.c: 1469: }
  1372                           ;doprnt.c: 1472: prec = c;
  1373  00B9  0842               	movf	sprintf@c,w
  1374  00BA  00B8               	movwf	??_sprintf
  1375  00BB  0838               	movf	??_sprintf,w
  1376  00BC  00BE               	movwf	sprintf@prec
  1377  00BD                     l1392:	
  1378                           ;doprnt.c: 1474: while(prec--) {
  1379                           
  1380  00BD  30FF               	movlw	255
  1381  00BE  00B8               	movwf	??_sprintf
  1382  00BF  0838               	movf	??_sprintf,w
  1383  00C0  07BE               	addwf	sprintf@prec,f
  1384  00C1  0A3E               	incf	sprintf@prec,w
  1385  00C2  1903               	btfsc	3,2
  1386  00C3  2835               	goto	l1394
  1387                           
  1388                           ;doprnt.c: 1478: {
  1389                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1390  00C4  300A               	movlw	10
  1391  00C5  00AE               	movwf	___lwmod@divisor
  1392  00C6  3000               	movlw	0
  1393  00C7  00AF               	movwf	___lwmod@divisor+1
  1394  00C8  083E               	movf	sprintf@prec,w
  1395  00C9  00B8               	movwf	??_sprintf
  1396  00CA  01B9               	clrf	??_sprintf+1
  1397  00CB  35B8               	lslf	??_sprintf,f
  1398  00CC  0DB9               	rlf	??_sprintf+1,f
  1399  00CD  303A               	movlw	low (_dpowers| (0+32768))
  1400  00CE  0738               	addwf	??_sprintf,w
  1401  00CF  0084               	movwf	4
  1402  00D0  3084               	movlw	high (_dpowers| (0+32768))
  1403  00D1  3D39               	addwfc	??_sprintf+1,w
  1404  00D2  0085               	movwf	5
  1405  00D3  3F00               	moviw [0]fsr0
  1406  00D4  00A6               	movwf	___lwdiv@divisor
  1407  00D5  3F01               	moviw [1]fsr0
  1408  00D6  00A7               	movwf	___lwdiv@divisor+1
  1409  00D7  0840               	movf	sprintf@val+1,w
  1410  00D8  00A9               	movwf	___lwdiv@dividend+1
  1411  00D9  083F               	movf	sprintf@val,w
  1412  00DA  00A8               	movwf	___lwdiv@dividend
  1413  00DB  3182  22F0  3180   	fcall	___lwdiv
  1414  00DE  0020               	movlb	0	; select bank0
  1415  00DF  0827               	movf	?___lwdiv+1,w
  1416  00E0  00B1               	movwf	___lwmod@dividend+1
  1417  00E1  0826               	movf	?___lwdiv,w
  1418  00E2  00B0               	movwf	___lwmod@dividend
  1419  00E3  3183  2325  3180   	fcall	___lwmod
  1420  00E6  0020               	movlb	0	; select bank0
  1421  00E7  082E               	movf	?___lwmod,w
  1422  00E8  3E30               	addlw	48
  1423  00E9  00BA               	movwf	??_sprintf+2
  1424  00EA  083A               	movf	??_sprintf+2,w
  1425  00EB  00C2               	movwf	sprintf@c
  1426                           
  1427                           ;doprnt.c: 1523: }
  1428                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1429  00EC  0842               	movf	sprintf@c,w
  1430  00ED  00B8               	movwf	??_sprintf
  1431  00EE  0841               	movf	sprintf@sp,w
  1432  00EF  0086               	movwf	6
  1433  00F0  0187               	clrf	7
  1434  00F1  0838               	movf	??_sprintf,w
  1435  00F2  0081               	movwf	1
  1436  00F3  3001               	movlw	1
  1437  00F4  00B8               	movwf	??_sprintf
  1438  00F5  0838               	movf	??_sprintf,w
  1439  00F6  07C1               	addwf	sprintf@sp,f
  1440  00F7  28BD               	goto	l1392
  1441  00F8                     l1396:	
  1442                           ;doprnt.c: 1525: }
  1443                           ;doprnt.c: 1533: }
  1444                           ;doprnt.c: 1535: alldone:
  1445                           
  1446                           
  1447                           ;doprnt.c: 1538: *sp = 0;
  1448  00F8  0841               	movf	sprintf@sp,w
  1449  00F9  0086               	movwf	6
  1450  00FA  0187               	clrf	7
  1451  00FB  0181               	clrf	1
  1452  00FC  0008               	return
  1453  00FD                     __end_of_sprintf:	
  1454                           ;doprnt.c: 1540: return 0;
  1455                           ;	Return value of _sprintf is never used
  1456                           
  1457                           
  1458                           	psect	text5
  1459  0325                     __ptext5:	
  1460 ;; *************** function ___lwmod *****************
  1461 ;; Defined at:
  1462 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  1463 ;; Parameters:    Size  Location     Type
  1464 ;;  divisor         2   14[BANK0 ] unsigned int 
  1465 ;;  dividend        2   16[BANK0 ] unsigned int 
  1466 ;; Auto vars:     Size  Location     Type
  1467 ;;  counter         1   19[BANK0 ] unsigned char 
  1468 ;; Return value:  Size  Location     Type
  1469 ;;                  2   14[BANK0 ] unsigned int 
  1470 ;; Registers used:
  1471 ;;		wreg, status,2, status,0
  1472 ;; Tracked objects:
  1473 ;;		On entry : 0/0
  1474 ;;		On exit  : 0/0
  1475 ;;		Unchanged: 0/0
  1476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1477 ;;      Params:         0       4       0       0       0       0
  1478 ;;      Locals:         0       1       0       0       0       0
  1479 ;;      Temps:          0       1       0       0       0       0
  1480 ;;      Totals:         0       6       0       0       0       0
  1481 ;;Total ram usage:        6 bytes
  1482 ;; Hardware stack levels used:    1
  1483 ;; Hardware stack levels required when called:    4
  1484 ;; This function calls:
  1485 ;;		Nothing
  1486 ;; This function is called by:
  1487 ;;		_sprintf
  1488 ;;		_ringbuf_put_num
  1489 ;;		_tx_sendn
  1490 ;; This function uses a non-reentrant model
  1491 ;;
  1492                           
  1493                           
  1494                           ;psect for function ___lwmod
  1495  0325                     ___lwmod:	
  1496                           
  1497                           ;incstack = 0
  1498                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1499  0325  0020               	movlb	0	; select bank0
  1500  0326  082E               	movf	___lwmod@divisor,w
  1501  0327  042F               	iorwf	___lwmod@divisor+1,w
  1502  0328  1903               	btfsc	3,2
  1503  0329  2B4D               	goto	l1248
  1504  032A  01B3               	clrf	___lwmod@counter
  1505  032B  0AB3               	incf	___lwmod@counter,f
  1506  032C                     l1238:	
  1507  032C  1BAF               	btfsc	___lwmod@divisor+1,7
  1508  032D  2B38               	goto	l1240
  1509  032E  3001               	movlw	1
  1510  032F                     u655:	
  1511  032F  35AE               	lslf	___lwmod@divisor,f
  1512  0330  0DAF               	rlf	___lwmod@divisor+1,f
  1513  0331  0B89               	decfsz	9,f
  1514  0332  2B2F               	goto	u655
  1515  0333  3001               	movlw	1
  1516  0334  00B2               	movwf	??___lwmod
  1517  0335  0832               	movf	??___lwmod,w
  1518  0336  07B3               	addwf	___lwmod@counter,f
  1519  0337  2B2C               	goto	l1238
  1520  0338                     l1240:	
  1521  0338  082F               	movf	___lwmod@divisor+1,w
  1522  0339  0231               	subwf	___lwmod@dividend+1,w
  1523  033A  1D03               	skipz
  1524  033B  2B3E               	goto	u675
  1525  033C  082E               	movf	___lwmod@divisor,w
  1526  033D  0230               	subwf	___lwmod@dividend,w
  1527  033E                     u675:	
  1528  033E  1C03               	skipc
  1529  033F  2B44               	goto	l1244
  1530  0340  082E               	movf	___lwmod@divisor,w
  1531  0341  02B0               	subwf	___lwmod@dividend,f
  1532  0342  082F               	movf	___lwmod@divisor+1,w
  1533  0343  3BB1               	subwfb	___lwmod@dividend+1,f
  1534  0344                     l1244:	
  1535  0344  3001               	movlw	1
  1536  0345                     u685:	
  1537  0345  36AF               	lsrf	___lwmod@divisor+1,f
  1538  0346  0CAE               	rrf	___lwmod@divisor,f
  1539  0347  0B89               	decfsz	9,f
  1540  0348  2B45               	goto	u685
  1541  0349  3001               	movlw	1
  1542  034A  02B3               	subwf	___lwmod@counter,f
  1543  034B  1D03               	btfss	3,2
  1544  034C  2B38               	goto	l1240
  1545  034D                     l1248:	
  1546  034D  0831               	movf	___lwmod@dividend+1,w
  1547  034E  00AF               	movwf	?___lwmod+1
  1548  034F  0830               	movf	___lwmod@dividend,w
  1549  0350  00AE               	movwf	?___lwmod
  1550  0351  0008               	return
  1551  0352                     __end_of___lwmod:	
  1552                           
  1553                           	psect	text6
  1554  02F0                     __ptext6:	
  1555 ;; *************** function ___lwdiv *****************
  1556 ;; Defined at:
  1557 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;  divisor         2    6[BANK0 ] unsigned int 
  1560 ;;  dividend        2    8[BANK0 ] unsigned int 
  1561 ;; Auto vars:     Size  Location     Type
  1562 ;;  quotient        2   11[BANK0 ] unsigned int 
  1563 ;;  counter         1   13[BANK0 ] unsigned char 
  1564 ;; Return value:  Size  Location     Type
  1565 ;;                  2    6[BANK0 ] unsigned int 
  1566 ;; Registers used:
  1567 ;;		wreg, status,2, status,0
  1568 ;; Tracked objects:
  1569 ;;		On entry : 0/0
  1570 ;;		On exit  : 0/0
  1571 ;;		Unchanged: 0/0
  1572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1573 ;;      Params:         0       4       0       0       0       0
  1574 ;;      Locals:         0       3       0       0       0       0
  1575 ;;      Temps:          0       1       0       0       0       0
  1576 ;;      Totals:         0       8       0       0       0       0
  1577 ;;Total ram usage:        8 bytes
  1578 ;; Hardware stack levels used:    1
  1579 ;; Hardware stack levels required when called:    4
  1580 ;; This function calls:
  1581 ;;		Nothing
  1582 ;; This function is called by:
  1583 ;;		_sprintf
  1584 ;;		_ringbuf_put_num
  1585 ;;		_tx_sendn
  1586 ;; This function uses a non-reentrant model
  1587 ;;
  1588                           
  1589                           
  1590                           ;psect for function ___lwdiv
  1591  02F0                     ___lwdiv:	
  1592                           
  1593                           ;incstack = 0
  1594                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1595  02F0  0020               	movlb	0	; select bank0
  1596  02F1  01AB               	clrf	___lwdiv@quotient
  1597  02F2  01AC               	clrf	___lwdiv@quotient+1
  1598  02F3  0826               	movf	___lwdiv@divisor,w
  1599  02F4  0427               	iorwf	___lwdiv@divisor+1,w
  1600  02F5  1903               	btfsc	3,2
  1601  02F6  2B20               	goto	l1226
  1602  02F7  01AD               	clrf	___lwdiv@counter
  1603  02F8  0AAD               	incf	___lwdiv@counter,f
  1604  02F9                     l1214:	
  1605  02F9  1BA7               	btfsc	___lwdiv@divisor+1,7
  1606  02FA  2B05               	goto	l1216
  1607  02FB  3001               	movlw	1
  1608  02FC                     u585:	
  1609  02FC  35A6               	lslf	___lwdiv@divisor,f
  1610  02FD  0DA7               	rlf	___lwdiv@divisor+1,f
  1611  02FE  0B89               	decfsz	9,f
  1612  02FF  2AFC               	goto	u585
  1613  0300  3001               	movlw	1
  1614  0301  00AA               	movwf	??___lwdiv
  1615  0302  082A               	movf	??___lwdiv,w
  1616  0303  07AD               	addwf	___lwdiv@counter,f
  1617  0304  2AF9               	goto	l1214
  1618  0305                     l1216:	
  1619  0305  3001               	movlw	1
  1620  0306                     u605:	
  1621  0306  35AB               	lslf	___lwdiv@quotient,f
  1622  0307  0DAC               	rlf	___lwdiv@quotient+1,f
  1623  0308  0B89               	decfsz	9,f
  1624  0309  2B06               	goto	u605
  1625  030A  0827               	movf	___lwdiv@divisor+1,w
  1626  030B  0229               	subwf	___lwdiv@dividend+1,w
  1627  030C  1D03               	skipz
  1628  030D  2B10               	goto	u615
  1629  030E  0826               	movf	___lwdiv@divisor,w
  1630  030F  0228               	subwf	___lwdiv@dividend,w
  1631  0310                     u615:	
  1632  0310  1C03               	skipc
  1633  0311  2B17               	goto	l1222
  1634  0312  0826               	movf	___lwdiv@divisor,w
  1635  0313  02A8               	subwf	___lwdiv@dividend,f
  1636  0314  0827               	movf	___lwdiv@divisor+1,w
  1637  0315  3BA9               	subwfb	___lwdiv@dividend+1,f
  1638  0316  142B               	bsf	___lwdiv@quotient,0
  1639  0317                     l1222:	
  1640  0317  3001               	movlw	1
  1641  0318                     u625:	
  1642  0318  36A7               	lsrf	___lwdiv@divisor+1,f
  1643  0319  0CA6               	rrf	___lwdiv@divisor,f
  1644  031A  0B89               	decfsz	9,f
  1645  031B  2B18               	goto	u625
  1646  031C  3001               	movlw	1
  1647  031D  02AD               	subwf	___lwdiv@counter,f
  1648  031E  1D03               	btfss	3,2
  1649  031F  2B05               	goto	l1216
  1650  0320                     l1226:	
  1651  0320  082C               	movf	___lwdiv@quotient+1,w
  1652  0321  00A7               	movwf	?___lwdiv+1
  1653  0322  082B               	movf	___lwdiv@quotient,w
  1654  0323  00A6               	movwf	?___lwdiv
  1655  0324  0008               	return
  1656  0325                     __end_of___lwdiv:	
  1657                           
  1658                           	psect	text7
  1659  039F                     __ptext7:	
  1660 ;; *************** function _ringbuf_init *****************
  1661 ;; Defined at:
  1662 ;;		line 24 in file "../My_header\My_ringbuf.h"
  1663 ;; Parameters:    Size  Location     Type
  1664 ;;  rb              1    wreg     PTR struct ringbuf
  1665 ;;		 -> tx_buf(7), 
  1666 ;;  internal_buf    1    6[BANK0 ] PTR unsigned char 
  1667 ;;		 -> main@buf(30), 
  1668 ;;  bufsize         2    7[BANK0 ] unsigned int 
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;  rb              1   10[BANK0 ] PTR struct ringbuf
  1671 ;;		 -> tx_buf(7), 
  1672 ;; Return value:  Size  Location     Type
  1673 ;;		None               void
  1674 ;; Registers used:
  1675 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1676 ;; Tracked objects:
  1677 ;;		On entry : 0/0
  1678 ;;		On exit  : 0/0
  1679 ;;		Unchanged: 0/0
  1680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1681 ;;      Params:         0       3       0       0       0       0
  1682 ;;      Locals:         0       1       0       0       0       0
  1683 ;;      Temps:          0       1       0       0       0       0
  1684 ;;      Totals:         0       5       0       0       0       0
  1685 ;;Total ram usage:        5 bytes
  1686 ;; Hardware stack levels used:    1
  1687 ;; Hardware stack levels required when called:    4
  1688 ;; This function calls:
  1689 ;;		Nothing
  1690 ;; This function is called by:
  1691 ;;		_main
  1692 ;; This function uses a non-reentrant model
  1693 ;;
  1694                           
  1695                           
  1696                           ;psect for function _ringbuf_init
  1697  039F                     _ringbuf_init:	
  1698                           
  1699                           ;incstack = 0
  1700                           ; Regs used in _ringbuf_init: [wreg+fsr1l+fsr1h+status,2+status,0]
  1701                           ;ringbuf_init@rb stored from wreg
  1702  039F  0020               	movlb	0	; select bank0
  1703  03A0  00AA               	movwf	ringbuf_init@rb
  1704                           
  1705                           ;My_header\My_ringbuf.h: 25: rb->buf = internal_buf;
  1706  03A1  0826               	movf	ringbuf_init@internal_buf,w
  1707  03A2  00A9               	movwf	??_ringbuf_init
  1708  03A3  082A               	movf	ringbuf_init@rb,w
  1709  03A4  0086               	movwf	6
  1710  03A5  0187               	clrf	7
  1711  03A6  0829               	movf	??_ringbuf_init,w
  1712  03A7  0081               	movwf	1
  1713                           
  1714                           ;My_header\My_ringbuf.h: 26: rb->size = bufsize;
  1715  03A8  0A2A               	incf	ringbuf_init@rb,w
  1716  03A9  0086               	movwf	6
  1717  03AA  0187               	clrf	7
  1718  03AB  0827               	movf	ringbuf_init@bufsize,w
  1719  03AC  3FC0               	movwi [0]fsr1
  1720  03AD  0828               	movf	ringbuf_init@bufsize+1,w
  1721  03AE  3FC1               	movwi [1]fsr1
  1722                           
  1723                           ;My_header\My_ringbuf.h: 27: rb->head = 0;
  1724  03AF  082A               	movf	ringbuf_init@rb,w
  1725  03B0  3E03               	addlw	3
  1726  03B1  0086               	movwf	6
  1727  03B2  0187               	clrf	7
  1728  03B3  3000               	movlw	0
  1729  03B4  3FC0               	movwi [0]fsr1
  1730  03B5  3FC1               	movwi [1]fsr1
  1731                           
  1732                           ;My_header\My_ringbuf.h: 28: rb->tail = 0;
  1733  03B6  082A               	movf	ringbuf_init@rb,w
  1734  03B7  3E05               	addlw	5
  1735  03B8  0086               	movwf	6
  1736  03B9  0187               	clrf	7
  1737  03BA  3000               	movlw	0
  1738  03BB  3FC0               	movwi [0]fsr1
  1739  03BC  3FC1               	movwi [1]fsr1
  1740  03BD  0008               	return
  1741  03BE                     __end_of_ringbuf_init:	
  1742                           
  1743                           	psect	text8
  1744  044A                     __ptext8:	
  1745 ;; *************** function _UART_init *****************
  1746 ;; Defined at:
  1747 ;;		line 237 in file "../My_header\My_header.h"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;		None
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;		None
  1752 ;; Return value:  Size  Location     Type
  1753 ;;		None               void
  1754 ;; Registers used:
  1755 ;;		wreg, status,2
  1756 ;; Tracked objects:
  1757 ;;		On entry : 0/0
  1758 ;;		On exit  : 0/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1761 ;;      Params:         0       0       0       0       0       0
  1762 ;;      Locals:         0       0       0       0       0       0
  1763 ;;      Temps:          0       0       0       0       0       0
  1764 ;;      Totals:         0       0       0       0       0       0
  1765 ;;Total ram usage:        0 bytes
  1766 ;; Hardware stack levels used:    1
  1767 ;; Hardware stack levels required when called:    4
  1768 ;; This function calls:
  1769 ;;		Nothing
  1770 ;; This function is called by:
  1771 ;;		_main
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           
  1776                           ;psect for function _UART_init
  1777  044A                     _UART_init:	
  1778                           
  1779                           ;My_header\My_header.h: 238: SPEN = 1;
  1780                           
  1781                           ;incstack = 0
  1782                           ; Regs used in _UART_init: [wreg+status,2]
  1783  044A  0023               	movlb	3	; select bank3
  1784  044B  179D               	bsf	29,7	;volatile
  1785                           
  1786                           ;My_header\My_header.h: 239: RCSTA = 0x90;
  1787  044C  3090               	movlw	144
  1788  044D  009D               	movwf	29	;volatile
  1789                           
  1790                           ;My_header\My_header.h: 240: BRG16 = 0;
  1791  044E  119F               	bcf	31,3	;volatile
  1792                           
  1793                           ;My_header\My_header.h: 241: SPBRGH = 0;
  1794  044F  019C               	clrf	28	;volatile
  1795                           
  1796                           ;My_header\My_header.h: 242: SPBRGL = 207;
  1797  0450  30CF               	movlw	207
  1798  0451  009B               	movwf	27	;volatile
  1799                           
  1800                           ;My_header\My_header.h: 243: TXSTA = 0x24;
  1801  0452  3024               	movlw	36
  1802  0453  009E               	movwf	30	;volatile
  1803                           
  1804                           ;My_header\My_header.h: 244: PIE1bits.RCIE = 1;
  1805  0454  0021               	movlb	1	; select bank1
  1806  0455  1691               	bsf	17,5	;volatile
  1807                           
  1808                           ;My_header\My_header.h: 245: INTCONbits.PEIE = 1;
  1809  0456  170B               	bsf	11,6	;volatile
  1810  0457  0008               	return
  1811  0458                     __end_of_UART_init:	
  1812                           
  1813                           	psect	text9
  1814  037C                     __ptext9:	
  1815 ;; *************** function _SPI_init *****************
  1816 ;; Defined at:
  1817 ;;		line 15 in file "../My_header\My_SPI.h"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;  mode            1    wreg     unsigned char 
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;  mode            1    6[BANK0 ] unsigned char 
  1822 ;; Return value:  Size  Location     Type
  1823 ;;		None               void
  1824 ;; Registers used:
  1825 ;;		wreg, status,2, status,0
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1831 ;;      Params:         0       0       0       0       0       0
  1832 ;;      Locals:         0       1       0       0       0       0
  1833 ;;      Temps:          0       0       0       0       0       0
  1834 ;;      Totals:         0       1       0       0       0       0
  1835 ;;Total ram usage:        1 bytes
  1836 ;; Hardware stack levels used:    1
  1837 ;; Hardware stack levels required when called:    4
  1838 ;; This function calls:
  1839 ;;		Nothing
  1840 ;; This function is called by:
  1841 ;;		_main
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           
  1846                           ;psect for function _SPI_init
  1847  037C                     _SPI_init:	
  1848                           
  1849                           ;incstack = 0
  1850                           ; Regs used in _SPI_init: [wreg+status,2+status,0]
  1851                           ;SPI_init@mode stored from wreg
  1852  037C  0020               	movlb	0	; select bank0
  1853  037D  00A6               	movwf	SPI_init@mode
  1854                           
  1855                           ;My_header\My_SPI.h: 16: SSP1CON1bits.SSPEN = 1;
  1856  037E  0024               	movlb	4	; select bank4
  1857  037F  1695               	bsf	21,5	;volatile
  1858                           
  1859                           ;My_header\My_SPI.h: 17: SSP1CON1bits.CKP = 1;
  1860  0380  1615               	bsf	21,4	;volatile
  1861                           
  1862                           ;My_header\My_SPI.h: 18: SSP1STATbits.CKE = 0;
  1863  0381  1314               	bcf	20,6	;volatile
  1864                           
  1865                           ;My_header\My_SPI.h: 19: if (mode == 0) {
  1866  0382  0020               	movlb	0	; select bank0
  1867  0383  0826               	movf	SPI_init@mode,w
  1868  0384  1D03               	btfss	3,2
  1869  0385  2B8C               	goto	l1318
  1870                           
  1871                           ;My_header\My_SPI.h: 20: SSP1CON1bits.SSPM = 2;
  1872  0386  0024               	movlb	4	; select bank4
  1873  0387  0815               	movf	21,w	;volatile
  1874  0388  39F0               	andlw	-16
  1875  0389  3802               	iorlw	2
  1876  038A  0095               	movwf	21	;volatile
  1877                           
  1878                           ;My_header\My_SPI.h: 21: } else if (mode == 1) {
  1879  038B  2B96               	goto	l202
  1880  038C                     l1318:	
  1881  038C  0020               	movlb	0	; select bank0
  1882  038D  0326               	decf	SPI_init@mode,w
  1883  038E  1D03               	btfss	3,2
  1884  038F  2B96               	goto	l202
  1885                           
  1886                           ;My_header\My_SPI.h: 22: SSP1CON1bits.SSPM = 4;
  1887  0390  0024               	movlb	4	; select bank4
  1888  0391  0815               	movf	21,w	;volatile
  1889  0392  39F0               	andlw	-16
  1890  0393  3804               	iorlw	4
  1891  0394  0095               	movwf	21	;volatile
  1892                           
  1893                           ;My_header\My_SPI.h: 23: SSP1STATbits.SMP = 0;
  1894  0395  1394               	bcf	20,7	;volatile
  1895  0396                     l202:	
  1896                           
  1897                           ;My_header\My_SPI.h: 24: }
  1898                           ;My_header\My_SPI.h: 25: if (mode == 1) {
  1899  0396  0020               	movlb	0	; select bank0
  1900  0397  0326               	decf	SPI_init@mode,w
  1901  0398  1D03               	btfss	3,2
  1902  0399  0008               	return
  1903                           
  1904                           ;My_header\My_SPI.h: 26: SSP1IF = 0;
  1905  039A  1191               	bcf	17,3	;volatile
  1906                           
  1907                           ;My_header\My_SPI.h: 27: PIE1bits.SSP1IE = 1;
  1908  039B  0021               	movlb	1	; select bank1
  1909  039C  1591               	bsf	17,3	;volatile
  1910                           
  1911                           ;My_header\My_SPI.h: 28: INTCONbits.PEIE = 1;
  1912  039D  170B               	bsf	11,6	;volatile
  1913  039E  0008               	return
  1914  039F                     __end_of_SPI_init:	
  1915                           
  1916                           	psect	text10
  1917  03DA                     __ptext10:	
  1918 ;; *************** function _SPI_TM_init *****************
  1919 ;; Defined at:
  1920 ;;		line 46 in file "../My_header\My_SPI.h"
  1921 ;; Parameters:    Size  Location     Type
  1922 ;;		None
  1923 ;; Auto vars:     Size  Location     Type
  1924 ;;  dumy            1   10[BANK0 ] unsigned char 
  1925 ;; Return value:  Size  Location     Type
  1926 ;;		None               void
  1927 ;; Registers used:
  1928 ;;		wreg, pclath, cstack
  1929 ;; Tracked objects:
  1930 ;;		On entry : 0/0
  1931 ;;		On exit  : 0/0
  1932 ;;		Unchanged: 0/0
  1933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1934 ;;      Params:         0       0       0       0       0       0
  1935 ;;      Locals:         0       1       0       0       0       0
  1936 ;;      Temps:          0       1       0       0       0       0
  1937 ;;      Totals:         0       2       0       0       0       0
  1938 ;;Total ram usage:        2 bytes
  1939 ;; Hardware stack levels used:    1
  1940 ;; Hardware stack levels required when called:    5
  1941 ;; This function calls:
  1942 ;;		_SPI_Transfer
  1943 ;; This function is called by:
  1944 ;;		_main
  1945 ;; This function uses a non-reentrant model
  1946 ;;
  1947                           
  1948                           
  1949                           ;psect for function _SPI_TM_init
  1950  03DA                     _SPI_TM_init:	
  1951                           
  1952                           ;My_header\My_SPI.h: 47: uint8_t dumy;
  1953                           ;My_header\My_SPI.h: 49: LATAbits.LATA0 = 0;
  1954                           
  1955                           ;incstack = 0
  1956                           ; Regs used in _SPI_TM_init: [wreg+pclath+cstack]
  1957  03DA  0022               	movlb	2	; select bank2
  1958  03DB  100C               	bcf	12,0	;volatile
  1959                           
  1960                           ;My_header\My_SPI.h: 50: dumy = SPI_Transfer(0x08);
  1961  03DC  3008               	movlw	8
  1962  03DD  3184  240E  3183   	fcall	_SPI_Transfer
  1963  03E0  0020               	movlb	0	; select bank0
  1964  03E1  00A9               	movwf	??_SPI_TM_init
  1965  03E2  0829               	movf	??_SPI_TM_init,w
  1966  03E3  00AA               	movwf	SPI_TM_init@dumy
  1967                           
  1968                           ;My_header\My_SPI.h: 51: dumy = SPI_Transfer(0x80);
  1969  03E4  3080               	movlw	128
  1970  03E5  3184  240E  3183   	fcall	_SPI_Transfer
  1971  03E8  0020               	movlb	0	; select bank0
  1972  03E9  00A9               	movwf	??_SPI_TM_init
  1973  03EA  0829               	movf	??_SPI_TM_init,w
  1974  03EB  00AA               	movwf	SPI_TM_init@dumy
  1975                           
  1976                           ;My_header\My_SPI.h: 52: dumy = SPI_Transfer(0x54);
  1977  03EC  3054               	movlw	84
  1978  03ED  3184  240E         	fcall	_SPI_Transfer
  1979  03EF  0020               	movlb	0	; select bank0
  1980  03F0  00A9               	movwf	??_SPI_TM_init
  1981  03F1  0829               	movf	??_SPI_TM_init,w
  1982  03F2  00AA               	movwf	SPI_TM_init@dumy
  1983                           
  1984                           ;My_header\My_SPI.h: 53: LATAbits.LATA0 = 1;
  1985  03F3  0022               	movlb	2	; select bank2
  1986  03F4  140C               	bsf	12,0	;volatile
  1987  03F5  0008               	return
  1988  03F6                     __end_of_SPI_TM_init:	
  1989                           
  1990                           	psect	text11
  1991  0352                     __ptext11:	
  1992 ;; *************** function _SPI_TM_Read *****************
  1993 ;; Defined at:
  1994 ;;		line 56 in file "../My_header\My_SPI.h"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;		None
  1997 ;; Auto vars:     Size  Location     Type
  1998 ;;  tl              1   19[BANK0 ] unsigned char 
  1999 ;;  th              1   18[BANK0 ] unsigned char 
  2000 ;; Return value:  Size  Location     Type
  2001 ;;                  2    9[BANK0 ] int 
  2002 ;; Registers used:
  2003 ;;		wreg, status,2, status,0, pclath, cstack
  2004 ;; Tracked objects:
  2005 ;;		On entry : 0/0
  2006 ;;		On exit  : 0/0
  2007 ;;		Unchanged: 0/0
  2008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2009 ;;      Params:         0       2       0       0       0       0
  2010 ;;      Locals:         0       2       0       0       0       0
  2011 ;;      Temps:          0       7       0       0       0       0
  2012 ;;      Totals:         0      11       0       0       0       0
  2013 ;;Total ram usage:       11 bytes
  2014 ;; Hardware stack levels used:    1
  2015 ;; Hardware stack levels required when called:    5
  2016 ;; This function calls:
  2017 ;;		_SPI_Transfer
  2018 ;; This function is called by:
  2019 ;;		_main
  2020 ;; This function uses a non-reentrant model
  2021 ;;
  2022                           
  2023                           
  2024                           ;psect for function _SPI_TM_Read
  2025  0352                     _SPI_TM_Read:	
  2026                           
  2027                           ;My_header\My_SPI.h: 57: uint8_t th;
  2028                           ;My_header\My_SPI.h: 58: uint8_t tl;
  2029                           ;My_header\My_SPI.h: 59: LATAbits.LATA0 = 0;
  2030                           
  2031                           ;incstack = 0
  2032                           ; Regs used in _SPI_TM_Read: [wreg+status,2+status,0+pclath+cstack]
  2033  0352  0022               	movlb	2	; select bank2
  2034  0353  100C               	bcf	12,0	;volatile
  2035                           
  2036                           ;My_header\My_SPI.h: 60: th = SPI_Transfer(0x00);
  2037  0354  3000               	movlw	0
  2038  0355  3184  240E  3183   	fcall	_SPI_Transfer
  2039  0358  0020               	movlb	0	; select bank0
  2040  0359  00AB               	movwf	??_SPI_TM_Read
  2041  035A  082B               	movf	??_SPI_TM_Read,w
  2042  035B  00B2               	movwf	SPI_TM_Read@th
  2043                           
  2044                           ;My_header\My_SPI.h: 61: tl = SPI_Transfer(0x00);
  2045  035C  3000               	movlw	0
  2046  035D  3184  240E         	fcall	_SPI_Transfer
  2047  035F  0020               	movlb	0	; select bank0
  2048  0360  00AB               	movwf	??_SPI_TM_Read
  2049  0361  082B               	movf	??_SPI_TM_Read,w
  2050  0362  00B3               	movwf	SPI_TM_Read@tl
  2051                           
  2052                           ;My_header\My_SPI.h: 62: LATAbits.LATA0 = 1;
  2053  0363  0022               	movlb	2	; select bank2
  2054  0364  140C               	bsf	12,0	;volatile
  2055                           
  2056                           ;My_header\My_SPI.h: 63: return (0xFF00 & (th << 8)) + (0xFF & tl);
  2057  0365  0020               	movlb	0	; select bank0
  2058  0366  0833               	movf	SPI_TM_Read@tl,w
  2059  0367  00AB               	movwf	??_SPI_TM_Read
  2060  0368  01AC               	clrf	??_SPI_TM_Read+1
  2061  0369  0832               	movf	SPI_TM_Read@th,w
  2062  036A  00AD               	movwf	??_SPI_TM_Read+2
  2063  036B  01AE               	clrf	??_SPI_TM_Read+3
  2064  036C  082D               	movf	??_SPI_TM_Read+2,w
  2065  036D  00AE               	movwf	??_SPI_TM_Read+3
  2066  036E  01AD               	clrf	??_SPI_TM_Read+2
  2067  036F  3000               	movlw	0
  2068  0370  052D               	andwf	??_SPI_TM_Read+2,w
  2069  0371  00B0               	movwf	??_SPI_TM_Read+5
  2070  0372  30FF               	movlw	255
  2071  0373  052E               	andwf	??_SPI_TM_Read+3,w
  2072  0374  00B1               	movwf	??_SPI_TM_Read+6
  2073  0375  082B               	movf	??_SPI_TM_Read,w
  2074  0376  0730               	addwf	??_SPI_TM_Read+5,w
  2075  0377  00A9               	movwf	?_SPI_TM_Read
  2076  0378  082C               	movf	??_SPI_TM_Read+1,w
  2077  0379  3D31               	addwfc	??_SPI_TM_Read+6,w
  2078  037A  00AA               	movwf	?_SPI_TM_Read+1
  2079  037B  0008               	return
  2080  037C                     __end_of_SPI_TM_Read:	
  2081                           
  2082                           	psect	text12
  2083  040E                     __ptext12:	
  2084 ;; *************** function _SPI_Transfer *****************
  2085 ;; Defined at:
  2086 ;;		line 32 in file "../My_header\My_SPI.h"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;  txdata          1    wreg     unsigned char 
  2089 ;; Auto vars:     Size  Location     Type
  2090 ;;  txdata          1    7[BANK0 ] unsigned char 
  2091 ;;  rxdata          1    8[BANK0 ] unsigned char 
  2092 ;; Return value:  Size  Location     Type
  2093 ;;                  1    wreg      unsigned char 
  2094 ;; Registers used:
  2095 ;;		wreg
  2096 ;; Tracked objects:
  2097 ;;		On entry : 0/0
  2098 ;;		On exit  : 0/0
  2099 ;;		Unchanged: 0/0
  2100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2101 ;;      Params:         0       0       0       0       0       0
  2102 ;;      Locals:         0       2       0       0       0       0
  2103 ;;      Temps:          0       1       0       0       0       0
  2104 ;;      Totals:         0       3       0       0       0       0
  2105 ;;Total ram usage:        3 bytes
  2106 ;; Hardware stack levels used:    1
  2107 ;; Hardware stack levels required when called:    4
  2108 ;; This function calls:
  2109 ;;		Nothing
  2110 ;; This function is called by:
  2111 ;;		_SPI_TM_init
  2112 ;;		_SPI_TM_Read
  2113 ;; This function uses a non-reentrant model
  2114 ;;
  2115                           
  2116                           
  2117                           ;psect for function _SPI_Transfer
  2118  040E                     _SPI_Transfer:	
  2119                           
  2120                           ;incstack = 0
  2121                           ; Regs used in _SPI_Transfer: [wreg]
  2122                           ;SPI_Transfer@txdata stored from wreg
  2123  040E  0020               	movlb	0	; select bank0
  2124  040F  00A7               	movwf	SPI_Transfer@txdata
  2125                           
  2126                           ;My_header\My_SPI.h: 33: uint8_t rxdata;
  2127                           ;My_header\My_SPI.h: 35: rxdata = SSP1BUF;
  2128  0410  0024               	movlb	4	; select bank4
  2129  0411  0811               	movf	17,w	;volatile
  2130  0412  0020               	movlb	0	; select bank0
  2131  0413  00A6               	movwf	??_SPI_Transfer
  2132  0414  0826               	movf	??_SPI_Transfer,w
  2133  0415  00A8               	movwf	SPI_Transfer@rxdata
  2134                           
  2135                           ;My_header\My_SPI.h: 36: SSP1IF = 0;
  2136  0416  1191               	bcf	17,3	;volatile
  2137                           
  2138                           ;My_header\My_SPI.h: 37: SSP1BUF = txdata;
  2139  0417  0827               	movf	SPI_Transfer@txdata,w
  2140  0418  0024               	movlb	4	; select bank4
  2141  0419  0091               	movwf	17	;volatile
  2142  041A                     l208:	
  2143                           ;My_header\My_SPI.h: 38: while (!SSP1IF);
  2144                           
  2145  041A  0020               	movlb	0	; select bank0
  2146  041B  1D91               	btfss	17,3	;volatile
  2147  041C  2C1A               	goto	l208
  2148                           
  2149                           ;My_header\My_SPI.h: 39: rxdata = SSP1BUF;
  2150  041D  0024               	movlb	4	; select bank4
  2151  041E  0811               	movf	17,w	;volatile
  2152  041F  0020               	movlb	0	; select bank0
  2153  0420  00A6               	movwf	??_SPI_Transfer
  2154  0421  0826               	movf	??_SPI_Transfer,w
  2155  0422  00A8               	movwf	SPI_Transfer@rxdata
  2156                           
  2157                           ;My_header\My_SPI.h: 40: return rxdata;
  2158  0423  0828               	movf	SPI_Transfer@rxdata,w
  2159  0424  0008               	return
  2160  0425                     __end_of_SPI_Transfer:	
  2161                           
  2162                           	psect	text13
  2163  0425                     __ptext13:	
  2164 ;; *************** function _Delay_ms *****************
  2165 ;; Defined at:
  2166 ;;		line 333 in file "../My_header\My_header.h"
  2167 ;; Parameters:    Size  Location     Type
  2168 ;;  ms              2    6[BANK0 ] unsigned int 
  2169 ;; Auto vars:     Size  Location     Type
  2170 ;;		None
  2171 ;; Return value:  Size  Location     Type
  2172 ;;		None               void
  2173 ;; Registers used:
  2174 ;;		wreg, status,2, status,0
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2180 ;;      Params:         0       2       0       0       0       0
  2181 ;;      Locals:         0       0       0       0       0       0
  2182 ;;      Temps:          0       2       0       0       0       0
  2183 ;;      Totals:         0       4       0       0       0       0
  2184 ;;Total ram usage:        4 bytes
  2185 ;; Hardware stack levels used:    1
  2186 ;; Hardware stack levels required when called:    4
  2187 ;; This function calls:
  2188 ;;		Nothing
  2189 ;; This function is called by:
  2190 ;;		_main
  2191 ;; This function uses a non-reentrant model
  2192 ;;
  2193                           
  2194                           
  2195                           ;psect for function _Delay_ms
  2196  0425                     _Delay_ms:	
  2197  0425                     l1310:	
  2198                           ;My_header\My_header.h: 334: while (ms--)_delay((unsigned long)((1)*(32000000/4000.0)));
  2199                           
  2200                           ;incstack = 0
  2201                           ; Regs used in _Delay_ms: [wreg+status,2+status,0]
  2202                           
  2203  0425  3001               	movlw	1
  2204  0426  0020               	movlb	0	; select bank0
  2205  0427  02A6               	subwf	Delay_ms@ms,f
  2206  0428  3000               	movlw	0
  2207  0429  3BA7               	subwfb	Delay_ms@ms+1,f
  2208  042A  0A26               	incf	Delay_ms@ms,w
  2209  042B  1903               	btfsc	3,2
  2210  042C  0A27               	incf	Delay_ms@ms+1,w
  2211  042D  1903               	btfsc	3,2
  2212  042E  0008               	return
  2213  042F  300B               	movlw	11
  2214  0430  0020               	movlb	0	; select bank0
  2215  0431  00A9               	movwf	??_Delay_ms+1
  2216  0432  3062               	movlw	98
  2217  0433  00A8               	movwf	??_Delay_ms
  2218  0434                     u967:	
  2219  0434  0BA8               	decfsz	??_Delay_ms,f
  2220  0435  2C34               	goto	u967
  2221  0436  0BA9               	decfsz	??_Delay_ms+1,f
  2222  0437  2C34               	goto	u967
  2223  0438  0000               	nop
  2224  0439  2C25               	goto	l1310
  2225  043A                     __end_of_Delay_ms:	
  2226                           
  2227                           	psect	intentry
  2228  0004                     __pintentry:	
  2229 ;; *************** function _isr *****************
  2230 ;; Defined at:
  2231 ;;		line 34 in file "PIC16F1827-SPI_TM01.c"
  2232 ;; Parameters:    Size  Location     Type
  2233 ;;		None
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;  ascii           1    5[BANK0 ] unsigned char 
  2236 ;; Return value:  Size  Location     Type
  2237 ;;		None               void
  2238 ;; Registers used:
  2239 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2240 ;; Tracked objects:
  2241 ;;		On entry : 0/0
  2242 ;;		On exit  : 0/0
  2243 ;;		Unchanged: 0/0
  2244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2245 ;;      Params:         0       0       0       0       0       0
  2246 ;;      Locals:         0       1       0       0       0       0
  2247 ;;      Temps:          0       2       0       0       0       0
  2248 ;;      Totals:         0       3       0       0       0       0
  2249 ;;Total ram usage:        3 bytes
  2250 ;; Hardware stack levels used:    1
  2251 ;; Hardware stack levels required when called:    3
  2252 ;; This function calls:
  2253 ;;		_interrupt_TXIF
  2254 ;;		_tx_send
  2255 ;; This function is called by:
  2256 ;;		Interrupt level 1
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260  0004                     _isr:	
  2261                           
  2262                           ;incstack = 0
  2263                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2264  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2265  0005  3180               	pagesel	$
  2266  0006  0020               	movlb	0	; select bank0
  2267  0007  087F               	movf	127,w
  2268  0008  00A4               	movwf	??_isr+1
  2269                           
  2270                           ;PIC16F1827-SPI_TM01.c: 35: interrupt_TXIF();
  2271  0009  3183  23F6  3180   	fcall	_interrupt_TXIF
  2272                           
  2273                           ;PIC16F1827-SPI_TM01.c: 36: if (TMR0IF) {
  2274  000C  1D0B               	btfss	11,2	;volatile
  2275  000D  2810               	goto	i1l1462
  2276                           
  2277                           ;PIC16F1827-SPI_TM01.c: 37: TMR0 = 0;
  2278  000E  0020               	movlb	0	; select bank0
  2279  000F  0195               	clrf	21	;volatile
  2280  0010                     i1l1462:	
  2281                           
  2282                           ;PIC16F1827-SPI_TM01.c: 38: }
  2283                           ;PIC16F1827-SPI_TM01.c: 39: if (RCIF) {
  2284  0010  0020               	movlb	0	; select bank0
  2285  0011  1E91               	btfss	17,5	;volatile
  2286  0012  281D               	goto	i1l222
  2287                           
  2288                           ;PIC16F1827-SPI_TM01.c: 40: RCIF = 0;
  2289  0013  1291               	bcf	17,5	;volatile
  2290                           
  2291                           ;PIC16F1827-SPI_TM01.c: 41: char ascii = RCREG;
  2292  0014  0023               	movlb	3	; select bank3
  2293  0015  0819               	movf	25,w	;volatile
  2294  0016  0020               	movlb	0	; select bank0
  2295  0017  00A3               	movwf	??_isr
  2296  0018  0823               	movf	??_isr,w
  2297  0019  00A5               	movwf	isr@ascii
  2298                           
  2299                           ;PIC16F1827-SPI_TM01.c: 42: tx_send(ascii);
  2300  001A  0825               	movf	isr@ascii,w
  2301  001B  3184  2458         	fcall	_tx_send
  2302  001D                     i1l222:	
  2303  001D  0020               	movlb	0	; select bank0
  2304  001E  0824               	movf	??_isr+1,w
  2305  001F  00FF               	movwf	127
  2306  0020  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2307  0021  0009               	retfie
  2308  0022                     __end_of_isr:	
  2309                           
  2310                           	psect	text15
  2311  0458                     __ptext15:	
  2312 ;; *************** function _tx_send *****************
  2313 ;; Defined at:
  2314 ;;		line 259 in file "../My_header\My_header.h"
  2315 ;; Parameters:    Size  Location     Type
  2316 ;;  asciicode       1    wreg     unsigned char 
  2317 ;; Auto vars:     Size  Location     Type
  2318 ;;  asciicode       1    2[BANK0 ] unsigned char 
  2319 ;; Return value:  Size  Location     Type
  2320 ;;		None               void
  2321 ;; Registers used:
  2322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2323 ;; Tracked objects:
  2324 ;;		On entry : 0/0
  2325 ;;		On exit  : 0/0
  2326 ;;		Unchanged: 0/0
  2327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2328 ;;      Params:         0       0       0       0       0       0
  2329 ;;      Locals:         0       1       0       0       0       0
  2330 ;;      Temps:          0       1       0       0       0       0
  2331 ;;      Totals:         0       2       0       0       0       0
  2332 ;;Total ram usage:        2 bytes
  2333 ;; Hardware stack levels used:    1
  2334 ;; Hardware stack levels required when called:    2
  2335 ;; This function calls:
  2336 ;;		i1_ringbuf_put
  2337 ;; This function is called by:
  2338 ;;		_isr
  2339 ;;		_tx_sendn
  2340 ;; This function uses a non-reentrant model
  2341 ;;
  2342                           
  2343                           
  2344                           ;psect for function _tx_send
  2345  0458                     _tx_send:	
  2346                           
  2347                           ;incstack = 0
  2348                           ; Regs used in _tx_send: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2349                           ;tx_send@asciicode stored from wreg
  2350  0458  0020               	movlb	0	; select bank0
  2351  0459  00A2               	movwf	tx_send@asciicode
  2352                           
  2353                           ;My_header\My_header.h: 260: ringbuf_put(&tx_buf, asciicode);
  2354  045A  0822               	movf	tx_send@asciicode,w
  2355  045B  00A1               	movwf	??_tx_send
  2356  045C  0821               	movf	??_tx_send,w
  2357  045D  00F7               	movwf	i1ringbuf_put@asciicode
  2358  045E  3056               	movlw	(low (_tx_buf| 0))& (0+255)
  2359  045F  3181  2153         	fcall	i1_ringbuf_put
  2360                           
  2361                           ;My_header\My_header.h: 261: PIE1bits.TXIE = 1;
  2362  0461  0021               	movlb	1	; select bank1
  2363  0462  1611               	bsf	17,4	;volatile
  2364  0463  0008               	return
  2365  0464                     __end_of_tx_send:	
  2366                           
  2367                           	psect	text16
  2368  0153                     __ptext16:	
  2369 ;; *************** function i1_ringbuf_put *****************
  2370 ;; Defined at:
  2371 ;;		line 39 in file "../My_header\My_ringbuf.h"
  2372 ;; Parameters:    Size  Location     Type
  2373 ;;  rb              1    wreg     PTR struct ringbuf
  2374 ;;		 -> tx_buf(7), 
  2375 ;;  asciicode       1    7[COMMON] unsigned char 
  2376 ;; Auto vars:     Size  Location     Type
  2377 ;;  rb              1    0[BANK0 ] PTR struct ringbuf
  2378 ;;		 -> tx_buf(7), 
  2379 ;; Return value:  Size  Location     Type
  2380 ;;		None               void
  2381 ;; Registers used:
  2382 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2383 ;; Tracked objects:
  2384 ;;		On entry : 0/0
  2385 ;;		On exit  : 0/0
  2386 ;;		Unchanged: 0/0
  2387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2388 ;;      Params:         1       0       0       0       0       0
  2389 ;;      Locals:         0       1       0       0       0       0
  2390 ;;      Temps:          6       0       0       0       0       0
  2391 ;;      Totals:         7       1       0       0       0       0
  2392 ;;Total ram usage:        8 bytes
  2393 ;; Hardware stack levels used:    1
  2394 ;; Hardware stack levels required when called:    1
  2395 ;; This function calls:
  2396 ;;		i1_ringbuf_num
  2397 ;; This function is called by:
  2398 ;;		_tx_send
  2399 ;; This function uses a non-reentrant model
  2400 ;;
  2401                           
  2402                           
  2403                           ;psect for function i1_ringbuf_put
  2404  0153                     i1_ringbuf_put:	
  2405                           
  2406                           ;incstack = 0
  2407                           ; Regs used in i1_ringbuf_put: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2408                           ;i1ringbuf_put@rb stored from wreg
  2409  0153  0020               	movlb	0	; select bank0
  2410  0154  00A0               	movwf	i1ringbuf_put@rb
  2411                           
  2412                           ;My_header\My_ringbuf.h: 40: if (ringbuf_num(rb) < rb->size) {
  2413  0155  0A20               	incf	i1ringbuf_put@rb,w
  2414  0156  0086               	movwf	6
  2415  0157  0187               	clrf	7
  2416  0158  3F40               	moviw [0]fsr1
  2417  0159  00F8               	movwf	??i1_ringbuf_put
  2418  015A  3F41               	moviw [1]fsr1
  2419  015B  00F9               	movwf	??i1_ringbuf_put+1
  2420  015C  0820               	movf	i1ringbuf_put@rb,w
  2421  015D  3182  2250  3181   	fcall	i1_ringbuf_num
  2422  0160  0879               	movf	??i1_ringbuf_put+1,w
  2423  0161  0271               	subwf	?i1_ringbuf_num+1,w
  2424  0162  1D03               	skipz
  2425  0163  2966               	goto	u70_25
  2426  0164  0878               	movf	??i1_ringbuf_put,w
  2427  0165  0270               	subwf	?i1_ringbuf_num,w
  2428  0166                     u70_25:	
  2429  0166  1803               	skipnc
  2430  0167  0008               	return
  2431                           
  2432                           ;My_header\My_ringbuf.h: 41: rb->buf[rb->head] = asciicode;
  2433  0168  0877               	movf	i1ringbuf_put@asciicode,w
  2434  0169  00F8               	movwf	??i1_ringbuf_put
  2435  016A  0020               	movlb	0	; select bank0
  2436  016B  0820               	movf	i1ringbuf_put@rb,w
  2437  016C  0086               	movwf	6
  2438  016D  0187               	clrf	7
  2439  016E  0820               	movf	i1ringbuf_put@rb,w
  2440  016F  3E03               	addlw	3
  2441  0170  0084               	movwf	4
  2442  0171  0185               	clrf	5
  2443  0172  0800               	movf	0,w
  2444  0173  0701               	addwf	1,w
  2445  0174  00F9               	movwf	??i1_ringbuf_put+1
  2446  0175  0879               	movf	??i1_ringbuf_put+1,w
  2447  0176  0086               	movwf	6
  2448  0177  0187               	clrf	7
  2449  0178  0878               	movf	??i1_ringbuf_put,w
  2450  0179  0081               	movwf	1
  2451                           
  2452                           ;My_header\My_ringbuf.h: 42: if (rb->head + 1 < rb->size) rb->head++;
  2453  017A  0A20               	incf	i1ringbuf_put@rb,w
  2454  017B  0086               	movwf	6
  2455  017C  0187               	clrf	7
  2456  017D  3F40               	moviw [0]fsr1
  2457  017E  00F8               	movwf	??i1_ringbuf_put
  2458  017F  3F41               	moviw [1]fsr1
  2459  0180  00F9               	movwf	??i1_ringbuf_put+1
  2460  0181  0820               	movf	i1ringbuf_put@rb,w
  2461  0182  3E03               	addlw	3
  2462  0183  0086               	movwf	6
  2463  0184  0187               	clrf	7
  2464  0185  3F40               	moviw [0]fsr1
  2465  0186  00FA               	movwf	??i1_ringbuf_put+2
  2466  0187  3F41               	moviw [1]fsr1
  2467  0188  00FB               	movwf	??i1_ringbuf_put+3
  2468  0189  087A               	movf	??i1_ringbuf_put+2,w
  2469  018A  3E01               	addlw	1
  2470  018B  00FC               	movwf	??i1_ringbuf_put+4
  2471  018C  3000               	movlw	0
  2472  018D  3D7B               	addwfc	??i1_ringbuf_put+3,w
  2473  018E  00FD               	movwf	??i1_ringbuf_put+5
  2474  018F  0879               	movf	??i1_ringbuf_put+1,w
  2475  0190  027D               	subwf	??i1_ringbuf_put+5,w
  2476  0191  1D03               	skipz
  2477  0192  2995               	goto	u71_25
  2478  0193  0878               	movf	??i1_ringbuf_put,w
  2479  0194  027C               	subwf	??i1_ringbuf_put+4,w
  2480  0195                     u71_25:	
  2481  0195  1803               	skipnc
  2482  0196  29A1               	goto	i1l1260
  2483  0197  0820               	movf	i1ringbuf_put@rb,w
  2484  0198  3E03               	addlw	3
  2485  0199  0086               	movwf	6
  2486  019A  0187               	clrf	7
  2487  019B  3001               	movlw	1
  2488  019C  0781               	addwf	1,f
  2489  019D  3141               	addfsr 1,1
  2490  019E  1803               	skipnc
  2491  019F  0A81               	incf	1,f
  2492  01A0  0008               	return
  2493  01A1                     i1l1260:	
  2494                           
  2495                           ;My_header\My_ringbuf.h: 43: else rb->head = 0;
  2496  01A1  0820               	movf	i1ringbuf_put@rb,w
  2497  01A2  3E03               	addlw	3
  2498  01A3  0086               	movwf	6
  2499  01A4  0187               	clrf	7
  2500  01A5  3000               	movlw	0
  2501  01A6  3FC0               	movwi [0]fsr1
  2502  01A7  3FC1               	movwi [1]fsr1
  2503  01A8  0008               	return
  2504  01A9                     __end_ofi1_ringbuf_put:	
  2505                           
  2506                           	psect	text17
  2507  03F6                     __ptext17:	
  2508 ;; *************** function _interrupt_TXIF *****************
  2509 ;; Defined at:
  2510 ;;		line 248 in file "../My_header\My_header.h"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;		None
  2513 ;; Auto vars:     Size  Location     Type
  2514 ;;		None
  2515 ;; Return value:  Size  Location     Type
  2516 ;;		None               void
  2517 ;; Registers used:
  2518 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2519 ;; Tracked objects:
  2520 ;;		On entry : 0/0
  2521 ;;		On exit  : 0/0
  2522 ;;		Unchanged: 0/0
  2523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2524 ;;      Params:         0       0       0       0       0       0
  2525 ;;      Locals:         0       0       0       0       0       0
  2526 ;;      Temps:          0       0       0       0       0       0
  2527 ;;      Totals:         0       0       0       0       0       0
  2528 ;;Total ram usage:        0 bytes
  2529 ;; Hardware stack levels used:    1
  2530 ;; Hardware stack levels required when called:    2
  2531 ;; This function calls:
  2532 ;;		_ringbuf_pop
  2533 ;;		i1_ringbuf_num
  2534 ;; This function is called by:
  2535 ;;		_isr
  2536 ;; This function uses a non-reentrant model
  2537 ;;
  2538                           
  2539                           
  2540                           ;psect for function _interrupt_TXIF
  2541  03F6                     _interrupt_TXIF:	
  2542                           
  2543                           ;My_header\My_header.h: 249: if (PIE1bits.TXIE && PIR1bits.TXIF) {
  2544                           
  2545                           ;incstack = 0
  2546                           ; Regs used in _interrupt_TXIF: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2547  03F6  0021               	movlb	1	; select bank1
  2548  03F7  1E11               	btfss	17,4	;volatile
  2549  03F8  0008               	return
  2550  03F9  0020               	movlb	0	; select bank0
  2551  03FA  1E11               	btfss	17,4	;volatile
  2552  03FB  0008               	return
  2553                           
  2554                           ;My_header\My_header.h: 250: PIR1bits.TXIF = 0;
  2555  03FC  1211               	bcf	17,4	;volatile
  2556                           
  2557                           ;My_header\My_header.h: 251: if (ringbuf_num(&tx_buf) > 0) {
  2558  03FD  3056               	movlw	(low (_tx_buf| 0))& (0+255)
  2559  03FE  3182  2250  3183   	fcall	i1_ringbuf_num
  2560  0401  0870               	movf	?i1_ringbuf_num,w
  2561  0402  0471               	iorwf	?i1_ringbuf_num+1,w
  2562  0403  1903               	btfsc	3,2
  2563  0404  2C0B               	goto	i1l150
  2564                           
  2565                           ;My_header\My_header.h: 252: TXREG = ringbuf_pop(&tx_buf);
  2566  0405  3056               	movlw	(low (_tx_buf| 0))& (0+255)
  2567  0406  3182  22A2         	fcall	_ringbuf_pop
  2568  0408  0023               	movlb	3	; select bank3
  2569  0409  009A               	movwf	26	;volatile
  2570                           
  2571                           ;My_header\My_header.h: 253: } else {
  2572  040A  0008               	return
  2573  040B                     i1l150:	
  2574                           
  2575                           ;My_header\My_header.h: 254: PIE1bits.TXIE = 0;
  2576  040B  0021               	movlb	1	; select bank1
  2577  040C  1211               	bcf	17,4	;volatile
  2578  040D  0008               	return
  2579  040E                     __end_of_interrupt_TXIF:	
  2580                           
  2581                           	psect	text18
  2582  02A2                     __ptext18:	
  2583 ;; *************** function _ringbuf_pop *****************
  2584 ;; Defined at:
  2585 ;;		line 64 in file "../My_header\My_ringbuf.h"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;  rb              1    wreg     PTR struct ringbuf
  2588 ;;		 -> tx_buf(7), 
  2589 ;; Auto vars:     Size  Location     Type
  2590 ;;  rb              1    1[BANK0 ] PTR struct ringbuf
  2591 ;;		 -> tx_buf(7), 
  2592 ;;  ret             1    0[BANK0 ] unsigned char 
  2593 ;; Return value:  Size  Location     Type
  2594 ;;                  1    wreg      unsigned char 
  2595 ;; Registers used:
  2596 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2597 ;; Tracked objects:
  2598 ;;		On entry : 0/0
  2599 ;;		On exit  : 0/0
  2600 ;;		Unchanged: 0/0
  2601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2602 ;;      Params:         0       0       0       0       0       0
  2603 ;;      Locals:         0       2       0       0       0       0
  2604 ;;      Temps:          6       0       0       0       0       0
  2605 ;;      Totals:         6       2       0       0       0       0
  2606 ;;Total ram usage:        8 bytes
  2607 ;; Hardware stack levels used:    1
  2608 ;; Hardware stack levels required when called:    1
  2609 ;; This function calls:
  2610 ;;		i1_ringbuf_num
  2611 ;; This function is called by:
  2612 ;;		_interrupt_TXIF
  2613 ;; This function uses a non-reentrant model
  2614 ;;
  2615                           
  2616                           
  2617                           ;psect for function _ringbuf_pop
  2618  02A2                     _ringbuf_pop:	
  2619                           
  2620                           ;incstack = 0
  2621                           ; Regs used in _ringbuf_pop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2622                           ;ringbuf_pop@rb stored from wreg
  2623  02A2  0020               	movlb	0	; select bank0
  2624  02A3  00A1               	movwf	ringbuf_pop@rb
  2625                           
  2626                           ;My_header\My_ringbuf.h: 65: if (ringbuf_num(rb)) {
  2627  02A4  0821               	movf	ringbuf_pop@rb,w
  2628  02A5  3182  2250  3182   	fcall	i1_ringbuf_num
  2629  02A8  0870               	movf	?i1_ringbuf_num,w
  2630  02A9  0471               	iorwf	?i1_ringbuf_num+1,w
  2631  02AA  1903               	btfsc	3,2
  2632  02AB  2AEE               	goto	i1l1192
  2633                           
  2634                           ;My_header\My_ringbuf.h: 66: char ret = rb->buf[rb->tail];
  2635  02AC  0020               	movlb	0	; select bank0
  2636  02AD  0821               	movf	ringbuf_pop@rb,w
  2637  02AE  0086               	movwf	6
  2638  02AF  0187               	clrf	7
  2639  02B0  0821               	movf	ringbuf_pop@rb,w
  2640  02B1  3E05               	addlw	5
  2641  02B2  0084               	movwf	4
  2642  02B3  0185               	clrf	5
  2643  02B4  0800               	movf	0,w
  2644  02B5  0701               	addwf	1,w
  2645  02B6  00F7               	movwf	??_ringbuf_pop
  2646  02B7  0877               	movf	??_ringbuf_pop,w
  2647  02B8  0086               	movwf	6
  2648  02B9  0187               	clrf	7
  2649  02BA  0801               	movf	1,w
  2650  02BB  00F8               	movwf	??_ringbuf_pop+1
  2651  02BC  0878               	movf	??_ringbuf_pop+1,w
  2652  02BD  00A0               	movwf	ringbuf_pop@ret
  2653                           
  2654                           ;My_header\My_ringbuf.h: 67: if (rb->tail + 1 < rb->size) {
  2655  02BE  0A21               	incf	ringbuf_pop@rb,w
  2656  02BF  0086               	movwf	6
  2657  02C0  0187               	clrf	7
  2658  02C1  3F40               	moviw [0]fsr1
  2659  02C2  00F7               	movwf	??_ringbuf_pop
  2660  02C3  3F41               	moviw [1]fsr1
  2661  02C4  00F8               	movwf	??_ringbuf_pop+1
  2662  02C5  0821               	movf	ringbuf_pop@rb,w
  2663  02C6  3E05               	addlw	5
  2664  02C7  0086               	movwf	6
  2665  02C8  0187               	clrf	7
  2666  02C9  3F40               	moviw [0]fsr1
  2667  02CA  00F9               	movwf	??_ringbuf_pop+2
  2668  02CB  3F41               	moviw [1]fsr1
  2669  02CC  00FA               	movwf	??_ringbuf_pop+3
  2670  02CD  0879               	movf	??_ringbuf_pop+2,w
  2671  02CE  3E01               	addlw	1
  2672  02CF  00FB               	movwf	??_ringbuf_pop+4
  2673  02D0  3000               	movlw	0
  2674  02D1  3D7A               	addwfc	??_ringbuf_pop+3,w
  2675  02D2  00FC               	movwf	??_ringbuf_pop+5
  2676  02D3  0878               	movf	??_ringbuf_pop+1,w
  2677  02D4  027C               	subwf	??_ringbuf_pop+5,w
  2678  02D5  1D03               	skipz
  2679  02D6  2AD9               	goto	u55_25
  2680  02D7  0877               	movf	??_ringbuf_pop,w
  2681  02D8  027B               	subwf	??_ringbuf_pop+4,w
  2682  02D9                     u55_25:	
  2683  02D9  1803               	skipnc
  2684  02DA  2AE5               	goto	i1l1184
  2685                           
  2686                           ;My_header\My_ringbuf.h: 68: rb->tail++;
  2687  02DB  0821               	movf	ringbuf_pop@rb,w
  2688  02DC  3E05               	addlw	5
  2689  02DD  0086               	movwf	6
  2690  02DE  0187               	clrf	7
  2691  02DF  3001               	movlw	1
  2692  02E0  0781               	addwf	1,f
  2693  02E1  3141               	addfsr 1,1
  2694  02E2  1803               	skipnc
  2695  02E3  0A81               	incf	1,f
  2696                           
  2697                           ;My_header\My_ringbuf.h: 69: } else {
  2698  02E4  2AEC               	goto	i1l1186
  2699  02E5                     i1l1184:	
  2700                           
  2701                           ;My_header\My_ringbuf.h: 70: rb->tail = 0;
  2702  02E5  0821               	movf	ringbuf_pop@rb,w
  2703  02E6  3E05               	addlw	5
  2704  02E7  0086               	movwf	6
  2705  02E8  0187               	clrf	7
  2706  02E9  3000               	movlw	0
  2707  02EA  3FC0               	movwi [0]fsr1
  2708  02EB  3FC1               	movwi [1]fsr1
  2709  02EC                     i1l1186:	
  2710                           
  2711                           ;My_header\My_ringbuf.h: 71: }
  2712                           ;My_header\My_ringbuf.h: 72: return ret;
  2713  02EC  0820               	movf	ringbuf_pop@ret,w
  2714                           
  2715                           ;My_header\My_ringbuf.h: 73: } else {
  2716  02ED  0008               	return
  2717  02EE                     i1l1192:	
  2718                           
  2719                           ;My_header\My_ringbuf.h: 74: return 0;
  2720  02EE  3000               	movlw	0
  2721  02EF  0008               	return
  2722  02F0                     __end_of_ringbuf_pop:	
  2723                           
  2724                           	psect	text19
  2725  0250                     __ptext19:	
  2726 ;; *************** function i1_ringbuf_num *****************
  2727 ;; Defined at:
  2728 ;;		line 31 in file "../My_header\My_ringbuf.h"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;  rb              1    wreg     PTR struct ringbuf
  2731 ;;		 -> tx_buf(7), 
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;  rb              1    6[COMMON] PTR struct ringbuf
  2734 ;;		 -> tx_buf(7), 
  2735 ;; Return value:  Size  Location     Type
  2736 ;;                  2    0[COMMON] unsigned int 
  2737 ;; Registers used:
  2738 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  2739 ;; Tracked objects:
  2740 ;;		On entry : 0/0
  2741 ;;		On exit  : 0/0
  2742 ;;		Unchanged: 0/0
  2743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2744 ;;      Params:         2       0       0       0       0       0
  2745 ;;      Locals:         1       0       0       0       0       0
  2746 ;;      Temps:          4       0       0       0       0       0
  2747 ;;      Totals:         7       0       0       0       0       0
  2748 ;;Total ram usage:        7 bytes
  2749 ;; Hardware stack levels used:    1
  2750 ;; This function calls:
  2751 ;;		Nothing
  2752 ;; This function is called by:
  2753 ;;		_ringbuf_pop
  2754 ;;		_interrupt_TXIF
  2755 ;;		i1_ringbuf_put
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           
  2760                           ;psect for function i1_ringbuf_num
  2761  0250                     i1_ringbuf_num:	
  2762                           
  2763                           ;incstack = 0
  2764                           ; Regs used in i1_ringbuf_num: [wreg-fsr1h+status,2+status,0]
  2765                           ;i1ringbuf_num@rb stored from wreg
  2766  0250  00F6               	movwf	i1ringbuf_num@rb
  2767                           
  2768                           ;My_header\My_ringbuf.h: 32: if (rb->head >= rb->tail) {
  2769  0251  0876               	movf	i1ringbuf_num@rb,w
  2770  0252  3E05               	addlw	5
  2771  0253  0086               	movwf	6
  2772  0254  0187               	clrf	7
  2773  0255  3F40               	moviw [0]fsr1
  2774  0256  00F2               	movwf	??i1_ringbuf_num
  2775  0257  3F41               	moviw [1]fsr1
  2776  0258  00F3               	movwf	??i1_ringbuf_num+1
  2777  0259  0876               	movf	i1ringbuf_num@rb,w
  2778  025A  3E03               	addlw	3
  2779  025B  0086               	movwf	6
  2780  025C  0187               	clrf	7
  2781  025D  3F40               	moviw [0]fsr1
  2782  025E  00F4               	movwf	??i1_ringbuf_num+2
  2783  025F  3F41               	moviw [1]fsr1
  2784  0260  00F5               	movwf	??i1_ringbuf_num+3
  2785  0261  0873               	movf	??i1_ringbuf_num+1,w
  2786  0262  0275               	subwf	??i1_ringbuf_num+3,w
  2787  0263  1D03               	skipz
  2788  0264  2A67               	goto	u51_25
  2789  0265  0872               	movf	??i1_ringbuf_num,w
  2790  0266  0274               	subwf	??i1_ringbuf_num+2,w
  2791  0267                     u51_25:	
  2792  0267  1C03               	skipc
  2793  0268  2A81               	goto	i1l1162
  2794                           
  2795                           ;My_header\My_ringbuf.h: 33: return (rb->head - rb->tail);
  2796  0269  0876               	movf	i1ringbuf_num@rb,w
  2797  026A  3E03               	addlw	3
  2798  026B  0086               	movwf	6
  2799  026C  0187               	clrf	7
  2800  026D  0876               	movf	i1ringbuf_num@rb,w
  2801  026E  3E05               	addlw	5
  2802  026F  0084               	movwf	4
  2803  0270  0185               	clrf	5
  2804  0271  3F00               	moviw [0]fsr0
  2805  0272  00F2               	movwf	??i1_ringbuf_num
  2806  0273  3F01               	moviw [1]fsr0
  2807  0274  00F3               	movwf	??i1_ringbuf_num+1
  2808  0275  09F2               	comf	??i1_ringbuf_num,f
  2809  0276  09F3               	comf	??i1_ringbuf_num+1,f
  2810  0277  0AF2               	incf	??i1_ringbuf_num,f
  2811  0278  1903               	skipnz
  2812  0279  0AF3               	incf	??i1_ringbuf_num+1,f
  2813  027A  3F40               	moviw [0]fsr1
  2814  027B  0772               	addwf	??i1_ringbuf_num,w
  2815  027C  00F0               	movwf	?i1_ringbuf_num
  2816  027D  3F41               	moviw [1]fsr1
  2817  027E  3D73               	addwfc	??i1_ringbuf_num+1,w
  2818  027F  00F1               	movwf	?i1_ringbuf_num+1
  2819                           
  2820                           ;My_header\My_ringbuf.h: 34: } else {
  2821  0280  0008               	return
  2822  0281                     i1l1162:	
  2823                           
  2824                           ;My_header\My_ringbuf.h: 35: return (rb->size + rb->head - rb->tail);
  2825  0281  0876               	movf	i1ringbuf_num@rb,w
  2826  0282  3E03               	addlw	3
  2827  0283  0086               	movwf	6
  2828  0284  0187               	clrf	7
  2829  0285  0876               	movf	i1ringbuf_num@rb,w
  2830  0286  3E05               	addlw	5
  2831  0287  0084               	movwf	4
  2832  0288  0185               	clrf	5
  2833  0289  3F00               	moviw [0]fsr0
  2834  028A  00F2               	movwf	??i1_ringbuf_num
  2835  028B  3F01               	moviw [1]fsr0
  2836  028C  00F3               	movwf	??i1_ringbuf_num+1
  2837  028D  09F2               	comf	??i1_ringbuf_num,f
  2838  028E  09F3               	comf	??i1_ringbuf_num+1,f
  2839  028F  0AF2               	incf	??i1_ringbuf_num,f
  2840  0290  1903               	skipnz
  2841  0291  0AF3               	incf	??i1_ringbuf_num+1,f
  2842  0292  0A76               	incf	i1ringbuf_num@rb,w
  2843  0293  0084               	movwf	4
  2844  0294  0185               	clrf	5
  2845  0295  3F00               	moviw [0]fsr0
  2846  0296  0772               	addwf	??i1_ringbuf_num,w
  2847  0297  00F4               	movwf	??i1_ringbuf_num+2
  2848  0298  3F01               	moviw [1]fsr0
  2849  0299  3D73               	addwfc	??i1_ringbuf_num+1,w
  2850  029A  00F5               	movwf	??i1_ringbuf_num+3
  2851  029B  3F40               	moviw [0]fsr1
  2852  029C  0774               	addwf	??i1_ringbuf_num+2,w
  2853  029D  00F0               	movwf	?i1_ringbuf_num
  2854  029E  3F41               	moviw [1]fsr1
  2855  029F  3D75               	addwfc	??i1_ringbuf_num+3,w
  2856  02A0  00F1               	movwf	?i1_ringbuf_num+1
  2857  02A1  0008               	return
  2858  02A2                     __end_ofi1_ringbuf_num:	
  2859  007E                     btemp	set	126	;btemp
  2860  007E                     int$flags	set	126
  2861  007E                     wtemp	set	126
  2862  007E                     wtemp0	set	126
  2863  0080                     wtemp1	set	128
  2864  0082                     wtemp2	set	130
  2865  0084                     wtemp3	set	132
  2866  0086                     wtemp4	set	134
  2867  0088                     wtemp5	set	136
  2868  007F                     wtemp6	set	127
  2869  007E                     ttemp	set	126
  2870  007E                     ttemp0	set	126
  2871  0081                     ttemp1	set	129
  2872  0084                     ttemp2	set	132
  2873  0087                     ttemp3	set	135
  2874  007F                     ttemp4	set	127
  2875  007E                     ltemp	set	126
  2876  007E                     ltemp0	set	126
  2877  0082                     ltemp1	set	130
  2878  0086                     ltemp2	set	134
  2879  0080                     ltemp3	set	128


Data Sizes:
    Strings     6
    Constant    10
    Data        0
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     38      61
    BANK1            80     80      80
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    ringbuf_put_str@rb.buf	PTR unsigned char  size(1) Largest target is 30
		 -> main@buf(BANK1[30]), 

    ringbuf_put_num@rb.buf	PTR unsigned char  size(1) Largest target is 30
		 -> main@buf(BANK1[30]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 50
		 -> main@cbuf(BANK1[50]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    tx_sends@asciicode	PTR const unsigned char  size(1) Largest target is 50
		 -> main@cbuf(BANK1[50]), 

    rx_buf.buf	PTR unsigned char  size(1) Largest target is 30
		 -> main@buf(BANK1[30]), 

    tx_buf.buf	PTR unsigned char  size(1) Largest target is 30
		 -> main@buf(BANK1[30]), 

    ringbuf_delete@rb.buf	PTR unsigned char  size(1) Largest target is 30
		 -> main@buf(BANK1[30]), 

    ringbuf_backspace@rb.buf	PTR unsigned char  size(1) Largest target is 30
		 -> main@buf(BANK1[30]), 

    ringbuf_pop@rb.buf	PTR unsigned char  size(1) Largest target is 30
		 -> main@buf(BANK1[30]), 

    ringbuf_pop@rb	PTR struct ringbuf size(1) Largest target is 8
		 -> tx_buf(BANK0[7]), 

    ringbuf_put@rb.buf	PTR unsigned char  size(1) Largest target is 30
		 -> main@buf(BANK1[30]), 

    ringbuf_put@rb	PTR struct ringbuf size(1) Largest target is 8
		 -> tx_buf(BANK0[7]), 

    ringbuf_num@rb.buf	PTR unsigned char  size(1) Largest target is 30
		 -> main@buf(BANK1[30]), 

    ringbuf_num@rb	PTR struct ringbuf size(1) Largest target is 8
		 -> tx_buf(BANK0[7]), 

    S224ringbuf$buf	PTR unsigned char  size(1) Largest target is 30
		 -> main@buf(BANK1[30]), 

    ringbuf_init@rb.buf	PTR unsigned char  size(1) Largest target is 30
		 -> main@buf(BANK1[30]), 

    ringbuf_init@internal_buf	PTR unsigned char  size(1) Largest target is 30
		 -> main@buf(BANK1[30]), 

    ringbuf_init@rb	PTR struct ringbuf size(1) Largest target is 8
		 -> tx_buf(BANK0[7]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _tx_send->i1_ringbuf_put
    i1_ringbuf_put->i1_ringbuf_num
    _interrupt_TXIF->_ringbuf_pop
    _ringbuf_pop->i1_ringbuf_num

Critical Paths under _main in BANK0

    _main->_sprintf
    _tx_sends->_ringbuf_put
    _ringbuf_put->_ringbuf_num
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SPI_TM_init->_SPI_Transfer
    _SPI_TM_Read->_SPI_Transfer

Critical Paths under _isr in BANK0

    _isr->_tx_send
    _tx_send->i1_ringbuf_put
    _interrupt_TXIF->_ringbuf_pop

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                83    83      0    3308
                                             35 BANK0      3     3      0
                                              0 BANK1     80    80      0
                           _Delay_ms
                        _SPI_TM_Read
                        _SPI_TM_init
                           _SPI_init
                          _UART_init
                       _ringbuf_init
                            _sprintf
                           _tx_sends
 ---------------------------------------------------------------------------------
 (1) _tx_sends                                             2     2      0     897
                                             21 BANK0      2     2      0
                        _ringbuf_put
 ---------------------------------------------------------------------------------
 (2) _ringbuf_put                                          8     7      1     822
                                             13 BANK0      8     7      1
                        _ringbuf_num
 ---------------------------------------------------------------------------------
 (3) _ringbuf_num                                          7     5      2     274
                                              6 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             23    19      4    1660
                                             20 BANK0     15    11      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     543
                                             14 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     546
                                              6 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _ringbuf_init                                         5     2      3     290
                                              6 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             1     1      0      66
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SPI_TM_init                                          2     2      0      49
                                              9 BANK0      2     2      0
                       _SPI_Transfer
 ---------------------------------------------------------------------------------
 (1) _SPI_TM_Read                                         11     9      2      92
                                              9 BANK0     11     9      2
                       _SPI_Transfer
 ---------------------------------------------------------------------------------
 (2) _SPI_Transfer                                         3     3      0      46
                                              6 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Delay_ms                                             4     2      2     150
                                              6 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  3     3      0     938
                                              3 BANK0      3     3      0
                     _interrupt_TXIF
                            _tx_send
 ---------------------------------------------------------------------------------
 (5) _tx_send                                              2     2      0     400
                                              1 BANK0      2     2      0
                      i1_ringbuf_put
 ---------------------------------------------------------------------------------
 (6) i1_ringbuf_put                                        8     7      1     378
                                              7 COMMON     7     6      1
                                              0 BANK0      1     1      0
                      i1_ringbuf_num
 ---------------------------------------------------------------------------------
 (5) _interrupt_TXIF                                       0     0      0     515
                        _ringbuf_pop
                      i1_ringbuf_num
 ---------------------------------------------------------------------------------
 (6) _ringbuf_pop                                          8     8      0     361
                                              7 COMMON     6     6      0
                                              0 BANK0      2     2      0
                      i1_ringbuf_num
 ---------------------------------------------------------------------------------
 (7) i1_ringbuf_num                                        7     5      2     154
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_ms
   _SPI_TM_Read
     _SPI_Transfer
   _SPI_TM_init
     _SPI_Transfer
   _SPI_init
   _UART_init
   _ringbuf_init
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _tx_sends
     _ringbuf_put
       _ringbuf_num

 _isr (ROOT)
   _interrupt_TXIF
     _ringbuf_pop
       i1_ringbuf_num
     i1_ringbuf_num
   _tx_send
     i1_ringbuf_put
       i1_ringbuf_num

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      9B       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     26      3D       6       76.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     50      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      9B      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Nov 16 19:10:23 2015

   __end_ofi1_ringbuf_num 02A2     __end_ofi1_ringbuf_put 01A9               __CFG_CP$OFF 0000  
                      _d1 0051                        _ms 004D    __end_of_interrupt_TXIF 040E  
                     l202 0396                       l208 041A                       l160 03D7  
                     u505 0215              __CFG_CPD$OFF 0000                       u605 0306  
                     u525 0111                       u615 0310                       u535 013F  
                     u625 0318                       u655 032F                       u585 02FC  
                     u675 033E                       u835 00A0                       u685 0345  
                     u967 0434              _SPI_Transfer 040E                       _isr 0004  
            __CFG_BORV$LO 0000                       wreg 0009              __CFG_LVP$OFF 0000  
                    l1310 0425                      l1222 0317                      l1214 02F9  
                    l1150 022F                      l1216 0305                      l1240 0338  
                    l1304 03C0                      l1226 0320                      l1244 0344  
                    l1318 038C                      l1238 032C                      l1350 0057  
                    l1174 014B                      l1248 034D                      l1372 008B  
                    l1356 006F                      l1366 0085                      l1392 00BD  
                    l1384 00B9                      l1378 00AA                      l1394 0035  
                    l1396 00F8                      ?_isr 0070                      STR_1 0444  
                    _RCIF 008D                      _TMR0 0015                      _SPEN 0CEF  
                    _WPUA 020C                      _WPUB 020D              __CFG_WRT$OFF 0000  
                    _main 01A9                      fsr0h 0005                      fsr1h 0007  
                    fsr0l 0004                      indf0 0000                      indf1 0001  
                    fsr1l 0006                      btemp 007E                      ltemp 007E  
                    start 0022                      ttemp 007E                      wtemp 007E  
           __CFG_IESO$OFF 0000                     ??_isr 0023             __CFG_PLLEN$ON 0000  
         ?_interrupt_TXIF 0070                     ?_main 0070                     _ADRES 009B  
                   _BRG16 0CFB             __CFG_WDTE$OFF 0000           __end_of___lwdiv 0325  
                   i1l150 040B                     i1l222 001D           __end_of___lwmod 0352  
                   _RCREG 0199                     _RCSTA 019D                     _TMR1H 0017  
                   _TMR1L 0016                     u51_25 0267                     u70_25 0166  
                   u55_25 02D9                     u71_25 0195                     _TRISA 008C  
                   _TRISB 008D                     _TXREG 019A                     _TXSTA 019E  
          __CFG_FCMEN$OFF 0000        __size_of_UART_init 000E           __end_of_dpowers 0444  
                   main@t 0044            __CFG_BOREN$OFF 0000                     ltemp0 007E  
        __end_of_SPI_init 039F                     ltemp1 0082                     ltemp2 0086  
                   ltemp3 0080                     ttemp0 007E                     ttemp1 0081  
                   ttemp2 0084                     ttemp3 0087                     ttemp4 007F  
                   status 0003                     wtemp0 007E                     wtemp1 0080  
                   wtemp2 0082                     wtemp3 0084                     wtemp4 0086  
                   wtemp5 0088                     wtemp6 007F           __end_of_sprintf 00FD  
         __end_of_tx_send 0464          __end_of_Delay_ms 043A            __CFG_MCLRE$OFF 0000  
         __initialization 0024              __end_of_main 01FD       ringbuf_init@bufsize 0027  
                  ??_main 0043             SPI_TM_Read@th 0032             SPI_TM_Read@tl 0033  
                  _ANSELA 018C                    _ANSELB 018D                    i1l1162 0281  
                  i1l1260 01A1                    i1l1184 02E5                    i1l1192 02EE  
                  i1l1186 02EC                    i1l1462 0010                    _FVRCON 0117  
                  _OSCCON 0099                    _TMR0IF 005A                    _SPBRGH 019C  
                  _SPBRGL 019B                    _SSP1IF 008B            __CFG_PWRTE$OFF 0000  
            ?_ringbuf_pop 0070              ?_ringbuf_num 0026              ?_ringbuf_put 002D  
       __end_of_UART_init 0458                 ??___lwdiv 002A                 ??___lwmod 0032  
                  _rx_buf 0046                    _tx_buf 0056                 ??_sprintf 0038  
               ??_tx_send 0021          __end_of_tx_sends 03DA   __end_of__initialization 002B  
            ?_SPI_TM_Read 0029              ?_SPI_TM_init 0070              SPI_init@mode 0026  
          __pcstackCOMMON 0070                 ?_SPI_init 0070            _OPTION_REGbits 0095  
               ?_Delay_ms 0026                __pbssBANK0 0046                __pmaintext 01A9  
        ??_interrupt_TXIF 007D                __pintentry 0004                ??_SPI_init 0026  
              ??_Delay_ms 0028                   _SSP1BUF 0211    __size_ofi1_ringbuf_num 0052  
  __size_ofi1_ringbuf_put 0056             ?_ringbuf_init 0026                   ___lwdiv 02F0  
                 ___lwmod 0325      __size_of_ringbuf_pop 004E      __size_of_ringbuf_num 0053  
    __size_of_ringbuf_put 0056           __CFG_STVREN$OFF 0000                 ?_tx_sends 0070  
                 __ptext1 03BE                   __ptext2 00FD                   __ptext3 01FD  
                 __ptext4 002F                   __ptext5 0325                   __ptext6 02F0  
                 __ptext7 039F                   __ptext8 044A                   __ptext9 037C  
               _T1CONbits 0018                   _dpowers 043A              __size_of_isr 001E  
                 main@buf 00A0                   _sprintf 002F                   clrloop0 0465  
                 _tx_send 0458      end_of_initialization 002B      __size_of_SPI_TM_Read 002A  
    __size_of_SPI_TM_init 001C            ??_ringbuf_init 0029             i1_ringbuf_num 0250  
           i1_ringbuf_put 0153              __pstringtext 043A                ??_tx_sends 0035  
               _UART_init 044A          __CFG_FOSC$INTOSC 0000            ringbuf_init@rb 002A  
          ?i1_ringbuf_num 0070            ?i1_ringbuf_put 0077            ringbuf_pop@ret 0020  
              ?_UART_init 0070             ?_SPI_Transfer 0070       start_initialization 0024  
       __size_of_SPI_init 0023               __end_of_isr 0022         __size_of_Delay_ms 0015  
             _APFCON0bits 011D               _APFCON1bits 011E            ??_SPI_Transfer 0026  
               ___latbits 0001             __pcstackBANK0 0020             __pcstackBANK1 00A0  
    __end_of_ringbuf_init 03BE          tx_send@asciicode 0022               sprintf@flag 003D  
             sprintf@prec 003E           millis_timer@cnt 0054           ??i1_ringbuf_num 0072  
         ??i1_ringbuf_put 0078          ___lwdiv@dividend 0028                  ?___lwdiv 0026  
                ?___lwmod 002E               ??_UART_init 0026         __size_of_tx_sends 001C  
        ___lwdiv@quotient 002B        SPI_Transfer@rxdata 0028                  ?_sprintf 0034  
                ?_tx_send 0070        SPI_Transfer@txdata 0027  ringbuf_init@internal_buf 0026  
                _LATAbits 010C                 clear_ram0 0464                  _PIE1bits 0091  
                _PIR1bits 0011             ??_ringbuf_pop 0077             ??_ringbuf_num 0028  
           ??_ringbuf_put 002E                _ADCON0bits 009D                _ADCON1bits 009E  
                _SPI_init 037C   __size_of_interrupt_TXIF 0018                  _Delay_ms 0425  
           ringbuf_pop@rb 0021             ringbuf_num@rb 002C             ringbuf_put@rb 0034  
           ??_SPI_TM_Read 002B             ??_SPI_TM_init 0029      __end_of_SPI_Transfer 0425  
         SPI_TM_init@dumy 002A          __size_of___lwdiv 0035          __size_of___lwmod 002D  
       tx_sends@asciicode 0036       __end_of_ringbuf_pop 02F0       __end_of_ringbuf_num 0250  
     __end_of_ringbuf_put 0153    i1ringbuf_put@asciicode 0077     __size_of_ringbuf_init 001F  
              sprintf@val 003F           ___lwdiv@divisor 0026           ___lwdiv@counter 002D  
                __ptext10 03DA                  __ptext11 0352                  __ptext12 040E  
                __ptext13 0425                  __ptext15 0458                  __ptext16 0153  
                __ptext17 03F6                  __ptext18 02A2                  __ptext19 0250  
            _SSP1CON1bits 0215          __size_of_sprintf 00CE          __size_of_tx_send 000C  
           __size_of_main 0054       __end_of_SPI_TM_Read 037C                  int$flags 007E  
     __end_of_SPI_TM_init 03F6              _ringbuf_init 039F                  main@cbuf 00BE  
            _SSP1STATbits 0214                  _tx_sends 03BE                _INTCONbits 000B  
    ringbuf_put@asciicode 002D                  isr@ascii 0025                Delay_ms@ms 0026  
                intlevel1 0000                 sprintf@ap 003C                 sprintf@sp 0041  
        ___lwmod@dividend 0030           i1ringbuf_num@rb 0076           i1ringbuf_put@rb 0020  
       __CFG_CLKOUTEN$OFF 0000               _ringbuf_pop 02A2               _ringbuf_num 01FD  
             _ringbuf_put 00FD            _interrupt_TXIF 03F6                  sprintf@c 0042  
                sprintf@f 0034           ___lwmod@divisor 002E           ___lwmod@counter 0033  
   __size_of_SPI_Transfer 0017               _SPI_TM_Read 0352               _SPI_TM_init 03DA  
