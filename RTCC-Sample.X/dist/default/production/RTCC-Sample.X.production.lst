

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Nov 16 20:43:58 2015

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F27J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           	psect	idataCOMRAM
    48  0028F2                     __pidataCOMRAM:
    49                           	opt stack 0
    50                           
    51                           ;initializer for epoch_to_caltime@month_cache
    52  0028F2  01                 	db	1
    53                           
    54                           	psect	smallconst
    55  000F00                     __psmallconst:
    56                           	opt stack 0
    57  000F00  00                 	db	0
    58  000F01                     _dpowers:
    59                           	opt stack 0
    60  000F01  0001               	dw	1
    61  000F03  000A               	dw	10
    62  000F05  0064               	dw	100
    63  000F07  03E8               	dw	1000
    64  000F09  2710               	dw	10000
    65  000F0B                     __end_of_dpowers:
    66                           	opt stack 0
    67  000F0B                     _weekday_3char:
    68                           	opt stack 0
    69  000F0B  53                 	db	83
    70  000F0C  55                 	db	85
    71  000F0D  4E                 	db	78
    72  000F0E  00                 	db	0
    73  000F0F  4D                 	db	77
    74  000F10  4F                 	db	79
    75  000F11  4E                 	db	78
    76  000F12  00                 	db	0
    77  000F13  54                 	db	84
    78  000F14  55                 	db	85
    79  000F15  45                 	db	69
    80  000F16  00                 	db	0
    81  000F17  57                 	db	87
    82  000F18  45                 	db	69
    83  000F19  44                 	db	68
    84  000F1A  00                 	db	0
    85  000F1B  54                 	db	84
    86  000F1C  48                 	db	72
    87  000F1D  55                 	db	85
    88  000F1E  00                 	db	0
    89  000F1F  46                 	db	70
    90  000F20  52                 	db	82
    91  000F21  49                 	db	73
    92  000F22  00                 	db	0
    93  000F23  53                 	db	83
    94  000F24  41                 	db	65
    95  000F25  54                 	db	84
    96  000F26  00                 	db	0
    97  000F27                     __end_of_weekday_3char:
    98                           	opt stack 0
    99  0000                     _ANCON0	set	3912
   100  0000                     _ANCON1	set	3913
   101  0000                     _PADCFG1bits	set	3900
   102  0000                     _RTCCAL	set	3902
   103  0000                     _RTCCFGbits	set	3903
   104  0000                     _RTCVALH	set	3899
   105  0000                     _RTCVALL	set	3898
   106  0000                     _BAUDCON1bits	set	3966
   107  0000                     _EECON2	set	4007
   108  0000                     _INTCON2bits	set	4081
   109  0000                     _INTCONbits	set	4082
   110  0000                     _IPR1bits	set	3999
   111  0000                     _IPR2bits	set	4002
   112  0000                     _LATAbits	set	3977
   113  0000                     _OSCCONbits	set	4051
   114  0000                     _OSCTUNEbits	set	3995
   115  0000                     _PIE1bits	set	3997
   116  0000                     _PIE2bits	set	4000
   117  0000                     _PIR1bits	set	3998
   118  0000                     _PIR2bits	set	4001
   119  0000                     _PORTBbits	set	3969
   120  0000                     _RCREG1	set	4015
   121  0000                     _RCSTA1bits	set	4012
   122  0000                     _SPBRG1	set	4016
   123  0000                     _SPBRGH1	set	3967
   124  0000                     _T1CONbits	set	4045
   125  0000                     _T3CONbits	set	3961
   126  0000                     _TRISA	set	3986
   127  0000                     _TRISB	set	3987
   128  0000                     _TRISC	set	3988
   129  0000                     _TXREG1	set	4014
   130  0000                     _TXSTA1bits	set	4013
   131  0000                     _LATB2	set	31826
   132  000F27                     STR_1:
   133  000F27  09                 	db	9
   134  000F28  32                 	db	50	;'2'
   135  000F29  30                 	db	48	;'0'
   136  000F2A  25                 	db	37
   137  000F2B  30                 	db	48	;'0'
   138  000F2C  32                 	db	50	;'2'
   139  000F2D  64                 	db	100	;'d'
   140  000F2E  2F                 	db	47
   141  000F2F  25                 	db	37
   142  000F30  30                 	db	48	;'0'
   143  000F31  32                 	db	50	;'2'
   144  000F32  64                 	db	100	;'d'
   145  000F33  2F                 	db	47
   146  000F34  25                 	db	37
   147  000F35  30                 	db	48	;'0'
   148  000F36  32                 	db	50	;'2'
   149  000F37  64                 	db	100	;'d'
   150  000F38  28                 	db	40
   151  000F39  25                 	db	37
   152  000F3A  73                 	db	115	;'s'
   153  000F3B  29                 	db	41
   154  000F3C  25                 	db	37
   155  000F3D  30                 	db	48	;'0'
   156  000F3E  32                 	db	50	;'2'
   157  000F3F  64                 	db	100	;'d'
   158  000F40  3A                 	db	58	;':'
   159  000F41  25                 	db	37
   160  000F42  30                 	db	48	;'0'
   161  000F43  32                 	db	50	;'2'
   162  000F44  64                 	db	100	;'d'
   163  000F45  2D                 	db	45
   164  000F46  25                 	db	37
   165  000F47  30                 	db	48	;'0'
   166  000F48  32                 	db	50	;'2'
   167  000F49  64                 	db	100	;'d'
   168  000F4A  0A                 	db	10
   169  000F4B  00                 	db	0
   170  000F4C                     STR_16:
   171  000F4C  20                 	db	32
   172  000F4D  20                 	db	32
   173  000F4E  20                 	db	32
   174  000F4F  20                 	db	32
   175  000F50  20                 	db	32
   176  000F51  20                 	db	32
   177  000F52  20                 	db	32
   178  000F53  20                 	db	32
   179  000F54  00                 	db	0
   180  000F55                     STR_20:
   181  000F55  28                 	db	40
   182  000F56  6E                 	db	110	;'n'
   183  000F57  75                 	db	117	;'u'
   184  000F58  6C                 	db	108	;'l'
   185  000F59  6C                 	db	108	;'l'
   186  000F5A  29                 	db	41
   187  000F5B  00                 	db	0
   188  000F5C  25                 	db	37
   189  000F5D  30                 	db	48	;'0'
   190  000F5E  32                 	db	50	;'2'
   191  000F5F  64                 	db	100	;'d'
   192  000F60  00                 	db	0
   193  000F61  28                 	db	40
   194  000F62  00                 	db	0
   195  000F63                     STR_10:
   196  000F63  2D                 	db	45
   197  000F64  00                 	db	0
   198  000F65                     STR_5:
   199  000F65  2F                 	db	47
   200  000F66  00                 	db	0
   201  000F67                     STR_8:
   202  000F67  3A                 	db	58	;':'
   203  000F68  00                 	db	0
   204  0000                     
   205                           ; #config settings
   206  000F69  00                 	db	0	; dummy byte at the end
   207  0000                     
   208                           	psect	cinit
   209  0027DC                     __pcinit:
   210                           	opt stack 0
   211  0027DC                     start_initialization:
   212                           	opt stack 0
   213  0027DC                     __initialization:
   214                           	opt stack 0
   215                           
   216                           ; Clear objects allocated to BANK0 (15 bytes)
   217  0027DC  EE00  F09B         	lfsr	0,__pbssBANK0
   218  0027E0  0E0F               	movlw	15
   219  0027E2                     clear_0:
   220  0027E2  6AEE               	clrf	postinc0,c
   221  0027E4  06E8               	decf	wreg,f,c
   222  0027E6  E1FD               	bnz	clear_0
   223                           
   224                           ; Clear objects allocated to COMRAM (16 bytes)
   225  0027E8  EE00  F03A         	lfsr	0,__pbssCOMRAM
   226  0027EC  0E10               	movlw	16
   227  0027EE                     clear_1:
   228  0027EE  6AEE               	clrf	postinc0,c
   229  0027F0  06E8               	decf	wreg,f,c
   230  0027F2  E1FD               	bnz	clear_1
   231                           
   232                           ; Initialize objects allocated to COMRAM (1 bytes)
   233                           ; load TBLPTR registers with __pidataCOMRAM
   234  0027F4  0EF2               	movlw	low __pidataCOMRAM
   235  0027F6  6EF6               	movwf	tblptrl,c
   236  0027F8  0E28               	movlw	high __pidataCOMRAM
   237  0027FA  6EF7               	movwf	tblptrh,c
   238  0027FC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   239  0027FE  6EF8               	movwf	tblptru,c
   240  002800  0009               	tblrd		*+	;fetch initializer
   241  002802  CFF5 F04A          	movff	tablat,__pdataCOMRAM
   242  002806                     end_of_initialization:
   243                           	opt stack 0
   244  002806                     __end_of__initialization:
   245                           	opt stack 0
   246  002806  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   247  002808  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   248  00280A  0100               	movlb	0
   249  00280C  EF6B  F010         	goto	_main	;jump to C main() function
   250                           tblptru	equ	0xFF8
   251                           tblptrh	equ	0xFF7
   252                           tblptrl	equ	0xFF6
   253                           tablat	equ	0xFF5
   254                           postinc0	equ	0xFEE
   255                           wreg	equ	0xFE8
   256                           
   257                           	psect	bssCOMRAM
   258  00003A                     __pbssCOMRAM:
   259                           	opt stack 0
   260  00003A                     epoch_to_caltime@day_cache:
   261                           	opt stack 0
   262  00003A                     	ds	2
   263  00003C                     RTCC_task@prev_halfsec:
   264                           	opt stack 0
   265  00003C                     	ds	1
   266  00003D                     epoch_to_caltime@year_cache:
   267                           	opt stack 0
   268  00003D                     	ds	1
   269  00003E                     _dec:
   270                           	opt stack 0
   271  00003E                     	ds	4
   272  000042                     _inc:
   273                           	opt stack 0
   274  000042                     	ds	4
   275  000046                     _mode:
   276                           	opt stack 0
   277  000046                     	ds	4
   278                           tblptru	equ	0xFF8
   279                           tblptrh	equ	0xFF7
   280                           tblptrl	equ	0xFF6
   281                           tablat	equ	0xFF5
   282                           postinc0	equ	0xFEE
   283                           wreg	equ	0xFE8
   284                           
   285                           	psect	dataCOMRAM
   286  00004A                     __pdataCOMRAM:
   287                           	opt stack 0
   288  00004A                     epoch_to_caltime@month_cache:
   289                           	opt stack 0
   290  00004A                     	ds	1
   291                           tblptru	equ	0xFF8
   292                           tblptrh	equ	0xFF7
   293                           tblptrl	equ	0xFF6
   294                           tablat	equ	0xFF5
   295                           postinc0	equ	0xFEE
   296                           wreg	equ	0xFE8
   297                           
   298                           	psect	bssBANK0
   299  00009B                     __pbssBANK0:
   300                           	opt stack 0
   301  00009B                     _time_change_flag:
   302                           	opt stack 0
   303  00009B                     	ds	1
   304  00009C                     _now:
   305                           	opt stack 0
   306  00009C                     	ds	14
   307                           tblptru	equ	0xFF8
   308                           tblptrh	equ	0xFF7
   309                           tblptrl	equ	0xFF6
   310                           tablat	equ	0xFF5
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           
   314                           	psect	cstackBANK0
   315  000060                     __pcstackBANK0:
   316                           	opt stack 0
   317  000060                     caltime_to_epoch@year:
   318                           	opt stack 0
   319  000060                     sprintf@prec:
   320                           	opt stack 0
   321  000060                     epoch_to_caltime@day_since_epoch:
   322                           	opt stack 0
   323                           
   324                           ; 2 bytes @ 0x0
   325  000060                     	ds	1
   326  000061                     caltime_to_epoch@month_1574:
   327                           	opt stack 0
   328  000061                     sprintf@ap:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0x1
   332  000061                     	ds	1
   333  000062                     epoch_to_caltime@day:
   334                           	opt stack 0
   335  000062                     caltime_to_epoch@epoch:
   336                           	opt stack 0
   337                           
   338                           ; 4 bytes @ 0x2
   339  000062                     	ds	1
   340  000063                     sprintf@cp:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x3
   344  000063                     	ds	1
   345  000064                     epoch_to_caltime@year:
   346                           	opt stack 0
   347                           
   348                           ; 1 bytes @ 0x4
   349  000064                     	ds	1
   350  000065                     epoch_to_caltime@month:
   351                           	opt stack 0
   352  000065                     sprintf@val:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x5
   356  000065                     	ds	1
   357  000066                     caltime_to_epoch@month:
   358                           	opt stack 0
   359  000066                     epoch_to_caltime@num:
   360                           	opt stack 0
   361                           
   362                           ; 4 bytes @ 0x6
   363  000066                     	ds	1
   364  000067                     sprintf@len:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x7
   368  000067                     	ds	2
   369  000069                     sprintf@flag:
   370                           	opt stack 0
   371                           
   372                           ; 1 bytes @ 0x9
   373  000069                     	ds	1
   374  00006A                     sprintf@c:
   375                           	opt stack 0
   376  00006A                     RTCC_from_epoch@tm:
   377                           	opt stack 0
   378                           
   379                           ; 2 bytes @ 0xA
   380  00006A                     	ds	1
   381  00006B                     sprintf@width:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0xB
   385  00006B                     	ds	1
   386  00006C                     RTCC_adjust_time_inc@tm:
   387                           	opt stack 0
   388  00006C                     RTCC_adjust_time_dec@tm:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0xC
   392  00006C                     	ds	2
   393  00006E                     ??_RTCC_adjust_time_inc:
   394  00006E                     ??_RTCC_adjust_time_dec:
   395                           
   396                           ; 0 bytes @ 0xE
   397  00006E                     	ds	4
   398  000072                     RTCC_adjust_time_inc@i_1754:
   399                           	opt stack 0
   400  000072                     RTCC_adjust_time_dec@i_1784:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x12
   404  000072                     	ds	1
   405  000073                     RTCC_adjust_time_inc@i:
   406                           	opt stack 0
   407  000073                     RTCC_adjust_time_dec@i:
   408                           	opt stack 0
   409                           
   410                           ; 1 bytes @ 0x13
   411  000073                     	ds	1
   412  000074                     RTCC_adjust_time_button@tm:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x14
   416  000074                     	ds	2
   417  000076                     RTCC_adjust_time_button@mode:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x16
   421  000076                     	ds	2
   422  000078                     RTCC_adjust_time_button@cnt_inc:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x18
   426  000078                     	ds	2
   427  00007A                     RTCC_adjust_time_button@cnt_dec:
   428                           	opt stack 0
   429                           
   430                           ; 2 bytes @ 0x1A
   431  00007A                     	ds	2
   432  00007C                     main@str:
   433                           	opt stack 0
   434                           
   435                           ; 30 bytes @ 0x1C
   436  00007C                     	ds	30
   437  00009A                     main@i:
   438                           	opt stack 0
   439                           
   440                           ; 1 bytes @ 0x3A
   441  00009A                     	ds	1
   442                           tblptru	equ	0xFF8
   443                           tblptrh	equ	0xFF7
   444                           tblptrl	equ	0xFF6
   445                           tablat	equ	0xFF5
   446                           postinc0	equ	0xFEE
   447                           wreg	equ	0xFE8
   448                           
   449                           	psect	cstackCOMRAM
   450  000001                     __pcstackCOMRAM:
   451                           	opt stack 0
   452  000001                     button_timer_interrupt@bt:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0x0
   456  000001                     	ds	2
   457  000003                     button_timer_interrupt@sw_value:
   458                           	opt stack 0
   459                           
   460                           ; 1 bytes @ 0x2
   461  000003                     	ds	1
   462  000004                     
   463                           ; 0 bytes @ 0x3
   464  000004                     	ds	2
   465  000006                     ??_ISR:
   466                           
   467                           ; 0 bytes @ 0x5
   468  000006                     	ds	15
   469  000015                     ??_isdigit:
   470  000015                     ??_x_to_d:
   471  000015                     ?___wmul:
   472                           	opt stack 0
   473  000015                     ?___awdiv:
   474                           	opt stack 0
   475  000015                     ?___awmod:
   476                           	opt stack 0
   477  000015                     ?___lwdiv:
   478                           	opt stack 0
   479  000015                     ?___lldiv:
   480                           	opt stack 0
   481  000015                     RTCC_adjust_time_toggle@tm:
   482                           	opt stack 0
   483  000015                     RTCC_adjust_time_cursor@tm:
   484                           	opt stack 0
   485  000015                     ___wmul@multiplier:
   486                           	opt stack 0
   487  000015                     ___awdiv@dividend:
   488                           	opt stack 0
   489  000015                     ___awmod@dividend:
   490                           	opt stack 0
   491  000015                     ___lwdiv@dividend:
   492                           	opt stack 0
   493  000015                     ___lldiv@dividend:
   494                           	opt stack 0
   495                           
   496                           ; 4 bytes @ 0x14
   497  000015                     	ds	1
   498  000016                     x_to_d@hex:
   499                           	opt stack 0
   500  000016                     _isdigit$2233:
   501                           	opt stack 0
   502                           
   503                           ; 1 bytes @ 0x15
   504  000016                     	ds	1
   505  000017                     isdigit@c:
   506                           	opt stack 0
   507  000017                     RTCC_to_caltime@tm:
   508                           	opt stack 0
   509  000017                     ___wmul@multiplicand:
   510                           	opt stack 0
   511  000017                     ___awdiv@divisor:
   512                           	opt stack 0
   513  000017                     ___awmod@divisor:
   514                           	opt stack 0
   515  000017                     ___lwdiv@divisor:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x16
   519  000017                     	ds	2
   520  000019                     RTCC_to_caltime@dumy:
   521                           	opt stack 0
   522  000019                     ___awdiv@counter:
   523                           	opt stack 0
   524  000019                     ___awmod@counter:
   525                           	opt stack 0
   526  000019                     ___lwdiv@counter:
   527                           	opt stack 0
   528  000019                     ___wmul@product:
   529                           	opt stack 0
   530  000019                     ___lldiv@divisor:
   531                           	opt stack 0
   532                           
   533                           ; 4 bytes @ 0x18
   534  000019                     	ds	1
   535  00001A                     ___awdiv@sign:
   536                           	opt stack 0
   537  00001A                     ___awmod@sign:
   538                           	opt stack 0
   539  00001A                     ___lwdiv@quotient:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x19
   543  00001A                     	ds	1
   544  00001B                     month_length@month:
   545                           	opt stack 0
   546  00001B                     ___awdiv@quotient:
   547                           	opt stack 0
   548                           
   549                           ; 2 bytes @ 0x1A
   550  00001B                     	ds	1
   551  00001C                     ??_month_length:
   552  00001C                     ?___lwmod:
   553                           	opt stack 0
   554  00001C                     ___lwmod@dividend:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x1B
   558  00001C                     	ds	1
   559  00001D                     d_to_x@dec:
   560                           	opt stack 0
   561  00001D                     ___lldiv@quotient:
   562                           	opt stack 0
   563                           
   564                           ; 4 bytes @ 0x1C
   565  00001D                     	ds	1
   566  00001E                     caltime_to_RTCC@tm:
   567                           	opt stack 0
   568  00001E                     ___lwmod@divisor:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x1D
   572  00001E                     	ds	2
   573  000020                     month_length@year:
   574                           	opt stack 0
   575  000020                     ___lwmod@counter:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0x1F
   579  000020                     	ds	1
   580  000021                     ?_sprintf:
   581                           	opt stack 0
   582  000021                     ___lldiv@counter:
   583                           	opt stack 0
   584  000021                     sprintf@sp:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0x20
   588  000021                     	ds	1
   589  000022                     ?___lmul:
   590                           	opt stack 0
   591  000022                     ___lmul@multiplier:
   592                           	opt stack 0
   593                           
   594                           ; 4 bytes @ 0x21
   595  000022                     	ds	1
   596  000023                     sprintf@f:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0x22
   600  000023                     	ds	3
   601  000026                     ___lmul@multiplicand:
   602                           	opt stack 0
   603                           
   604                           ; 4 bytes @ 0x25
   605  000026                     	ds	4
   606  00002A                     ___lmul@product:
   607                           	opt stack 0
   608                           
   609                           ; 4 bytes @ 0x29
   610  00002A                     	ds	4
   611  00002E                     ?_get_quot_rem:
   612                           	opt stack 0
   613  00002E                     get_quot_rem@quot:
   614                           	opt stack 0
   615  00002E                     caltime_to_epoch@tm:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x2D
   619  00002E                     	ds	2
   620  000030                     ??_caltime_to_epoch:
   621  000030                     get_quot_rem@div:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x2F
   625  000030                     	ds	2
   626  000032                     get_quot_rem@num:
   627                           	opt stack 0
   628                           
   629                           ; 4 bytes @ 0x31
   630  000032                     	ds	1
   631  000033                     ??_sprintf:
   632                           
   633                           ; 0 bytes @ 0x32
   634  000033                     	ds	1
   635  000034                     RTCC_from_RTCC@tm:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x33
   639  000034                     	ds	2
   640  000036                     epoch_to_caltime@tm:
   641                           	opt stack 0
   642                           
   643                           ; 2 bytes @ 0x35
   644  000036                     	ds	2
   645  000038                     ??_epoch_to_caltime:
   646                           
   647                           ; 0 bytes @ 0x37
   648  000038                     	ds	2
   649  00003A                     tblptru	equ	0xFF8
   650                           tblptrh	equ	0xFF7
   651                           tblptrl	equ	0xFF6
   652                           tablat	equ	0xFF5
   653                           postinc0	equ	0xFEE
   654                           wreg	equ	0xFE8
   655                           
   656                           ; 0 bytes @ 0x39
   657 ;;
   658 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   659 ;;
   660 ;; *************** function _main *****************
   661 ;; Defined at:
   662 ;;		line 115 in file "main.c"
   663 ;; Parameters:    Size  Location     Type
   664 ;;		None
   665 ;; Auto vars:     Size  Location     Type
   666 ;;  i               1   58[BANK0 ] unsigned char 
   667 ;;  str            30   28[BANK0 ] unsigned char [30]
   668 ;; Return value:  Size  Location     Type
   669 ;;                  2   96[None  ] int 
   670 ;; Registers used:
   671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   672 ;; Tracked objects:
   673 ;;		On entry : 0/0
   674 ;;		On exit  : 0/0
   675 ;;		Unchanged: 0/0
   676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   678 ;;      Locals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   680 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   681 ;;Total ram usage:       31 bytes
   682 ;; Hardware stack levels required when called:    8
   683 ;; This function calls:
   684 ;;		_RTCC_adjust_time_button
   685 ;;		_RTCC_task
   686 ;;		_main_init
   687 ;;		_sprintf
   688 ;; This function is called by:
   689 ;;		Startup code after reset
   690 ;; This function uses a non-reentrant model
   691 ;;
   692                           
   693                           	psect	text0
   694  0020D6                     __ptext0:
   695                           	opt stack 0
   696  0020D6                     _main:
   697                           	opt stack 23
   698                           
   699                           ;main.c: 116: main_init();
   700                           
   701                           ;incstack = 0
   702  0020D6  ECB5  F012         	call	_main_init	;wreg free
   703                           
   704                           ;main.c: 117: INTCONbits.GIE = 1;
   705  0020DA  8EF2               	bsf	intcon,7,c	;volatile
   706  0020DC                     l97:
   707                           
   708                           ;main.c: 120: RTCC_task();
   709  0020DC  ECD3  F013         	call	_RTCC_task	;wreg free
   710                           
   711                           ;main.c: 121: RTCC_adjust_time_button(&now, &mode, &inc, &dec);
   712  0020E0  0E9C               	movlw	low _now
   713  0020E2  0100               	movlb	0	; () banked
   714  0020E4  6F74               	movwf	RTCC_adjust_time_button@tm& (0+255),b
   715  0020E6  0E00               	movlw	high _now
   716  0020E8  0100               	movlb	0	; () banked
   717  0020EA  6F75               	movwf	(RTCC_adjust_time_button@tm+1)& (0+255),b
   718  0020EC  0E46               	movlw	low _mode
   719  0020EE  0100               	movlb	0	; () banked
   720  0020F0  6F76               	movwf	RTCC_adjust_time_button@mode& (0+255),b
   721  0020F2  0E00               	movlw	high _mode
   722  0020F4  0100               	movlb	0	; () banked
   723  0020F6  6F77               	movwf	(RTCC_adjust_time_button@mode+1)& (0+255),b
   724  0020F8  0E42               	movlw	low _inc
   725  0020FA  0100               	movlb	0	; () banked
   726  0020FC  6F78               	movwf	RTCC_adjust_time_button@cnt_inc& (0+255),b
   727  0020FE  0E00               	movlw	high _inc
   728  002100  0100               	movlb	0	; () banked
   729  002102  6F79               	movwf	(RTCC_adjust_time_button@cnt_inc+1)& (0+255),b
   730  002104  0E3E               	movlw	low _dec
   731  002106  0100               	movlb	0	; () banked
   732  002108  6F7A               	movwf	RTCC_adjust_time_button@cnt_dec& (0+255),b
   733  00210A  0E00               	movlw	high _dec
   734  00210C  0100               	movlb	0	; () banked
   735  00210E  6F7B               	movwf	(RTCC_adjust_time_button@cnt_dec+1)& (0+255),b
   736  002110  EC6C  F00F         	call	_RTCC_adjust_time_button	;wreg free
   737                           
   738                           ;main.c: 123: if (time_change_flag) {
   739  002114  0100               	movlb	0	; () banked
   740  002116  519B               	movf	_time_change_flag& (0+255),w,b
   741  002118  B4D8               	btfsc	status,2,c
   742  00211A  D7E0               	goto	l97
   743                           
   744                           ; BSR set to: 0
   745                           ;main.c: 124: time_change_flag = 0;
   746  00211C  0E00               	movlw	0
   747  00211E  0100               	movlb	0	; () banked
   748  002120  6F9B               	movwf	_time_change_flag& (0+255),b
   749                           
   750                           ; BSR set to: 0
   751                           ;main.c: 125: char str[30];
   752                           ;main.c: 126: sprintf(str, "\t20%02d/%02d/%02d(%s)%02d:%02d-%02d\n",
   753                           ;main.c: 127: now.YY,
   754                           ;main.c: 128: now.MM,
   755                           ;main.c: 129: now.DD,
   756                           ;main.c: 130: weekday_3char[now.EE],
   757                           ;main.c: 131: now.hh,
   758                           ;main.c: 132: now.mm,
   759                           ;main.c: 133: now.ss);
   760  002122  0E7C               	movlw	low main@str
   761  002124  6E21               	movwf	sprintf@sp,c
   762  002126  0E00               	movlw	high main@str
   763  002128  6E22               	movwf	sprintf@sp+1,c
   764  00212A  0E27               	movlw	low STR_1
   765  00212C  6E23               	movwf	sprintf@f,c
   766  00212E  0E0F               	movlw	high STR_1
   767  002130  6E24               	movwf	sprintf@f+1,c
   768  002132  C0A6  F025         	movff	_now+10,?_sprintf+4
   769  002136  6A26               	clrf	?_sprintf+5,c
   770  002138  C0A5  F027         	movff	_now+9,?_sprintf+6
   771  00213C  6A28               	clrf	?_sprintf+7,c
   772  00213E  C0A4  F029         	movff	_now+8,?_sprintf+8
   773  002142  6A2A               	clrf	?_sprintf+9,c
   774  002144  0100               	movlb	0	; () banked
   775  002146  51A3               	movf	(_now+7)& (0+255),w,b
   776  002148  0D04               	mullw	4
   777  00214A  0E0B               	movlw	low _weekday_3char
   778  00214C  24F3               	addwf	prodl,w,c
   779  00214E  6E2B               	movwf	?_sprintf+10,c
   780  002150  0E0F               	movlw	high _weekday_3char
   781  002152  20F4               	addwfc	prodh,w,c
   782  002154  6E2C               	movwf	?_sprintf+11,c
   783  002156  C0A2  F02D         	movff	_now+6,?_sprintf+12
   784  00215A  6A2E               	clrf	?_sprintf+13,c
   785  00215C  C0A1  F02F         	movff	_now+5,?_sprintf+14
   786  002160  6A30               	clrf	?_sprintf+15,c
   787  002162  C0A0  F031         	movff	_now+4,?_sprintf+16
   788  002166  6A32               	clrf	?_sprintf+17,c
   789  002168  ECB5  F007         	call	_sprintf	;wreg free
   790                           
   791                           ;main.c: 134: for (uint8_t i = 0; str[i]; i++) {
   792  00216C  0E00               	movlw	0
   793  00216E  0100               	movlb	0	; () banked
   794  002170  6F9A               	movwf	main@i& (0+255),b
   795  002172  D00F               	goto	l3610
   796  002174                     l101:
   797  002174  A89E               	btfss	3998,4,c	;volatile
   798  002176  D7FE               	goto	l101
   799                           
   800                           ;main.c: 136: TXREG1 = str[i];
   801  002178  0100               	movlb	0	; () banked
   802  00217A  519A               	movf	main@i& (0+255),w,b
   803  00217C  0D01               	mullw	1
   804  00217E  0E7C               	movlw	low main@str
   805  002180  24F3               	addwf	prodl,w,c
   806  002182  6ED9               	movwf	fsr2l,c
   807  002184  0E00               	movlw	high main@str
   808  002186  20F4               	addwfc	prodh,w,c
   809  002188  6EDA               	movwf	fsr2h,c
   810  00218A  50DF               	movf	indf2,w,c
   811  00218C  6EAE               	movwf	4014,c	;volatile
   812                           
   813                           ; BSR set to: 0
   814  00218E  0100               	movlb	0	; () banked
   815  002190  2B9A               	incf	main@i& (0+255),f,b
   816  002192                     l3610:
   817                           
   818                           ; BSR set to: 0
   819  002192  0100               	movlb	0	; () banked
   820  002194  519A               	movf	main@i& (0+255),w,b
   821  002196  0D01               	mullw	1
   822  002198  0E7C               	movlw	low main@str
   823  00219A  24F3               	addwf	prodl,w,c
   824  00219C  6ED9               	movwf	fsr2l,c
   825  00219E  0E00               	movlw	high main@str
   826  0021A0  20F4               	addwfc	prodh,w,c
   827  0021A2  6EDA               	movwf	fsr2h,c
   828  0021A4  50DF               	movf	indf2,w,c
   829  0021A6  B4D8               	btfsc	status,2,c
   830  0021A8  D799               	goto	l97
   831  0021AA  D7E4               	goto	l101
   832  0021AC                     __end_of_main:
   833                           	opt stack 0
   834                           tblptru	equ	0xFF8
   835                           tblptrh	equ	0xFF7
   836                           tblptrl	equ	0xFF6
   837                           tablat	equ	0xFF5
   838                           prodh	equ	0xFF4
   839                           prodl	equ	0xFF3
   840                           intcon	equ	0xFF2
   841                           postinc0	equ	0xFEE
   842                           wreg	equ	0xFE8
   843                           indf2	equ	0xFDF
   844                           fsr2h	equ	0xFDA
   845                           fsr2l	equ	0xFD9
   846                           status	equ	0xFD8
   847                           
   848 ;; *************** function _sprintf *****************
   849 ;; Defined at:
   850 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
   851 ;; Parameters:    Size  Location     Type
   852 ;;  sp              2   32[COMRAM] PTR unsigned char 
   853 ;;		 -> display_dec@s(4), main@str(30), 
   854 ;;  f               2   34[COMRAM] PTR const unsigned char 
   855 ;;		 -> STR_2(5), STR_1(37), 
   856 ;; Auto vars:     Size  Location     Type
   857 ;;  tmpval          4    0        struct .
   858 ;;  width           2   11[BANK0 ] int 
   859 ;;  len             2    7[BANK0 ] unsigned int 
   860 ;;  val             2    5[BANK0 ] unsigned int 
   861 ;;  cp              2    3[BANK0 ] PTR const unsigned char 
   862 ;;		 -> STR_20(7), weekday_3char(28), 
   863 ;;  ap              2    1[BANK0 ] PTR void [1]
   864 ;;		 -> ?_sprintf(2), 
   865 ;;  c               1   10[BANK0 ] char 
   866 ;;  flag            1    9[BANK0 ] unsigned char 
   867 ;;  prec            1    0[BANK0 ] char 
   868 ;; Return value:  Size  Location     Type
   869 ;;                  2   32[COMRAM] int 
   870 ;; Registers used:
   871 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   872 ;; Tracked objects:
   873 ;;		On entry : 0/0
   874 ;;		On exit  : 0/0
   875 ;;		Unchanged: 0/0
   876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   877 ;;      Params:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   878 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   879 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   880 ;;      Totals:        22      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   881 ;;Total ram usage:       35 bytes
   882 ;; Hardware stack levels used:    1
   883 ;; Hardware stack levels required when called:    3
   884 ;; This function calls:
   885 ;;		___lwdiv
   886 ;;		___lwmod
   887 ;;		___wmul
   888 ;;		_isdigit
   889 ;; This function is called by:
   890 ;;		_main
   891 ;;		_display_dec
   892 ;; This function uses a non-reentrant model
   893 ;;
   894                           
   895                           	psect	text1
   896  000F6A                     __ptext1:
   897                           	opt stack 0
   898  000F6A                     _sprintf:
   899                           	opt stack 27
   900                           
   901                           ;doprnt.c: 494: va_list ap;
   902                           ;doprnt.c: 499: signed char c;
   903                           ;doprnt.c: 501: int width;
   904                           ;doprnt.c: 506: signed char prec;
   905                           ;doprnt.c: 508: unsigned char flag;
   906                           ;doprnt.c: 523: union {
   907                           ;doprnt.c: 524: unsigned long vd;
   908                           ;doprnt.c: 525: double integ;
   909                           ;doprnt.c: 526: } tmpval;
   910                           ;doprnt.c: 528: unsigned int val;
   911                           ;doprnt.c: 529: unsigned len;
   912                           ;doprnt.c: 530: const char * cp;
   913                           ;doprnt.c: 533: *ap = __va_start();
   914                           
   915                           ; BSR set to: 0
   916                           ;incstack = 0
   917  000F6A  0E25               	movlw	low (?_sprintf+4)
   918  000F6C  0100               	movlb	0	; () banked
   919  000F6E  6F61               	movwf	sprintf@ap& (0+255),b
   920  000F70  0E00               	movlw	high (?_sprintf+4)
   921  000F72  0100               	movlb	0	; () banked
   922  000F74  6F62               	movwf	(sprintf@ap+1)& (0+255),b
   923                           
   924                           ;doprnt.c: 536: while(c = *f++) {
   925  000F76  D1F1               	goto	l3578
   926  000F78                     l3438:
   927                           
   928                           ; BSR set to: 0
   929                           ;doprnt.c: 538: if(c != '%')
   930  000F78  0E25               	movlw	37
   931  000F7A  0100               	movlb	0	; () banked
   932  000F7C  196A               	xorwf	sprintf@c& (0+255),w,b
   933  000F7E  B4D8               	btfsc	status,2,c
   934  000F80  D009               	goto	l3444
   935                           
   936                           ; BSR set to: 0
   937                           ;doprnt.c: 540: {
   938                           ;doprnt.c: 541: ((*sp++ = (c)));
   939  000F82  C021  FFD9         	movff	sprintf@sp,fsr2l
   940  000F86  C022  FFDA         	movff	sprintf@sp+1,fsr2h
   941  000F8A  C06A  FFDF         	movff	sprintf@c,indf2
   942                           
   943                           ; BSR set to: 0
   944  000F8E  4A21               	infsnz	sprintf@sp,f,c
   945  000F90  2A22               	incf	sprintf@sp+1,f,c
   946                           
   947                           ;doprnt.c: 542: continue;
   948  000F92  D1E3               	goto	l3578
   949  000F94                     l3444:
   950                           
   951                           ; BSR set to: 0
   952                           ;doprnt.c: 543: }
   953                           ;doprnt.c: 546: width = 0;
   954  000F94  0E00               	movlw	0
   955  000F96  0100               	movlb	0	; () banked
   956  000F98  6F6C               	movwf	(sprintf@width+1)& (0+255),b
   957  000F9A  0E00               	movlw	0
   958  000F9C  6F6B               	movwf	sprintf@width& (0+255),b
   959                           
   960                           ;doprnt.c: 548: flag = 0;
   961  000F9E  0E00               	movlw	0
   962  000FA0  0100               	movlb	0	; () banked
   963  000FA2  6F69               	movwf	sprintf@flag& (0+255),b
   964                           
   965                           ; BSR set to: 0
   966                           ;doprnt.c: 551: switch(*f) {
   967                           
   968                           ;doprnt.c: 550: for(;;) {
   969  000FA4  D004               	goto	l3450
   970  000FA6                     l3446:
   971                           
   972                           ;doprnt.c: 580: flag |= 0x04;
   973  000FA6  0100               	movlb	0	; () banked
   974  000FA8  8569               	bsf	sprintf@flag& (0+255),2,b
   975                           
   976                           ;doprnt.c: 581: f++;
   977  000FAA  4A23               	infsnz	sprintf@f,f,c
   978  000FAC  2A24               	incf	sprintf@f+1,f,c
   979  000FAE                     l3450:
   980  000FAE  C023  FFF6         	movff	sprintf@f,tblptrl
   981  000FB2  C024  FFF7         	movff	sprintf@f+1,tblptrh
   982  000FB6                     	if	0	;tblptru may be non-zero
   983  000FB6                     	endif
   984  000FB6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
   985  000FB6  0E00               	movlw	low (__mediumconst shr (0+16))
   986  000FB8  6EF8               	movwf	tblptru,c
   987  000FBA                     	endif
   988  000FBA  0008               	tblrd		*
   989  000FBC  50F5               	movf	tablat,w,c
   990                           
   991                           ; Switch size 1, requested type "space"
   992                           ; Number of cases is 1, Range of values is 48 to 48
   993                           ; switch strategies available:
   994                           ; Name         Instructions Cycles
   995                           ; simple_byte            4     3 (average)
   996                           ;	Chosen strategy is simple_byte
   997  000FBE  0A30               	xorlw	48	; case 48
   998  000FC0  B4D8               	btfsc	status,2,c
   999  000FC2  D7F1               	goto	l3446
  1000                           
  1001                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1002                           
  1003                           ;doprnt.c: 586: }
  1004                           
  1005                           ;doprnt.c: 585: break;
  1006  000FC4  C023  FFF6         	movff	sprintf@f,tblptrl
  1007  000FC8  C024  FFF7         	movff	sprintf@f+1,tblptrh
  1008  000FCC                     	if	0	;tblptru may be non-zero
  1009  000FCC                     	endif
  1010  000FCC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1011  000FCC  0E00               	movlw	low (__mediumconst shr (0+16))
  1012  000FCE  6EF8               	movwf	tblptru,c
  1013  000FD0                     	endif
  1014  000FD0  0008               	tblrd		*
  1015  000FD2  50F5               	movf	tablat,w,c
  1016  000FD4  EC35  F014         	call	_isdigit
  1017  000FD8  A0D8               	btfss	status,0,c
  1018  000FDA  D0BC               	goto	l3500
  1019                           
  1020                           ;doprnt.c: 598: width = 0;
  1021  000FDC  0E00               	movlw	0
  1022  000FDE  0100               	movlb	0	; () banked
  1023  000FE0  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  1024  000FE2  0E00               	movlw	0
  1025  000FE4  6F6B               	movwf	sprintf@width& (0+255),b
  1026  000FE6                     l3456:
  1027                           
  1028                           ;doprnt.c: 600: width *= 10;
  1029  000FE6  C06B  F015         	movff	sprintf@width,___wmul@multiplier
  1030  000FEA  C06C  F016         	movff	sprintf@width+1,___wmul@multiplier+1
  1031  000FEE  0E00               	movlw	0
  1032  000FF0  6E18               	movwf	___wmul@multiplicand+1,c
  1033  000FF2  0E0A               	movlw	10
  1034  000FF4  6E17               	movwf	___wmul@multiplicand,c
  1035  000FF6  EC22  F014         	call	___wmul	;wreg free
  1036  000FFA  C015  F06B         	movff	?___wmul,sprintf@width
  1037  000FFE  C016  F06C         	movff	?___wmul+1,sprintf@width+1
  1038                           
  1039                           ;doprnt.c: 601: width += *f++ - '0';
  1040  001002  0ED0               	movlw	208
  1041  001004  6E33               	movwf	??_sprintf& (0+255),c
  1042  001006  0EFF               	movlw	255
  1043  001008  6E34               	movwf	(??_sprintf+1)& (0+255),c
  1044  00100A  C023  FFF6         	movff	sprintf@f,tblptrl
  1045  00100E  C024  FFF7         	movff	sprintf@f+1,tblptrh
  1046  001012                     	if	0	;tblptru may be non-zero
  1047  001012                     	endif
  1048  001012                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1049  001012  0E00               	movlw	low (__mediumconst shr (0+16))
  1050  001014  6EF8               	movwf	tblptru,c
  1051  001016                     	endif
  1052  001016  0008               	tblrd		*
  1053  001018  50F5               	movf	tablat,w,c
  1054  00101A  6E35               	movwf	(??_sprintf+2)& (0+255),c
  1055  00101C  6A36               	clrf	(??_sprintf+3)& (0+255),c
  1056  00101E  5033               	movf	??_sprintf,w,c
  1057  001020  2635               	addwf	??_sprintf+2,f,c
  1058  001022  5034               	movf	??_sprintf+1,w,c
  1059  001024  2236               	addwfc	??_sprintf+3,f,c
  1060  001026  5035               	movf	??_sprintf+2,w,c
  1061  001028  0100               	movlb	0	; () banked
  1062  00102A  276B               	addwf	sprintf@width& (0+255),f,b
  1063  00102C  5036               	movf	??_sprintf+3,w,c
  1064  00102E  0100               	movlb	0	; () banked
  1065  001030  236C               	addwfc	(sprintf@width+1)& (0+255),f,b
  1066                           
  1067                           ; BSR set to: 0
  1068  001032  4A23               	infsnz	sprintf@f,f,c
  1069  001034  2A24               	incf	sprintf@f+1,f,c
  1070                           
  1071                           ; BSR set to: 0
  1072                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1073  001036  C023  FFF6         	movff	sprintf@f,tblptrl
  1074  00103A  C024  FFF7         	movff	sprintf@f+1,tblptrh
  1075  00103E                     	if	0	;tblptru may be non-zero
  1076  00103E                     	endif
  1077  00103E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1078  00103E  0E00               	movlw	low (__mediumconst shr (0+16))
  1079  001040  6EF8               	movwf	tblptru,c
  1080  001042                     	endif
  1081  001042  0008               	tblrd		*
  1082  001044  50F5               	movf	tablat,w,c
  1083  001046  EC35  F014         	call	_isdigit
  1084  00104A  A0D8               	btfss	status,0,c
  1085  00104C  D083               	goto	l3500
  1086  00104E  D7CB               	goto	l3456
  1087  001050                     l3464:
  1088                           
  1089                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  1090  001050  C061  FFD9         	movff	sprintf@ap,fsr2l
  1091  001054  C062  FFDA         	movff	sprintf@ap+1,fsr2h
  1092  001058  CFDE F063          	movff	postinc2,sprintf@cp
  1093  00105C  CFDD F064          	movff	postdec2,sprintf@cp+1
  1094  001060  0E02               	movlw	2
  1095  001062  0100               	movlb	0	; () banked
  1096  001064  2761               	addwf	sprintf@ap& (0+255),f,b
  1097  001066  0E00               	movlw	0
  1098  001068  2362               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1099                           
  1100                           ; BSR set to: 0
  1101                           ;doprnt.c: 740: if(!cp)
  1102  00106A  0100               	movlb	0	; () banked
  1103  00106C  5163               	movf	sprintf@cp& (0+255),w,b
  1104  00106E  0100               	movlb	0	; () banked
  1105  001070  1164               	iorwf	(sprintf@cp+1)& (0+255),w,b
  1106  001072  A4D8               	btfss	status,2,c
  1107  001074  D006               	goto	l3472
  1108                           
  1109                           ; BSR set to: 0
  1110                           ;doprnt.c: 741: cp = "(null)";
  1111  001076  0E55               	movlw	low STR_20
  1112  001078  0100               	movlb	0	; () banked
  1113  00107A  6F63               	movwf	sprintf@cp& (0+255),b
  1114  00107C  0E0F               	movlw	high STR_20
  1115  00107E  0100               	movlb	0	; () banked
  1116  001080  6F64               	movwf	(sprintf@cp+1)& (0+255),b
  1117  001082                     l3472:
  1118                           
  1119                           ; BSR set to: 0
  1120                           ;doprnt.c: 745: len = 0;
  1121  001082  0E00               	movlw	0
  1122  001084  0100               	movlb	0	; () banked
  1123  001086  6F68               	movwf	(sprintf@len+1)& (0+255),b
  1124  001088  0E00               	movlw	0
  1125  00108A  6F67               	movwf	sprintf@len& (0+255),b
  1126                           
  1127                           ;doprnt.c: 746: while(cp[len])
  1128  00108C  D003               	goto	l3476
  1129  00108E                     l3474:
  1130                           
  1131                           ; BSR set to: 0
  1132                           ;doprnt.c: 747: len++;
  1133  00108E  0100               	movlb	0	; () banked
  1134  001090  4B67               	infsnz	sprintf@len& (0+255),f,b
  1135  001092  2B68               	incf	(sprintf@len+1)& (0+255),f,b
  1136  001094                     l3476:
  1137                           
  1138                           ; BSR set to: 0
  1139  001094  0100               	movlb	0	; () banked
  1140  001096  5167               	movf	sprintf@len& (0+255),w,b
  1141  001098  0100               	movlb	0	; () banked
  1142  00109A  2563               	addwf	sprintf@cp& (0+255),w,b
  1143  00109C  6E33               	movwf	??_sprintf& (0+255),c
  1144  00109E  0100               	movlb	0	; () banked
  1145  0010A0  5168               	movf	(sprintf@len+1)& (0+255),w,b
  1146  0010A2  0100               	movlb	0	; () banked
  1147  0010A4  2164               	addwfc	(sprintf@cp+1)& (0+255),w,b
  1148  0010A6  6E34               	movwf	(??_sprintf+1)& (0+255),c
  1149  0010A8  C033  FFF6         	movff	??_sprintf,tblptrl
  1150  0010AC  C034  FFF7         	movff	??_sprintf+1,tblptrh
  1151  0010B0                     	if	0	;tblptru may be non-zero
  1152  0010B0                     	endif
  1153  0010B0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1154  0010B0  0E00               	movlw	low (__mediumconst shr (0+16))
  1155  0010B2  6EF8               	movwf	tblptru,c
  1156  0010B4                     	endif
  1157  0010B4  0008               	tblrd		*
  1158  0010B6  50F5               	movf	tablat,w,c
  1159  0010B8  0900               	iorlw	0
  1160  0010BA  A4D8               	btfss	status,2,c
  1161  0010BC  D7E8               	goto	l3474
  1162                           
  1163                           ; BSR set to: 0
  1164                           ;doprnt.c: 757: if(width > len)
  1165                           
  1166                           ; BSR set to: 0
  1167  0010BE  0100               	movlb	0	; () banked
  1168  0010C0  516B               	movf	sprintf@width& (0+255),w,b
  1169  0010C2  0100               	movlb	0	; () banked
  1170  0010C4  5D67               	subwf	sprintf@len& (0+255),w,b
  1171  0010C6  0100               	movlb	0	; () banked
  1172  0010C8  516C               	movf	(sprintf@width+1)& (0+255),w,b
  1173  0010CA  0100               	movlb	0	; () banked
  1174  0010CC  5968               	subwfb	(sprintf@len+1)& (0+255),w,b
  1175  0010CE  B0D8               	btfsc	status,0,c
  1176  0010D0  D009               	goto	l3482
  1177                           
  1178                           ; BSR set to: 0
  1179                           ;doprnt.c: 758: width -= len;
  1180  0010D2  0100               	movlb	0	; () banked
  1181  0010D4  5167               	movf	sprintf@len& (0+255),w,b
  1182  0010D6  0100               	movlb	0	; () banked
  1183  0010D8  5F6B               	subwf	sprintf@width& (0+255),f,b
  1184  0010DA  0100               	movlb	0	; () banked
  1185  0010DC  5168               	movf	(sprintf@len+1)& (0+255),w,b
  1186  0010DE  0100               	movlb	0	; () banked
  1187  0010E0  5B6C               	subwfb	(sprintf@width+1)& (0+255),f,b
  1188  0010E2  D00E               	goto	l3488
  1189  0010E4                     l3482:
  1190                           
  1191                           ; BSR set to: 0
  1192                           ;doprnt.c: 759: else
  1193                           ;doprnt.c: 760: width = 0;
  1194  0010E4  0E00               	movlw	0
  1195  0010E6  0100               	movlb	0	; () banked
  1196  0010E8  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  1197  0010EA  0E00               	movlw	0
  1198  0010EC  6F6B               	movwf	sprintf@width& (0+255),b
  1199                           
  1200                           ; BSR set to: 0
  1201                           ;doprnt.c: 764: while(width--)
  1202  0010EE  D008               	goto	l3488
  1203  0010F0                     l3484:
  1204                           
  1205                           ; BSR set to: 0
  1206                           ;doprnt.c: 765: ((*sp++ = (' ')));
  1207  0010F0  C021  FFD9         	movff	sprintf@sp,fsr2l
  1208  0010F4  C022  FFDA         	movff	sprintf@sp+1,fsr2h
  1209  0010F8  0E20               	movlw	32
  1210  0010FA  6EDF               	movwf	indf2,c
  1211                           
  1212                           ; BSR set to: 0
  1213  0010FC  4A21               	infsnz	sprintf@sp,f,c
  1214  0010FE  2A22               	incf	sprintf@sp+1,f,c
  1215  001100                     l3488:
  1216                           
  1217                           ; BSR set to: 0
  1218  001100  0100               	movlb	0	; () banked
  1219  001102  076B               	decf	sprintf@width& (0+255),f,b
  1220  001104  A0D8               	btfss	status,0,c
  1221  001106  076C               	decf	(sprintf@width+1)& (0+255),f,b
  1222  001108  0100               	movlb	0	; () banked
  1223  00110A  296B               	incf	sprintf@width& (0+255),w,b
  1224  00110C  E1F1               	bnz	l3484
  1225  00110E  0100               	movlb	0	; () banked
  1226  001110  296C               	incf	(sprintf@width+1)& (0+255),w,b
  1227  001112  B4D8               	btfsc	status,2,c
  1228  001114  D013               	goto	l3496
  1229  001116  D7EC               	goto	l3484
  1230  001118                     l3490:
  1231                           
  1232                           ; BSR set to: 0
  1233                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  1234  001118  C063  FFF6         	movff	sprintf@cp,tblptrl
  1235  00111C  C064  FFF7         	movff	sprintf@cp+1,tblptrh
  1236  001120                     	if	0	;tblptru may be non-zero
  1237  001120                     	endif
  1238  001120                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1239  001120  0E00               	movlw	low (__mediumconst shr (0+16))
  1240  001122  6EF8               	movwf	tblptru,c
  1241  001124                     	endif
  1242  001124  C021  FFD9         	movff	sprintf@sp,fsr2l
  1243  001128  C022  FFDA         	movff	sprintf@sp+1,fsr2h
  1244  00112C  0008               	tblrd		*
  1245  00112E  CFF5 FFDF          	movff	tablat,indf2
  1246                           
  1247                           ; BSR set to: 0
  1248  001132  0100               	movlb	0	; () banked
  1249  001134  4B63               	infsnz	sprintf@cp& (0+255),f,b
  1250  001136  2B64               	incf	(sprintf@cp+1)& (0+255),f,b
  1251                           
  1252                           ; BSR set to: 0
  1253  001138  4A21               	infsnz	sprintf@sp,f,c
  1254  00113A  2A22               	incf	sprintf@sp+1,f,c
  1255  00113C                     l3496:
  1256                           
  1257                           ; BSR set to: 0
  1258  00113C  0100               	movlb	0	; () banked
  1259  00113E  0767               	decf	sprintf@len& (0+255),f,b
  1260  001140  A0D8               	btfss	status,0,c
  1261  001142  0768               	decf	(sprintf@len+1)& (0+255),f,b
  1262  001144  0100               	movlb	0	; () banked
  1263  001146  2967               	incf	sprintf@len& (0+255),w,b
  1264  001148  E1E7               	bnz	l3490
  1265  00114A  0100               	movlb	0	; () banked
  1266  00114C  2968               	incf	(sprintf@len+1)& (0+255),w,b
  1267  00114E  B4D8               	btfsc	status,2,c
  1268  001150  D104               	goto	l3578
  1269  001152  D7E2               	goto	l3490
  1270  001154                     l3500:
  1271  001154  C023  FFF6         	movff	sprintf@f,tblptrl
  1272  001158  C024  FFF7         	movff	sprintf@f+1,tblptrh
  1273  00115C  4A23               	infsnz	sprintf@f,f,c
  1274  00115E  2A24               	incf	sprintf@f+1,f,c
  1275  001160                     	if	0	;tblptru may be non-zero
  1276  001160                     	endif
  1277  001160                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1278  001160  0E00               	movlw	low (__mediumconst shr (0+16))
  1279  001162  6EF8               	movwf	tblptru,c
  1280  001164                     	endif
  1281  001164  0008               	tblrd		*
  1282  001166  CFF5 F06A          	movff	tablat,sprintf@c
  1283  00116A  0100               	movlb	0	; () banked
  1284  00116C  516A               	movf	sprintf@c& (0+255),w,b
  1285                           
  1286                           ; Switch size 1, requested type "space"
  1287                           ; Number of cases is 4, Range of values is 0 to 115
  1288                           ; switch strategies available:
  1289                           ; Name         Instructions Cycles
  1290                           ; simple_byte           13     7 (average)
  1291                           ;	Chosen strategy is simple_byte
  1292  00116E  0A00               	xorlw	0	; case 0
  1293  001170  B4D8               	btfsc	status,2,c
  1294  001172  D102               	goto	l3580
  1295  001174  0A64               	xorlw	100	; case 100
  1296  001176  B4D8               	btfsc	status,2,c
  1297  001178  D007               	goto	l3502
  1298  00117A  0A0D               	xorlw	13	; case 105
  1299  00117C  B4D8               	btfsc	status,2,c
  1300  00117E  D004               	goto	l3502
  1301  001180  0A1A               	xorlw	26	; case 115
  1302  001182  B4D8               	btfsc	status,2,c
  1303  001184  D765               	goto	l3464
  1304  001186  D0E9               	goto	l3578
  1305  001188                     l3502:
  1306                           
  1307                           ;doprnt.c: 1253: {
  1308                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1309  001188  C061  FFD9         	movff	sprintf@ap,fsr2l
  1310  00118C  C062  FFDA         	movff	sprintf@ap+1,fsr2h
  1311  001190  CFDE F065          	movff	postinc2,sprintf@val
  1312  001194  CFDD F066          	movff	postdec2,sprintf@val+1
  1313  001198  0E02               	movlw	2
  1314  00119A  0100               	movlb	0	; () banked
  1315  00119C  2761               	addwf	sprintf@ap& (0+255),f,b
  1316  00119E  0E00               	movlw	0
  1317  0011A0  2362               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1318                           
  1319                           ; BSR set to: 0
  1320                           ;doprnt.c: 1261: if((int)val < 0) {
  1321  0011A2  0100               	movlb	0	; () banked
  1322  0011A4  AF66               	btfss	(sprintf@val+1)& (0+255),7,b
  1323  0011A6  D008               	goto	l3512
  1324                           
  1325                           ; BSR set to: 0
  1326                           ;doprnt.c: 1262: flag |= 0x03;
  1327  0011A8  0E03               	movlw	3
  1328  0011AA  0100               	movlb	0	; () banked
  1329  0011AC  1369               	iorwf	sprintf@flag& (0+255),f,b
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;doprnt.c: 1263: val = -val;
  1333  0011AE  0100               	movlb	0	; () banked
  1334  0011B0  6D65               	negf	sprintf@val& (0+255),b
  1335  0011B2  1F66               	comf	(sprintf@val+1)& (0+255),f,b
  1336  0011B4  B0D8               	btfsc	status,0,c
  1337  0011B6  2B66               	incf	(sprintf@val+1)& (0+255),f,b
  1338  0011B8                     l3512:
  1339                           
  1340                           ; BSR set to: 0
  1341                           ;doprnt.c: 1264: }
  1342                           ;doprnt.c: 1266: }
  1343                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1344  0011B8  0E01               	movlw	1
  1345  0011BA  0100               	movlb	0	; () banked
  1346  0011BC  6F6A               	movwf	sprintf@c& (0+255),b
  1347  0011BE                     l3514:
  1348                           
  1349                           ; BSR set to: 0
  1350  0011BE  0E05               	movlw	5
  1351  0011C0  0100               	movlb	0	; () banked
  1352  0011C2  196A               	xorwf	sprintf@c& (0+255),w,b
  1353  0011C4  B4D8               	btfsc	status,2,c
  1354  0011C6  D019               	goto	l3526
  1355                           
  1356                           ; BSR set to: 0
  1357                           ;doprnt.c: 1306: if(val < dpowers[c])
  1358                           
  1359                           ; BSR set to: 0
  1360                           
  1361                           ; BSR set to: 0
  1362  0011C8  0100               	movlb	0	; () banked
  1363  0011CA  516A               	movf	sprintf@c& (0+255),w,b
  1364  0011CC  0D02               	mullw	2
  1365  0011CE  0E01               	movlw	low _dpowers
  1366  0011D0  24F3               	addwf	prodl,w,c
  1367  0011D2  6EF6               	movwf	tblptrl,c
  1368  0011D4  0E0F               	movlw	high _dpowers
  1369  0011D6  20F4               	addwfc	prodh,w,c
  1370  0011D8  6EF7               	movwf	tblptrh,c
  1371  0011DA                     	if	1	;There are 3 active tblptr bytes
  1372  0011DA  6AF8               	clrf	tblptru,c
  1373  0011DC  0E00               	movlw	low (__mediumconst shr (0+16))
  1374  0011DE  22F8               	addwfc	tblptru,f,c
  1375  0011E0                     	endif
  1376  0011E0  0009               	tblrd		*+
  1377  0011E2  50F5               	movf	tablat,w,c
  1378  0011E4  0100               	movlb	0	; () banked
  1379  0011E6  5D65               	subwf	sprintf@val& (0+255),w,b
  1380  0011E8  0009               	tblrd		*+
  1381  0011EA  50F5               	movf	tablat,w,c
  1382  0011EC  0100               	movlb	0	; () banked
  1383  0011EE  5966               	subwfb	(sprintf@val+1)& (0+255),w,b
  1384  0011F0  A0D8               	btfss	status,0,c
  1385  0011F2  D003               	goto	l3526
  1386                           
  1387                           ; BSR set to: 0
  1388                           
  1389                           ; BSR set to: 0
  1390                           
  1391                           ; BSR set to: 0
  1392                           ;doprnt.c: 1307: break;
  1393  0011F4  0100               	movlb	0	; () banked
  1394  0011F6  2B6A               	incf	sprintf@c& (0+255),f,b
  1395  0011F8  D7E2               	goto	l3514
  1396  0011FA                     l3526:
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1400  0011FA  0100               	movlb	0	; () banked
  1401  0011FC  516B               	movf	sprintf@width& (0+255),w,b
  1402  0011FE  0100               	movlb	0	; () banked
  1403  001200  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  1404  001202  B4D8               	btfsc	status,2,c
  1405  001204  D00A               	goto	l3532
  1406                           
  1407                           ; BSR set to: 0
  1408  001206  C069  F033         	movff	sprintf@flag,??_sprintf
  1409  00120A  0E03               	movlw	3
  1410  00120C  1633               	andwf	??_sprintf,f,c
  1411  00120E  B4D8               	btfsc	status,2,c
  1412  001210  D004               	goto	l3532
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;doprnt.c: 1346: width--;
  1416  001212  0100               	movlb	0	; () banked
  1417  001214  076B               	decf	sprintf@width& (0+255),f,b
  1418  001216  A0D8               	btfss	status,0,c
  1419  001218  076C               	decf	(sprintf@width+1)& (0+255),f,b
  1420  00121A                     l3532:
  1421                           
  1422                           ; BSR set to: 0
  1423                           ;doprnt.c: 1381: if(width > c)
  1424  00121A  0E80               	movlw	128
  1425  00121C  0100               	movlb	0	; () banked
  1426  00121E  BF6A               	btfsc	sprintf@c& (0+255),7,b
  1427  001220  0E7F               	movlw	127
  1428  001222  6E33               	movwf	??_sprintf& (0+255),c
  1429  001224  0100               	movlb	0	; () banked
  1430  001226  516B               	movf	sprintf@width& (0+255),w,b
  1431  001228  0100               	movlb	0	; () banked
  1432  00122A  5D6A               	subwf	sprintf@c& (0+255),w,b
  1433  00122C  0100               	movlb	0	; () banked
  1434  00122E  516C               	movf	(sprintf@width+1)& (0+255),w,b
  1435  001230  0A80               	xorlw	128
  1436  001232  5833               	subwfb	??_sprintf& (0+255),w,c
  1437  001234  B0D8               	btfsc	status,0,c
  1438  001236  D00B               	goto	l3536
  1439                           
  1440                           ; BSR set to: 0
  1441                           ;doprnt.c: 1382: width -= c;
  1442  001238  0100               	movlb	0	; () banked
  1443  00123A  516A               	movf	sprintf@c& (0+255),w,b
  1444  00123C  0100               	movlb	0	; () banked
  1445  00123E  5F6B               	subwf	sprintf@width& (0+255),f,b
  1446  001240  0E00               	movlw	0
  1447  001242  0100               	movlb	0	; () banked
  1448  001244  BF6A               	btfsc	sprintf@c& (0+255),7,b
  1449  001246  0EFF               	movlw	255
  1450  001248  0100               	movlb	0	; () banked
  1451  00124A  5B6C               	subwfb	(sprintf@width+1)& (0+255),f,b
  1452  00124C  D005               	goto	l3538
  1453  00124E                     l3536:
  1454                           
  1455                           ; BSR set to: 0
  1456                           ;doprnt.c: 1383: else
  1457                           ;doprnt.c: 1384: width = 0;
  1458  00124E  0E00               	movlw	0
  1459  001250  0100               	movlb	0	; () banked
  1460  001252  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  1461  001254  0E00               	movlw	0
  1462  001256  6F6B               	movwf	sprintf@width& (0+255),b
  1463  001258                     l3538:
  1464                           
  1465                           ; BSR set to: 0
  1466                           ;doprnt.c: 1387: if(flag & 0x04) {
  1467  001258  0100               	movlb	0	; () banked
  1468  00125A  A569               	btfss	sprintf@flag& (0+255),2,b
  1469  00125C  D021               	goto	l3554
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;doprnt.c: 1392: if(flag & 0x03)
  1473  00125E  C069  F033         	movff	sprintf@flag,??_sprintf
  1474  001262  0E03               	movlw	3
  1475  001264  1633               	andwf	??_sprintf,f,c
  1476  001266  B4D8               	btfsc	status,2,c
  1477  001268  D008               	goto	l3546
  1478                           
  1479                           ; BSR set to: 0
  1480                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  1481  00126A  C021  FFD9         	movff	sprintf@sp,fsr2l
  1482  00126E  C022  FFDA         	movff	sprintf@sp+1,fsr2h
  1483  001272  0E2D               	movlw	45
  1484  001274  6EDF               	movwf	indf2,c
  1485                           
  1486                           ; BSR set to: 0
  1487  001276  4A21               	infsnz	sprintf@sp,f,c
  1488  001278  2A22               	incf	sprintf@sp+1,f,c
  1489  00127A                     l3546:
  1490                           
  1491                           ; BSR set to: 0
  1492                           ;doprnt.c: 1415: if(width)
  1493  00127A  0100               	movlb	0	; () banked
  1494  00127C  516B               	movf	sprintf@width& (0+255),w,b
  1495  00127E  0100               	movlb	0	; () banked
  1496  001280  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  1497  001282  B4D8               	btfsc	status,2,c
  1498  001284  D033               	goto	l3568
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  1502                           
  1503                           ; BSR set to: 0
  1504                           
  1505                           ;doprnt.c: 1416: do
  1506  001286  C021  FFD9         	movff	sprintf@sp,fsr2l
  1507  00128A  C022  FFDA         	movff	sprintf@sp+1,fsr2h
  1508  00128E  0E30               	movlw	48
  1509  001290  6EDF               	movwf	indf2,c
  1510                           
  1511                           ; BSR set to: 0
  1512  001292  4A21               	infsnz	sprintf@sp,f,c
  1513  001294  2A22               	incf	sprintf@sp+1,f,c
  1514                           
  1515                           ; BSR set to: 0
  1516                           ;doprnt.c: 1418: while(--width);
  1517  001296  0100               	movlb	0	; () banked
  1518  001298  076B               	decf	sprintf@width& (0+255),f,b
  1519  00129A  A0D8               	btfss	status,0,c
  1520  00129C  076C               	decf	(sprintf@width+1)& (0+255),f,b
  1521  00129E  D7ED               	goto	l3546
  1522  0012A0                     l3554:
  1523                           
  1524                           ; BSR set to: 0
  1525                           ;doprnt.c: 1422: {
  1526                           ;doprnt.c: 1424: if(width
  1527                           ;doprnt.c: 1428: )
  1528  0012A0  0100               	movlb	0	; () banked
  1529  0012A2  516B               	movf	sprintf@width& (0+255),w,b
  1530  0012A4  0100               	movlb	0	; () banked
  1531  0012A6  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  1532  0012A8  B4D8               	btfsc	status,2,c
  1533  0012AA  D012               	goto	l3562
  1534  0012AC                     l3556:
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1538  0012AC  C021  FFD9         	movff	sprintf@sp,fsr2l
  1539  0012B0  C022  FFDA         	movff	sprintf@sp+1,fsr2h
  1540  0012B4  0E20               	movlw	32
  1541  0012B6  6EDF               	movwf	indf2,c
  1542                           
  1543                           ; BSR set to: 0
  1544  0012B8  4A21               	infsnz	sprintf@sp,f,c
  1545  0012BA  2A22               	incf	sprintf@sp+1,f,c
  1546                           
  1547                           ; BSR set to: 0
  1548                           ;doprnt.c: 1431: while(--width);
  1549  0012BC  0100               	movlb	0	; () banked
  1550  0012BE  076B               	decf	sprintf@width& (0+255),f,b
  1551  0012C0  A0D8               	btfss	status,0,c
  1552  0012C2  076C               	decf	(sprintf@width+1)& (0+255),f,b
  1553  0012C4  0100               	movlb	0	; () banked
  1554  0012C6  516B               	movf	sprintf@width& (0+255),w,b
  1555  0012C8  0100               	movlb	0	; () banked
  1556  0012CA  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  1557  0012CC  A4D8               	btfss	status,2,c
  1558  0012CE  D7EE               	goto	l3556
  1559  0012D0                     l3562:
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;doprnt.c: 1438: if(flag & 0x03)
  1563  0012D0  C069  F033         	movff	sprintf@flag,??_sprintf
  1564  0012D4  0E03               	movlw	3
  1565  0012D6  1633               	andwf	??_sprintf,f,c
  1566  0012D8  B4D8               	btfsc	status,2,c
  1567  0012DA  D008               	goto	l3568
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1571  0012DC  C021  FFD9         	movff	sprintf@sp,fsr2l
  1572  0012E0  C022  FFDA         	movff	sprintf@sp+1,fsr2h
  1573  0012E4  0E2D               	movlw	45
  1574  0012E6  6EDF               	movwf	indf2,c
  1575                           
  1576                           ; BSR set to: 0
  1577  0012E8  4A21               	infsnz	sprintf@sp,f,c
  1578  0012EA  2A22               	incf	sprintf@sp+1,f,c
  1579  0012EC                     l3568:
  1580                           
  1581                           ; BSR set to: 0
  1582                           ;doprnt.c: 1469: }
  1583                           ;doprnt.c: 1472: prec = c;
  1584  0012EC  C06A  F060         	movff	sprintf@c,sprintf@prec
  1585                           
  1586                           ;doprnt.c: 1474: while(prec--) {
  1587  0012F0  D02E               	goto	l3576
  1588  0012F2                     l3570:
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;doprnt.c: 1478: {
  1592                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1593  0012F2  0100               	movlb	0	; () banked
  1594  0012F4  5160               	movf	sprintf@prec& (0+255),w,b
  1595  0012F6  0D02               	mullw	2
  1596  0012F8  0E01               	movlw	low _dpowers
  1597  0012FA  24F3               	addwf	prodl,w,c
  1598  0012FC  6EF6               	movwf	tblptrl,c
  1599  0012FE  0E0F               	movlw	high _dpowers
  1600  001300  20F4               	addwfc	prodh,w,c
  1601  001302  6EF7               	movwf	tblptrh,c
  1602  001304                     	if	1	;There are 3 active tblptr bytes
  1603  001304  6AF8               	clrf	tblptru,c
  1604  001306  0E00               	movlw	low (__mediumconst shr (0+16))
  1605  001308  22F8               	addwfc	tblptru,f,c
  1606  00130A                     	endif
  1607  00130A  0009               	tblrd		*+
  1608  00130C  CFF5 F017          	movff	tablat,___lwdiv@divisor
  1609  001310  000A               	tblrd		*-
  1610  001312  CFF5 F018          	movff	tablat,___lwdiv@divisor+1
  1611  001316  C065  F015         	movff	sprintf@val,___lwdiv@dividend
  1612  00131A  C066  F016         	movff	sprintf@val+1,___lwdiv@dividend+1
  1613  00131E  EC89  F013         	call	___lwdiv	;wreg free
  1614  001322  C015  F01C         	movff	?___lwdiv,___lwmod@dividend
  1615  001326  C016  F01D         	movff	?___lwdiv+1,___lwmod@dividend+1
  1616  00132A  0E00               	movlw	0
  1617  00132C  6E1F               	movwf	___lwmod@divisor+1,c
  1618  00132E  0E0A               	movlw	10
  1619  001330  6E1E               	movwf	___lwmod@divisor,c
  1620  001332  ECB2  F013         	call	___lwmod	;wreg free
  1621  001336  501C               	movf	?___lwmod,w,c
  1622  001338  0F30               	addlw	48
  1623  00133A  0100               	movlb	0	; () banked
  1624  00133C  6F6A               	movwf	sprintf@c& (0+255),b
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;doprnt.c: 1523: }
  1628                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1629  00133E  C021  FFD9         	movff	sprintf@sp,fsr2l
  1630  001342  C022  FFDA         	movff	sprintf@sp+1,fsr2h
  1631  001346  C06A  FFDF         	movff	sprintf@c,indf2
  1632                           
  1633                           ; BSR set to: 0
  1634  00134A  4A21               	infsnz	sprintf@sp,f,c
  1635  00134C  2A22               	incf	sprintf@sp+1,f,c
  1636  00134E                     l3576:
  1637                           
  1638                           ; BSR set to: 0
  1639  00134E  0100               	movlb	0	; () banked
  1640  001350  0760               	decf	sprintf@prec& (0+255),f,b
  1641  001352  0100               	movlb	0	; () banked
  1642  001354  2960               	incf	sprintf@prec& (0+255),w,b
  1643  001356  A4D8               	btfss	status,2,c
  1644  001358  D7CC               	goto	l3570
  1645  00135A                     l3578:
  1646                           
  1647                           ; BSR set to: 0
  1648  00135A  C023  FFF6         	movff	sprintf@f,tblptrl
  1649  00135E  C024  FFF7         	movff	sprintf@f+1,tblptrh
  1650  001362  4A23               	infsnz	sprintf@f,f,c
  1651  001364  2A24               	incf	sprintf@f+1,f,c
  1652  001366                     	if	0	;tblptru may be non-zero
  1653  001366                     	endif
  1654  001366                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1655  001366  0E00               	movlw	low (__mediumconst shr (0+16))
  1656  001368  6EF8               	movwf	tblptru,c
  1657  00136A                     	endif
  1658  00136A  0008               	tblrd		*
  1659  00136C  CFF5 F06A          	movff	tablat,sprintf@c
  1660  001370  0100               	movlb	0	; () banked
  1661  001372  516A               	movf	sprintf@c& (0+255),w,b
  1662  001374  A4D8               	btfss	status,2,c
  1663  001376  D600               	goto	l3438
  1664  001378                     l3580:
  1665                           
  1666                           ;doprnt.c: 1538: *sp = 0;
  1667  001378  C021  FFD9         	movff	sprintf@sp,fsr2l
  1668  00137C  C022  FFDA         	movff	sprintf@sp+1,fsr2h
  1669  001380  0E00               	movlw	0
  1670  001382  6EDF               	movwf	indf2,c
  1671  001384  0012               	return	
  1672  001386                     __end_of_sprintf:
  1673                           	opt stack 0
  1674                           tblptru	equ	0xFF8
  1675                           tblptrh	equ	0xFF7
  1676                           tblptrl	equ	0xFF6
  1677                           tablat	equ	0xFF5
  1678                           prodh	equ	0xFF4
  1679                           prodl	equ	0xFF3
  1680                           intcon	equ	0xFF2
  1681                           postinc0	equ	0xFEE
  1682                           wreg	equ	0xFE8
  1683                           indf2	equ	0xFDF
  1684                           postinc2	equ	0xFDE
  1685                           postdec2	equ	0xFDD
  1686                           fsr2h	equ	0xFDA
  1687                           fsr2l	equ	0xFD9
  1688                           status	equ	0xFD8
  1689                           
  1690 ;; *************** function _isdigit *****************
  1691 ;; Defined at:
  1692 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  1693 ;; Parameters:    Size  Location     Type
  1694 ;;  c               1    wreg     unsigned char 
  1695 ;; Auto vars:     Size  Location     Type
  1696 ;;  c               1   22[COMRAM] unsigned char 
  1697 ;; Return value:  Size  Location     Type
  1698 ;;		None               void
  1699 ;; Registers used:
  1700 ;;		wreg, status,2, status,0
  1701 ;; Tracked objects:
  1702 ;;		On entry : 0/0
  1703 ;;		On exit  : 0/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1707 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1708 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1709 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1710 ;;Total ram usage:        3 bytes
  1711 ;; Hardware stack levels used:    1
  1712 ;; Hardware stack levels required when called:    2
  1713 ;; This function calls:
  1714 ;;		Nothing
  1715 ;; This function is called by:
  1716 ;;		_sprintf
  1717 ;; This function uses a non-reentrant model
  1718 ;;
  1719                           
  1720                           	psect	text2
  1721  00286A                     __ptext2:
  1722                           	opt stack 0
  1723  00286A                     _isdigit:
  1724                           	opt stack 27
  1725                           
  1726                           ;incstack = 0
  1727                           ;isdigit@c stored from wreg
  1728  00286A  6E17               	movwf	isdigit@c,c
  1729  00286C  0E00               	movlw	0
  1730  00286E  6E16               	movwf	_isdigit$2233,c
  1731  002870  0E3A               	movlw	58
  1732  002872  6017               	cpfslt	isdigit@c,c
  1733  002874  D005               	goto	l3276
  1734  002876  0E2F               	movlw	47
  1735  002878  6417               	cpfsgt	isdigit@c,c
  1736  00287A  D002               	goto	l3276
  1737  00287C  0E01               	movlw	1
  1738  00287E  6E16               	movwf	_isdigit$2233,c
  1739  002880                     l3276:
  1740  002880  C016  F015         	movff	_isdigit$2233,??_isdigit
  1741  002884  3015               	rrcf	??_isdigit,w,c
  1742  002886  0012               	return	
  1743  002888                     __end_of_isdigit:
  1744                           	opt stack 0
  1745                           tblptru	equ	0xFF8
  1746                           tblptrh	equ	0xFF7
  1747                           tblptrl	equ	0xFF6
  1748                           tablat	equ	0xFF5
  1749                           prodh	equ	0xFF4
  1750                           prodl	equ	0xFF3
  1751                           intcon	equ	0xFF2
  1752                           postinc0	equ	0xFEE
  1753                           wreg	equ	0xFE8
  1754                           indf2	equ	0xFDF
  1755                           postinc2	equ	0xFDE
  1756                           postdec2	equ	0xFDD
  1757                           fsr2h	equ	0xFDA
  1758                           fsr2l	equ	0xFD9
  1759                           status	equ	0xFD8
  1760                           
  1761 ;; *************** function ___wmul *****************
  1762 ;; Defined at:
  1763 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  1764 ;; Parameters:    Size  Location     Type
  1765 ;;  multiplier      2   20[COMRAM] unsigned int 
  1766 ;;  multiplicand    2   22[COMRAM] unsigned int 
  1767 ;; Auto vars:     Size  Location     Type
  1768 ;;  product         2   24[COMRAM] unsigned int 
  1769 ;; Return value:  Size  Location     Type
  1770 ;;                  2   20[COMRAM] unsigned int 
  1771 ;; Registers used:
  1772 ;;		wreg, status,2, status,0, prodl, prodh
  1773 ;; Tracked objects:
  1774 ;;		On entry : 0/0
  1775 ;;		On exit  : 0/0
  1776 ;;		Unchanged: 0/0
  1777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1778 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1779 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1781 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1782 ;;Total ram usage:        6 bytes
  1783 ;; Hardware stack levels used:    1
  1784 ;; Hardware stack levels required when called:    2
  1785 ;; This function calls:
  1786 ;;		Nothing
  1787 ;; This function is called by:
  1788 ;;		_sprintf
  1789 ;; This function uses a non-reentrant model
  1790 ;;
  1791                           
  1792                           	psect	text3
  1793  002844                     __ptext3:
  1794                           	opt stack 0
  1795  002844                     ___wmul:
  1796                           	opt stack 27
  1797                           
  1798                           ;incstack = 0
  1799  002844  5015               	movf	___wmul@multiplier,w,c
  1800  002846  0217               	mulwf	___wmul@multiplicand,c
  1801  002848  CFF3 F019          	movff	prodl,___wmul@product
  1802  00284C  CFF4 F01A          	movff	prodh,___wmul@product+1
  1803  002850  5015               	movf	___wmul@multiplier,w,c
  1804  002852  0218               	mulwf	___wmul@multiplicand+1,c
  1805  002854  50F3               	movf	prodl,w,c
  1806  002856  261A               	addwf	___wmul@product+1,f,c
  1807  002858  5016               	movf	___wmul@multiplier+1,w,c
  1808  00285A  0217               	mulwf	___wmul@multiplicand,c
  1809  00285C  50F3               	movf	prodl,w,c
  1810  00285E  261A               	addwf	___wmul@product+1,f,c
  1811  002860  C019  F015         	movff	___wmul@product,?___wmul
  1812  002864  C01A  F016         	movff	___wmul@product+1,?___wmul+1
  1813  002868  0012               	return	
  1814  00286A                     __end_of___wmul:
  1815                           	opt stack 0
  1816                           tblptru	equ	0xFF8
  1817                           tblptrh	equ	0xFF7
  1818                           tblptrl	equ	0xFF6
  1819                           tablat	equ	0xFF5
  1820                           prodh	equ	0xFF4
  1821                           prodl	equ	0xFF3
  1822                           intcon	equ	0xFF2
  1823                           postinc0	equ	0xFEE
  1824                           wreg	equ	0xFE8
  1825                           indf2	equ	0xFDF
  1826                           postinc2	equ	0xFDE
  1827                           postdec2	equ	0xFDD
  1828                           fsr2h	equ	0xFDA
  1829                           fsr2l	equ	0xFD9
  1830                           status	equ	0xFD8
  1831                           
  1832 ;; *************** function ___lwmod *****************
  1833 ;; Defined at:
  1834 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;  dividend        2   27[COMRAM] unsigned int 
  1837 ;;  divisor         2   29[COMRAM] unsigned int 
  1838 ;; Auto vars:     Size  Location     Type
  1839 ;;  counter         1   31[COMRAM] unsigned char 
  1840 ;; Return value:  Size  Location     Type
  1841 ;;                  2   27[COMRAM] unsigned int 
  1842 ;; Registers used:
  1843 ;;		wreg, status,2, status,0
  1844 ;; Tracked objects:
  1845 ;;		On entry : 0/0
  1846 ;;		On exit  : 0/0
  1847 ;;		Unchanged: 0/0
  1848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1849 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1850 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1852 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1853 ;;Total ram usage:        5 bytes
  1854 ;; Hardware stack levels used:    1
  1855 ;; Hardware stack levels required when called:    2
  1856 ;; This function calls:
  1857 ;;		Nothing
  1858 ;; This function is called by:
  1859 ;;		_sprintf
  1860 ;; This function uses a non-reentrant model
  1861 ;;
  1862                           
  1863                           	psect	text4
  1864  002764                     __ptext4:
  1865                           	opt stack 0
  1866  002764                     ___lwmod:
  1867                           	opt stack 27
  1868                           
  1869                           ;incstack = 0
  1870  002764  501E               	movf	___lwmod@divisor,w,c
  1871  002766  101F               	iorwf	___lwmod@divisor+1,w,c
  1872  002768  B4D8               	btfsc	status,2,c
  1873  00276A  D018               	goto	l798
  1874  00276C  0E01               	movlw	1
  1875  00276E  6E20               	movwf	___lwmod@counter,c
  1876  002770  D004               	goto	l3314
  1877  002772                     l3312:
  1878  002772  90D8               	bcf	status,0,c
  1879  002774  361E               	rlcf	___lwmod@divisor,f,c
  1880  002776  361F               	rlcf	___lwmod@divisor+1,f,c
  1881  002778  2A20               	incf	___lwmod@counter,f,c
  1882  00277A                     l3314:
  1883  00277A  AE1F               	btfss	___lwmod@divisor+1,7,c
  1884  00277C  D7FA               	goto	l3312
  1885  00277E                     l3316:
  1886  00277E  501E               	movf	___lwmod@divisor,w,c
  1887  002780  5C1C               	subwf	___lwmod@dividend,w,c
  1888  002782  501F               	movf	___lwmod@divisor+1,w,c
  1889  002784  581D               	subwfb	___lwmod@dividend+1,w,c
  1890  002786  A0D8               	btfss	status,0,c
  1891  002788  D004               	goto	l3320
  1892  00278A  501E               	movf	___lwmod@divisor,w,c
  1893  00278C  5E1C               	subwf	___lwmod@dividend,f,c
  1894  00278E  501F               	movf	___lwmod@divisor+1,w,c
  1895  002790  5A1D               	subwfb	___lwmod@dividend+1,f,c
  1896  002792                     l3320:
  1897  002792  90D8               	bcf	status,0,c
  1898  002794  321F               	rrcf	___lwmod@divisor+1,f,c
  1899  002796  321E               	rrcf	___lwmod@divisor,f,c
  1900  002798  2E20               	decfsz	___lwmod@counter,f,c
  1901  00279A  D7F1               	goto	l3316
  1902  00279C                     l798:
  1903  00279C  C01C  F01C         	movff	___lwmod@dividend,?___lwmod
  1904  0027A0  C01D  F01D         	movff	___lwmod@dividend+1,?___lwmod+1
  1905  0027A4  0012               	return		;funcret
  1906  0027A6                     __end_of___lwmod:
  1907                           	opt stack 0
  1908                           tblptru	equ	0xFF8
  1909                           tblptrh	equ	0xFF7
  1910                           tblptrl	equ	0xFF6
  1911                           tablat	equ	0xFF5
  1912                           prodh	equ	0xFF4
  1913                           prodl	equ	0xFF3
  1914                           intcon	equ	0xFF2
  1915                           postinc0	equ	0xFEE
  1916                           wreg	equ	0xFE8
  1917                           indf2	equ	0xFDF
  1918                           postinc2	equ	0xFDE
  1919                           postdec2	equ	0xFDD
  1920                           fsr2h	equ	0xFDA
  1921                           fsr2l	equ	0xFD9
  1922                           status	equ	0xFD8
  1923                           
  1924 ;; *************** function ___lwdiv *****************
  1925 ;; Defined at:
  1926 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  1927 ;; Parameters:    Size  Location     Type
  1928 ;;  dividend        2   20[COMRAM] unsigned int 
  1929 ;;  divisor         2   22[COMRAM] unsigned int 
  1930 ;; Auto vars:     Size  Location     Type
  1931 ;;  quotient        2   25[COMRAM] unsigned int 
  1932 ;;  counter         1   24[COMRAM] unsigned char 
  1933 ;; Return value:  Size  Location     Type
  1934 ;;                  2   20[COMRAM] unsigned int 
  1935 ;; Registers used:
  1936 ;;		wreg, status,2, status,0
  1937 ;; Tracked objects:
  1938 ;;		On entry : 0/0
  1939 ;;		On exit  : 0/0
  1940 ;;		Unchanged: 0/0
  1941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1942 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1943 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1945 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1946 ;;Total ram usage:        7 bytes
  1947 ;; Hardware stack levels used:    1
  1948 ;; Hardware stack levels required when called:    2
  1949 ;; This function calls:
  1950 ;;		Nothing
  1951 ;; This function is called by:
  1952 ;;		_sprintf
  1953 ;; This function uses a non-reentrant model
  1954 ;;
  1955                           
  1956                           	psect	text5
  1957  002712                     __ptext5:
  1958                           	opt stack 0
  1959  002712                     ___lwdiv:
  1960                           	opt stack 27
  1961                           
  1962                           ;incstack = 0
  1963  002712  0E00               	movlw	0
  1964  002714  6E1B               	movwf	___lwdiv@quotient+1,c
  1965  002716  0E00               	movlw	0
  1966  002718  6E1A               	movwf	___lwdiv@quotient,c
  1967  00271A  5017               	movf	___lwdiv@divisor,w,c
  1968  00271C  1018               	iorwf	___lwdiv@divisor+1,w,c
  1969  00271E  B4D8               	btfsc	status,2,c
  1970  002720  D01C               	goto	l788
  1971  002722  0E01               	movlw	1
  1972  002724  6E19               	movwf	___lwdiv@counter,c
  1973  002726  D004               	goto	l3294
  1974  002728                     l3292:
  1975  002728  90D8               	bcf	status,0,c
  1976  00272A  3617               	rlcf	___lwdiv@divisor,f,c
  1977  00272C  3618               	rlcf	___lwdiv@divisor+1,f,c
  1978  00272E  2A19               	incf	___lwdiv@counter,f,c
  1979  002730                     l3294:
  1980  002730  AE18               	btfss	___lwdiv@divisor+1,7,c
  1981  002732  D7FA               	goto	l3292
  1982  002734                     l3296:
  1983  002734  90D8               	bcf	status,0,c
  1984  002736  361A               	rlcf	___lwdiv@quotient,f,c
  1985  002738  361B               	rlcf	___lwdiv@quotient+1,f,c
  1986  00273A  5017               	movf	___lwdiv@divisor,w,c
  1987  00273C  5C15               	subwf	___lwdiv@dividend,w,c
  1988  00273E  5018               	movf	___lwdiv@divisor+1,w,c
  1989  002740  5816               	subwfb	___lwdiv@dividend+1,w,c
  1990  002742  A0D8               	btfss	status,0,c
  1991  002744  D005               	goto	l3304
  1992  002746  5017               	movf	___lwdiv@divisor,w,c
  1993  002748  5E15               	subwf	___lwdiv@dividend,f,c
  1994  00274A  5018               	movf	___lwdiv@divisor+1,w,c
  1995  00274C  5A16               	subwfb	___lwdiv@dividend+1,f,c
  1996  00274E  801A               	bsf	___lwdiv@quotient,0,c
  1997  002750                     l3304:
  1998  002750  90D8               	bcf	status,0,c
  1999  002752  3218               	rrcf	___lwdiv@divisor+1,f,c
  2000  002754  3217               	rrcf	___lwdiv@divisor,f,c
  2001  002756  2E19               	decfsz	___lwdiv@counter,f,c
  2002  002758  D7ED               	goto	l3296
  2003  00275A                     l788:
  2004  00275A  C01A  F015         	movff	___lwdiv@quotient,?___lwdiv
  2005  00275E  C01B  F016         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2006  002762  0012               	return		;funcret
  2007  002764                     __end_of___lwdiv:
  2008                           	opt stack 0
  2009                           tblptru	equ	0xFF8
  2010                           tblptrh	equ	0xFF7
  2011                           tblptrl	equ	0xFF6
  2012                           tablat	equ	0xFF5
  2013                           prodh	equ	0xFF4
  2014                           prodl	equ	0xFF3
  2015                           intcon	equ	0xFF2
  2016                           postinc0	equ	0xFEE
  2017                           wreg	equ	0xFE8
  2018                           indf2	equ	0xFDF
  2019                           postinc2	equ	0xFDE
  2020                           postdec2	equ	0xFDD
  2021                           fsr2h	equ	0xFDA
  2022                           fsr2l	equ	0xFD9
  2023                           status	equ	0xFD8
  2024                           
  2025 ;; *************** function _main_init *****************
  2026 ;; Defined at:
  2027 ;;		line 62 in file "main.c"
  2028 ;; Parameters:    Size  Location     Type
  2029 ;;		None
  2030 ;; Auto vars:     Size  Location     Type
  2031 ;;		None
  2032 ;; Return value:  Size  Location     Type
  2033 ;;		None               void
  2034 ;; Registers used:
  2035 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2036 ;; Tracked objects:
  2037 ;;		On entry : 0/0
  2038 ;;		On exit  : 0/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2045 ;;Total ram usage:        0 bytes
  2046 ;; Hardware stack levels used:    1
  2047 ;; Hardware stack levels required when called:    7
  2048 ;; This function calls:
  2049 ;;		_RTCC_init
  2050 ;; This function is called by:
  2051 ;;		_main
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           	psect	text6
  2056  00256A                     __ptext6:
  2057                           	opt stack 0
  2058  00256A                     _main_init:
  2059                           	opt stack 23
  2060                           
  2061                           ;main.c: 63: OSCCONbits.IRCF = 7;
  2062                           
  2063                           ;incstack = 0
  2064  00256A  88D3               	bsf	4051,4,c	;volatile
  2065  00256C  8AD3               	bsf	4051,5,c	;volatile
  2066  00256E  8CD3               	bsf	4051,6,c	;volatile
  2067                           
  2068                           ;main.c: 64: OSCTUNEbits.PLLEN = 1;
  2069  002570  8C9B               	bsf	3995,6,c	;volatile
  2070                           
  2071                           ;main.c: 65: OSCCONbits.SCS = 0;
  2072  002572  0EFC               	movlw	-4
  2073  002574  16D3               	andwf	4051,f,c	;volatile
  2074                           
  2075                           ;main.c: 66: TRISA = 0b00100000;
  2076  002576  0E20               	movlw	32
  2077  002578  6E92               	movwf	3986,c	;volatile
  2078                           
  2079                           ;main.c: 67: TRISB = 0b00110111;
  2080  00257A  0E37               	movlw	55
  2081  00257C  6E93               	movwf	3987,c	;volatile
  2082                           
  2083                           ;main.c: 68: TRISC = 0b10111010;
  2084  00257E  0EBA               	movlw	186
  2085  002580  6E94               	movwf	3988,c	;volatile
  2086                           
  2087                           ;main.c: 69: ANCON0 = 0b11111111;
  2088  002582  010F               	movlb	15	; () banked
  2089  002584  6948               	setf	72,b	;volatile
  2090                           
  2091                           ; BSR set to: 15
  2092                           ;main.c: 70: ANCON1 = 0b11111111;
  2093  002586  010F               	movlb	15	; () banked
  2094  002588  6949               	setf	73,b	;volatile
  2095                           
  2096                           ; BSR set to: 15
  2097                           ;main.c: 71: INTCON2bits.RBPU = 0;
  2098  00258A  9EF1               	bcf	intcon2,7,c	;volatile
  2099                           
  2100                           ;main.c: 73: T1CONbits.TMR1CS = 2;
  2101  00258C  50CD               	movf	4045,w,c	;volatile
  2102  00258E  0B3F               	andlw	-193
  2103  002590  0980               	iorlw	128
  2104  002592  6ECD               	movwf	4045,c	;volatile
  2105                           
  2106                           ; BSR set to: 15
  2107                           ;main.c: 74: T1CONbits.T1OSCEN = 1;
  2108  002594  86CD               	bsf	4045,3,c	;volatile
  2109                           
  2110                           ;main.c: 75: T1CONbits.T1CKPS = 0;
  2111  002596  0ECF               	movlw	-49
  2112  002598  16CD               	andwf	4045,f,c	;volatile
  2113                           
  2114                           ; BSR set to: 15
  2115                           ;main.c: 76: T1CONbits.nT1SYNC = 1;
  2116  00259A  84CD               	bsf	4045,2,c	;volatile
  2117                           
  2118                           ; BSR set to: 15
  2119                           ;main.c: 77: T1CONbits.RD16 = 0;
  2120  00259C  92CD               	bcf	4045,1,c	;volatile
  2121                           
  2122                           ; BSR set to: 15
  2123                           ;main.c: 78: T1CONbits.TMR1ON = 1;
  2124  00259E  80CD               	bsf	4045,0,c	;volatile
  2125                           
  2126                           ; BSR set to: 15
  2127                           ;main.c: 79: IPR1bits.TMR1IP = 0;
  2128  0025A0  909F               	bcf	3999,0,c	;volatile
  2129                           
  2130                           ; BSR set to: 15
  2131                           ;main.c: 80: PIR1bits.TMR1IF = 0;
  2132  0025A2  909E               	bcf	3998,0,c	;volatile
  2133                           
  2134                           ; BSR set to: 15
  2135                           ;main.c: 81: PIE1bits.TMR1IE = 1;
  2136  0025A4  809D               	bsf	3997,0,c	;volatile
  2137                           
  2138                           ; BSR set to: 15
  2139                           ;main.c: 82: INTCONbits.PEIE = 1;
  2140  0025A6  8CF2               	bsf	intcon,6,c	;volatile
  2141                           
  2142                           ;main.c: 84: T3CONbits.TMR3CS = 0;
  2143  0025A8  0E3F               	movlw	-193
  2144  0025AA  1679               	andwf	3961,f,c	;volatile
  2145                           
  2146                           ; BSR set to: 15
  2147                           ;main.c: 85: T3CONbits.T3OSCEN = 0;
  2148  0025AC  9679               	bcf	3961,3,c	;volatile
  2149                           
  2150                           ;main.c: 86: T3CONbits.T3CKPS = 2;
  2151  0025AE  5079               	movf	3961,w,c	;volatile
  2152  0025B0  0BCF               	andlw	-49
  2153  0025B2  0920               	iorlw	32
  2154  0025B4  6E79               	movwf	3961,c	;volatile
  2155                           
  2156                           ; BSR set to: 15
  2157                           ;main.c: 87: T3CONbits.RD163 = 0;
  2158  0025B6  9E79               	bcf	3961,7,c	;volatile
  2159                           
  2160                           ; BSR set to: 15
  2161                           ;main.c: 88: T3CONbits.TMR3ON = 1;
  2162  0025B8  8079               	bsf	3961,0,c	;volatile
  2163                           
  2164                           ; BSR set to: 15
  2165                           ;main.c: 89: IPR2bits.TMR3IP = 0;
  2166  0025BA  92A2               	bcf	4002,1,c	;volatile
  2167                           
  2168                           ; BSR set to: 15
  2169                           ;main.c: 90: PIR2bits.TMR3IF = 0;
  2170  0025BC  92A1               	bcf	4001,1,c	;volatile
  2171                           
  2172                           ; BSR set to: 15
  2173                           ;main.c: 91: PIE2bits.TMR3IE = 1;
  2174  0025BE  82A0               	bsf	4000,1,c	;volatile
  2175                           
  2176                           ; BSR set to: 15
  2177                           ;main.c: 92: INTCONbits.PEIE = 1;
  2178  0025C0  8CF2               	bsf	intcon,6,c	;volatile
  2179                           
  2180                           ; BSR set to: 15
  2181                           ;main.c: 94: RTCC_init();
  2182  0025C2  EC2B  F013         	call	_RTCC_init	;wreg free
  2183                           
  2184                           ;main.c: 96: TXSTA1bits.TX9 = 0;
  2185  0025C6  9CAD               	bcf	4013,6,c	;volatile
  2186                           
  2187                           ;main.c: 97: TXSTA1bits.TXEN = 1;
  2188  0025C8  8AAD               	bsf	4013,5,c	;volatile
  2189                           
  2190                           ;main.c: 98: TXSTA1bits.SYNC = 0;
  2191  0025CA  98AD               	bcf	4013,4,c	;volatile
  2192                           
  2193                           ;main.c: 99: TXSTA1bits.BRGH = 0;
  2194  0025CC  94AD               	bcf	4013,2,c	;volatile
  2195                           
  2196                           ;main.c: 100: RCSTA1bits.SPEN = 1;
  2197  0025CE  8EAC               	bsf	4012,7,c	;volatile
  2198                           
  2199                           ;main.c: 101: RCSTA1bits.RX9 = 0;
  2200  0025D0  9CAC               	bcf	4012,6,c	;volatile
  2201                           
  2202                           ;main.c: 102: RCSTA1bits.CREN = 1;
  2203  0025D2  88AC               	bsf	4012,4,c	;volatile
  2204                           
  2205                           ;main.c: 103: BAUDCON1bits.BRG16 = 0;
  2206  0025D4  967E               	bcf	3966,3,c	;volatile
  2207                           
  2208                           ;main.c: 104: SPBRG1 = 48000000 / 64 / 9600 - 1;
  2209  0025D6  0E4D               	movlw	77
  2210  0025D8  6EB0               	movwf	4016,c	;volatile
  2211                           
  2212                           ;main.c: 105: SPBRGH1 = 0;
  2213  0025DA  0E00               	movlw	0
  2214  0025DC  6E7F               	movwf	3967,c	;volatile
  2215                           
  2216                           ;main.c: 106: IPR1bits.RC1IP = 0;
  2217  0025DE  9A9F               	bcf	3999,5,c	;volatile
  2218                           
  2219                           ;main.c: 107: PIE1bits.RCIE = 1;
  2220  0025E0  8A9D               	bsf	3997,5,c	;volatile
  2221                           
  2222                           ;main.c: 108: INTCONbits.PEIE = 1;
  2223  0025E2  8CF2               	bsf	intcon,6,c	;volatile
  2224  0025E4  0012               	return		;funcret
  2225  0025E6                     __end_of_main_init:
  2226                           	opt stack 0
  2227                           tblptru	equ	0xFF8
  2228                           tblptrh	equ	0xFF7
  2229                           tblptrl	equ	0xFF6
  2230                           tablat	equ	0xFF5
  2231                           prodh	equ	0xFF4
  2232                           prodl	equ	0xFF3
  2233                           intcon	equ	0xFF2
  2234                           intcon2	equ	0xFF1
  2235                           postinc0	equ	0xFEE
  2236                           wreg	equ	0xFE8
  2237                           indf2	equ	0xFDF
  2238                           postinc2	equ	0xFDE
  2239                           postdec2	equ	0xFDD
  2240                           fsr2h	equ	0xFDA
  2241                           fsr2l	equ	0xFD9
  2242                           status	equ	0xFD8
  2243                           
  2244 ;; *************** function _RTCC_init *****************
  2245 ;; Defined at:
  2246 ;;		line 22 in file "My_RTCC.c"
  2247 ;; Parameters:    Size  Location     Type
  2248 ;;		None
  2249 ;; Auto vars:     Size  Location     Type
  2250 ;;		None
  2251 ;; Return value:  Size  Location     Type
  2252 ;;		None               void
  2253 ;; Registers used:
  2254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2255 ;; Tracked objects:
  2256 ;;		On entry : 0/0
  2257 ;;		On exit  : 0/0
  2258 ;;		Unchanged: 0/0
  2259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2264 ;;Total ram usage:        0 bytes
  2265 ;; Hardware stack levels used:    1
  2266 ;; Hardware stack levels required when called:    6
  2267 ;; This function calls:
  2268 ;;		_RTCC_from_RTCC
  2269 ;;		_RTCC_from_epoch
  2270 ;; This function is called by:
  2271 ;;		_main_init
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275                           	psect	text7
  2276  002656                     __ptext7:
  2277                           	opt stack 0
  2278  002656                     _RTCC_init:
  2279                           	opt stack 23
  2280                           
  2281                           ;My_RTCC.c: 23: RTCCFGbits.RTCWREN = 1;
  2282                           
  2283                           ;incstack = 0
  2284  002656  010F               	movlb	15	; () banked
  2285  002658  8B3F               	bsf	63,5,b	;volatile
  2286                           
  2287                           ;My_RTCC.c: 24: if (RTCCFGbits.RTCWREN != 1) {
  2288  00265A  010F               	movlb	15	; () banked
  2289  00265C  BB3F               	btfsc	63,5,b	;volatile
  2290  00265E  D006               	goto	l3150
  2291                           
  2292                           ; BSR set to: 15
  2293                           ;My_RTCC.c: 25: EECON2 = 0x55;
  2294  002660  0E55               	movlw	85
  2295  002662  6EA7               	movwf	4007,c	;volatile
  2296                           
  2297                           ;My_RTCC.c: 26: EECON2 = 0xAA;
  2298  002664  0EAA               	movlw	170
  2299  002666  6EA7               	movwf	4007,c	;volatile
  2300                           
  2301                           ; BSR set to: 15
  2302                           ;My_RTCC.c: 27: RTCCFGbits.RTCWREN = 1;
  2303  002668  010F               	movlb	15	; () banked
  2304  00266A  8B3F               	bsf	63,5,b	;volatile
  2305  00266C                     l3150:
  2306                           
  2307                           ; BSR set to: 15
  2308                           ;My_RTCC.c: 28: }
  2309                           ;My_RTCC.c: 29: RTCCFGbits.RTCEN = 1;
  2310  00266C  010F               	movlb	15	; () banked
  2311  00266E  8F3F               	bsf	63,7,b	;volatile
  2312                           
  2313                           ; BSR set to: 15
  2314                           ;My_RTCC.c: 30: RTCCFGbits.RTCOE = 0;
  2315  002670  010F               	movlb	15	; () banked
  2316  002672  953F               	bcf	63,2,b	;volatile
  2317                           
  2318                           ; BSR set to: 15
  2319                           ;My_RTCC.c: 31: PADCFG1bits.RTSECSEL0 = 1;
  2320  002674  010F               	movlb	15	; () banked
  2321  002676  833C               	bsf	60,1,b	;volatile
  2322                           
  2323                           ; BSR set to: 15
  2324                           ;My_RTCC.c: 32: PADCFG1bits.RTSECSEL1 = 1;
  2325  002678  010F               	movlb	15	; () banked
  2326  00267A  853C               	bsf	60,2,b	;volatile
  2327                           
  2328                           ;My_RTCC.c: 33: RTCCAL = 0x00;
  2329  00267C  0E00               	movlw	0
  2330  00267E  010F               	movlb	15	; () banked
  2331  002680  6F3E               	movwf	62,b	;volatile
  2332                           
  2333                           ; BSR set to: 15
  2334                           ;My_RTCC.c: 34: T1CONbits.T1OSCEN = 1;
  2335  002682  86CD               	bsf	4045,3,c	;volatile
  2336                           
  2337                           ; BSR set to: 15
  2338                           ;My_RTCC.c: 37: RTCC_from_RTCC(&now);
  2339  002684  0E9C               	movlw	low _now
  2340  002686  6E34               	movwf	RTCC_from_RTCC@tm,c
  2341  002688  0E00               	movlw	high _now
  2342  00268A  6E35               	movwf	RTCC_from_RTCC@tm+1,c
  2343  00268C  EC60  F014         	call	_RTCC_from_RTCC	;wreg free
  2344                           
  2345                           ;My_RTCC.c: 38: if (now.DD == 0) {
  2346  002690  0100               	movlb	0	; () banked
  2347  002692  51A4               	movf	(_now+8)& (0+255),w,b
  2348  002694  A4D8               	btfss	status,2,c
  2349  002696  0012               	return	
  2350                           
  2351                           ; BSR set to: 0
  2352                           ;My_RTCC.c: 39: now.epoch = 0;
  2353  002698  0E00               	movlw	0
  2354  00269A  0100               	movlb	0	; () banked
  2355  00269C  6F9C               	movwf	_now& (0+255),b
  2356  00269E  0E00               	movlw	0
  2357  0026A0  6F9D               	movwf	(_now+1)& (0+255),b
  2358  0026A2  0E00               	movlw	0
  2359  0026A4  6F9E               	movwf	(_now+2)& (0+255),b
  2360  0026A6  0E00               	movlw	0
  2361  0026A8  6F9F               	movwf	(_now+3)& (0+255),b
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;My_RTCC.c: 40: RTCC_from_epoch(&now);
  2365  0026AA  0E9C               	movlw	low _now
  2366  0026AC  0100               	movlb	0	; () banked
  2367  0026AE  6F6A               	movwf	RTCC_from_epoch@tm& (0+255),b
  2368  0026B0  0E00               	movlw	high _now
  2369  0026B2  0100               	movlb	0	; () banked
  2370  0026B4  6F6B               	movwf	(RTCC_from_epoch@tm+1)& (0+255),b
  2371  0026B6  EC53  F014         	call	_RTCC_from_epoch	;wreg free
  2372  0026BA  0012               	return	
  2373  0026BC                     __end_of_RTCC_init:
  2374                           	opt stack 0
  2375                           tblptru	equ	0xFF8
  2376                           tblptrh	equ	0xFF7
  2377                           tblptrl	equ	0xFF6
  2378                           tablat	equ	0xFF5
  2379                           prodh	equ	0xFF4
  2380                           prodl	equ	0xFF3
  2381                           intcon	equ	0xFF2
  2382                           intcon2	equ	0xFF1
  2383                           postinc0	equ	0xFEE
  2384                           wreg	equ	0xFE8
  2385                           indf2	equ	0xFDF
  2386                           postinc2	equ	0xFDE
  2387                           postdec2	equ	0xFDD
  2388                           fsr2h	equ	0xFDA
  2389                           fsr2l	equ	0xFD9
  2390                           status	equ	0xFD8
  2391                           
  2392 ;; *************** function _RTCC_task *****************
  2393 ;; Defined at:
  2394 ;;		line 353 in file "My_RTCC.c"
  2395 ;; Parameters:    Size  Location     Type
  2396 ;;		None
  2397 ;; Auto vars:     Size  Location     Type
  2398 ;;		None
  2399 ;; Return value:  Size  Location     Type
  2400 ;;		None               void
  2401 ;; Registers used:
  2402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2403 ;; Tracked objects:
  2404 ;;		On entry : 0/0
  2405 ;;		On exit  : 0/0
  2406 ;;		Unchanged: 0/0
  2407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2412 ;;Total ram usage:        0 bytes
  2413 ;; Hardware stack levels used:    1
  2414 ;; Hardware stack levels required when called:    6
  2415 ;; This function calls:
  2416 ;;		_RTCC_from_RTCC
  2417 ;; This function is called by:
  2418 ;;		_main
  2419 ;; This function uses a non-reentrant model
  2420 ;;
  2421                           
  2422                           	psect	text8
  2423  0027A6                     __ptext8:
  2424                           	opt stack 0
  2425  0027A6                     _RTCC_task:
  2426                           	opt stack 24
  2427  0027A6                     l283:
  2428  0027A6  010F               	movlb	15	; () banked
  2429  0027A8  B93F               	btfsc	63,4,b	;volatile
  2430  0027AA  D7FD               	goto	l283
  2431                           
  2432                           ; BSR set to: 15
  2433                           ;My_RTCC.c: 356: now.halfsec = RTCCFGbits.HALFSEC;
  2434                           
  2435                           ; BSR set to: 15
  2436  0027AC  0E00               	movlw	0
  2437  0027AE  B73F               	btfsc	63,3,b	;volatile
  2438  0027B0  0E01               	movlw	1
  2439  0027B2  0100               	movlb	0	; () banked
  2440  0027B4  6FA8               	movwf	(_now+12)& (0+255),b
  2441                           
  2442                           ; BSR set to: 0
  2443                           ;My_RTCC.c: 357: if (prev_halfsec != now.halfsec) {
  2444  0027B6  503C               	movf	RTCC_task@prev_halfsec,w,c
  2445  0027B8  0100               	movlb	0	; () banked
  2446  0027BA  19A8               	xorwf	(_now+12)& (0+255),w,b
  2447  0027BC  B4D8               	btfsc	status,2,c
  2448  0027BE  0012               	return	
  2449                           
  2450                           ; BSR set to: 0
  2451                           ;My_RTCC.c: 358: prev_halfsec = now.halfsec;
  2452  0027C0  C0A8  F03C         	movff	_now+12,RTCC_task@prev_halfsec
  2453                           
  2454                           ;My_RTCC.c: 359: now.colon = now.halfsec;
  2455  0027C4  C0A8  F0A7         	movff	_now+12,_now+11
  2456                           
  2457                           ; BSR set to: 0
  2458                           ;My_RTCC.c: 360: time_change_flag = 1;
  2459  0027C8  0E01               	movlw	1
  2460  0027CA  0100               	movlb	0	; () banked
  2461  0027CC  6F9B               	movwf	_time_change_flag& (0+255),b
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;My_RTCC.c: 361: RTCC_from_RTCC(&now);
  2465  0027CE  0E9C               	movlw	low _now
  2466  0027D0  6E34               	movwf	RTCC_from_RTCC@tm,c
  2467  0027D2  0E00               	movlw	high _now
  2468  0027D4  6E35               	movwf	RTCC_from_RTCC@tm+1,c
  2469  0027D6  EC60  F014         	call	_RTCC_from_RTCC	;wreg free
  2470  0027DA  0012               	return	
  2471  0027DC                     __end_of_RTCC_task:
  2472                           	opt stack 0
  2473                           tblptru	equ	0xFF8
  2474                           tblptrh	equ	0xFF7
  2475                           tblptrl	equ	0xFF6
  2476                           tablat	equ	0xFF5
  2477                           prodh	equ	0xFF4
  2478                           prodl	equ	0xFF3
  2479                           intcon	equ	0xFF2
  2480                           intcon2	equ	0xFF1
  2481                           postinc0	equ	0xFEE
  2482                           wreg	equ	0xFE8
  2483                           indf2	equ	0xFDF
  2484                           postinc2	equ	0xFDE
  2485                           postdec2	equ	0xFDD
  2486                           fsr2h	equ	0xFDA
  2487                           fsr2l	equ	0xFD9
  2488                           status	equ	0xFD8
  2489                           
  2490 ;; *************** function _RTCC_adjust_time_button *****************
  2491 ;; Defined at:
  2492 ;;		line 329 in file "My_RTCC.c"
  2493 ;; Parameters:    Size  Location     Type
  2494 ;;  tm              2   20[BANK0 ] PTR struct .
  2495 ;;		 -> now(14), 
  2496 ;;  mode            2   22[BANK0 ] PTR struct button
  2497 ;;		 -> mode(4), 
  2498 ;;  cnt_inc         2   24[BANK0 ] PTR struct button
  2499 ;;		 -> inc(4), 
  2500 ;;  cnt_dec         2   26[BANK0 ] PTR struct button
  2501 ;;		 -> dec(4), 
  2502 ;; Auto vars:     Size  Location     Type
  2503 ;;		None
  2504 ;; Return value:  Size  Location     Type
  2505 ;;		None               void
  2506 ;; Registers used:
  2507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2508 ;; Tracked objects:
  2509 ;;		On entry : 0/0
  2510 ;;		On exit  : 0/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2513 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2516 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2517 ;;Total ram usage:        8 bytes
  2518 ;; Hardware stack levels used:    1
  2519 ;; Hardware stack levels required when called:    7
  2520 ;; This function calls:
  2521 ;;		_RTCC_adjust_time_cursor
  2522 ;;		_RTCC_adjust_time_dec
  2523 ;;		_RTCC_adjust_time_inc
  2524 ;;		_RTCC_adjust_time_toggle
  2525 ;; This function is called by:
  2526 ;;		_main
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           	psect	text9
  2531  001ED8                     __ptext9:
  2532                           	opt stack 0
  2533  001ED8                     _RTCC_adjust_time_button:
  2534                           	opt stack 23
  2535                           
  2536                           ;My_RTCC.c: 330: if (mode->flag.long_holding_3) {
  2537                           
  2538                           ;incstack = 0
  2539  001ED8  0100               	movlb	0	; () banked
  2540  001EDA  EE20 F003          	lfsr	2,3
  2541  001EDE  5176               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  2542  001EE0  26D9               	addwf	fsr2l,f,c
  2543  001EE2  5177               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  2544  001EE4  22DA               	addwfc	fsr2h,f,c
  2545  001EE6  0100               	movlb	0	; () banked
  2546  001EE8  A6DF               	btfss	indf2,3,c
  2547  001EEA  D030               	goto	l3416
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;My_RTCC.c: 331: mode->flag.long_holding_3 = 0;
  2551  001EEC  0100               	movlb	0	; () banked
  2552  001EEE  EE20 F003          	lfsr	2,3
  2553  001EF2  5176               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  2554  001EF4  26D9               	addwf	fsr2l,f,c
  2555  001EF6  5177               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  2556  001EF8  22DA               	addwfc	fsr2h,f,c
  2557  001EFA  0100               	movlb	0	; () banked
  2558  001EFC  96DF               	bcf	indf2,3,c
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;My_RTCC.c: 332: RTCC_adjust_time_toggle(tm);
  2562  001EFE  C074  F015         	movff	RTCC_adjust_time_button@tm,RTCC_adjust_time_toggle@tm
  2563  001F02  C075  F016         	movff	RTCC_adjust_time_button@tm+1,RTCC_adjust_time_toggle@tm+1
  2564  001F06  EC08  F014         	call	_RTCC_adjust_time_toggle	;wreg free
  2565                           
  2566                           ;My_RTCC.c: 333: mode->flags = 0;
  2567  001F0A  0100               	movlb	0	; () banked
  2568  001F0C  EE20 F002          	lfsr	2,2
  2569  001F10  5176               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  2570  001F12  26D9               	addwf	fsr2l,f,c
  2571  001F14  5177               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  2572  001F16  22DA               	addwfc	fsr2h,f,c
  2573  001F18  0E00               	movlw	0
  2574  001F1A  6EDE               	movwf	postinc2,c
  2575  001F1C  0E00               	movlw	0
  2576  001F1E  6EDD               	movwf	postdec2,c
  2577                           
  2578                           ; BSR set to: 0
  2579                           ;My_RTCC.c: 334: cnt_inc->flags = 0;
  2580  001F20  0100               	movlb	0	; () banked
  2581  001F22  EE20 F002          	lfsr	2,2
  2582  001F26  5178               	movf	RTCC_adjust_time_button@cnt_inc& (0+255),w,b
  2583  001F28  26D9               	addwf	fsr2l,f,c
  2584  001F2A  5179               	movf	(RTCC_adjust_time_button@cnt_inc+1)& (0+255),w,b
  2585  001F2C  22DA               	addwfc	fsr2h,f,c
  2586  001F2E  0E00               	movlw	0
  2587  001F30  6EDE               	movwf	postinc2,c
  2588  001F32  0E00               	movlw	0
  2589  001F34  6EDD               	movwf	postdec2,c
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;My_RTCC.c: 335: cnt_dec->flags = 0;
  2593  001F36  0100               	movlb	0	; () banked
  2594  001F38  EE20 F002          	lfsr	2,2
  2595  001F3C  517A               	movf	RTCC_adjust_time_button@cnt_dec& (0+255),w,b
  2596  001F3E  26D9               	addwf	fsr2l,f,c
  2597  001F40  517B               	movf	(RTCC_adjust_time_button@cnt_dec+1)& (0+255),w,b
  2598  001F42  22DA               	addwfc	fsr2h,f,c
  2599  001F44  0E00               	movlw	0
  2600  001F46  6EDE               	movwf	postinc2,c
  2601  001F48  0E00               	movlw	0
  2602  001F4A  6EDD               	movwf	postdec2,c
  2603  001F4C                     l3416:
  2604                           
  2605                           ; BSR set to: 0
  2606                           ;My_RTCC.c: 336: }
  2607                           ;My_RTCC.c: 337: if (tm->edit.flags) {
  2608  001F4C  0100               	movlb	0	; () banked
  2609  001F4E  EE20 F00D          	lfsr	2,13
  2610  001F52  5174               	movf	RTCC_adjust_time_button@tm& (0+255),w,b
  2611  001F54  26D9               	addwf	fsr2l,f,c
  2612  001F56  5175               	movf	(RTCC_adjust_time_button@tm+1)& (0+255),w,b
  2613  001F58  22DA               	addwfc	fsr2h,f,c
  2614  001F5A  50DF               	movf	indf2,w,c
  2615  001F5C  B4D8               	btfsc	status,2,c
  2616  001F5E  0012               	return	
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;My_RTCC.c: 338: if (mode->flag.press) {
  2620  001F60  0100               	movlb	0	; () banked
  2621  001F62  EE20 F002          	lfsr	2,2
  2622  001F66  5176               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  2623  001F68  26D9               	addwf	fsr2l,f,c
  2624  001F6A  5177               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  2625  001F6C  22DA               	addwfc	fsr2h,f,c
  2626  001F6E  0100               	movlb	0	; () banked
  2627  001F70  A0DF               	btfss	indf2,0,c
  2628  001F72  D00F               	goto	l3424
  2629                           
  2630                           ; BSR set to: 0
  2631                           ;My_RTCC.c: 339: mode->flag.press = 0;
  2632  001F74  0100               	movlb	0	; () banked
  2633  001F76  EE20 F002          	lfsr	2,2
  2634  001F7A  5176               	movf	RTCC_adjust_time_button@mode& (0+255),w,b
  2635  001F7C  26D9               	addwf	fsr2l,f,c
  2636  001F7E  5177               	movf	(RTCC_adjust_time_button@mode+1)& (0+255),w,b
  2637  001F80  22DA               	addwfc	fsr2h,f,c
  2638  001F82  0100               	movlb	0	; () banked
  2639  001F84  90DF               	bcf	indf2,0,c
  2640                           
  2641                           ; BSR set to: 0
  2642                           ;My_RTCC.c: 340: RTCC_adjust_time_cursor(tm);
  2643  001F86  C074  F015         	movff	RTCC_adjust_time_button@tm,RTCC_adjust_time_cursor@tm
  2644  001F8A  C075  F016         	movff	RTCC_adjust_time_button@tm+1,RTCC_adjust_time_cursor@tm+1
  2645  001F8E  ECFC  F00F         	call	_RTCC_adjust_time_cursor	;wreg free
  2646  001F92                     l3424:
  2647                           
  2648                           ;My_RTCC.c: 341: }
  2649                           ;My_RTCC.c: 342: if (cnt_inc->flag.press) {
  2650  001F92  0100               	movlb	0	; () banked
  2651  001F94  EE20 F002          	lfsr	2,2
  2652  001F98  5178               	movf	RTCC_adjust_time_button@cnt_inc& (0+255),w,b
  2653  001F9A  26D9               	addwf	fsr2l,f,c
  2654  001F9C  5179               	movf	(RTCC_adjust_time_button@cnt_inc+1)& (0+255),w,b
  2655  001F9E  22DA               	addwfc	fsr2h,f,c
  2656  001FA0  0100               	movlb	0	; () banked
  2657  001FA2  A0DF               	btfss	indf2,0,c
  2658  001FA4  D00F               	goto	l3430
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;My_RTCC.c: 343: cnt_inc->flag.press = 0;
  2662  001FA6  0100               	movlb	0	; () banked
  2663  001FA8  EE20 F002          	lfsr	2,2
  2664  001FAC  5178               	movf	RTCC_adjust_time_button@cnt_inc& (0+255),w,b
  2665  001FAE  26D9               	addwf	fsr2l,f,c
  2666  001FB0  5179               	movf	(RTCC_adjust_time_button@cnt_inc+1)& (0+255),w,b
  2667  001FB2  22DA               	addwfc	fsr2h,f,c
  2668  001FB4  0100               	movlb	0	; () banked
  2669  001FB6  90DF               	bcf	indf2,0,c
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;My_RTCC.c: 344: RTCC_adjust_time_inc(tm);
  2673  001FB8  C074  F06C         	movff	RTCC_adjust_time_button@tm,RTCC_adjust_time_inc@tm
  2674  001FBC  C075  F06D         	movff	RTCC_adjust_time_button@tm+1,RTCC_adjust_time_inc@tm+1
  2675  001FC0  EC04  F00B         	call	_RTCC_adjust_time_inc	;wreg free
  2676  001FC4                     l3430:
  2677                           
  2678                           ;My_RTCC.c: 345: }
  2679                           ;My_RTCC.c: 346: if (cnt_dec->flag.press) {
  2680  001FC4  0100               	movlb	0	; () banked
  2681  001FC6  EE20 F002          	lfsr	2,2
  2682  001FCA  517A               	movf	RTCC_adjust_time_button@cnt_dec& (0+255),w,b
  2683  001FCC  26D9               	addwf	fsr2l,f,c
  2684  001FCE  517B               	movf	(RTCC_adjust_time_button@cnt_dec+1)& (0+255),w,b
  2685  001FD0  22DA               	addwfc	fsr2h,f,c
  2686  001FD2  0100               	movlb	0	; () banked
  2687  001FD4  A0DF               	btfss	indf2,0,c
  2688  001FD6  0012               	return	
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;My_RTCC.c: 347: cnt_dec->flag.press = 0;
  2692  001FD8  0100               	movlb	0	; () banked
  2693  001FDA  EE20 F002          	lfsr	2,2
  2694  001FDE  517A               	movf	RTCC_adjust_time_button@cnt_dec& (0+255),w,b
  2695  001FE0  26D9               	addwf	fsr2l,f,c
  2696  001FE2  517B               	movf	(RTCC_adjust_time_button@cnt_dec+1)& (0+255),w,b
  2697  001FE4  22DA               	addwfc	fsr2h,f,c
  2698  001FE6  0100               	movlb	0	; () banked
  2699  001FE8  90DF               	bcf	indf2,0,c
  2700                           
  2701                           ; BSR set to: 0
  2702                           ;My_RTCC.c: 348: RTCC_adjust_time_dec(tm);
  2703  001FEA  C074  F06C         	movff	RTCC_adjust_time_button@tm,RTCC_adjust_time_dec@tm
  2704  001FEE  C075  F06D         	movff	RTCC_adjust_time_button@tm+1,RTCC_adjust_time_dec@tm+1
  2705  001FF2  EC44  F00C         	call	_RTCC_adjust_time_dec	;wreg free
  2706  001FF6  0012               	return	
  2707  001FF8                     __end_of_RTCC_adjust_time_button:
  2708                           	opt stack 0
  2709                           tblptru	equ	0xFF8
  2710                           tblptrh	equ	0xFF7
  2711                           tblptrl	equ	0xFF6
  2712                           tablat	equ	0xFF5
  2713                           prodh	equ	0xFF4
  2714                           prodl	equ	0xFF3
  2715                           intcon	equ	0xFF2
  2716                           intcon2	equ	0xFF1
  2717                           postinc0	equ	0xFEE
  2718                           wreg	equ	0xFE8
  2719                           indf2	equ	0xFDF
  2720                           postinc2	equ	0xFDE
  2721                           postdec2	equ	0xFDD
  2722                           fsr2h	equ	0xFDA
  2723                           fsr2l	equ	0xFD9
  2724                           status	equ	0xFD8
  2725                           
  2726 ;; *************** function _RTCC_adjust_time_toggle *****************
  2727 ;; Defined at:
  2728 ;;		line 269 in file "My_RTCC.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;  tm              2   20[COMRAM] PTR struct .
  2731 ;;		 -> now(14), 
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;		None
  2734 ;; Return value:  Size  Location     Type
  2735 ;;		None               void
  2736 ;; Registers used:
  2737 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2738 ;; Tracked objects:
  2739 ;;		On entry : 0/0
  2740 ;;		On exit  : 0/0
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2743 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2746 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2747 ;;Total ram usage:        2 bytes
  2748 ;; Hardware stack levels used:    1
  2749 ;; Hardware stack levels required when called:    2
  2750 ;; This function calls:
  2751 ;;		Nothing
  2752 ;; This function is called by:
  2753 ;;		_RTCC_adjust_time_button
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           	psect	text10
  2758  002810                     __ptext10:
  2759                           	opt stack 0
  2760  002810                     _RTCC_adjust_time_toggle:
  2761                           	opt stack 27
  2762                           
  2763                           ;My_RTCC.c: 270: if (tm->edit.flags) {
  2764                           
  2765                           ;incstack = 0
  2766  002810  EE20 F00D          	lfsr	2,13
  2767  002814  5015               	movf	RTCC_adjust_time_toggle@tm,w,c
  2768  002816  26D9               	addwf	fsr2l,f,c
  2769  002818  5016               	movf	RTCC_adjust_time_toggle@tm+1,w,c
  2770  00281A  22DA               	addwfc	fsr2h,f,c
  2771  00281C  50DF               	movf	indf2,w,c
  2772  00281E  B4D8               	btfsc	status,2,c
  2773  002820  D009               	goto	l2242
  2774                           
  2775                           ;My_RTCC.c: 271: tm->edit.flags = 0;
  2776  002822  EE20 F00D          	lfsr	2,13
  2777  002826  5015               	movf	RTCC_adjust_time_toggle@tm,w,c
  2778  002828  26D9               	addwf	fsr2l,f,c
  2779  00282A  5016               	movf	RTCC_adjust_time_toggle@tm+1,w,c
  2780  00282C  22DA               	addwfc	fsr2h,f,c
  2781  00282E  0E00               	movlw	0
  2782  002830  6EDF               	movwf	indf2,c
  2783                           
  2784                           ;My_RTCC.c: 272: } else {
  2785  002832  0012               	return	
  2786  002834                     l2242:
  2787                           
  2788                           ;My_RTCC.c: 273: tm->edit.flag.ss = 1;
  2789  002834  EE20 F00D          	lfsr	2,13
  2790  002838  5015               	movf	RTCC_adjust_time_toggle@tm,w,c
  2791  00283A  26D9               	addwf	fsr2l,f,c
  2792  00283C  5016               	movf	RTCC_adjust_time_toggle@tm+1,w,c
  2793  00283E  22DA               	addwfc	fsr2h,f,c
  2794  002840  80DF               	bsf	indf2,0,c
  2795  002842  0012               	return	
  2796  002844                     __end_of_RTCC_adjust_time_toggle:
  2797                           	opt stack 0
  2798                           tblptru	equ	0xFF8
  2799                           tblptrh	equ	0xFF7
  2800                           tblptrl	equ	0xFF6
  2801                           tablat	equ	0xFF5
  2802                           prodh	equ	0xFF4
  2803                           prodl	equ	0xFF3
  2804                           intcon	equ	0xFF2
  2805                           intcon2	equ	0xFF1
  2806                           postinc0	equ	0xFEE
  2807                           wreg	equ	0xFE8
  2808                           indf2	equ	0xFDF
  2809                           postinc2	equ	0xFDE
  2810                           postdec2	equ	0xFDD
  2811                           fsr2h	equ	0xFDA
  2812                           fsr2l	equ	0xFD9
  2813                           status	equ	0xFD8
  2814                           
  2815 ;; *************** function _RTCC_adjust_time_inc *****************
  2816 ;; Defined at:
  2817 ;;		line 287 in file "My_RTCC.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;  tm              2   12[BANK0 ] PTR struct .
  2820 ;;		 -> now(14), 
  2821 ;; Auto vars:     Size  Location     Type
  2822 ;;  i               1   18[BANK0 ] unsigned char 
  2823 ;;  i               1   19[BANK0 ] unsigned char 
  2824 ;; Return value:  Size  Location     Type
  2825 ;;		None               void
  2826 ;; Registers used:
  2827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2828 ;; Tracked objects:
  2829 ;;		On entry : 0/0
  2830 ;;		On exit  : 0/0
  2831 ;;		Unchanged: 0/0
  2832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2833 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2834 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2835 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2836 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2837 ;;Total ram usage:        8 bytes
  2838 ;; Hardware stack levels used:    1
  2839 ;; Hardware stack levels required when called:    6
  2840 ;; This function calls:
  2841 ;;		_RTCC_from_RTCC
  2842 ;;		_RTCC_from_epoch
  2843 ;;		___lmul
  2844 ;;		_month_length
  2845 ;; This function is called by:
  2846 ;;		_RTCC_adjust_time_button
  2847 ;; This function uses a non-reentrant model
  2848 ;;
  2849                           
  2850                           	psect	text11
  2851  001608                     __ptext11:
  2852                           	opt stack 0
  2853  001608                     _RTCC_adjust_time_inc:
  2854                           	opt stack 23
  2855                           
  2856                           ;My_RTCC.c: 288: RTCC_from_RTCC(tm);
  2857                           
  2858                           ;incstack = 0
  2859  001608  C06C  F034         	movff	RTCC_adjust_time_inc@tm,RTCC_from_RTCC@tm
  2860  00160C  C06D  F035         	movff	RTCC_adjust_time_inc@tm+1,RTCC_from_RTCC@tm+1
  2861  001610  EC60  F014         	call	_RTCC_from_RTCC	;wreg free
  2862                           
  2863                           ;My_RTCC.c: 289: if (tm->edit.flag.ss) tm->epoch += 1;
  2864  001614  0100               	movlb	0	; () banked
  2865  001616  EE20 F00D          	lfsr	2,13
  2866  00161A  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  2867  00161C  26D9               	addwf	fsr2l,f,c
  2868  00161E  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  2869  001620  22DA               	addwfc	fsr2h,f,c
  2870  001622  0100               	movlb	0	; () banked
  2871  001624  A0DF               	btfss	indf2,0,c
  2872  001626  D009               	goto	l243
  2873                           
  2874                           ; BSR set to: 0
  2875  001628  C06C  FFD9         	movff	RTCC_adjust_time_inc@tm,fsr2l
  2876  00162C  C06D  FFDA         	movff	RTCC_adjust_time_inc@tm+1,fsr2h
  2877  001630  2ADE               	incf	postinc2,f,c
  2878  001632  0E00               	movlw	0
  2879  001634  22DE               	addwfc	postinc2,f,c
  2880  001636  22DE               	addwfc	postinc2,f,c
  2881  001638  22DE               	addwfc	postinc2,f,c
  2882  00163A                     l243:
  2883                           
  2884                           ; BSR set to: 0
  2885                           ;My_RTCC.c: 290: if (tm->edit.flag.mm) tm->epoch += ((epoch_t)60);
  2886  00163A  0100               	movlb	0	; () banked
  2887  00163C  EE20 F00D          	lfsr	2,13
  2888  001640  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  2889  001642  26D9               	addwf	fsr2l,f,c
  2890  001644  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  2891  001646  22DA               	addwfc	fsr2h,f,c
  2892  001648  0100               	movlb	0	; () banked
  2893  00164A  A2DF               	btfss	indf2,1,c
  2894  00164C  D00A               	goto	l3176
  2895                           
  2896                           ; BSR set to: 0
  2897  00164E  0E3C               	movlw	60
  2898  001650  C06C  FFD9         	movff	RTCC_adjust_time_inc@tm,fsr2l
  2899  001654  C06D  FFDA         	movff	RTCC_adjust_time_inc@tm+1,fsr2h
  2900  001658  26DE               	addwf	postinc2,f,c
  2901  00165A  0E00               	movlw	0
  2902  00165C  22DE               	addwfc	postinc2,f,c
  2903  00165E  22DE               	addwfc	postinc2,f,c
  2904  001660  22DE               	addwfc	postinc2,f,c
  2905  001662                     l3176:
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;My_RTCC.c: 291: if (tm->edit.flag.hh) tm->epoch += ((epoch_t)60*60);
  2909  001662  0100               	movlb	0	; () banked
  2910  001664  EE20 F00D          	lfsr	2,13
  2911  001668  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  2912  00166A  26D9               	addwf	fsr2l,f,c
  2913  00166C  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  2914  00166E  22DA               	addwfc	fsr2h,f,c
  2915  001670  0100               	movlb	0	; () banked
  2916  001672  A4DF               	btfss	indf2,2,c
  2917  001674  D00C               	goto	l3180
  2918                           
  2919                           ; BSR set to: 0
  2920  001676  C06C  FFD9         	movff	RTCC_adjust_time_inc@tm,fsr2l
  2921  00167A  C06D  FFDA         	movff	RTCC_adjust_time_inc@tm+1,fsr2h
  2922  00167E  0E10               	movlw	16
  2923  001680  26DE               	addwf	postinc2,f,c
  2924  001682  0E0E               	movlw	14
  2925  001684  22DE               	addwfc	postinc2,f,c
  2926  001686  0E00               	movlw	0
  2927  001688  22DE               	addwfc	postinc2,f,c
  2928  00168A  0E00               	movlw	0
  2929  00168C  22DE               	addwfc	postinc2,f,c
  2930  00168E                     l3180:
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;My_RTCC.c: 292: if (tm->edit.flag.DD) tm->epoch += ((epoch_t)60*60*24);
  2934  00168E  0100               	movlb	0	; () banked
  2935  001690  EE20 F00D          	lfsr	2,13
  2936  001694  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  2937  001696  26D9               	addwf	fsr2l,f,c
  2938  001698  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  2939  00169A  22DA               	addwfc	fsr2h,f,c
  2940  00169C  0100               	movlb	0	; () banked
  2941  00169E  A6DF               	btfss	indf2,3,c
  2942  0016A0  D00C               	goto	l3184
  2943                           
  2944                           ; BSR set to: 0
  2945  0016A2  C06C  FFD9         	movff	RTCC_adjust_time_inc@tm,fsr2l
  2946  0016A6  C06D  FFDA         	movff	RTCC_adjust_time_inc@tm+1,fsr2h
  2947  0016AA  0E80               	movlw	128
  2948  0016AC  26DE               	addwf	postinc2,f,c
  2949  0016AE  0E51               	movlw	81
  2950  0016B0  22DE               	addwfc	postinc2,f,c
  2951  0016B2  0E01               	movlw	1
  2952  0016B4  22DE               	addwfc	postinc2,f,c
  2953  0016B6  0E00               	movlw	0
  2954  0016B8  22DE               	addwfc	postinc2,f,c
  2955  0016BA                     l3184:
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;My_RTCC.c: 293: if (tm->edit.flag.MM) tm->epoch += ((epoch_t)60*60*24) * month_length(t
      +                          m->YY, tm->MM);
  2959  0016BA  0100               	movlb	0	; () banked
  2960  0016BC  EE20 F00D          	lfsr	2,13
  2961  0016C0  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  2962  0016C2  26D9               	addwf	fsr2l,f,c
  2963  0016C4  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  2964  0016C6  22DA               	addwfc	fsr2h,f,c
  2965  0016C8  0100               	movlb	0	; () banked
  2966  0016CA  A8DF               	btfss	indf2,4,c
  2967  0016CC  D031               	goto	l3188
  2968                           
  2969                           ; BSR set to: 0
  2970  0016CE  0100               	movlb	0	; () banked
  2971  0016D0  EE20 F009          	lfsr	2,9
  2972  0016D4  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  2973  0016D6  26D9               	addwf	fsr2l,f,c
  2974  0016D8  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  2975  0016DA  22DA               	addwfc	fsr2h,f,c
  2976  0016DC  50DF               	movf	indf2,w,c
  2977  0016DE  6E1B               	movwf	month_length@month,c
  2978  0016E0  0100               	movlb	0	; () banked
  2979  0016E2  EE20 F00A          	lfsr	2,10
  2980  0016E6  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  2981  0016E8  26D9               	addwf	fsr2l,f,c
  2982  0016EA  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  2983  0016EC  22DA               	addwfc	fsr2h,f,c
  2984  0016EE  50DF               	movf	indf2,w,c
  2985  0016F0  EC91  F011         	call	_month_length
  2986  0016F4  0100               	movlb	0	; () banked
  2987  0016F6  6F6E               	movwf	??_RTCC_adjust_time_inc& (0+255),b
  2988  0016F8  0100               	movlb	0	; () banked
  2989  0016FA  516E               	movf	??_RTCC_adjust_time_inc& (0+255),w,b
  2990  0016FC  6E22               	movwf	___lmul@multiplier,c
  2991  0016FE  6A23               	clrf	___lmul@multiplier+1,c
  2992  001700  6A24               	clrf	___lmul@multiplier+2,c
  2993  001702  6A25               	clrf	___lmul@multiplier+3,c
  2994  001704  0E80               	movlw	128
  2995  001706  6E26               	movwf	___lmul@multiplicand,c
  2996  001708  0E51               	movlw	81
  2997  00170A  6E27               	movwf	___lmul@multiplicand+1,c
  2998  00170C  0E01               	movlw	1
  2999  00170E  6E28               	movwf	___lmul@multiplicand+2,c
  3000  001710  0E00               	movlw	0
  3001  001712  6E29               	movwf	___lmul@multiplicand+3,c
  3002  001714  EC5E  F013         	call	___lmul	;wreg free
  3003  001718  C06C  FFD9         	movff	RTCC_adjust_time_inc@tm,fsr2l
  3004  00171C  C06D  FFDA         	movff	RTCC_adjust_time_inc@tm+1,fsr2h
  3005  001720  5022               	movf	?___lmul,w,c
  3006  001722  26DE               	addwf	postinc2,f,c
  3007  001724  5023               	movf	?___lmul+1,w,c
  3008  001726  22DE               	addwfc	postinc2,f,c
  3009  001728  5024               	movf	?___lmul+2,w,c
  3010  00172A  22DE               	addwfc	postinc2,f,c
  3011  00172C  5025               	movf	?___lmul+3,w,c
  3012  00172E  22DE               	addwfc	postinc2,f,c
  3013  001730                     l3188:
  3014                           
  3015                           ;My_RTCC.c: 294: if (tm->edit.flag.YY) {
  3016  001730  0100               	movlb	0	; () banked
  3017  001732  EE20 F00D          	lfsr	2,13
  3018  001736  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  3019  001738  26D9               	addwf	fsr2l,f,c
  3020  00173A  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  3021  00173C  22DA               	addwfc	fsr2h,f,c
  3022  00173E  0100               	movlb	0	; () banked
  3023  001740  AADF               	btfss	indf2,5,c
  3024  001742  D07C               	goto	l3210
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;My_RTCC.c: 295: for (uint8_t i = tm->MM; i <= 12; i++) {
  3028  001744  0100               	movlb	0	; () banked
  3029  001746  EE20 F009          	lfsr	2,9
  3030  00174A  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  3031  00174C  26D9               	addwf	fsr2l,f,c
  3032  00174E  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  3033  001750  22DA               	addwfc	fsr2h,f,c
  3034  001752  50DF               	movf	indf2,w,c
  3035  001754  0100               	movlb	0	; () banked
  3036  001756  6F73               	movwf	RTCC_adjust_time_inc@i& (0+255),b
  3037  001758                     l3192:
  3038                           
  3039                           ; BSR set to: 0
  3040  001758  0E0C               	movlw	12
  3041  00175A  0100               	movlb	0	; () banked
  3042  00175C  6573               	cpfsgt	RTCC_adjust_time_inc@i& (0+255),b
  3043  00175E  D001               	goto	l3196
  3044  001760  D02D               	goto	l3202
  3045  001762                     l3196:
  3046                           
  3047                           ; BSR set to: 0
  3048                           ;My_RTCC.c: 296: tm->epoch += ((epoch_t)60*60*24) * month_length(tm->YY, i);
  3049  001762  C073  F01B         	movff	RTCC_adjust_time_inc@i,month_length@month
  3050  001766  0100               	movlb	0	; () banked
  3051  001768  EE20 F00A          	lfsr	2,10
  3052  00176C  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  3053  00176E  26D9               	addwf	fsr2l,f,c
  3054  001770  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  3055  001772  22DA               	addwfc	fsr2h,f,c
  3056  001774  50DF               	movf	indf2,w,c
  3057  001776  EC91  F011         	call	_month_length
  3058  00177A  0100               	movlb	0	; () banked
  3059  00177C  6F6E               	movwf	??_RTCC_adjust_time_inc& (0+255),b
  3060  00177E  0100               	movlb	0	; () banked
  3061  001780  516E               	movf	??_RTCC_adjust_time_inc& (0+255),w,b
  3062  001782  6E22               	movwf	___lmul@multiplier,c
  3063  001784  6A23               	clrf	___lmul@multiplier+1,c
  3064  001786  6A24               	clrf	___lmul@multiplier+2,c
  3065  001788  6A25               	clrf	___lmul@multiplier+3,c
  3066  00178A  0E80               	movlw	128
  3067  00178C  6E26               	movwf	___lmul@multiplicand,c
  3068  00178E  0E51               	movlw	81
  3069  001790  6E27               	movwf	___lmul@multiplicand+1,c
  3070  001792  0E01               	movlw	1
  3071  001794  6E28               	movwf	___lmul@multiplicand+2,c
  3072  001796  0E00               	movlw	0
  3073  001798  6E29               	movwf	___lmul@multiplicand+3,c
  3074  00179A  EC5E  F013         	call	___lmul	;wreg free
  3075  00179E  C06C  FFD9         	movff	RTCC_adjust_time_inc@tm,fsr2l
  3076  0017A2  C06D  FFDA         	movff	RTCC_adjust_time_inc@tm+1,fsr2h
  3077  0017A6  5022               	movf	?___lmul,w,c
  3078  0017A8  26DE               	addwf	postinc2,f,c
  3079  0017AA  5023               	movf	?___lmul+1,w,c
  3080  0017AC  22DE               	addwfc	postinc2,f,c
  3081  0017AE  5024               	movf	?___lmul+2,w,c
  3082  0017B0  22DE               	addwfc	postinc2,f,c
  3083  0017B2  5025               	movf	?___lmul+3,w,c
  3084  0017B4  22DE               	addwfc	postinc2,f,c
  3085  0017B6  0100               	movlb	0	; () banked
  3086  0017B8  2B73               	incf	RTCC_adjust_time_inc@i& (0+255),f,b
  3087  0017BA  D7CE               	goto	l3192
  3088  0017BC                     l3202:
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;My_RTCC.c: 297: }
  3092                           ;My_RTCC.c: 298: for (uint8_t i = 1; i < tm->MM; i++) {
  3093  0017BC  0E01               	movlw	1
  3094  0017BE  0100               	movlb	0	; () banked
  3095  0017C0  6F72               	movwf	RTCC_adjust_time_inc@i_1754& (0+255),b
  3096  0017C2  D030               	goto	l3208
  3097  0017C4                     l3204:
  3098                           
  3099                           ; BSR set to: 0
  3100                           ;My_RTCC.c: 299: tm->epoch += ((epoch_t)60*60*24) * month_length(tm->YY + 1, i);
  3101  0017C4  C072  F01B         	movff	RTCC_adjust_time_inc@i_1754,month_length@month
  3102  0017C8  0100               	movlb	0	; () banked
  3103  0017CA  EE20 F00A          	lfsr	2,10
  3104  0017CE  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  3105  0017D0  26D9               	addwf	fsr2l,f,c
  3106  0017D2  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  3107  0017D4  22DA               	addwfc	fsr2h,f,c
  3108  0017D6  50DF               	movf	indf2,w,c
  3109  0017D8  0100               	movlb	0	; () banked
  3110  0017DA  6F6E               	movwf	??_RTCC_adjust_time_inc& (0+255),b
  3111  0017DC  0100               	movlb	0	; () banked
  3112  0017DE  296E               	incf	??_RTCC_adjust_time_inc& (0+255),w,b
  3113  0017E0  EC91  F011         	call	_month_length
  3114  0017E4  0100               	movlb	0	; () banked
  3115  0017E6  6F6F               	movwf	(??_RTCC_adjust_time_inc+1)& (0+255),b
  3116  0017E8  0100               	movlb	0	; () banked
  3117  0017EA  516F               	movf	(??_RTCC_adjust_time_inc+1)& (0+255),w,b
  3118  0017EC  6E22               	movwf	___lmul@multiplier,c
  3119  0017EE  6A23               	clrf	___lmul@multiplier+1,c
  3120  0017F0  6A24               	clrf	___lmul@multiplier+2,c
  3121  0017F2  6A25               	clrf	___lmul@multiplier+3,c
  3122  0017F4  0E80               	movlw	128
  3123  0017F6  6E26               	movwf	___lmul@multiplicand,c
  3124  0017F8  0E51               	movlw	81
  3125  0017FA  6E27               	movwf	___lmul@multiplicand+1,c
  3126  0017FC  0E01               	movlw	1
  3127  0017FE  6E28               	movwf	___lmul@multiplicand+2,c
  3128  001800  0E00               	movlw	0
  3129  001802  6E29               	movwf	___lmul@multiplicand+3,c
  3130  001804  EC5E  F013         	call	___lmul	;wreg free
  3131  001808  C06C  FFD9         	movff	RTCC_adjust_time_inc@tm,fsr2l
  3132  00180C  C06D  FFDA         	movff	RTCC_adjust_time_inc@tm+1,fsr2h
  3133  001810  5022               	movf	?___lmul,w,c
  3134  001812  26DE               	addwf	postinc2,f,c
  3135  001814  5023               	movf	?___lmul+1,w,c
  3136  001816  22DE               	addwfc	postinc2,f,c
  3137  001818  5024               	movf	?___lmul+2,w,c
  3138  00181A  22DE               	addwfc	postinc2,f,c
  3139  00181C  5025               	movf	?___lmul+3,w,c
  3140  00181E  22DE               	addwfc	postinc2,f,c
  3141  001820  0100               	movlb	0	; () banked
  3142  001822  2B72               	incf	RTCC_adjust_time_inc@i_1754& (0+255),f,b
  3143  001824                     l3208:
  3144                           
  3145                           ; BSR set to: 0
  3146  001824  0100               	movlb	0	; () banked
  3147  001826  EE20 F009          	lfsr	2,9
  3148  00182A  516C               	movf	RTCC_adjust_time_inc@tm& (0+255),w,b
  3149  00182C  26D9               	addwf	fsr2l,f,c
  3150  00182E  516D               	movf	(RTCC_adjust_time_inc@tm+1)& (0+255),w,b
  3151  001830  22DA               	addwfc	fsr2h,f,c
  3152  001832  50DE               	movf	postinc2,w,c
  3153  001834  0100               	movlb	0	; () banked
  3154  001836  5D72               	subwf	RTCC_adjust_time_inc@i_1754& (0+255),w,b
  3155  001838  A0D8               	btfss	status,0,c
  3156  00183A  D7C4               	goto	l3204
  3157  00183C                     l3210:
  3158                           
  3159                           ; BSR set to: 0
  3160                           ;My_RTCC.c: 300: }
  3161                           ;My_RTCC.c: 301: }
  3162                           ;My_RTCC.c: 303: if (tm->epoch >= 3155760000)tm->epoch -= 3155760000;
  3163  00183C  C06C  FFD9         	movff	RTCC_adjust_time_inc@tm,fsr2l
  3164  001840  C06D  FFDA         	movff	RTCC_adjust_time_inc@tm+1,fsr2h
  3165  001844  0E80               	movlw	128
  3166  001846  5CDE               	subwf	postinc2,w,c
  3167  001848  0E13               	movlw	19
  3168  00184A  58DE               	subwfb	postinc2,w,c
  3169  00184C  0E19               	movlw	25
  3170  00184E  58DE               	subwfb	postinc2,w,c
  3171  001850  0EBC               	movlw	188
  3172  001852  58DE               	subwfb	postinc2,w,c
  3173  001854  A0D8               	btfss	status,0,c
  3174  001856  D00C               	goto	l3214
  3175                           
  3176                           ; BSR set to: 0
  3177  001858  C06C  FFD9         	movff	RTCC_adjust_time_inc@tm,fsr2l
  3178  00185C  C06D  FFDA         	movff	RTCC_adjust_time_inc@tm+1,fsr2h
  3179  001860  0E80               	movlw	128
  3180  001862  5EDE               	subwf	postinc2,f,c
  3181  001864  0E13               	movlw	19
  3182  001866  5ADE               	subwfb	postinc2,f,c
  3183  001868  0E19               	movlw	25
  3184  00186A  5ADE               	subwfb	postinc2,f,c
  3185  00186C  0EBC               	movlw	188
  3186  00186E  5ADE               	subwfb	postinc2,f,c
  3187  001870                     l3214:
  3188                           
  3189                           ; BSR set to: 0
  3190                           ;My_RTCC.c: 304: RTCC_from_epoch(&now);
  3191  001870  0E9C               	movlw	low _now
  3192  001872  0100               	movlb	0	; () banked
  3193  001874  6F6A               	movwf	RTCC_from_epoch@tm& (0+255),b
  3194  001876  0E00               	movlw	high _now
  3195  001878  0100               	movlb	0	; () banked
  3196  00187A  6F6B               	movwf	(RTCC_from_epoch@tm+1)& (0+255),b
  3197  00187C  EC53  F014         	call	_RTCC_from_epoch	;wreg free
  3198                           
  3199                           ;My_RTCC.c: 305: time_change_flag = 1;
  3200  001880  0E01               	movlw	1
  3201  001882  0100               	movlb	0	; () banked
  3202  001884  6F9B               	movwf	_time_change_flag& (0+255),b
  3203                           
  3204                           ; BSR set to: 0
  3205  001886  0012               	return		;funcret
  3206  001888                     __end_of_RTCC_adjust_time_inc:
  3207                           	opt stack 0
  3208                           tblptru	equ	0xFF8
  3209                           tblptrh	equ	0xFF7
  3210                           tblptrl	equ	0xFF6
  3211                           tablat	equ	0xFF5
  3212                           prodh	equ	0xFF4
  3213                           prodl	equ	0xFF3
  3214                           intcon	equ	0xFF2
  3215                           intcon2	equ	0xFF1
  3216                           postinc0	equ	0xFEE
  3217                           wreg	equ	0xFE8
  3218                           indf2	equ	0xFDF
  3219                           postinc2	equ	0xFDE
  3220                           postdec2	equ	0xFDD
  3221                           fsr2h	equ	0xFDA
  3222                           fsr2l	equ	0xFD9
  3223                           status	equ	0xFD8
  3224                           
  3225 ;; *************** function _RTCC_adjust_time_dec *****************
  3226 ;; Defined at:
  3227 ;;		line 308 in file "My_RTCC.c"
  3228 ;; Parameters:    Size  Location     Type
  3229 ;;  tm              2   12[BANK0 ] PTR struct .
  3230 ;;		 -> now(14), 
  3231 ;; Auto vars:     Size  Location     Type
  3232 ;;  i               1   18[BANK0 ] unsigned char 
  3233 ;;  i               1   19[BANK0 ] unsigned char 
  3234 ;; Return value:  Size  Location     Type
  3235 ;;		None               void
  3236 ;; Registers used:
  3237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3243 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3244 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3245 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3246 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3247 ;;Total ram usage:        8 bytes
  3248 ;; Hardware stack levels used:    1
  3249 ;; Hardware stack levels required when called:    6
  3250 ;; This function calls:
  3251 ;;		_RTCC_from_RTCC
  3252 ;;		_RTCC_from_epoch
  3253 ;;		___lmul
  3254 ;;		_month_length
  3255 ;; This function is called by:
  3256 ;;		_RTCC_adjust_time_button
  3257 ;; This function uses a non-reentrant model
  3258 ;;
  3259                           
  3260                           	psect	text12
  3261  001888                     __ptext12:
  3262                           	opt stack 0
  3263  001888                     _RTCC_adjust_time_dec:
  3264                           	opt stack 23
  3265                           
  3266                           ;My_RTCC.c: 309: RTCC_from_RTCC(tm);
  3267                           
  3268                           ; BSR set to: 0
  3269                           ;incstack = 0
  3270  001888  C06C  F034         	movff	RTCC_adjust_time_dec@tm,RTCC_from_RTCC@tm
  3271  00188C  C06D  F035         	movff	RTCC_adjust_time_dec@tm+1,RTCC_from_RTCC@tm+1
  3272  001890  EC60  F014         	call	_RTCC_from_RTCC	;wreg free
  3273                           
  3274                           ;My_RTCC.c: 310: if (tm->edit.flag.ss) tm->epoch -= 1;
  3275  001894  0100               	movlb	0	; () banked
  3276  001896  EE20 F00D          	lfsr	2,13
  3277  00189A  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3278  00189C  26D9               	addwf	fsr2l,f,c
  3279  00189E  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3280  0018A0  22DA               	addwfc	fsr2h,f,c
  3281  0018A2  0100               	movlb	0	; () banked
  3282  0018A4  A0DF               	btfss	indf2,0,c
  3283  0018A6  D009               	goto	l258
  3284                           
  3285                           ; BSR set to: 0
  3286  0018A8  C06C  FFD9         	movff	RTCC_adjust_time_dec@tm,fsr2l
  3287  0018AC  C06D  FFDA         	movff	RTCC_adjust_time_dec@tm+1,fsr2h
  3288  0018B0  06DE               	decf	postinc2,f,c
  3289  0018B2  0E00               	movlw	0
  3290  0018B4  5ADE               	subwfb	postinc2,f,c
  3291  0018B6  5ADE               	subwfb	postinc2,f,c
  3292  0018B8  5ADE               	subwfb	postinc2,f,c
  3293  0018BA                     l258:
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;My_RTCC.c: 311: if (tm->edit.flag.mm) tm->epoch -= ((epoch_t)60);
  3297  0018BA  0100               	movlb	0	; () banked
  3298  0018BC  EE20 F00D          	lfsr	2,13
  3299  0018C0  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3300  0018C2  26D9               	addwf	fsr2l,f,c
  3301  0018C4  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3302  0018C6  22DA               	addwfc	fsr2h,f,c
  3303  0018C8  0100               	movlb	0	; () banked
  3304  0018CA  A2DF               	btfss	indf2,1,c
  3305  0018CC  D00A               	goto	l3226
  3306                           
  3307                           ; BSR set to: 0
  3308  0018CE  0E3C               	movlw	60
  3309  0018D0  C06C  FFD9         	movff	RTCC_adjust_time_dec@tm,fsr2l
  3310  0018D4  C06D  FFDA         	movff	RTCC_adjust_time_dec@tm+1,fsr2h
  3311  0018D8  5EDE               	subwf	postinc2,f,c
  3312  0018DA  0E00               	movlw	0
  3313  0018DC  5ADE               	subwfb	postinc2,f,c
  3314  0018DE  5ADE               	subwfb	postinc2,f,c
  3315  0018E0  5ADE               	subwfb	postinc2,f,c
  3316  0018E2                     l3226:
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;My_RTCC.c: 312: if (tm->edit.flag.hh) tm->epoch -= ((epoch_t)60*60);
  3320  0018E2  0100               	movlb	0	; () banked
  3321  0018E4  EE20 F00D          	lfsr	2,13
  3322  0018E8  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3323  0018EA  26D9               	addwf	fsr2l,f,c
  3324  0018EC  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3325  0018EE  22DA               	addwfc	fsr2h,f,c
  3326  0018F0  0100               	movlb	0	; () banked
  3327  0018F2  A4DF               	btfss	indf2,2,c
  3328  0018F4  D00C               	goto	l3230
  3329                           
  3330                           ; BSR set to: 0
  3331  0018F6  C06C  FFD9         	movff	RTCC_adjust_time_dec@tm,fsr2l
  3332  0018FA  C06D  FFDA         	movff	RTCC_adjust_time_dec@tm+1,fsr2h
  3333  0018FE  0E10               	movlw	16
  3334  001900  5EDE               	subwf	postinc2,f,c
  3335  001902  0E0E               	movlw	14
  3336  001904  5ADE               	subwfb	postinc2,f,c
  3337  001906  0E00               	movlw	0
  3338  001908  5ADE               	subwfb	postinc2,f,c
  3339  00190A  0E00               	movlw	0
  3340  00190C  5ADE               	subwfb	postinc2,f,c
  3341  00190E                     l3230:
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;My_RTCC.c: 313: if (tm->edit.flag.DD) tm->epoch -= ((epoch_t)60*60*24);
  3345  00190E  0100               	movlb	0	; () banked
  3346  001910  EE20 F00D          	lfsr	2,13
  3347  001914  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3348  001916  26D9               	addwf	fsr2l,f,c
  3349  001918  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3350  00191A  22DA               	addwfc	fsr2h,f,c
  3351  00191C  0100               	movlb	0	; () banked
  3352  00191E  A6DF               	btfss	indf2,3,c
  3353  001920  D00C               	goto	l3234
  3354                           
  3355                           ; BSR set to: 0
  3356  001922  C06C  FFD9         	movff	RTCC_adjust_time_dec@tm,fsr2l
  3357  001926  C06D  FFDA         	movff	RTCC_adjust_time_dec@tm+1,fsr2h
  3358  00192A  0E80               	movlw	128
  3359  00192C  5EDE               	subwf	postinc2,f,c
  3360  00192E  0E51               	movlw	81
  3361  001930  5ADE               	subwfb	postinc2,f,c
  3362  001932  0E01               	movlw	1
  3363  001934  5ADE               	subwfb	postinc2,f,c
  3364  001936  0E00               	movlw	0
  3365  001938  5ADE               	subwfb	postinc2,f,c
  3366  00193A                     l3234:
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;My_RTCC.c: 314: if (tm->edit.flag.MM) tm->epoch -= ((epoch_t)60*60*24) * month_length(t
      +                          m->YY, tm->MM);
  3370  00193A  0100               	movlb	0	; () banked
  3371  00193C  EE20 F00D          	lfsr	2,13
  3372  001940  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3373  001942  26D9               	addwf	fsr2l,f,c
  3374  001944  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3375  001946  22DA               	addwfc	fsr2h,f,c
  3376  001948  0100               	movlb	0	; () banked
  3377  00194A  A8DF               	btfss	indf2,4,c
  3378  00194C  D031               	goto	l3238
  3379                           
  3380                           ; BSR set to: 0
  3381  00194E  0100               	movlb	0	; () banked
  3382  001950  EE20 F009          	lfsr	2,9
  3383  001954  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3384  001956  26D9               	addwf	fsr2l,f,c
  3385  001958  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3386  00195A  22DA               	addwfc	fsr2h,f,c
  3387  00195C  50DF               	movf	indf2,w,c
  3388  00195E  6E1B               	movwf	month_length@month,c
  3389  001960  0100               	movlb	0	; () banked
  3390  001962  EE20 F00A          	lfsr	2,10
  3391  001966  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3392  001968  26D9               	addwf	fsr2l,f,c
  3393  00196A  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3394  00196C  22DA               	addwfc	fsr2h,f,c
  3395  00196E  50DF               	movf	indf2,w,c
  3396  001970  EC91  F011         	call	_month_length
  3397  001974  0100               	movlb	0	; () banked
  3398  001976  6F6E               	movwf	??_RTCC_adjust_time_dec& (0+255),b
  3399  001978  0100               	movlb	0	; () banked
  3400  00197A  516E               	movf	??_RTCC_adjust_time_dec& (0+255),w,b
  3401  00197C  6E22               	movwf	___lmul@multiplier,c
  3402  00197E  6A23               	clrf	___lmul@multiplier+1,c
  3403  001980  6A24               	clrf	___lmul@multiplier+2,c
  3404  001982  6A25               	clrf	___lmul@multiplier+3,c
  3405  001984  0E80               	movlw	128
  3406  001986  6E26               	movwf	___lmul@multiplicand,c
  3407  001988  0E51               	movlw	81
  3408  00198A  6E27               	movwf	___lmul@multiplicand+1,c
  3409  00198C  0E01               	movlw	1
  3410  00198E  6E28               	movwf	___lmul@multiplicand+2,c
  3411  001990  0E00               	movlw	0
  3412  001992  6E29               	movwf	___lmul@multiplicand+3,c
  3413  001994  EC5E  F013         	call	___lmul	;wreg free
  3414  001998  C06C  FFD9         	movff	RTCC_adjust_time_dec@tm,fsr2l
  3415  00199C  C06D  FFDA         	movff	RTCC_adjust_time_dec@tm+1,fsr2h
  3416  0019A0  5022               	movf	?___lmul,w,c
  3417  0019A2  5EDE               	subwf	postinc2,f,c
  3418  0019A4  5023               	movf	?___lmul+1,w,c
  3419  0019A6  5ADE               	subwfb	postinc2,f,c
  3420  0019A8  5024               	movf	?___lmul+2,w,c
  3421  0019AA  5ADE               	subwfb	postinc2,f,c
  3422  0019AC  5025               	movf	?___lmul+3,w,c
  3423  0019AE  5ADE               	subwfb	postinc2,f,c
  3424  0019B0                     l3238:
  3425                           
  3426                           ;My_RTCC.c: 315: if (tm->edit.flag.YY) {
  3427  0019B0  0100               	movlb	0	; () banked
  3428  0019B2  EE20 F00D          	lfsr	2,13
  3429  0019B6  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3430  0019B8  26D9               	addwf	fsr2l,f,c
  3431  0019BA  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3432  0019BC  22DA               	addwfc	fsr2h,f,c
  3433  0019BE  0100               	movlb	0	; () banked
  3434  0019C0  AADF               	btfss	indf2,5,c
  3435  0019C2  D07C               	goto	l3260
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;My_RTCC.c: 316: for (uint8_t i = tm->MM; i >= 1; i--) {
  3439  0019C4  0100               	movlb	0	; () banked
  3440  0019C6  EE20 F009          	lfsr	2,9
  3441  0019CA  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3442  0019CC  26D9               	addwf	fsr2l,f,c
  3443  0019CE  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3444  0019D0  22DA               	addwfc	fsr2h,f,c
  3445  0019D2  50DF               	movf	indf2,w,c
  3446  0019D4  0100               	movlb	0	; () banked
  3447  0019D6  6F73               	movwf	RTCC_adjust_time_dec@i& (0+255),b
  3448  0019D8                     l3242:
  3449                           
  3450                           ; BSR set to: 0
  3451  0019D8  0100               	movlb	0	; () banked
  3452  0019DA  5173               	movf	RTCC_adjust_time_dec@i& (0+255),w,b
  3453  0019DC  0100               	movlb	0	; () banked
  3454  0019DE  B4D8               	btfsc	status,2,c
  3455  0019E0  D02D               	goto	l3252
  3456                           
  3457                           ; BSR set to: 0
  3458                           ;My_RTCC.c: 317: tm->epoch -= ((epoch_t)60*60*24) * month_length(tm->YY, i);
  3459                           
  3460                           ; BSR set to: 0
  3461                           
  3462                           ; BSR set to: 0
  3463  0019E2  C073  F01B         	movff	RTCC_adjust_time_dec@i,month_length@month
  3464  0019E6  0100               	movlb	0	; () banked
  3465  0019E8  EE20 F00A          	lfsr	2,10
  3466  0019EC  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3467  0019EE  26D9               	addwf	fsr2l,f,c
  3468  0019F0  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3469  0019F2  22DA               	addwfc	fsr2h,f,c
  3470  0019F4  50DF               	movf	indf2,w,c
  3471  0019F6  EC91  F011         	call	_month_length
  3472  0019FA  0100               	movlb	0	; () banked
  3473  0019FC  6F6E               	movwf	??_RTCC_adjust_time_dec& (0+255),b
  3474  0019FE  0100               	movlb	0	; () banked
  3475  001A00  516E               	movf	??_RTCC_adjust_time_dec& (0+255),w,b
  3476  001A02  6E22               	movwf	___lmul@multiplier,c
  3477  001A04  6A23               	clrf	___lmul@multiplier+1,c
  3478  001A06  6A24               	clrf	___lmul@multiplier+2,c
  3479  001A08  6A25               	clrf	___lmul@multiplier+3,c
  3480  001A0A  0E80               	movlw	128
  3481  001A0C  6E26               	movwf	___lmul@multiplicand,c
  3482  001A0E  0E51               	movlw	81
  3483  001A10  6E27               	movwf	___lmul@multiplicand+1,c
  3484  001A12  0E01               	movlw	1
  3485  001A14  6E28               	movwf	___lmul@multiplicand+2,c
  3486  001A16  0E00               	movlw	0
  3487  001A18  6E29               	movwf	___lmul@multiplicand+3,c
  3488  001A1A  EC5E  F013         	call	___lmul	;wreg free
  3489  001A1E  C06C  FFD9         	movff	RTCC_adjust_time_dec@tm,fsr2l
  3490  001A22  C06D  FFDA         	movff	RTCC_adjust_time_dec@tm+1,fsr2h
  3491  001A26  5022               	movf	?___lmul,w,c
  3492  001A28  5EDE               	subwf	postinc2,f,c
  3493  001A2A  5023               	movf	?___lmul+1,w,c
  3494  001A2C  5ADE               	subwfb	postinc2,f,c
  3495  001A2E  5024               	movf	?___lmul+2,w,c
  3496  001A30  5ADE               	subwfb	postinc2,f,c
  3497  001A32  5025               	movf	?___lmul+3,w,c
  3498  001A34  5ADE               	subwfb	postinc2,f,c
  3499  001A36  0100               	movlb	0	; () banked
  3500  001A38  0773               	decf	RTCC_adjust_time_dec@i& (0+255),f,b
  3501  001A3A  D7CE               	goto	l3242
  3502  001A3C                     l3252:
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;My_RTCC.c: 318: }
  3506                           ;My_RTCC.c: 319: for (uint8_t i = 12; i > tm->MM; i--) {
  3507  001A3C  0E0C               	movlw	12
  3508  001A3E  0100               	movlb	0	; () banked
  3509  001A40  6F72               	movwf	RTCC_adjust_time_dec@i_1784& (0+255),b
  3510  001A42  D030               	goto	l3258
  3511  001A44                     l3254:
  3512                           
  3513                           ; BSR set to: 0
  3514                           ;My_RTCC.c: 320: tm->epoch -= ((epoch_t)60*60*24) * month_length(tm->YY - 1, i);
  3515  001A44  C072  F01B         	movff	RTCC_adjust_time_dec@i_1784,month_length@month
  3516  001A48  0100               	movlb	0	; () banked
  3517  001A4A  EE20 F00A          	lfsr	2,10
  3518  001A4E  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3519  001A50  26D9               	addwf	fsr2l,f,c
  3520  001A52  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3521  001A54  22DA               	addwfc	fsr2h,f,c
  3522  001A56  50DF               	movf	indf2,w,c
  3523  001A58  0100               	movlb	0	; () banked
  3524  001A5A  6F6E               	movwf	??_RTCC_adjust_time_dec& (0+255),b
  3525  001A5C  0100               	movlb	0	; () banked
  3526  001A5E  056E               	decf	??_RTCC_adjust_time_dec& (0+255),w,b
  3527  001A60  EC91  F011         	call	_month_length
  3528  001A64  0100               	movlb	0	; () banked
  3529  001A66  6F6F               	movwf	(??_RTCC_adjust_time_dec+1)& (0+255),b
  3530  001A68  0100               	movlb	0	; () banked
  3531  001A6A  516F               	movf	(??_RTCC_adjust_time_dec+1)& (0+255),w,b
  3532  001A6C  6E22               	movwf	___lmul@multiplier,c
  3533  001A6E  6A23               	clrf	___lmul@multiplier+1,c
  3534  001A70  6A24               	clrf	___lmul@multiplier+2,c
  3535  001A72  6A25               	clrf	___lmul@multiplier+3,c
  3536  001A74  0E80               	movlw	128
  3537  001A76  6E26               	movwf	___lmul@multiplicand,c
  3538  001A78  0E51               	movlw	81
  3539  001A7A  6E27               	movwf	___lmul@multiplicand+1,c
  3540  001A7C  0E01               	movlw	1
  3541  001A7E  6E28               	movwf	___lmul@multiplicand+2,c
  3542  001A80  0E00               	movlw	0
  3543  001A82  6E29               	movwf	___lmul@multiplicand+3,c
  3544  001A84  EC5E  F013         	call	___lmul	;wreg free
  3545  001A88  C06C  FFD9         	movff	RTCC_adjust_time_dec@tm,fsr2l
  3546  001A8C  C06D  FFDA         	movff	RTCC_adjust_time_dec@tm+1,fsr2h
  3547  001A90  5022               	movf	?___lmul,w,c
  3548  001A92  5EDE               	subwf	postinc2,f,c
  3549  001A94  5023               	movf	?___lmul+1,w,c
  3550  001A96  5ADE               	subwfb	postinc2,f,c
  3551  001A98  5024               	movf	?___lmul+2,w,c
  3552  001A9A  5ADE               	subwfb	postinc2,f,c
  3553  001A9C  5025               	movf	?___lmul+3,w,c
  3554  001A9E  5ADE               	subwfb	postinc2,f,c
  3555  001AA0  0100               	movlb	0	; () banked
  3556  001AA2  0772               	decf	RTCC_adjust_time_dec@i_1784& (0+255),f,b
  3557  001AA4                     l3258:
  3558                           
  3559                           ; BSR set to: 0
  3560  001AA4  0100               	movlb	0	; () banked
  3561  001AA6  EE20 F009          	lfsr	2,9
  3562  001AAA  516C               	movf	RTCC_adjust_time_dec@tm& (0+255),w,b
  3563  001AAC  26D9               	addwf	fsr2l,f,c
  3564  001AAE  516D               	movf	(RTCC_adjust_time_dec@tm+1)& (0+255),w,b
  3565  001AB0  22DA               	addwfc	fsr2h,f,c
  3566  001AB2  0100               	movlb	0	; () banked
  3567  001AB4  5172               	movf	RTCC_adjust_time_dec@i_1784& (0+255),w,b
  3568  001AB6  5CDE               	subwf	postinc2,w,c
  3569  001AB8  A0D8               	btfss	status,0,c
  3570  001ABA  D7C4               	goto	l3254
  3571  001ABC                     l3260:
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;My_RTCC.c: 321: }
  3575                           ;My_RTCC.c: 322: }
  3576                           ;My_RTCC.c: 324: if (tm->epoch >= 3155760000)tm->epoch += 3155760000;
  3577  001ABC  C06C  FFD9         	movff	RTCC_adjust_time_dec@tm,fsr2l
  3578  001AC0  C06D  FFDA         	movff	RTCC_adjust_time_dec@tm+1,fsr2h
  3579  001AC4  0E80               	movlw	128
  3580  001AC6  5CDE               	subwf	postinc2,w,c
  3581  001AC8  0E13               	movlw	19
  3582  001ACA  58DE               	subwfb	postinc2,w,c
  3583  001ACC  0E19               	movlw	25
  3584  001ACE  58DE               	subwfb	postinc2,w,c
  3585  001AD0  0EBC               	movlw	188
  3586  001AD2  58DE               	subwfb	postinc2,w,c
  3587  001AD4  A0D8               	btfss	status,0,c
  3588  001AD6  D00C               	goto	l3264
  3589                           
  3590                           ; BSR set to: 0
  3591  001AD8  C06C  FFD9         	movff	RTCC_adjust_time_dec@tm,fsr2l
  3592  001ADC  C06D  FFDA         	movff	RTCC_adjust_time_dec@tm+1,fsr2h
  3593  001AE0  0E80               	movlw	128
  3594  001AE2  26DE               	addwf	postinc2,f,c
  3595  001AE4  0E13               	movlw	19
  3596  001AE6  22DE               	addwfc	postinc2,f,c
  3597  001AE8  0E19               	movlw	25
  3598  001AEA  22DE               	addwfc	postinc2,f,c
  3599  001AEC  0EBC               	movlw	188
  3600  001AEE  22DE               	addwfc	postinc2,f,c
  3601  001AF0                     l3264:
  3602                           
  3603                           ; BSR set to: 0
  3604                           ;My_RTCC.c: 325: RTCC_from_epoch(&now);
  3605  001AF0  0E9C               	movlw	low _now
  3606  001AF2  0100               	movlb	0	; () banked
  3607  001AF4  6F6A               	movwf	RTCC_from_epoch@tm& (0+255),b
  3608  001AF6  0E00               	movlw	high _now
  3609  001AF8  0100               	movlb	0	; () banked
  3610  001AFA  6F6B               	movwf	(RTCC_from_epoch@tm+1)& (0+255),b
  3611  001AFC  EC53  F014         	call	_RTCC_from_epoch	;wreg free
  3612                           
  3613                           ;My_RTCC.c: 326: time_change_flag = 1;
  3614  001B00  0E01               	movlw	1
  3615  001B02  0100               	movlb	0	; () banked
  3616  001B04  6F9B               	movwf	_time_change_flag& (0+255),b
  3617                           
  3618                           ; BSR set to: 0
  3619  001B06  0012               	return		;funcret
  3620  001B08                     __end_of_RTCC_adjust_time_dec:
  3621                           	opt stack 0
  3622                           tblptru	equ	0xFF8
  3623                           tblptrh	equ	0xFF7
  3624                           tblptrl	equ	0xFF6
  3625                           tablat	equ	0xFF5
  3626                           prodh	equ	0xFF4
  3627                           prodl	equ	0xFF3
  3628                           intcon	equ	0xFF2
  3629                           intcon2	equ	0xFF1
  3630                           postinc0	equ	0xFEE
  3631                           wreg	equ	0xFE8
  3632                           indf2	equ	0xFDF
  3633                           postinc2	equ	0xFDE
  3634                           postdec2	equ	0xFDD
  3635                           fsr2h	equ	0xFDA
  3636                           fsr2l	equ	0xFD9
  3637                           status	equ	0xFD8
  3638                           
  3639 ;; *************** function _RTCC_from_epoch *****************
  3640 ;; Defined at:
  3641 ;;		line 211 in file "My_RTCC.c"
  3642 ;; Parameters:    Size  Location     Type
  3643 ;;  tm              2   10[BANK0 ] PTR struct .
  3644 ;;		 -> now(14), 
  3645 ;; Auto vars:     Size  Location     Type
  3646 ;;		None
  3647 ;; Return value:  Size  Location     Type
  3648 ;;		None               void
  3649 ;; Registers used:
  3650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3651 ;; Tracked objects:
  3652 ;;		On entry : 0/0
  3653 ;;		On exit  : 0/0
  3654 ;;		Unchanged: 0/0
  3655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3656 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3659 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3660 ;;Total ram usage:        2 bytes
  3661 ;; Hardware stack levels used:    1
  3662 ;; Hardware stack levels required when called:    5
  3663 ;; This function calls:
  3664 ;;		_caltime_to_RTCC
  3665 ;;		_epoch_to_caltime
  3666 ;; This function is called by:
  3667 ;;		_RTCC_init
  3668 ;;		_RTCC_adjust_time_inc
  3669 ;;		_RTCC_adjust_time_dec
  3670 ;; This function uses a non-reentrant model
  3671 ;;
  3672                           
  3673                           	psect	text13
  3674  0028A6                     __ptext13:
  3675                           	opt stack 0
  3676  0028A6                     _RTCC_from_epoch:
  3677                           	opt stack 23
  3678                           
  3679                           ;My_RTCC.c: 212: epoch_to_caltime(tm);
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;incstack = 0
  3683  0028A6  C06A  F036         	movff	RTCC_from_epoch@tm,epoch_to_caltime@tm
  3684  0028AA  C06B  F037         	movff	RTCC_from_epoch@tm+1,epoch_to_caltime@tm+1
  3685  0028AE  EC95  F00E         	call	_epoch_to_caltime	;wreg free
  3686                           
  3687                           ;My_RTCC.c: 213: caltime_to_RTCC(tm);
  3688  0028B2  C06A  F01E         	movff	RTCC_from_epoch@tm,caltime_to_RTCC@tm
  3689  0028B6  C06B  F01F         	movff	RTCC_from_epoch@tm+1,caltime_to_RTCC@tm+1
  3690  0028BA  ECD6  F010         	call	_caltime_to_RTCC	;wreg free
  3691  0028BE  0012               	return		;funcret
  3692  0028C0                     __end_of_RTCC_from_epoch:
  3693                           	opt stack 0
  3694                           tblptru	equ	0xFF8
  3695                           tblptrh	equ	0xFF7
  3696                           tblptrl	equ	0xFF6
  3697                           tablat	equ	0xFF5
  3698                           prodh	equ	0xFF4
  3699                           prodl	equ	0xFF3
  3700                           intcon	equ	0xFF2
  3701                           intcon2	equ	0xFF1
  3702                           postinc0	equ	0xFEE
  3703                           wreg	equ	0xFE8
  3704                           indf2	equ	0xFDF
  3705                           postinc2	equ	0xFDE
  3706                           postdec2	equ	0xFDD
  3707                           fsr2h	equ	0xFDA
  3708                           fsr2l	equ	0xFD9
  3709                           status	equ	0xFD8
  3710                           
  3711 ;; *************** function _epoch_to_caltime *****************
  3712 ;; Defined at:
  3713 ;;		line 126 in file "My_RTCC.c"
  3714 ;; Parameters:    Size  Location     Type
  3715 ;;  tm              2   53[COMRAM] PTR struct .
  3716 ;;		 -> now(14), 
  3717 ;; Auto vars:     Size  Location     Type
  3718 ;;  num             4    6[BANK0 ] unsigned long 
  3719 ;;  day             2    2[BANK0 ] unsigned int 
  3720 ;;  day_since_ep    2    0[BANK0 ] unsigned int 
  3721 ;;  month           1    5[BANK0 ] unsigned char 
  3722 ;;  year            1    4[BANK0 ] unsigned char 
  3723 ;; Return value:  Size  Location     Type
  3724 ;;		None               void
  3725 ;; Registers used:
  3726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3727 ;; Tracked objects:
  3728 ;;		On entry : 0/0
  3729 ;;		On exit  : 0/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3732 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3733 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3734 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3735 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3736 ;;Total ram usage:       14 bytes
  3737 ;; Hardware stack levels used:    1
  3738 ;; Hardware stack levels required when called:    4
  3739 ;; This function calls:
  3740 ;;		_get_quot_rem
  3741 ;;		_month_length
  3742 ;; This function is called by:
  3743 ;;		_RTCC_from_epoch
  3744 ;;		_RTCC_from_caltime
  3745 ;; This function uses a non-reentrant model
  3746 ;;
  3747                           
  3748                           	psect	text14
  3749  001D2A                     __ptext14:
  3750                           	opt stack 0
  3751  001D2A                     _epoch_to_caltime:
  3752                           	opt stack 23
  3753                           
  3754                           ;My_RTCC.c: 129: static uint16_t day_cache = 0;
  3755                           ;My_RTCC.c: 130: static uint8_t month_cache = 1;
  3756                           ;My_RTCC.c: 131: static uint8_t year_cache = 0;
  3757                           ;My_RTCC.c: 132: uint16_t day_since_epoch;
  3758                           ;My_RTCC.c: 133: uint16_t day;
  3759                           ;My_RTCC.c: 134: uint8_t year = 0;
  3760                           
  3761                           ;incstack = 0
  3762  001D2A  0E00               	movlw	0
  3763  001D2C  0100               	movlb	0	; () banked
  3764  001D2E  6F64               	movwf	epoch_to_caltime@year& (0+255),b
  3765                           
  3766                           ;My_RTCC.c: 135: uint8_t month = 1;
  3767  001D30  0E01               	movlw	1
  3768  001D32  0100               	movlb	0	; () banked
  3769  001D34  6F65               	movwf	epoch_to_caltime@month& (0+255),b
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;My_RTCC.c: 136: epoch_t num;
  3773                           ;My_RTCC.c: 138: num = tm->epoch;
  3774  001D36  C036  FFD9         	movff	epoch_to_caltime@tm,fsr2l
  3775  001D3A  C037  FFDA         	movff	epoch_to_caltime@tm+1,fsr2h
  3776  001D3E  CFDE F066          	movff	postinc2,epoch_to_caltime@num
  3777  001D42  CFDE F067          	movff	postinc2,epoch_to_caltime@num+1
  3778  001D46  CFDE F068          	movff	postinc2,epoch_to_caltime@num+2
  3779  001D4A  CFDE F069          	movff	postinc2,epoch_to_caltime@num+3
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;My_RTCC.c: 139: tm->ss = get_quot_rem(&num, 60);
  3783  001D4E  0E66               	movlw	low epoch_to_caltime@num
  3784  001D50  6E2E               	movwf	get_quot_rem@quot,c
  3785  001D52  0E00               	movlw	high epoch_to_caltime@num
  3786  001D54  6E2F               	movwf	get_quot_rem@quot+1,c
  3787  001D56  0E3C               	movlw	60
  3788  001D58  6E30               	movwf	get_quot_rem@div,c
  3789  001D5A  ECE4  F011         	call	_get_quot_rem	;wreg free
  3790  001D5E  EE20 F004          	lfsr	2,4
  3791  001D62  5036               	movf	epoch_to_caltime@tm,w,c
  3792  001D64  26D9               	addwf	fsr2l,f,c
  3793  001D66  5037               	movf	epoch_to_caltime@tm+1,w,c
  3794  001D68  22DA               	addwfc	fsr2h,f,c
  3795  001D6A  C02E  FFDF         	movff	?_get_quot_rem,indf2
  3796                           
  3797                           ;My_RTCC.c: 140: tm->mm = get_quot_rem(&num, 60);
  3798  001D6E  0E66               	movlw	low epoch_to_caltime@num
  3799  001D70  6E2E               	movwf	get_quot_rem@quot,c
  3800  001D72  0E00               	movlw	high epoch_to_caltime@num
  3801  001D74  6E2F               	movwf	get_quot_rem@quot+1,c
  3802  001D76  0E3C               	movlw	60
  3803  001D78  6E30               	movwf	get_quot_rem@div,c
  3804  001D7A  ECE4  F011         	call	_get_quot_rem	;wreg free
  3805  001D7E  EE20 F005          	lfsr	2,5
  3806  001D82  5036               	movf	epoch_to_caltime@tm,w,c
  3807  001D84  26D9               	addwf	fsr2l,f,c
  3808  001D86  5037               	movf	epoch_to_caltime@tm+1,w,c
  3809  001D88  22DA               	addwfc	fsr2h,f,c
  3810  001D8A  C02E  FFDF         	movff	?_get_quot_rem,indf2
  3811                           
  3812                           ;My_RTCC.c: 141: tm->hh = get_quot_rem(&num, 24);
  3813  001D8E  0E66               	movlw	low epoch_to_caltime@num
  3814  001D90  6E2E               	movwf	get_quot_rem@quot,c
  3815  001D92  0E00               	movlw	high epoch_to_caltime@num
  3816  001D94  6E2F               	movwf	get_quot_rem@quot+1,c
  3817  001D96  0E18               	movlw	24
  3818  001D98  6E30               	movwf	get_quot_rem@div,c
  3819  001D9A  ECE4  F011         	call	_get_quot_rem	;wreg free
  3820  001D9E  EE20 F006          	lfsr	2,6
  3821  001DA2  5036               	movf	epoch_to_caltime@tm,w,c
  3822  001DA4  26D9               	addwf	fsr2l,f,c
  3823  001DA6  5037               	movf	epoch_to_caltime@tm+1,w,c
  3824  001DA8  22DA               	addwfc	fsr2h,f,c
  3825  001DAA  C02E  FFDF         	movff	?_get_quot_rem,indf2
  3826                           
  3827                           ;My_RTCC.c: 142: day = num;
  3828  001DAE  C066  F062         	movff	epoch_to_caltime@num,epoch_to_caltime@day
  3829  001DB2  C067  F063         	movff	epoch_to_caltime@num+1,epoch_to_caltime@day+1
  3830                           
  3831                           ;My_RTCC.c: 143: day_since_epoch = day;
  3832  001DB6  C062  F060         	movff	epoch_to_caltime@day,epoch_to_caltime@day_since_epoch
  3833  001DBA  C063  F061         	movff	epoch_to_caltime@day+1,epoch_to_caltime@day_since_epoch+1
  3834                           
  3835                           ;My_RTCC.c: 145: num += 6;
  3836  001DBE  0E06               	movlw	6
  3837  001DC0  0100               	movlb	0	; () banked
  3838  001DC2  2766               	addwf	epoch_to_caltime@num& (0+255),f,b
  3839  001DC4  0E00               	movlw	0
  3840  001DC6  2367               	addwfc	(epoch_to_caltime@num+1)& (0+255),f,b
  3841  001DC8  2368               	addwfc	(epoch_to_caltime@num+2)& (0+255),f,b
  3842  001DCA  2369               	addwfc	(epoch_to_caltime@num+3)& (0+255),f,b
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;My_RTCC.c: 146: tm->EE = get_quot_rem(&num, 7);
  3846  001DCC  0E66               	movlw	low epoch_to_caltime@num
  3847  001DCE  6E2E               	movwf	get_quot_rem@quot,c
  3848  001DD0  0E00               	movlw	high epoch_to_caltime@num
  3849  001DD2  6E2F               	movwf	get_quot_rem@quot+1,c
  3850  001DD4  0E07               	movlw	7
  3851  001DD6  6E30               	movwf	get_quot_rem@div,c
  3852  001DD8  ECE4  F011         	call	_get_quot_rem	;wreg free
  3853  001DDC  EE20 F007          	lfsr	2,7
  3854  001DE0  5036               	movf	epoch_to_caltime@tm,w,c
  3855  001DE2  26D9               	addwf	fsr2l,f,c
  3856  001DE4  5037               	movf	epoch_to_caltime@tm+1,w,c
  3857  001DE6  22DA               	addwfc	fsr2h,f,c
  3858  001DE8  C02E  FFDF         	movff	?_get_quot_rem,indf2
  3859                           
  3860                           ;My_RTCC.c: 155: while (day >= month_length(year, month)) {
  3861  001DEC  D03B               	goto	l3092
  3862  001DEE                     l180:
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;My_RTCC.c: 156: LATB2 = 1;
  3866  001DEE  848A               	bsf	3978,2,c	;volatile
  3867                           
  3868                           ; BSR set to: 0
  3869                           ;My_RTCC.c: 157: day = day - month_length(year, month);
  3870  001DF0  C065  F01B         	movff	epoch_to_caltime@month,month_length@month
  3871  001DF4  0100               	movlb	0	; () banked
  3872  001DF6  5164               	movf	epoch_to_caltime@year& (0+255),w,b
  3873  001DF8  EC91  F011         	call	_month_length
  3874  001DFC  6E38               	movwf	??_epoch_to_caltime& (0+255),c
  3875  001DFE  6A39               	clrf	(??_epoch_to_caltime+1)& (0+255),c
  3876  001E00  1E38               	comf	??_epoch_to_caltime,f,c
  3877  001E02  1E39               	comf	??_epoch_to_caltime+1,f,c
  3878  001E04  4A38               	infsnz	??_epoch_to_caltime,f,c
  3879  001E06  2A39               	incf	??_epoch_to_caltime+1,f,c
  3880  001E08  0100               	movlb	0	; () banked
  3881  001E0A  5162               	movf	epoch_to_caltime@day& (0+255),w,b
  3882  001E0C  2438               	addwf	??_epoch_to_caltime,w,c
  3883  001E0E  0100               	movlb	0	; () banked
  3884  001E10  6F62               	movwf	epoch_to_caltime@day& (0+255),b
  3885  001E12  0100               	movlb	0	; () banked
  3886  001E14  5163               	movf	(epoch_to_caltime@day+1)& (0+255),w,b
  3887  001E16  2039               	addwfc	??_epoch_to_caltime+1,w,c
  3888  001E18  0100               	movlb	0	; () banked
  3889  001E1A  6F63               	movwf	(epoch_to_caltime@day+1)& (0+255),b
  3890                           
  3891                           ; BSR set to: 0
  3892                           ;My_RTCC.c: 158: if (month == 12) {
  3893  001E1C  0E0C               	movlw	12
  3894  001E1E  0100               	movlb	0	; () banked
  3895  001E20  1965               	xorwf	epoch_to_caltime@month& (0+255),w,b
  3896  001E22  A4D8               	btfss	status,2,c
  3897  001E24  D019               	goto	l3086
  3898                           
  3899                           ; BSR set to: 0
  3900                           ;My_RTCC.c: 159: month = 1;
  3901  001E26  0E01               	movlw	1
  3902  001E28  0100               	movlb	0	; () banked
  3903  001E2A  6F65               	movwf	epoch_to_caltime@month& (0+255),b
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;My_RTCC.c: 160: year++;
  3907  001E2C  0100               	movlb	0	; () banked
  3908  001E2E  2B64               	incf	epoch_to_caltime@year& (0+255),f,b
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;My_RTCC.c: 162: if (year >= 100) {
  3912  001E30  0E63               	movlw	99
  3913  001E32  0100               	movlb	0	; () banked
  3914  001E34  6564               	cpfsgt	epoch_to_caltime@year& (0+255),b
  3915  001E36  D012               	goto	l3088
  3916                           
  3917                           ; BSR set to: 0
  3918                           ;My_RTCC.c: 163: tm->epoch -= 3155760000;
  3919  001E38  C036  FFD9         	movff	epoch_to_caltime@tm,fsr2l
  3920  001E3C  C037  FFDA         	movff	epoch_to_caltime@tm+1,fsr2h
  3921  001E40  0E80               	movlw	128
  3922  001E42  5EDE               	subwf	postinc2,f,c
  3923  001E44  0E13               	movlw	19
  3924  001E46  5ADE               	subwfb	postinc2,f,c
  3925  001E48  0E19               	movlw	25
  3926  001E4A  5ADE               	subwfb	postinc2,f,c
  3927  001E4C  0EBC               	movlw	188
  3928  001E4E  5ADE               	subwfb	postinc2,f,c
  3929                           
  3930                           ; BSR set to: 0
  3931                           ;My_RTCC.c: 164: year = 0;
  3932  001E50  0E00               	movlw	0
  3933  001E52  0100               	movlb	0	; () banked
  3934  001E54  6F64               	movwf	epoch_to_caltime@year& (0+255),b
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;My_RTCC.c: 165: }
  3938                           ;My_RTCC.c: 166: } else {
  3939  001E56  D002               	goto	l3088
  3940  001E58                     l3086:
  3941                           
  3942                           ; BSR set to: 0
  3943                           ;My_RTCC.c: 167: month++;
  3944  001E58  0100               	movlb	0	; () banked
  3945  001E5A  2B65               	incf	epoch_to_caltime@month& (0+255),f,b
  3946  001E5C                     l3088:
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;My_RTCC.c: 168: }
  3950                           ;My_RTCC.c: 169: month_cache = month;
  3951  001E5C  C065  F04A         	movff	epoch_to_caltime@month,epoch_to_caltime@month_cache
  3952                           
  3953                           ; BSR set to: 0
  3954                           ;My_RTCC.c: 170: year_cache = year;
  3955  001E60  C064  F03D         	movff	epoch_to_caltime@year,epoch_to_caltime@year_cache
  3956  001E64                     l3092:
  3957  001E64  C065  F01B         	movff	epoch_to_caltime@month,month_length@month
  3958  001E68  0100               	movlb	0	; () banked
  3959  001E6A  5164               	movf	epoch_to_caltime@year& (0+255),w,b
  3960  001E6C  EC91  F011         	call	_month_length
  3961  001E70  6E38               	movwf	??_epoch_to_caltime& (0+255),c
  3962  001E72  5038               	movf	??_epoch_to_caltime,w,c
  3963  001E74  0100               	movlb	0	; () banked
  3964  001E76  5D62               	subwf	epoch_to_caltime@day& (0+255),w,b
  3965  001E78  0E00               	movlw	0
  3966  001E7A  5963               	subwfb	(epoch_to_caltime@day+1)& (0+255),w,b
  3967  001E7C  B0D8               	btfsc	status,0,c
  3968  001E7E  D7B7               	goto	l180
  3969                           
  3970                           ; BSR set to: 0
  3971                           ;My_RTCC.c: 171: }
  3972                           ;My_RTCC.c: 172: day_cache = day_since_epoch - day;
  3973                           
  3974                           ; BSR set to: 0
  3975  001E80  C062  F038         	movff	epoch_to_caltime@day,??_epoch_to_caltime
  3976  001E84  C063  F039         	movff	epoch_to_caltime@day+1,??_epoch_to_caltime+1
  3977  001E88  1E38               	comf	??_epoch_to_caltime,f,c
  3978  001E8A  1E39               	comf	??_epoch_to_caltime+1,f,c
  3979  001E8C  4A38               	infsnz	??_epoch_to_caltime,f,c
  3980  001E8E  2A39               	incf	??_epoch_to_caltime+1,f,c
  3981  001E90  0100               	movlb	0	; () banked
  3982  001E92  5160               	movf	epoch_to_caltime@day_since_epoch& (0+255),w,b
  3983  001E94  2438               	addwf	??_epoch_to_caltime,w,c
  3984  001E96  6E3A               	movwf	epoch_to_caltime@day_cache,c
  3985  001E98  0100               	movlb	0	; () banked
  3986  001E9A  5161               	movf	(epoch_to_caltime@day_since_epoch+1)& (0+255),w,b
  3987  001E9C  2039               	addwfc	??_epoch_to_caltime+1,w,c
  3988  001E9E  6E3B               	movwf	epoch_to_caltime@day_cache+1,c
  3989                           
  3990                           ; BSR set to: 0
  3991                           ;My_RTCC.c: 173: day++;
  3992  001EA0  0100               	movlb	0	; () banked
  3993  001EA2  4B62               	infsnz	epoch_to_caltime@day& (0+255),f,b
  3994  001EA4  2B63               	incf	(epoch_to_caltime@day+1)& (0+255),f,b
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;My_RTCC.c: 175: tm->YY = year;
  3998  001EA6  EE20 F00A          	lfsr	2,10
  3999  001EAA  5036               	movf	epoch_to_caltime@tm,w,c
  4000  001EAC  26D9               	addwf	fsr2l,f,c
  4001  001EAE  5037               	movf	epoch_to_caltime@tm+1,w,c
  4002  001EB0  22DA               	addwfc	fsr2h,f,c
  4003  001EB2  C064  FFDF         	movff	epoch_to_caltime@year,indf2
  4004                           
  4005                           ; BSR set to: 0
  4006                           ;My_RTCC.c: 176: tm->MM = month;
  4007  001EB6  EE20 F009          	lfsr	2,9
  4008  001EBA  5036               	movf	epoch_to_caltime@tm,w,c
  4009  001EBC  26D9               	addwf	fsr2l,f,c
  4010  001EBE  5037               	movf	epoch_to_caltime@tm+1,w,c
  4011  001EC0  22DA               	addwfc	fsr2h,f,c
  4012  001EC2  C065  FFDF         	movff	epoch_to_caltime@month,indf2
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;My_RTCC.c: 177: tm->DD = day;
  4016  001EC6  EE20 F008          	lfsr	2,8
  4017  001ECA  5036               	movf	epoch_to_caltime@tm,w,c
  4018  001ECC  26D9               	addwf	fsr2l,f,c
  4019  001ECE  5037               	movf	epoch_to_caltime@tm+1,w,c
  4020  001ED0  22DA               	addwfc	fsr2h,f,c
  4021  001ED2  C062  FFDF         	movff	epoch_to_caltime@day,indf2
  4022                           
  4023                           ; BSR set to: 0
  4024  001ED6  0012               	return		;funcret
  4025  001ED8                     __end_of_epoch_to_caltime:
  4026                           	opt stack 0
  4027                           tblptru	equ	0xFF8
  4028                           tblptrh	equ	0xFF7
  4029                           tblptrl	equ	0xFF6
  4030                           tablat	equ	0xFF5
  4031                           prodh	equ	0xFF4
  4032                           prodl	equ	0xFF3
  4033                           intcon	equ	0xFF2
  4034                           intcon2	equ	0xFF1
  4035                           postinc0	equ	0xFEE
  4036                           wreg	equ	0xFE8
  4037                           indf2	equ	0xFDF
  4038                           postinc2	equ	0xFDE
  4039                           postdec2	equ	0xFDD
  4040                           fsr2h	equ	0xFDA
  4041                           fsr2l	equ	0xFD9
  4042                           status	equ	0xFD8
  4043                           
  4044 ;; *************** function _get_quot_rem *****************
  4045 ;; Defined at:
  4046 ;;		line 81 in file "My_RTCC.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;  quot            2   45[COMRAM] PTR unsigned long 
  4049 ;;		 -> epoch_to_caltime@num(4), 
  4050 ;;  div             1   47[COMRAM] unsigned char 
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;  num             4   49[COMRAM] unsigned long 
  4053 ;; Return value:  Size  Location     Type
  4054 ;;                  4   45[COMRAM] unsigned long 
  4055 ;; Registers used:
  4056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4057 ;; Tracked objects:
  4058 ;;		On entry : 0/0
  4059 ;;		On exit  : 0/0
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4062 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4063 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4065 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4066 ;;Total ram usage:        8 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; Hardware stack levels required when called:    3
  4069 ;; This function calls:
  4070 ;;		___lldiv
  4071 ;;		___lmul
  4072 ;; This function is called by:
  4073 ;;		_epoch_to_caltime
  4074 ;; This function uses a non-reentrant model
  4075 ;;
  4076                           
  4077                           	psect	text15
  4078  0023C8                     __ptext15:
  4079                           	opt stack 0
  4080  0023C8                     _get_quot_rem:
  4081                           	opt stack 23
  4082                           
  4083                           ;My_RTCC.c: 84: epoch_t num = *quot;
  4084                           
  4085                           ; BSR set to: 0
  4086                           ;incstack = 0
  4087  0023C8  C02E  FFD9         	movff	get_quot_rem@quot,fsr2l
  4088  0023CC  C02F  FFDA         	movff	get_quot_rem@quot+1,fsr2h
  4089  0023D0  CFDE F032          	movff	postinc2,get_quot_rem@num
  4090  0023D4  CFDE F033          	movff	postinc2,get_quot_rem@num+1
  4091  0023D8  CFDE F034          	movff	postinc2,get_quot_rem@num+2
  4092  0023DC  CFDE F035          	movff	postinc2,get_quot_rem@num+3
  4093                           
  4094                           ;My_RTCC.c: 85: return num - (*quot = num / div) * div;
  4095  0023E0  5030               	movf	get_quot_rem@div,w,c
  4096  0023E2  6E19               	movwf	___lldiv@divisor,c
  4097  0023E4  6A1A               	clrf	___lldiv@divisor+1,c
  4098  0023E6  6A1B               	clrf	___lldiv@divisor+2,c
  4099  0023E8  6A1C               	clrf	___lldiv@divisor+3,c
  4100  0023EA  C032  F015         	movff	get_quot_rem@num,___lldiv@dividend
  4101  0023EE  C033  F016         	movff	get_quot_rem@num+1,___lldiv@dividend+1
  4102  0023F2  C034  F017         	movff	get_quot_rem@num+2,___lldiv@dividend+2
  4103  0023F6  C035  F018         	movff	get_quot_rem@num+3,___lldiv@dividend+3
  4104  0023FA  EC74  F012         	call	___lldiv	;wreg free
  4105  0023FE  C02E  FFD9         	movff	get_quot_rem@quot,fsr2l
  4106  002402  C02F  FFDA         	movff	get_quot_rem@quot+1,fsr2h
  4107  002406  C015  FFDE         	movff	?___lldiv,postinc2
  4108  00240A  C016  FFDE         	movff	?___lldiv+1,postinc2
  4109  00240E  C017  FFDE         	movff	?___lldiv+2,postinc2
  4110  002412  C018  FFDD         	movff	?___lldiv+3,postdec2
  4111  002416  52DD               	movf	postdec2,f,c
  4112  002418  52DD               	movf	postdec2,f,c
  4113  00241A  CFDE F022          	movff	postinc2,___lmul@multiplier
  4114  00241E  CFDE F023          	movff	postinc2,___lmul@multiplier+1
  4115  002422  CFDE F024          	movff	postinc2,___lmul@multiplier+2
  4116  002426  CFDE F025          	movff	postinc2,___lmul@multiplier+3
  4117  00242A  5030               	movf	get_quot_rem@div,w,c
  4118  00242C  6E26               	movwf	___lmul@multiplicand,c
  4119  00242E  6A27               	clrf	___lmul@multiplicand+1,c
  4120  002430  6A28               	clrf	___lmul@multiplicand+2,c
  4121  002432  6A29               	clrf	___lmul@multiplicand+3,c
  4122  002434  EC5E  F013         	call	___lmul	;wreg free
  4123  002438  1E22               	comf	?___lmul,f,c
  4124  00243A  1E23               	comf	?___lmul+1,f,c
  4125  00243C  1E24               	comf	?___lmul+2,f,c
  4126  00243E  1E25               	comf	?___lmul+3,f,c
  4127  002440  2A22               	incf	?___lmul,f,c
  4128  002442  0E00               	movlw	0
  4129  002444  2223               	addwfc	?___lmul+1,f,c
  4130  002446  2224               	addwfc	?___lmul+2,f,c
  4131  002448  2225               	addwfc	?___lmul+3,f,c
  4132  00244A  5032               	movf	get_quot_rem@num,w,c
  4133  00244C  2422               	addwf	?___lmul,w,c
  4134  00244E  6E2E               	movwf	?_get_quot_rem,c
  4135  002450  5033               	movf	get_quot_rem@num+1,w,c
  4136  002452  2023               	addwfc	?___lmul+1,w,c
  4137  002454  6E2F               	movwf	?_get_quot_rem+1,c
  4138  002456  5034               	movf	get_quot_rem@num+2,w,c
  4139  002458  2024               	addwfc	?___lmul+2,w,c
  4140  00245A  6E30               	movwf	?_get_quot_rem+2,c
  4141  00245C  5035               	movf	get_quot_rem@num+3,w,c
  4142  00245E  2025               	addwfc	?___lmul+3,w,c
  4143  002460  6E31               	movwf	?_get_quot_rem+3,c
  4144  002462  0012               	return	
  4145  002464                     __end_of_get_quot_rem:
  4146                           	opt stack 0
  4147                           tblptru	equ	0xFF8
  4148                           tblptrh	equ	0xFF7
  4149                           tblptrl	equ	0xFF6
  4150                           tablat	equ	0xFF5
  4151                           prodh	equ	0xFF4
  4152                           prodl	equ	0xFF3
  4153                           intcon	equ	0xFF2
  4154                           intcon2	equ	0xFF1
  4155                           postinc0	equ	0xFEE
  4156                           wreg	equ	0xFE8
  4157                           indf2	equ	0xFDF
  4158                           postinc2	equ	0xFDE
  4159                           postdec2	equ	0xFDD
  4160                           fsr2h	equ	0xFDA
  4161                           fsr2l	equ	0xFD9
  4162                           status	equ	0xFD8
  4163                           
  4164 ;; *************** function ___lldiv *****************
  4165 ;; Defined at:
  4166 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lldiv.c"
  4167 ;; Parameters:    Size  Location     Type
  4168 ;;  dividend        4   20[COMRAM] unsigned long 
  4169 ;;  divisor         4   24[COMRAM] unsigned long 
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;  quotient        4   28[COMRAM] unsigned long 
  4172 ;;  counter         1   32[COMRAM] unsigned char 
  4173 ;; Return value:  Size  Location     Type
  4174 ;;                  4   20[COMRAM] unsigned long 
  4175 ;; Registers used:
  4176 ;;		wreg, status,2, status,0
  4177 ;; Tracked objects:
  4178 ;;		On entry : 0/0
  4179 ;;		On exit  : 0/0
  4180 ;;		Unchanged: 0/0
  4181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4182 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4183 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4185 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4186 ;;Total ram usage:       13 bytes
  4187 ;; Hardware stack levels used:    1
  4188 ;; Hardware stack levels required when called:    2
  4189 ;; This function calls:
  4190 ;;		Nothing
  4191 ;; This function is called by:
  4192 ;;		_get_quot_rem
  4193 ;; This function uses a non-reentrant model
  4194 ;;
  4195                           
  4196                           	psect	text16
  4197  0024E8                     __ptext16:
  4198                           	opt stack 0
  4199  0024E8                     ___lldiv:
  4200                           	opt stack 23
  4201                           
  4202                           ;incstack = 0
  4203  0024E8  0E00               	movlw	0
  4204  0024EA  6E1D               	movwf	___lldiv@quotient,c
  4205  0024EC  0E00               	movlw	0
  4206  0024EE  6E1E               	movwf	___lldiv@quotient+1,c
  4207  0024F0  0E00               	movlw	0
  4208  0024F2  6E1F               	movwf	___lldiv@quotient+2,c
  4209  0024F4  0E00               	movlw	0
  4210  0024F6  6E20               	movwf	___lldiv@quotient+3,c
  4211  0024F8  5019               	movf	___lldiv@divisor,w,c
  4212  0024FA  101A               	iorwf	___lldiv@divisor+1,w,c
  4213  0024FC  101B               	iorwf	___lldiv@divisor+2,w,c
  4214  0024FE  101C               	iorwf	___lldiv@divisor+3,w,c
  4215  002500  B4D8               	btfsc	status,2,c
  4216  002502  D02A               	goto	l735
  4217  002504  0E01               	movlw	1
  4218  002506  6E21               	movwf	___lldiv@counter,c
  4219  002508  D006               	goto	l2978
  4220  00250A                     l2976:
  4221  00250A  90D8               	bcf	status,0,c
  4222  00250C  3619               	rlcf	___lldiv@divisor,f,c
  4223  00250E  361A               	rlcf	___lldiv@divisor+1,f,c
  4224  002510  361B               	rlcf	___lldiv@divisor+2,f,c
  4225  002512  361C               	rlcf	___lldiv@divisor+3,f,c
  4226  002514  2A21               	incf	___lldiv@counter,f,c
  4227  002516                     l2978:
  4228  002516  AE1C               	btfss	___lldiv@divisor+3,7,c
  4229  002518  D7F8               	goto	l2976
  4230  00251A                     l2980:
  4231  00251A  90D8               	bcf	status,0,c
  4232  00251C  361D               	rlcf	___lldiv@quotient,f,c
  4233  00251E  361E               	rlcf	___lldiv@quotient+1,f,c
  4234  002520  361F               	rlcf	___lldiv@quotient+2,f,c
  4235  002522  3620               	rlcf	___lldiv@quotient+3,f,c
  4236  002524  5019               	movf	___lldiv@divisor,w,c
  4237  002526  5C15               	subwf	___lldiv@dividend,w,c
  4238  002528  501A               	movf	___lldiv@divisor+1,w,c
  4239  00252A  5816               	subwfb	___lldiv@dividend+1,w,c
  4240  00252C  501B               	movf	___lldiv@divisor+2,w,c
  4241  00252E  5817               	subwfb	___lldiv@dividend+2,w,c
  4242  002530  501C               	movf	___lldiv@divisor+3,w,c
  4243  002532  5818               	subwfb	___lldiv@dividend+3,w,c
  4244  002534  A0D8               	btfss	status,0,c
  4245  002536  D009               	goto	l2988
  4246  002538  5019               	movf	___lldiv@divisor,w,c
  4247  00253A  5E15               	subwf	___lldiv@dividend,f,c
  4248  00253C  501A               	movf	___lldiv@divisor+1,w,c
  4249  00253E  5A16               	subwfb	___lldiv@dividend+1,f,c
  4250  002540  501B               	movf	___lldiv@divisor+2,w,c
  4251  002542  5A17               	subwfb	___lldiv@dividend+2,f,c
  4252  002544  501C               	movf	___lldiv@divisor+3,w,c
  4253  002546  5A18               	subwfb	___lldiv@dividend+3,f,c
  4254  002548  801D               	bsf	___lldiv@quotient,0,c
  4255  00254A                     l2988:
  4256  00254A  90D8               	bcf	status,0,c
  4257  00254C  321C               	rrcf	___lldiv@divisor+3,f,c
  4258  00254E  321B               	rrcf	___lldiv@divisor+2,f,c
  4259  002550  321A               	rrcf	___lldiv@divisor+1,f,c
  4260  002552  3219               	rrcf	___lldiv@divisor,f,c
  4261  002554  2E21               	decfsz	___lldiv@counter,f,c
  4262  002556  D7E1               	goto	l2980
  4263  002558                     l735:
  4264  002558  C01D  F015         	movff	___lldiv@quotient,?___lldiv
  4265  00255C  C01E  F016         	movff	___lldiv@quotient+1,?___lldiv+1
  4266  002560  C01F  F017         	movff	___lldiv@quotient+2,?___lldiv+2
  4267  002564  C020  F018         	movff	___lldiv@quotient+3,?___lldiv+3
  4268  002568  0012               	return		;funcret
  4269  00256A                     __end_of___lldiv:
  4270                           	opt stack 0
  4271                           tblptru	equ	0xFF8
  4272                           tblptrh	equ	0xFF7
  4273                           tblptrl	equ	0xFF6
  4274                           tablat	equ	0xFF5
  4275                           prodh	equ	0xFF4
  4276                           prodl	equ	0xFF3
  4277                           intcon	equ	0xFF2
  4278                           intcon2	equ	0xFF1
  4279                           postinc0	equ	0xFEE
  4280                           wreg	equ	0xFE8
  4281                           indf2	equ	0xFDF
  4282                           postinc2	equ	0xFDE
  4283                           postdec2	equ	0xFDD
  4284                           fsr2h	equ	0xFDA
  4285                           fsr2l	equ	0xFD9
  4286                           status	equ	0xFD8
  4287                           
  4288 ;; *************** function _caltime_to_RTCC *****************
  4289 ;; Defined at:
  4290 ;;		line 106 in file "My_RTCC.c"
  4291 ;; Parameters:    Size  Location     Type
  4292 ;;  tm              2   29[COMRAM] PTR struct .
  4293 ;;		 -> now(14), 
  4294 ;; Auto vars:     Size  Location     Type
  4295 ;;		None
  4296 ;; Return value:  Size  Location     Type
  4297 ;;		None               void
  4298 ;; Registers used:
  4299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4300 ;; Tracked objects:
  4301 ;;		On entry : 0/0
  4302 ;;		On exit  : 0/0
  4303 ;;		Unchanged: 0/0
  4304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4305 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4308 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4309 ;;Total ram usage:        2 bytes
  4310 ;; Hardware stack levels used:    1
  4311 ;; Hardware stack levels required when called:    4
  4312 ;; This function calls:
  4313 ;;		_d_to_x
  4314 ;; This function is called by:
  4315 ;;		_RTCC_from_epoch
  4316 ;;		_RTCC_from_caltime
  4317 ;; This function uses a non-reentrant model
  4318 ;;
  4319                           
  4320                           	psect	text17
  4321  0021AC                     __ptext17:
  4322                           	opt stack 0
  4323  0021AC                     _caltime_to_RTCC:
  4324                           	opt stack 23
  4325  0021AC                     l167:
  4326  0021AC  010F               	movlb	15	; () banked
  4327  0021AE  B93F               	btfsc	63,4,b	;volatile
  4328  0021B0  D7FD               	goto	l167
  4329                           
  4330                           ; BSR set to: 15
  4331                           ;My_RTCC.c: 108: RTCCFGbits.RTCPTR0 = 1;
  4332  0021B2  010F               	movlb	15	; () banked
  4333  0021B4  813F               	bsf	63,0,b	;volatile
  4334                           
  4335                           ;My_RTCC.c: 109: RTCCFGbits.RTCPTR1 = 1;
  4336  0021B6  010F               	movlb	15	; () banked
  4337  0021B8  833F               	bsf	63,1,b	;volatile
  4338                           
  4339                           ; BSR set to: 15
  4340                           ;My_RTCC.c: 110: RTCVALL = d_to_x(tm->YY);
  4341  0021BA  EE20 F00A          	lfsr	2,10
  4342  0021BE  501E               	movf	caltime_to_RTCC@tm,w,c
  4343  0021C0  26D9               	addwf	fsr2l,f,c
  4344  0021C2  501F               	movf	caltime_to_RTCC@tm+1,w,c
  4345  0021C4  22DA               	addwfc	fsr2h,f,c
  4346  0021C6  50DF               	movf	indf2,w,c
  4347  0021C8  EC44  F014         	call	_d_to_x
  4348  0021CC  010F               	movlb	15	; () banked
  4349  0021CE  6F3A               	movwf	58,b	;volatile
  4350                           
  4351                           ; BSR set to: 15
  4352                           ;My_RTCC.c: 111: RTCVALH = 0x00;
  4353  0021D0  0E00               	movlw	0
  4354  0021D2  010F               	movlb	15	; () banked
  4355  0021D4  6F3B               	movwf	59,b	;volatile
  4356                           
  4357                           ; BSR set to: 15
  4358                           ;My_RTCC.c: 112: RTCCFGbits.RTCPTR0 = 0;
  4359  0021D6  010F               	movlb	15	; () banked
  4360  0021D8  913F               	bcf	63,0,b	;volatile
  4361                           
  4362                           ; BSR set to: 15
  4363                           ;My_RTCC.c: 113: RTCCFGbits.RTCPTR1 = 1;
  4364  0021DA  010F               	movlb	15	; () banked
  4365  0021DC  833F               	bsf	63,1,b	;volatile
  4366                           
  4367                           ; BSR set to: 15
  4368                           ;My_RTCC.c: 114: RTCVALL = d_to_x(tm->DD);
  4369  0021DE  EE20 F008          	lfsr	2,8
  4370  0021E2  501E               	movf	caltime_to_RTCC@tm,w,c
  4371  0021E4  26D9               	addwf	fsr2l,f,c
  4372  0021E6  501F               	movf	caltime_to_RTCC@tm+1,w,c
  4373  0021E8  22DA               	addwfc	fsr2h,f,c
  4374  0021EA  50DF               	movf	indf2,w,c
  4375  0021EC  EC44  F014         	call	_d_to_x
  4376  0021F0  010F               	movlb	15	; () banked
  4377  0021F2  6F3A               	movwf	58,b	;volatile
  4378                           
  4379                           ; BSR set to: 15
  4380                           ;My_RTCC.c: 115: RTCVALH = d_to_x(tm->MM);
  4381  0021F4  EE20 F009          	lfsr	2,9
  4382  0021F8  501E               	movf	caltime_to_RTCC@tm,w,c
  4383  0021FA  26D9               	addwf	fsr2l,f,c
  4384  0021FC  501F               	movf	caltime_to_RTCC@tm+1,w,c
  4385  0021FE  22DA               	addwfc	fsr2h,f,c
  4386  002200  50DF               	movf	indf2,w,c
  4387  002202  EC44  F014         	call	_d_to_x
  4388  002206  010F               	movlb	15	; () banked
  4389  002208  6F3B               	movwf	59,b	;volatile
  4390                           
  4391                           ; BSR set to: 15
  4392                           ;My_RTCC.c: 116: RTCCFGbits.RTCPTR0 = 1;
  4393  00220A  010F               	movlb	15	; () banked
  4394  00220C  813F               	bsf	63,0,b	;volatile
  4395                           
  4396                           ; BSR set to: 15
  4397                           ;My_RTCC.c: 117: RTCCFGbits.RTCPTR1 = 0;
  4398  00220E  010F               	movlb	15	; () banked
  4399  002210  933F               	bcf	63,1,b	;volatile
  4400                           
  4401                           ; BSR set to: 15
  4402                           ;My_RTCC.c: 118: RTCVALL = d_to_x(tm->hh);
  4403  002212  EE20 F006          	lfsr	2,6
  4404  002216  501E               	movf	caltime_to_RTCC@tm,w,c
  4405  002218  26D9               	addwf	fsr2l,f,c
  4406  00221A  501F               	movf	caltime_to_RTCC@tm+1,w,c
  4407  00221C  22DA               	addwfc	fsr2h,f,c
  4408  00221E  50DF               	movf	indf2,w,c
  4409  002220  EC44  F014         	call	_d_to_x
  4410  002224  010F               	movlb	15	; () banked
  4411  002226  6F3A               	movwf	58,b	;volatile
  4412                           
  4413                           ; BSR set to: 15
  4414                           ;My_RTCC.c: 119: RTCVALH = d_to_x(tm->EE);
  4415  002228  EE20 F007          	lfsr	2,7
  4416  00222C  501E               	movf	caltime_to_RTCC@tm,w,c
  4417  00222E  26D9               	addwf	fsr2l,f,c
  4418  002230  501F               	movf	caltime_to_RTCC@tm+1,w,c
  4419  002232  22DA               	addwfc	fsr2h,f,c
  4420  002234  50DF               	movf	indf2,w,c
  4421  002236  EC44  F014         	call	_d_to_x
  4422  00223A  010F               	movlb	15	; () banked
  4423  00223C  6F3B               	movwf	59,b	;volatile
  4424                           
  4425                           ; BSR set to: 15
  4426                           ;My_RTCC.c: 120: RTCCFGbits.RTCPTR0 = 0;
  4427  00223E  010F               	movlb	15	; () banked
  4428  002240  913F               	bcf	63,0,b	;volatile
  4429                           
  4430                           ; BSR set to: 15
  4431                           ;My_RTCC.c: 121: RTCCFGbits.RTCPTR1 = 0;
  4432  002242  010F               	movlb	15	; () banked
  4433  002244  933F               	bcf	63,1,b	;volatile
  4434                           
  4435                           ; BSR set to: 15
  4436                           ;My_RTCC.c: 122: RTCVALL = d_to_x(tm->ss);
  4437  002246  EE20 F004          	lfsr	2,4
  4438  00224A  501E               	movf	caltime_to_RTCC@tm,w,c
  4439  00224C  26D9               	addwf	fsr2l,f,c
  4440  00224E  501F               	movf	caltime_to_RTCC@tm+1,w,c
  4441  002250  22DA               	addwfc	fsr2h,f,c
  4442  002252  50DF               	movf	indf2,w,c
  4443  002254  EC44  F014         	call	_d_to_x
  4444  002258  010F               	movlb	15	; () banked
  4445  00225A  6F3A               	movwf	58,b	;volatile
  4446                           
  4447                           ; BSR set to: 15
  4448                           ;My_RTCC.c: 123: RTCVALH = d_to_x(tm->mm);
  4449  00225C  EE20 F005          	lfsr	2,5
  4450  002260  501E               	movf	caltime_to_RTCC@tm,w,c
  4451  002262  26D9               	addwf	fsr2l,f,c
  4452  002264  501F               	movf	caltime_to_RTCC@tm+1,w,c
  4453  002266  22DA               	addwfc	fsr2h,f,c
  4454  002268  50DF               	movf	indf2,w,c
  4455  00226A  EC44  F014         	call	_d_to_x
  4456  00226E  010F               	movlb	15	; () banked
  4457  002270  6F3B               	movwf	59,b	;volatile
  4458                           
  4459                           ; BSR set to: 15
  4460  002272  0012               	return		;funcret
  4461  002274                     __end_of_caltime_to_RTCC:
  4462                           	opt stack 0
  4463                           tblptru	equ	0xFF8
  4464                           tblptrh	equ	0xFF7
  4465                           tblptrl	equ	0xFF6
  4466                           tablat	equ	0xFF5
  4467                           prodh	equ	0xFF4
  4468                           prodl	equ	0xFF3
  4469                           intcon	equ	0xFF2
  4470                           intcon2	equ	0xFF1
  4471                           postinc0	equ	0xFEE
  4472                           wreg	equ	0xFE8
  4473                           indf2	equ	0xFDF
  4474                           postinc2	equ	0xFDE
  4475                           postdec2	equ	0xFDD
  4476                           fsr2h	equ	0xFDA
  4477                           fsr2l	equ	0xFD9
  4478                           status	equ	0xFD8
  4479                           
  4480 ;; *************** function _d_to_x *****************
  4481 ;; Defined at:
  4482 ;;		line 46 in file "My_RTCC.c"
  4483 ;; Parameters:    Size  Location     Type
  4484 ;;  dec             1    wreg     unsigned char 
  4485 ;; Auto vars:     Size  Location     Type
  4486 ;;  dec             1   28[COMRAM] unsigned char 
  4487 ;; Return value:  Size  Location     Type
  4488 ;;                  1    wreg      unsigned char 
  4489 ;; Registers used:
  4490 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4491 ;; Tracked objects:
  4492 ;;		On entry : 0/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4497 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4499 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4500 ;;Total ram usage:        1 bytes
  4501 ;; Hardware stack levels used:    1
  4502 ;; Hardware stack levels required when called:    3
  4503 ;; This function calls:
  4504 ;;		___awdiv
  4505 ;; This function is called by:
  4506 ;;		_caltime_to_RTCC
  4507 ;; This function uses a non-reentrant model
  4508 ;;
  4509                           
  4510                           	psect	text18
  4511  002888                     __ptext18:
  4512                           	opt stack 0
  4513  002888                     _d_to_x:
  4514                           	opt stack 23
  4515                           
  4516                           ; BSR set to: 15
  4517                           ;incstack = 0
  4518                           ;d_to_x@dec stored from wreg
  4519  002888  6E1D               	movwf	d_to_x@dec,c
  4520                           
  4521                           ;My_RTCC.c: 49: return dec / 10 * 6 + dec;
  4522  00288A  C01D  F015         	movff	d_to_x@dec,___awdiv@dividend
  4523  00288E  6A16               	clrf	___awdiv@dividend+1,c
  4524  002890  0E00               	movlw	0
  4525  002892  6E18               	movwf	___awdiv@divisor+1,c
  4526  002894  0E0A               	movlw	10
  4527  002896  6E17               	movwf	___awdiv@divisor,c
  4528  002898  EC32  F012         	call	___awdiv	;wreg free
  4529  00289C  5015               	movf	?___awdiv,w,c
  4530  00289E  0D06               	mullw	6
  4531  0028A0  50F3               	movf	prodl,w,c
  4532  0028A2  241D               	addwf	d_to_x@dec,w,c
  4533  0028A4  0012               	return	
  4534  0028A6                     __end_of_d_to_x:
  4535                           	opt stack 0
  4536                           tblptru	equ	0xFF8
  4537                           tblptrh	equ	0xFF7
  4538                           tblptrl	equ	0xFF6
  4539                           tablat	equ	0xFF5
  4540                           prodh	equ	0xFF4
  4541                           prodl	equ	0xFF3
  4542                           intcon	equ	0xFF2
  4543                           intcon2	equ	0xFF1
  4544                           postinc0	equ	0xFEE
  4545                           wreg	equ	0xFE8
  4546                           indf2	equ	0xFDF
  4547                           postinc2	equ	0xFDE
  4548                           postdec2	equ	0xFDD
  4549                           fsr2h	equ	0xFDA
  4550                           fsr2l	equ	0xFD9
  4551                           status	equ	0xFD8
  4552                           
  4553 ;; *************** function ___awdiv *****************
  4554 ;; Defined at:
  4555 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;  dividend        2   20[COMRAM] int 
  4558 ;;  divisor         2   22[COMRAM] int 
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;  quotient        2   26[COMRAM] int 
  4561 ;;  sign            1   25[COMRAM] unsigned char 
  4562 ;;  counter         1   24[COMRAM] unsigned char 
  4563 ;; Return value:  Size  Location     Type
  4564 ;;                  2   20[COMRAM] int 
  4565 ;; Registers used:
  4566 ;;		wreg, status,2, status,0
  4567 ;; Tracked objects:
  4568 ;;		On entry : 0/0
  4569 ;;		On exit  : 0/0
  4570 ;;		Unchanged: 0/0
  4571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4572 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4573 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4575 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4576 ;;Total ram usage:        8 bytes
  4577 ;; Hardware stack levels used:    1
  4578 ;; Hardware stack levels required when called:    2
  4579 ;; This function calls:
  4580 ;;		Nothing
  4581 ;; This function is called by:
  4582 ;;		_d_to_x
  4583 ;; This function uses a non-reentrant model
  4584 ;;
  4585                           
  4586                           	psect	text19
  4587  002464                     __ptext19:
  4588                           	opt stack 0
  4589  002464                     ___awdiv:
  4590                           	opt stack 23
  4591                           
  4592                           ;incstack = 0
  4593  002464  0E00               	movlw	0
  4594  002466  6E1A               	movwf	___awdiv@sign,c
  4595  002468  AE18               	btfss	___awdiv@divisor+1,7,c
  4596  00246A  D006               	goto	l2898
  4597  00246C  6C17               	negf	___awdiv@divisor,c
  4598  00246E  1E18               	comf	___awdiv@divisor+1,f,c
  4599  002470  B0D8               	btfsc	status,0,c
  4600  002472  2A18               	incf	___awdiv@divisor+1,f,c
  4601  002474  0E01               	movlw	1
  4602  002476  6E1A               	movwf	___awdiv@sign,c
  4603  002478                     l2898:
  4604  002478  AE16               	btfss	___awdiv@dividend+1,7,c
  4605  00247A  D006               	goto	l2904
  4606  00247C  6C15               	negf	___awdiv@dividend,c
  4607  00247E  1E16               	comf	___awdiv@dividend+1,f,c
  4608  002480  B0D8               	btfsc	status,0,c
  4609  002482  2A16               	incf	___awdiv@dividend+1,f,c
  4610  002484  0E01               	movlw	1
  4611  002486  1A1A               	xorwf	___awdiv@sign,f,c
  4612  002488                     l2904:
  4613  002488  0E00               	movlw	0
  4614  00248A  6E1C               	movwf	___awdiv@quotient+1,c
  4615  00248C  0E00               	movlw	0
  4616  00248E  6E1B               	movwf	___awdiv@quotient,c
  4617  002490  5017               	movf	___awdiv@divisor,w,c
  4618  002492  1018               	iorwf	___awdiv@divisor+1,w,c
  4619  002494  B4D8               	btfsc	status,2,c
  4620  002496  D01C               	goto	l2926
  4621  002498  0E01               	movlw	1
  4622  00249A  6E19               	movwf	___awdiv@counter,c
  4623  00249C  D004               	goto	l2912
  4624  00249E                     l2910:
  4625  00249E  90D8               	bcf	status,0,c
  4626  0024A0  3617               	rlcf	___awdiv@divisor,f,c
  4627  0024A2  3618               	rlcf	___awdiv@divisor+1,f,c
  4628  0024A4  2A19               	incf	___awdiv@counter,f,c
  4629  0024A6                     l2912:
  4630  0024A6  AE18               	btfss	___awdiv@divisor+1,7,c
  4631  0024A8  D7FA               	goto	l2910
  4632  0024AA                     l2914:
  4633  0024AA  90D8               	bcf	status,0,c
  4634  0024AC  361B               	rlcf	___awdiv@quotient,f,c
  4635  0024AE  361C               	rlcf	___awdiv@quotient+1,f,c
  4636  0024B0  5017               	movf	___awdiv@divisor,w,c
  4637  0024B2  5C15               	subwf	___awdiv@dividend,w,c
  4638  0024B4  5018               	movf	___awdiv@divisor+1,w,c
  4639  0024B6  5816               	subwfb	___awdiv@dividend+1,w,c
  4640  0024B8  A0D8               	btfss	status,0,c
  4641  0024BA  D005               	goto	l2922
  4642  0024BC  5017               	movf	___awdiv@divisor,w,c
  4643  0024BE  5E15               	subwf	___awdiv@dividend,f,c
  4644  0024C0  5018               	movf	___awdiv@divisor+1,w,c
  4645  0024C2  5A16               	subwfb	___awdiv@dividend+1,f,c
  4646  0024C4  801B               	bsf	___awdiv@quotient,0,c
  4647  0024C6                     l2922:
  4648  0024C6  90D8               	bcf	status,0,c
  4649  0024C8  3218               	rrcf	___awdiv@divisor+1,f,c
  4650  0024CA  3217               	rrcf	___awdiv@divisor,f,c
  4651  0024CC  2E19               	decfsz	___awdiv@counter,f,c
  4652  0024CE  D7ED               	goto	l2914
  4653  0024D0                     l2926:
  4654  0024D0  501A               	movf	___awdiv@sign,w,c
  4655  0024D2  B4D8               	btfsc	status,2,c
  4656  0024D4  D004               	goto	l2930
  4657  0024D6  6C1B               	negf	___awdiv@quotient,c
  4658  0024D8  1E1C               	comf	___awdiv@quotient+1,f,c
  4659  0024DA  B0D8               	btfsc	status,0,c
  4660  0024DC  2A1C               	incf	___awdiv@quotient+1,f,c
  4661  0024DE                     l2930:
  4662  0024DE  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  4663  0024E2  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  4664  0024E6  0012               	return	
  4665  0024E8                     __end_of___awdiv:
  4666                           	opt stack 0
  4667                           tblptru	equ	0xFF8
  4668                           tblptrh	equ	0xFF7
  4669                           tblptrl	equ	0xFF6
  4670                           tablat	equ	0xFF5
  4671                           prodh	equ	0xFF4
  4672                           prodl	equ	0xFF3
  4673                           intcon	equ	0xFF2
  4674                           intcon2	equ	0xFF1
  4675                           postinc0	equ	0xFEE
  4676                           wreg	equ	0xFE8
  4677                           indf2	equ	0xFDF
  4678                           postinc2	equ	0xFDE
  4679                           postdec2	equ	0xFDD
  4680                           fsr2h	equ	0xFDA
  4681                           fsr2l	equ	0xFD9
  4682                           status	equ	0xFD8
  4683                           
  4684 ;; *************** function _RTCC_from_RTCC *****************
  4685 ;; Defined at:
  4686 ;;		line 200 in file "My_RTCC.c"
  4687 ;; Parameters:    Size  Location     Type
  4688 ;;  tm              2   51[COMRAM] PTR struct .
  4689 ;;		 -> now(14), 
  4690 ;; Auto vars:     Size  Location     Type
  4691 ;;		None
  4692 ;; Return value:  Size  Location     Type
  4693 ;;		None               void
  4694 ;; Registers used:
  4695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4696 ;; Tracked objects:
  4697 ;;		On entry : 0/0
  4698 ;;		On exit  : 0/0
  4699 ;;		Unchanged: 0/0
  4700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4701 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4704 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4705 ;;Total ram usage:        2 bytes
  4706 ;; Hardware stack levels used:    1
  4707 ;; Hardware stack levels required when called:    5
  4708 ;; This function calls:
  4709 ;;		_RTCC_to_caltime
  4710 ;;		_caltime_to_epoch
  4711 ;; This function is called by:
  4712 ;;		_RTCC_init
  4713 ;;		_RTCC_adjust_time_inc
  4714 ;;		_RTCC_adjust_time_dec
  4715 ;;		_RTCC_task
  4716 ;;		_display_time_0802
  4717 ;;		_display_time_1602
  4718 ;; This function uses a non-reentrant model
  4719 ;;
  4720                           
  4721                           	psect	text20
  4722  0028C0                     __ptext20:
  4723                           	opt stack 0
  4724  0028C0                     _RTCC_from_RTCC:
  4725                           	opt stack 23
  4726                           
  4727                           ;My_RTCC.c: 201: RTCC_to_caltime(tm);
  4728                           
  4729                           ;incstack = 0
  4730  0028C0  C034  F017         	movff	RTCC_from_RTCC@tm,RTCC_to_caltime@tm
  4731  0028C4  C035  F018         	movff	RTCC_from_RTCC@tm+1,RTCC_to_caltime@tm+1
  4732  0028C8  EC3A  F011         	call	_RTCC_to_caltime	;wreg free
  4733                           
  4734                           ;My_RTCC.c: 202: caltime_to_epoch(tm);
  4735  0028CC  C034  F02E         	movff	RTCC_from_RTCC@tm,caltime_to_epoch@tm
  4736  0028D0  C035  F02F         	movff	RTCC_from_RTCC@tm+1,caltime_to_epoch@tm+1
  4737  0028D4  EC84  F00D         	call	_caltime_to_epoch	;wreg free
  4738  0028D8  0012               	return		;funcret
  4739  0028DA                     __end_of_RTCC_from_RTCC:
  4740                           	opt stack 0
  4741                           tblptru	equ	0xFF8
  4742                           tblptrh	equ	0xFF7
  4743                           tblptrl	equ	0xFF6
  4744                           tablat	equ	0xFF5
  4745                           prodh	equ	0xFF4
  4746                           prodl	equ	0xFF3
  4747                           intcon	equ	0xFF2
  4748                           intcon2	equ	0xFF1
  4749                           postinc0	equ	0xFEE
  4750                           wreg	equ	0xFE8
  4751                           indf2	equ	0xFDF
  4752                           postinc2	equ	0xFDE
  4753                           postdec2	equ	0xFDD
  4754                           fsr2h	equ	0xFDA
  4755                           fsr2l	equ	0xFD9
  4756                           status	equ	0xFD8
  4757                           
  4758 ;; *************** function _caltime_to_epoch *****************
  4759 ;; Defined at:
  4760 ;;		line 180 in file "My_RTCC.c"
  4761 ;; Parameters:    Size  Location     Type
  4762 ;;  tm              2   45[COMRAM] PTR struct .
  4763 ;;		 -> now(14), 
  4764 ;; Auto vars:     Size  Location     Type
  4765 ;;  month           1    6[BANK0 ] unsigned char 
  4766 ;;  month           1    1[BANK0 ] unsigned char 
  4767 ;;  year            1    0[BANK0 ] unsigned char 
  4768 ;;  epoch           4    2[BANK0 ] unsigned long 
  4769 ;; Return value:  Size  Location     Type
  4770 ;;		None               void
  4771 ;; Registers used:
  4772 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4773 ;; Tracked objects:
  4774 ;;		On entry : 0/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4778 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4779 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4780 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4781 ;;      Totals:         6       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4782 ;;Total ram usage:       13 bytes
  4783 ;; Hardware stack levels used:    1
  4784 ;; Hardware stack levels required when called:    4
  4785 ;; This function calls:
  4786 ;;		___lmul
  4787 ;;		_month_length
  4788 ;; This function is called by:
  4789 ;;		_RTCC_from_RTCC
  4790 ;;		_RTCC_from_caltime
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794                           	psect	text21
  4795  001B08                     __ptext21:
  4796                           	opt stack 0
  4797  001B08                     _caltime_to_epoch:
  4798                           	opt stack 23
  4799                           
  4800                           ;My_RTCC.c: 181: epoch_t epoch = 0;
  4801                           
  4802                           ;incstack = 0
  4803  001B08  0E00               	movlw	0
  4804  001B0A  0100               	movlb	0	; () banked
  4805  001B0C  6F62               	movwf	caltime_to_epoch@epoch& (0+255),b
  4806  001B0E  0E00               	movlw	0
  4807  001B10  6F63               	movwf	(caltime_to_epoch@epoch+1)& (0+255),b
  4808  001B12  0E00               	movlw	0
  4809  001B14  6F64               	movwf	(caltime_to_epoch@epoch+2)& (0+255),b
  4810  001B16  0E00               	movlw	0
  4811  001B18  6F65               	movwf	(caltime_to_epoch@epoch+3)& (0+255),b
  4812                           
  4813                           ;My_RTCC.c: 182: for (uint8_t year = 0; year < tm->YY; year++) {
  4814  001B1A  0E00               	movlw	0
  4815  001B1C  0100               	movlb	0	; () banked
  4816  001B1E  6F60               	movwf	caltime_to_epoch@year& (0+255),b
  4817  001B20  D02F               	goto	l3120
  4818  001B22                     l3106:
  4819                           
  4820                           ; BSR set to: 0
  4821                           ;My_RTCC.c: 183: for (uint8_t month = 1; month <= 12; month++) {
  4822  001B22  0E01               	movlw	1
  4823  001B24  0100               	movlb	0	; () banked
  4824  001B26  6F66               	movwf	caltime_to_epoch@month& (0+255),b
  4825  001B28                     l3108:
  4826                           
  4827                           ; BSR set to: 0
  4828  001B28  0E0C               	movlw	12
  4829  001B2A  0100               	movlb	0	; () banked
  4830  001B2C  6566               	cpfsgt	caltime_to_epoch@month& (0+255),b
  4831  001B2E  D001               	goto	l3112
  4832  001B30  D025               	goto	l3118
  4833  001B32                     l3112:
  4834                           
  4835                           ; BSR set to: 0
  4836                           ;My_RTCC.c: 184: epoch += ((epoch_t)60*60*24) * month_length(year, month);
  4837  001B32  C066  F01B         	movff	caltime_to_epoch@month,month_length@month
  4838  001B36  0100               	movlb	0	; () banked
  4839  001B38  5160               	movf	caltime_to_epoch@year& (0+255),w,b
  4840  001B3A  EC91  F011         	call	_month_length
  4841  001B3E  6E30               	movwf	??_caltime_to_epoch& (0+255),c
  4842  001B40  5030               	movf	??_caltime_to_epoch,w,c
  4843  001B42  6E22               	movwf	___lmul@multiplier,c
  4844  001B44  6A23               	clrf	___lmul@multiplier+1,c
  4845  001B46  6A24               	clrf	___lmul@multiplier+2,c
  4846  001B48  6A25               	clrf	___lmul@multiplier+3,c
  4847  001B4A  0E80               	movlw	128
  4848  001B4C  6E26               	movwf	___lmul@multiplicand,c
  4849  001B4E  0E51               	movlw	81
  4850  001B50  6E27               	movwf	___lmul@multiplicand+1,c
  4851  001B52  0E01               	movlw	1
  4852  001B54  6E28               	movwf	___lmul@multiplicand+2,c
  4853  001B56  0E00               	movlw	0
  4854  001B58  6E29               	movwf	___lmul@multiplicand+3,c
  4855  001B5A  EC5E  F013         	call	___lmul	;wreg free
  4856  001B5E  5022               	movf	?___lmul,w,c
  4857  001B60  0100               	movlb	0	; () banked
  4858  001B62  2762               	addwf	caltime_to_epoch@epoch& (0+255),f,b
  4859  001B64  5023               	movf	?___lmul+1,w,c
  4860  001B66  0100               	movlb	0	; () banked
  4861  001B68  2363               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
  4862  001B6A  5024               	movf	?___lmul+2,w,c
  4863  001B6C  0100               	movlb	0	; () banked
  4864  001B6E  2364               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
  4865  001B70  5025               	movf	?___lmul+3,w,c
  4866  001B72  0100               	movlb	0	; () banked
  4867  001B74  2365               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
  4868                           
  4869                           ; BSR set to: 0
  4870  001B76  0100               	movlb	0	; () banked
  4871  001B78  2B66               	incf	caltime_to_epoch@month& (0+255),f,b
  4872  001B7A  D7D6               	goto	l3108
  4873  001B7C                     l3118:
  4874                           
  4875                           ; BSR set to: 0
  4876  001B7C  0100               	movlb	0	; () banked
  4877  001B7E  2B60               	incf	caltime_to_epoch@year& (0+255),f,b
  4878  001B80                     l3120:
  4879                           
  4880                           ; BSR set to: 0
  4881  001B80  EE20 F00A          	lfsr	2,10
  4882  001B84  502E               	movf	caltime_to_epoch@tm,w,c
  4883  001B86  26D9               	addwf	fsr2l,f,c
  4884  001B88  502F               	movf	caltime_to_epoch@tm+1,w,c
  4885  001B8A  22DA               	addwfc	fsr2h,f,c
  4886  001B8C  50DE               	movf	postinc2,w,c
  4887  001B8E  0100               	movlb	0	; () banked
  4888  001B90  5D60               	subwf	caltime_to_epoch@year& (0+255),w,b
  4889  001B92  A0D8               	btfss	status,0,c
  4890  001B94  D7C6               	goto	l3106
  4891                           
  4892                           ; BSR set to: 0
  4893                           ;My_RTCC.c: 185: }
  4894                           ;My_RTCC.c: 186: }
  4895                           ;My_RTCC.c: 187: for (uint8_t month = 1; month < tm->MM; month++) {
  4896                           
  4897                           ; BSR set to: 0
  4898  001B96  0E01               	movlw	1
  4899  001B98  0100               	movlb	0	; () banked
  4900  001B9A  6F61               	movwf	caltime_to_epoch@month_1574& (0+255),b
  4901  001B9C  D029               	goto	l3128
  4902  001B9E                     l3124:
  4903                           
  4904                           ; BSR set to: 0
  4905                           ;My_RTCC.c: 188: epoch += ((epoch_t)60*60*24) * month_length(tm->YY, month);
  4906  001B9E  C061  F01B         	movff	caltime_to_epoch@month_1574,month_length@month
  4907  001BA2  EE20 F00A          	lfsr	2,10
  4908  001BA6  502E               	movf	caltime_to_epoch@tm,w,c
  4909  001BA8  26D9               	addwf	fsr2l,f,c
  4910  001BAA  502F               	movf	caltime_to_epoch@tm+1,w,c
  4911  001BAC  22DA               	addwfc	fsr2h,f,c
  4912  001BAE  50DF               	movf	indf2,w,c
  4913  001BB0  EC91  F011         	call	_month_length
  4914  001BB4  6E30               	movwf	??_caltime_to_epoch& (0+255),c
  4915  001BB6  5030               	movf	??_caltime_to_epoch,w,c
  4916  001BB8  6E22               	movwf	___lmul@multiplier,c
  4917  001BBA  6A23               	clrf	___lmul@multiplier+1,c
  4918  001BBC  6A24               	clrf	___lmul@multiplier+2,c
  4919  001BBE  6A25               	clrf	___lmul@multiplier+3,c
  4920  001BC0  0E80               	movlw	128
  4921  001BC2  6E26               	movwf	___lmul@multiplicand,c
  4922  001BC4  0E51               	movlw	81
  4923  001BC6  6E27               	movwf	___lmul@multiplicand+1,c
  4924  001BC8  0E01               	movlw	1
  4925  001BCA  6E28               	movwf	___lmul@multiplicand+2,c
  4926  001BCC  0E00               	movlw	0
  4927  001BCE  6E29               	movwf	___lmul@multiplicand+3,c
  4928  001BD0  EC5E  F013         	call	___lmul	;wreg free
  4929  001BD4  5022               	movf	?___lmul,w,c
  4930  001BD6  0100               	movlb	0	; () banked
  4931  001BD8  2762               	addwf	caltime_to_epoch@epoch& (0+255),f,b
  4932  001BDA  5023               	movf	?___lmul+1,w,c
  4933  001BDC  0100               	movlb	0	; () banked
  4934  001BDE  2363               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
  4935  001BE0  5024               	movf	?___lmul+2,w,c
  4936  001BE2  0100               	movlb	0	; () banked
  4937  001BE4  2364               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
  4938  001BE6  5025               	movf	?___lmul+3,w,c
  4939  001BE8  0100               	movlb	0	; () banked
  4940  001BEA  2365               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
  4941                           
  4942                           ; BSR set to: 0
  4943  001BEC  0100               	movlb	0	; () banked
  4944  001BEE  2B61               	incf	caltime_to_epoch@month_1574& (0+255),f,b
  4945  001BF0                     l3128:
  4946                           
  4947                           ; BSR set to: 0
  4948  001BF0  EE20 F009          	lfsr	2,9
  4949  001BF4  502E               	movf	caltime_to_epoch@tm,w,c
  4950  001BF6  26D9               	addwf	fsr2l,f,c
  4951  001BF8  502F               	movf	caltime_to_epoch@tm+1,w,c
  4952  001BFA  22DA               	addwfc	fsr2h,f,c
  4953  001BFC  50DE               	movf	postinc2,w,c
  4954  001BFE  0100               	movlb	0	; () banked
  4955  001C00  5D61               	subwf	caltime_to_epoch@month_1574& (0+255),w,b
  4956  001C02  A0D8               	btfss	status,0,c
  4957  001C04  D7CC               	goto	l3124
  4958                           
  4959                           ; BSR set to: 0
  4960                           ;My_RTCC.c: 189: }
  4961                           ;My_RTCC.c: 190: epoch += ((epoch_t)60*60*24) * (tm->DD - 1);
  4962                           
  4963                           ; BSR set to: 0
  4964  001C06  0EFF               	movlw	255
  4965  001C08  6E30               	movwf	??_caltime_to_epoch& (0+255),c
  4966  001C0A  0EFF               	movlw	255
  4967  001C0C  6E31               	movwf	(??_caltime_to_epoch+1)& (0+255),c
  4968  001C0E  EE20 F008          	lfsr	2,8
  4969  001C12  502E               	movf	caltime_to_epoch@tm,w,c
  4970  001C14  26D9               	addwf	fsr2l,f,c
  4971  001C16  502F               	movf	caltime_to_epoch@tm+1,w,c
  4972  001C18  22DA               	addwfc	fsr2h,f,c
  4973  001C1A  50DF               	movf	indf2,w,c
  4974  001C1C  6E32               	movwf	(??_caltime_to_epoch+2)& (0+255),c
  4975  001C1E  6A33               	clrf	(??_caltime_to_epoch+3)& (0+255),c
  4976  001C20  5030               	movf	??_caltime_to_epoch,w,c
  4977  001C22  2632               	addwf	??_caltime_to_epoch+2,f,c
  4978  001C24  5031               	movf	??_caltime_to_epoch+1,w,c
  4979  001C26  2233               	addwfc	??_caltime_to_epoch+3,f,c
  4980  001C28  C032  F022         	movff	??_caltime_to_epoch+2,___lmul@multiplier
  4981  001C2C  C033  F023         	movff	??_caltime_to_epoch+3,___lmul@multiplier+1
  4982  001C30  0E00               	movlw	0
  4983  001C32  BE23               	btfsc	___lmul@multiplier+1,7,c
  4984  001C34  0EFF               	movlw	-1
  4985  001C36  6E24               	movwf	___lmul@multiplier+2,c
  4986  001C38  6E25               	movwf	___lmul@multiplier+3,c
  4987  001C3A  0E80               	movlw	128
  4988  001C3C  6E26               	movwf	___lmul@multiplicand,c
  4989  001C3E  0E51               	movlw	81
  4990  001C40  6E27               	movwf	___lmul@multiplicand+1,c
  4991  001C42  0E01               	movlw	1
  4992  001C44  6E28               	movwf	___lmul@multiplicand+2,c
  4993  001C46  0E00               	movlw	0
  4994  001C48  6E29               	movwf	___lmul@multiplicand+3,c
  4995  001C4A  EC5E  F013         	call	___lmul	;wreg free
  4996  001C4E  5022               	movf	?___lmul,w,c
  4997  001C50  0100               	movlb	0	; () banked
  4998  001C52  2762               	addwf	caltime_to_epoch@epoch& (0+255),f,b
  4999  001C54  5023               	movf	?___lmul+1,w,c
  5000  001C56  0100               	movlb	0	; () banked
  5001  001C58  2363               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
  5002  001C5A  5024               	movf	?___lmul+2,w,c
  5003  001C5C  0100               	movlb	0	; () banked
  5004  001C5E  2364               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
  5005  001C60  5025               	movf	?___lmul+3,w,c
  5006  001C62  0100               	movlb	0	; () banked
  5007  001C64  2365               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
  5008                           
  5009                           ;My_RTCC.c: 191: epoch += ((epoch_t)60*60) * tm->hh;
  5010  001C66  EE20 F006          	lfsr	2,6
  5011  001C6A  502E               	movf	caltime_to_epoch@tm,w,c
  5012  001C6C  26D9               	addwf	fsr2l,f,c
  5013  001C6E  502F               	movf	caltime_to_epoch@tm+1,w,c
  5014  001C70  22DA               	addwfc	fsr2h,f,c
  5015  001C72  50DF               	movf	indf2,w,c
  5016  001C74  6E30               	movwf	??_caltime_to_epoch& (0+255),c
  5017  001C76  5030               	movf	??_caltime_to_epoch,w,c
  5018  001C78  6E22               	movwf	___lmul@multiplier,c
  5019  001C7A  6A23               	clrf	___lmul@multiplier+1,c
  5020  001C7C  6A24               	clrf	___lmul@multiplier+2,c
  5021  001C7E  6A25               	clrf	___lmul@multiplier+3,c
  5022  001C80  0E10               	movlw	16
  5023  001C82  6E26               	movwf	___lmul@multiplicand,c
  5024  001C84  0E0E               	movlw	14
  5025  001C86  6E27               	movwf	___lmul@multiplicand+1,c
  5026  001C88  0E00               	movlw	0
  5027  001C8A  6E28               	movwf	___lmul@multiplicand+2,c
  5028  001C8C  0E00               	movlw	0
  5029  001C8E  6E29               	movwf	___lmul@multiplicand+3,c
  5030  001C90  EC5E  F013         	call	___lmul	;wreg free
  5031  001C94  5022               	movf	?___lmul,w,c
  5032  001C96  0100               	movlb	0	; () banked
  5033  001C98  2762               	addwf	caltime_to_epoch@epoch& (0+255),f,b
  5034  001C9A  5023               	movf	?___lmul+1,w,c
  5035  001C9C  0100               	movlb	0	; () banked
  5036  001C9E  2363               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
  5037  001CA0  5024               	movf	?___lmul+2,w,c
  5038  001CA2  0100               	movlb	0	; () banked
  5039  001CA4  2364               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
  5040  001CA6  5025               	movf	?___lmul+3,w,c
  5041  001CA8  0100               	movlb	0	; () banked
  5042  001CAA  2365               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
  5043                           
  5044                           ;My_RTCC.c: 192: epoch += ((epoch_t)60) * tm->mm;
  5045  001CAC  EE20 F005          	lfsr	2,5
  5046  001CB0  502E               	movf	caltime_to_epoch@tm,w,c
  5047  001CB2  26D9               	addwf	fsr2l,f,c
  5048  001CB4  502F               	movf	caltime_to_epoch@tm+1,w,c
  5049  001CB6  22DA               	addwfc	fsr2h,f,c
  5050  001CB8  50DF               	movf	indf2,w,c
  5051  001CBA  6E30               	movwf	??_caltime_to_epoch& (0+255),c
  5052  001CBC  5030               	movf	??_caltime_to_epoch,w,c
  5053  001CBE  6E22               	movwf	___lmul@multiplier,c
  5054  001CC0  6A23               	clrf	___lmul@multiplier+1,c
  5055  001CC2  6A24               	clrf	___lmul@multiplier+2,c
  5056  001CC4  6A25               	clrf	___lmul@multiplier+3,c
  5057  001CC6  0E3C               	movlw	60
  5058  001CC8  6E26               	movwf	___lmul@multiplicand,c
  5059  001CCA  0E00               	movlw	0
  5060  001CCC  6E27               	movwf	___lmul@multiplicand+1,c
  5061  001CCE  0E00               	movlw	0
  5062  001CD0  6E28               	movwf	___lmul@multiplicand+2,c
  5063  001CD2  0E00               	movlw	0
  5064  001CD4  6E29               	movwf	___lmul@multiplicand+3,c
  5065  001CD6  EC5E  F013         	call	___lmul	;wreg free
  5066  001CDA  5022               	movf	?___lmul,w,c
  5067  001CDC  0100               	movlb	0	; () banked
  5068  001CDE  2762               	addwf	caltime_to_epoch@epoch& (0+255),f,b
  5069  001CE0  5023               	movf	?___lmul+1,w,c
  5070  001CE2  0100               	movlb	0	; () banked
  5071  001CE4  2363               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
  5072  001CE6  5024               	movf	?___lmul+2,w,c
  5073  001CE8  0100               	movlb	0	; () banked
  5074  001CEA  2364               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
  5075  001CEC  5025               	movf	?___lmul+3,w,c
  5076  001CEE  0100               	movlb	0	; () banked
  5077  001CF0  2365               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
  5078                           
  5079                           ; BSR set to: 0
  5080                           ;My_RTCC.c: 193: epoch += tm->ss;
  5081  001CF2  EE20 F004          	lfsr	2,4
  5082  001CF6  502E               	movf	caltime_to_epoch@tm,w,c
  5083  001CF8  26D9               	addwf	fsr2l,f,c
  5084  001CFA  502F               	movf	caltime_to_epoch@tm+1,w,c
  5085  001CFC  22DA               	addwfc	fsr2h,f,c
  5086  001CFE  50DF               	movf	indf2,w,c
  5087  001D00  6E30               	movwf	??_caltime_to_epoch& (0+255),c
  5088  001D02  5030               	movf	??_caltime_to_epoch,w,c
  5089  001D04  0100               	movlb	0	; () banked
  5090  001D06  2762               	addwf	caltime_to_epoch@epoch& (0+255),f,b
  5091  001D08  0E00               	movlw	0
  5092  001D0A  2363               	addwfc	(caltime_to_epoch@epoch+1)& (0+255),f,b
  5093  001D0C  2364               	addwfc	(caltime_to_epoch@epoch+2)& (0+255),f,b
  5094  001D0E  2365               	addwfc	(caltime_to_epoch@epoch+3)& (0+255),f,b
  5095                           
  5096                           ; BSR set to: 0
  5097                           ;My_RTCC.c: 195: tm->epoch = epoch;
  5098  001D10  C02E  FFD9         	movff	caltime_to_epoch@tm,fsr2l
  5099  001D14  C02F  FFDA         	movff	caltime_to_epoch@tm+1,fsr2h
  5100  001D18  C062  FFDE         	movff	caltime_to_epoch@epoch,postinc2
  5101  001D1C  C063  FFDE         	movff	caltime_to_epoch@epoch+1,postinc2
  5102  001D20  C064  FFDE         	movff	caltime_to_epoch@epoch+2,postinc2
  5103  001D24  C065  FFDE         	movff	caltime_to_epoch@epoch+3,postinc2
  5104                           
  5105                           ; BSR set to: 0
  5106  001D28  0012               	return		;funcret
  5107  001D2A                     __end_of_caltime_to_epoch:
  5108                           	opt stack 0
  5109                           tblptru	equ	0xFF8
  5110                           tblptrh	equ	0xFF7
  5111                           tblptrl	equ	0xFF6
  5112                           tablat	equ	0xFF5
  5113                           prodh	equ	0xFF4
  5114                           prodl	equ	0xFF3
  5115                           intcon	equ	0xFF2
  5116                           intcon2	equ	0xFF1
  5117                           postinc0	equ	0xFEE
  5118                           wreg	equ	0xFE8
  5119                           indf2	equ	0xFDF
  5120                           postinc2	equ	0xFDE
  5121                           postdec2	equ	0xFDD
  5122                           fsr2h	equ	0xFDA
  5123                           fsr2l	equ	0xFD9
  5124                           status	equ	0xFD8
  5125                           
  5126 ;; *************** function _month_length *****************
  5127 ;; Defined at:
  5128 ;;		line 56 in file "My_RTCC.c"
  5129 ;; Parameters:    Size  Location     Type
  5130 ;;  year            1    wreg     unsigned char 
  5131 ;;  month           1   26[COMRAM] unsigned char 
  5132 ;; Auto vars:     Size  Location     Type
  5133 ;;  year            1   31[COMRAM] unsigned char 
  5134 ;; Return value:  Size  Location     Type
  5135 ;;                  1    wreg      unsigned char 
  5136 ;; Registers used:
  5137 ;;		wreg, status,2, status,0, cstack
  5138 ;; Tracked objects:
  5139 ;;		On entry : 0/0
  5140 ;;		On exit  : 0/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5143 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5144 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5145 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5146 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5147 ;;Total ram usage:        6 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; Hardware stack levels required when called:    3
  5150 ;; This function calls:
  5151 ;;		___awmod
  5152 ;; This function is called by:
  5153 ;;		_epoch_to_caltime
  5154 ;;		_caltime_to_epoch
  5155 ;;		_RTCC_adjust_time_inc
  5156 ;;		_RTCC_adjust_time_dec
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           	psect	text22
  5161  002322                     __ptext22:
  5162                           	opt stack 0
  5163  002322                     _month_length:
  5164                           	opt stack 23
  5165                           
  5166                           ; BSR set to: 0
  5167                           ;incstack = 0
  5168                           ;month_length@year stored from wreg
  5169  002322  6E20               	movwf	month_length@year,c
  5170                           
  5171                           ;My_RTCC.c: 57: if (month == 2) return 28 + !(year & 3)-!(year % 100)+!(year % 400);
  5172  002324  0E02               	movlw	2
  5173  002326  181B               	xorwf	month_length@month,w,c
  5174  002328  A4D8               	btfss	status,2,c
  5175  00232A  D030               	goto	l3008
  5176  00232C  C020  F015         	movff	month_length@year,___awmod@dividend
  5177  002330  6A16               	clrf	___awmod@dividend+1,c
  5178  002332  0E00               	movlw	0
  5179  002334  6E18               	movwf	___awmod@divisor+1,c
  5180  002336  0E64               	movlw	100
  5181  002338  6E17               	movwf	___awmod@divisor,c
  5182  00233A  ECF3  F012         	call	___awmod	;wreg free
  5183  00233E  5015               	movf	?___awmod,w,c
  5184  002340  1016               	iorwf	?___awmod+1,w,c
  5185  002342  A4D8               	btfss	status,2,c
  5186  002344  D002               	goto	u3100
  5187  002346  0E01               	movlw	1
  5188  002348  D001               	goto	u3110
  5189  00234A                     u3100:
  5190  00234A  0E00               	movlw	0
  5191  00234C                     u3110:
  5192  00234C  0800               	sublw	0
  5193  00234E  6E1C               	movwf	??_month_length& (0+255),c
  5194  002350  C020  F015         	movff	month_length@year,___awmod@dividend
  5195  002354  6A16               	clrf	___awmod@dividend+1,c
  5196  002356  0E01               	movlw	1
  5197  002358  6E18               	movwf	___awmod@divisor+1,c
  5198  00235A  0E90               	movlw	144
  5199  00235C  6E17               	movwf	___awmod@divisor,c
  5200  00235E  ECF3  F012         	call	___awmod	;wreg free
  5201  002362  5015               	movf	?___awmod,w,c
  5202  002364  1016               	iorwf	?___awmod+1,w,c
  5203  002366  A4D8               	btfss	status,2,c
  5204  002368  D003               	goto	u3120
  5205  00236A  6A1D               	clrf	(??_month_length+1)& (0+255),c
  5206  00236C  2A1D               	incf	(??_month_length+1)& (0+255),f,c
  5207  00236E  D001               	goto	u3138
  5208  002370                     u3120:
  5209  002370  6A1D               	clrf	(??_month_length+1)& (0+255),c
  5210  002372                     u3138:
  5211  002372  C020  F01E         	movff	month_length@year,??_month_length+2
  5212  002376  0E03               	movlw	3
  5213  002378  161E               	andwf	??_month_length+2,f,c
  5214  00237A  A4D8               	btfss	status,2,c
  5215  00237C  D002               	goto	u3140
  5216  00237E  0E01               	movlw	1
  5217  002380  D001               	goto	u3150
  5218  002382                     u3140:
  5219  002382  0E00               	movlw	0
  5220  002384                     u3150:
  5221  002384  241D               	addwf	??_month_length+1,w,c
  5222  002386  241C               	addwf	??_month_length,w,c
  5223  002388  0F1C               	addlw	28
  5224  00238A  0012               	return	
  5225  00238C                     l3008:
  5226                           
  5227                           ;My_RTCC.c: 58: else return 31 - (((-(month & 1)^month)&13) == 4);
  5228  00238C  501B               	movf	month_length@month,w,c
  5229  00238E  0B01               	andlw	1
  5230  002390  6E1C               	movwf	??_month_length& (0+255),c
  5231  002392  6A1D               	clrf	(??_month_length+1)& (0+255),c
  5232  002394  1E1C               	comf	??_month_length,f,c
  5233  002396  1E1D               	comf	??_month_length+1,f,c
  5234  002398  4A1C               	infsnz	??_month_length,f,c
  5235  00239A  2A1D               	incf	??_month_length+1,f,c
  5236  00239C  501B               	movf	month_length@month,w,c
  5237  00239E  6E1E               	movwf	(??_month_length+2)& (0+255),c
  5238  0023A0  6A1F               	clrf	(??_month_length+3)& (0+255),c
  5239  0023A2  501C               	movf	??_month_length,w,c
  5240  0023A4  1A1E               	xorwf	??_month_length+2,f,c
  5241  0023A6  501D               	movf	??_month_length+1,w,c
  5242  0023A8  1A1F               	xorwf	??_month_length+3,f,c
  5243  0023AA  0E0D               	movlw	13
  5244  0023AC  161E               	andwf	??_month_length+2,f,c
  5245  0023AE  0E00               	movlw	0
  5246  0023B0  161F               	andwf	??_month_length+3,f,c
  5247  0023B2  0E04               	movlw	4
  5248  0023B4  181E               	xorwf	??_month_length+2,w,c
  5249  0023B6  101F               	iorwf	??_month_length+3,w,c
  5250  0023B8  A4D8               	btfss	status,2,c
  5251  0023BA  D002               	goto	u3160
  5252  0023BC  0E01               	movlw	1
  5253  0023BE  D001               	goto	u3170
  5254  0023C0                     u3160:
  5255  0023C0  0E00               	movlw	0
  5256  0023C2                     u3170:
  5257  0023C2  0800               	sublw	0
  5258  0023C4  0F1F               	addlw	31
  5259  0023C6  0012               	return	
  5260  0023C8                     __end_of_month_length:
  5261                           	opt stack 0
  5262                           tblptru	equ	0xFF8
  5263                           tblptrh	equ	0xFF7
  5264                           tblptrl	equ	0xFF6
  5265                           tablat	equ	0xFF5
  5266                           prodh	equ	0xFF4
  5267                           prodl	equ	0xFF3
  5268                           intcon	equ	0xFF2
  5269                           intcon2	equ	0xFF1
  5270                           postinc0	equ	0xFEE
  5271                           wreg	equ	0xFE8
  5272                           indf2	equ	0xFDF
  5273                           postinc2	equ	0xFDE
  5274                           postdec2	equ	0xFDD
  5275                           fsr2h	equ	0xFDA
  5276                           fsr2l	equ	0xFD9
  5277                           status	equ	0xFD8
  5278                           
  5279 ;; *************** function ___awmod *****************
  5280 ;; Defined at:
  5281 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;  dividend        2   20[COMRAM] int 
  5284 ;;  divisor         2   22[COMRAM] int 
  5285 ;; Auto vars:     Size  Location     Type
  5286 ;;  sign            1   25[COMRAM] unsigned char 
  5287 ;;  counter         1   24[COMRAM] unsigned char 
  5288 ;; Return value:  Size  Location     Type
  5289 ;;                  2   20[COMRAM] int 
  5290 ;; Registers used:
  5291 ;;		wreg, status,2, status,0
  5292 ;; Tracked objects:
  5293 ;;		On entry : 0/0
  5294 ;;		On exit  : 0/0
  5295 ;;		Unchanged: 0/0
  5296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5297 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5298 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5300 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5301 ;;Total ram usage:        6 bytes
  5302 ;; Hardware stack levels used:    1
  5303 ;; Hardware stack levels required when called:    2
  5304 ;; This function calls:
  5305 ;;		Nothing
  5306 ;; This function is called by:
  5307 ;;		_month_length
  5308 ;; This function uses a non-reentrant model
  5309 ;;
  5310                           
  5311                           	psect	text23
  5312  0025E6                     __ptext23:
  5313                           	opt stack 0
  5314  0025E6                     ___awmod:
  5315                           	opt stack 23
  5316                           
  5317                           ;incstack = 0
  5318  0025E6  0E00               	movlw	0
  5319  0025E8  6E1A               	movwf	___awmod@sign,c
  5320  0025EA  AE16               	btfss	___awmod@dividend+1,7,c
  5321  0025EC  D006               	goto	l2942
  5322  0025EE  6C15               	negf	___awmod@dividend,c
  5323  0025F0  1E16               	comf	___awmod@dividend+1,f,c
  5324  0025F2  B0D8               	btfsc	status,0,c
  5325  0025F4  2A16               	incf	___awmod@dividend+1,f,c
  5326  0025F6  0E01               	movlw	1
  5327  0025F8  6E1A               	movwf	___awmod@sign,c
  5328  0025FA                     l2942:
  5329  0025FA  AE18               	btfss	___awmod@divisor+1,7,c
  5330  0025FC  D004               	goto	l2946
  5331  0025FE  6C17               	negf	___awmod@divisor,c
  5332  002600  1E18               	comf	___awmod@divisor+1,f,c
  5333  002602  B0D8               	btfsc	status,0,c
  5334  002604  2A18               	incf	___awmod@divisor+1,f,c
  5335  002606                     l2946:
  5336  002606  5017               	movf	___awmod@divisor,w,c
  5337  002608  1018               	iorwf	___awmod@divisor+1,w,c
  5338  00260A  B4D8               	btfsc	status,2,c
  5339  00260C  D018               	goto	l2962
  5340  00260E  0E01               	movlw	1
  5341  002610  6E19               	movwf	___awmod@counter,c
  5342  002612  D004               	goto	l2952
  5343  002614                     l2950:
  5344  002614  90D8               	bcf	status,0,c
  5345  002616  3617               	rlcf	___awmod@divisor,f,c
  5346  002618  3618               	rlcf	___awmod@divisor+1,f,c
  5347  00261A  2A19               	incf	___awmod@counter,f,c
  5348  00261C                     l2952:
  5349  00261C  AE18               	btfss	___awmod@divisor+1,7,c
  5350  00261E  D7FA               	goto	l2950
  5351  002620                     l2954:
  5352  002620  5017               	movf	___awmod@divisor,w,c
  5353  002622  5C15               	subwf	___awmod@dividend,w,c
  5354  002624  5018               	movf	___awmod@divisor+1,w,c
  5355  002626  5816               	subwfb	___awmod@dividend+1,w,c
  5356  002628  A0D8               	btfss	status,0,c
  5357  00262A  D004               	goto	l2958
  5358  00262C  5017               	movf	___awmod@divisor,w,c
  5359  00262E  5E15               	subwf	___awmod@dividend,f,c
  5360  002630  5018               	movf	___awmod@divisor+1,w,c
  5361  002632  5A16               	subwfb	___awmod@dividend+1,f,c
  5362  002634                     l2958:
  5363  002634  90D8               	bcf	status,0,c
  5364  002636  3218               	rrcf	___awmod@divisor+1,f,c
  5365  002638  3217               	rrcf	___awmod@divisor,f,c
  5366  00263A  2E19               	decfsz	___awmod@counter,f,c
  5367  00263C  D7F1               	goto	l2954
  5368  00263E                     l2962:
  5369  00263E  501A               	movf	___awmod@sign,w,c
  5370  002640  B4D8               	btfsc	status,2,c
  5371  002642  D004               	goto	l2966
  5372  002644  6C15               	negf	___awmod@dividend,c
  5373  002646  1E16               	comf	___awmod@dividend+1,f,c
  5374  002648  B0D8               	btfsc	status,0,c
  5375  00264A  2A16               	incf	___awmod@dividend+1,f,c
  5376  00264C                     l2966:
  5377  00264C  C015  F015         	movff	___awmod@dividend,?___awmod
  5378  002650  C016  F016         	movff	___awmod@dividend+1,?___awmod+1
  5379  002654  0012               	return	
  5380  002656                     __end_of___awmod:
  5381                           	opt stack 0
  5382                           tblptru	equ	0xFF8
  5383                           tblptrh	equ	0xFF7
  5384                           tblptrl	equ	0xFF6
  5385                           tablat	equ	0xFF5
  5386                           prodh	equ	0xFF4
  5387                           prodl	equ	0xFF3
  5388                           intcon	equ	0xFF2
  5389                           intcon2	equ	0xFF1
  5390                           postinc0	equ	0xFEE
  5391                           wreg	equ	0xFE8
  5392                           indf2	equ	0xFDF
  5393                           postinc2	equ	0xFDE
  5394                           postdec2	equ	0xFDD
  5395                           fsr2h	equ	0xFDA
  5396                           fsr2l	equ	0xFD9
  5397                           status	equ	0xFD8
  5398                           
  5399 ;; *************** function ___lmul *****************
  5400 ;; Defined at:
  5401 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul32.c"
  5402 ;; Parameters:    Size  Location     Type
  5403 ;;  multiplier      4   33[COMRAM] unsigned long 
  5404 ;;  multiplicand    4   37[COMRAM] unsigned long 
  5405 ;; Auto vars:     Size  Location     Type
  5406 ;;  product         4   41[COMRAM] unsigned long 
  5407 ;; Return value:  Size  Location     Type
  5408 ;;                  4   33[COMRAM] unsigned long 
  5409 ;; Registers used:
  5410 ;;		wreg, status,2, status,0
  5411 ;; Tracked objects:
  5412 ;;		On entry : 0/0
  5413 ;;		On exit  : 0/0
  5414 ;;		Unchanged: 0/0
  5415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5416 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5417 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5419 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5420 ;;Total ram usage:       12 bytes
  5421 ;; Hardware stack levels used:    1
  5422 ;; Hardware stack levels required when called:    2
  5423 ;; This function calls:
  5424 ;;		Nothing
  5425 ;; This function is called by:
  5426 ;;		_get_quot_rem
  5427 ;;		_caltime_to_epoch
  5428 ;;		_RTCC_adjust_time_inc
  5429 ;;		_RTCC_adjust_time_dec
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           	psect	text24
  5434  0026BC                     __ptext24:
  5435                           	opt stack 0
  5436  0026BC                     ___lmul:
  5437                           	opt stack 23
  5438                           
  5439                           ;incstack = 0
  5440  0026BC  0E00               	movlw	0
  5441  0026BE  6E2A               	movwf	___lmul@product,c
  5442  0026C0  0E00               	movlw	0
  5443  0026C2  6E2B               	movwf	___lmul@product+1,c
  5444  0026C4  0E00               	movlw	0
  5445  0026C6  6E2C               	movwf	___lmul@product+2,c
  5446  0026C8  0E00               	movlw	0
  5447  0026CA  6E2D               	movwf	___lmul@product+3,c
  5448  0026CC                     l2882:
  5449  0026CC  A022               	btfss	___lmul@multiplier,0,c
  5450  0026CE  D008               	goto	l2886
  5451  0026D0  5026               	movf	___lmul@multiplicand,w,c
  5452  0026D2  262A               	addwf	___lmul@product,f,c
  5453  0026D4  5027               	movf	___lmul@multiplicand+1,w,c
  5454  0026D6  222B               	addwfc	___lmul@product+1,f,c
  5455  0026D8  5028               	movf	___lmul@multiplicand+2,w,c
  5456  0026DA  222C               	addwfc	___lmul@product+2,f,c
  5457  0026DC  5029               	movf	___lmul@multiplicand+3,w,c
  5458  0026DE  222D               	addwfc	___lmul@product+3,f,c
  5459  0026E0                     l2886:
  5460  0026E0  90D8               	bcf	status,0,c
  5461  0026E2  3626               	rlcf	___lmul@multiplicand,f,c
  5462  0026E4  3627               	rlcf	___lmul@multiplicand+1,f,c
  5463  0026E6  3628               	rlcf	___lmul@multiplicand+2,f,c
  5464  0026E8  3629               	rlcf	___lmul@multiplicand+3,f,c
  5465  0026EA  90D8               	bcf	status,0,c
  5466  0026EC  3225               	rrcf	___lmul@multiplier+3,f,c
  5467  0026EE  3224               	rrcf	___lmul@multiplier+2,f,c
  5468  0026F0  3223               	rrcf	___lmul@multiplier+1,f,c
  5469  0026F2  3222               	rrcf	___lmul@multiplier,f,c
  5470  0026F4  5022               	movf	___lmul@multiplier,w,c
  5471  0026F6  1023               	iorwf	___lmul@multiplier+1,w,c
  5472  0026F8  1024               	iorwf	___lmul@multiplier+2,w,c
  5473  0026FA  1025               	iorwf	___lmul@multiplier+3,w,c
  5474  0026FC  A4D8               	btfss	status,2,c
  5475  0026FE  D7E6               	goto	l2882
  5476  002700  C02A  F022         	movff	___lmul@product,?___lmul
  5477  002704  C02B  F023         	movff	___lmul@product+1,?___lmul+1
  5478  002708  C02C  F024         	movff	___lmul@product+2,?___lmul+2
  5479  00270C  C02D  F025         	movff	___lmul@product+3,?___lmul+3
  5480  002710  0012               	return		;funcret
  5481  002712                     __end_of___lmul:
  5482                           	opt stack 0
  5483                           tblptru	equ	0xFF8
  5484                           tblptrh	equ	0xFF7
  5485                           tblptrl	equ	0xFF6
  5486                           tablat	equ	0xFF5
  5487                           prodh	equ	0xFF4
  5488                           prodl	equ	0xFF3
  5489                           intcon	equ	0xFF2
  5490                           intcon2	equ	0xFF1
  5491                           postinc0	equ	0xFEE
  5492                           wreg	equ	0xFE8
  5493                           indf2	equ	0xFDF
  5494                           postinc2	equ	0xFDE
  5495                           postdec2	equ	0xFDD
  5496                           fsr2h	equ	0xFDA
  5497                           fsr2l	equ	0xFD9
  5498                           status	equ	0xFD8
  5499                           
  5500 ;; *************** function _RTCC_to_caltime *****************
  5501 ;; Defined at:
  5502 ;;		line 90 in file "My_RTCC.c"
  5503 ;; Parameters:    Size  Location     Type
  5504 ;;  tm              2   22[COMRAM] PTR struct .
  5505 ;;		 -> now(14), 
  5506 ;; Auto vars:     Size  Location     Type
  5507 ;;  dumy            1   24[COMRAM] unsigned char 
  5508 ;; Return value:  Size  Location     Type
  5509 ;;		None               void
  5510 ;; Registers used:
  5511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5512 ;; Tracked objects:
  5513 ;;		On entry : 0/0
  5514 ;;		On exit  : 0/0
  5515 ;;		Unchanged: 0/0
  5516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5517 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5518 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5520 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5521 ;;Total ram usage:        3 bytes
  5522 ;; Hardware stack levels used:    1
  5523 ;; Hardware stack levels required when called:    3
  5524 ;; This function calls:
  5525 ;;		_x_to_d
  5526 ;; This function is called by:
  5527 ;;		_RTCC_from_RTCC
  5528 ;; This function uses a non-reentrant model
  5529 ;;
  5530                           
  5531                           	psect	text25
  5532  002274                     __ptext25:
  5533                           	opt stack 0
  5534  002274                     _RTCC_to_caltime:
  5535                           	opt stack 24
  5536  002274                     l161:
  5537  002274  010F               	movlb	15	; () banked
  5538  002276  B93F               	btfsc	63,4,b	;volatile
  5539  002278  D7FD               	goto	l161
  5540                           
  5541                           ; BSR set to: 15
  5542                           ;My_RTCC.c: 93: RTCCFGbits.RTCPTR0 = 1;
  5543  00227A  010F               	movlb	15	; () banked
  5544  00227C  813F               	bsf	63,0,b	;volatile
  5545                           
  5546                           ;My_RTCC.c: 94: RTCCFGbits.RTCPTR1 = 1;
  5547  00227E  010F               	movlb	15	; () banked
  5548  002280  833F               	bsf	63,1,b	;volatile
  5549                           
  5550                           ; BSR set to: 15
  5551                           ;My_RTCC.c: 96: tm->YY = x_to_d(RTCVALL);
  5552  002282  EE20 F00A          	lfsr	2,10
  5553  002286  5017               	movf	RTCC_to_caltime@tm,w,c
  5554  002288  26D9               	addwf	fsr2l,f,c
  5555  00228A  5018               	movf	RTCC_to_caltime@tm+1,w,c
  5556  00228C  22DA               	addwfc	fsr2h,f,c
  5557  00228E  010F               	movlb	15	; () banked
  5558  002290  513A               	movf	58,w,b	;volatile
  5559  002292  EC6D  F014         	call	_x_to_d
  5560  002296  6EDF               	movwf	indf2,c
  5561                           
  5562                           ;My_RTCC.c: 97: uint8_t dumy = RTCVALH;
  5563  002298  CF3B F019          	movff	3899,RTCC_to_caltime@dumy	;volatile
  5564                           
  5565                           ;My_RTCC.c: 98: tm->DD = x_to_d(RTCVALL);
  5566  00229C  EE20 F008          	lfsr	2,8
  5567  0022A0  5017               	movf	RTCC_to_caltime@tm,w,c
  5568  0022A2  26D9               	addwf	fsr2l,f,c
  5569  0022A4  5018               	movf	RTCC_to_caltime@tm+1,w,c
  5570  0022A6  22DA               	addwfc	fsr2h,f,c
  5571  0022A8  010F               	movlb	15	; () banked
  5572  0022AA  513A               	movf	58,w,b	;volatile
  5573  0022AC  EC6D  F014         	call	_x_to_d
  5574  0022B0  6EDF               	movwf	indf2,c
  5575                           
  5576                           ;My_RTCC.c: 99: tm->MM = x_to_d(RTCVALH);
  5577  0022B2  EE20 F009          	lfsr	2,9
  5578  0022B6  5017               	movf	RTCC_to_caltime@tm,w,c
  5579  0022B8  26D9               	addwf	fsr2l,f,c
  5580  0022BA  5018               	movf	RTCC_to_caltime@tm+1,w,c
  5581  0022BC  22DA               	addwfc	fsr2h,f,c
  5582  0022BE  010F               	movlb	15	; () banked
  5583  0022C0  513B               	movf	59,w,b	;volatile
  5584  0022C2  EC6D  F014         	call	_x_to_d
  5585  0022C6  6EDF               	movwf	indf2,c
  5586                           
  5587                           ;My_RTCC.c: 100: tm->hh = x_to_d(RTCVALL);
  5588  0022C8  EE20 F006          	lfsr	2,6
  5589  0022CC  5017               	movf	RTCC_to_caltime@tm,w,c
  5590  0022CE  26D9               	addwf	fsr2l,f,c
  5591  0022D0  5018               	movf	RTCC_to_caltime@tm+1,w,c
  5592  0022D2  22DA               	addwfc	fsr2h,f,c
  5593  0022D4  010F               	movlb	15	; () banked
  5594  0022D6  513A               	movf	58,w,b	;volatile
  5595  0022D8  EC6D  F014         	call	_x_to_d
  5596  0022DC  6EDF               	movwf	indf2,c
  5597                           
  5598                           ;My_RTCC.c: 101: tm->EE = x_to_d(RTCVALH);
  5599  0022DE  EE20 F007          	lfsr	2,7
  5600  0022E2  5017               	movf	RTCC_to_caltime@tm,w,c
  5601  0022E4  26D9               	addwf	fsr2l,f,c
  5602  0022E6  5018               	movf	RTCC_to_caltime@tm+1,w,c
  5603  0022E8  22DA               	addwfc	fsr2h,f,c
  5604  0022EA  010F               	movlb	15	; () banked
  5605  0022EC  513B               	movf	59,w,b	;volatile
  5606  0022EE  EC6D  F014         	call	_x_to_d
  5607  0022F2  6EDF               	movwf	indf2,c
  5608                           
  5609                           ;My_RTCC.c: 102: tm->ss = x_to_d(RTCVALL);
  5610  0022F4  EE20 F004          	lfsr	2,4
  5611  0022F8  5017               	movf	RTCC_to_caltime@tm,w,c
  5612  0022FA  26D9               	addwf	fsr2l,f,c
  5613  0022FC  5018               	movf	RTCC_to_caltime@tm+1,w,c
  5614  0022FE  22DA               	addwfc	fsr2h,f,c
  5615  002300  010F               	movlb	15	; () banked
  5616  002302  513A               	movf	58,w,b	;volatile
  5617  002304  EC6D  F014         	call	_x_to_d
  5618  002308  6EDF               	movwf	indf2,c
  5619                           
  5620                           ;My_RTCC.c: 103: tm->mm = x_to_d(RTCVALH);
  5621  00230A  EE20 F005          	lfsr	2,5
  5622  00230E  5017               	movf	RTCC_to_caltime@tm,w,c
  5623  002310  26D9               	addwf	fsr2l,f,c
  5624  002312  5018               	movf	RTCC_to_caltime@tm+1,w,c
  5625  002314  22DA               	addwfc	fsr2h,f,c
  5626  002316  010F               	movlb	15	; () banked
  5627  002318  513B               	movf	59,w,b	;volatile
  5628  00231A  EC6D  F014         	call	_x_to_d
  5629  00231E  6EDF               	movwf	indf2,c
  5630  002320  0012               	return		;funcret
  5631  002322                     __end_of_RTCC_to_caltime:
  5632                           	opt stack 0
  5633                           tblptru	equ	0xFF8
  5634                           tblptrh	equ	0xFF7
  5635                           tblptrl	equ	0xFF6
  5636                           tablat	equ	0xFF5
  5637                           prodh	equ	0xFF4
  5638                           prodl	equ	0xFF3
  5639                           intcon	equ	0xFF2
  5640                           intcon2	equ	0xFF1
  5641                           postinc0	equ	0xFEE
  5642                           wreg	equ	0xFE8
  5643                           indf2	equ	0xFDF
  5644                           postinc2	equ	0xFDE
  5645                           postdec2	equ	0xFDD
  5646                           fsr2h	equ	0xFDA
  5647                           fsr2l	equ	0xFD9
  5648                           status	equ	0xFD8
  5649                           
  5650 ;; *************** function _x_to_d *****************
  5651 ;; Defined at:
  5652 ;;		line 52 in file "My_RTCC.c"
  5653 ;; Parameters:    Size  Location     Type
  5654 ;;  hex             1    wreg     unsigned char 
  5655 ;; Auto vars:     Size  Location     Type
  5656 ;;  hex             1   21[COMRAM] unsigned char 
  5657 ;; Return value:  Size  Location     Type
  5658 ;;                  1    wreg      unsigned char 
  5659 ;; Registers used:
  5660 ;;		wreg, status,2, status,0, prodl, prodh
  5661 ;; Tracked objects:
  5662 ;;		On entry : 0/0
  5663 ;;		On exit  : 0/0
  5664 ;;		Unchanged: 0/0
  5665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5667 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5668 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5669 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5670 ;;Total ram usage:        2 bytes
  5671 ;; Hardware stack levels used:    1
  5672 ;; Hardware stack levels required when called:    2
  5673 ;; This function calls:
  5674 ;;		Nothing
  5675 ;; This function is called by:
  5676 ;;		_RTCC_to_caltime
  5677 ;; This function uses a non-reentrant model
  5678 ;;
  5679                           
  5680                           	psect	text26
  5681  0028DA                     __ptext26:
  5682                           	opt stack 0
  5683  0028DA                     _x_to_d:
  5684                           	opt stack 24
  5685                           
  5686                           ;incstack = 0
  5687                           ;x_to_d@hex stored from wreg
  5688  0028DA  6E16               	movwf	x_to_d@hex,c
  5689                           
  5690                           ;My_RTCC.c: 53: return 10 * (0x0F & (hex >> 4)) + (0x0F & hex);
  5691  0028DC  C016  F015         	movff	x_to_d@hex,??_x_to_d
  5692  0028E0  0E0F               	movlw	15
  5693  0028E2  1615               	andwf	??_x_to_d,f,c
  5694  0028E4  3816               	swapf	x_to_d@hex,w,c
  5695  0028E6  0B0F               	andlw	15
  5696  0028E8  0B0F               	andlw	15
  5697  0028EA  0D0A               	mullw	10
  5698  0028EC  50F3               	movf	prodl,w,c
  5699  0028EE  2415               	addwf	??_x_to_d,w,c
  5700  0028F0  0012               	return	
  5701  0028F2                     __end_of_x_to_d:
  5702                           	opt stack 0
  5703                           tblptru	equ	0xFF8
  5704                           tblptrh	equ	0xFF7
  5705                           tblptrl	equ	0xFF6
  5706                           tablat	equ	0xFF5
  5707                           prodh	equ	0xFF4
  5708                           prodl	equ	0xFF3
  5709                           intcon	equ	0xFF2
  5710                           intcon2	equ	0xFF1
  5711                           postinc0	equ	0xFEE
  5712                           wreg	equ	0xFE8
  5713                           indf2	equ	0xFDF
  5714                           postinc2	equ	0xFDE
  5715                           postdec2	equ	0xFDD
  5716                           fsr2h	equ	0xFDA
  5717                           fsr2l	equ	0xFD9
  5718                           status	equ	0xFD8
  5719                           
  5720 ;; *************** function _RTCC_adjust_time_cursor *****************
  5721 ;; Defined at:
  5722 ;;		line 277 in file "My_RTCC.c"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;  tm              2   20[COMRAM] PTR struct .
  5725 ;;		 -> now(14), 
  5726 ;; Auto vars:     Size  Location     Type
  5727 ;;		None
  5728 ;; Return value:  Size  Location     Type
  5729 ;;		None               void
  5730 ;; Registers used:
  5731 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5732 ;; Tracked objects:
  5733 ;;		On entry : 0/0
  5734 ;;		On exit  : 0/0
  5735 ;;		Unchanged: 0/0
  5736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5737 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5740 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5741 ;;Total ram usage:        2 bytes
  5742 ;; Hardware stack levels used:    1
  5743 ;; Hardware stack levels required when called:    2
  5744 ;; This function calls:
  5745 ;;		Nothing
  5746 ;; This function is called by:
  5747 ;;		_RTCC_adjust_time_button
  5748 ;; This function uses a non-reentrant model
  5749 ;;
  5750                           
  5751                           	psect	text27
  5752  001FF8                     __ptext27:
  5753                           	opt stack 0
  5754  001FF8                     _RTCC_adjust_time_cursor:
  5755                           	opt stack 27
  5756                           
  5757                           ;My_RTCC.c: 278: if (tm->edit.flag.ss)tm->edit.flags = 0x02;
  5758                           
  5759                           ;incstack = 0
  5760  001FF8  EE20 F00D          	lfsr	2,13
  5761  001FFC  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5762  001FFE  26D9               	addwf	fsr2l,f,c
  5763  002000  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5764  002002  22DA               	addwfc	fsr2h,f,c
  5765  002004  A0DF               	btfss	indf2,0,c
  5766  002006  D009               	goto	l2248
  5767  002008  EE20 F00D          	lfsr	2,13
  5768  00200C  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5769  00200E  26D9               	addwf	fsr2l,f,c
  5770  002010  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5771  002012  22DA               	addwfc	fsr2h,f,c
  5772  002014  0E02               	movlw	2
  5773  002016  6EDF               	movwf	indf2,c
  5774  002018  0012               	return	
  5775  00201A                     l2248:
  5776                           
  5777                           ;My_RTCC.c: 279: else if (tm->edit.flag.mm)tm->edit.flags = 0x04;
  5778  00201A  EE20 F00D          	lfsr	2,13
  5779  00201E  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5780  002020  26D9               	addwf	fsr2l,f,c
  5781  002022  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5782  002024  22DA               	addwfc	fsr2h,f,c
  5783  002026  A2DF               	btfss	indf2,1,c
  5784  002028  D009               	goto	l2252
  5785  00202A  EE20 F00D          	lfsr	2,13
  5786  00202E  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5787  002030  26D9               	addwf	fsr2l,f,c
  5788  002032  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5789  002034  22DA               	addwfc	fsr2h,f,c
  5790  002036  0E04               	movlw	4
  5791  002038  6EDF               	movwf	indf2,c
  5792  00203A  0012               	return	
  5793  00203C                     l2252:
  5794                           
  5795                           ;My_RTCC.c: 280: else if (tm->edit.flag.hh)tm->edit.flags = 0x08;
  5796  00203C  EE20 F00D          	lfsr	2,13
  5797  002040  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5798  002042  26D9               	addwf	fsr2l,f,c
  5799  002044  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5800  002046  22DA               	addwfc	fsr2h,f,c
  5801  002048  A4DF               	btfss	indf2,2,c
  5802  00204A  D009               	goto	l2256
  5803  00204C  EE20 F00D          	lfsr	2,13
  5804  002050  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5805  002052  26D9               	addwf	fsr2l,f,c
  5806  002054  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5807  002056  22DA               	addwfc	fsr2h,f,c
  5808  002058  0E08               	movlw	8
  5809  00205A  6EDF               	movwf	indf2,c
  5810  00205C  0012               	return	
  5811  00205E                     l2256:
  5812                           
  5813                           ;My_RTCC.c: 281: else if (tm->edit.flag.DD)tm->edit.flags = 0x10;
  5814  00205E  EE20 F00D          	lfsr	2,13
  5815  002062  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5816  002064  26D9               	addwf	fsr2l,f,c
  5817  002066  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5818  002068  22DA               	addwfc	fsr2h,f,c
  5819  00206A  A6DF               	btfss	indf2,3,c
  5820  00206C  D009               	goto	l2260
  5821  00206E  EE20 F00D          	lfsr	2,13
  5822  002072  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5823  002074  26D9               	addwf	fsr2l,f,c
  5824  002076  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5825  002078  22DA               	addwfc	fsr2h,f,c
  5826  00207A  0E10               	movlw	16
  5827  00207C  6EDF               	movwf	indf2,c
  5828  00207E  0012               	return	
  5829  002080                     l2260:
  5830                           
  5831                           ;My_RTCC.c: 282: else if (tm->edit.flag.MM)tm->edit.flags = 0x20;
  5832  002080  EE20 F00D          	lfsr	2,13
  5833  002084  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5834  002086  26D9               	addwf	fsr2l,f,c
  5835  002088  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5836  00208A  22DA               	addwfc	fsr2h,f,c
  5837  00208C  A8DF               	btfss	indf2,4,c
  5838  00208E  D009               	goto	l2264
  5839  002090  EE20 F00D          	lfsr	2,13
  5840  002094  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5841  002096  26D9               	addwf	fsr2l,f,c
  5842  002098  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5843  00209A  22DA               	addwfc	fsr2h,f,c
  5844  00209C  0E20               	movlw	32
  5845  00209E  6EDF               	movwf	indf2,c
  5846  0020A0  0012               	return	
  5847  0020A2                     l2264:
  5848                           
  5849                           ;My_RTCC.c: 283: else if (tm->edit.flag.YY)tm->edit.flags = 0x01;
  5850  0020A2  EE20 F00D          	lfsr	2,13
  5851  0020A6  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5852  0020A8  26D9               	addwf	fsr2l,f,c
  5853  0020AA  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5854  0020AC  22DA               	addwfc	fsr2h,f,c
  5855  0020AE  AADF               	btfss	indf2,5,c
  5856  0020B0  D009               	goto	l2268
  5857  0020B2  EE20 F00D          	lfsr	2,13
  5858  0020B6  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5859  0020B8  26D9               	addwf	fsr2l,f,c
  5860  0020BA  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5861  0020BC  22DA               	addwfc	fsr2h,f,c
  5862  0020BE  0E01               	movlw	1
  5863  0020C0  6EDF               	movwf	indf2,c
  5864  0020C2  0012               	return	
  5865  0020C4                     l2268:
  5866                           
  5867                           ;My_RTCC.c: 284: else tm->edit.flags = 0x00;
  5868  0020C4  EE20 F00D          	lfsr	2,13
  5869  0020C8  5015               	movf	RTCC_adjust_time_cursor@tm,w,c
  5870  0020CA  26D9               	addwf	fsr2l,f,c
  5871  0020CC  5016               	movf	RTCC_adjust_time_cursor@tm+1,w,c
  5872  0020CE  22DA               	addwfc	fsr2h,f,c
  5873  0020D0  0E00               	movlw	0
  5874  0020D2  6EDF               	movwf	indf2,c
  5875  0020D4  0012               	return	
  5876  0020D6                     __end_of_RTCC_adjust_time_cursor:
  5877                           	opt stack 0
  5878                           tblptru	equ	0xFF8
  5879                           tblptrh	equ	0xFF7
  5880                           tblptrl	equ	0xFF6
  5881                           tablat	equ	0xFF5
  5882                           prodh	equ	0xFF4
  5883                           prodl	equ	0xFF3
  5884                           intcon	equ	0xFF2
  5885                           intcon2	equ	0xFF1
  5886                           postinc0	equ	0xFEE
  5887                           wreg	equ	0xFE8
  5888                           indf2	equ	0xFDF
  5889                           postinc2	equ	0xFDE
  5890                           postdec2	equ	0xFDD
  5891                           fsr2h	equ	0xFDA
  5892                           fsr2l	equ	0xFD9
  5893                           status	equ	0xFD8
  5894                           
  5895 ;; *************** function _ISR *****************
  5896 ;; Defined at:
  5897 ;;		line 45 in file "main.c"
  5898 ;; Parameters:    Size  Location     Type
  5899 ;;		None
  5900 ;; Auto vars:     Size  Location     Type
  5901 ;;		None
  5902 ;; Return value:  Size  Location     Type
  5903 ;;		None               void
  5904 ;; Registers used:
  5905 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5906 ;; Tracked objects:
  5907 ;;		On entry : 0/0
  5908 ;;		On exit  : 0/0
  5909 ;;		Unchanged: 0/0
  5910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5913 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5914 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5915 ;;Total ram usage:       15 bytes
  5916 ;; Hardware stack levels used:    1
  5917 ;; Hardware stack levels required when called:    1
  5918 ;; This function calls:
  5919 ;;		_button_timer_interrupt
  5920 ;; This function is called by:
  5921 ;;		Interrupt level 2
  5922 ;; This function uses a non-reentrant model
  5923 ;;
  5924                           
  5925                           	psect	intcode
  5926  000008                     __pintcode:
  5927                           	opt stack 0
  5928  000008                     _ISR:
  5929                           	opt stack 23
  5930                           
  5931                           ;incstack = 0
  5932  000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5933  00000A  CFFA F007          	movff	pclath,??_ISR+1
  5934  00000E  CFFB F008          	movff	pclatu,??_ISR+2
  5935  000012  CFE9 F009          	movff	fsr0l,??_ISR+3
  5936  000016  CFEA F00A          	movff	fsr0h,??_ISR+4
  5937  00001A  CFE1 F00B          	movff	fsr1l,??_ISR+5
  5938  00001E  CFE2 F00C          	movff	fsr1h,??_ISR+6
  5939  000022  CFD9 F00D          	movff	fsr2l,??_ISR+7
  5940  000026  CFDA F00E          	movff	fsr2h,??_ISR+8
  5941  00002A  CFF3 F00F          	movff	prodl,??_ISR+9
  5942  00002E  CFF4 F010          	movff	prodh,??_ISR+10
  5943  000032  CFF6 F011          	movff	tblptrl,??_ISR+11
  5944  000036  CFF7 F012          	movff	tblptrh,??_ISR+12
  5945  00003A  CFF8 F013          	movff	tblptru,??_ISR+13
  5946  00003E  CFF5 F014          	movff	tablat,??_ISR+14
  5947                           
  5948                           ;main.c: 46: if (PIE1bits.TMR1IE && PIR1bits.TMR1IF) {
  5949  000042  B09D               	btfsc	3997,0,c	;volatile
  5950  000044  A09E               	btfss	3998,0,c	;volatile
  5951  000046  D001               	goto	i2l79
  5952                           
  5953                           ;main.c: 47: PIR1bits.TMR1IF = 0;
  5954  000048  909E               	bcf	3998,0,c	;volatile
  5955  00004A                     i2l79:
  5956                           
  5957                           ;main.c: 48: }
  5958                           ;main.c: 49: if (PIE2bits.TMR3IE && PIR2bits.TMR3IF) {
  5959  00004A  B2A0               	btfsc	4000,1,c	;volatile
  5960  00004C  A2A1               	btfss	4001,1,c	;volatile
  5961  00004E  D030               	goto	i2l2772
  5962                           
  5963                           ;main.c: 50: PIR2bits.TMR3IF = 0;
  5964  000050  92A1               	bcf	4001,1,c	;volatile
  5965                           
  5966                           ;main.c: 51: LATAbits.LATA0 = !LATAbits.LATA0;
  5967  000052  B089               	btfsc	3977,0,c	;volatile
  5968  000054  D003               	goto	i2u272_40
  5969  000056  6A06               	clrf	??_ISR& (0+255),c
  5970  000058  2A06               	incf	??_ISR& (0+255),f,c
  5971  00005A  D001               	goto	i2u273_48
  5972  00005C                     i2u272_40:
  5973  00005C  6A06               	clrf	??_ISR& (0+255),c
  5974  00005E                     i2u273_48:
  5975  00005E  5089               	movf	3977,w,c	;volatile
  5976  000060  1806               	xorwf	??_ISR,w,c
  5977  000062  0BFE               	andlw	-2
  5978  000064  1806               	xorwf	??_ISR,w,c
  5979  000066  6E89               	movwf	3977,c	;volatile
  5980                           
  5981                           ;main.c: 52: button_timer_interrupt(&mode, !PORTBbits.RB0);
  5982  000068  0E46               	movlw	low _mode
  5983  00006A  6E01               	movwf	button_timer_interrupt@bt,c
  5984  00006C  0E00               	movlw	high _mode
  5985  00006E  6E02               	movwf	button_timer_interrupt@bt+1,c
  5986  000070  B081               	btfsc	3969,0,c	;volatile
  5987  000072  D002               	goto	i2u274_40
  5988  000074  0E01               	movlw	1
  5989  000076  D001               	goto	i2u275_40
  5990  000078                     i2u274_40:
  5991  000078  0E00               	movlw	0
  5992  00007A                     i2u275_40:
  5993  00007A  6E03               	movwf	button_timer_interrupt@sw_value,c
  5994  00007C  ECC3  F009         	call	_button_timer_interrupt	;wreg free
  5995                           
  5996                           ;main.c: 53: button_timer_interrupt(&inc, !PORTBbits.RB1);
  5997  000080  0E42               	movlw	low _inc
  5998  000082  6E01               	movwf	button_timer_interrupt@bt,c
  5999  000084  0E00               	movlw	high _inc
  6000  000086  6E02               	movwf	button_timer_interrupt@bt+1,c
  6001  000088  B281               	btfsc	3969,1,c	;volatile
  6002  00008A  D002               	goto	i2u276_40
  6003  00008C  0E01               	movlw	1
  6004  00008E  D001               	goto	i2u277_40
  6005  000090                     i2u276_40:
  6006  000090  0E00               	movlw	0
  6007  000092                     i2u277_40:
  6008  000092  6E03               	movwf	button_timer_interrupt@sw_value,c
  6009  000094  ECC3  F009         	call	_button_timer_interrupt	;wreg free
  6010                           
  6011                           ;main.c: 54: button_timer_interrupt(&dec, !PORTBbits.RB2);
  6012  000098  0E3E               	movlw	low _dec
  6013  00009A  6E01               	movwf	button_timer_interrupt@bt,c
  6014  00009C  0E00               	movlw	high _dec
  6015  00009E  6E02               	movwf	button_timer_interrupt@bt+1,c
  6016  0000A0  B481               	btfsc	3969,2,c	;volatile
  6017  0000A2  D002               	goto	i2u278_40
  6018  0000A4  0E01               	movlw	1
  6019  0000A6  D001               	goto	i2u279_40
  6020  0000A8                     i2u278_40:
  6021  0000A8  0E00               	movlw	0
  6022  0000AA                     i2u279_40:
  6023  0000AA  6E03               	movwf	button_timer_interrupt@sw_value,c
  6024  0000AC  ECC3  F009         	call	_button_timer_interrupt	;wreg free
  6025  0000B0                     i2l2772:
  6026                           
  6027                           ;main.c: 55: }
  6028                           ;main.c: 56: if (PIR1bits.RCIF && PIE1bits.RCIE) {
  6029  0000B0  BA9E               	btfsc	3998,5,c	;volatile
  6030  0000B2  AA9D               	btfss	3997,5,c	;volatile
  6031  0000B4  D004               	goto	i2l85
  6032  0000B6                     i2l82:
  6033  0000B6  A89E               	btfss	3998,4,c	;volatile
  6034  0000B8  D7FE               	goto	i2l82
  6035                           
  6036                           ;main.c: 58: TXREG1 = RCREG1;
  6037  0000BA  CFAF FFAE          	movff	4015,4014	;volatile
  6038  0000BE                     i2l85:
  6039  0000BE  C014  FFF5         	movff	??_ISR+14,tablat
  6040  0000C2  C013  FFF8         	movff	??_ISR+13,tblptru
  6041  0000C6  C012  FFF7         	movff	??_ISR+12,tblptrh
  6042  0000CA  C011  FFF6         	movff	??_ISR+11,tblptrl
  6043  0000CE  C010  FFF4         	movff	??_ISR+10,prodh
  6044  0000D2  C00F  FFF3         	movff	??_ISR+9,prodl
  6045  0000D6  C00E  FFDA         	movff	??_ISR+8,fsr2h
  6046  0000DA  C00D  FFD9         	movff	??_ISR+7,fsr2l
  6047  0000DE  C00C  FFE2         	movff	??_ISR+6,fsr1h
  6048  0000E2  C00B  FFE1         	movff	??_ISR+5,fsr1l
  6049  0000E6  C00A  FFEA         	movff	??_ISR+4,fsr0h
  6050  0000EA  C009  FFE9         	movff	??_ISR+3,fsr0l
  6051  0000EE  C008  FFFB         	movff	??_ISR+2,pclatu
  6052  0000F2  C007  FFFA         	movff	??_ISR+1,pclath
  6053  0000F6  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6054  0000F8  0011               	retfie		f
  6055  0000FA                     __end_of_ISR:
  6056                           	opt stack 0
  6057                           pclatu	equ	0xFFB
  6058                           pclath	equ	0xFFA
  6059                           tblptru	equ	0xFF8
  6060                           tblptrh	equ	0xFF7
  6061                           tblptrl	equ	0xFF6
  6062                           tablat	equ	0xFF5
  6063                           prodh	equ	0xFF4
  6064                           prodl	equ	0xFF3
  6065                           intcon	equ	0xFF2
  6066                           intcon2	equ	0xFF1
  6067                           postinc0	equ	0xFEE
  6068                           fsr0h	equ	0xFEA
  6069                           fsr0l	equ	0xFE9
  6070                           wreg	equ	0xFE8
  6071                           fsr1h	equ	0xFE2
  6072                           fsr1l	equ	0xFE1
  6073                           indf2	equ	0xFDF
  6074                           postinc2	equ	0xFDE
  6075                           postdec2	equ	0xFDD
  6076                           fsr2h	equ	0xFDA
  6077                           fsr2l	equ	0xFD9
  6078                           status	equ	0xFD8
  6079                           
  6080 ;; *************** function _button_timer_interrupt *****************
  6081 ;; Defined at:
  6082 ;;		line 3 in file "My_button.c"
  6083 ;; Parameters:    Size  Location     Type
  6084 ;;  bt              2    0[COMRAM] PTR struct button
  6085 ;;		 -> dec(4), inc(4), mode(4), 
  6086 ;;  sw_value        1    2[COMRAM] unsigned char 
  6087 ;; Auto vars:     Size  Location     Type
  6088 ;;		None
  6089 ;; Return value:  Size  Location     Type
  6090 ;;		None               void
  6091 ;; Registers used:
  6092 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6093 ;; Tracked objects:
  6094 ;;		On entry : 0/0
  6095 ;;		On exit  : 0/0
  6096 ;;		Unchanged: 0/0
  6097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6098 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6100 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6101 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6102 ;;Total ram usage:        5 bytes
  6103 ;; Hardware stack levels used:    1
  6104 ;; This function calls:
  6105 ;;		Nothing
  6106 ;; This function is called by:
  6107 ;;		_ISR
  6108 ;; This function uses a non-reentrant model
  6109 ;;
  6110                           
  6111                           	psect	text29
  6112  001386                     __ptext29:
  6113                           	opt stack 0
  6114  001386                     _button_timer_interrupt:
  6115                           	opt stack 23
  6116                           
  6117                           ;My_button.c: 4: if (sw_value) {
  6118                           
  6119                           ;incstack = 0
  6120  001386  5003               	movf	button_timer_interrupt@sw_value,w,c
  6121  001388  B4D8               	btfsc	status,2,c
  6122  00138A  D098               	goto	i2l2448
  6123                           
  6124                           ;My_button.c: 5: if (bt->cnt_sw == 900)bt->flag.long_holding_7 = 1;
  6125  00138C  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6126  001390  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6127  001394  0E84               	movlw	132
  6128  001396  18DE               	xorwf	postinc2,w,c
  6129  001398  E10B               	bnz	i2l291
  6130  00139A  0E03               	movlw	3
  6131  00139C  18DE               	xorwf	postinc2,w,c
  6132  00139E  A4D8               	btfss	status,2,c
  6133  0013A0  D007               	goto	i2l291
  6134  0013A2  EE20 F003          	lfsr	2,3
  6135  0013A6  5001               	movf	button_timer_interrupt@bt,w,c
  6136  0013A8  26D9               	addwf	fsr2l,f,c
  6137  0013AA  5002               	movf	button_timer_interrupt@bt+1,w,c
  6138  0013AC  22DA               	addwfc	fsr2h,f,c
  6139  0013AE  8EDF               	bsf	indf2,7,c
  6140  0013B0                     i2l291:
  6141                           
  6142                           ;My_button.c: 6: if (bt->cnt_sw == 700)bt->flag.long_holding_6 = 1;
  6143  0013B0  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6144  0013B4  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6145  0013B8  0EBC               	movlw	188
  6146  0013BA  18DE               	xorwf	postinc2,w,c
  6147  0013BC  E10B               	bnz	i2l292
  6148  0013BE  0E02               	movlw	2
  6149  0013C0  18DE               	xorwf	postinc2,w,c
  6150  0013C2  A4D8               	btfss	status,2,c
  6151  0013C4  D007               	goto	i2l292
  6152  0013C6  EE20 F003          	lfsr	2,3
  6153  0013CA  5001               	movf	button_timer_interrupt@bt,w,c
  6154  0013CC  26D9               	addwf	fsr2l,f,c
  6155  0013CE  5002               	movf	button_timer_interrupt@bt+1,w,c
  6156  0013D0  22DA               	addwfc	fsr2h,f,c
  6157  0013D2  8CDF               	bsf	indf2,6,c
  6158  0013D4                     i2l292:
  6159                           
  6160                           ;My_button.c: 7: if (bt->cnt_sw == 500)bt->flag.long_holding_5 = 1;
  6161  0013D4  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6162  0013D8  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6163  0013DC  0EF4               	movlw	244
  6164  0013DE  18DE               	xorwf	postinc2,w,c
  6165  0013E0  E10A               	bnz	i2l293
  6166  0013E2  04DE               	decf	postinc2,w,c
  6167  0013E4  A4D8               	btfss	status,2,c
  6168  0013E6  D007               	goto	i2l293
  6169  0013E8  EE20 F003          	lfsr	2,3
  6170  0013EC  5001               	movf	button_timer_interrupt@bt,w,c
  6171  0013EE  26D9               	addwf	fsr2l,f,c
  6172  0013F0  5002               	movf	button_timer_interrupt@bt+1,w,c
  6173  0013F2  22DA               	addwfc	fsr2h,f,c
  6174  0013F4  8ADF               	bsf	indf2,5,c
  6175  0013F6                     i2l293:
  6176                           
  6177                           ;My_button.c: 8: if (bt->cnt_sw == 300)bt->flag.long_holding_4 = 1;
  6178  0013F6  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6179  0013FA  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6180  0013FE  0E2C               	movlw	44
  6181  001400  18DE               	xorwf	postinc2,w,c
  6182  001402  E10A               	bnz	i2l294
  6183  001404  04DE               	decf	postinc2,w,c
  6184  001406  A4D8               	btfss	status,2,c
  6185  001408  D007               	goto	i2l294
  6186  00140A  EE20 F003          	lfsr	2,3
  6187  00140E  5001               	movf	button_timer_interrupt@bt,w,c
  6188  001410  26D9               	addwf	fsr2l,f,c
  6189  001412  5002               	movf	button_timer_interrupt@bt+1,w,c
  6190  001414  22DA               	addwfc	fsr2h,f,c
  6191  001416  88DF               	bsf	indf2,4,c
  6192  001418                     i2l294:
  6193                           
  6194                           ;My_button.c: 9: if (bt->cnt_sw == 150)bt->flag.long_holding_3 = 1;
  6195  001418  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6196  00141C  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6197  001420  0E96               	movlw	150
  6198  001422  18DE               	xorwf	postinc2,w,c
  6199  001424  10DE               	iorwf	postinc2,w,c
  6200  001426  A4D8               	btfss	status,2,c
  6201  001428  D007               	goto	i2l295
  6202  00142A  EE20 F003          	lfsr	2,3
  6203  00142E  5001               	movf	button_timer_interrupt@bt,w,c
  6204  001430  26D9               	addwf	fsr2l,f,c
  6205  001432  5002               	movf	button_timer_interrupt@bt+1,w,c
  6206  001434  22DA               	addwfc	fsr2h,f,c
  6207  001436  86DF               	bsf	indf2,3,c
  6208  001438                     i2l295:
  6209                           
  6210                           ;My_button.c: 10: if (bt->cnt_sw == 60)bt->flag.long_holding_2 = 1;
  6211  001438  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6212  00143C  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6213  001440  0E3C               	movlw	60
  6214  001442  18DE               	xorwf	postinc2,w,c
  6215  001444  10DE               	iorwf	postinc2,w,c
  6216  001446  A4D8               	btfss	status,2,c
  6217  001448  D007               	goto	i2l296
  6218  00144A  EE20 F003          	lfsr	2,3
  6219  00144E  5001               	movf	button_timer_interrupt@bt,w,c
  6220  001450  26D9               	addwf	fsr2l,f,c
  6221  001452  5002               	movf	button_timer_interrupt@bt+1,w,c
  6222  001454  22DA               	addwfc	fsr2h,f,c
  6223  001456  84DF               	bsf	indf2,2,c
  6224  001458                     i2l296:
  6225                           
  6226                           ;My_button.c: 11: if (bt->cnt_sw == 16)bt->flag.long_holding_1 = 1;
  6227  001458  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6228  00145C  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6229  001460  0E10               	movlw	16
  6230  001462  18DE               	xorwf	postinc2,w,c
  6231  001464  10DE               	iorwf	postinc2,w,c
  6232  001466  A4D8               	btfss	status,2,c
  6233  001468  D007               	goto	i2l297
  6234  00146A  EE20 F003          	lfsr	2,3
  6235  00146E  5001               	movf	button_timer_interrupt@bt,w,c
  6236  001470  26D9               	addwf	fsr2l,f,c
  6237  001472  5002               	movf	button_timer_interrupt@bt+1,w,c
  6238  001474  22DA               	addwfc	fsr2h,f,c
  6239  001476  82DF               	bsf	indf2,1,c
  6240  001478                     i2l297:
  6241                           
  6242                           ;My_button.c: 12: if (bt->cnt_sw == 2)bt->flag.pressing = 1;
  6243  001478  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6244  00147C  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6245  001480  0E02               	movlw	2
  6246  001482  18DE               	xorwf	postinc2,w,c
  6247  001484  10DE               	iorwf	postinc2,w,c
  6248  001486  A4D8               	btfss	status,2,c
  6249  001488  D007               	goto	i2l298
  6250  00148A  EE20 F003          	lfsr	2,3
  6251  00148E  5001               	movf	button_timer_interrupt@bt,w,c
  6252  001490  26D9               	addwf	fsr2l,f,c
  6253  001492  5002               	movf	button_timer_interrupt@bt+1,w,c
  6254  001494  22DA               	addwfc	fsr2h,f,c
  6255  001496  80DF               	bsf	indf2,0,c
  6256  001498                     i2l298:
  6257                           
  6258                           ;My_button.c: 13: if (bt->cnt_sw < 900 + 1) bt->cnt_sw++;
  6259  001498  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6260  00149C  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6261  0014A0  0E85               	movlw	133
  6262  0014A2  5CDE               	subwf	postinc2,w,c
  6263  0014A4  0E03               	movlw	3
  6264  0014A6  58DE               	subwfb	postinc2,w,c
  6265  0014A8  B0D8               	btfsc	status,0,c
  6266  0014AA  0012               	return	
  6267  0014AC  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6268  0014B0  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6269  0014B4  2ADE               	incf	postinc2,f,c
  6270  0014B6  0E00               	movlw	0
  6271  0014B8  22DD               	addwfc	postdec2,f,c
  6272                           
  6273                           ;My_button.c: 14: } else {
  6274  0014BA  0012               	return	
  6275  0014BC                     i2l2448:
  6276                           
  6277                           ;My_button.c: 15: if (bt->cnt_sw >= 900)bt->flag.long_hold_7 = 1;
  6278  0014BC  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6279  0014C0  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6280  0014C4  0E84               	movlw	132
  6281  0014C6  5CDE               	subwf	postinc2,w,c
  6282  0014C8  0E03               	movlw	3
  6283  0014CA  58DE               	subwfb	postinc2,w,c
  6284  0014CC  A0D8               	btfss	status,0,c
  6285  0014CE  D008               	goto	i2l2452
  6286  0014D0  EE20 F002          	lfsr	2,2
  6287  0014D4  5001               	movf	button_timer_interrupt@bt,w,c
  6288  0014D6  26D9               	addwf	fsr2l,f,c
  6289  0014D8  5002               	movf	button_timer_interrupt@bt+1,w,c
  6290  0014DA  22DA               	addwfc	fsr2h,f,c
  6291  0014DC  8EDF               	bsf	indf2,7,c
  6292  0014DE  D081               	goto	i2l2480
  6293  0014E0                     i2l2452:
  6294                           
  6295                           ;My_button.c: 16: else if (bt->cnt_sw >= 700)bt->flag.long_hold_6 = 1;
  6296  0014E0  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6297  0014E4  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6298  0014E8  0EBC               	movlw	188
  6299  0014EA  5CDE               	subwf	postinc2,w,c
  6300  0014EC  0E02               	movlw	2
  6301  0014EE  58DE               	subwfb	postinc2,w,c
  6302  0014F0  A0D8               	btfss	status,0,c
  6303  0014F2  D008               	goto	i2l2456
  6304  0014F4  EE20 F002          	lfsr	2,2
  6305  0014F8  5001               	movf	button_timer_interrupt@bt,w,c
  6306  0014FA  26D9               	addwf	fsr2l,f,c
  6307  0014FC  5002               	movf	button_timer_interrupt@bt+1,w,c
  6308  0014FE  22DA               	addwfc	fsr2h,f,c
  6309  001500  8CDF               	bsf	indf2,6,c
  6310  001502  D06F               	goto	i2l2480
  6311  001504                     i2l2456:
  6312                           
  6313                           ;My_button.c: 17: else if (bt->cnt_sw >= 500)bt->flag.long_hold_5 = 1;
  6314  001504  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6315  001508  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6316  00150C  0EF4               	movlw	244
  6317  00150E  5CDE               	subwf	postinc2,w,c
  6318  001510  0E01               	movlw	1
  6319  001512  58DE               	subwfb	postinc2,w,c
  6320  001514  A0D8               	btfss	status,0,c
  6321  001516  D008               	goto	i2l2460
  6322  001518  EE20 F002          	lfsr	2,2
  6323  00151C  5001               	movf	button_timer_interrupt@bt,w,c
  6324  00151E  26D9               	addwf	fsr2l,f,c
  6325  001520  5002               	movf	button_timer_interrupt@bt+1,w,c
  6326  001522  22DA               	addwfc	fsr2h,f,c
  6327  001524  8ADF               	bsf	indf2,5,c
  6328  001526  D05D               	goto	i2l2480
  6329  001528                     i2l2460:
  6330                           
  6331                           ;My_button.c: 18: else if (bt->cnt_sw >= 300)bt->flag.long_hold_4 = 1;
  6332  001528  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6333  00152C  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6334  001530  0E2C               	movlw	44
  6335  001532  5CDE               	subwf	postinc2,w,c
  6336  001534  0E01               	movlw	1
  6337  001536  58DE               	subwfb	postinc2,w,c
  6338  001538  A0D8               	btfss	status,0,c
  6339  00153A  D008               	goto	i2l2464
  6340  00153C  EE20 F002          	lfsr	2,2
  6341  001540  5001               	movf	button_timer_interrupt@bt,w,c
  6342  001542  26D9               	addwf	fsr2l,f,c
  6343  001544  5002               	movf	button_timer_interrupt@bt+1,w,c
  6344  001546  22DA               	addwfc	fsr2h,f,c
  6345  001548  88DF               	bsf	indf2,4,c
  6346  00154A  D04B               	goto	i2l2480
  6347  00154C                     i2l2464:
  6348                           
  6349                           ;My_button.c: 19: else if (bt->cnt_sw >= 150)bt->flag.long_hold_3 = 1;
  6350  00154C  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6351  001550  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6352  001554  0E01               	movlw	1
  6353  001556  50DB               	movf	plusw2,w,c
  6354  001558  E104               	bnz	i2u231_40
  6355  00155A  0E96               	movlw	150
  6356  00155C  5CDE               	subwf	postinc2,w,c
  6357  00155E  A0D8               	btfss	status,0,c
  6358  001560  D008               	goto	i2l2468
  6359  001562                     i2u231_40:
  6360  001562  EE20 F002          	lfsr	2,2
  6361  001566  5001               	movf	button_timer_interrupt@bt,w,c
  6362  001568  26D9               	addwf	fsr2l,f,c
  6363  00156A  5002               	movf	button_timer_interrupt@bt+1,w,c
  6364  00156C  22DA               	addwfc	fsr2h,f,c
  6365  00156E  86DF               	bsf	indf2,3,c
  6366  001570  D038               	goto	i2l2480
  6367  001572                     i2l2468:
  6368                           
  6369                           ;My_button.c: 20: else if (bt->cnt_sw >= 60)bt->flag.long_hold_2 = 1;
  6370  001572  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6371  001576  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6372  00157A  0E01               	movlw	1
  6373  00157C  50DB               	movf	plusw2,w,c
  6374  00157E  E104               	bnz	i2u232_40
  6375  001580  0E3C               	movlw	60
  6376  001582  5CDE               	subwf	postinc2,w,c
  6377  001584  A0D8               	btfss	status,0,c
  6378  001586  D008               	goto	i2l2472
  6379  001588                     i2u232_40:
  6380  001588  EE20 F002          	lfsr	2,2
  6381  00158C  5001               	movf	button_timer_interrupt@bt,w,c
  6382  00158E  26D9               	addwf	fsr2l,f,c
  6383  001590  5002               	movf	button_timer_interrupt@bt+1,w,c
  6384  001592  22DA               	addwfc	fsr2h,f,c
  6385  001594  84DF               	bsf	indf2,2,c
  6386  001596  D025               	goto	i2l2480
  6387  001598                     i2l2472:
  6388                           
  6389                           ;My_button.c: 21: else if (bt->cnt_sw >= 16)bt->flag.long_hold_1 = 1;
  6390  001598  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6391  00159C  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6392  0015A0  0E01               	movlw	1
  6393  0015A2  50DB               	movf	plusw2,w,c
  6394  0015A4  E104               	bnz	i2u233_40
  6395  0015A6  0E10               	movlw	16
  6396  0015A8  5CDE               	subwf	postinc2,w,c
  6397  0015AA  A0D8               	btfss	status,0,c
  6398  0015AC  D008               	goto	i2l2476
  6399  0015AE                     i2u233_40:
  6400  0015AE  EE20 F002          	lfsr	2,2
  6401  0015B2  5001               	movf	button_timer_interrupt@bt,w,c
  6402  0015B4  26D9               	addwf	fsr2l,f,c
  6403  0015B6  5002               	movf	button_timer_interrupt@bt+1,w,c
  6404  0015B8  22DA               	addwfc	fsr2h,f,c
  6405  0015BA  82DF               	bsf	indf2,1,c
  6406  0015BC  D012               	goto	i2l2480
  6407  0015BE                     i2l2476:
  6408                           
  6409                           ;My_button.c: 22: else if (bt->cnt_sw >= 2)bt->flag.press = 1;
  6410  0015BE  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6411  0015C2  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6412  0015C6  0E01               	movlw	1
  6413  0015C8  50DB               	movf	plusw2,w,c
  6414  0015CA  E104               	bnz	i2u234_40
  6415  0015CC  0E02               	movlw	2
  6416  0015CE  5CDE               	subwf	postinc2,w,c
  6417  0015D0  A0D8               	btfss	status,0,c
  6418  0015D2  D007               	goto	i2l2480
  6419  0015D4                     i2u234_40:
  6420  0015D4  EE20 F002          	lfsr	2,2
  6421  0015D8  5001               	movf	button_timer_interrupt@bt,w,c
  6422  0015DA  26D9               	addwf	fsr2l,f,c
  6423  0015DC  5002               	movf	button_timer_interrupt@bt+1,w,c
  6424  0015DE  22DA               	addwfc	fsr2h,f,c
  6425  0015E0  80DF               	bsf	indf2,0,c
  6426  0015E2                     i2l2480:
  6427                           
  6428                           ;My_button.c: 23: bt->cnt_sw = 0;
  6429  0015E2  C001  FFD9         	movff	button_timer_interrupt@bt,fsr2l
  6430  0015E6  C002  FFDA         	movff	button_timer_interrupt@bt+1,fsr2h
  6431  0015EA  0E00               	movlw	0
  6432  0015EC  6EDE               	movwf	postinc2,c
  6433  0015EE  0E00               	movlw	0
  6434  0015F0  6EDD               	movwf	postdec2,c
  6435                           
  6436                           ;My_button.c: 24: bt->flags &= 0x00FF;
  6437  0015F2  EE20 F002          	lfsr	2,2
  6438  0015F6  5001               	movf	button_timer_interrupt@bt,w,c
  6439  0015F8  26D9               	addwf	fsr2l,f,c
  6440  0015FA  5002               	movf	button_timer_interrupt@bt+1,w,c
  6441  0015FC  22DA               	addwfc	fsr2h,f,c
  6442  0015FE  0EFF               	movlw	255
  6443  001600  16DE               	andwf	postinc2,f,c
  6444  001602  0E00               	movlw	0
  6445  001604  16DD               	andwf	postdec2,f,c
  6446  001606  0012               	return	
  6447  001608                     __end_of_button_timer_interrupt:
  6448                           	opt stack 0
  6449                           pclatu	equ	0xFFB
  6450                           pclath	equ	0xFFA
  6451                           tblptru	equ	0xFF8
  6452                           tblptrh	equ	0xFF7
  6453                           tblptrl	equ	0xFF6
  6454                           tablat	equ	0xFF5
  6455                           prodh	equ	0xFF4
  6456                           prodl	equ	0xFF3
  6457                           intcon	equ	0xFF2
  6458                           intcon2	equ	0xFF1
  6459                           postinc0	equ	0xFEE
  6460                           fsr0h	equ	0xFEA
  6461                           fsr0l	equ	0xFE9
  6462                           wreg	equ	0xFE8
  6463                           fsr1h	equ	0xFE2
  6464                           fsr1l	equ	0xFE1
  6465                           indf2	equ	0xFDF
  6466                           postinc2	equ	0xFDE
  6467                           postdec2	equ	0xFDD
  6468                           plusw2	equ	0xFDB
  6469                           fsr2h	equ	0xFDA
  6470                           fsr2l	equ	0xFD9
  6471                           status	equ	0xFD8
  6472                           pclatu	equ	0xFFB
  6473                           pclath	equ	0xFFA
  6474                           tblptru	equ	0xFF8
  6475                           tblptrh	equ	0xFF7
  6476                           tblptrl	equ	0xFF6
  6477                           tablat	equ	0xFF5
  6478                           prodh	equ	0xFF4
  6479                           prodl	equ	0xFF3
  6480                           intcon	equ	0xFF2
  6481                           intcon2	equ	0xFF1
  6482                           postinc0	equ	0xFEE
  6483                           fsr0h	equ	0xFEA
  6484                           fsr0l	equ	0xFE9
  6485                           wreg	equ	0xFE8
  6486                           fsr1h	equ	0xFE2
  6487                           fsr1l	equ	0xFE1
  6488                           indf2	equ	0xFDF
  6489                           postinc2	equ	0xFDE
  6490                           postdec2	equ	0xFDD
  6491                           plusw2	equ	0xFDB
  6492                           fsr2h	equ	0xFDA
  6493                           fsr2l	equ	0xFD9
  6494                           status	equ	0xFD8
  6495                           
  6496                           	psect	rparam
  6497  0000                     pclatu	equ	0xFFB
  6498                           pclath	equ	0xFFA
  6499                           tblptru	equ	0xFF8
  6500                           tblptrh	equ	0xFF7
  6501                           tblptrl	equ	0xFF6
  6502                           tablat	equ	0xFF5
  6503                           prodh	equ	0xFF4
  6504                           prodl	equ	0xFF3
  6505                           intcon	equ	0xFF2
  6506                           intcon2	equ	0xFF1
  6507                           postinc0	equ	0xFEE
  6508                           fsr0h	equ	0xFEA
  6509                           fsr0l	equ	0xFE9
  6510                           wreg	equ	0xFE8
  6511                           fsr1h	equ	0xFE2
  6512                           fsr1l	equ	0xFE1
  6513                           indf2	equ	0xFDF
  6514                           postinc2	equ	0xFDE
  6515                           postdec2	equ	0xFDD
  6516                           plusw2	equ	0xFDB
  6517                           fsr2h	equ	0xFDA
  6518                           fsr2l	equ	0xFD9
  6519                           status	equ	0xFD8
  6520                           
  6521                           	psect	temp
  6522  00004B                     btemp:
  6523                           	opt stack 0
  6524  00004B                     	ds	1
  6525  0000                     int$flags	set	btemp
  6526                           pclatu	equ	0xFFB
  6527                           pclath	equ	0xFFA
  6528                           tblptru	equ	0xFF8
  6529                           tblptrh	equ	0xFF7
  6530                           tblptrl	equ	0xFF6
  6531                           tablat	equ	0xFF5
  6532                           prodh	equ	0xFF4
  6533                           prodl	equ	0xFF3
  6534                           intcon	equ	0xFF2
  6535                           intcon2	equ	0xFF1
  6536                           postinc0	equ	0xFEE
  6537                           fsr0h	equ	0xFEA
  6538                           fsr0l	equ	0xFE9
  6539                           wreg	equ	0xFE8
  6540                           fsr1h	equ	0xFE2
  6541                           fsr1l	equ	0xFE1
  6542                           indf2	equ	0xFDF
  6543                           postinc2	equ	0xFDE
  6544                           postdec2	equ	0xFDD
  6545                           plusw2	equ	0xFDB
  6546                           fsr2h	equ	0xFDA
  6547                           fsr2l	equ	0xFD9
  6548                           status	equ	0xFD8


Data Sizes:
    Strings     66
    Constant    38
    Data        1
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      74
    BANK0           160     59      74
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_20(CODE[7]), weekday_3char(CODE[28]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 37
		 -> STR_2(CODE[5]), STR_1(CODE[37]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 30
		 -> display_dec@s(COMRAM[4]), main@str(BANK0[30]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    button_timer_interrupt@bt	PTR struct button size(2) Largest target is 4
		 -> dec(COMRAM[4]), inc(COMRAM[4]), mode(COMRAM[4]), 

    RTCC_adjust_time_button@cnt_dec	PTR struct button size(2) Largest target is 4
		 -> dec(COMRAM[4]), 

    RTCC_adjust_time_button@cnt_inc	PTR struct button size(2) Largest target is 4
		 -> inc(COMRAM[4]), 

    RTCC_adjust_time_button@tm	PTR struct . size(2) Largest target is 14
		 -> now(BANK0[14]), 

    RTCC_adjust_time_button@mode	PTR struct button size(2) Largest target is 4
		 -> mode(COMRAM[4]), 

    RTCC_adjust_time_dec@tm	PTR struct . size(2) Largest target is 14
		 -> now(BANK0[14]), 

    RTCC_adjust_time_inc@tm	PTR struct . size(2) Largest target is 14
		 -> now(BANK0[14]), 

    RTCC_adjust_time_cursor@tm	PTR struct . size(2) Largest target is 14
		 -> now(BANK0[14]), 

    RTCC_adjust_time_toggle@tm	PTR struct . size(2) Largest target is 14
		 -> now(BANK0[14]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 0

    sp__strcat	PTR unsigned char  size(2) Largest target is 0

    RTCC_from_epoch@tm	PTR struct . size(2) Largest target is 14
		 -> now(BANK0[14]), 

    RTCC_from_RTCC@tm	PTR struct . size(2) Largest target is 14
		 -> now(BANK0[14]), 

    caltime_to_epoch@tm	PTR struct . size(2) Largest target is 14
		 -> now(BANK0[14]), 

    epoch_to_caltime@tm	PTR struct . size(2) Largest target is 14
		 -> now(BANK0[14]), 

    caltime_to_RTCC@tm	PTR struct . size(2) Largest target is 14
		 -> now(BANK0[14]), 

    RTCC_to_caltime@tm	PTR struct . size(2) Largest target is 14
		 -> now(BANK0[14]), 

    get_quot_rem@quot	PTR unsigned long  size(2) Largest target is 4
		 -> epoch_to_caltime@num(BANK0[4]), 


Critical Paths under _main in COMRAM

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _RTCC_task->_RTCC_from_RTCC
    _RTCC_from_epoch->_epoch_to_caltime
    _epoch_to_caltime->_get_quot_rem
    _get_quot_rem->___lmul
    _caltime_to_RTCC->_d_to_x
    _d_to_x->___awdiv
    _RTCC_from_RTCC->_caltime_to_epoch
    _caltime_to_epoch->___lmul
    _month_length->___awmod
    ___lmul->___lldiv
    _RTCC_to_caltime->_x_to_d

Critical Paths under _ISR in COMRAM

    _ISR->_button_timer_interrupt

Critical Paths under _main in BANK0

    _main->_RTCC_adjust_time_button
    _RTCC_init->_RTCC_from_epoch
    _RTCC_adjust_time_button->_RTCC_adjust_time_dec
    _RTCC_adjust_time_button->_RTCC_adjust_time_inc
    _RTCC_adjust_time_inc->_RTCC_from_epoch
    _RTCC_adjust_time_dec->_RTCC_from_epoch
    _RTCC_from_epoch->_epoch_to_caltime
    _RTCC_from_RTCC->_caltime_to_epoch

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                31    31      0   67938
                                             28 BANK0     31    31      0
            _RTCC_adjust_time_button
                          _RTCC_task
                          _main_init
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             39    21     18    3720
                                             32 COMRAM    22     4     18
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             20 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     470
                                             20 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     470
                                             27 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     479
                                             20 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _main_init                                            0     0      0   15152
                          _RTCC_init
 ---------------------------------------------------------------------------------
 (2) _RTCC_init                                            0     0      0   15152
                     _RTCC_from_RTCC
                    _RTCC_from_epoch
 ---------------------------------------------------------------------------------
 (1) _RTCC_task                                            0     0      0    6325
                     _RTCC_from_RTCC
 ---------------------------------------------------------------------------------
 (1) _RTCC_adjust_time_button                              8     0      8   42520
                                             20 BANK0      8     0      8
            _RTCC_adjust_time_cursor
               _RTCC_adjust_time_dec
               _RTCC_adjust_time_inc
            _RTCC_adjust_time_toggle
 ---------------------------------------------------------------------------------
 (2) _RTCC_adjust_time_toggle                              2     0      2     169
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _RTCC_adjust_time_inc                                 8     6      2   20495
                                             12 BANK0      8     6      2
                     _RTCC_from_RTCC
                    _RTCC_from_epoch
                             ___lmul
                       _month_length
 ---------------------------------------------------------------------------------
 (2) _RTCC_adjust_time_dec                                 8     6      2   20495
                                             12 BANK0      8     6      2
                     _RTCC_from_RTCC
                    _RTCC_from_epoch
                             ___lmul
                       _month_length
 ---------------------------------------------------------------------------------
 (3) _RTCC_from_epoch                                      2     0      2    8827
                                             10 BANK0      2     0      2
                    _caltime_to_RTCC
                   _epoch_to_caltime
 ---------------------------------------------------------------------------------
 (4) _epoch_to_caltime                                    14    12      2    7208
                                             53 COMRAM     4     2      2
                                              0 BANK0     10    10      0
                       _get_quot_rem
                       _month_length
 ---------------------------------------------------------------------------------
 (5) _get_quot_rem                                         8     4      4    3710
                                             45 COMRAM     8     4      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             13     5      8     479
                                             20 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) _caltime_to_RTCC                                      2     0      2    1200
                                             29 COMRAM     2     0      2
                             _d_to_x
 ---------------------------------------------------------------------------------
 (5) _d_to_x                                               1     1      0     745
                                             28 COMRAM     1     1      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     683
                                             20 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RTCC_from_RTCC                                       2     0      2    6325
                                             51 COMRAM     2     0      2
                    _RTCC_to_caltime
                   _caltime_to_epoch
 ---------------------------------------------------------------------------------
 (4) _caltime_to_epoch                                    13    11      2    5148
                                             45 COMRAM     6     4      2
                                              0 BANK0      7     7      0
                             ___lmul
                       _month_length
 ---------------------------------------------------------------------------------
 (5) _month_length                                         6     5      1    2285
                                             26 COMRAM     6     5      1
                            ___awmod
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     909
                                             20 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8    2090
                                             33 COMRAM    12     4      8
                            ___lldiv (ARG)
                       _month_length (ARG)
 ---------------------------------------------------------------------------------
 (4) _RTCC_to_caltime                                      3     1      2     401
                                             22 COMRAM     3     1      2
                             _x_to_d
 ---------------------------------------------------------------------------------
 (5) _x_to_d                                               2     2      0      62
                                             20 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _RTCC_adjust_time_cursor                              2     0      2     389
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 15    15      0    1432
                                              5 COMRAM    15    15      0
             _button_timer_interrupt
 ---------------------------------------------------------------------------------
 (8) _button_timer_interrupt                               5     2      3    1432
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _RTCC_adjust_time_button
     _RTCC_adjust_time_cursor
     _RTCC_adjust_time_dec
       _RTCC_from_RTCC
         _RTCC_to_caltime
           _x_to_d
         _caltime_to_epoch
           ___lmul
             ___lldiv (ARG)
             _month_length (ARG)
               ___awmod
           _month_length
             ___awmod
       _RTCC_from_epoch
         _caltime_to_RTCC
           _d_to_x
             ___awdiv
         _epoch_to_caltime
           _get_quot_rem
             ___lldiv
             ___lmul
               ___lldiv (ARG)
               _month_length (ARG)
                 ___awmod
           _month_length
             ___awmod
       ___lmul
         ___lldiv (ARG)
         _month_length (ARG)
           ___awmod
       _month_length
         ___awmod
     _RTCC_adjust_time_inc
       _RTCC_from_RTCC
         _RTCC_to_caltime
           _x_to_d
         _caltime_to_epoch
           ___lmul
             ___lldiv (ARG)
             _month_length (ARG)
               ___awmod
           _month_length
             ___awmod
       _RTCC_from_epoch
         _caltime_to_RTCC
           _d_to_x
             ___awdiv
         _epoch_to_caltime
           _get_quot_rem
             ___lldiv
             ___lmul
               ___lldiv (ARG)
               _month_length (ARG)
                 ___awmod
           _month_length
             ___awmod
       ___lmul
         ___lldiv (ARG)
         _month_length (ARG)
           ___awmod
       _month_length
         ___awmod
     _RTCC_adjust_time_toggle
   _RTCC_task
     _RTCC_from_RTCC
       _RTCC_to_caltime
         _x_to_d
       _caltime_to_epoch
         ___lmul
           ___lldiv (ARG)
           _month_length (ARG)
             ___awmod
         _month_length
           ___awmod
   _main_init
     _RTCC_init
       _RTCC_from_RTCC
         _RTCC_to_caltime
           _x_to_d
         _caltime_to_epoch
           ___lmul
             ___lldiv (ARG)
             _month_length (ARG)
               ___awmod
           _month_length
             ___awmod
       _RTCC_from_epoch
         _caltime_to_RTCC
           _d_to_x
             ___awdiv
         _epoch_to_caltime
           _get_quot_rem
             ___lldiv
             ___lmul
               ___lldiv (ARG)
               _month_length (ARG)
                 ___awmod
           _month_length
             ___awmod
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _ISR (ROOT)
   _button_timer_interrupt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EAF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3B      4A       5       46.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      4A       1       78.7%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      94       6        0.0%
DATA                 0      0      94       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Nov 16 20:43:58 2015

                              l97 20DC                      ___awdiv@sign 001A  
             ___wmul@multiplicand 0017                 ??_RTCC_from_epoch 003A  
                    __CFG_CP0$OFF 000000                               l101 2174  
                             l161 2274                               l243 163A  
                             l180 1DEE                               l167 21AC  
                             l258 18BA                               l283 27A6  
                             l735 2558                               l788 275A  
                             l798 279C                               _ISR 0008  
                   ?_get_quot_rem 002E                caltime_to_epoch@tm 002E  
                             _dec 003E                               _inc 0042  
                             _now 009C                      ___awmod@sign 001A  
                             prod 000FF3                               wreg 000FE8  
                      _TXSTA1bits 000FAD       RTCC_adjust_time_button@mode 0076  
         _RTCC_adjust_time_button 1ED8           _RTCC_adjust_time_cursor 1FF8  
         _RTCC_adjust_time_toggle 2810                              ?_ISR 0001  
                            l3008 238C                              l3112 1B32  
                            l3120 1B80                              l3106 1B22  
                            l3202 17BC                              l3210 183C  
                            l2242 2834                              l2260 2080  
                            l2252 203C                              l3124 1B9E  
                            l3108 1B28                              l3204 17C4  
                            l3118 1B7C                              l3230 190E  
                            l3214 1870                              l3150 266C  
                            l2264 20A2                              l2256 205E  
                            l2248 201A                              l3128 1BF0  
                            l3208 1824                              l3304 2750  
                            l3320 2792                              l3312 2772  
                            l3242 19D8                              l3234 193A  
                            l3226 18E2                              l3314 277A  
                            l2268 20C4                              l3092 1E64  
                            l3252 1A3C                              l3260 1ABC  
                            l3180 168E                              l3316 277E  
                            l3500 1154                              l3086 1E58  
                            l3254 1A44                              l3238 19B0  
                            l3430 1FC4                              l3502 1188  
                            l3088 1E5C                              l3264 1AF0  
                            l3192 1758                              l3184 16BA  
                            l3176 1662                              l3424 1F92  
                            l3416 1F4C                              l3512 11B8  
                            l3258 1AA4                              l3514 11BE  
                            l3450 0FAE                              l3610 2192  
                            l3196 1762                              l3188 1730  
                            l3292 2728                              l3276 2880  
                            l3532 121A                              l3444 0F94  
                            l2910 249E                              l3294 2730  
                            l3526 11FA                              l3446 0FA6  
                            l3438 0F78                              l2912 24A6  
                            l2904 2488                              l3296 2734  
                            l3536 124E                              l3472 1082  
                            l3464 1050                              l3456 0FE6  
                            l2930 24DE                              l2922 24C6  
                            l2914 24AA                              l3570 12F2  
                            l3562 12D0                              l3546 127A  
                            l3554 12A0                              l3538 1258  
                            l3490 1118                              l3482 10E4  
                            l3474 108E                              l3556 12AC  
                            l3484 10F0                              l3476 1094  
                            l3580 1378                              l2950 2614  
                            l2942 25FA                              l2926 24D0  
                            l2952 261C                              l3576 134E  
                            l3568 12EC                              l3496 113C  
                            l3488 1100                              l2882 26CC  
                            l2954 2620                              l2962 263E  
                            l2946 2606                              l3578 135A  
                            l2980 251A                              l2886 26E0  
                            l2966 264C                              l2958 2634  
                            l2976 250A                              l2898 2478  
                            l2978 2516                              l2988 254A  
              __CFG_WPFP$PAGE_127 000000                              STR_1 0F27  
                            STR_2 0F5C                              STR_5 0F65  
                            STR_8 0F67                              u3100 234A  
                            u3110 234C                              u3120 2370  
                            u3140 2382                              u3150 2384  
                            u3160 23C0                              u3170 23C2  
                            u3138 2372                              i2l82 00B6  
                            i2l85 00BE                              i2l79 004A  
                            _main 20D6                              _mode 0046  
        button_timer_interrupt@bt 0001                              fsr0h 000FEA  
                            fsr1h 000FE2                              fsr0l 000FE9  
                            fsr2h 000FDA                              fsr1l 000FE1  
                            indf2 000FDF                              fsr2l 000FD9  
                            btemp 004B            __CFG_DSWDTOSC$T1OSCREF 000000  
                            pclat 000FFA                              prodh 000FF4  
                            prodl 000FF3                              start 00FA  
                   __CFG_IESO$OFF 000000        RTCC_adjust_time_dec@i_1784 0072  
                    ___param_bank 000010                             ??_ISR 0006  
               ??_RTCC_to_caltime 0019                     __CFG_PLLDIV$2 000000  
                    _BAUDCON1bits 000F7E                             ?_main 0001  
                  ??_get_quot_rem 0032                   __end_of___awdiv 24E8  
                           STR_10 0F63                             STR_20 0F55  
                           STR_14 0F61                             STR_16 0F4C  
                 __end_of___awmod 2656                   __end_of___lldiv 256A  
                 ___awdiv@divisor 0017                             _LATB2 007C52  
                 __end_of___lwdiv 2764                   __end_of___lwmod 27A6  
                           i2l291 13B0                             i2l292 13D4  
                           i2l293 13F6                             i2l294 1418  
                           i2l295 1438                             i2l296 1458  
                           i2l297 1478                             i2l298 1498  
                 ___awdiv@counter 0019                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
             ___lmul@multiplicand 0026                    __CFG_FCMEN$OFF 000000  
            caltime_to_epoch@year 0060                   __end_of_dpowers 0F0B  
                 __end_of_isdigit 2888                __size_of_RTCC_init 0066  
              __size_of_RTCC_task 0036                             main@i 009A  
       RTCC_adjust_time_button@tm 0074         RTCC_adjust_time_cursor@tm 0015  
                           tablat 000FF5                             plusw2 000FDB  
                           status 000FD8                   __end_of_sprintf 1386  
               month_length@month 001B                   __initialization 27DC  
                    __end_of_main 21AC                  RTCC_from_RTCC@tm 0034  
      RTCC_adjust_time_inc@i_1754 0072         RTCC_adjust_time_toggle@tm 0015  
                          ??_main 003A                     __activetblptr 000003  
       ??_RTCC_adjust_time_button 003A         ??_RTCC_adjust_time_cursor 0017  
       ??_RTCC_adjust_time_toggle 0017                            _EECON2 000FA7  
                          _ANCON0 000F48                            _ANCON1 000F49  
                ___awdiv@dividend 0015                            i2l2460 1528  
                          i2l2452 14E0                    __CFG_WDTEN$OFF 000000  
                          i2l2472 1598                            i2l2464 154C  
                          i2l2456 1504                            i2l2480 15E2  
                          i2l2448 14BC                            i2l2476 15BE  
                          i2l2468 1572                            i2l2772 00B0  
                          _RCREG1 000FAF                            _RTCCAL 000F3E  
                          _SPBRG1 000FB0                    __CFG_WPCFG$OFF 000000  
                          _TXREG1 000FAE                    __CFG_WPDIS$OFF 000000  
              epoch_to_caltime@tm 0036                    __CFG_XINST$OFF 000000  
               ?_epoch_to_caltime 0036             caltime_to_epoch@epoch 0062  
           caltime_to_epoch@month 0066                            ___lmul 26BC  
                 _caltime_to_RTCC 21AC                            ___wmul 2844  
              ??_epoch_to_caltime 0038                         ??___awdiv 0019  
                       ??___awmod 0019      __end_of_RTCC_adjust_time_dec 1B08  
    __end_of_RTCC_adjust_time_inc 1888                            _d_to_x 2888  
                       ??___lldiv 001D                 __end_of_RTCC_init 26BC  
                       ??___lwdiv 0019                 __end_of_RTCC_task 27DC  
                       ??___lwmod 0020                            clear_0 27E2  
                          clear_1 27EE                   __CFG_CLKOEC$OFF 000000  
                ___awdiv@quotient 001B                   ___awmod@divisor 0017  
                 ___awmod@counter 0019                            _x_to_d 28DA  
       __size_of_caltime_to_epoch 0222                      __pdataCOMRAM 004A  
                       ??_isdigit 0015                      __mediumconst 0000  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                         ??_sprintf 0033  
  RTCC_adjust_time_button@cnt_dec 007A              __CFG_LS48MHZ$SYS48X8 000000  
  RTCC_adjust_time_button@cnt_inc 0078                        __accesstop 0060  
         __end_of__initialization 2806              __end_of_get_quot_rem 2464  
                   ___rparam_used 000001                   _RTCC_from_epoch 28A6  
            __CFG_WPEND$PAGE_WPFP 000000                    __pcstackCOMRAM 0001  
                 __CFG_DSWDTPS$G2 000000        caltime_to_epoch@month_1574 0061  
          RTCC_adjust_time_dec@tm 006C                      sprintf@width 006B  
          RTCC_adjust_time_inc@tm 006C                __size_of_main_init 007C  
                      __pbssBANK0 009B           __end_of_caltime_to_RTCC 2274  
                 _RTCC_to_caltime 2274             __end_of_weekday_3char 0F27  
           RTCC_task@prev_halfsec 003C                           ?___lmul 0022  
                         ?___wmul 0015                           ?_d_to_x 0001  
                  ___lmul@product 002A                           ?_x_to_d 0001  
              __CFG_OSC$INTOSCPLL 000000                   __CFG_WDTPS$1024 000000  
                         _SPBRGH1 000F7F                           _RTCVALH 000F3B  
                         _RTCVALL 000F3A           __end_of_RTCC_from_epoch 28C0  
            _RTCC_adjust_time_dec 1888              _RTCC_adjust_time_inc 1608  
                __CFG_CFGPLLEN$ON 000000          ??_button_timer_interrupt 0004  
                   ?_month_length 001B               epoch_to_caltime@day 0062  
             epoch_to_caltime@num 0066                 RTCC_from_epoch@tm 006A  
                         __Hparam 0000                           __Lparam 0000  
                         ___awdiv 2464                   __size_of___lmul 0056  
                         ___awmod 25E6                           ___lldiv 24E8  
                 __size_of___wmul 0026                           ___lwdiv 2712  
                         ___lwmod 2764                   __size_of_d_to_x 001E  
                    __psmallconst 0F00                   __CFG_STVREN$OFF 000000  
               __end_of_main_init 25E6       epoch_to_caltime@month_cache 004A  
                         __pcinit 27DC                           __ramtop 0F00  
                         __ptext0 20D6                           __ptext1 0F6A  
                         __ptext2 286A                           __ptext3 2844  
                         __ptext4 2764                           __ptext5 2712  
                         __ptext6 256A                           __ptext7 2656  
                         __ptext8 27A6                           __ptext9 1ED8  
                 __size_of_x_to_d 0018                  _time_change_flag 009B  
                _caltime_to_epoch 1B08                      __size_of_ISR 00F2  
                       _T1CONbits 000FCD                           _dpowers 0F01  
         __size_of_RTCC_from_RTCC 001A                           _isdigit 286A  
                       _T3CONbits 000F79                  ___awmod@dividend 0015  
                         _sprintf 0F6A           __end_of_RTCC_to_caltime 2322  
                         main@str 007C             ?_RTCC_adjust_time_dec 006C  
           ?_RTCC_adjust_time_inc 006C             __size_of_get_quot_rem 009C  
            end_of_initialization 2806                    ??_month_length 001C  
                ?_caltime_to_RTCC 001E                   ___lldiv@divisor 0019  
                 ___lldiv@counter 0021                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
                       _PORTBbits 000F81                  __CFG_DSBOREN$OFF 000000  
                       _RTCC_init 2656                         _RTCC_task 27A6  
       epoch_to_caltime@day_cache 003A                      _get_quot_rem 23C8  
       __size_of_epoch_to_caltime 01AE                  __CFG_CPUDIV$OSC1 000000  
               __CFG_SOSCSEL$HIGH 000000                  ?_RTCC_from_epoch 006A  
 __size_of_button_timer_interrupt 0282                  __CFG_IOL1WAY$OFF 000000  
             __CFG_MSSP7B_EN$MSK7 000000                    __end_of___lmul 2712  
        ?_RTCC_adjust_time_button 0074          ?_RTCC_adjust_time_cursor 0015  
                  __end_of___wmul 286A                    __end_of_d_to_x 28A6  
                   __pidataCOMRAM 28F2          ?_RTCC_adjust_time_toggle 0015  
                      ?_RTCC_init 0001                        ?_RTCC_task 0001  
                __CFG_DSWDTEN$OFF 000000                    __end_of_x_to_d 28F2  
           epoch_to_caltime@month 0065               start_initialization 27DC  
                month_length@year 0020                       __end_of_ISR 00FA  
          ??_RTCC_adjust_time_dec 006E            ??_RTCC_adjust_time_inc 006E  
                ?_RTCC_to_caltime 0017                          ??___lmul 002A  
                        ??___wmul 0019                          ??_d_to_x 001D  
               __CFG_ADCSEL$BIT12 000000            _button_timer_interrupt 1386  
                        ??_x_to_d 0015              __end_of_month_length 23C8  
                  _RTCC_from_RTCC 28C0                       __pbssCOMRAM 003A  
             RTCC_to_caltime@dumy 0019                     __pcstackBANK0 0060  
                    _isdigit$2233 0016                       sprintf@flag 0069  
           RTCC_adjust_time_dec@i 0073                       sprintf@prec 0060  
           RTCC_adjust_time_inc@i 0073          __end_of_caltime_to_epoch 1D2A  
                ___lwdiv@dividend 0015   __end_of_RTCC_adjust_time_button 1FF8  
 __end_of_RTCC_adjust_time_cursor 20D6                         __pintcode 0008  
 __end_of_RTCC_adjust_time_toggle 2844                          ?___awdiv 0015  
                        ?___awmod 0015                          ?___lldiv 0015  
                        ?___lwdiv 0015                          ?___lwmod 001C  
          __end_of_RTCC_from_RTCC 28DA                       ??_RTCC_init 003A  
                     ??_RTCC_task 0036                       __smallconst 0F00  
                       _main_init 256A                          ?_isdigit 0001  
                _epoch_to_caltime 1D2A              __CFG_RTCOSC$T1OSCREF 000000  
                     _PADCFG1bits 000F3C                  ___lwdiv@quotient 001A  
                        ?_sprintf 0021                         d_to_x@dec 001D  
                  ___wmul@product 0019                          _LATAbits 000F89  
                        _IPR1bits 000F9F                          _IPR2bits 000FA2  
                        _PIE1bits 000F9D                          _PIE2bits 000FA0  
                        i2u231_40 1562                          i2u232_40 1588  
                        i2u233_40 15AE                          i2u234_40 15D4  
                        i2u272_40 005C                          _PIR1bits 000F9E  
                        i2u274_40 0078                          i2u273_48 005E  
                        i2u275_40 007A                          _PIR2bits 000FA1  
                        i2u276_40 0090                          i2u277_40 0092  
                        i2u278_40 00A8                          i2u279_40 00AA  
      epoch_to_caltime@year_cache 003D                   ?_RTCC_from_RTCC 0034  
               ___wmul@multiplier 0015    button_timer_interrupt@sw_value 0003  
                      ?_main_init 0001                 ___lmul@multiplier 0022  
                     _INTCON2bits 000FF1              epoch_to_caltime@year 0064  
                        __Hrparam 0000                          __Lrparam 0000  
                   _weekday_3char 0F0B             __size_of_month_length 00A6  
        __size_of_caltime_to_RTCC 00C8                  __size_of___awdiv 0084  
                __size_of___awmod 0070                  __size_of___lldiv 0082  
                __size_of___lwdiv 0052                  __size_of___lwmod 0042  
                      sprintf@len 0067                        sprintf@val 0065  
                __size_of_isdigit 001E                   ___lwdiv@divisor 0017  
                 ___lwdiv@counter 0019                          __ptext10 2810  
                        __ptext11 1608                          __ptext20 28C0  
                        __ptext12 1888                          __ptext21 1B08  
                        __ptext13 28A6                          __ptext22 2322  
                        __ptext14 1D2A                          __ptext23 25E6  
                        __ptext15 23C8                          __ptext24 26BC  
                        __ptext16 24E8                          __ptext25 2274  
                        __ptext17 21AC                          __ptext26 28DA  
                        __ptext18 2888                          __ptext27 1FF8  
                        __ptext19 2464                          __ptext29 1386  
__size_of_RTCC_adjust_time_button 0120  __size_of_RTCC_adjust_time_cursor 00DE  
__size_of_RTCC_adjust_time_toggle 0034                  __size_of_sprintf 041C  
                   __size_of_main 00D6                      _month_length 2322  
        __size_of_RTCC_from_epoch 001A           ?_button_timer_interrupt 0001  
                        int$flags 004B                         x_to_d@hex 0016  
                     ??_main_init 003A                       _OSCTUNEbits 000F9B  
                      _INTCONbits 000FF2                          isdigit@c 0017  
                get_quot_rem@quot 002E                 RTCC_to_caltime@tm 0017  
   __size_of_RTCC_adjust_time_dec 0280     __size_of_RTCC_adjust_time_inc 0280  
                        intlevel2 0000                         sprintf@ap 0061  
                       sprintf@cp 0063                         sprintf@sp 0021  
                ___lwmod@dividend 001C                  ___lldiv@dividend 0015  
                      _RCSTA1bits 000FAC                 ?_caltime_to_epoch 002E  
        __end_of_epoch_to_caltime 1ED8          __size_of_RTCC_to_caltime 00AE  
                      _OSCCONbits 000FD3    __end_of_button_timer_interrupt 1608  
              ??_caltime_to_epoch 0030                   get_quot_rem@div 0030  
                 get_quot_rem@num 0032                        _RTCCFGbits 000F3F  
                        sprintf@c 006A                          sprintf@f 0023  
                ___lldiv@quotient 001D                   ___lwmod@divisor 001E  
               caltime_to_RTCC@tm 001E                 ??_caltime_to_RTCC 0020  
                 ___lwmod@counter 0020   epoch_to_caltime@day_since_epoch 0060  
                ??_RTCC_from_RTCC 0036  
